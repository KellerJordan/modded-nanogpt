Model,Organization,Publication date,Domain,Task,Parameters,Parameters notes,Training compute (FLOP),Training compute notes,Training dataset,Training dataset size (datapoints),Dataset size notes,Confidence,Link,Reference,Citations,Authors,Abstract,Organization categorization,Country (of organization),Notability criteria,Notability criteria notes,Epochs,Training time (hours),Training time notes,Training hardware,Hardware quantity,Hardware utilization,Training compute cost (2023 USD),Compute cost notes,Training power draw (W),Base model,Finetune compute (FLOP),Finetune compute notes,Batch size,Batch size notes,Model accessibility,Training code accessibility,Inference code accessibility,Accessibility notes,Numerical format,Frontier model
Claude Sonnet 4,Anthropic,2025-05-22,"Language,Multimodal,Vision","Code generation,Language modeling/generation,Quantitative reasoning,Search,Visual question answering,Translation,Image captioning,Instruction interpretation,Mathematical reasoning,Visual puzzles,Code autocompletion,Chat,Character recognition,Language modeling,Language generation,Text autocompletion,Retrieval-augmented generation,System control",,,,Flagship model from a leading developer in mid-2025; very likely it used >1e25 FLOP.,Unspecified unreleased,,,Unknown,"https://www.anthropic.com/claude/sonnet

https://www.anthropic.com/news/claude-4","Hybrid reasoning model with superior intelligence for high-volume use cases, and 200K context window",,,"Claude Sonnet 4 can understand nuanced instructions and context, recognize and correct its own mistakes, and create sophisticated analysis and insights from complex data. Combined with superior coding, vision, and writing skills, you can use Claude Sonnet 4 for a variety of use cases.

Claude Sonnet 4 can produce near-instant responses or extended, step-by-step thinking that is made visible to the user. API users also have fine-grained control over how long the model thinks for.",Industry,United States of America,Training cost,,,,,,,,,,,,,,,,API access,Unreleased,,,,
Claude Opus 4,Anthropic,2025-05-22,"Language,Multimodal,Vision","Code generation,Language modeling/generation,Quantitative reasoning,Search,Visual question answering,Translation,Image captioning,Instruction interpretation,Mathematical reasoning,Visual puzzles,Code autocompletion,Chat,Character recognition,Language modeling,Language generation,Text autocompletion,Retrieval-augmented generation,System control",,,,Flagship model from a leading developer in mid-2025; very likely it used >1e25 FLOP.,Unspecified unreleased,,,Unknown,"https://www.anthropic.com/claude/opus

https://www.anthropic.com/news/claude-4","Hybrid reasoning model that pushes the frontier for coding and AI agents, featuring a 200K context window",,,"Claude Opus 4 is our most powerful model yet and the best coding model in the world, leading on SWE-bench (72.5%) and Terminal-bench (43.2%). It delivers sustained performance on long-running tasks that require focused effort and thousands of steps, with the ability to work continuously for several hours—dramatically outperforming all Sonnet models and significantly expanding what AI agents can accomplish.",Industry,United States of America,Training cost,,,,,,,,,,,,,,,,API access,Unreleased,,,,
Veo 3,Google DeepMind,2025-05-21,"Video,Vision","Video generation,Image-to-video,Text-to-video",,,,,Unspecified unreleased,,,Unknown,https://deepmind.google/models/veo/,Our state-of-the-art video generation model,,"Abhishek Sharma, Alina Kuznetsova, Ali Razavi, Aleksander Holynski, Alina Kuznetsova, Ankush Gupta, Austin Waters, Ben Poole, Daniel Tanis, Derek Gasaway, Dumitru Erhan, Enric Corona, Frank Belletti, Gabe Barth-Maron, Hakan Erdogan, Henna Nandwani, Hernan Moraldo, Ilya Figotin, Igor Saprykin, Jason Baldridge, Jeff Donahue, Jimmy Shi, Kurtis David, Mai Gimenez, Medhini Narasimhan, Miaosen Wang, Mingda Zhang, Mohammad Babaeizadeh, Mukul Bhutani, Nikhil Khadke, Nilpa Jha, Pieter-Jan Kindermans, Poorva Rane, Rachel Hornung, Ricky Wong, Ruben Villegas, Ruiqi Gao, Ryan Poplin, Salah Zaiem, Sayna Ebrahimi, Scott Wisdom, Shlomi Fruchter, Sophia Sanchez, Vikas Verma, Viral Carpenter, Xinchen Yan, Xinyu Wang, Yiwen Luo, Zhichao Yin, Zu Kim","Re-designed for greater realism
Greater realism and fidelity, including 4k output and Veo 3’s real world physics and audio

Follows prompts like never before
Improved prompt adherence, meaning more accurate responses to your instructions.

Improved creative control
New capabilities to achieve new levels of control, consistency, and creativity.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",SOTA improvement,https://deepmind.google/models/veo/evals/,,,,,,,,,,,,,,,API access,Unreleased,,https://cloud.google.com/vertex-ai/generative-ai/docs/models/veo/3-0-generate-preview,,
gpt-image-1,OpenAI,2025-04-23,"Image generation,Vision","Image generation,Text-to-image",,,,,Unspecified unreleased,,,Unknown,https://openai.com/index/image-generation-api/,Introducing our latest image generation model in the API,,,"Today, we’re bringing the natively multimodal model that powers this experience in ChatGPT to the API via gpt-image-1, enabling developers and businesses to easily integrate high-quality, professional-grade image generation directly into their own tools and platforms. The model’s versatility allows it to create images across diverse styles, faithfully follow custom guidelines, leverage world knowledge, and accurately render text—unlocking countless practical applications across multiple domains.",Industry,United States of America,Significant use,"""When we introduced image generation in ChatGPT last month, it quickly became one of our most popular features: over 130 million users around the world created more than 700 million images in just the first week.""

They also describe the model as SOTA:
https://platform.openai.com/docs/models/gpt-image-1",,,,,,,,,,,,,,,API access,Unreleased,,,,
Pangu Ultra,Huawei,2025-04-10,Language,"Code generation,Language modeling/generation",135000000000.0,,1.0692e+25,"When compared to Llama 3.1 405B, Pangu Ultra achieves better scores on most of the challenging benchmarks, while utilizing only about 29% of the training FLOPs required by Llama 405B.

Compute = 6 FLOP/token/param *  135e9 params *13.2e12 tokens = 1.069200e+25 FLOP
This is consistent with 29% of Llama 405B's compute: 3.8e25*0.29=1.1e25.",,13200000000000.0, 13.2 trillion tokens,Confident,https://arxiv.org/abs/2504.07866,"Pangu Ultra: Pushing the Limits of Dense Large Language Models on Ascend NPUs
",0.0,"Yichun Yin, Wenyong Huang, Kaikai Song, Yehui Tang, Xueyu Wu, Wei Guo, Peng Guo, Yaoyuan Wang, Xiaojun Meng, Yasheng Wang, Dong Li, Can Chen, Dandan Tu, Yin Li, Fisher Yu, Ruiming Tang, Yunhe Wang, Baojun Wang, Bin Wang, Bo Wang, Boxiao Liu, Changzheng Zhang, Duyu Tang, Fei Mi, Hui Jin, Jiansheng Wei, Jiarui Qin, Jinpeng Li, Jun Zhao, Liqun Deng, Lin Li, Minghui Xu, Naifu Zhang, Nianzu Zheng, Qiang Li, Rongju Ruan, Shengjun Cheng, Tianyu Guo, Wei He, Wei Li, Weiwen Liu, Wulong Liu, Xinyi Dai, Yonghan Dong, Yu Pan, Yue Li, Yufei Wang, Yujun Li, Yunsheng Ni, Zhe Liu, Zhenhe Zhang, Zhicheng Liu","We present Pangu Ultra, a Large Language Model (LLM) with 135 billion parameters and dense Transformer modules trained on Ascend Neural Processing Units (NPUs). Although the field of LLM has been witnessing unprecedented advances in pushing the scale and capability of LLM in recent years, training such a large-scale model still involves significant optimization and system challenges. To stabilize the training process, we propose depth-scaled sandwich normalization, which effectively eliminates loss spikes during the training process of deep models. We pre-train our model on 13.2 trillion diverse and high-quality tokens and further enhance its reasoning capabilities during post-training. To perform such large-scale training efficiently, we utilize 8,192 Ascend NPUs with a series of system optimizations. Evaluations on multiple diverse benchmarks indicate that Pangu Ultra significantly advances the state-of-the-art capabilities of dense LLMs such as Llama 405B and Mistral Large 2, and even achieves competitive results with DeepSeek-R1, whose sparse model structure contains much more parameters. Our exploration demonstrates that Ascend NPUs are capable of efficiently and effectively training dense models with more than 100 billion parameters. Our model and system will be available for our commercial customers.",Industry,China,SOTA improvement,"A closer examination reveals that Pangu Ultra excels on Chinese benchmarks, surpassing both Qwen 2.5 72B and DeepSeek V3, the current best-performing Chinese model. In addition, when compared to Llama 3.1 405B, Pangu Ultra achieves better scores on most of the challenging benchmarks, while utilizing only about 29% of the training FLOPs required by Llama 405B. These results suggest the effectiveness of our model architecture and the high quality of our training data.",,,,Huawei Ascend 910B,8192.0,,,,6426121.277196856,,,,,,Hosted access (no API),Unreleased,,"""Our model and system will be available for our commercial customers""",,
Llama 4 Behemoth (preview),Meta AI,2025-04-05,"Multimodal,Language,Vision","Chat,Code generation,Visual question answering,Translation,Language modeling/generation,Quantitative reasoning,Question answering",2000000000000.0,"""Llama 4 Behemoth, a 288 billion active parameter model with 16 experts that is our most powerful yet and among the world’s smartest LLMs.""",5.18400000000001e+25,"Behemoth's training dataset is at least 30T tokens:
https://ai.meta.com/blog/llama-4-multimodal-intelligence/ 

6 FLOP / parameter / token * 288 * 10^9 activated parameters * 30 * 10^12 tokens = 5.184e+25 FLOP",,30000000000000.0,"""The overall data mixture for training consisted of more than 30 trillion tokens, which is more than double the Llama 3 pre-training mixture and includes diverse text, image, and video datasets.""",Likely,https://ai.meta.com/blog/llama-4-multimodal-intelligence/,The Llama 4 herd: The beginning of a new era of natively multimodal AI innovation,,,"We’re sharing the first models in the Llama 4 herd, which will enable people to build more personalized multimodal experiences.
...
Llama 4 Behemoth, a 288 billion active parameter model with 16 experts that is our most powerful yet and among the world’s smartest LLMs. Llama 4 Behemoth outperforms GPT-4.5, Claude Sonnet 3.7, and Gemini 2.0 Pro on several STEM benchmarks. Llama 4 Behemoth is still training, and we’re excited to share more details about it even while it’s still in flight.
Download the Llama 4 Scout and Llama 4 Maverick models today on llama.com and Hugging Face. Try Meta AI built with Llama 4 in WhatsApp, Messenger, Instagram Direct, and on the web.",Industry,United States of America,Training cost,,,,"Based on the model cards for Llama 4 Scout and Maverick, they seem to be using H100-80GB GPUs, despite the article saying that 390 TFLOPS/GPU was a high MFU (it is high throughput, but <20% MFU in FP8).",,32000.0,,,,,,,,,,Unreleased,Unreleased,,"""While we’re not yet releasing Llama 4 Behemoth as it is still training""",,True
EXAONE Deep 32B,LG AI Research,2025-03-16,Language,"Language modeling/generation,Question answering,Quantitative reasoning,Code generation",32000000000.0,32B,1.26e+24,"1.25 × 10^24 (base model reported training compute) + 7.04 × 10^21 (finetune compute) = 1.26 × 10^24 FLOP

Table 1",Unspecified unreleased,12000000000.0,"""To enhance the reasoning capabilities of language models, we have utilized 1.6M instances for SFT and 20K instances of preference data for DPO. The SFT dataset contains approximately 12B tokens""",Confident,https://arxiv.org/abs/2503.12524,EXAONE Deep: LLMs with Enhanced Reasoning Performance,,"LG AI Research, Kyunghoon Bae, Eunbi Choi, Kibong Choi, Stanley Jungkyu Choi, Yemuk Choi, Seokhee Hong, Junwon Hwang, Hyojin Jeon, Kijeong Jeon, Gerrard Jeongwon Jo, Hyunjik Jo, Jiyeon Jung, Hyosang Kim, Joonkee Kim, Seonghwan Kim, Soyeon Kim, Sunkyoung Kim, Yireun Kim, Yongil Kim, Youchul Kim, Edward Hwayoung Lee, Haeju Lee, Honglak Lee, Jinsik Lee, Kyungmin Lee, Sangha Park, Yongmin Park, Sihoon Yang, Heuiyeen Yeen, Sihyuk Yi, Hyeongu Yun","We present EXAONE Deep series, which exhibits superior capabilities in various reasoning tasks, including math and coding benchmarks. We train our models mainly on the reasoning-specialized dataset that incorporates long streams of thought processes. Evaluation results show that our smaller models, EXAONE Deep 2.4B and 7.8B, outperform other models of comparable size, while the largest model, EXAONE Deep 32B, demonstrates competitive performance against leading open-weight models. All EXAONE Deep models are openly available for research purposes and can be downloaded from this https URL",Industry,Korea (Republic of),Training cost,"512 H100 for 3 months

Math – EXAONE Deep 32B Outperforms Competitors in High-Difficulty Math Benchmarks Even at Just 5% of Their Size

MMLU – EXAONE Deep 32B Achieves 83.0 score, Proving the Best Performance Among Domestic Models",,2160.0,512 H100 GPUs were used for three months,NVIDIA H100 SXM5 80GB,512.0,0.3156,,,703248.4282353076,EXAONE 3.5 32B,7.04e+21,"Table 1 (reported): 7.04 × 10^21 FLOP

6ND = 6*32B parameters * 12B tokens = 2.304e+21 FLOP",,,Open weights (non-commercial),Unreleased,,"https://huggingface.co/LGAI-EXAONE/EXAONE-Deep-32B

Exaone License",BF16,
ERNIE-4.5-VL-424B-A47B (文心大模型4.5),Baidu,2025-03-16,"Multimodal,Language,Vision,Video","Language modeling/generation,Visual question answering,Video description,Speech recognition,Quantitative reasoning,Code generation,Translation,Question answering,Character recognition",424000000000.0,"MoE:
total parameters - 424B
active parameters - 47B

""ViT encoder comprising 630 million parameters""",,"Unlikely over 1e25 FLOP, as the ERNIE-4.5 LLM pretraining used 3e24 FLOP.",Unspecified unreleased,,,Confident,"https://www.datacamp.com/blog/ernie-4-5-x1

https://yiyan.baidu.com/blog/publication/ERNIE_Technical_Report.pdf","Baidu's ERNIE 4.5 & X1: Features, Access, DeepSeek Comparison
",,,"In this report, we introduce ERNIE 4.5, a new family of large-scale multimodal models comprising 10 distinct variants. The model family consist of Mixture-of-Experts (MoE) models with 47B and 3B active parameters, with the largest model having 424B total parameters, as well as a 0.3B dense model. For the MoE architecture, we propose a novel heterogeneous modality structure, which supports parameter sharing across modalities while also allowing dedicated parameters for each individual modality.
This MoE architecture has the advantage to enhance multimodal understanding without compromising, and even improving, performance on text-related tasks. All of our models are trained with optimal efficiency using the PaddlePaddle deep learning framework, which also enables high-performance inference and streamlined deployment for them. We achieve 47% Model FLOPs Utilization (MFU) in our largest ERNIE 4.5 language model pre-training. Experimental results show that our models achieve state-of-the-art performance across multiple text and multimodal benchmarks, especially in instruction following, world knowledge memorization, visual understanding and multimodal reasoning. All models are publicly accessible under Apache 2.0 to support future research and development in the field. Additionally, we open source the development toolkits for ERNIE 4.5, featuring industrial-grade capabilities, resourceefficient training and inference workflows, and multi-hardware compatibility.",Industry,China,SOTA improvement,"ERNIE 4.5 surpassed GPT-4o in six out of seven evaluated benchmarks:

CCBench: Evaluates common-sense reasoning across text and images. ERNIE 4.5 scored approximately 81, slightly outperforming GPT-4o’s ~79.
OCRBench: Assesses optical character recognition capabilities, focusing on text extraction from images. ERNIE 4.5 achieved around 88, surpassing GPT-4o’s ~81.
ChartQA: Tests understanding of data presented in charts. ERNIE 4.5 scored ~82, marginally ahead of GPT-4o’s ~81.
MMMU: Measures multimodal reasoning across various topics. Here, GPT-4o led with ~70, while ERNIE 4.5 scored ~64, indicating an area for improvement.
MathVista: Evaluates mathematical reasoning in visual contexts. ERNIE 4.5 scored ~69, outperforming GPT-4o’s ~61.
DocVQA: Assesses the ability to answer questions based on document visuals. ERNIE 4.5 excelled with a score of ~91, compared to GPT-4o’s ~85.
MVBench: Focuses on temporal understanding in dynamic video tasks, requiring reasoning over sequences of frames. ERNIE 4.5 scored ~72, significantly outperforming GPT-4o’s ~63.
Text-only benchmarks
On text-only tasks, ERNIE 4.5 achieved an average score of 79.6, slightly ahead of GPT-4.5’s average of 79.14, and also surpassing DeepSeek-V3 (~77).",,,,,,,,,,ERNIE-4.5-300B-A47B,,,,,Open weights (unrestricted),Unreleased,Open source,"Apache 2.0:
https://huggingface.co/baidu/ERNIE-4.5-VL-424B-A47B-Base-PT

Apache 2.0 for inference code
https://github.com/PaddlePaddle/ERNIE",FP8,
Hunyuan-TurboS,Tencent,2025-03-11,Language,"Language modeling/generation,Quantitative reasoning,Question answering,Code generation,Text summarization",,,,,,,,Unknown,"https://web.archive.org/web/20250408105622/https://www.dapingtime.com/article/2171.html

https://medium.com/data-science-in-your-pocket/tencent-hunyuan-turbo-s-the-fastest-reasoning-llm-d64a02bed5c8","Tencent HunYuan Turbo S: The fastest reasoning LLM
At par with DeepSeek, Claude 3.5 and GPT-4o",,,"Fast + Slow Thinking
Hunyuan Turbo S incorporates a unique approach inspired by human cognitive processes — fast thinking and slow thinking — to optimize response efficiency and reasoning depth.
Fast Thinking: This is like human intuition — it allows for instant responses to straightforward or common queries without requiring deep analysis. Turbo S achieves this by doubling word speed and reducing first-word latency by 44%, making it highly efficient for general conversations and quick interactions.
Slow Thinking: Inspired by analytical reasoning, slow thinking is necessary for complex problem-solving, especially in math, logical reasoning, and science-related queries. Turbo S borrows knowledge from Hunyuan T1, Tencent’s slow-thinking model, which was trained using a technique called long-thinking chain synthesis. This helps Turbo S reason through multi-step problems while maintaining its speed advantage.
Result: By combining both, Turbo S matches or exceeds models like GPT-4o and Claude 3.5 in reasoning-heavy tasks without compromising speed.",Industry,China,SOTA improvement,"Based on the photos published by Tencent on X, it achieved top performance on several benchmarks - MMLU, C-Eval, MATH. (https://x.com/TencentHunyuan/status/1899105803073958010/photo/1)",,,,,,,,,,,,,,,API access,Unreleased,,API via Tencent Cloud,,
QwQ-32B,Alibaba,2025-03-06,Language,"Language modeling/generation,Question answering,Quantitative reasoning,Code generation",32500000000.0,"Architecture: transformers with RoPE, SwiGLU, RMSNorm, and Attention QKV bias
Number of Parameters: 32.5B
Number of Paramaters (Non-Embedding): 31.0B
Number of Layers: 64
Number of Attention Heads (GQA): 40 for Q and 8 for KV",3.51e+24,"Assuming the same dataset size as for Qwen2.5 training (18T tokens):

6ND = 6 * 32500000000 parameters * 18 * 10^12 tokens =  3.51 × 10^24

'Speculative' confidence",Unspecified unreleased,,Speculatively: might be similar to Qwen2.5 models (18T tokens),Speculative,https://qwenlm.github.io/blog/qwq-32b/,QwQ-32B: Embracing the Power of Reinforcement Learning,,Qwen Team,"QwQ is the reasoning model of the Qwen series. Compared with conventional instruction-tuned models, QwQ, which is capable of thinking and reasoning, can achieve significantly enhanced performance in downstream tasks, especially hard problems. QwQ-32B is the medium-sized reasoning model, which is capable of achieving competitive performance against state-of-the-art reasoning models, e.g., DeepSeek-R1, o1-mini.",Industry,China,SOTA improvement,Blog (https://qwenlm.github.io/blog/qwq-32b-preview/) lists AIME and MATH-500 scores superior to o1-preview,,,,,,,,,,Qwen2.5-Coder (32B),,,,,Open weights (unrestricted),Unreleased,,"https://huggingface.co/Qwen/QwQ-32B
Apache 2",BF16,
Mistral OCR,Mistral AI,2025-03-06,Multimodal,"Character recognition,Chat",,,,,,,,Unknown,https://mistral.ai/news/mistral-ocr,"Mistral OCR
",,,"Mistral OCR is an Optical Character Recognition API that sets a new standard in document understanding. Unlike other models, Mistral OCR comprehends each element of documents—media, text, tables, equations—with unprecedented accuracy and cognition. It takes images and PDFs as input and extracts content in an ordered interleaved text and images.",Industry,France,SOTA improvement,Mistral OCR has consistently outperformed other leading OCR models in rigorous benchmark tests.,,,,,,,,,,,,,,,API access,Unreleased,,available on la Plateforme,,
Mercury,Inception Labs,2025-02-27,Language,Code generation,,,,,,,,Unknown,"https://machine-learning-made-simple.medium.com/is-the-mercury-llm-the-first-of-a-new-generation-of-llms-b64de1d36029
https://www.inceptionlabs.ai/news
",Is the Mercury LLM the first of a new Generation of LLMs?,,,,Industry,United States of America,SOTA improvement,"“When evaluated on standard coding benchmarks, Mercury Coder achieves excellent quality across numerous benchmarks, often surpassing the performance of speed-optimized autoregressive models like GPT-4o Mini and Claude 3.5 Haiku while being up to 10x faster.”",,,,,,,,,,,,,,,API access,Unreleased,,,,
GPT-4.5,OpenAI,2025-02-27,"Language,Vision,Multimodal","Language modeling/generation,Question answering,Quantitative reasoning,Translation,Visual question answering,Code generation,Instruction interpretation",,,2.1000001e+26,"Speculative estimate based on GPT-N typically incrementing  by about 100x each version number (https://www.youtube.com/watch?v=6nJZopACRuQ) and 10x each 0.5 version number (https://x.com/karpathy/status/1895213020982472863).

OpenAI said GPT-4.5 was a “new order of magnitude in compute”, which they could have meant somewhat loosely. But seems quite likely >1e26 based on that statement, plus 4.5's high inference costs, and <5e26 because OpenAI probably didn’t have a substantially >100k H100 cluster in mid-2024.",Unspecified unreleased,,,Speculative,https://openai.com/index/introducing-gpt-4-5/,Introducing GPT-4.5,,"Foundational contributors
Alex Paino, Ali Kamali, Amin Tootoonchian, Andrew Tulloch, Ben Sokolowsky, Clemens Winter, Colin Wei, Daniel Kappler, Daniel Levy, Felipe Petroski Such, Geoff Salmon, Ian O’Connell, Jason Teplitz, Kai Chen, Nik Tezak, Prafulla Dhariwal, Rapha Gontijo Lopes, Sam Schoenholz, Youlong Cheng, Yujia Jin, Yunxing Dai

Research
Core contributors

Aiden Low, Alec Radford, Alex Carney, Alex Nichol, Alexis Conneau, Ananya Kumar, Ben Wang, Charlotte Cole , Elizabeth Yang, Gabriel Goh, Hadi Salman, Haitang Hu, Heewoo Jun, Ian Sohl, Ishaan Gulrajani, Jacob Coxon, James Betker, Jamie Kiros, Jessica Landon, Kyle Luther, Lia Guy, Lukas Kondraciuk, Lyric Doshi, Mikhail Pavlov, Qiming Yuan, Reimar Leike, Rowan Zellers, Sean Metzger, Shengjia Zhao, Spencer Papay, Tao Wang

Contributors

Adam Lerer, Aidan McLaughlin, Alexander Prokofiev, Alexandra Barr, Allan Jabri, Ananya Kumar, Andrew Gibiansky, Andrew Schmidt, Casey Chu, Chak Li, Chelsea Voss, Chris Hallacy, Chris Koch, Christine McLeavey, David Mely, Dimitris Tsipras, Eric Sigler, Erin Kavanaugh, Farzad Khorasani, Huiwen Chang, Ilya Kostrikov, Ishaan Singal, Ji Lin, Jiahui Yu, Jing Yu Zhang, John Rizzo, Jong Wook Kim, Joyce Lee, Juntang Zhuang, Leo Liu, Li Jing, Long Ouyang, Louis Feuvrier, Mo Bavarian, Nick Stathas, Nitish Keskar, Oleg Murk, Preston Bowman, Scottie Yan, SQ Mah, Tao Xu, Taylor Gordon, Valerie Qi, Wenda Zhou, Yu Zhang

Scaling
Core contributors

Adam Goucher, Alex Chow, Alex Renzin, Aleksandra Spyra, Avi Nayak, Ben Leimberger, Christopher Hesse, Duc Phong Nguyen, Dinghua Li, Eric Peterson, Francis Zhang, Gene Oden, Kai Fricke, Kai Hayashi, Larry Lv, Leqi Zou, Lin Yang, Madeleine Thompson, Michael Petrov, Miguel Castro, Natalia Gimelshein, Phil Tillet, Reza Zamani, Ryan Cheu Stanley Hsieh, Steve Lee, Stewart Hall, Thomas Raoux, Tianhao Zheng, Vishal Kuo, Yongjik Kim, Yuchen Zhang, Zhuoran Liu

Contributors

Alvin Wan, Andrew Cann, Antoine Pelisse, Anuj Kalia, Aaron Hurst, Avital Oliver, Brad Barnes, Brian Hsu, Chen Ding, Chen Shen, Cheng Chang, Christian Gibson, Duncan Findlay, Fan Wang, Fangyuan Li, Gianluca Borello, Heather Schmidt, Henrique Ponde de Oliveira Pinto, Ikai Lan, Jiayi Weng, James Crooks, Jos Kraaijeveld, Junru Shao, Kenny Hsu, Kenny Nguyen, Kevin King, Leah Burkhardt, Leo Chen, Linden Li, Lu Zhang, Mahmoud Eariby, Marat Dukhan, Mateusz Litwin, Miki Habryn, Natan LaFontaine, Pavel Belov, Peng Su, Prasad Chakka, Rachel Lim, Rajkumar Samuel, Renaud Gaubert, Rory Carmichael, Sarah Dong, Shantanu Jain, Stephen Logsdon, Todd Underwood, Weixing Zhang, Will Sheu, Weiyi Zheng, Yinghai Lu, Yunqiao Zhang

Safety Systems
Andrea Vallone, Andy Applebaum, Cameron Raymond, Chong Zhang, Dan Mossing, Elizabeth Proehl, Eric Wallace, Evan Mays, Grace Zhao, Ian Kivlichan, Irina Kofman, Joel Parish, Kevin Liu, Keren Gu-Lemberg, Kristen Ying, Lama Ahmad, Lilian Weng , Leon Maksin, Leyton Ho, Meghan Shah, Michael Lampe, Michele Wang, Miles Wang, Olivia Watkins, Phillip Guo, Samuel Miserendino, Sam Toizer, Sandhini Agarwal, Tejal Patwardhan, Tom Dupré la Tour, Tong Mu, Tyna Eloundou, Yunyun Wang

Deployment
Adam Brandon, Adam Perelman, Adele Li, Akshay Nathan, Alan Hayes, Alfred Xue, Alison Ben, Alec Gorge, Alex Guziel, Alex Iftimie, Ally Bennett, Andrew Chen, Andy Wang, Andy Wood, Angad Singh, Anoop Kotha, Antonia Woodford, Anuj Saharan, Ashley Tyra, Atty Eleti, Ben Schneider, Bessie Ji, Beth Hoover, Bill Chen, Blake Samic, Britney Smith, Brian Yu, Caleb Wang, Cary Bassin, Cary Hudson, Charlie Jatt, Chengdu Huang, Chris Beaumont, Christina Huang, Cristina Scheau, Dana Palmie, Daniel Levine, Daryl Neubieser, Dave Cummings, David Sasaki, Dibya Bhattacharjee, Dylan Hunn, Edwin Arbus, Elaine Ya Le, Enis Sert, Eric Kramer, Fred von Lohmann, Gaby Janatpour, Garrett McGrath, Garrett Ollinger, Gary Yang, Hao Sheng, Harold Hotelling, Janardhanan Vembunarayanan, Jeff Harris, Jeffrey Sabin Matsumoto, Jennifer Robinson, Jessica Liang, Jessica Shieh, Jiacheng Yang, Joel Morris, Joseph Florencio, Josh Kaplan, Kan Wu, Karan Sharma, Karen Li, Katie Pypes, Kendal Simon, Kendra Rimbach, Kevin Park, Kevin Rao, Laurance Fauconnet, Lauren Workman, Leher Pathak, Liang Wu, Liang Xiong, Lien Mamitsuka, Lindsay McCallum, Lukas Gross, Manoli Liodakis, Matt Nichols, Michelle Fradin, Minal Khan, Mingxuan Wang, Nacho Soto, Natalie Staudacher, Nikunj Handa, Niko Felix, Ning Liu, Olivier Godement, Oona Gleeson, Philip Pronin, Raymond Li, Reah Miyara, Rohan Nuttall, R.J. Marsan, Sara Culver, Scott Ethersmith, Sean Fitzgerald, Shamez Hemani, Sherwin Wu, Shiao Lee, Shuyang Cheng, Siyuan Fu, Spug Golden, Steve Coffey, Steven Heidel, Sundeep Tirumalareddy, Tabarak Khan, Thomas Degry, Thomas Dimson, Tom Stasi, Tomo Hiratsuka, Trevor Creech, Uzair Navid Iftikhar, Victoria Chernova, Victoria Spiegel, Wanning Jiang, Wenlei Xie, Yaming Lin, Yara Khakbaz, Yilei Qian, Yilong Qin, Yo Shavit, Zhi Bie

Executive Leadership
Bob McGrew, Greg Brockman, Hannah Wong, Jakub Pachocki, Johannes Heidecke, Joanne Jang, Kate Rouch, Kevin Weil, Lauren Itow, Liam Fedus, Mark Chen, Mia Glaese, Mira Murati, Nick Ryder, Sam Altman, Srinivas Narayanan, Tal Broda","We advance AI capabilities by scaling two complementary paradigms: unsupervised learning and reasoning. These represent two axes of intelligence.

Unsupervised learning increases world model accuracy and intuition. Models like GPT‑3.5, GPT‑4, and GPT‑4.5 advance this paradigm.
Scaling reasoning⁠, on the other hand, teaches models to think and produce a chain of thought before they respond, allowing them to tackle complex STEM or logic problems. Models like OpenAI o1 and OpenAI o3‑mini advance this paradigm.
GPT‑4.5 is an example of scaling unsupervised learning by scaling up compute and data, along with architecture and optimization innovations. GPT‑4.5 was trained on Microsoft Azure AI supercomputers. The result is a model that has broader knowledge and a deeper understanding of the world, leading to reduced hallucinations and more reliability across a wide range of topics.",Industry,United States of America,Training cost,"Described by OpenAI as a ""new order of magnitude of compute""

https://openai.com/index/introducing-gpt-4-5/",,,,,,,,,,,,,,,API access,Unreleased,,,,True
Wan 2.1 14B,Alibaba,2025-02-25,"Video,Vision","Video generation,Image-to-video",14000000000.0,14B,2.5e+23,"""Through extensive experimentation, the model is validated at scale, reaching 14 billion parameters. Subsequently, Wan has seen large-scale data comprising billions of
images and videos, amounting to O(1) trillions of tokens in total.""

So likely between 1T and 10T tokens. Assume 3T.

Transformer architecture, so 6ND should be a decent approximation.

6ND = 6 * 14e9 * 3e12 ~= 2.5e+23 FLOP",,,,Confident,"https://huggingface.co/Wan-AI
https://huggingface.co/blog/LLMhacker/wanai-wan21
",Wan 2.1 by Wan AI :best cost efficient video generation model Now Available,,,,Industry,China,SOTA improvement,"Wan2.1 consistently outperforms existing open-source models and state-of-the-art commercial solutions across multiple benchmarks. Achives higher score than SORA in some of the bench dimensions - single object accuracy, spatial position accuracy, scene generation quality. ",,,,,,,,,,,,,,,Open weights (unrestricted),Open source,,"Apache 2.0
https://huggingface.co/Wan-AI/Wan2.1-I2V-14B-720P

Training code:
https://github.com/Wan-Video/Wan2.1",BF16,
Claude 3.7 Sonnet,Anthropic,2025-02-24,"Language,Vision,Multimodal","Language modeling/generation,Question answering,Code generation,Quantitative reasoning,Translation,Instruction interpretation,Visual question answering",,,3.3499999999999998e+25,https://docs.google.com/spreadsheets/d/10bhwdVrfHI8tysVIz62ZxtvQ30L-HojYvmU18_b-WIM/edit?gid=0#gid=0,Unspecified unreleased,,,Likely,https://www.anthropic.com/news/claude-3-7-sonnet,Claude 3.7 Sonnet,,,"Today, we’re announcing Claude 3.7 Sonnet1, our most intelligent model to date and the first hybrid reasoning model on the market. Claude 3.7 Sonnet can produce near-instant responses or extended, step-by-step thinking that is made visible to the user. API users also have fine-grained control over how long the model can think for.

Claude 3.7 Sonnet shows particularly strong improvements in coding and front-end web development. ",Industry,United States of America,Training cost,,,,,,,,,,,,,,,,API access,Unreleased,,,,True
Grok-3,xAI,2025-02-17,"Language,Vision,Multimodal","Chat,Language modeling/generation,Question answering,Code generation,Visual question answering",,,4.64e+26,"Estimate based on training time for a cluster of 100,000 H100s, and xAI's statement that Grok 2 was trained on more compute than GPT-4 (2.1e25) and that Grok 3 was trained on around 15 times more compute than Grok 2. 

Full estimate here: https://docs.google.com/document/d/1C_dABuZrAqYE_ui4_GZ4bRLtq3TBjIGoBSktaPElhEU/edit?usp=sharing",Unspecified unreleased,,,Confident,https://x.ai/blog/grok-3,Grok 3 Beta — The Age of Reasoning Agents,,,,Industry,United States of America,Training cost,,,2400.0,Estimated to be between 3 and 4 months. We use 100 days in our estimate,NVIDIA H100 SXM5 80GB,100000.0,,470000000.0,,137435820.25246143,,,,,,Hosted access (no API),Unreleased,,,,True
Eurus-2-7B-PRIME,"Tsinghua University,University of Illinois Urbana-Champaign (UIUC),Shanghai AI Lab,Peking University,Shanghai Jiao Tong University,CUHK Shenzhen Research Institute",2025-02-03,Mathematics,Mathematical reasoning,7000000000.0,,,,Eurus-2-RL-Data,319700000.0,"""We finally obtain 230K SFT data and the average response length is 1390 tokens.""
Does not include the RL finetuning data",Speculative,https://arxiv.org/abs/2502.01456,Process Reinforcement through Implicit Rewards,30.0,"Ganqu Cui, Lifan Yuan, Zefan Wang, Hanbin Wang, Wendi Li, Bingxiang He, Yuchen Fan, Tianyu Yu, Qixin Xu, Weize Chen, Jiarui Yuan, Huayu Chen, Kaiyan Zhang, Xingtai Lv, Shuo Wang, Yuan Yao, Xu Han, Hao Peng, Yu Cheng, Zhiyuan Liu, Maosong Sun, Bowen Zhou, Ning Ding","Dense process rewards have proven a more effective alternative to the sparse outcome-level rewards in the inference-time scaling of large language models (LLMs), particularly in tasks requiring complex multi-step reasoning. While dense rewards also offer an appealing choice for the reinforcement learning (RL) of LLMs since their fine-grained rewards have the potential to address some inherent issues of outcome rewards, such as training efficiency and credit assignment, this potential remains largely unrealized. This can be primarily attributed to the challenges of training process reward models (PRMs) online, where collecting high-quality process labels is prohibitively expensive, making them particularly vulnerable to reward hacking. To address these challenges, we propose PRIME (Process Reinforcement through IMplicit rEwards), which enables online PRM updates using only policy rollouts and outcome labels through implict process rewards. PRIME combines well with various advantage functions and forgoes the dedicated reward model training phase that existing approaches require, substantially reducing the development overhead. We demonstrate PRIME’s effectiveness on competitional math and coding. Starting from Qwen2.5-Math-7B-Base, PRIME achieves a 15.1% average improvement across several key reasoning benchmarks over the SFT model. Notably, our resulting model, Eurus-2-7B-PRIME, surpasses Qwen2.5-Math-7B-Instruct on seven reasoning benchmarks with 10% of its training data.1","Academia,Academia,Academia,Academia,Academia","China,United States of America,China,China,China,China",SOTA improvement,"Eurus-2-7B-PRIME excels at competition-level mathematics benchmarks, outperforming advanced math models and larger models.",3.0,,,,,,,,,Qwen2.5-Math-7B-Base,,,,,Open weights (unrestricted),Open source,Open source,"Apache 2.0
https://huggingface.co/PRIME-RL/Eurus-2-7B-PRIME

Apache 2.0
https://github.com/PRIME-RL/PRIME",BF16,
o3-mini,OpenAI,2025-01-31,Language,"Language modeling/generation,Question answering,Quantitative reasoning,Code generation",,"Can't get an exact estimate, but we suspect total parameter count around 60B-120B, active parameters around 10B-30B. 

Given these models are served at 150-200 tok/s, at $4.40/Mtok output, inference economics (https://epoch.ai/blog/inference-economics-of-language-models) suggests total parameter count around 60-120B parameters, with mixture-of-experts active parameters around 10-30B. MoEs make a given model roughly comparable to a ~50% smaller dense model (https://epoch.ai/gradient-updates/moe-vs-dense-models-inference), which lines up decently with Magistral Small pricing (24B dense, served at a similar speed for the cheaper $1.50/Mtok). ",,"We can’t make a precise estimate, but seems unlikely to exceed 10^25 FLOP. We think active parameter count is 10-30B. This would require >55T tokens to reach 10^25 FLOP at the large size, i.e. well beyond 10x overtraining relative to Chinchilla.",Unspecified unreleased,,,Unknown,https://openai.com/index/openai-o3-mini/,Pushing the frontier of cost-effective reasoning.,,"Training
Brian Zhang, Eric Mitchell, Hongyu Ren, Kevin Lu, Max Schwarzer, Michelle Pokrass, Shengjia Zhao, Ted Sanders

Eval
Adam Kalai, Alex Tachard Passos, Ben Sokolowsky, Elaine Ya Le, Erik Ritter, Hao Sheng, Hanson Wang, Ilya Kostrikov, James Lee, Johannes Ferstad, Michael Lampe, Prashanth Radhakrishnan, Sean Fitzgerald, Sebastien Bubeck, Yann Dubois, Yu Bai

Frontier Evals & Preparedness
Andy Applebaum, Elizabeth Proehl, Evan Mays, Joel Parish, Kevin Liu, Leon Maksin, Leyton Ho, Miles Wang, Michele Wang, Olivia Watkins, Patrick Chao, Samuel Miserendino, Tejal Patwardhan

Engineering
Adam Walker, Akshay Nathan, Alyssa Huang, Andy Wang, Ankit Gohel, Ben Eggers, Brian Yu, Bryan Ashley, Chengdu Huang, Christian Hoareau, Davin Bogan, Emily Sokolova, Eric Horacek, Eric Jiang, Felipe Petroski Such, Jonah Cohen, Josh Gross, Justin Becker, Kan Wu, Kevin Whinnery, Larry Lv, Lee Byron, Manoli Liodakis, Max Johnson, Mike Trpcic, Murat Yesildal, Rasmus Rygaard, RJ Marsan, Rohit Ramchandani, Rohan Kshirsagar, Roman Huet, Sara Conlon, Shuaiqi (Tony) Xia, Siyuan Fu, Srinivas Narayanan, Sulman Choudhry, Tomer Kaftan, Trevor Creech

Search
Adam Fry, Adam Perelman, Brandon Wang, Cristina Scheau, Philip Pronin, Sundeep Tirumalareddy, Will Ellsworth, Zewei Chu

Product
Antonia Woodford, Beth Hoover, Jake Brill, Kelly Stirman, Minnia Feng, Neel Ajjarapu, Nick Turley, Nikunj Handa, Olivier Godement

Safety
Andrea Vallone, Andrew Duberstein, Enis Sert, Eric Wallace, Grace Zhao, Irina Kofman, Jieqi Yu, Joaquin Quinonero Candela, Madelaine Boyd, Mehmet Yatbaz, Mike McClay, Mingxuan Wang, Saachi Jain, Sandhini Agarwal, Sam Toizer, Santiago Hernández, Steve Mostovoy, Young Cha, Tao Li, Yunyun Wang

External Redteaming
Lama Ahmad, Troy Peterson


Research Program Managers
Carpus Chang, Kristen Ying

Leadership
Aidan Clark, Dane Stuckey, Jerry Tworek, Jakub Pachocki, Johannes Heidecke, Kevin Weil, Liam Fedus, Mark Chen, Sam Altman, Wojciech Zaremba","We’re releasing OpenAI o3-mini, the newest, most cost-efficient model in our reasoning series, available in both ChatGPT and the API today. Previewed in December 2024⁠, this powerful and fast model advances the boundaries of what small models can achieve, delivering exceptional STEM capabilities—with particular strength in science, math, and coding—all while maintaining the low cost and reduced latency of OpenAI o1-mini.

OpenAI o3-mini is our first small reasoning model that supports highly requested developer features including function calling⁠(opens in a new window), Structured Outputs⁠(opens in a new window), and developer messages⁠(opens in a new window), making it production-ready out of the gate. Like OpenAI o1-mini and OpenAI o1-preview, o3-mini will support streaming⁠(opens in a new window). Also, developers can choose between three reasoning effort⁠(opens in a new window) options—low, medium, and high—to optimize for their specific use cases. This flexibility allows o3-mini to “think harder” when tackling complex challenges or prioritize speed when latency is a concern. o3-mini does not support vision capabilities, so developers should continue using OpenAI o1 for visual reasoning tasks. o3-mini is rolling out in the Chat Completions API, Assistants API, and Batch API starting today to select developers in API usage tiers 3-5⁠",Industry,United States of America,Significant use,,,,,,,,,,,,,,,,API access,Unreleased,,,,
Computer-Using Agent (CUA),OpenAI,2025-01-23,"Vision,Language,Multimodal","Instruction interpretation,System control",,,,,Unspecified unreleased,,,Unknown,https://openai.com/index/computer-using-agent/,"Powering Operator with Computer-Using Agent, a universal interface for AI to interact with the digital world.",,,"Today we introduced a research preview of Operator⁠(opens in a new window), an agent that can go to the web to perform tasks for you. Powering Operator is Computer-Using Agent (CUA), a model that combines GPT‑4o's vision capabilities with advanced reasoning through reinforcement learning. CUA is trained to interact with graphical user interfaces (GUIs)—the buttons, menus, and text fields people see on a screen—just as humans do. This gives it the flexibility to perform digital tasks without using OS-or web-specific APIs. 

CUA builds off of years of foundational research at the intersection of multimodal understanding and reasoning. By combining advanced GUI perception with structured problem-solving, it can break tasks into multi-step plans and adaptively self-correct when challenges arise. This capability marks the next step in AI development, allowing models to use the same tools humans rely on daily and opening the door to a vast range of new applications.

While CUA is still early and has limitations, it sets new state-of-the-art benchmark results, achieving a 38.1% success rate on OSWorld for full computer use tasks, and 58.1% on WebArena and 87% on WebVoyager for web-based tasks. These results highlight CUA’s ability to navigate and operate across diverse environments using a single general action space. ",Industry,United States of America,SOTA improvement,SOTA at OSWorld,,,,,,,,,,,,,,,Hosted access (no API),Unreleased,,,,
Kimi k1.5,Moonshot,2025-01-22,"Multimodal,Language,Vision","Language modeling/generation,Code generation,Quantitative reasoning,Question answering,Visual question answering,Translation,Image captioning",,,,,Unspecified unreleased,,,Unknown,https://arxiv.org/abs/2501.12599v1,Kimi k1.5: Scaling Reinforcement Learning with LLMs,0.0,"Kimi Team, Angang Du, Bofei Gao, Bowei Xing, Changjiu Jiang, Cheng Chen, Cheng Li, Chenjun Xiao, Chenzhuang Du, Chonghua Liao, Chuning Tang, Congcong Wang, Dehao Zhang, Enming Yuan, Enzhe Lu, Fengxiang Tang, Flood Sung, Guangda Wei, Guokun Lai, Haiqing Guo, Han Zhu, Hao Ding, Hao Hu, Hao Yang, Hao Zhang, Haotian Yao, Haotian Zhao, Haoyu Lu, Haoze Li, Haozhen Yu, Hongcheng Gao, Huabin Zheng, Huan Yuan, Jia Chen, Jianhang Guo, Jianlin Su, Jianzhou Wang, Jie Zhao, Jin Zhang, Jingyuan Liu, Junjie Yan, Junyan Wu, Lidong Shi, Ling Ye, Longhui Yu, Mengnan Dong, Neo Zhang, Ningchen Ma, Qiwei Pan, Qucheng Gong, Shaowei Liu, Shengling Ma, Shupeng Wei, Sihan Cao, Siying Huang, Tao Jiang, Weihao Gao, Weimin Xiong, Weiran He, Weixiao Huang, Wenhao Wu, Wenyang He, Xianghui Wei, Xianqing Jia, Xingzhe Wu, Xinran Xu, Xinxing Zu, Xinyu Zhou, Xuehai Pan, Y. Charles, Yang Li, Yangyang Hu, Yangyang Liu, Yanru Chen, Yejie Wang, Yibo Liu, Yidao Qin, Yifeng Liu, Ying Yang, Yiping Bao, Yulun Du, Yuxin Wu, Yuzhi Wang, Zaida Zhou, Zhaoji Wang, Zhaowei Li, Zhen Zhu, Zheng Zhang, Zhexu Wang, Zhilin Yang, Zhiqi Huang, Zihao Huang, Ziyao Xu, Zonghan Yang","Language model pretraining with next token prediction has proved effective for scaling compute but is limited to the amount of available training data. Scaling reinforcement learning (RL) unlocks a new axis for the continued improvement of artificial intelligence, with the promise that large language models (LLMs) can scale their training data by learning to explore with rewards. However, prior published work has not produced competitive results. In light of this, we report on the training practice of Kimi k1.5, our latest multi-modal LLM trained with RL, including its RL training techniques, multi-modal data recipes, and infrastructure optimization. Long context scaling and improved policy optimization methods are key ingredients of our approach, which establishes a simplistic, effective RL framework without relying on more complex techniques such as Monte Carlo tree search, value functions, and process reward models. Notably, our system achieves state-of-the-art reasoning performance across multiple benchmarks and modalities—e.g., 77.5 on AIME, 96.2 on MATH 500, 94-th percentile on Codeforces, 74.9 on MathVista—matching OpenAI’s o1. Moreover, we present effective long2short methods that use long-CoT techniques to improve short-CoT models, yielding state-of-the-art short-CoT reasoning results—e.g., 60.8 on AIME, 94.6 on MATH500, 47.3 on LiveCodeBench—outperforming existing short-CoT models such as GPT-4o and Claude Sonnet 3.5 by a large margin (up to +550%).",Industry,China,SOTA improvement,"""Sota short-CoT performance, outperforming GPT-4o and Claude Sonnet 3.5 on AIME,  MATH-500, LiveCodeBench by a large margin (up to +550%)""",,,,,,,,,,,,,,,API access,Unreleased,,,,
Doubao-1.5-pro,ByteDance,2025-01-22,Language,Language generation,,"Not directly reported. We are told it is a MoE model, and that it matches the performance of a dense model trained on the same data, while using 1/7th of the activated parameters. Additionally they say ""The number of parameters of the Doubao dense model is also much smaller than that of Llama3.1-405B"", which suggests that the number of activated parameters on the forward pass is ""much less"" than 405B/7 = 58B parameters.",,"The model appears to have been trained on 9T tokens; since we believe the MoE model uses ""much less"" than 58B parameters (see parameter notes), training compute is likely to be less than 6 * 9T * 58B = 3.132e24

It is possible the 9T token training run was for comparison sake against the dense model (they label it as ""doubao-MoE"", not doubao-1.5-pro), and that they continued training beyond this. They would need to train for at least 29T tokens to ",,9000000000000.0,9T tokens,Unknown,https://team.doubao.com/zh/special/doubao_1_5_pro,Doubao-1.5-pro,,,The model uses the MoE architecture and explores the ultimate balance between model performance and reasoning performance through integrated training-thinking design. Doubao-1.5-pro can use only a smaller activation parameter to exceed the performance of a first-class super-large pre-training model and achieve excellent results on multiple evaluation benchmarks.,Industry,China,Training cost,,1.0,,,,,,,,,,,,,,Hosted access (no API),Unreleased,,,,
Eagle 2,"NVIDIA,Nanjing University,Tsinghua University,Hong Kong Polytechnic University,Johns Hopkins University,New York University (NYU)",2025-01-20,"Vision,Robotics,Language",,8930000000.0,"Table 4

https://huggingface.co/nvidia/Eagle2-9B
""8.93B params""
",4.7156e+22,"Appendix A. Compute: ""We show our training resource for Eagle2-9B in Tab. A. In actual development, we rarely iterate the Stage-1 model. Usually, we iterate Stage-1.5 once after iterating Stage-2 >10 times.""
Assume "">10 times"" -> 12
Assume ""H100"" -> NVIDIA H100 SXM5 80GB
Assume bf16
Assume 0.4 utilization (NVIDIA in-house)
H100 SXM5 performance = 989400000000000 FLOP/s = 9.894e14 FLOP/s

Stage 1:     (H100 * 128) * (2.5 hr * 1)
Stage 1.5:  (H100 * 256) * (28 hr * 2)
Stage 2:     (H100 * 256) * (6 hr * 12)

Stage 1:      0.4 * (9.894e14 FLOP/s * 128) * (3600 s / 1 hr) * (2.5 hr *1) ~= 4.56e20 FLOP
Stage 1.5:   0.4 * (9.894e14 FLOP/s * 256) * (3600 s / 1 hr) * (28 hr * 2) ~= 2.04e22 FLOP
Stage 2:      0.4 * (9.894e14 FLOP/s * 256) * (3600 s / 1 hr) * (6 hr * 12) ~= 2.63e22 FLOP

(4.56e20 + 2.04e22 + 2.63e22) FLOP ~= 4.72e22 FLOP
",,,Table 4: ,Confident,arxiv.org/abs/2501.14818,Eagle 2: Building Post-Training Data Strategies from Scratch for Frontier Vision-Language Models,9.0,"Zhiqi Li, Guo Chen, Shilong Liu, Shihao Wang, Vibashan VS, Yishen Ji, Shiyi Lan, Hao Zhang, Yilin Zhao, Subhashree Radhakrishnan, Nadine Chang, Karan Sapra, Amala Sanjay Deshmukh, Tuomas Rintamaki, Matthieu Le, Ilia Karmanov, Lukas Voegtle, Philipp Fischer, De-An Huang, Timo Roman, Tong Lu, Jose M. Alvarez, Bryan Catanzaro, Jan Kautz, Andrew Tao, Guilin Liu, Zhiding Yu","Recently, promising progress has been made by open-source vision-language models (VLMs) in bringing their capabilities closer to those of proprietary frontier models. However, most open-source models only publish their final model weights, leaving the critical details of data strategies and implementation largely opaque. In this work, we address VLM post-training from a data-centric perspective, showing the key role of data strategy in developing frontier VLMs. By studying and building our post-training data strategy from scratch, we share detailed insights into the development processes, aiming to benefit the development of competitive models for the open-source community. Our introduced data strategy, together with training recipes and model design, leads to a family of performant VLMs named Eagle2. Specifically, Eagle2-9B achieves state-of-the-art results across various multimodal benchmarks, matching certain competitive models with up to 70B parameters.","Industry,Academia,Academia,Academia,Academia,Academia","United States of America,China,China,Hong Kong,China,United States of America,United States of America",SOTA improvement,"Figure 1: ""Overview of Eagle2-9B’s result across different
multimodal benchmarks, in comparison to state-of-the-art
open-source and commercial frontier models.""
Claim SOTA on OCRBench, InfoVQA, ChartQA (Test), MathVista, AI2D (Test), MMStar (relative to the selected open-source + commercial frontier models)

Todo: check Table 7 to confirm they didn't just omit larger models from Figure 1

VLM backbone of GR00T N1",,130.5,"Appendix A. Compute: ""We show our training resource for Eagle2-9B in Tab. A. In actual development, we rarely iterate the Stage-1 model. Usually, we iterate Stage-1.5 once after iterating Stage-2 >10 times.
Assume "">10 times"" -> 12
Stage 1.0:  2.5 hr * 1
Stage 1.5   28 hr * 2
Stage 2.0:  6 hr * 12
(2.5 hr * 1) + (28 hr * 2) + (6 hr * 12) = 130.5 hr
 ",NVIDIA H100 SXM5 80GB,256.0,,,,352055.152733459,Qwen2.5-7B,,,,,Open weights (non-commercial),Unreleased,Open source,"https://huggingface.co/nvidia/Eagle2-9B
""Creative Commons Attribution Non Commercial 4.0""

Apache 2.0 for code
https://github.com/NVlabs/EAGLE",,
DeepSeek-R1,DeepSeek,2025-01-20,Language,"Language modeling/generation,Code generation,Quantitative reasoning,Question answering",671000000000.0,"671B total
37B activated
https://github.com/deepseek-ai/DeepSeek-R1/tree/main",4.020010000000001e+24,"Estimates by Ege Erdil in Gradient Updates:
https://epoch.ai/gradient-updates/what-went-into-training-deepseek-r1
""A dataset size of 14.8 trillion tokens is reasonable and in line with other models of this scale. Assuming that’s valid, the pretraining of this model would have required 6 * (37 billion) * (14.8 trillion) = 3e24 FLOP. If we assume DeepSeek’s training cluster consists of H800s with the PCIe form factor, then each should be capable of 1.5e15 FP8 per second, and the implied model FLOP utilization (MFU) of DeepSeek v3’s 55 day training run ends up being around 23%.""

6 FLOP/token/param * 14.8T tokens * 37B active params = 3.29e24 FLOP (pretraining)
1.2e23 FLOP (post-training)
6.1e23 FLOP (fine-tuning)

Total compute: 3.29e24 + 1.2e23 + 6.1e23 = 4.02e24",Unspecified unreleased,,,Confident,https://api-docs.deepseek.com/news/news250120,DeepSeek-R1: Incentivizing Reasoning Capability in LLMs via Reinforcement Learning,,,"We introduce our first-generation reasoning models, DeepSeek-R1-Zero and DeepSeek-R1. DeepSeek-R1-Zero, a model trained via large-scale reinforcement learning (RL) without supervised fine-tuning (SFT) as a preliminary step, demonstrates remarkable reasoning capabilities.
Through RL, DeepSeek-R1-Zero naturally emerges with numerous powerful and intriguing reasoning behaviors. However, it encounters challenges such as poor readability, and language mixing. To address these issues and further enhance reasoning performance, we introduce DeepSeek-R1, which incorporates multi-stage training and cold-start data before RL. DeepSeek-R1 achieves performance comparable to OpenAI-o1-1217 on reasoning tasks. To support the research community, we open-source DeepSeek-R1-Zero, DeepSeek-R1, and six dense models (1.5B, 7B, 8B, 14B, 32B, 70B) distilled from DeepSeek-R1 based on Qwen and Llama.",Industry,China,"Training cost,SOTA improvement","Best score on SuperCLUE Math6o in Jan 2025
https://www.superclueai.com/",,,,,,,6770000.0,"$5.576M 2024 USD (estimated training cost of Deepseek v3) + $1M (estimated training cost of RL) = $6.576M 2024 USD = $6.77M 2023 USD

https://www.usinflationcalculator.com/

https://epoch.ai/gradient-updates/what-went-into-training-deepseek-r1",,DeepSeek-V3,6.1e+23,6.1e23 FLOP from these estimations: https://epoch.ai/gradient-updates/what-went-into-training-deepseek-r1,,,Open weights (unrestricted),Unreleased,,MIT licensed,"FP8,BF16,FP32",
INTELLECT-MATH,Prime Intellect,2025-01-17,Mathematics,Mathematical reasoning,7000000000.0,,,,,,"""The resulting SFT dataset consisted of 733k questions with corresponding responses.""",Confident,"https://huggingface.co/PrimeIntellect/INTELLECT-MATH
https://www.primeintellect.ai/blog/intellect-math","INTELLECT-MATH: Frontier Mathematical Reasoning through Better Initializations for Reinforcement Learning
",,,,Industry,United States of America,SOTA improvement,"Outperforms other models on several benchmarks - Math-500, OlympiadBench, AMC, MINERVA MATH, AVG.",,,,,,,,,,Qwen2.5-Math-7B-Base,,,,,Open weights (unrestricted),Open source,,"MIT license
https://huggingface.co/PrimeIntellect/INTELLECT-MATH

https://github.com/PrimeIntellect-ai/INTELLECT-MATH",BF16,
DeepSeek-V3,DeepSeek,2024-12-24,Language,"Language modeling/generation,Code generation,Quantitative reasoning,Question answering",671000000000.0,Mixture-of-Experts (MoE) language model with 671B total parameters with 37B activated for each token.,3.4078e+24,"""At an economical cost of only 2.664M H800 GPU hours, we complete the pre-training of DeepSeek-V3 on 14.8T tokens, producing the currently strongest open-source base model. The subsequent training stages after pre-training require only 0.1M GPU hours.""

6 * 37B (active params) * 14.8T = 3.2856e24 for pretraining.

We know they trained in FP8. H800s get 1.513e15 FLOP/s in FP8:
2.688M * 3600 * 1.513e15 * MFU = 3.2856e24

Suggests a MFU of 0.2244 in pre-training. If we assume MFU was the same in post-training, that adds an additional:

0.1M * 3600 * 1.513e15 * 0.2244 = 1.222e23 FLOP from post-training

Total: 3.2856e24 + 1.222e23 = 3.4078e24 FLOP",,14800000000000.0,"""We pre-train DeepSeek-V3 on 14.8 trillion diverse and
high-quality tokens, followed by Supervised Fine-Tuning and Reinforcement Learning stages to fully harness its capabilities""",Confident,https://arxiv.org/abs/2412.19437,DeepSeek-V3 Technical Report,,"DeepSeek-AI, Aixin Liu, Bei Feng, Bing Xue, Bingxuan Wang, Bochao Wu, Chengda Lu, Chenggang Zhao, Chengqi Deng, Chenyu Zhang, Chong Ruan, Damai Dai, Daya Guo, Dejian Yang, Deli Chen, Dongjie Ji, Erhang Li, Fangyun Lin, Fucong Dai, Fuli Luo, Guangbo Hao, Guanting Chen, Guowei Li, H. Zhang, Han Bao, Hanwei Xu, Haocheng Wang, Haowei Zhang, Honghui Ding, Huajian Xin, Huazuo Gao, Hui Li, Hui Qu, J.L. Cai, Jian Liang, Jianzhong Guo, Jiaqi Ni, Jiashi Li, Jiawei Wang, Jin Chen, Jingchang Chen, Jingyang Yuan, Junjie Qiu, Junlong Li, Junxiao Song, Kai Dong, Kai Hu, Kaige Gao, Kang Guan, Kexin Huang, Kuai Yu, Lean Wang, Lecong Zhang, Lei Xu, Leyi Xia, Liang Zhao, Litong Wang, Liyue Zhang, Meng Li, Miaojun Wang, Mingchuan Zhang, Minghua Zhang, Minghui Tang, Mingming Li, Ning Tian, Panpan Huang, Peiyi Wang, Peng Zhang, Qiancheng Wang, Qihao Zhu, Qinyu Chen, Qiushi Du, R.J. Chen, R.L. Jin, Ruiqi Ge, Ruisong Zhang, Ruizhe Pan, Runji Wang, Runxin Xu, Ruoyu Zhang, Ruyi Chen, S.S. Li, Shanghao Lu, Shangyan Zhou, Shanhuang Chen, Shaoqing Wu, Shengfeng Ye, Shengfeng Ye, Shirong Ma, Shiyu Wang, Shuang Zhou, Shuiping Yu, Shunfeng Zhou, Shuting Pan, T. Wang, Tao Yun, Tian Pei, Tianyu Sun, W.L. Xiao, Wangding Zeng et al. (100 additional authors not shown)","We present DeepSeek-V3, a strong Mixture-of-Experts (MoE) language model with 671B total parameters with 37B activated for each token. To achieve efficient inference and cost-effective training, DeepSeek-V3 adopts Multi-head Latent Attention (MLA) and DeepSeekMoE architectures, which were thoroughly validated in DeepSeek-V2. Furthermore, DeepSeek-V3 pioneers an auxiliary-loss-free strategy for load balancing and sets a multi-token prediction training objective for stronger performance. We pre-train DeepSeek-V3 on 14.8 trillion diverse and high-quality tokens, followed by Supervised Fine-Tuning and Reinforcement Learning stages to fully harness its capabilities. Comprehensive evaluations reveal that DeepSeek-V3 outperforms other open-source models and achieves performance comparable to leading closed-source models. Despite its excellent performance, DeepSeek-V3 requires only 2.788M H800 GPU hours for its full training. In addition, its training process is remarkably stable. Throughout the entire training process, we did not experience any irrecoverable loss spikes or perform any rollbacks.",Industry,China,Training cost,training cost was $5.3million USD (Table 1),,,"""DeepSeek-V3 requires only 2.788M H800 GPU hours for its full training""",NVIDIA H800 SXM5,2048.0,0.1947,5390000.0,"Table 1
$5.576M 2024 USD = $5.39M 2023 USD (https://www.usinflationcalculator.com/)",2818135.181214284,,,,,,Open weights (restricted use),Unreleased,,"MIT and deepseek license
https://github.com/deepseek-ai/DeepSeek-V3?tab=readme-ov-file

I cannot see training code in this repo https://github.com/deepseek-ai/DeepSeek-V3?tab=readme-ov-file","FP8,BF16,FP32",
o3,OpenAI,2024-12-20,"Language,Vision,Multimodal","Language modeling/generation,Question answering,Quantitative reasoning,Code generation,Visual question answering,Search,Instruction interpretation,Visual puzzles",,,,,Unspecified unreleased,,,Unknown,https://openai.com/index/introducing-o3-and-o4-mini/,"Our most powerful reasoning model with leading performance on coding, math, science, and vision",,,"Today, we’re releasing OpenAI o3 and o4-mini, the latest in our o-series of models trained to think for longer before responding. These are the smartest models we’ve released to date, representing a step change in ChatGPT's capabilities for everyone from curious users to advanced researchers. For the first time, our reasoning models can agentically use and combine every tool within ChatGPT—this includes searching the web, analyzing uploaded files and other data with Python, reasoning deeply about visual inputs, and even generating images. Critically, these models are trained to reason about when and how to use tools to produce detailed and thoughtful answers in the right output formats, typically in under a minute, to solve more complex problems. This allows them to tackle multi-faceted questions more effectively, a step toward a more agentic ChatGPT that can independently execute tasks on your behalf. The combined power of state-of-the-art reasoning with full tool access translates into significantly stronger performance across academic benchmarks and real-world tasks, setting a new standard in both intelligence and usefulness.
<..>
OpenAI o3 is our most powerful reasoning model that pushes the frontier across coding, math, science, visual perception, and more. It sets a new SOTA on benchmarks including Codeforces, SWE-bench (without building a custom model-specific scaffold), and MMMU. It’s ideal for complex queries requiring multi-faceted analysis and whose answers may not be immediately obvious. It performs especially strongly at visual tasks like analyzing images, charts, and graphics. In evaluations by external experts, o3 makes 20 percent fewer major errors than OpenAI o1 on difficult, real-world tasks—especially excelling in areas like programming, business/consulting, and creative ideation. Early testers highlighted its analytical rigor as a thought partner and emphasized its ability to generate and critically evaluate novel hypotheses—particularly within biology, math, and engineering contexts.

________
model was announced 2024/12/20 
from ARS technica: ""On Friday, during Day 12 of its ""12 days of OpenAI,"" OpenAI CEO Sam Altman announced its latest AI ""reasoning"" models, o3 and o3-mini, which build upon the o1 models launched earlier this year. The company is not releasing them yet but will make these models available for public safety testing and research access today.""

https://arstechnica.com/information-technology/2024/12/openai-announces-o3-and-o3-mini-its-next-simulated-reasoning-models/

model was released 2025/04/16",Industry,United States of America,Significant use,,,,,,,,,,,,,,,,API access,Unreleased,,"""Both o3 and o4-mini are also available to developers today via the Chat Completions API and Responses API (some developers will need to verify their organizations⁠(opens in a new window) to access these models)""",,
Veo 2,Google DeepMind,2024-12-16,"Video,Vision","Video generation,Text-to-video,Image-to-video",,,,,Unspecified unreleased,,,Unknown,https://deepmind.google/technologies/veo/veo-2/,Our state-of-the-art video generation model,,"Agrim Gupta, Ali Razavi, Ankush Gupta, Dumitru Erhan, Eric Lau, Frank Belletti, Gabe Barth-Maron, Hakan Erdogan, Hakim Sidahmed, Henna Nandwani, Hernan Moraldo, Hyunjik Kim, Jeff Donahue, José Lezama, Kory Mathewson, Kurtis David, Marc van Zee, Medhini Narasimhan, Miaosen Wang, Mohammad Babaeizadeh, Nelly Papalampidi, Nick Pezzotti, Nilpa Jha, Parker Barnes, Pieter-Jan Kindermans, Rachel Hornung, Ruben Villegas, Ryan Poplin, Salah Zaiem, Sander Dieleman, Sayna Ebrahimi, Scott Wisdom, Serena Zhang, Shlomi Fruchter, Weizhe Hua, Xinchen Yan, Yuqing Du and Yutian Chen.",,Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",SOTA improvement,"""Veo has achieved state of the art results in head-to-head comparisons of outputs by human raters over top video generation models.

Participants viewed 1003 prompts and respective videos on MovieGenBench, a benchmark dataset released by Meta. Veo 2 performs best on overall preference, and for its capability to follow prompts accurately.""

SOTA qualification is unclear solely from MovieGenBench, which is subjective and depends on human raters. But Veo 2 seems to be SOTA over Meta Movie Gen, Kling, Minimax, and Sora Turbo.
Updated Sora could be better, but was released later this same month.",,,,,,,,,,,,,,,API access,Unreleased,,https://cloud.google.com/vertex-ai/generative-ai/docs/models/veo/2-0-generate-001,,
Gemini 2.0 Pro,Google DeepMind,2024-12-11,"Language,Multimodal,Vision,Video,Audio","Code generation,Language modeling/generation,Question answering,Visual question answering,Speech recognition,Video description",,,,Flagship model from a leading developer in early 2025; very likely it used >1e25 FLOP.,Unspecified unreleased,,,Unknown,https://deepmind.google/technologies/gemini/pro/,Our best model yet for coding performance and complex prompts,,Gemini Team,"Today, we’re releasing an experimental version of Gemini 2.0 Pro that responds to that feedback. It has the strongest coding performance and ability to handle complex prompts, with better understanding and reasoning of world knowledge, than any model we’ve released so far. It comes with our largest context window at 2 million tokens, which enables it to comprehensively analyze and understand vast amounts of information, as well as the ability to call tools like Google Search and code execution.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",Training cost,,,,,,,,,,,,,,,,Hosted access (no API),Unreleased,,,,
EXAONE 3.5 32B,LG AI Research,2024-12-09,Language,"Language modeling/generation,Question answering,Translation",32000000000.0,32B,1.25e+24,1.25 × 10^24 (Table 2) ,Unspecified unreleased,6500000000000.0,6.5T tokens (Table 2),Confident,https://arxiv.org/abs/2412.04862,EXAONE 3.5: Series of Large Language Models for Real-world Use Cases,,"Soyoung An, Kyunghoon Bae, Eunbi Choi, Kibong Choi, Stanley Jungkyu Choi, Seokhee Hong, Junwon Hwang, Hyojin Jeon, Gerrard Jeongwon Jo, Hyunjik Jo, Jiyeon Jung, Yountae Jung, Hyosang Kim, Joonkee Kim, Seonghwan Kim, Soyeon Kim, Sunkyoung Kim, Yireun Kim, Yongil Kim, Youchul Kim, Edward Hwayoung Lee, Haeju Lee, Honglak Lee, Jinsik Lee, Kyungmin Lee, Woohyung Lim, Sangha Park, Sooyoun Park, Yongmin Park, Sihoon Yang, Heuiyeen Yeen, Hyeongu Yun","This technical report introduces the EXAONE 3.5 instruction-tuned language models, developed and released by LG AI Research. The EXAONE 3.5 language models are offered in three configurations: 32B, 7.8B, and 2.4B. These models feature several standout capabilities: 1) exceptional instruction following capabilities in real-world scenarios, achieving the highest scores across seven benchmarks, 2) outstanding long-context comprehension, attaining the top performance in four benchmarks, and 3) competitive results compared to state-of-the-art open models of similar sizes across nine general benchmarks. The EXAONE 3.5 language models are open to anyone for research purposes and can be downloaded from this https URL. For commercial use, please reach out to the official contact point of LG AI Research: contact_us@lgresearch.ai.",Industry,Korea (Republic of),Training cost,,,,,,,,,,,,,,,,Open weights (non-commercial),Unreleased,,Exaone license (allows only non-commercial usage),,
Llama 3.3 70B,Meta AI,2024-12-06,Language,"Language modeling/generation,Question answering,Translation,Code generation",70000000000.0,70B,6.8649768e+24,"6ND = 6 FLOP / parameter / token * 70*10^9 parameters * 15*10^12 tokens = 6.3e+24 FLOP

7000000 GPU-hours * 3600 sec / hour * 989500000000000 FLOP / second * 0.3 [assumed utilization]= 7.48062e+24 FLOP

sqrt(7.48062e+24*6.3e+24) = 6.8649768e+24",Unspecified unreleased,15000000000000.0,"""Overview: Llama 3.3 was pretrained on ~15 trillion tokens of data from publicly available sources. The fine-tuning data includes publicly available instruction datasets, as well as over 25M synthetically generated examples.

Data Freshness: The pretraining data has a cutoff of December 2023.""",Confident,https://www.llama.com/docs/model-cards-and-prompt-formats/llama3_3/,Meta Llama 3.3 multilingual large language model (LLM) ,,,"The Meta Llama 3.3 multilingual large language model (LLM) is a pretrained and instruction tuned generative model in 70B (text in/text out). The Llama 3.3 instruction tuned text only model is optimized for multilingual dialogue use cases and outperforms many of the available open source and closed chat models on common industry benchmarks.

Model developer: Meta

Model Architecture: Llama 3.3 is an auto-regressive language model that uses an optimized transformer architecture. The tuned versions use supervised fine-tuning (SFT) and reinforcement learning with human feedback (RLHF) to align with human preferences for helpfulness and safety.",Industry,United States of America,Training cost,,,,"""Training utilized a cumulative of 39.3M GPU hours of computation on H100-80GB (TDP of 700W) type hardware, per the table below. Training time is the total GPU time required for training each model and power consumption is the peak power capacity per GPU device used, adjusted for power usage efficiency.""

Llama 3.3 70B: Training Time (GPU hours): 7M
",NVIDIA H100 SXM5 80GB,,,,,,,,,,,Open weights (restricted use),Unreleased,,"License A custom commercial license, the Llama 3.3 Community License Agreement, is available at: https://github.com/meta-llama/llama-models/blob/main/models/llama3_3/LICENSE

""Llama 3.3 is intended for commercial and research use in multiple languages.""",,
o1,OpenAI,2024-12-05,"Language,Mathematics,Multimodal","Code generation,Language modeling/generation,Quantitative reasoning,Chat,Question answering,Translation",,,,,Unspecified unreleased,,,Unknown,https://openai.com/index/introducing-chatgpt-pro/,Introducing ChatGPT Pro: Broadening usage of frontier AI.,,,"We've developed a new series of AI models designed to spend more time thinking before they respond. They can reason through complex tasks and solve harder problems than previous models in science, coding, and math.

Today, we are releasing the first of this series in ChatGPT and our API. This is a preview and we expect regular updates and improvements. Alongside this release, we’re also including evaluations for the next update, currently in development.",Industry,United States of America,"SOTA improvement,Significant use",SOTA in GPQA among others: https://openai.com/index/learning-to-reason-with-llms/ ,,,,,,,,,,,,,,,API access,Unreleased,,,,
Infinity,ByteDance,2024-12-05,Image generation,"Image generation,Text-to-image",2000000000.0,,,,"LAION,COYO-700M",,,Confident,https://arxiv.org/abs/2412.04431v1,Infinity∞: Scaling Bitwise AutoRegressive Modeling for High-Resolution Image Synthesis,25.0,"Jian Han, Jinlai Liu, Yi Jiang, Bin Yan, Yuqi Zhang, Zehuan Yuan, Bingyue Peng, Xiaobing Liu","We present Infinity, a Bitwise Visual AutoRegressive Modeling capable of generating high-resolution, photorealistic images following language instruction. Infinity redefines visual autoregressive model under a bitwise token prediction framework with an infinite-vocabulary tokenizer & classifier and bitwise self-correction mechanism, remarkably improving the generation capacity and details. By theoretically scaling the tokenizer vocabulary size to infinity and concurrently scaling the transformer size, our method significantly unleashes powerful scaling capabilities compared to vanilla VAR. Infinity sets a new record for autoregressive text-to-image models, outperforming top-tier diffusion models like SD3-Medium and SDXL. Notably, Infinity surpasses SD3-Medium by improving the GenEval benchmark score from 0.62 to 0.73 and the ImageReward benchmark score from 0.87 to 0.96, achieving a win rate of 66%. Without extra optimization, Infinity generates a high-quality 1024x1024 image in 0.8 seconds, making it 2.6x faster than SD3-Medium and establishing it as the fastest text-to-image model. Models and codes will be released to promote further exploration of Infinity for visual generation and unified tokenizer modeling.",Industry,China,SOTA improvement,"Infinity achieved best performance at severrat text-to-image benchmarks, including GenEval and ImageReward. ",,,,,,,,,,,,,,,Open weights (unrestricted),Open source,,"MIT license

https://huggingface.co/FoundationVision/Infinity
https://github.com/FoundationVision/Infinity",FP16,
Amazon Nova Pro,Amazon,2024-12-03,"Multimodal,Language,Video,Vision","Language modeling/generation,Retrieval-augmented generation,Visual question answering,Image captioning,Video description,Character recognition,Code generation,Translation",,,6.000010000000001e+24,"""probably just below 1e25 stemming from the Llama 70B serving speed.  If Llama 70B is trained proportionally to 405B, then it's at ~ 6.6e24. Nova Pro is served at 100tk/s, while Llama 70B is served at 70tk/s on average, and 100tk/s by together.ai at FP8. So Nova Pro would be >1e25 if they roughly 2x the amount of training compared to Llama 70B which [seems unlikely]""",Unspecified unreleased,,,Speculative,"https://aws.amazon.com/es/blogs/aws/introducing-amazon-nova-frontier-intelligence-and-industry-leading-price-performance/

https://assets.amazon.science/96/7d/0d3e59514abf8fdcfafcdc574300/nova-tech-report-20250317-0810.pdf",Introducing Amazon Nova foundation models: Frontier intelligence and industry leading price performance,,," A highly capable multimodal model with the best combination of accuracy, speed, and cost for a wide range of tasks. Amazon Nova Pro is capable of processing up to 300K input tokens and sets new standards in multimodal intelligence and agentic workflows that require calling APIs and tools to complete complex workflows. It achieves state-of-the-art performance on key benchmarks including visual question answering (TextVQA) and video understanding (VATEX). Amazon Nova Pro demonstrates strong capabilities in processing both visual and textual information and excels at analyzing financial documents. With an input context of 300K tokens, it can process code bases with over fifteen thousand lines of code. Amazon Nova Pro also serves as a teacher model to distill custom variants of Amazon Nova Micro and Lite.",Industry,United States of America,SOTA improvement,"""It achieves state-of-the-art performance on key benchmarks including visual question answering (TextVQA) and video understanding (VATEX).""",,,,"Amazon Trainium1,NVIDIA A100,NVIDIA H100 SXM5 80GB",,,,,,,,,,,API access,Unreleased,,,,
Fugatto 1,NVIDIA,2024-11-25,"Multimodal,Language,Audio",Audio generation,2500000000.0,,,,,,"""our dataset is comprised of at least 50,000 hours of audio""",Confident,https://research.nvidia.com/publication/2024-11_fugatto-1-foundational-generative-audio-transformer-opus-1,"Fugatto 1 - Foundational Generative Audio Transformer Opus 1
",,"Rafael Valle, Rohan Badlani, Zhifeng Kong, Sang-gil Lee, Arushi Goel, Sungwon Kim,
Joao Felipe Santos, Shuqi Dai, Siddharth Gururani, Aya AlJa'fari, Alex Liu, Kevin Shih, Wei Ping, Bryan Catanzaro
","Fugatto is a versatile audio synthesis and transformation model capable of following free-form text instructions with optional audio inputs. While large language models (LLMs) trained with text on a simple next-token prediction objective can learn to infer instructions directly from the data, models trained solely on audio data lack this capacity. This is because audio data does not inherently contain the instructions that were used to generate it. To overcome this challenge, we introduce a specialized dataset generation approach optimized for producing a wide range of audio generation and transformation tasks, ensuring the data reveals meaningful relationships between audio and language. Another challenge lies in achieving compositional abilities – such as combining, interpolating between, or negating instructions – using data alone. To address it, we propose ComposableART, an inference-time technique that extends classifier-free guidance to compositional guidance. It enables the seamless and flexible composition of instructions, leading to highly customizable audio outputs outside the training distribution. Our evaluations across a diverse set of tasks demonstrate that Fugatto performs competitively with specialized models, while ComposableART enhances its sonic palette and control over synthesis. Most notably, we highlight our framework’s ability to synthesize emergent sounds – sonic phenomena that transcend conventional audio generation – unlocking new creative possibilities. Demo Website.",Industry,United States of America,SOTA improvement,"""We showcase Fugatto’s performance on traditional TTA benchmarks that
measure a model’s ability to synthesize general sounds (AudioCAPS) and music (MusicCAPS) that follow instructions provided in text. We use the metrics (FD, FAD, and IS) and data splits (train, test) used in Kong et al. (2024b). Results in Table 3a and Table 3b shows that our model achieves strictly better scores than existing generalist models, while occasionally outperforming expert models""",,,,NVIDIA A100,32.0,,,,25178.17637397875,,,,,,Unreleased,Unreleased,Unreleased,"demos only
https://fugatto.github.io/",Unknown,
Suno v4,Suno,2024-11-19,Audio,Audio generation,,,,,,,,Unknown,https://suno.com/blog/v4,Introducing v4,,Team Suno,"Today, we’re excited to introduce v4—the next step toward enabling you to make music at the speed of your ideas. When we launched v3 earlier this year, it opened up new possibilities for music creation. Post v3 launch, we’ve refined what worked and added more where it mattered most. The result is v4—a major update that takes music creation to the next level. v4 delivers cleaner audio, sharper lyrics, and more dynamic song structures.",Industry,United States of America,Significant use,https://www.semrush.com/website/suno.ai/overview/,,,,,,,,,,,,,,,Hosted access (no API),Unreleased,Unreleased,,,
Pixtral Large,Mistral AI,2024-11-18,Multimodal,Vision-language generation,124000000000.0,"123B multimodal decoder, 1B parameter vision encoder",,,,,,Confident,https://mistral.ai/news/pixtral-large/,Pixtral Large,,"Albert Jiang, Alexandre Sablayrolles, Alexis Tacnet, Alok Kothari, Antoine Roux, Arthur Mensch, Audrey Herblin-Stoop, Augustin Garreau, Austin Birky, Bam4d, Baptiste Bout, Baudouin de Monicault, Blanche Savary, Carole Rambaud, Caroline Feldman, Devendra Singh Chaplot, Diego de las Casas, Diogo Costa, Eleonore Arcelin, Emma Bou Hanna, Etienne Metzger, Gaspard Blanchet, Gianna Lengyel, Guillaume Bour, Guillaume Lample, Harizo Rajaona, Henri Roussez, Hichem Sattouf, Ian Mack, Jean-Malo Delignon, Jessica Chudnovsky, Justus Murke, Kartik Khandelwal, Lawrence Stewart, Louis Martin, Louis Ternon, Lucile Saulnier, Lélio Renard Lavaud, Margaret Jennings, Marie Pellat, Marie Torelli, Marie-Anne Lachaux, Marjorie Janiewicz, Mickaël Seznec, Nicolas Schuhl, Niklas Muhs, Olivier de Garrigues, Patrick von Platen, Paul Jacob, Pauline Buche, Pavan Kumar Reddy, Perry Savas, Pierre Stock, Romain Sauvestre, Sagar Vaze, Sandeep Subramanian, Saurabh Garg, Sophia Yang, Szymon Antoniak, Teven Le Scao, Thibault Schueller, Thibaut Lavril, Thomas Wang, Théophile Gervet, Timothée Lacroix, Valera Nemychnikova, Wendy Shang, William El Sayed, William Marshall","Today we announce Pixtral Large, a 124B open-weights multimodal model built on top of Mistral Large 2. Pixtral Large is the second model in our multimodal family and demonstrates frontier-level image understanding. Particularly, the model is able to understand documents, charts and natural images, while maintaining the leading text-only understanding of Mistral Large 2.",Industry,France,"Significant use,SOTA improvement",Number of downloads not visible,,,,,,,,,,Mistral Large 2,,,,,Open weights (non-commercial),Unreleased,,"mrl license (research only), separate license is needed for commercial usage

https://huggingface.co/mistralai/Pixtral-Large-Instruct-2411",,
k0-math,Moonshot,2024-11-16,"Mathematics,Language","Mathematical reasoning,Quantitative reasoning",,This tweet mentions that this LLM has 100B params but I have not found the information anywhere else. https://x.com/kimmonismus/status/1902710969534460109,,,,,,Unknown,https://web.archive.org/web/20250124103542/https://www.globaltimes.cn/page/202411/1323248.shtml,Chinese AI start-up unveils latest reasoning model comparable to OpenAI o1 series,,,"Artificial general intelligence start-up Kimi, owned by Chinese AI start-up Moonshot AI, on Saturday launched its first reasoning AI model k0-math. The model can be compared to US-based OpenAI's reasoning AI series o1, including the o1-mini and o1-preview, in certain mathematics tests.

In four mathematical benchmark tests - China's high school entrance examination, college entrance examination, postgraduate entrance examination and math with introductory competition problems - the k0-math initial model outperformed OpenAI's o1-mini and o1-preview models, according to a statement sent from Moonshot AI to the Global Times on Sunday. 

In the two more challenging competition-level math problem sets - OMNI-MATH and AIME tests - the performance of the k0-math initial model reached 90 percent and 83 percent of the highest scores achieved by o1-mini, respectively.",Industry,China,SOTA improvement,"In four mathematical benchmark tests - China's high school entrance examination, college entrance examination, postgraduate entrance examination and math with introductory competition problems - the k0-math initial model outperformed OpenAI's o1-mini and o1-preview models, according to a statement sent from Moonshot AI to the Global Times on Sunday. ",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
Hunyuan-Large,Tencent,2024-11-06,Language,"Language modeling/generation,Question answering,Code generation,Translation",389000000000.0,"""a total of 389 billion parameters and 52 billion activation parameters""",3.49237e+24,"52B activated parameters

6ND = 6*52*10^9*7*10^12 = 2.184 × 10^24

They also suggest more precise formula to calculate MoE compute budget:

9.59ND + 2.3 × 10^8D = 9.59*52*10^9*7*10^12 + 2.3 × 10^8 ×  7*10^12 = 3.49237×10^24

which seems closer to projected compute on Figure 3",Unspecified unreleased,7000000000000.0,"""# Trained Tokens 7T""  Table 1",Confident,https://arxiv.org/abs/2411.02265,Hunyuan-Large: An Open-Source MoE Model with 52 Billion Activated Parameters by Tencent,,"Xingwu Sun, Yanfeng Chen, Yiqing Huang, Ruobing Xie, Jiaqi Zhu, Kai Zhang, Shuaipeng Li, Zhen Yang, Jonny Han, Xiaobo Shu, Jiahao Bu, Zhongzhi Chen, Xuemeng Huang, Fengzong Lian,
Saiyong Yang, Jianfeng Yan, Yuyuan Zeng, Xiaoqin Ren, Chao Yu, Lulu Wu, Yue Mao, Jun Xia, Tao Yang, Suncong Zheng, Kan Wu, Dian Jiao, Jinbao Xue, Xipeng Zhang, Decheng Wu, Kai Liu, Dengpeng Wu, Guanghui Xu, Shaohua Chen, Shuang Chen, Xiao Feng, Yigeng Hong, Junqiang Zheng, Chengcheng Xu, Zongwei Li, Xiong Kuang, Jianglu Hu, Yiqi Chen, Yuchi Deng, Guiyang Li, Ao Liu, Chenchen Zhang, Shihui Hu, Zilong Zhao, Zifan Wu, Yao Ding, Weichao Wang, Han Liu, Roberts Wang, Hao Fei, Peijie Yu, Ze Zhao, Xun Cao, Hai Wang, Fusheng Xiang, Mengyuan Huang, Zhiyuan Xiong, Bin Hu, Xuebin Hou, Lei Jiang, Jianqiang Ma, Jiajia Wu, Yaping Deng, Yi Shen, Qian Wang, Weijie Liu, Jie Liu, Meng Chen, Liang Dong, Weiwen Jia, Hu Chen, Feifei Liu, Rui Yuan, Huilin Xu, Zhenxiang Yan, Tengfei Cao, Zhichao Hu, Xinhua Feng, Dong Du, Tinghao Yu, Yangyu Tao, Feng Zhang, Jianchen Zhu, Chengzhong Xu, Xirui Li, Chong Zha, Wen Ouyang, Yinben Xia, Xiang Li, Zekun He, Rongpeng Chen, Jiawei Song, Ruibin Chen, Fan Jiang, Chongqing Zhao, Bo Wang, Hao Gong, Rong Gan, Winston Hu, Zhanhui Kang, Yong Yang, Yuhong Liu, Di Wang, and Jie Jiang.
","In this paper, we introduce Hunyuan-Large, which is currently the largest open-source Transformer-based mixture of experts model, with a total of 389 billion parameters and 52 billion activation parameters, capable of handling up to 256K tokens. We conduct a thorough evaluation of Hunyuan-Large's superior performance across various benchmarks including language understanding and generation, logical reasoning, mathematical problem-solving, coding, long-context, and aggregated tasks, where it outperforms LLama3.1-70B and exhibits comparable performance when compared to the significantly larger LLama3.1-405B model. Key practice of Hunyuan-Large include large-scale synthetic data that is orders larger than in previous literature, a mixed expert routing strategy, a key-value cache compression technique, and an expert-specific learning rate strategy. Additionally, we also investigate the scaling laws and learning rate schedule of mixture of experts models, providing valuable insights and guidances for future model development and optimization. The code and checkpoints of Hunyuan-Large are released to facilitate future innovations and applications.",Industry,China,Training cost,,,,,,,,,,,,,,,,Open weights (restricted use),Open (restricted use),,"the license doesn't regulate usage in the EU
also requires additional licensing in case of massive commercial use","BF16,FP16",
Doubao-pro,ByteDance,2024-10-28,Language,"Language modeling/generation,Question answering,Text summarization,Text classification",500000000000.0,"[Speculative] Doubao's large language model has scaled up from 35 billion parameters to 800 billion, with 500 billion and 800 billion parameter models currently under training.
https://xueqiu.com/9637001584/309910396?md5__1038=7qmx2DyDuie4cDBqDTQEWqDtMvO4iTphD
",2.505e+25,6ND = 6 * 500*10^9 * 8350*10^9 = 2.505e+25,Unspecified unreleased,8350000000000.0,"[Speculative] Doubao's pre-training data volume is approximately 500TB, with only about 10% of this data actually used for training. The current version employs a non-Mixture-of-Experts (MoE) architecture. In the future, MoE architecture may be introduced to increase parameter count and performance, while also integrating multimodal data solutions.

So this model is dense, and the training data is probably all text tokens, not multimodal.

50TB * 167M tokens/GB ~= 8.35 trillion tokens
",Speculative,https://www.volcengine.com/docs/6360/1264663,Doubao General Model Pro (Doubao-pro),,,"A professional-grade, self-developed LLM supporting up to 128k tokens, enabling fine-tuning across the entire series. ",Industry,China,Training cost,,,,,,,,,,,,,,,,API access,Unreleased,,,,True
NVLM-X 72B,NVIDIA,2024-10-22,"Vision,Language","Language modeling/generation,Vision-language generation,Question answering,Code generation,Translation,Quantitative reasoning",72000000000.0,72B,3.0398181e+24,3.02e24 FLOP (Qwen2-72B compute) + 19818086000000000000000 = 3.0398181e+24,"COCO,Conceptual Captions (CC3M),SBU,VQAv2,VisualGenome,TextVQA,OCR-VQA",45875200000.0,"Pre-training
Global batch size 2,048
Sequence length in the LLM decoder 512
Downsampling of visual tokens 1024->256
# of visual token per tile 256
# of tiles 1
# of training steps 20K

2048 * (512 + 256 * 1) * 20000 = 31,457,280,000

SFT:
Global batch size 256
Sequence length in the LLM decoder  1,024
# of visual token per tile 256
# of tiles 6+1
# of training steps 20K

256 * (1,024 + 256*7) * 20000 = 14417920000

31,457,280,000 +14417920000 = 45875200000",Likely,https://arxiv.org/abs/2409.11402,NVLM: Open Frontier-Class Multimodal LLMs,,"Wenliang Dai, Nayeon Lee, Boxin Wang, Zhuolin Yang, Zihan Liu, Jon Barker, Tuomas Rintamaki, Mohammad Shoeybi, Bryan Catanzaro, Wei Ping","We introduce NVLM 1.0, a family of frontier-class multimodal large language models (LLMs) that achieve state-of-the-art results on vision-language tasks, rivaling the leading proprietary models (e.g., GPT-4o) and open-access models (e.g., Llama 3-V 405B and InternVL 2). Remarkably, NVLM 1.0 shows improved text-only performance over its LLM backbone after multimodal training. In terms of model design, we perform a comprehensive comparison between decoder-only multimodal LLMs (e.g., LLaVA) and cross-attention-based models (e.g., Flamingo). Based on the strengths and weaknesses of both approaches, we propose a novel architecture that enhances both training efficiency and multimodal reasoning capabilities. Furthermore, we introduce a 1-D tile-tagging design for tile-based dynamic high-resolution images, which significantly boosts performance on multimodal reasoning and OCR-related tasks. Regarding training data, we meticulously curate and provide detailed information on our multimodal pretraining and supervised fine-tuning datasets. Our findings indicate that dataset quality and task diversity are more important than scale, even during the pretraining phase, across all architectures. Notably, we develop production-grade multimodality for the NVLM-1.0 models, enabling them to excel in vision-language tasks while maintaining and even improving text-only performance compared to their LLM backbones. To achieve this, we craft and integrate a high-quality text-only dataset into multimodal training, alongside a substantial amount of multimodal math and reasoning data, leading to enhanced math and coding capabilities across modalities. To advance research in the field, we release the model weights at this https URL and will open-source the training code for the community soon.",Industry,United States of America,Training cost,,1.0,,,NVIDIA H100 SXM5 80GB,128.0,,,Model uses ,176380.73226445544,"Qwen2-72B,InternViT-6B",1.9818086e+22,6*72B*45875200000 = 1.9818086e+22,,,Unreleased,Unreleased,,,BF16,
NVLM-H 72B,NVIDIA,2024-10-22,"Vision,Language","Language modeling/generation,Vision-language generation,Question answering,Code generation,Translation,Quantitative reasoning",72000000000.0,72B,3.02e+24,Additional compute in this paper is negligible relative to the compute used to train the language model backbone (Qwen2-72B at 3.02e24 FLOP),"COCO,Conceptual Captions (CC3M),SBU,VQAv2,VisualGenome,TextVQA,OCR-VQA",125829120000.0,"Pre-training:
Global batch size 2,048
Sequence length in the LLM decoder 512
Downsampling of visual tokens 1024->256
# of visual token per tile 256
# of tiles 6+1
# of training steps 20K

2048 * (512+256*7) * 20000 = 94,371,840,000

SFT:
Global batch size  256
Sequence length in the LLM decoder  1,280
# of visual token per tile 256
# of tiles 6+1
# of training steps 40K

256*(1280+256*7)*40000 = 31,457,280,000

94,371,840,000 + 31,457,280,000 = 125,829,120,000",Likely,https://arxiv.org/abs/2409.11402,NVLM: Open Frontier-Class Multimodal LLMs,,"Wenliang Dai, Nayeon Lee, Boxin Wang, Zhuolin Yang, Zihan Liu, Jon Barker, Tuomas Rintamaki, Mohammad Shoeybi, Bryan Catanzaro, Wei Ping","We introduce NVLM 1.0, a family of frontier-class multimodal large language models (LLMs) that achieve state-of-the-art results on vision-language tasks, rivaling the leading proprietary models (e.g., GPT-4o) and open-access models (e.g., Llama 3-V 405B and InternVL 2). Remarkably, NVLM 1.0 shows improved text-only performance over its LLM backbone after multimodal training. In terms of model design, we perform a comprehensive comparison between decoder-only multimodal LLMs (e.g., LLaVA) and cross-attention-based models (e.g., Flamingo). Based on the strengths and weaknesses of both approaches, we propose a novel architecture that enhances both training efficiency and multimodal reasoning capabilities. Furthermore, we introduce a 1-D tile-tagging design for tile-based dynamic high-resolution images, which significantly boosts performance on multimodal reasoning and OCR-related tasks. Regarding training data, we meticulously curate and provide detailed information on our multimodal pretraining and supervised fine-tuning datasets. Our findings indicate that dataset quality and task diversity are more important than scale, even during the pretraining phase, across all architectures. Notably, we develop production-grade multimodality for the NVLM-1.0 models, enabling them to excel in vision-language tasks while maintaining and even improving text-only performance compared to their LLM backbones. To achieve this, we craft and integrate a high-quality text-only dataset into multimodal training, alongside a substantial amount of multimodal math and reasoning data, leading to enhanced math and coding capabilities across modalities. To advance research in the field, we release the model weights at this https URL and will open-source the training code for the community soon.",Industry,United States of America,Training cost,,1.0,,,NVIDIA H100 SXM5 80GB,128.0,,,,176380.73226445544,"Qwen2-72B,InternViT-6B",5.436e+22,"6ND = 6*125,829,120,000*72000000000.00 = 5.436e22
",,,Unreleased,Unreleased,,,BF16,
NVLM-D 72B,NVIDIA,2024-10-22,"Vision,Language","Language modeling/generation,Vision-language generation,Question answering,Code generation,Translation,Quantitative reasoning",72000000000.0,72B,3.02e+24,"Uses Qwen2-72B as a backbone, which trained with 3.02e24 FLOP, as well as InternViT-6B. It's unclear how many FLOP were spent training but probably negligible; e.g. PaLI trained ViT-e with ~4B parameters using 1.07e23 FLOP.

Fine-tuning FLOPs:
57,016,320,000 image/text tokens over all stages
6 * 72B * 57,016,320,000 = 2.463e22
","COCO,Conceptual Captions (CC3M),SBU,VQAv2,VisualGenome,TextVQA,OCR-VQA",57016320000.0,"Pre-training
Global batch size 2,048
Sequence length in the LLM decoder 512
Downsampling of visual tokens 1024->256
# of visual token per tile 256
# of tiles 1
# of training steps 20K

2048 * (512 + 256 * 1) * 20000 = 31,457,280,000

SFT:
Global batch size 128
Sequence length in the LLM decoder 3,200
# of visual token per tile 256
# of tiles 6+1
# of training steps 40K

128 * (3200 + 256*7) * 40000 = 25,559,040,000

31,457,280,000 + 25,559,040,000 = 57,016,320,000",Confident,https://arxiv.org/abs/2409.11402,NVLM: Open Frontier-Class Multimodal LLMs,,"Wenliang Dai, Nayeon Lee, Boxin Wang, Zhuolin Yang, Zihan Liu, Jon Barker, Tuomas Rintamaki, Mohammad Shoeybi, Bryan Catanzaro, Wei Ping","We introduce NVLM 1.0, a family of frontier-class multimodal large language models (LLMs) that achieve state-of-the-art results on vision-language tasks, rivaling the leading proprietary models (e.g., GPT-4o) and open-access models (e.g., Llama 3-V 405B and InternVL 2). Remarkably, NVLM 1.0 shows improved text-only performance over its LLM backbone after multimodal training. In terms of model design, we perform a comprehensive comparison between decoder-only multimodal LLMs (e.g., LLaVA) and cross-attention-based models (e.g., Flamingo). Based on the strengths and weaknesses of both approaches, we propose a novel architecture that enhances both training efficiency and multimodal reasoning capabilities. Furthermore, we introduce a 1-D tile-tagging design for tile-based dynamic high-resolution images, which significantly boosts performance on multimodal reasoning and OCR-related tasks. Regarding training data, we meticulously curate and provide detailed information on our multimodal pretraining and supervised fine-tuning datasets. Our findings indicate that dataset quality and task diversity are more important than scale, even during the pretraining phase, across all architectures. Notably, we develop production-grade multimodality for the NVLM-1.0 models, enabling them to excel in vision-language tasks while maintaining and even improving text-only performance compared to their LLM backbones. To achieve this, we craft and integrate a high-quality text-only dataset into multimodal training, alongside a substantial amount of multimodal math and reasoning data, leading to enhanced math and coding capabilities across modalities. To advance research in the field, we release the model weights at this https URL and will open-source the training code for the community soon.",Industry,United States of America,SOTA improvement,SOTA on OCRBench and VQAv2,1.0,,,NVIDIA H100 SXM5 80GB,128.0,,,Model uses ,176380.73226445544,"Qwen2-72B,InternViT-6B",2.463e+22,"Fine-tuning FLOPs:
57,016,320,000 image/text tokens over all stages
6 * 72B * 57,016,320,000 = 2.463e22",,,Open weights (non-commercial),Open source,,"https://huggingface.co/nvidia/NVLM-D-72B
Creative Commons Attribution: Non-Commercial 4.0 International

https://github.com/NVIDIA/Megatron-LM/tree/NVLM-1.0/examples/multimodal/nvlm
license for code seems to be Apache 2.0","FP32,BF16",
Yi-Lightning,01.AI,2024-10-18,Language,Language modeling/generation,,,1.5e+24,"The CEO of 01.AI tweeted that Yi-Lightning was trained for 1 month on 2000 H100s: https://x.com/kaifulee/status/1846310645849047524
Assuming this is accurate:
(9.9e14 * 2000) FLOP/s * 1 month * 30.5 days/month * 24hr/day * 3600 s/hr * 0.3 utilization assumption = 1.565e24",Unspecified unreleased,,,Confident,https://www.lingyiwanwu.com/en https://platform.lingyiwanwu.com/,Yi-Lightning,,,,Industry,China,Training cost,"On the blind test list LMSYS, Yi-Lightning surpassed GPT-4o-2024-05-13 released by OpenAI and Anthropic, as well as Claude 3.5 Sonnet, ranking sixth in the world and first in China.",,720.0,"https://x.com/kaifulee/status/1846310645849047524
""it was trained on 2000 H100s for 1 month""",NVIDIA H100 SXM5 80GB,2000.0,,,,2756194.445567179,,,,,,API access,Unreleased,,https://platform.lingyiwanwu.com/,,
CHAI-1,Chai discovery,2024-10-15,Biology,Protein folding prediction,,,7.7605724e+21,"From paper: 128 A100s for 30 days; assumptions: 30% utilization rate, FP16 precision","PDB (Protein Data Bank), AlphaFold database (AFDB)",,,Confident,"https://www.chaidiscovery.com/blog/introducing-chai-1
https://www.biorxiv.org/content/10.1101/2024.10.10.615955v2",Introducing Chai-1: Decoding the molecular interactions of life,0.0,"Jacques Boitreaud, Jack Dent, Matthew McPartlon, Joshua Meier, Vinicius Reis, Alex Rogozhnikov, Kevin Wu","We introduce Chai-1, a multi-modal foundation model for molecular structure prediction that performs at the state-of-the-art across a variety of tasks relevant to drug discovery. Chai-1 can optionally be prompted with experimental restraints (e.g. derived from wet-lab data) which boosts
performance by double-digit percentage points. Chai-1 can also be run in single-sequence mode without MSAs while preserving most of its performance. We release Chai-1 model weights and inference code as a Python package for non-commercial use and via a web interface where it can be used for free including for commercial drug discovery purposes.",Industry,United States of America,SOTA improvement,Matches or beats AF3 on Ligand PoseBusters,,720.0,Taken from paper: 128 A100s for 30 days,NVIDIA A100,128.0,,,,100804.70264211958,,,,128.0,Taken from paper,Open weights (non-commercial),Open (non-commercial),,https://github.com/chaidiscovery/chai-lab?tab=License-1-ov-file,BF16,
RDT-1B,Tsinghua University,2024-10-10,Robotics,Robotic manipulation,1200000000.0,"Model Training and Inference: ""We scale the size of RDT up to 1.2B parameters, establishing it as the currently largest diffusion-based robotic foundation model.""",3.69e+22,"Model Training and Inference: ""The model is pre-trained on 48 H100 80GB GPUs for a month, giving a total of 1M training iteration steps. It takes three days to fine-tune this model using the same GPUs for 130K steps.""
Table 10: ""Mixed Precision, bf16""
Assume 48xGPU, ""scheduling reasons""  -> NVIDIA H100 SXM5 -> 9.894e14 FLOP/s/GPU
Assume 0.3 utilization
Assume 1 month -> 30 days = 720 hr = 2.592e6 s
0.3 * 48 GPU * 2.592e6 s * 9.894e14 FLOP/s/GPU ~=  3.69e22 FLOP

",RDT [pre-train],,"Appendix D: ""Our pre-training dataset collection includes 46 datasets, with a total scale of 1M+ trajectories and 21TB, making it the largest pre-training collection of robotics datasets to date.""



",Likely,https://arxiv.org/abs/2410.07864,RDT-1B: a Diffusion Foundation Model for Bimanual Manipulation,91.0,"Songming Liu, Lingxuan Wu, Bangguo Li, Hengkai Tan, Huayu Chen, Zhengyi Wang, Ke Xu, Hang Su, Jun Zhu","Bimanual manipulation is essential in robotics, yet developing foundation models is extremely challenging due to the inherent complexity of coordinating two robot arms (leading to multi-modal action distributions) and the scarcity of training data. In this paper, we present the Robotics Diffusion Transformer (RDT), a pioneering diffusion foundation model for bimanual manipulation. RDT builds on diffusion models to effectively represent multi-modality, with innovative designs of a scalable Transformer to deal with the heterogeneity of multi-modal inputs and to capture the nonlinearity and high frequency of robotic data. To address data scarcity, we further introduce a Physically Interpretable Unified Action Space, which can unify the action representations of various robots while preserving the physical meanings of original actions, facilitating learning transferrable physical knowledge. With these designs, we managed to pre-train RDT on the largest collection of multi-robot datasets to date and scaled it up to 1.2B parameters, which is the largest diffusion-based foundation model for robotic manipulation. We finally fine-tuned RDT on a self-created multi-task bimanual dataset with over 6K+ episodes to refine its manipulation capabilities. Experiments on real robots demonstrate that RDT significantly outperforms existing methods. It exhibits zero-shot generalization to unseen objects and scenes, understands and follows language instructions, learns new skills with just 1~5 demonstrations, and effectively handles complex, dexterous tasks. We refer to this https URL for the code and videos.",Academia,China,SOTA improvement,"""Results show that RDT achieves state-of-the-art performance, outperforming baselines by achieving an improvement of 56% in success rates across a wide spectrum of challenging tasks.""",,720.0,"Model Training and Inference: ""The model is pre-trained on 48 H100 80GB GPUs for a month, giving a total of 1M training iteration steps. It takes three days to fine-tune this model using the same GPUs for 130K steps.""",NVIDIA H100 PCIe,48.0,,,,33080.22622858553,,3.69e+21,"Model Training and Inference: ""The model is pre-trained on 48 H100 80GB GPUs for a month, giving a total of 1M training iteration steps. It takes three days to fine-tune this model using the same GPUs for 130K steps.""
Table 10: ""Mixed Precision, bf16""
Assume 48xGPU, ""scheduling reasons""  -> NVIDIA H100 SXM5 -> 9.894e14 FLOP/s/GPU
Assume 0.3 utilization
3 days = 72 hr = 259200 s
0.3 * 48 GPU * 259200 s *  9.894e14 FLOP/s/GPU ~= 3.69e21 FLOP",1536.0,"Table 10: Batch size, 32×48",Open weights (unrestricted),Open source,Open source,"https://huggingface.co/robotics-diffusion-transformer/rdt-1b
""All the code, pre-trained model weights, and data are licensed under the MIT license.""",BF16,
Palmyra X 004,Writer,2024-10-09,Language,"Language modeling,Language modeling/generation,Question answering,Code generation,Retrieval-augmented generation",150000000000.0,Source: https://venturebeat.com/ai/writers-palmyra-x-004-takes-the-lead-in-ai-function-calling-surpassing-tech-giants/,,,,,,,https://writer.com/engineering/actions-with-palmyra-x-004/,Introducing actions with Palmyra X 004,,Sam Julien / Writer,"Palmyra X4 boasts state-of-the-art reasoning through novel training techniques. By leveraging synthetic data, we’ve trained our model more efficiently and at a fraction of the cost reported by major AI labs. Palmyra X4’s suite of new features and capabilities include:

Taking action in systems external to the LLM via tool calling
Automatic data integration with a built-in RAG tool
Code generation
A 128k context window
Structured output generation for simpler system integration (coming in a few weeks)
Early results on tool calling benchmarks put our new frontier model as the leader on the Berkeley Function Calling Leaderboard by a significant margin, besting model providers including OpenAI, Anthropic, Meta, and Google, and is top-ranked on Stanford HELM.

Palmyra X4 is available today on AI Studio and Ask Writer, our prebuilt chat experience. You can also use apps powered by Palmyra X4 in Slack via our new Slack integration.",Industry,United States of America,SOTA improvement,SOTA on Berkeley’s Tool Calling Leaderboard,,,,,,,,,,,,,,,API access,Unreleased,,,,
GR-2,ByteDance,2024-10-08,Robotics,"Video,Action recognition,Video generation,Instruction interpretation,Robotic manipulation",230000000.0,"the default GR-2 model contains 230M parameters, of which 95M are trainable",,,,,"This large-scale pre-training, involving 38 million video clips
and over 50 billion tokens",Confident,https://arxiv.org/abs/2410.06158v1,GR-2: A Generative Video-Language-Action Model with Web-Scale Knowledge for Robot Manipulation,47.0,"Hang Li, Yifeng Li, Yuxiao Liu, Hongtao Wu, Jiafeng Xu, Yichu Yang, Hanbo Zhang, Minzhao Zhu","We present GR-2, a state-of-the-art generalist robot agent for versatile and generalizable robot manipulation. GR-2 is first pre-trained on a vast number of Internet videos to capture the dynamics of the world. This large-scale pre-training, involving 38 million video clips and over 50 billion tokens, equips GR-2 with the ability to generalize across a wide range of robotic tasks and environments during subsequent policy learning. Following this, GR-2 is fine-tuned for both video generation and action prediction using robot trajectories. It exhibits impressive multi-task learning capabilities, achieving an average success rate of 97.7% across more than 100 tasks. Moreover, GR-2 demonstrates exceptional generalization to new, previously unseen scenarios, including novel backgrounds, environments, objects, and tasks. Notably, GR-2 scales effectively with model size, underscoring its potential for continued growth and application. Project page: \url{this https URL}.",Industry,China,SOTA improvement,Top perfoming model on CALVIN benchmark. ,,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
Movie Gen Video,Meta AI,2024-10-04,"Video,Vision","Video generation,Text-to-video,Image-to-video",30000000000.0,30B,1.65e+24,"Model size = 30B
Broken down by training stage (table 3):
256px T2I: samples seen = 1.94E9; sample token length = 256; flops = 6ND = 8.94E22
256px T2I/V: samples seen = 3.95E8; sample token length = 8192; flops = 6ND = 5.82E23
768px T2I/V: samples seen = 7.38E7; sample token length = 73,728; flops = 6ND = 9.79E23
Total flops = 1.65E24",,26600000000.0,"O(1B) images
O(100M) videos, each with 256 frames ~= 25M images",Confident,https://ai.meta.com/static-resource/movie-gen-research-paper,Movie Gen: A Cast of Media Foundation Models,,"Adam Polyak, Amit Zohar, Andrew Brown, Andros Tjandra, Animesh Sinha, Ann Lee, Apoorv Vyas, Bowen
Shi, Chih-Yao Ma, Ching-Yao Chuang, David Yan, Dhruv Choudhary, Dingkang Wang, Geet Sethi, Guan
Pang, Haoyu Ma, Ishan Misra, Ji Hou, Jialiang Wang, Kiran Jagadeesh, Kunpeng Li, Luxin Zhang, Mannat
Singh, Mary Williamson, Matt Le, Mitesh Kumar Singh, Peizhao Zhang, Peter Vajda, Quentin Duval, Rohit
Girdhar, Roshan Sumbaly, Sai Saketh Rambhatla, Sam Tsai, Samaneh Azadi, Samyak Datta, Sanyuan Chen,
Sean Bell, Sharadh Ramaswamy, Shelly Sheynin, Siddharth Bhattacharya, Tao Xu, Tingbo Hou, Wei-Ning
Hsu, Xi Yin, Xiaoliang Dai, Yaniv Taigman, Yaqiao Luo, Yen-Cheng Liu, Yi-Chiao Wu, Yue Zhao, Yuval
Kirstain, Zecheng He, Zijian He","We present Movie Gen, a cast of foundation models that generates high-quality, 1080p HD videos with different aspect ratios and synchronized audio. We also show additional capabilities such as precise instruction-based video editing and generation of personalized videos based on a user’s image.
Our models set a new state-of-the-art on multiple tasks: text-to-video synthesis, video personalization, video editing, video-to-audio generation, and text-to-audio generation. Our largest video generation model is a 30B parameter transformer trained with a maximum context length of 73K video tokens, corresponding to a generated video of 16 seconds at 16 frames-per-second. We show multiple technical innovations and simplifications on the 
 architecture, latent spaces, training objectives and recipes, data curation, evaluation protocols, parallelization techniques, and inference optimizations that allow us to reap the benefits of scaling pre-training data, model size, and training compute for training large scale media generation models. We hope this paper helps the research community to accelerate progress and innovation in media generation models.
All videos from this paper are available at https://go.fb.me/MovieGenResearchVideos.",Industry,United States of America,Training cost,BOTE estimate of cost is ~$3 million,,331.0,"54 hours for 256px T2I
128 hours for 256px T2I/V
149 hours for 768px T2I/V",NVIDIA H100 SXM5 80GB,6144.0,,,,8469669.524206791,,,,,,Unreleased,Unreleased,,,,
Llama 3.2 11B,Meta AI,2024-09-24,"Multimodal,Vision,Language","Visual question answering,Image captioning,Object detection",10600000000.0,https://huggingface.co/meta-llama/Llama-3.2-11B-Vision,5.79e+23,"Tensor type is BF16 (https://huggingface.co/meta-llama/Llama-3.2-11B-Vision-Instruct).

“Training utilized a cumulative of 2.02M GPU hours of computation on H100-80GB (TDP of 700W) type hardware, per the table below. Training time is the total GPU time required for training each model and power consumption is the peak power capacity per GPU device used, adjusted for power usage efficiency… Training time: Stage 1 pretraining: 147K H100 hours Stage 2 annealing: 98K H100 hours SFT: 896 H100 hours RLHF: 224 H100 hours.” (https://github.com/meta-llama/llama-models/blob/main/models/llama3_2/MODEL_CARD_VISION.md#hardware-and-software).

The Nvidia H100 80GB is the H100 SXM. BFLOAT16 Tensor Core peak FLOPS with sparsity is 1,979 teraFLOPS (https://resources.nvidia.com/en-us-tensor-core/nvidia-tensor-core-gpu-datasheet?ncid=no-ncid).

Assuming 33% utilization rate,
Training compute
~= 0.33 * ( 147000 + 98000 + 896 + 224 ) hours * 3600 s / hour * 1979e12 FLOPS / GPU
~= 5.79e23 FLOPS",Unspecified unreleased,6000000000.0,"Since the model can also be used for image captioning, I assume the dataset size is measured in numbers of image-caption pairs (https://docs.google.com/document/d/1XWLyMzcVfDv4eFQX3yPgM8MZ3_Q1phtIFz9GKv4_KaM/edit?tab=t.0#heading=h.ny4fw3njk98p). """"Llama 3.2-Vision was pretrained on 6B image and text pairs"" (https://github.com/meta-llama/llama-models/blob/main/models/llama3_2/MODEL_CARD_VISION.md#training-data).",Confident,https://ai.meta.com/blog/llama-3-2-connect-2024-vision-edge-mobile-devices/,"Llama 3.2: Revolutionizing edge AI and vision with open, customizable models",,Meta AI,"Today, we’re releasing Llama 3.2, which includes small and medium-sized vision LLMs (11B and 90B), and lightweight, text-only models (1B and 3B) that fit onto edge and mobile devices, including pre-trained and instruction-tuned versions.
Supported by a broad ecosystem, the Llama 3.2 11B and 90B vision models are drop-in replacements for their corresponding text model equivalents, while exceeding on image understanding tasks compared to closed models, such as Claude 3 Haiku. Unlike other open multimodal models, both pre-trained and aligned models are available to be fine-tuned for custom applications using torchtune and deployed locally using torchchat. They’re also available to try using our smart assistant, Meta AI.
We’re sharing the first official Llama Stack distributions, which will greatly simplify the way developers work with Llama models in different environments, including single-node, on-prem, cloud, and on-device, enabling turnkey deployment of retrieval-augmented generation (RAG) and tooling-enabled applications with integrated safety.
We’ve been working closely with partners like AWS, Databricks, Dell Technologies, Fireworks, Infosys, and Together AI to build Llama Stack distributions for their downstream enterprise clients. On-device distribution is via PyTorch ExecuTorch, and single-node distribution is via Ollama.
We continue to share our work because we believe openness drives innovation and is good for developers, Meta, and the world. Llama is already leading the way on openness, modifiability, and cost efficiency—enabling more people to have creative, useful, and life-changing breakthroughs using generative AI.
We’re making Llama 3.2 models available for download on llama.com and Hugging Face, as well as available for immediate development on our broad ecosystem of partner platforms, including AMD, AWS, Databricks, Dell, Google Cloud, Groq, IBM, Intel, Microsoft Azure, NVIDIA, Oracle Cloud, Snowflake, and more.",Industry,United States of America,Significant use,"1,019,539 downloads on HuggingFace last month at time of writing (https://huggingface.co/meta-llama/Llama-3.2-11B-Vision-Instruct).",,,"""Stage 1 pretraining: 147K H100 hours Stage 2 annealing: 98K H100 hours SFT: 896 H100 hours RLHF: 224 H100 hours""

https://huggingface.co/meta-llama/Llama-3.2-11B-Vision",NVIDIA H100 SXM5 80GB,,,,,,Llama 3.1-8B,3.50010000000001e+23,147000+98000+896+224 GPU-hours => 246120 GPU-hours * 60 * 60 * 989e12 FLOP * 0.4 (utilization) = 3.5e23 FLOP,,,Open weights (restricted use),Unreleased,,"LLAMA 3.2 COMMUNITY LICENSE AGREEMENT

https://github.com/meta-llama/llama-models/blob/main/models/llama3_2/LICENSE",,
Qwen2.5-72B,Alibaba,2024-09-19,Language,"Language modeling/generation,Question answering,Quantitative reasoning",72700000000.0,72.7B,7.8e+24,"Training dataset size was 18 trillion

6ND = 6 * 72.7 billion parameters * 18 trillion tokens = 7.8e24",Unspecified unreleased,18000000000000.0,"""In terms of Qwen2.5, the language models, all models are pretrained on our latest large-scale dataset, encompassing up to 18 trillion tokens""",Confident,https://qwenlm.github.io/blog/qwen2.5/,Qwen2.5: A Party of Foundation Models!,,Qwen Team,"In the past three months since Qwen2’s release, numerous developers have built new models on the Qwen2 language models, providing us with valuable feedback. During this period, we have focused on creating smarter and more knowledgeable language models. Today, we are excited to introduce the latest addition to the Qwen family: Qwen2.5. We are announcing what might be the largest opensource release in history! Let’s get the party started!",Industry,China,Training cost,"High compute, near 1e25",1.0,,,,,,,,,,,,,,Open weights (unrestricted),Unreleased,,"license: allows commercial. weights only
https://huggingface.co/Qwen/Qwen2.5-72B/blob/main/LICENSE ",BF16,
Qwen2.5 Instruct (72B),Alibaba,2024-09-19,Language,"Code generation,Code autocompletion,Quantitative reasoning,Question answering,Language modeling/generation",72700000000.0,"Number of Parameters: 72.7B
Number of Paramaters (Non-Embedding): 70.0B",7.8516e+24,6ND = 6*72700000000 parameters *18000000000000 tokens = 7.8516e+24,Unspecified unreleased,18000000000000.0,"""In terms of Qwen2.5, the language models, all models are pretrained on our latest large-scale dataset, encompassing up to 18 trillion tokens.""",Confident,https://qwenlm.github.io/blog/qwen2.5/,Qwen2.5: A Party of Foundation Models!,,Qwen Team,"Qwen2.5 is the latest series of Qwen large language models. For Qwen2.5, we release a number of base language models and instruction-tuned language models ranging from 0.5 to 72 billion parameters. Qwen2.5 brings the following improvements upon Qwen2:

Significantly more knowledge and has greatly improved capabilities in coding and mathematics, thanks to our specialized expert models in these domains.
Significant improvements in instruction following, generating long texts (over 8K tokens), understanding structured data (e.g, tables), and generating structured outputs especially JSON. More resilient to the diversity of system prompts, enhancing role-play implementation and condition-setting for chatbots.
Long-context Support up to 128K tokens and can generate up to 8K tokens.
Multilingual support for over 29 languages, including Chinese, English, French, Spanish, Portuguese, German, Italian, Russian, Japanese, Korean, Vietnamese, Thai, Arabic, and more.",Industry,China,Training cost,,,,,,,,,,,Qwen2.5-72B,,,,,Open weights (restricted use),Unreleased,,"requires permission to use in applications with 100M+ users

https://huggingface.co/Qwen/Qwen2.5-72B-Instruct

seems that there is no pretraining code here
https://github.com/QwenLM/Qwen3",,
Oryx 34B,"Tsinghua University,Tencent,Nanyang Technological University",2024-09-19,"Multimodal,Vision,3D modeling,Video,Language","Visual question answering,Video compression,Image captioning,Video description,Language modeling/generation",34000000000.0,,,,Oryx-SFT-Data,,,Confident,https://arxiv.org/abs/2409.12961v1,"Oryx MLLM: On-Demand Spatial-Temporal Understanding at Arbitrary Resolution
",52.0,"Zuyan Liu, Yuhao Dong, Ziwei Liu, Winston Hu, Jiwen Lu, Yongming Rao","Visual data comes in various forms, ranging from small icons of just a few pixels to long videos spanning hours. Existing multi-modal LLMs usually standardize these diverse visual inputs to a fixed resolution for visual encoders and yield similar numbers of tokens for LLMs. This approach is non-optimal for multimodal understanding and inefficient for processing inputs with long and short visual contents. To solve the problem, we propose Oryx, a unified multimodal architecture for the spatial-temporal understanding of images, videos, and multi-view 3D scenes. Oryx offers an on-demand solution to seamlessly and efficiently process visual inputs with arbitrary spatial sizes and temporal lengths through two core innovations: 1) a pre-trained OryxViT model that can encode images at any resolution into LLM-friendly visual representations; 2) a dynamic compressor module that supports 1x to 16x compression on visual tokens by request. These design features enable Oryx to accommodate extremely long visual contexts, such as videos, with lower resolution and high compression while maintaining high recognition precision for tasks like document understanding with native resolution and no compression. Beyond the architectural improvements, enhanced data curation and specialized training on long-context retrieval and spatial-aware data help Oryx achieve strong capabilities in image, video, and 3D multimodal understanding simultaneously","Academia,Industry,Academia","China,China,Singapore",SOTA improvement,"Best performance on MLVU benchmark (long-form temporal understanding), MMBench and TextVQA (image understanding).",,,,NVIDIA A800 SXM,64.0,,,,50431.54291680728,Yi-1.5-34B,,,128.0,,Open weights (unrestricted),Open source,Open source,"Apache 2.0
https://huggingface.co/THUdyh/Oryx-1.5-32B

MIT license
https://github.com/Oryx-mllm/Oryx",,
Qwen2.5-32B,Alibaba,2024-09-17,Language,"Language modeling/generation,Question answering,Quantitative reasoning",32500000000.0,32.5B,3.51e+24,6 FLOP / parameter / token * 32.5B parameters * 18 trillion tokens = 3.51 × 10^24 FLOP,Unspecified unreleased,18000000000000.0,"""In terms of Qwen2.5, the language models, all models are pretrained on our latest large-scale dataset, encompassing up to 18 trillion tokens""",Confident,https://qwenlm.github.io/blog/qwen2.5/ ,Qwen2.5: A Party of Foundation Models!,,Qwen Team,"In the past three months since Qwen2’s release, numerous developers have built new models on the Qwen2 language models, providing us with valuable feedback. During this period, we have focused on creating smarter and more knowledgeable language models. Today, we are excited to introduce the latest addition to the Qwen family: Qwen2.5. We are announcing what might be the largest opensource release in history! Let’s get the party started!

The Qwen2.5-7B model surpasses its predecessors and counterparts in numerous benchmarks, despite having fewer non-embedding parameters. It demonstrates significant improvements across various tasks, achieving 74.2 on general benchmarks like MMLU, 49.8 on math challenges such as MATH, and 57.9 on coding tasks like HumanEval.",Industry,China,Training cost,,,,,,,,,,,,,,,,Open weights (unrestricted),Unreleased,,"Apache 2.0
https://huggingface.co/Qwen/Qwen2.5-32B",BF16,
o1-preview,OpenAI,2024-09-12,"Language,Mathematics,Biology","Code generation,Language modeling/generation,Quantitative reasoning,Chat,Question answering,Translation",,,,,Unspecified unreleased,,,Unknown,https://openai.com/index/introducing-openai-o1-preview/,A new series of reasoning models for solving hard problems.,,,"We've developed a new series of AI models designed to spend more time thinking before they respond. They can reason through complex tasks and solve harder problems than previous models in science, coding, and math.

Today, we are releasing the first of this series in ChatGPT and our API. This is a preview and we expect regular updates and improvements. Alongside this release, we’re also including evaluations for the next update, currently in development.",Industry,United States of America,"SOTA improvement,Significant use",SOTA in GPQA among others: https://openai.com/index/learning-to-reason-with-llms/ ,,,,,,,,,,,,,,,API access,Unreleased,,,,
o1-mini,OpenAI,2024-09-12,Language,"Code generation,Language modeling/generation,Quantitative reasoning,Chat,Question answering,Translation",,"Can't get an exact estimate, but we suspect total parameter count around 60B-120B, active parameters around 10B-30B. 

Given these models are served at 150-200 tok/s, at $4.40/Mtok output, inference economics (https://epoch.ai/blog/inference-economics-of-language-models) suggests total parameter count around 60-120B parameters, with mixture-of-experts active parameters around 10-30B. MoEs make a given model roughly comparable to a ~50% smaller dense model (https://epoch.ai/gradient-updates/moe-vs-dense-models-inference), which lines up decently with Magistral Small pricing (24B dense, served at a similar speed for the cheaper $1.50/Mtok). ",,"We can’t make a precise estimate, but seems unlikely to exceed 10^25 FLOP. We think active parameter count is 10-30B. This would require >55T tokens to reach 10^25 FLOP at the large size, i.e. well beyond 10x overtraining relative to Chinchilla.",Unspecified unreleased,,,Unknown,https://openai.com/index/learning-to-reason-with-llms/,Learning to reason with LLMs,,,"We've developed a new series of AI models designed to spend more time thinking before they respond. They can reason through complex tasks and solve harder problems than previous models in science, coding, and math.

...

We’re also releasing OpenAI o1-mini, a faster, cheaper reasoning model that is particularly effective at coding. As a smaller model, o1-mini is 80% cheaper than o1-preview, making it a powerful, cost-effective model for applications that require reasoning but not broad world knowledge.",Industry,United States of America,Significant use,"Model available in ChatGPT, likely widely used ",,,,,,,,,,,,,,,API access,Unreleased,,,,
DeepSeek-V2.5,DeepSeek,2024-09-06,Language,"Language modeling/generation,Chat,Code generation",236000000000.0,"21B active params, 236B total",1.7892e+24,"V2.5 is a merge of V2-coder and V2-chat
V2-coder is trained for 6T additional tokens from an intermediate checkpoint of V2, which had been trained for 4.2T tokens. Total: 10.2T
V2-chat is fine-tuned from V2, saw 8.2T tokens in pre-training
Unique steps: 8.2T + 6T = 14.2T
FLOPs: 6 * 21B * 14.2T = 1.7892e24","GitHub,Common Crawl",,"The original V2 had a dataset of 8.1T unique tokens, and coder-V2 added an additional 1.391T unique tokens of code and math. But it appears no additional training was done to combine them into this model.",Confident,https://huggingface.co/deepseek-ai/DeepSeek-V2.5,DeepSeek-V2.5,,"DeepSeek-AI, Aixin Liu, Bei Feng, Bin Wang, Bingxuan Wang, Bo Liu, Chenggang Zhao, Chengqi Dengr, Chong Ruan, Damai Dai, Daya Guo, Dejian Yang, Deli Chen, Dongjie Ji, Erhang Li, Fangyun Lin, Fuli Luo, Guangbo Hao, Guanting Chen, Guowei Li, H. Zhang, Hanwei Xu, Hao Yang, Haowei Zhang, Honghui Ding, Huajian Xin, Huazuo Gao, Hui Li, Hui Qu, J.L. Cai, Jian Liang, Jianzhong Guo, Jiaqi Ni, Jiashi Li, Jin Chen, Jingyang Yuan, Junjie Qiu, Junxiao Song, Kai Dong, Kaige Gao, Kang Guan, Lean Wang, Lecong Zhang, Lei Xu, Leyi Xia, Liang Zhao, Liyue Zhang, Meng Li, Miaojun Wang, Mingchuan Zhang, Minghua Zhang, Minghui Tang, Mingming Li, Ning Tian, Panpan Huang, Peiyi Wang, Peng Zhang, Qihao Zhu, Qinyu Chen, Qiushi Du, R.J. Chen, R.L. Jin, Ruiqi Ge, Ruizhe Pan, Runxin Xu, Ruyi Chen, S.S. Li, Shanghao Lu, Shangyan Zhou, Shanhuang Chen, Shaoqing Wu, Shengfeng Ye, Shirong Ma, Shiyu Wang, Shuang Zhou, Shuiping Yu, Shunfeng Zhou, Size Zheng, T. Wang, Tian Pei, Tian Yuan, Tianyu Sun, W.L. Xiao, Wangding Zeng, Wei An, Wen Liu, Wenfeng Liang, Wenjun Gao, Wentao Zhang, X.Q. Li, Xiangyue Jin, Xianzu Wang, Xiao Bi, Xiaodong Liu, Xiaohan Wang, Xiaojin Shen, Xiaokang Chen, Xiaosha Chen, Xiaotao Nie, Xiaowen Sun",,Industry,China,Training cost,,,,,,,,,,,,,,36864000.0,"Maximum batch size comes from training of V2-coder, which used long context training with 288 batches of 128k tokens = 36,864,000",Open weights (restricted use),Unreleased,,,,
Hunyuan Turbo,Tencent,2024-09-05,Language,Language modeling/generation,,,,,Unspecified unreleased,,,Unknown,https://zhidx.com/p/442250.html,"腾讯版“GPT-4o”来了！混元Turbo首发并上线，效率翻倍价格砍半
",,,,Industry,China,SOTA improvement,"Best score on SuperCLUE总排行榜（2024年8月）- SuperCLUE general benchmak from Aug 2024 (https://www.superclueai.com/) in terms of ""science"" and ""liberal arts"" evaluation.",,,,,,,,,,,,,,,API access,Unreleased,,"Available via Tencent Cloud

https://www.tencentcloud.com/document/product/647/68338",,
AlphaProteo,Google DeepMind,2024-09-05,Biology,"Protein generation,Proteins",,,,,PDB (Protein Data Bank),,,Unknown,https://storage.googleapis.com/deepmind-media/DeepMind.com/Blog/alphaproteo-generates-novel-proteins-for-biology-and-health-research/AlphaProteo2024.pdf,De novo design of high-affinity protein binders with AlphaProteo,,"Vinicius Zambaldi, David La, Alexander E. Chu, Harshnira Patani, Amy E. Danson, Tristan O. C. Kwan, Thomas Frerix, Rosalia G. Schneider, David Saxton, Ashok Thillaisundaram, Zachary Wu, Isabel Moraes, Oskar Lange, Eliseo Papa, Gabriella Stanton, Victor Martin, Sukhdeep Singh, Lai H. Wong, Russ Bates, Simon A. Kohl, Josh Abramson, Andrew W. Senior, Yilmaz Alguel, Mary Y. Wu,
Irene M. Aspalter, Katie Bentley, David L.V. Bauer, Peter Cherepanov, Demis Hassabis, Pushmeet Kohli, Rob Fergus, Jue Wang","Computational design of protein-binding proteins is a fundamental capability with broad utility in biomedical research and biotechnology. Recent methods have made strides against some target proteins, but on-demand creation of high-affinity binders without multiple rounds of experimental testing remains
an unsolved challenge. This technical report introduces AlphaProteo, a family of machine learning models for protein design, and details its performance on the de novo binder design problem. With AlphaProteo, we achieve 3- to 300-fold better binding affinities and higher experimental success rates than the best existing methods on seven target proteins. Our results suggest that AlphaProteo can generate binders ""ready-to-use"" for many research applications using only one round of medium-throughput screening
and no further optimization.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",Historical significance,Economic impacts from development of commercially and socially valuable protein designs and materials,,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
Hairuo,Inspur,2024-08-29,Language,Language modeling/generation,,,,,,,,Unknown,"https://encloud.inspur.com/hairuo/cp/index.html

https://www.eguizhou.gov.cn/guiyang/2024-08/29/c_1016827.htm",,,,,Industry,China,SOTA improvement,Highest score at SuperGLUE Benchmark https://super.gluebenchmark.com/leaderboard/,,,,,,,,,,,,,,,Hosted access (no API),Unreleased,,,,
GLM-4-Plus,Zhipu AI,2024-08-29,Language,Language modeling,,,3.5999999999999997e+25,Estimated using benchmark imputation,,,,Unknown,https://bigmodel.cn/dev/howuse/glm-4,GLM-4-Plus,,Zhipu AI,"At the KDD International Conference on Data Mining and Knowledge Discovery, the Zhipu GLM team unveiled the new generation of base large model—GLM-4-Plus. As the latest version of Zhipu’s fully self-developed GLM large model, GLM-4-Plus signifies Zhipu AI’s continuous dedication in the field of general artificial intelligence, advancing the independent and autonomous innovation of large model technology.",Industry,China,Training cost,,,,,,,,,,,,,,,,API access,Unreleased,,,,True
Jamba 1.5-Large,AI21 Labs,2024-08-22,Language,"Language modeling/generation,Chat,Translation,Question answering",398000000000.0,94B active/398B total,,,Unspecified unreleased,,,Confident,"https://arxiv.org/abs/2408.12570
https://www.ai21.com/blog/announcing-jamba-model-family
https://huggingface.co/ai21labs/AI21-Jamba-1.5-Large",Jamba-1.5: Hybrid Transformer-Mamba Models at Scale,,"Barak Lenz, Alan Arazi, Amir Bergman, Avshalom Manevich, Barak Peleg, Ben Aviram, Chen Almagor, Clara Fridman, Dan Padnos, Daniel Gissin, Daniel Jannai, Dor Muhlgay, Dor Zimberg, Edden M Gerber, Elad Dolev, Eran Krakovsky, Erez Safahi, Erez Schwartz, Gal Cohen, Gal Shachaf, Haim Rozenblum, Hofit Bata, Ido Blass, Inbal Magar, Itay Dalmedigos, Jhonathan Osin, Julie Fadlon, Maria Rozman, Matan Danos, Michael Gokhman, Mor Zusman, Naama Gidron, Nir Ratner, Noam Gat, Noam Rozen, Oded Fried, Ohad Leshno, Omer Antverg, Omri Abend, Opher Lieber, Or Dagan, Orit Cohavi, Raz Alon, Ro'i Belson, Roi Cohen, Rom Gilad, Roman Glozman, Shahar Lev, Shaked Meirom, Tal Delbari, Tal Ness, Tomer Asida, Tom Ben Gal, Tom Braude, Uriya Pumerantz, Yehoshua Cohen, Yonatan Belinkov, Yuval Globerson, Yuval Peleg Levy, Yoav Shoham","We present Jamba-1.5, new instruction-tuned large language models based on our Jamba architecture. Jamba is a hybrid Transformer-Mamba mixture of experts architecture, providing high throughput and low memory usage across context lengths, while retaining the same or better quality as Transformer models. We release two model sizes: Jamba-1.5-Large, with 94B active parameters, and Jamba-1.5-Mini, with 12B active parameters. Both models are fine-tuned for a variety of conversational and instruction-following capabilties, and have an effective context length of 256K tokens, the largest amongst open-weight models. To support cost-effective inference, we introduce ExpertsInt8, a novel quantization technique that allows fitting Jamba-1.5-Large on a machine with 8 80GB GPUs when processing 256K-token contexts without loss of quality. When evaluated on a battery of academic and chatbot benchmarks, Jamba-1.5 models achieve excellent results while providing high throughput and outperforming other open-weight models on long-context benchmarks. The model weights for both sizes are publicly available under the Jamba Open Model License and we release ExpertsInt8 as open source.",Industry,Israel,Training cost,,,,,NVIDIA H100 SXM5 80GB,,,,,,,,,,,Open weights (restricted use),Unreleased,,Commercial use allowed up to $50M USD annual revenue.,BF16,
Grok-2,xAI,2024-08-13,"Language,Vision,Multimodal","Chat,Language modeling/generation,Question answering,Code generation,Visual question answering",,,2.9599999999999996e+25,Estimate based on xAI statements comparing Grok-2 compute to GPT-4 and Grok-3. Full estimate here: https://docs.google.com/document/d/1C_dABuZrAqYE_ui4_GZ4bRLtq3TBjIGoBSktaPElhEU/edit?usp=sharing,Unspecified unreleased,,,Confident,https://x.ai/blog/grok-2,Grok-2 Beta Release,,,Grok-2 is our frontier language model with state-of-the-art reasoning capabilities. This release includes two members of the Grok family: Grok-2 and Grok-2 mini. Both models are now being released to Grok users on the 𝕏 platform.,Industry,United States of America,Training cost,,,,,NVIDIA H100 SXM5 80GB,,,30499862.98,,,,,,,,Hosted access (no API),Unreleased,,,,True
Table Tennis Agent,Google DeepMind,2024-08-07,Robotics,Sports,185000.0,"17 low level controllers with 10k parameters each: 
""Each policy is a dilated-gated CNN
[22] following the architecture in [23] with 10k parameters... The final
system contained 17 LLCs""

One high-level controller with 4.5k parameters: ""The style policy architecture, similar to the LLC but with
only 4.5k parameters, has a (8, 128) observation space""

spin classifier that is a 2-layer MLP of hidden sizes (128, 64) and input size 18, which is 10k parameters per o1 and Claude.

So ~185k parameters total",,unclear,,,"~18k ball states

""This iterative cycle of training models in simulation on
the latest dataset, evaluating it in the real world, and using
the annotated evaluation data to extend the dataset, can be
repeated as many times as needed. We completed 7 cycles
for rally balls and 2 cycles for serving balls over the course
of 3 months with over 50 different human opponents, leading
to a final dataset size of 14.2k initial ball states for rallies
and 3.4k for serves. A summary of the dataset evolution is
presented in Table I and Figure 6.""",Likely,"https://deepmind.google/research/publications/107741/
https://arxiv.org/abs/2408.03906",Achieving Human Level Competitive Robot Table Tennis,,"David B. D'Ambrosio, Saminda Abeyruwan, Laura Graesser, Atil Iscen, Heni Ben Amor, Alex Bewley, Barney J. Reed, Krista Reymann, Leila Takayama, Yuval Tassa, Krzysztof Choromanski, Erwin Coumans, Deepali Jain, Navdeep Jaitly, Natasha Jaques, Satoshi Kataoka, Yuheng Kuang, Nevena Lazic, Reza Mahjourian, Sherry Moore, Kenneth Oslund, Anish Shankar, Vikas Sindhwani, Vincent Vanhoucke, Grace Vesom, Peng Xu, and Pannag R. Sanketi","Achieving human-level speed and performance on real world tasks is a north star for the robotics research community. This work takes a step towards that goal and presents the first learned robot agent that reaches amateur human-level performance in competitive table tennis. Table tennis is a physically demanding sport which requires human players to undergo years of training to achieve an advanced level of proficiency. In this paper, we contribute (1) a hierarchical and modular policy architecture consisting of (i) low level controllers with their detailed skill descriptors which model the agent's capabilities and help to bridge the sim-to-real gap and (ii) a high level controller that chooses the low level skills, (2) techniques for enabling zero-shot sim-to-real including an iterative approach to defining the task distribution that is grounded in the real-world and defines an automatic curriculum, and (3) real time adaptation to unseen opponents. Policy performance was assessed through 29 robot vs. human matches of which the robot won 45% (13/29). All humans were unseen players and their skill level varied from beginner to tournament level. Whilst the robot lost all matches vs. the most advanced players it won 100% matches vs. beginners and 55% matches vs. intermediate players, demonstrating solidly amateur human-level performance. Videos of the matches can be viewed at this https URL",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",SOTA improvement,"""first learned robot agent that reaches amateur human-level performance in competitive table tennis""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
LLaVA-OV-72B,"ByteDance,Nanyang Technological University,Chinese University of Hong Kong (CUHK),Hong Kong University of Science and Technology (HKUST)",2024-08-06,"Multimodal,Vision","Image captioning,Visual question answering,Video description,Object recognition,Action recognition",72000000000.0,,3.036551985824e+24,"FineTune: 6*72000000000*38314782000=1.655199e+22

Base model: 3.02e+24
Total: 3.036552e+24",LLaVA-OneVision,38314782000.0,"Stage 1: 558000*729=406782000
Stage 1.5: 4M*729*5=14580000000
Stage 2-single: 3.2M*729*5=11664000000
Stage 2-one vision: 1.6M*729*10=11664000000
Total: 38314782000",Confident,https://arxiv.org/abs/2408.03326,"LLaVA-OneVision: Easy Visual Task Transfer
",514.0,"Bo Li, Yuanhan Zhang, Dong Guo, Renrui Zhang, Feng Li, Hao Zhang, Kaichen Zhang, Peiyuan Zhang, Yanwei Li, Ziwei Liu, Chunyuan Li","We present LLaVA-OneVision, a family of open large multimodal models (LMMs) developed by consolidating our insights into data, models, and visual representations in the LLaVA-NeXT blog series. Our experimental results demonstrate that LLaVA-OneVision is the first single model that can simultaneously push the performance boundaries of open LMMs in three important computer vision scenarios: single-image, multi-image, and video scenarios. Importantly, the design of LLaVAOneVision allows strong transfer learning across different modalities/scenarios, yielding new emerging capabilities. In particular, strong video understanding and cross-scenario capabilities are demonstrated through task transfer from images to
videos.","Industry,Academia,Academia,Academia","China,Singapore,Hong Kong,China,Hong Kong,China",SOTA improvement,"As shown in Table 4, LLaVA-OneVision (SI) consistently outperforms existing multi-image LMMs in all benchmarks. After additional tuning on multi-image and video data, LLaVA-OneVision shows a marked improvement over GPT-4V in specific areas, with significant margins. This highlights its strong performance in complex tasks such as multi-image reasoning, identifying differences, and understanding 3D environments",1.0,,,,,,,,,Qwen2-72B,,,256.0,"We use a global batch size of 512 for the 0.5B model, and 256 for the 7B and 72B models.",Open weights (unrestricted),Open source,,"Apache 2

https://huggingface.co/lmms-lab/llava-onevision-qwen2-72b-ov-sft

https://github.com/LLaVA-VL/LLaVA-NeXT",BF16,
AFM-server,Apple,2024-07-29,Language,Language modeling/generation,,,4.3e+24,"""The AFM base models are dense decoder-only models that build on the
Transformer architecture""

""We train AFM-server from scratch for 6.3T tokens on 8192
TPUv4 chips, using a sequence length of 4096 and a batch-size of 4096 sequences.""

""For both models we perform continued pre-training at a sequence length of
8192, with another 1T tokens from a mixture that upweights math and code,
and down-weights the bulk web-crawl.""

""The sustained model-flop-utilization (MFU) for this training run was approximately 52%.""

Parameter count is not specified other than it being ""larger"" than 3 billion.

Counting FLOP: Chinchilla scaling laws would suggest 7.3T / 20 = 365B parameters. 

365B parameters * 7.3T tokens * 6 ~= 1.6e25 FLOP.

However, the attention to inference optimization in the technical report suggests a smaller size, even for this ""server"" model. One point of reference is Llama 3 70B being overtrained by a factor of 10. If this is true of AFM-server, the parameter count would be ~37B and training compute would be 1.6e24 FLOP.

GPU-time: assume a wall-clock training time of 30 days based on the current trend value for notable models.

8192 chips * 275e12 FLOP/s per chip * 0.52 utilization * 30 * 24 * 60 * 60 s ~= 3.0e24 FLOP

The geometric mean of these three estimates is 4.3e24 FLOP.",,7400000000000.0,"Not explicitly mentioned, but I assume the 7.4T tokens do not involve multiple epochs.",Likely,https://machinelearning.apple.com/research/apple-intelligence-foundation-language-models,Apple Intelligence Foundation Language Models,,"Andy Narayanan, Aonan Zhang, Bowen Zhang, Chen Chen, Chong Wang, Chung-Cheng Chiu, David Qiu, Deepak Gopinath, Dian Ang Yap, Dong Yin, Feng Nan, Floris Weers, Guoli Yin, Haoshuo Huang, Jianyu Wang, Jiarui Lu, John Peebles, Ke Ye, Mark Lee, Nan Du, Qibin Chen, Quentin Keunebroek, Ruoming Pang, Sam Wiseman, Syd Evans, Tao Lei, Tom Gunter, Vivek Rathod, Xiang Kong, Xianzhi Du, Yanghao Li, Yongqiang Wang, Yuan Gao, Zaid Ahmed, Zhaoyang Xu, Zhiyun Lu, Zirui Wang, Al Rashid, Albin Madappally Jose, Alec Doane, Alfredo Bencomo, Allison Vanderby, Andrew Hansen, Ankur Jain, Anupama Mann Anupama, Areeba
Kamal, Bugu Wu, Carolina Brum, Charlie Maalouf, Chinguun Erdenebileg,
Chris Dulhanty, Dominik Moritz, Doug Kang, Eduardo Jimenez, Evan Ladd,
Fangping Shi, Felix Bai, Frank Chu, Fred Hohman, Hadas Kotek, Hannah
Gillis Coleman, Jane Li, Jeffrey Bigham, Jeffery Cao, Jeff Lai, Jessica Cheung, Jiulong Shan, Joe Zhou, John Li, Jun Qin, Karanjeet Singh, Karla Vega, Ke Ye, Kelvin Zou, Laura Heckman, Lauren Gardiner, Margit Bowler, Mark Lee, Maria Cordell, Meng Cao, Nicole Hay, Nilesh Shahdadpuri, Otto Godwin, Pranay Dighe, Pushyami Rachapudi, Ramsey Tantawi, Roman Frigg, Sam Davarnia, Sanskruti Shah, Saptarshi Guha, Sasha Sirovica, Shen Ma, Shuang Ma, Simon Wang, Sulgi Kim, Suma Jayaram, Vaishaal Shankar, Varsha Paidi, Vivek Kumar, Xiang Kong, Xin Wang, Xin Zheng, Walker Cheng, Yael Shrager, Yang Ye, Yasu Tanaka, Yihao Guo, Yunsong Meng, Zhao Tang Luo, Zhi Ouyang, Zhiyun Lu, Alp Aygar, Alvin Wan, Andrew Walkingshaw, Andy Narayanan, Antonie Lin, Arsalan Farooq, Brent Ramerth, Chong Wang, Colorado Reed, Chris Bartels, Chris Chaney, David Riazati, Eric Liang Yang, Erin Feldman, Gabriel Hochstrasser, Guillaume Seguin, Guoli Yin, Irina Belousova, Jianyu Wang, Joris Pelemans, Karen Yang, Keivan Alizadeh Vahid, Liangliang Cao, Mahyar Najibi , Marco Zuliani, Max Horton, Minsik Cho, Nikhil Bhendawade, Patrick Dong, Piotr Maj, Pulkit Agrawal, Qi Shan, Qibin Chen, Qichen Fu, Regan Poston, Sam Xu, Shuangning Liu, Sushma Rao, Tashweena Heeramun, Thomas Merth, Uday Rayala, Victor Cui, Vivek Rangarajan Sridhar, Vivek Rathod, Wencong Zhang, Wenqi Zhang, Wentao Wu, Xiang Kong, Xingyu Zhou, Xinwen Liu, Yang Zhao, Yin Xia, Zhile Ren, Zhongzheng Ren","We present foundation language models developed to power Apple Intelligence features, including a ~3 billion parameter model designed to run efficiently on devices and a large server-based language model designed for Private Cloud Compute. These models are designed to perform a wide range of tasks efficiently, accurately, and responsibly. This report describes the model architecture, the data used to train the model, the training process, how the models are optimized for inference, and the evaluation results. We highlight our focus on Responsible AI and how the principles are applied throughout the model development.",Industry,United States of America,Significant use,"Currently in beta access only, but will be integrated into millions or billions of iPhones.",1.0,,,Google TPU v4,8192.0,0.52,,,2746654.740036072,,,,18949752.5758905,"Main pretraining uses sequence length of 4096 tokens; 4096 sequences per batch. During the ""continued"" pre-training stage, sequence length is upped to 8192 while batch size remains 4096. During context lengthening, sequence length is upped to 32768 while ""the recipe is similar to that used for continued pre-training"" implies same batch size of 4096.

Weighting batch sizes by number of tokens seen in each stage:

exp((6.3T * ln(4096 * 4096) + 1T * ln(8192 * 4096) + 100B * ln(32768 * 4096))/ 7.4T) = 18,949,753",Hosted access (no API),Unreleased,,,BF16,
AFM-on-device,Apple,2024-07-29,Language,Language modeling/generation,2730000000.0,"Table 1, sum of non-embedding and embedding parameters",4.5126e+23,"Model was initialized from a pruned version of a 6.4B parameter model trained using the same recipe as AFM-server. Assuming ""same recipe"" involves training for the full 6.3T tokens, this implies 6 * 6.3T * 6.4B = 2.42e23 FLOP. 

The pruning masks are learned by training over 188B tokens, which suggests 6 * 188B * 6.4B = 7.22e21 FLOPs.

Pretraining is then run over 6.3T tokens; however, labels are a convex combination of true labels and the predicted labels from the unpruned 6.4B model. Since this involves running the 6.3T tokens forward through both the 6.4B and the 2.73B model, but only calculating gradients for the smaller model, FLOPs here are equal to (6 * 6.3T * 2.73B) + (2 * 6.3T * 6.4B) = 1.84e23. 

Finally, there is a 1T ""continuation"" pretraining stage without distillation loss, for 6 * 1T * 2.73B = 1.64e22 FLOP, and a 100B context-lengthening stage for another 6 * 100B * 2.73B = 1.64e21 FLOP

In total: 2.42e23 + 7.22e21 + 1.84e23 + 1.64e22 + 1.64e21 = 4.51e23 FLOP",,7588000000000.0,"Not explicitly mentioned, but I assume the 7.588T tokens do not involve multiple epochs.",Confident,https://machinelearning.apple.com/research/apple-intelligence-foundation-language-models,Apple Intelligence Foundation Language Models,,"Andy Narayanan, Aonan Zhang, Bowen Zhang, Chen Chen, Chong Wang, Chung-Cheng Chiu, David Qiu, Deepak Gopinath, Dian Ang Yap, Dong Yin, Feng Nan, Floris Weers, Guoli Yin, Haoshuo Huang, Jianyu Wang, Jiarui Lu, John Peebles, Ke Ye, Mark Lee, Nan Du, Qibin Chen, Quentin Keunebroek, Ruoming Pang, Sam Wiseman, Syd Evans, Tao Lei, Tom Gunter, Vivek Rathod, Xiang Kong, Xianzhi Du, Yanghao Li, Yongqiang Wang, Yuan Gao, Zaid Ahmed, Zhaoyang Xu, Zhiyun Lu, Zirui Wang, Al Rashid, Albin Madappally Jose, Alec Doane, Alfredo Bencomo, Allison Vanderby, Andrew Hansen, Ankur Jain, Anupama Mann Anupama, Areeba
Kamal, Bugu Wu, Carolina Brum, Charlie Maalouf, Chinguun Erdenebileg,
Chris Dulhanty, Dominik Moritz, Doug Kang, Eduardo Jimenez, Evan Ladd,
Fangping Shi, Felix Bai, Frank Chu, Fred Hohman, Hadas Kotek, Hannah
Gillis Coleman, Jane Li, Jeffrey Bigham, Jeffery Cao, Jeff Lai, Jessica Cheung, Jiulong Shan, Joe Zhou, John Li, Jun Qin, Karanjeet Singh, Karla Vega, Ke Ye, Kelvin Zou, Laura Heckman, Lauren Gardiner, Margit Bowler, Mark Lee, Maria Cordell, Meng Cao, Nicole Hay, Nilesh Shahdadpuri, Otto Godwin, Pranay Dighe, Pushyami Rachapudi, Ramsey Tantawi, Roman Frigg, Sam Davarnia, Sanskruti Shah, Saptarshi Guha, Sasha Sirovica, Shen Ma, Shuang Ma, Simon Wang, Sulgi Kim, Suma Jayaram, Vaishaal Shankar, Varsha Paidi, Vivek Kumar, Xiang Kong, Xin Wang, Xin Zheng, Walker Cheng, Yael Shrager, Yang Ye, Yasu Tanaka, Yihao Guo, Yunsong Meng, Zhao Tang Luo, Zhi Ouyang, Zhiyun Lu, Alp Aygar, Alvin Wan, Andrew Walkingshaw, Andy Narayanan, Antonie Lin, Arsalan Farooq, Brent Ramerth, Chong Wang, Colorado Reed, Chris Bartels, Chris Chaney, David Riazati, Eric Liang Yang, Erin Feldman, Gabriel Hochstrasser, Guillaume Seguin, Guoli Yin, Irina Belousova, Jianyu Wang, Joris Pelemans, Karen Yang, Keivan Alizadeh Vahid, Liangliang Cao, Mahyar Najibi , Marco Zuliani, Max Horton, Minsik Cho, Nikhil Bhendawade, Patrick Dong, Piotr Maj, Pulkit Agrawal, Qi Shan, Qibin Chen, Qichen Fu, Regan Poston, Sam Xu, Shuangning Liu, Sushma Rao, Tashweena Heeramun, Thomas Merth, Uday Rayala, Victor Cui, Vivek Rangarajan Sridhar, Vivek Rathod, Wencong Zhang, Wenqi Zhang, Wentao Wu, Xiang Kong, Xingyu Zhou, Xinwen Liu, Yang Zhao, Yin Xia, Zhile Ren, Zhongzheng Ren","We present foundation language models developed to power Apple Intelligence features, including a ∼3 billion parameter model designed to run efficiently on devices and a large server-based language model designed for Private Cloud Compute [Apple, 2024b]. These models are designed to perform a wide range of tasks efficiently, accurately, and responsibly. This report describes the model architecture, the data used to train the model, the training process, how the models are optimized for inference, and the evaluation results. We highlight our focus on Responsible AI and how the principles are applied throughout the model development.",Industry,United States of America,Significant use,"Currently in beta access only, but will be integrated into millions or billions of iPhones.",1.0,,"Trained on ""one slice of 2048 TPUv5p chips""; wall-time not given.",Google TPU v5p,2048.0,0.52,,,,,,,18949752.5758905,"Main pretraining uses sequence length of 4096 tokens; 4096 sequences per batch. During the ""continued"" pre-training stage, sequence length is upped to 8192 while batch size remains 4096. During context lengthening, sequence length is upped to 32768 while ""the recipe is similar to that used for continued pre-training"" implies same batch size of 4096.

Weighting batch sizes by number of tokens seen in each stage:

exp((6.3T * ln(4096 * 4096) + 1T * ln(8192 * 4096) + 100B * ln(32768 * 4096))/ 7.4T) = 18,949,753",Hosted access (no API),Unreleased,,,BF16,
Mistral Large 2,Mistral AI,2024-07-24,Language,"Language modeling/generation,Translation,Code generation",123000000000.0,,2.13e+25,"Details are sparse, but we can hazard a guess based on evidence about the training cluster they may have used, the scale up in compute they likely would have used relative to Mistral Large 1, and from the model's MMLU score. Extended reasoning given here: https://docs.google.com/document/d/1I2ZWBLFMpRZYcdMMUfKAGZFJrOJpduNDS9ZeVFIHnd8/edit?usp=sharing",Unspecified unreleased,,,Likely,https://mistral.ai/news/mistral-large-2407/,"Top-tier reasoning for high-complexity tasks, for your most sophisticated needs.",,"Albert Jiang, Alexandre Sablayrolles, Alexis Tacnet, Alok Kothari, Antoine Roux, Arthur Mensch, Audrey Herblin-Stoop, Augustin Garreau, Austin Birky, Bam4d, Baptiste Bout, Baudouin de Monicault, Blanche Savary, Carole Rambaud, Caroline Feldman, Devendra Singh Chaplot, Diego de las Casas, Diogo Costa, Eleonore Arcelin, Emma Bou Hanna, Etienne Metzger, Gaspard Blanchet, Gianna Lengyel, Guillaume Bour, Guillaume Lample, Harizo Rajaona, Henri Roussez, Hichem Sattouf, Ian Mack, Jean-Malo Delignon, Jessica Chudnovsky, Justus Murke, Kartik Khandelwal, Lawrence Stewart, Louis Martin, Louis Ternon, Lucile Saulnier, Lélio Renard Lavaud, Margaret Jennings, Marie Pellat, Marie Torelli, Marie-Anne Lachaux, Marjorie Janiewicz, Mickaël Seznec, Nicolas Schuhl, Niklas Muhs, Olivier de Garrigues, Patrick von Platen, Paul Jacob, Pauline Buche, Pavan Kumar Reddy, Perry Savas, Pierre Stock, Romain Sauvestre, Sagar Vaze, Sandeep Subramanian, Saurabh Garg, Sophia Yang, Szymon Antoniak, Teven Le Scao, Thibault Schueller, Thibaut Lavril, Thomas Wang, Théophile Gervet, Timothée Lacroix, Valera Nemychnikova, Wendy Shang, William El Sayed, William Marshall","Today, we are announcing Mistral Large 2, the new generation of our flagship model. Compared to its predecessor, Mistral Large 2 is significantly more capable in code generation, mathematics, and reasoning. It also provides a much stronger multilingual support, and advanced function calling capabilities.",Industry,France,Training cost,likely high training cost since previous Mistral Large cost around 20 million,,,,,,,,,,,,,,,Open weights (non-commercial),Unreleased,,"""We are releasing Mistral Large 2 under the Mistral Research License, that allows usage and modification for research and non-commercial usages. For commercial usage of Mistral Large 2 requiring self-deployment, a Mistral Commercial License must be acquired by contacting us.""",,True
Llama 3.1-405B,Meta AI,2024-07-23,Language,Language modeling/generation,405000000000.0,405B,3.8e+25,"Stated in paper.

Also, 6 * 405B * 15.6T training tokens = 3.8e25",Llama 3 dataset,15600000000000.0,15.6T tokens,Confident,https://ai.meta.com/research/publications/the-llama-3-herd-of-models/,The Llama 3 Herd of Models,,"Abhimanyu Dubey, Abhinav Jauhri, Abhinav Pandey, Abhishek Kadian, Ahmad Al-Dahle, Aiesha Letman,
Alan Schelten, Amy Yang, Angela Fan, Anirudh Goyal, Anthony Hartshorn, Aobo Yang, Archi Mitra, Archie
Sravankumar, Artem Korenev, Arthur Hinsvark, Arun Rao, Aston Zhang, Aurelien Rodriguez, Austen
Gregerson, Ava Spataru, Baptiste Roziere, Bethany Biron, Binh Tang, Bobbie Chern, Charlotte Caucheteux,
Chaya Nayak, Chloe Bi, Chris Marra, Chris McConnell, Christian Keller, Christophe Touret, Chunyang
Wu, Corinne Wong, Cristian Canton Ferrer, Cyrus Nikolaidis, Damien Allonsius, Daniel Song, Danielle
Pintz, Danny Livshits, David Esiobu, Dhruv Choudhary, Dhruv Mahajan, Diego Garcia-Olano, Diego Perino,
Dieuwke Hupkes, Egor Lakomkin, Ehab AlBadawy, Elina Lobanova, Emily Dinan, Eric Michael Smith, Filip
Radenovic, Frank Zhang, Gabriel Synnaeve, Gabrielle Lee, Georgia Lewis Anderson, Graeme Nail, Gregoire
Mialon, Guan Pang, Guillem Cucurell, Hailey Nguyen, Hannah Korevaar, Hu Xu, Hugo Touvron, Iliyan Zarov,
Imanol Arrieta Ibarra, Isabel Kloumann, Ishan Misra, Ivan Evtimov, Jade Copet, Jaewon Lee, Jan Geffert,
Jana Vranes, Jason Park, Jay Mahadeokar, Jeet Shah, Jelmer van der Linde, Jennifer Billock, Jenny Hong,
Jenya Lee, Jeremy Fu, Jianfeng Chi, Jianyu Huang, Jiawen Liu, Jie Wang, Jiecao Yu, Joanna Bitton, Joe
Spisak, Jongsoo Park, Joseph Rocca, Joshua Johnstun, Joshua Saxe, Junteng Jia, Kalyan Vasuden Alwala,
Kartikeya Upasani, Kate Plawiak, Ke Li, Kenneth Heafield, Kevin Stone, Khalid El-Arini, Krithika Iyer,
Kshitiz Malik, Kuenley Chiu, Kunal Bhalla, Lauren Rantala-Yeary, Laurens van der Maaten, Lawrence
Chen, Liang Tan, Liz Jenkins, Louis Martin, Lovish Madaan, Lubo Malo, Lukas Blecher, Lukas Landzaat,
Luke de Oliveira, Madeline Muzzi, Mahesh Pasupuleti, Mannat Singh, Manohar Paluri, Marcin Kardas,
Mathew Oldham, Mathieu Rita, Maya Pavlova, Melanie Kambadur, Mike Lewis, Min Si, Mitesh Kumar
Singh, Mona Hassan, Naman Goyal, Narjes Torabi, Nikolay Bashlykov, Nikolay Bogoychev, Niladri Chatterji,
Olivier Duchenne, Onur Çelebi, Patrick Alrassy, Pengchuan Zhang, Pengwei Li, Petar Vasic, Peter Weng,
Prajjwal Bhargava, Pratik Dubal, Praveen Krishnan, Punit Singh Koura, Puxin Xu, Qing He, Qingxiao Dong,
Ragavan Srinivasan, Raj Ganapathy, Ramon Calderer, Ricardo Silveira Cabral, Robert Stojnic, Roberta
Raileanu, Rohit Girdhar, Rohit Patel, Romain Sauvestre, Ronnie Polidoro, Roshan Sumbaly, Ross Taylor,
Ruan Silva, Rui Hou, Rui Wang, Saghar Hosseini, Sahana Chennabasappa, Sanjay Singh, Sean Bell, Seohyun
Sonia Kim, Sergey Edunov, Shaoliang Nie, Sharan Narang, Sharath Raparthy, Sheng Shen, Shengye Wan,
Shruti Bhosale, Shun Zhang, Simon Vandenhende, Spencer Whitman, Sten Sootla, Stephane Collot, Suchin
Gururangan, Sydney Borodinsky, Tamar Herman, Tara Fowler, Tarek Sheasha, Thomas Georgiou, Thomas
Scialom, Tobias Speckbacher, Todor Mihaylov, Tong Xiao, Ujjwal Karn, Vedanuj Goswami, Vibhor Gupta,
Vignesh Ramanathan, Viktor Kerkez, Vincent Gonguet, Virginie Do, Vish Vogeti, Vladan Petrovic, Weiwei
Chu, Wenhan Xiong, Wenyin Fu, Whitney Meers, Xavier Martinet, Xiaodong Wang, Xiaoqing Ellen Tan,
Xinfeng Xie, Xuchao Jia, Xuewei Wang, Yaelle Goldschlag, Yashesh Gaur, Yasmine Babaei, Yi Wen, Yiwen
Song, Yuchen Zhang, Yue Li, Yuning Mao, Zacharie Delpierre Coudert, Zheng Yan, Zhengxing Chen, and Zoe
Papakipos.
(core contributors)","Modern artificial intelligence (AI) systems are powered by foundation models. This paper presents a new set of foundation models, called Llama 3. It is a herd of language models that natively support multilinguality, coding, reasoning, and tool usage. Our largest model is a dense Transformer with 405B parameters and a context window of up to 128K tokens. This paper presents an extensive empirical evaluation of Llama 3. We find that Llama 3 delivers comparable quality to leading language models such as GPT-4 on a plethora of tasks. We publicly release Llama 3, including pre-trained and post-trained versions of the 405B parameter language model and our Llama Guard 3 model for input and output safety. The paper also presents the results of experiments in which we integrate image, video, and speech capabilities into Llama 3 via a compositional approach. We observe this approach performs competitively with the state-of-the-art on image, video, and speech recognition tasks. The resulting models are not yet being broadly released as they are still under development.",Industry,United States of America,"SOTA improvement,Training cost","High training compute, exceeds 4o and Claude 3.5 on some benchmarks:

https://ai.meta.com/blog/meta-llama-3-1/ ",1.0,2142.0,"Trained on 30.84M GPU hours (https://huggingface.co/blog/llama31) and used ""up to 16K H100 GPU[s]"" so training took at least
30.84M / 16k = 1927.5 hours or ~80 days. 

Section 3.3.4 gives reliability details over a 54 day period during training, for which they had ""higher than 90% effective training time""
1927.5 / 0.9 = 2142 hours

Probably, full training time is somewhat longer, since it sounds like there were periods where not all 16k H100s were running.",NVIDIA H100 SXM5 80GB,16384.0,0.4042,51040524.06,,22622532.159299143,,,,16000000.0,,Open weights (restricted use),Open (restricted use),Open access (restricted use),"Llama 3.1 model license:

https://huggingface.co/meta-llama/Meta-Llama-3.1-8B/blob/main/LICENSE 

must seek separate license if over 700m monthly users, acceptable use restrictions

training code here: https://github.com/meta-llama/llama-recipes/blob/main/src/llama_recipes/utils/train_utils.py#L70 
",BF16,True
GPT-4o mini,OpenAI,2024-07-18,"Language,Multimodal,Vision","Chat,Language modeling/generation,Code generation,Visual question answering",,,7.360010000000001e+24,"Training compute estimated from benchmark scores.

90% CI [3.23e+24, 2.05e+25]",Unspecified unreleased,,,Speculative,https://openai.com/index/gpt-4o-mini-advancing-cost-efficient-intelligence/,GPT-4o mini: advancing cost-efficient intelligence,,"Pre-training leads
Aidan Clark, Alex Paino, Jacob Menick

Post-training leads
Liam Fedus, Luke Metz

Architecture leads
Clemens Winter, Lia Guy

Optimization leads
Sam Schoenholz, Daniel Levy

Long-context lead
Nitish Keskar

Pre-training Data leads
Alex Carney, Alex Paino, Ian Sohl, Qiming Yuan

Tokenizer lead
Reimar Leike

Human data leads
Arka Dhar, Brydon Eastman, Mia Glaese

Eval lead
Ben Sokolowsky

Data flywheel lead
Andrew Kondrich

Inference lead
Felipe Petroski Such

Inference Productionization lead
Henrique Ponde de Oliveira Pinto

Post-training infrastructure leads
Jiayi Weng, Randall Lin, Youlong Cheng

Pre-training organization lead
Nick Ryder

Pre-training program lead
Lauren Itow

Post-training organization leads
Barret Zoph, John Schulman

Post-training program lead
Mianna Chen

Core contributors
Adam Lerer, Adam P. Goucher, Adam Perelman, Akila Welihinda, Alec Radford, Alex Borzunov, Alex Carney, Alex Chow, Alex Paino, Alex Renzin, Alex Tachard Passos, Alexi Christakis, Ali Kamali, Allison Moyer, Allison Tam, Amadou Crookes, Amin Tootoonchian, Ananya Kumar, Andrej Karpathy, Andrey Mishchenko, Andrew Cann, Andrew Kondrich, Andrew Tulloch, Angela Jiang, Antoine Pelisse, Antonia Woodford, Anuj Gosalia, Avi Nayak, Avital Oliver, Behrooz Ghorbani, Ben Leimberger, Ben Wang, Beth Hoover, Blake Samic, Brian Guarraci, Brydon Eastman, Camillo Lugaresi, Chak Li, Charlotte Barette, Chelsea Voss, Chen Ding, Chong Zhang, Chris Beaumont, Chris Hallacy, Chris Koch, Christian Gibson, Christine Choi, Christopher Hesse, Colin Wei, Daniel Kappler, Daniel Levin, Daniel Levy, David Farhi, David Mely, David Sasaki, Dimitris Tsipras, Doug Li, Duc Phong Nguyen, Duncan Findlay, Edmund Wong, Ehsan Asdar, Elizabeth Proehl, Elizabeth Yang, Eric Peterson, Eric Sigler, Eugene Brevdo, Farzad Khorasani, Francis Zhang, Gene Oden, Geoff Salmon, Hadi Salman, Haiming Bao, Heather Schmidt, Hongyu Ren, Hyung Won Chung, Ian Kivlichan, Ian O'Connell, Ian Osband, Ibrahim Okuyucu, Ilya Kostrikov, Ingmar Kanitscheider, Jacob Coxon, James Crooks, James Lennon, Jane Park, Jason Teplitz, Jason Wei, Jason Wolfe, Jay Chen, Jeff Harris, Jiayi Weng, Jie Tang, Joanne Jang, Jonathan Ward, Jonathan McKay, Jong Wook Kim, Josh Gross, Josh Kaplan, Joy Jiao, Joyce Lee, Juntang Zhuang, Kai Fricke, Kavin Karthik, Kenny Hsu, Kiel Howe, Kyle Luther, Larry Kai, Lauren Itow, Leo Chen, Lia Guy, Lien Mamitsuka, Lilian Weng, Long Ouyang, Louis Feuvrier, Lukas Kondraciuk, Lukasz Kaiser, Lyric Doshi, Mada Aflak, Maddie Simens, Madeleine Thompson, Marat Dukhan, Marvin Zhang, Mateusz Litwin, Matthew Zeng, Max Johnson, Mayank Gupta, Mia Glaese, Michael Janner, Michael Petrov, Michael Wu, Michelle Fradin, Michelle Pokrass, Miguel Oom Temudo de Castro, Mikhail Pavlov, Minal Khan, Mo Bavarian, Murat Yesildal, Natalia Gimelshein, Natalie Staudacher, Nick Stathas, Nik Tezak, Nithanth Kudige, Noel Bundick, Ofir Nachum, Oleg Boiko, Oleg Murk, Olivier Godement, Owen Campbell-Moore, Philip Pronin, Philippe Tillet, Rachel Lim, Rajan Troll, Randall Lin, Rapha gontijo lopes, Raul Puri, Reah Miyara, Reimar Leike, Renaud Gaubert, Reza Zamani, Rob Honsby, Rohit Ramchandani, Rory Carmichael, Ruslan Nigmatullin, Ryan Cheu, Sara Culver, Scott Gray, Sean Grove, Sean Metzger, Shantanu Jain, Shengjia Zhao, Sherwin Wu, Shuaiqi (Tony) Xia, Sonia Phene, Spencer Papay, Steve Coffey, Steve Lee, Steve Lee, Stewart Hall, Suchir Balaji, Tal Broda, Tal Stramer, Tarun Gogineni, Ted Sanders, Thomas Cunninghman, Thomas Dimson, Thomas Raoux, Tianhao Zheng, Christina Kim, Todd Underwood, Tristan Heywood, Valerie Qi, Vinnie Monaco, Vlad Fomenko, Weiyi Zheng, Wenda Zhou, Wojciech Zaremba, Yash Patil, Yilei, Qian, Yongjik Kim, Youlong Cheng, Yuchen He, Yuchen Zhang, Yujia Jin, Yunxing Dai, Yury Malkov","OpenAI is committed to making intelligence as broadly accessible as possible. Today, we're announcing GPT-4o mini, our most cost-efficient small model. We expect GPT-4o mini will significantly expand the range of applications built with AI by making intelligence much more affordable. GPT-4o mini scores 82% on MMLU and currently outperforms GPT-41 on chat preferences in LMSYS leaderboard(opens in a new window). It is priced at 15 cents per million input tokens and 60 cents per million output tokens, an order of magnitude more affordable than previous frontier models and more than 60% cheaper than GPT-3.5 Turbo.",Industry,United States of America,Significant use,"No public breakdown of GPT-4o mini users, but as of late 2024, it is one of the few main models available in ChatGPT and OpenAI's cheapest model. OpenAI has hundreds of millions of users.",,,,,,,,,,,,,,,API access,Unreleased,,,,
Mathstral,Mistral AI,2024-07-16,"Mathematics,Language","Mathematical reasoning,Language modeling/generation,Quantitative reasoning",7000000000.0,,,,,,,Confident,"https://huggingface.co/mistralai/Mathstral-7B-v0.1
https://mistral.ai/news/mathstral",Mathstral-7B-v0.1 ,,"Albert Jiang, Alexandre Sablayrolles, Alexis Tacnet, Alok Kothari, Antoine Roux, Arthur Mensch, Audrey Herblin-Stoop, Augustin Garreau, Austin Birky, Bam4d, Baptiste Bout, Baudouin de Monicault, Blanche Savary, Carole Rambaud, Caroline Feldman, Devendra Singh Chaplot, Diego de las Casas, Eleonore Arcelin, Emma Bou Hanna, Etienne Metzger, Gaspard Blanchet, Gianna Lengyel, Guillaume Bour, Guillaume Lample, Harizo Rajaona, Henri Roussez, Hichem Sattouf, Ian Mack, Jean-Malo Delignon, Jessica Chudnovsky, Justus Murke, Kartik Khandelwal, Lawrence Stewart, Louis Martin, Louis Ternon, Lucile Saulnier, Lélio Renard Lavaud, Margaret Jennings, Marie Pellat, Marie Torelli, Marie-Anne Lachaux, Marjorie Janiewicz, Mickaël Seznec, Nicolas Schuhl, Niklas Muhs, Olivier de Garrigues, Patrick von Platen, Paul Jacob, Pauline Buche, Pavan Kumar Reddy, Perry Savas, Pierre Stock, Romain Sauvestre, Sagar Vaze, Sandeep Subramanian, Saurabh Garg, Sophia Yang, Szymon Antoniak, Teven Le Scao, Thibault Schueller, Thibaut Lavril, Thomas Wang, Théophile Gervet, Timothée Lacroix, Valera Nemychnikova, Wendy Shang, William El Sayed, William Marshall","We're contributing Mathstral to the science community to bolster efforts in advanced mathematical problems requiring complex, multi-step logical reasoning. The Mathstral release is part of our broader effort to support academic projects—it was produced in the context of our collaboration with Project Numina.

Akin to Isaac Newton in his time, Mathstral stands on the shoulders of Mistral 7B and specializes in STEM subjects. It achieves state-of-the-art reasoning capacities in its size category across various industry-standard benchmarks. In particular, it achieves 56.6% on MATH and 63.47% on MMLU, with the following MMLU performance difference by subject between Mathstral 7B and Mistral 7B.",Industry,France,SOTA improvement,SOTA on MathOdyssey and AMC 2023 benchmarks.,,,,,,,,,,Mistral 7B,,,,,Open weights (unrestricted),Unreleased,,"Apache 2.0 but ""You need to agree to share your contact information to access this model""
https://huggingface.co/mistralai/Mathstral-7B-v0.1",,
DeepL LLM,DeepL,2024-07-16,Language,Translation,,,,,Unspecified unreleased,,,Unknown,https://www.deepl.com/en/blog/next-gen-language-model,"DeepL's next-gen LLM outperforms ChatGPT-4, Google, and Microsoft for translation quality",,DeepL,"Our next-generation (“next-gen”) language model outperforms Google Translate, ChatGPT-4, and Microsoft for translation quality
The new LLM's translations require fewer edits, with Google needing 2x and ChatGPT-4 needing 3x more edits to achieve the same quality
Built using our own groundbreaking, specialized LLM technology and proprietary training data, designed specifically for translation
The same enterprise-level security you’re used to for Pro customers",Industry,Germany,Significant use,"DeepL has ~10M monthly users: https://www.forbes.com/sites/rashishrivastava/2023/08/08/deepl-is-trying-to-take-on-google-translate-and-chatgpt/#:~:text=DeepL%20boasts%20more%20than%2010,struggle%20with%20a%20language%20barrier.= ",,,,,,,,,,,,,,,Hosted access (no API),Unreleased,,,,
ESM3 (98B),"EvolutionaryScale,University of California (UC) Berkeley",2024-06-25,Biology,Protein generation,98500000000.0,98.5 billion (Table S1),1.07e+24,"""ESM3 at its largest scale was trained with 1.07×10^24 FLOPs on 2.78 billion proteins and 771 billion unique tokens, and has 98 billion parameters.""

per Table 1, trained 98B model on 1.8T training tokens. 98 billion * 1800 billion * 6 = 1.06e24. Likely some rounding, so will go with developer's reported count.",ESM3 Dataset,771000000000.0, 771 billion tokens,Confident,https://www.evolutionaryscale.ai/blog/esm3-release ,ESM3: Simulating 500 million years of evolution with a language model,,"Thomas Hayes, Roshan Rao, Halil Akin, Nicholas James Sofroniew, Deniz Oktay, Zeming Lin, Robert Verkuil, Vincent Quy Tran, Jonathan Deaton, Marius Wiggert, Rohil Badkundri, Irhum Shafkat, Jun Gong, Alexander Derry, Raul Santiago Molina, Neil Thomas, Yousuf Khan, Chetan Mishra, Carolyn Kim, Liam J Bartie, Patrick D Hsu, Tom Sercu, Salvatore Candido, Alexander Rives","More than three billion years of evolution have
produced an image of biology encoded into the
space of natural proteins. Here we show that language models trained on tokens generated by evolution can act as evolutionary simulators to generate functional proteins that are far away from
known proteins. We present ESM3, a frontier
multimodal generative language model that reasons over the sequence, structure, and function
of proteins. ESM3 can follow complex prompts
combining its modalities and is highly responsive
to biological alignment. We have prompted ESM3
to generate fluorescent proteins with a chain of
thought. Among the generations that we synthesized, we found a bright fluorescent protein at far
distance (58% identity) from known fluorescent
proteins. Similarly distant natural fluorescent proteins are separated by over five hundred million
years of evolution,

(from paper preview: https://evolutionaryscale-public.s3.us-east-2.amazonaws.com/research/esm3.pdf )","Industry,Academia","United States of America,United States of America",Historical significance,"Largest (in compute) biology and protein model to date, was able to discover novel green fluorescent proteins",2.3,,,,,,,,,,,,4194304.0,Table S1,Unreleased,Unreleased,,only small version released,,
Cambrian-1-34B,New York University (NYU),2024-06-24,"Multimodal,Vision,Language","Image captioning,Visual question answering,Character recognition",34000000000.0,,,,"Cambrian-Alignment,Cambrian-10M",,,Confident,https://arxiv.org/abs/2406.16860,"Cambrian-1: A Fully Open, Vision-Centric Exploration of Multimodal LLMs
",288.0,"Shengbang Tong, Ellis Brown, Penghao Wu, Sanghyun Woo, Manoj Middepogu, Sai Charitha Akula, Jihan Yang, Shusheng Yang, Adithya Iyer, Xichen Pan, Ziteng Wang, Rob Fergus, Yann LeCun, Saining Xie","We introduce Cambrian-1, a family of multimodal LLMs (MLLMs) designed with a vision-centric approach. While stronger language models can enhance multimodal capabilities, the design choices for vision components are often insufficiently explored and disconnected from visual representation learning research. This gap hinders accurate sensory grounding in real-world scenarios. Our study uses LLMs and visual instruction tuning as an interface to evaluate various visual representations, offering new insights into different models and architectures -- self-supervised, strongly supervised, or combinations thereof -- based on experiments with over 20 vision encoders. We critically examine existing MLLM benchmarks, address the difficulties involved in consolidating and interpreting results from various tasks, and introduce a new vision-centric benchmark, CV-Bench. To further improve visual grounding, we propose the Spatial Vision Aggregator (SVA), a dynamic and spatially-aware connector that integrates high-resolution vision features with LLMs while reducing the number of tokens. Additionally, we discuss the curation of high-quality visual instruction-tuning data from publicly available sources, emphasizing the importance of data source balancing and distribution ratio. Collectively, Cambrian-1 not only achieves state-of-the-art performance but also serves as a comprehensive, open cookbook for instruction-tuned MLLMs. We provide model weights, code, supporting tools, datasets, and detailed instruction-tuning and evaluation recipes. We hope our release will inspire and accelerate advancements in multimodal systems and visual representation learning.",Academia,United States of America,SOTA improvement,"Cambrian-1 outperforms other open source models and achieves competitive performance on a number of benchmarks, compared to proprietary models such as GPT-4V, Gemini, and Grok-1.5. ",,,Our final Cambrian-1 models are trained in less than 4 days on a TPU-V4-512.,Google TPU v4,512.0,,,,171799.77463476418,Yi-34B,,,,,Open weights (unrestricted),Open source,,"Apache 2.0
https://huggingface.co/nyu-visionx/cambrian-34b

Apache 2.0
https://github.com/cambrian-mllm/cambrian",FP32,
Claude 3.5 Sonnet,Anthropic,2024-06-20,"Multimodal,Language,Vision","Chat,Image captioning,Code generation,Language modeling/generation",,,2.700000000000001e+25,"Blog post by Dario Amodei includes some info on 3.5 Sonnet compute: https://darioamodei.com/on-deepseek-and-export-controls
""Claude 3.5 Sonnet is a mid-sized model that cost a few $10M's to train (I won't give an exact number). Also, 3.5 Sonnet was not trained in any way that involved a larger or more expensive model (contrary to some rumors).""

Using assumptions about GPU pricing, this lets us estimate compute. https://docs.google.com/spreadsheets/d/1-p-ab6t6dkUM6T7GwnFp85ePTMpZMW7LFY7fW2t8POs/",Unspecified unreleased,,,Speculative,https://www-cdn.anthropic.com/fed9cc193a14b84131812372d8d5857f8f304c52/Model_Card_Claude_3_Addendum.pdf,Claude 3.5 Sonnet,,,,Industry,United States of America,"Significant use,SOTA improvement","""It also sets new performance standards in evaluations of graduate
level science knowledge (GPQA) [1], general reasoning (MMLU) [2], and coding proficiency (HumanEval)
[3].""",,,,,,,,,,,,,,,API access,Unreleased,,,,True
DeepSeek-Coder-V2 236B,DeepSeek,2024-06-17,Language,"Code generation,Code autocompletion",236000000000.0,Mixture of experts model. 21B parameters activated per token.,1.2852e+24,"Trained on a total of 10.2T tokens
6NC: 6 * 10.2T * 21B active parameters = 1.285e24","GitHub,Common Crawl",3191000000000.0,"""In the pre-training phase, the dataset of DeepSeek-Coder-V2 is created with a composition of 60% source code, 10% math corpus, and 30% natural language corpus ... The source code consists of 1,170B code-related tokens sourced from GitHub and CommonCrawl... For the math corpus, we collect 221B math-related tokens sourced from CommonCrawl... In total, DeepSeek-Coder-V2 has been exposed to 10.2T training tokens, where 4.2 trillion tokens originate from the DeepSeek V2 dataset, while the remaining 6 trillion tokens come from the DeepSeek-Coder-V2 dataset""

Total of 1.391T tokens in the new data.

From the DeepSeek-V2 paper: ""our tokenized pretraining corpus contains 8.1T tokens""

So some tokens are trained over for multiple epochs:
- 6T * 0.6 / 1.17T = 3.1 epochs on the code corpus
- 6T * 0.1 / 221B = 2.7 epochs on the math corpus
- 6T * 0.3 / 8.1T = 0.22 epochs on the natural language corpus

Total unique tokens seen is likely 1.17T + 221B + (6T*0.3) = 3.191T",Confident,https://github.com/deepseek-ai/DeepSeek-Coder-V2,DeepSeek-Coder-V2: Breaking the Barrier of Closed-Source Models in Code Intelligence,,"Qihao Zhu, Daya Guo, Zhihong Shao, Dejian Yang, Peiyi Wang, Runxin Xu, Y. Wu, Yukun Li, Huazuo Gao, Shirong Ma, Wangding Zeng, Xiao Bi, Zihui Gu, Hanwei Xu, Damai Dai, Kai Dong, Liyue Zhang, Yishi Piao, Zhibin Gou, Zhenda Xie, Zhewen Hao, Bingxuan Wang, Junxiao Song, Deli Chen, Xin Xie, Kang Guan, Yuxiang You, Aixin Liu, Qiushi Du, Wenjun Gao, Xuan Lu, Qinyu Chen, Yaohui Wang, Chengqi Deng, Jiashi Li, Chenggang Zhao, Chong Ruan, Fuli Luo, Wenfeng Liang","We present DeepSeek-Coder-V2, an open-source Mixture-of-Experts (MoE) code language model that achieves performance comparable to GPT4-Turbo in code-specific tasks. Specifically, DeepSeek-Coder-V2 is further pre-trained from an intermediate checkpoint of DeepSeek-V2 with additional 6 trillion tokens. Through this continued pre-training, DeepSeek-Coder-V2 substantially enhances the coding and mathematical reasoning capabilities of DeepSeek-V2, while maintaining comparable performance in general language tasks. Compared to DeepSeekCoder-33B, DeepSeek-Coder-V2 demonstrates significant advancements in various aspects of code-related tasks, as well as reasoning and general capabilities. Additionally, DeepSeek-CoderV2 expands its support for programming languages from 86 to 338, while extending the context length from 16K to 128K. In standard benchmark evaluations, DeepSeek-Coder-V2 achieves superior performance compared to closed-source models such as GPT4-Turbo, Claude 3 Opus, and Gemini 1.5 Pro in coding and math benchmarks.",Industry,China,SOTA improvement,"New SOTA on Aider, AIME 2024, and Math Odyssey benchmarks (including against proprietary models such as Claude 3 Opus, GPT-4o and GPT-4 Turbo).
Note that Figure 1 appears to show the new model getting SOTA for several other benchmarks, but omits results from GPT-4o which wins in most cases.",,,,,,,,,,DeepSeek-V2 (MoE-236B),,,36864000.0,"Most training is done at batch size of 36,864. They do long context training: ""In the first stage, we utilize a sequence length of 32K and a batch size of 1152 for 1000 steps. In the second stage, we train the model for an additional 1000 steps, employing a sequence length of 128K and a batch size of 288 sequences"" 128k*288 = 36,864,000",Open weights (restricted use),Unreleased,,"license has some harmful use restrictions: https://github.com/deepseek-ai/DeepSeek-Coder-V2/blob/main/LICENSE-MODEL 

no training code",,
Nemotron-4 340B,NVIDIA,2024-06-14,Language,"Language modeling/generation,Chat,Question answering",340000000000.0,340B,1.7999999999999999e+25,"9 trillion tokens for training
6 * 340B * 9T = 1.8E25

alternatively, can do a hardware estimate with a few extra steps:

According to the technical report, Nemotron-4 340B was trained using up to 6144 H100 GPUs. Helpfully, they also report the model FLOP utilization (MFU), which was 41-42% (Table 2). This is the ratio of the actual output of their GPUs, in FLOP used for training, relative to their theoretical max of 989 teraFLOP/s per GPU. 
Unfortunately, the report omits the last ingredient, which is the duration of the training run. However, in Table 2 they report some relevant data that we can use to infer the training time. 
Nemotron-4 was trained in several stages, but the largest stage used all 6144 GPUs with a batch size of 2304 and an iteration time (time per batch) of 8.0 seconds. This stage involved 7.6T tokens, so it makes up the majority of training. 
A batch size of 2304 means that each batch consists of 2304 sequences, and they report that the sequence length used for training was 4096 tokens. This means that each batch contained 4096 * 2304 = 9,437,184 tokens. 
So, during this stage, it took 8 seconds to train the model on 9.4m tokens. Extrapolating to the entire 9T token dataset, this implies the training run would have taken 7,659,574 seconds, or 89 days. (it actually took longer because they didn't use all their GPUs for the whole run) 
Multiplying 7,659,574 seconds by 41% MFU, 989 peak teraFLOP/s for each H100, and 6144 H100s, we get ~1.9e25 FLOP. This is very close to our first estimate. 
",Unspecified unreleased,6750000000000.0,"9T training tokens.

They first train on an 8T token dataset and then an additional 1T tokens, it's slightly unclear if that's more data or a partial second epoch

6.75T words using 1 token = 0.75 words",Confident,https://blogs.nvidia.com/blog/nemotron-4-synthetic-data-generation-llm-training/ ,NVIDIA Releases Open Synthetic Data Generation Pipeline for Training Large Language Models,,"Bo Adler, Niket Agarwal, Ashwath Aithal, Dong H. Anh, Pallab Bhattacharya, Annika Brundyn, Jared Casper, Bryan Catanzaro, Sharon Clay, Jonathan Cohen, Sirshak Das, Ayush Dattagupta, Olivier Delalleau, Leon Derczynski, Yi Dong, Daniel Egert, Ellie Evans, Aleksander Ficek, Denys Fridman, Shaona Ghosh, Boris Ginsburg, Igor Gitman, Tomasz Grzegorzek, Robert Hero, Jining Huang, Vibhu Jawa, Joseph Jennings, Aastha Jhunjhunwala, John Kamalu, Sadaf Khan, Oleksii Kuchaiev, Patrick LeGresley, Hui Li, Jiwei Liu, Zihan Liu, Eileen Long, Ameya Sunil Mahabaleshwarkar, Somshubra Majumdar, James Maki, Miguel Martinez, Maer Rodrigues de Melo, Ivan Moshkov, Deepak Narayanan, Sean Narenthiran, Jesus Navarro, Phong Nguyen, Osvald Nitski, Vahid Noroozi, Guruprasad Nutheti, Christopher Parisien, Jupinder Parmar, Mostofa Patwary, Krzysztof Pawelec, Wei Ping, Shrimai Prabhumoye, Rajarshi Roy, Trisha Saar, Vasanth Rao Naik Sabavat, Sanjeev Satheesh, Jane Polak Scowcroft, Jason Sewall, Pavel Shamis, Gerald Shen, Mohammad Shoeybi, Dave Sizer, Misha Smelyanskiy, Felipe Soares, Makesh Narsimhan Sreedhar, Dan Su, Sandeep Subramanian, Shengyang Sun, Shubham Toshniwal, Hao Wang, Zhilin Wang, Jiaxuan You, Jiaqi Zeng, Jimmy Zhang, Jing Zhang, Vivienne Zhang, Yian Zhang, Chen Zhu","We release the Nemotron-4 340B model family, including Nemotron-4-340B-Base, Nemotron-4-
340B-Instruct, and Nemotron-4-340B-Reward. Our models are open access under the NVIDIA Open
Model License Agreement, a permissive model license that allows distribution, modification, and use of
the models and its outputs. These models perform competitively to open access models on a wide range
of evaluation benchmarks, and were sized to fit on a single DGX H100 with 8 GPUs when deployed in
FP8 precision. We believe that the community can benefit from these models in various research studies
and commercial applications, especially for generating synthetic data to train smaller language models.
Notably, over 98% of data used in our model alignment process is synthetically generated, showcasing
the effectiveness of these models in generating synthetic data. To further support open research and
facilitate model development, we are also open-sourcing the synthetic data generation pipeline used in
our model alignment process.

(from technical report: https://d1qx31qr3h6wln.cloudfront.net/publications/Nemotron_4_340B_8T_0.pdf )",Industry,United States of America,Training cost,"~2e25 FLOP, so high training cost, likely >5M",,2200.0,"see training compute notes, this is an inferred estimate",NVIDIA H100 SXM5 80GB,6144.0,0.410675,20528977.87,,8490820.682633882,,,,,,Open weights (unrestricted),Unreleased,,Permissive commercial license: https://developer.download.nvidia.com/licenses/nvidia-open-model-license-agreement-june-2024.pdf ,BF16,True
OpenVLA,"Stanford University,University of California (UC) Berkeley,Toyota Research Institute,Google DeepMind,Massachusetts Institute of Technology (MIT),Physical Intelligence",2024-06-13,"Robotics,Vision,Language",Robotic manipulation,7188100000.0,"Based on a Prismatic-7B VLM backbone, which itself is comprised of 600M parameter vision encoder (DinoV2 + SigLIP) plus Llama-2 7B. Table 1 indicates 7.1881 billion trainable parameters",1.1e+23,"Majority of compute is from VLA pre-training embedded in Prismatic-7B and it's constituent models. 

The fine-tuning compute used in this paper is ""64 A100 GPUs for 14 days, or a total of 21,500 A100-hours""
21500 * 3600 * 3.12e14 * 0.4 = 9.66e21

Prismatic-7B training took ""less than 9 hours"" on 8 A100s: 9 * 3600 * 8 * 3.12e14 * 0.4 = 3.23e19

Add in the pre-trained components:
- DinoV2 = 7.42e21, per our database
- The SigLIP model in question is SoViT-400m/14 from the cited Alabdulmohsin et al., 2023) and ""is pretrained on 40 billion examples, which amounts to 9T GFLOPs and 230K TPUv3 core-hours"" = 9e21
- Llama 2-7B = 8.4e22, per our database

Total
9.66e21 + 3.23e19 + 7.42e21 + 9e21 + 8.4e22 = 1.10e23",Open X-Embodiment,970000.0,"""OpenVLA consists of a pretrained visually-conditioned language model backbone that captures visual features at multiple granularities, fine-tuned on a large, diverse dataset of 970k robot manipulation trajectories from the Open-X Embodiment [1] dataset""
Filtered from 2M total in OpenX.",Confident,"https://openvla.github.io/
https://arxiv.org/abs/2406.09246",OpenVLA: An Open-Source Vision-Language-Action Mode,73.0,"Moo Jin Kim, Karl Pertsch, Siddharth Karamcheti, Ted Xiao, Ashwin Balakrishna, Suraj Nair, Rafael Rafailov, Ethan Foster, Grace Lam, Pannag Sanketi, Quan Vuong, Thomas Kollar, Benjamin Burchfiel, Russ Tedrake, Dorsa Sadigh, Sergey Levine, Percy Liang, Chelsea Finn","Large policies pretrained on a combination of Internet-scale vision-language data and diverse robot demonstrations have the potential to change how we teach robots new skills: rather than training new behaviors from scratch, we can fine-tune such vision-language-action (VLA) models to obtain robust, generalizable policies for visuomotor control. Yet, widespread adoption of VLAs for robotics has been challenging as 1) existing VLAs are largely closed and inaccessible to the public, and 2) prior work fails to explore methods for efficiently fine-tuning VLAs for new tasks, a key component for adoption. Addressing these challenges, we introduce OpenVLA, a 7B-parameter open-source VLA trained on a diverse collection of 970k real-world robot demonstrations. OpenVLA builds on a Llama 2 language model combined with a visual encoder that fuses pretrained features from DINOv2 and SigLIP. As a product of the added data diversity and new model components, OpenVLA demonstrates strong results for generalist manipulation, outperforming closed models such as RT-2-X (55B) by 16.5% in absolute task success rate across 29 tasks and multiple robot embodiments, with 7x fewer parameters. We further show that we can effectively fine-tune OpenVLA for new settings, with especially strong generalization results in multi-task environments involving multiple objects and strong language grounding abilities, and outperform expressive from-scratch imitation learning methods such as Diffusion Policy by 20.4%. We also explore compute efficiency; as a separate contribution, we show that OpenVLA can be fine-tuned on consumer GPUs via modern low-rank adaptation methods and served efficiently via quantization without a hit to downstream success rate. Finally, we release model checkpoints, fine-tuning notebooks, and our PyTorch codebase with built-in support for training VLAs at scale on Open X-Embodiment datasets.","Academia,Academia,Industry,Industry,Academia,Industry","United States of America,United States of America,United States of America,United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France,United States of America,United States of America",SOTA improvement,"""OpenVLA outperforms the 55B-parameter RT-2-X model [1, 7], the prior state-of-the-art VLA, by 16.5% absolute success rate across 29 evaluation tasks on the WidowX and Google Robot embodiments.""

Top10 recent paper from Sebastian Sartor 2025-05-14",27.0,336.0,"""The final OpenVLA model is trained on a cluster of 64 A100 GPUs for 14 days""
14 days * 24 hr/day = 336 hours",NVIDIA A100,64.0,,,,50541.724821294745,Llama 2-7B,9.66e+21,"""64 A100 GPUs for 14 days, or a total of 21,500 A100-hours""
21500 * 3600 * 3.12e14 * 0.4 = 9.66e21",2048.0,,Open weights (unrestricted),Open source,Open source,"""OpenVLA uses multiple pretrained model components: SigLIP [9] and DinoV2 [25] vision encoders and a Llama 2 [10] language model backbone. For all three models, weights are open, but not their training data or code. We release training data, code and model weights for reproducing OpenVLA on top of these components.""
All published material is on an MIT license.

train code: https://github.com/openvla/openvla/blob/main/scripts/pretrain.py ",BF16,
Qwen2-72B,Alibaba,2024-06-07,Language,"Chat,Language modeling/generation",72710000000.0,"72.71B parameters in total, of which 70.21B are non-embedding parameters",3.02e+24,"72 billion params, 7 trillion tokens

6 * 72 billion * 7 trillion ~= 3.02e24",Unspecified unreleased,7000000000000.0,"""All models were pre-trained on a high-quality, large-scale dataset comprising over 7 trillion tokens, covering a wide range of domains and languages.""",Confident,"https://qwenlm.github.io/blog/qwen2/ 
https://arxiv.org/abs/2407.10671 ",Hello Qwen2,,Qwen Team,"After months of efforts, we are pleased to announce the evolution from Qwen1.5 to Qwen2. This time, we bring to you:
- Pretrained and instruction-tuned models of 5 sizes, including Qwen2-0.5B, Qwen2-1.5B, Qwen2-7B, Qwen2-57B-A14B, and Qwen2-72B;
- Having been trained on data in 27 additional languages besides English and Chinese;
- State-of-the-art performance in a large number of benchmark evaluations;
- Significantly improved performance in coding and mathematics;
- Extended context length support up to 128K tokens with Qwen2-7B-Instruct and Qwen2-72B-Instruct.

(Technical report to follow)",Industry,China,Training cost,"SOTA claims are against open source models within a parameter class.

Possibly high training cost, at 3e24 FLOP seems borderline.",,,,,,,,,,,,,,,Open weights (unrestricted),Unreleased,,Apache 2.0,BF16,
"ALLaM adapted13B
",Saudi Data and Artificial Intelligence Authority,2024-05-21,Language,"Language modeling/generation,Translation,Question answering",13000000000.0,,1.716e+23,"Finetuning compute: 
6*13000000000*1200000000000=9.36e+22

Llama 13B training FLOP: 7.8e+22

Total: 1.716e+23",,1200000000000.0,"3,431,217,579(4.3B) total documents, with a total of 4,587,781,981,546(4.5T) words, and 5.2T tokens.",Confident,"https://arxiv.org/abs/2407.15390
https://huggingface.co/ALLaM-AI/ALLaM-7B-Instruct-previehttps://www.middleeastainews.com/p/sdaias-allam-arabic-llm-live-on-watsonxw","ALLaM: Large Language Models for Arabic and English
",9.0,Saudi Data and Artificial Intelligence Authority,"We present ALLaM: Arabic Large Language Model, a series of large language models to support the ecosystem of Arabic Language Technologies (ALT). ALLaM is carefully trained considering the values of language alignment and knowledge transfer at scale. Our autoregressive decoder-only architecture models demonstrate how second-language acquisition via vocabulary expansion and pretraining on a mixture of Arabic and English text can steer a model towards a new language (Arabic) without any catastrophic forgetting in the original language (English). Furthermore, we highlight the effectiveness of using parallel/translated data to aid the process of knowledge alignment between languages. Finally, we show that extensive alignment with human preferences can significantly enhance the performance of a language model compared to models of a larger scale with lower quality alignment. ALLaM achieves state-of-the-art performance in various Arabic benchmarks, including MMLU Arabic, ACVA, and Arabic Exams. Our aligned models improve both in Arabic and English from their base aligned models.","Industry,Government",Saudi Arabia,SOTA improvement,"SOTA at Arabic MMLU benchmarks, all results in this paper: https://openreview.net/pdf?id=MscdsFVZrN",1.0,,,NVIDIA A100,,,,,,LLaMA-13B,,,,,API access,Unreleased,,"on IBM watsonx platform
https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx",BF16,
ALLaM adapted 70B,Saudi Data and Artificial Intelligence Authority,2024-05-21,Language,"Language modeling/generation,Translation,Question answering",70000000000.0,,1.062e+24,"Llama 70B: 8.1e+23
Finetune: 6*70000000000*600000000000=252000000000000000000000
Total: 1062000000000000000000000",,600000000000.0,"""For the ALLaM-70B model, we only train up to 600B tokens""",Confident,https://arxiv.org/abs/2407.15390,"ALLaM: Large Language Models for Arabic and English
",9.0,Saudi Data and Artificial Intelligence Authority,"We present ALLaM: Arabic Large Language Model, a series of large language models to support the ecosystem of Arabic Language Technologies (ALT). ALLaM is carefully trained considering the values of language alignment and knowledge transfer at scale. Our autoregressive decoder-only architecture models demonstrate how second-language acquisition via vocabulary expansion and pretraining on a mixture of Arabic and English text can steer a model towards a new language (Arabic) without any catastrophic forgetting in the original language (English). Furthermore, we highlight the effectiveness of using parallel/translated data to aid the process of knowledge alignment between languages. Finally, we show that extensive alignment with human preferences can significantly enhance the performance of a language model compared to models of a larger scale with lower quality alignment. ALLaM achieves state-of-the-art performance in various Arabic benchmarks, including MMLU Arabic, ACVA, and Arabic Exams. Our aligned models improve both in Arabic and English from their base aligned models.","Industry,Government",Saudi Arabia,SOTA improvement,"SOTA at Arabic MMLU benchmarks, all results in this paper: https://openreview.net/pdf?id=MscdsFVZrN",1.0,,,NVIDIA A100,,,,,,Llama 2-70B,,,,,Unreleased,Unreleased,,not yet released,BF16,
ALLaM 34B,Saudi Data and Artificial Intelligence Authority,2024-05-21,Language,"Language modeling/generation,Translation,Question answering",34000000000.0,,1.0608e+24,6*34000000000*5200000000000=1.060800e+24,,5200000000000.0,"3,431,217,579(4.3B) total documents, with a total of 4,587,781,981,546(4.5T) words, and 5.2T tokens.",Confident,https://openreview.net/pdf?id=MscdsFVZrN,AI Models for Arabic and English,9.0,Saudi Data and Artificial Intelligence Authority,,"Industry,Government",Saudi Arabia,SOTA improvement,"SOTA at Arabic MMLU benchmarks, all results in this paper: https://openreview.net/pdf?id=MscdsFVZrN",1.0,,,NVIDIA A100,,,,,,,,,,,Unreleased,Unreleased,,"34b is not in the HF repo yet
https://huggingface.co/ALLaM-AI",BF16,
ALLaM 7B,Saudi Data and Artificial Intelligence Authority,2024-05-21,Language,"Language modeling/generation,Translation,Question answering",7000000000.0,,9.04e+22,"FT: 6*7000000000*1200000000000=5.04e+22

Llama 7B compute: 4e+22

Total: 9.04e+22",,1200000000000.0,"""Starting from Llama-2 pretrained model weights, we continue pretraining
the ALLaM-7B and ALLaM-13B models on 1.2T tokens""",Confident,https://arxiv.org/abs/2407.15390,"ALLaM: Large Language Models for Arabic and English
",9.0,Saudi Data and Artificial Intelligence Authority,"We present ALLaM: Arabic Large Language Model, a series of large language models to support the ecosystem of Arabic Language Technologies (ALT). ALLaM is carefully trained considering the values of language alignment and knowledge transfer at scale. Our autoregressive decoder-only architecture models demonstrate how second-language acquisition via vocabulary expansion and pretraining on a mixture of Arabic and English text can steer a model towards a new language (Arabic) without any catastrophic forgetting in the original language (English). Furthermore, we highlight the effectiveness of using parallel/translated data to aid the process of knowledge alignment between languages. Finally, we show that extensive alignment with human preferences can significantly enhance the performance of a language model compared to models of a larger scale with lower quality alignment. ALLaM achieves state-of-the-art performance in various Arabic benchmarks, including MMLU Arabic, ACVA, and Arabic Exams. Our aligned models improve both in Arabic and English from their base aligned models.","Industry,Government",Saudi Arabia,SOTA improvement,"SOTA at Arabic MMLU benchmarks, all results in this paper: https://openreview.net/pdf?id=MscdsFVZrN",1.0,,,NVIDIA A100,,,,,,LLaMA-7B,,,,,Open weights (unrestricted),Unreleased,,"Apache 2.0
https://huggingface.co/ALLaM-AI/ALLaM-7B-Instruct-preview",BF16,
Octo-Base,"University of California (UC) Berkeley,Stanford University,Carnegie Mellon University (CMU),DeepMind",2024-05-20,Robotics,Robotic manipulation,93000000.0,Source: https://arxiv.org/abs/2405.12213 ,5.85e+20,"Training compute 
= peak FLOPs * utilization rate * training time
~= 128 TPUs * 275e12 FLOPs / TPU * 0.33 * 14 hours * 3600 s / hour
~= 585446400e12 FLOPs
= 5.85e20 FLOPs,
assuming utilization rate = 0.33.",Open X-Embodiment,,"Octo was pre-trained on 800k robot episodes from the Open X-Embodiment dataset. The authors describe this dataset as ""heterogeneous,"" so it's unclear how to compute the size of the dataset. (Source: https://arxiv.org/abs/2405.12213)",Confident,https://arxiv.org/abs/2405.12213 ,Octo: An Open-Source Generalist Robot Policy,248.0,"Octo Model Team, Dibya Ghosh, Homer Walke, Karl Pertsch, Kevin Black, Oier Mees, Sudeep Dasari, Joey Hejna, Tobias Kreiman, Charles Xu, Jianlan Luo, You Liang Tan, Lawrence Yunliang Chen, Pannag Sanketi, Quan Vuong, Ted Xiao, Dorsa Sadigh, Chelsea Finn, Sergey Levine","Large policies pretrained on diverse robot datasets have the potential to transform robotic learning: instead of training new policies from scratch, such generalist robot policies may be finetuned with only a little in-domain data, yet generalize broadly. However, to be widely applicable across a range of robotic learning scenarios, environments, and tasks, such policies need to handle diverse sensors and action spaces, accommodate a variety of commonly used robotic platforms, and finetune readily and efficiently to new domains. In this work, we aim to lay the groundwork for developing open-source, widely applicable, generalist policies for robotic manipulation. As a first step, we introduce Octo, a large transformer-based policy trained on 800k trajectories from the Open X-Embodiment dataset, the largest robot manipulation dataset to date. It can be instructed via language commands or goal images and can be effectively finetuned to robot setups with new sensory inputs and action spaces within a few hours on standard consumer GPUs. In experiments across 9 robotic platforms, we demonstrate that Octo serves as a versatile policy initialization that can be effectively finetuned to new observation and action spaces. We also perform detailed ablations of design decisions for the Octo model, from architecture to training data, to guide future research on building generalist robot models.","Academia,Academia,Academia,Industry","United States of America,United States of America,United States of America,United Kingdom of Great Britain and Northern Ireland",SOTA improvement,"Octo’s ability to control multiple robots out-of-the-box to the best openly available generalist robot policy, RT-1-X. RT-1-X had success rates of 0.2, ~0.38, and 0.6 on WidowX, UR5, and RT-1 Robot. Octo-Base outperformed RT-1-X on all tasks, with success rates of approximately 0.5, 0.7, and 0.8 on WidowX, UR5, and RT-1 Robot, respectively. (Source: https://arxiv.org/abs/2405.12213)",,14.0,"“We trained two variants of our model: Octo-Small with a transformer backbone that mirrors the size of a ViT-S, andOcto-Base with a transformer backbone that mirrors the size of a ViT-B. The ViT-B was trained for 300k steps with a batch size of 2048 using a TPU v4-128 pod, which took 14 hours."" (Source: https://arxiv.org/abs/2405.12213)
",Google TPU v4,128.0,,,,42983.43309675412,,,,,,Open weights (unrestricted),Open source,Open source,"MIT license
https://huggingface.co/rail-berkeley/octo-base

https://github.com/octo-models/octo",BF16,
GLM-4 (0520),Zhipu AI,2024-05-20,Language,"Language modeling/generation,Question answering,Code generation,Quantitative reasoning,Translation",,,,"- “the GLM-4 models are pre-trained on ten trillions of tokens”
- I did not find any information about parameters or compute. Here they speculatively estimate GLM-4 to be 200B parameters (which seems plausible), though no source provided: https://lifearchitect.ai/models-table/
- “GLM-4 gets close to the state-of-the-art models (GPT-4-Turbo, Gemini 1.5 Pro, and Claude 3 Opus)”  none of these models has parameters disclosed or compute estimation.

6*10000000000000*200000000000 = 1.2e+25 FLOPs with “Likely” confidence (+/- 1 OOM)",,10000000000000.0,,Likely,https://arxiv.org/abs/2406.12793,ChatGLM: A Family of Large Language Models from GLM-130B to GLM-4 All Tools,,"Aohan Zeng, Bin Xu, Bowen Wang, Chenhui Zhang, Da Yin, Diego Rojas, Guanyu Feng, Hanlin Zhao, Hanyu Lai, Hao Yu, Hongning Wang, Jiadai Sun, Jiajie Zhang, Jiale Cheng, Jiayi Gui, Jie Tang, Jing Zhang, Juanzi Li, Lei Zhao, Lindong Wu, Lucen Zhong, Mingdao Liu, Minlie Huang, Peng Zhang, Qinkai Zheng, Rui Lu, Shuaiqi Duan, Shudan Zhang, Shulin Cao, Shuxun Yang, Weng Lam Tam, Wenyi Zhao, Xiao Liu, Xiao Xia, Xiaohan Zhang, Xiaotao Gu, Xin Lv, Xinghan Liu, Xinyi Liu, Xinyue Yang, Xixuan Song, Xunkai Zhang, Yifan An, Yifan Xu, Yilin Niu, Yuantao Yang, Yueyan Li, Yushi Bai, Yuxiao Dong, Zehan Qi, Zhaoyu Wang, Zhen Yang, Zhengxiao Du, Zhenyu Hou, Zihan Wang","We introduce ChatGLM, an evolving family of large language models that we have been developing over time. This report primarily focuses on the GLM-4 language series, which includes GLM-4, GLM-4-Air, and GLM-4-9B. They represent our most capable models that are trained with all the insights and lessons gained from the preceding three generations of ChatGLM. To date, the GLM-4 models are pre-trained on ten trillions of tokens mostly in Chinese and English, along with a small set of corpus from 24 languages, and aligned primarily for Chinese and English usage. The high-quality alignment is achieved via a multi-stage post-training process, which involves supervised fine-tuning and learning from human feedback. Evaluations show that GLM-4 1) closely rivals or outperforms GPT-4 in terms of general metrics such as MMLU, GSM8K, MATH, BBH, GPQA, and HumanEval, 2) gets close to GPT-4-Turbo in instruction following as measured by IFEval, 3) matches GPT-4 Turbo (128K) and Claude 3 for long context tasks, and 4) outperforms GPT-4 in Chinese alignments as measured by AlignBench. The GLM-4 All Tools model is further aligned to understand user intent and autonomously decide when and which tool(s) touse -- including web browser, Python interpreter, text-to-image model, and user-defined functions -- to effectively complete complex tasks. In practical applications, it matches and even surpasses GPT-4 All Tools in tasks like accessing online information via web browsing and solving math problems using Python interpreter. Over the course, we have open-sourced a series of models, including ChatGLM-6B (three generations), GLM-4-9B (128K, 1M), GLM-4V-9B, WebGLM, and CodeGeeX, attracting over 10 million downloads on Hugging face in the year 2023 alone. The open models can be accessed through this https URL and this https URL.",Industry,China,Training cost,"Trained on 10T tokens with similar architecture to GPT-4, probably >$1M compute cost.",,,,,,,,,,GLM-4 (0116),,,,,API access,Unreleased,,"the GLM-4 API at
https://bigmodel.cn

repo with models from the same series but not exactly this one: https://github.com/THUDM/GLM-4",BF16,
Yi-Large,01.AI,2024-05-13,Language,"Chat,Language modeling/generation",100000000000.0,"""Yi-Large is a software over-the-air-driven closed-source large model with a parameter of over 100 billion tokens."" from https://www.chinadaily.com.cn/a/202405/13/WS6641abd1a31082fc043c6ccd.html",1.8e+24,"6ND = 6*100000000000*3000000000000=1.8e+24

(speculative confidence because training dataset size is very uncertain)",,3000000000000.0,"3T tokens for previous Yi models: ""Targeted as a bilingual language model and trained on 3T multilingual corpus, the Yi series models become one of the strongest LLM worldwide, showing promise in language understanding, commonsense reasoning, reading comprehension, and more.""
",Speculative,,,,"Alex Young, Bei Chen, Chao Li, Chengen Huang, Ge Zhang, Guanwei Zhang, Heng Li, Jiangcheng Zhu, Jianqun Chen, Jing Chang, Kaidong Yu, Peng Liu, Qiang Liu, Shawn Yue, Senbin Yang, Shiming Yang, Tao Yu, Wen Xie, Wenhao Huang, Xiaohui Hu, Xiaoyi Ren, Xinyao Niu, Pengcheng Nie, Yuchi Xu, Yudong Liu, Yue Wang, Yuxuan Cai, Zhenyu Gu, Zhiyuan Liu, Zonghong Dai",,Industry,China,Training cost,,,,,,,,,,,,,,,,API access,Unreleased,,,FP8,
GPT-4o,OpenAI,2024-05-13,"Multimodal,Language,Audio,Speech,Vision","Chat,Image generation,Audio generation,Vision-language generation,Table tasks,Language modeling/generation,Question answering,Speech recognition",,"Not known.

Inference costs in the API are 2x cheaper than GPT-4 Turbo",3.810001e+25,Training compute estimated from benchmark scores.,Unspecified unreleased,,,Speculative,"https://openai.com/index/hello-gpt-4o/ 
https://openai.com/index/gpt-4o-system-card/",Hello GPT-4o,,"Aidan Clark, Alex Paino, Jacob Menick, Liam Fedus, Luke Metz, Clemens Winter, Lia Guy, Sam Schoenholz, Daniel Levy, Nitish Keskar, Alex Carney, Alex Paino, Ian Sohl, Qiming Yuan, Reimar Leike, Arka Dhar, Brydon Eastman, Mia Glaese, Ben Sokolowsky, Andrew Kondrich, Felipe Petroski Such, Henrique Ponde de Oliveira Pinto, Jiayi Weng, Randall Lin, Youlong Cheng, Nick Ryder, Lauren Itow, Barret Zoph, John Schulman, Mianna Chen, Adam Lerer, Adam P. Goucher, Adam Perelman, Akila Welihinda, Alec Radford, Alex Borzunov, Alex Carney, Alex Chow, Alex Paino, Alex Renzin, Alex Tachard Passos, Alexi Christakis, Ali Kamali, Allison Moyer, Allison Tam, Amin Tootoonchian, Ananya Kumar, Andrej Karpathy, Andrey Mishchenko, Andrew Cann, Andrew Kondrich, Andrew Tulloch, Angela Jiang, Antoine Pelisse, Anuj Gosalia, Avi Nayak, Avital Oliver, Behrooz Ghorbani, Ben Leimberger, Ben Wang, Blake Samic, Brian Guarraci, Brydon Eastman, Camillo Lugaresi, Chak Li, Charlotte Barette, Chelsea Voss, Chong Zhang, Chris Beaumont, Chris Hallacy, Chris Koch, Christian Gibson, Christopher Hesse, Colin Wei, Daniel Kappler, Daniel Levin, Daniel Levy, David Farhi, David Mely, David Sasaki, Dimitris Tsipras, Doug Li, Duc Phong Nguyen, Duncan Findlay, Edmund Wong, Ehsan Asdar, Elizabeth Proehl, Elizabeth Yang, Eric Peterson, Eric Sigler, Eugene Brevdo, Farzad Khorasani, Francis Zhang, Gene Oden, Geoff Salmon, Hadi Salman, Haiming Bao, Heather Schmidt, Hongyu Ren, Hyung Won Chung, Ian Kivlichan, Ian O'Connell, Ian Osband, Ilya Kostrikov, Ingmar Kanitscheider, Jacob Coxon, James Crooks, James Lennon, Jason Teplitz, Jason Wei, Jason Wolfe, Jay Chen, Jeff Harris, Jiayi Weng, Jie Tang, Joanne Jang, Jonathan Ward, Jonathan McKay, Jong Wook Kim, Josh Gross, Josh Kaplan, Joy Jiao, Joyce Lee, Juntang Zhuang, Kai Fricke, Kavin Karthik, Kenny Hsu, Kiel Howe, Kyle Luther, Larry Kai, Lauren Itow, Leo Chen, Lia Guy, Lien Mamitsuka, Lilian Weng, Long Ouyang, Louis Feuvrier, Lukas Kondraciuk, Lukasz Kaiser, Lyric Doshi, Mada Aflak, Maddie Simens, Madeleine Thompson, Marat Dukhan, Marvin Zhang, Mateusz Litwin, Max Johnson, Mayank Gupta, Mia Glaese, Michael Janner, Michael Petrov, Michael Wu, Michelle Fradin, Michelle Pokrass, Miguel Oom Temudo de Castro, Mikhail Pavlov, Minal Khan, Mo Bavarian, Natalia Gimelshein, Natalie Staudacher, Nick Stathas, Nik Tezak, Nithanth Kudige, Noel Bundick, Ofir Nachum, Oleg Boiko, Oleg Murk, Olivier Godement, Owen Campbell-Moore, Philip Pronin, Philippe Tillet, Rachel Lim, Rajan Troll, Randall Lin, Rapha gontijo lopes, Raul Puri, Reah Miyara, Reimar Leike, Renaud Gaubert, Reza Zamani, Rob Honsby, Rohit Ramchandani, Rory Carmichael, Ruslan Nigmatullin, Ryan Cheu, Scott Gray, Sean Grove, Sean Metzger, Shantanu Jain, Shengjia Zhao, Sherwin Wu, Shuaiqi (Tony) Xia, Sonia Phene, Spencer Papay, Steve Coffey, Steve Lee, Steve Lee, Stewart Hall, Suchir Balaji, Tal Broda, Tal Stramer, Tarun Gogineni, Ted Sanders, Thomas Cunninghman, Thomas Dimson, Thomas Raoux, Tianhao Zheng, Tina Kim, Todd Underwood, Tristan Heywood, Valerie Qi, Vinnie Monaco, Vlad Fomenko, Weiyi Zheng, Wenda Zhou, Wojciech Zaremba, Yash Patil, Yilei, Qian, Yongjik Kim, Youlong Cheng, Yuchen He, Yuchen Zhang, Yujia Jin, Yunxing Dai, Yury Malkov","We’re announcing GPT-4o, our new flagship model that can reason across audio, vision, and text in real time.

GPT-4o (“o” for “omni”) is a step towards much more natural human-computer interaction—it accepts as input any combination of text, audio, image, and video and generates any combination of text, audio, and image outputs. It can respond to audio inputs in as little as 232 milliseconds, with an average of 320 milliseconds, which is similar to human response time(opens in a new window) in a conversation. It matches GPT-4 Turbo performance on text in English and code, with significant improvement on text in non-English languages, while also being much faster and 50% cheaper in the API. GPT-4o is especially better at vision and audio understanding compared to existing models.",Industry,United States of America,"SOTA improvement,Significant use","Outperforms GPT-4 Turbo and other models on text and especially on multimodal benchmarks, such as MMLU, GPQA, HumanEval, MMMU, etc See Model Evaluations: https://openai.com/index/hello-gpt-4o/ 

GPT-4o is now the default model in ChatGPT, so it's one of the most widely used models.",,,,,,,,,,,,"Definitely a new model, not a GPT-4 finetune",,,API access,Unreleased,,,,True
VILA1.5-13B,"NVIDIA,Massachusetts Institute of Technology (MIT)",2024-05-03,Multimodal,"Chat,Visual question answering,Image captioning,Language modeling/generation",13493916736.0,"https://huggingface.co/Efficient-Large-Model/VILA1.5-13b/blob/main/llm/model.safetensors.index.json
https://huggingface.co/Efficient-Large-Model/VILA1.5-13b/tree/main/vision_tower
https://huggingface.co/Efficient-Large-Model/VILA1.5-13b/blob/main/mm_projector/model.safetensors

llm: 13015864320
vision_tower: 428225600
mm_projector: 49826816

total: 13493916736
",2.3003136e+21,"not directly reported (arXiv preprint is for VILA-13B), but assumed to be similar to VILA-13B (given similar size/architecture)",,32430000000.0,"Table 2
MMC4: 25M images with 576+122.5 tokens each
COYO: 25M images with 576+22.7 tokens each
25M*(576+122.5+576+22.7)=32430000000",Confident,"https://arxiv.org/abs/2312.07533
https://huggingface.co/Efficient-Large-Model/VILA1.5-13b
https://github.com/NVlabs/VILA/tree/bbc609baf326b1b49b93450b48edc516db3737fc/scripts/v1_5/release/13b
https://developer.nvidia.com/blog/visual-language-models-on-nvidia-hardware-with-vila/
",VILA: On Pre-training for Visual Language Models,384.0,"Ji Lin, Hongxu Yin, Wei Ping, Yao Lu, Pavlo Molchanov, Andrew Tao, Huizi Mao, Jan Kautz, Mohammad Shoeybi, Song Han","Visual language models (VLMs) rapidly progressed with the recent success of large language models. There have been growing efforts on visual instruction tuning to extend the LLM with visual inputs, but lacks an in-depth study of the visual language pre-training process, where the model learns to perform joint modeling on both modalities. In this work, we examine the design options for VLM pre-training by augmenting LLM towards VLM through step-by-step controllable comparisons. We introduce three main findings: (1) freezing LLMs during pre-training can achieve decent zero-shot performance, but lack in-context learning capability, which requires unfreezing the LLM; (2) interleaved pre-training data is beneficial whereas image-text pairs alone are not optimal; (3) re-blending text-only instruction data to image-text data during instruction fine-tuning not only remedies the degradation of text-only tasks, but also boosts VLM task accuracy. With an enhanced pre-training recipe we build VILA, a Visual Language model family that consistently outperforms the state-of-the-art models, e.g., LLaVA-1.5, across main benchmarks without bells and whistles. Multi-modal pre-training also helps unveil appealing properties of VILA, including multi-image reasoning, enhanced in-context learning, and better world knowledge.
","Industry,Academia","United States of America,United States of America",SOTA improvement,"Table5. Comparison with state-of-the-art methods on 12 visual-language benchmarks. Our models consistently outperform LLaVA-1.5 under
a head-to-head comparison, using the same prompts and the same base LLM (Vicuna-1.5 is based on Llama-2), showing the effectiveness of
visual-language pre-training",,,,NVIDIA A100,128.0,,,,101175.78544917757,"SigLIP 400M,Vicuna-13B-v1.5",,,,,Open weights (non-commercial),Open source,Open source,"Apache 2.0 for code, CC by NC for weights
https://github.com/NVlabs/VILA

https://huggingface.co/Efficient-Large-Model/VILA1.5-13b",BF16,
Llama 3-70B,Meta AI,2024-04-18,Language,"Chat,Language modeling/generation,Code generation",70000000000.0,,7.861e+24,"Arithmetic calculation:
6 * 15T tokens * 70B parameters = 6.3e24

GPU calculation:
https://huggingface.co/meta-llama/Meta-Llama-3-70B indicates training took 6.4M GPU-hours
We also know their larger scale training runs for 405B were getting between 0.38-0.41 MFU. Presumably the 70B model gets at least 0.43 utilization (405B has to be split across two nodes, while 70B should fit on one).
990 TFLOPS per GPU * 6.4 million GPU hours * 3600s * 0.43 = 9.808e24

Geometric mean: sqrt(6.3e24 * 9.808e24) = 7.861e24",Llama 3 dataset,15000000000000.0,,Confident,https://ai.meta.com/blog/meta-llama-3/,Introducing Meta Llama 3: The most capable openly available LLM to date,,Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Amit Sangani; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Ash JJhaveri; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Cox; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hamid Shojanazeri; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jacob Xu; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Mark Zuckerberg; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos,,Industry,United States of America,Significant use,"Will almost certainly be very influential and widely used in the open access AI industry, as with the previous Llama generations.",,,,NVIDIA H100 SXM5 80GB,,,,,,,,,,,Open weights (restricted use),Unreleased,,"https://github.com/meta-llama/llama3/blob/main/MODEL_CARD.md

License A custom commercial license is available at: https://llama.meta.com/llama3/license",BF16,
Reka Core,Reka AI,2024-04-15,"Multimodal,Language,Vision,Video,Speech","Chat,Language modeling/generation,Image captioning,Code generation,Code autocompletion,Question answering,Visual question answering,Video description,Speech recognition,Speech-to-text,Quantitative reasoning",67000000000.0,,8.400010000000001e+24,"No direct information about Reka Core model (""Reka Core has not finished training and is still improving."")

The smaller dense model Reka Flash has 21B parameters and was trained on 5 trillion language tokens.

There is information about compute: ""Our setup comprises of clusters from a mixture of vendors with our peak compute being approximately
2.5K H100s and 2.5K A100s.""

If we assume 2 months of training with 2.5k H100s and 2.5k A100s at utilization 0.5 we get 8.4e24 FLOP (2500*9.9e14+2500*3.12e14)*60*60*24*60*0.5.","Wikipedia,Unspecified unreleased",,,Speculative,https://arxiv.org/abs/2404.12387,"Reka Core, Flash, and Edge: A Series of Powerful
Multimodal Language Models",,"Aitor Ormazabal, Che Zheng, Cyprien de Masson d'Autume, Dani Yogatama, Deyu Fu, Donovan Ong, Eric Chen, Eugenie Lamprecht, Hai Pham, Isaac Ong, Kaloyan Aleksiev, Lei Li, Matthew Henderson, Max Bain, Mikel Artetxe, Nishant Relan, Piotr Padlewski, Qi Liu, Ren Chen, Samuel Phua, Yazheng Yang, Yi Tay, Yuqi Wang, Zhongkai Zhu, Zhihui Xie","We introduce Reka Core, Flash, and Edge, a series of powerful multimodal language models trained from scratch by Reka. Reka models are able to process and reason with text, images, video, and audio inputs. This technical report discusses details of training some of these models and provides comprehensive evaluation results. We show that Reka Edge and Reka Flash are not only state-of-the-art but also outperform many much larger models, delivering outsized values for their respective compute class. Meanwhile, our most capable and largest model, Reka Core, approaches the best frontier models on both automatic evaluations and blind human evaluations. On image question answering benchmarks (e.g. MMMU, VQAv2), Core performs competitively to GPT4-V. Meanwhile, on multimodal chat, Core ranks as the second most preferred model under a blind third-party human evaluation setup, outperforming other models such as Claude 3 Opus. On text benchmarks, Core not only performs competitively to other frontier models on a set of well-established benchmarks (e.g. MMLU, GSM8K) but also outperforms GPT4-0613 on human evaluation. On video question answering (Perception-Test), Core outperforms Gemini Ultra. Models are shipped in production at this http URL . A showcase of non cherry picked qualitative examples can also be found at this http URL .",Industry,United States of America,Training cost,,,,,"NVIDIA A100,NVIDIA H100 SXM5 80GB",,,,,,,,,,,API access,Unreleased,,,BF16,
ReALM,Apple,2024-03-29,Language,"Named entity recognition,Language modeling,Part-of-speech tagging",3000000000.0,Fine-tuned FLAN-T5 models ranging from 80M to 3B,,Fine-tuned from FLAN-T5,,16300.0,2300 training examples from conversation; 3900 synthetically generated training examples; 10100 training examples using context from a phone screen.,Confident,https://arxiv.org/abs/2403.20329,ReALM: Reference Resolution As Language Modeling,,"Joel Ruben Antony Moniz, Soundarya Krishnan, Melis Ozyildirim, Prathamesh Saraf, Halim Cagri Ates, Yuan Zhang, Hong Yu, Nidhi Rajshree","Reference resolution is an important problem, one that is essential to understand and successfully handle context of different kinds. This context includes both previous turns and context that pertains to non-conversational entities, such as entities on the user's screen or those running in the background. While LLMs have been shown to be extremely powerful for a variety of tasks, their use in reference resolution, particularly for non-conversational entities, remains underutilized. This paper demonstrates how LLMs can be used to create an extremely effective system to resolve references of various types, by showing how reference resolution can be converted into a language modeling problem, despite involving forms of entities like those on screen that are not traditionally conducive to being reduced to a text-only modality. We demonstrate large improvements over an existing system with similar functionality across different types of references, with our smallest model obtaining absolute gains of over 5% for on-screen references. We also benchmark against GPT-3.5 and GPT-4, with our smallest model achieving performance comparable to that of GPT-4, and our larger models substantially outperforming it.",Industry,United States of America,SOTA improvement,"""We show that ReaLM outperforms previous approaches, and performs roughly as well as the state-of-the-art LLM today, GPT-4, despite consisting of far fewer parameters.""

""We also benchmark against GPT-3.5 and GPT-4, with our smallest model achieving performance comparable to that of GPT-4, and our larger models substantially outperforming it.""",,,,,,,,,,Flan-T5 11B,,No training details given,,,Unreleased,Unreleased,,,,
DBRX,Databricks,2024-03-27,Language,"Chat,Code generation",132000000000.0,132B mixture of experts. 36B parameters active per inference,2.6e+24,"Mixture of Experts (MoE)

36 billion active params * 12 trillion tokens * 6 ~= 2.6e24
https://www.wolframalpha.com/input?i=6+FLOP+*+36+billion+*+12+trillion

also, it was trained on 3072 NVIDIA H100s, but with an unclear timeframe (end-end process was three months, including evals and red-teaming).",,9000000000000.0,"12T tokens is equivalent to 9T words. Though it includes code data, so not very literally 9T words",Confident,https://www.databricks.com/blog/introducing-dbrx-new-state-art-open-llm,Introducing DBRX: A New State-of-the-Art Open LLM,,Mosaic Research Team,"Today, we are excited to introduce DBRX, an open, general-purpose LLM created by Databricks. Across a range of standard benchmarks, DBRX sets a new state-of-the-art for established open LLMs. Moreover, it provides the open community and enterprises building their own LLMs with capabilities that were previously limited to closed model APIs; according to our measurements, it surpasses GPT-3.5, and it is competitive with Gemini 1.0 Pro. It is an especially capable code model, surpassing specialized models like CodeLLaMA-70B on programming, in addition to its strength as a general-purpose LLM.",Industry,United States of America,Training cost,,1.0,,,NVIDIA H100 SXM5 80GB,,,,,,,,,,,Open weights (restricted use),Unreleased,,"license: https://www.databricks.com/legal/open-model-license
conditions based on monthly users",BF16,
MM1-30B,Apple,2024-03-14,"Multimodal,Language,Vision","Chat,Image captioning",30000000000.0,30B,4.86e+23,"Pre-trained on ~2B image-text pairs and 2T tokens (Table 2). Each image is 144 tokens, so the images are ~300B tokens.
Then additional multimodal training for 400B tokens, for a total of ~2.7T tokens.

This is the final training recipe: ""We initialize both the image encoder and the underlying LLM decoder weights for MM1 from in-house pre-trained models2. We then perform multimodal pre-training on the above data mix for 200k steps (approx. 400B tokens).""

Compute  = 6ND = 6 * 2.7 trillion * 30 billion = 4.86e23

maybe the size of the visual connector is relevant","Conceptual Captions (CC3M),Conceptual Captions 12M (CC12M),COYO-700M,Unspecified unreleased,OBELICS",1500000000000.0,at least 2T tokens,Likely,https://arxiv.org/abs/2403.09611,"MM1: Methods, Analysis & Insights from Multimodal LLM Pre-training",122.0,"Brandon McKinzie, Zhe Gan, Jean-Philippe Fauconnier, Sam Dodge, Bowen Zhang, Philipp Dufter, Dhruti Shah, Xianzhi Du, Futang Peng, Floris Weers, Anton Belyi, Haotian Zhang, Karanjeet Singh, Doug Kang, Ankur Jain, Hongyu Hè, Max Schwarzer, Tom Gunter, Xiang Kong, Aonan Zhang, Jianyu Wang, Chong Wang, Nan Du, Tao Lei, Sam Wiseman, Guoli Yin, Mark Lee, Zirui Wang, Ruoming Pang, Peter Grasch, Alexander Toshev, Yinfei Yang","In this work, we discuss building performant Multimodal Large Language Models (MLLMs). In particular, we study the importance of various architecture components and data choices. Through careful and comprehensive ablations of the image encoder, the vision language connector, and various pre-training data choices, we identified several crucial design lessons. For example, we demonstrate that for large-scale multimodal pre-training using a careful mix of image-caption, interleaved image-text, and text-only data is crucial for achieving state-of-the-art (SOTA) few-shot results across multiple benchmarks, compared to other published pre-training results. Further, we show that the image encoder together with image resolution and the image token count has substantial impact, while the vision-language connector design is of comparatively negligible importance. By scaling up the presented recipe, we build MM1, a family of multimodal models up to 30B parameters, including both dense models and mixture-of-experts (MoE) variants, that are SOTA in pre-training metrics and achieve competitive performance after supervised fine-tuning on a range of established multimodal benchmarks. Thanks to large-scale pre-training, MM1 enjoys appealing properties such as enhanced in-context learning, and multi-image reasoning, enabling few-shot chain-of-thought prompting.",Industry,United States of America,SOTA improvement,""" In particular, the pretrained model MM1 is SOTA, performing better than Emu2 [105], Flamingo [3],
and IDEFICS [47] on captioning and visual question answering (VQA) tasks
in few-shot settings, both in small and large size regimes""

Table 4: outperforms Gemini and GPT-4V on VQA",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
ManiGaussian,"Tsinghua University,Nanyang Technological University,Carnegie Mellon University (CMU)",2024-03-13,"Robotics,Vision,Video",Robotic manipulation,,,,,,,,Confident,"https://arxiv.org/abs/2403.08321
https://guanxinglu.github.io/ManiGaussian/",ManiGaussian: Dynamic Gaussian Splatting for Multi-task Robotic Manipulation,53.0,"Guanxing Lu, Shiyi Zhang, Ziwei Wang, Changliu Liu, Jiwen Lu, Yansong Tang","Performing language-conditioned robotic manipulation tasks in unstructured environments is highly demanded for general intelligent robots. Conventional robotic manipulation methods usually learn semantic representation of the observation for action prediction, which ignores the scene-level spatiotemporal dynamics for human goal completion. In this paper, we propose a dynamic Gaussian Splatting method named ManiGaussian for multi-task robotic manipulation, which mines scene dynamics via future scene reconstruction. Specifically, we first formulate the dynamic Gaussian Splatting framework that infers the semantics propagation in the Gaussian embedding space, where the semantic representation is leveraged to predict the optimal robot action. Then, we build a Gaussian world model to parameterize the distribution in our dynamic Gaussian Splatting framework, which provides informative supervision in the interactive environment via future scene reconstruction. We evaluate our ManiGaussian on 10 RLBench tasks with 166 variations, and the results demonstrate our framework can outperform the state-of-the-art methods by 13.1\% in average success rate. Project page: this https URL.","Academia,Academia,Academia","China,Singapore,United States of America",SOTA improvement,"1 Introduction: ""We evaluate our ManiGaussian method on the RLBench dataset [27] with 10 tasks and 166 variants, where our method outperforms the state-of-the-art multi-task robotic manipulation methods by 13.1% in the average task success rate""",,,"""All the compared methods are trained on two NVIDIA RTX 4090 GPUs for 100k iterations with a batch size of 2.""

https://github.com/GuanxingLu/ManiGaussian
Training: ""We train our ManiGaussian on two NVIDIA RTX 4090 GPUs for <2 days.""

Paper didn't specify precision, but GitHub code/weights might confirm - I gave a cursory look over the repo but didn't see anything obvious.

Assume BF16 -> 3.3e14 FLOP/s/GPU 
Assume <2 days = <48 hr  ->  42 hr = 151200 s
Assume 0.3 utilization
0.3 * 2 GPU * 3.3e14 FLOP/s/GPU * 151200 s ~= 2.99e19 FLOP


 ",NVIDIA GeForce RTX 4090,2.0,,,,1780.5016389530874,,,,,,Open weights (unrestricted),Open source,,"MIT license
https://github.com/GuanxingLu/ManiGaussian",,
Inflection-2.5,Inflection AI,2024-03-07,Language,Chat,,,1.0001e+25,"""Inflection-1 used approximately 4% the training FLOPs of GPT-4 and, on average, performed at approximately 72% GPT-4 level on a diverse range of IQ-oriented tasks. Inflection-2.5, now powering Pi, achieves more than 94% the average performance of GPT-4 despite using only 40% the training FLOPs.""

This is a weird one - we estimated GPT-4 at 2.1e25 FLOP (which could be off somewhat, or Inflection could believe a different number). 40% of that is ~8e24. But Inflection 2, the previous model, was trained on ~1e25 FLOP per Inflection. Inflection-2.5 also does better on benchmarks than 2. Intuitively Inflection-2.5 would be trained on appreciably more compute. 

1e25 seems like a rough, perhaps conservative guess given all this.",,,,Speculative,https://inflection.ai/inflection-2-5,Inflection-2.5: meet the world's best personal AI,,,"At Inflection, our mission is to create a personal AI for everyone. Last May, we released Pi—a personal AI, designed to be empathetic, helpful, and safe. In November we announced a new major foundation model, Inflection-2, the second best LLM in the world at the time.

Now we are adding IQ to Pi’s exceptional EQ.

We are launching Inflection-2.5, our upgraded in-house model that is competitive with all the world's leading LLMs like GPT-4 and Gemini. It couples raw capability with our signature personality and unique empathetic fine-tuning. Inflection-2.5 is available to all Pi's users today, at pi.ai, on iOS, on Android, or our new desktop app.",Industry,United States of America,Significant use,one million daily users; six million monthly,,,,NVIDIA H100 SXM5 80GB,,,11804593.33,,,,,,,,Hosted access (no API),Unreleased,,,,
Claude 3 Sonnet,Anthropic,2024-03-04,"Multimodal,Language,Vision","Chat,Image captioning,Code generation,Language modeling/generation",,,,,Unspecified unreleased,,,Unknown,https://www-cdn.anthropic.com/de8ba9b01c9ab7cbabf5c33b80b7bbc618857627/Model_Card_Claude_3.pdf,"The Claude 3 Model Family: Opus, Sonnet, Haiku",,,"We introduce Claude 3, a new family of large multimodal models – Claude 3 Opus, our most capable offering, Claude 3 Sonnet, which provides a combination of skills and speed, and Claude 3 Haiku, our fastest and least expensive model. All new models have vision capabilities that enable them to process and analyze image data. The Claude 3 family demonstrates strong performance across benchmark evaluations and sets a new standard on
measures of reasoning, math, and coding. Claude 3 Opus achieves state-of-the-art results on evaluations like GPQA [1], MMLU [2], MMMU [3] and many more. Claude 3 Haiku performs as well or better than Claude 2 [4] on most pure-text tasks, while Sonnet and Opus significantly outperform it. Additionally, these models exhibit improved fluency in non-English languages, making them more versatile for a global audience. In this report, we provide an in-depth analysis of our evaluations, focusing on core capabilities, safety, societal impacts, and the catastrophic risk assessments we committed to in our Responsible Scaling Policy [5].
",Industry,United States of America,Training cost,"Based on leaks, Claude 3 Opus and Sonnet probably cost >$1M to train.",,,"Like its predecessors, Claude 3 models employ various training methods, such as unsupervised learning and Constitutional AI [6]. These models were trained using hardware from Amazon Web Services (AWS) and Google Cloud Platform (GCP)",,,,,"Per https://time.com/6980000/anthropic/
""Claude 3 cost somewhere between $30 million and $300 million to train""
This would seem to include all three versions.

Ballpark estimate, based on relative API costs:
sqrt($30M * $300M) * (3 / (0.25 + 3 + 15)) = $15.6M
(cost) * (Sonnet share of API cost)

Convert to 2020 dollars: $12.9M",,,,,,,API access,Unreleased,,,,
Claude 3 Opus,Anthropic,2024-03-04,"Multimodal,Language,Vision","Chat,Image captioning,Code generation,Language modeling/generation",,,1.640001e+25,Training compute estimated from benchmark scores.,Unspecified unreleased,,,Speculative,https://www-cdn.anthropic.com/de8ba9b01c9ab7cbabf5c33b80b7bbc618857627/Model_Card_Claude_3.pdf,"The Claude 3 Model Family: Opus, Sonnet, Haiku",,,"We introduce Claude 3, a new family of large multimodal models – Claude 3 Opus, our most capable offering, Claude 3 Sonnet, which provides a combination of skills and speed, and Claude 3 Haiku, our fastest and least expensive model. All new models have vision capabilities that enable them to process and analyze image data. The Claude 3 family demonstrates strong performance across benchmark evaluations and sets a new standard on
measures of reasoning, math, and coding. Claude 3 Opus achieves state-of-the-art results on evaluations like GPQA [1], MMLU [2], MMMU [3] and many more. Claude 3 Haiku performs as well or better than Claude 2 [4] on most pure-text tasks, while Sonnet and Opus significantly outperform it. Additionally, these models exhibit improved fluency in non-English languages, making them more versatile for a global audience. In this report, we provide an in-depth analysis of our evaluations, focusing on core capabilities, safety, societal impacts, and the catastrophic risk assessments we committed to in our Responsible Scaling Policy [5].
",Industry,United States of America,"SOTA improvement,Training cost","Based on leaks, Claude 3 Opus and Sonnet probably cost >$1M to train.",,,"Like its predecessors, Claude 3 models employ various training methods, such as unsupervised learning and Constitutional AI [6]. These models were trained using hardware from Amazon Web Services (AWS) and Google Cloud Platform (GCP)",,,,,"Per https://time.com/6980000/anthropic/
""Claude 3 cost somewhere between $30 million and $300 million to train""
This would seem to include all three versions.

Ballpark estimate, based on relative API costs:
sqrt($30M * $300M) * (15 / (0.25 + 3 + 15)) = $78.0M
(cost) * (Sonnet share of API cost)

Convert to 2020 dollars: $64.7M",,,,,,,API access,Unreleased,,,,True
Aramco Metabrain AI,Saudi Aramco,2024-03-04,Language,Language modeling/generation,250000000000.0,"""It has 250 billion parameters that are adjustable during training to generate outputs or make predictions.""",1.05e+25,6*250B*7T=1.05e+25,,7000000000000.0,,Likely,https://www.offshore-technology.com/news/saudi-aramco-unveils-industry-first-generative-ai-model/,Saudi Aramco unveils industry’s first generative AI model,,Saudi Aramco,,"Industry,Government",Saudi Arabia,Training cost,,,,,,,,,,,,,,,,Unreleased,Unreleased,,,,True
Mistral Large,Mistral AI,2024-02-26,Language,Chat,,,1.1199999999999999e+25,"https://www.wsj.com/tech/ai/the-9-month-old-ai-startup-challenging-silicon-valleys-giants-ee2e4c48

Mistral spent <20 million euro (meaning approximately 20 million?) to train Mistral Large:

https://x.com/EMostaque/status/1762152740938031484?s=20
""assuming this is on H100s with @Scaleway who are €1.9/hour => 10m H100 hours (c 30m A100 hrs), 3 months at 4k H100s :timer_clock:"" -Emad Mostaque

Assuming bf16 or fp16, H100 SXM performance is 989 TFLOPS
At 1.9 euro per H100-hour and 30% utilization, spending 20M euro produces 1.12*10^25 FLOP.
https://www.wolframalpha.com/input?i=20+million+%2F+%281.9%2Fhour%29+*+989+TFLOPS+*+0.30 ",,,,Likely,https://mistral.ai/news/mistral-large/,"Mistral Large, our new flagship model",,,,Industry,France,Training cost,"~$20M training cost: https://www.wsj.com/tech/ai/the-9-month-old-ai-startup-challenging-silicon-valleys-giants-ee2e4c48
https://x.com/EMostaque/status/1762152740938031484?s=20 ",,2500.0,Speculation by Emad Mostaque: 20M euro spent at Scaleway (1.9 euro per H100-hour) would be around 3 months on 4000 H100s.,NVIDIA H100 SXM5 80GB,,,14110111.93,"In February 2024, 20M EUR = 22M USD
Converting to 2020 USD, this is 18.5M
https://www.in2013dollars.com/us/inflation/2024?endYear=2020&amount=22000000",,,,,,,API access,Unreleased,,,,True
MegaScale (Production),"ByteDance,Peking University",2024-02-23,Language,Language modeling/generation,530000000000.0,"Production run is stated to have ""hundreds of billions of parameters"". Since the authors also do a number of experiments with a 530B model, I speculate they've used 530B for the production model.",3.9e+24,"Speculative. The model is stated to have trained for ""several weeks"". Assuming 530B parameters and ""several"" = 3, compute can be estimated from the 175B model's stated PFLOP/sec:
2166.3 aggregate PFlops/sec * 3 weeks * 7 days/week * 24 hours/day * 3600 seconds/hour = 3.9e+24.
As an upper bound, say 8e+24. ",,,"Speculative. Authors note production system was trained on ""multi-trillions of tokens"". This could refer to training for multiple epochs on the same 300B tokens used to train the 175B and 530B models outlined in more detail in the paper. Alternatively, it could refer to a larger dataset of perhaps 3-9 trillion tokens.",Speculative,https://arxiv.org/abs/2402.15627,"MegaScale: Scaling Large Language Model Training to More Than 10,000 GPUs",40.0,"Ziheng Jiang, Haibin Lin, Yinmin Zhong, Qi Huang, Yangrui Chen, Zhi Zhang, Yanghua Peng, Xiang Li, Cong Xie, Shibiao Nong, Yulu Jia, Sun He, Hongmin Chen, Zhihao Bai, Qi Hou, Shipeng Yan, Ding Zhou, Yiyao Sheng, Zhuo Jiang, Haohan Xu, Haoran Wei, Zhang Zhang, Pengfei Nie, Leqi Zou, Sida Zhao, Liang Xiang, Zherui Liu, Zhe Li, Xiaoying Jia, Jianxi Ye, Xin Jin, Xin Liu","We present the design, implementation and engineering experience in building and deploying MegaScale, a production system for training large language models (LLMs) at the scale of more than 10,000 GPUs. Training LLMs at this scale brings unprecedented challenges to training efficiency and stability. We take a full-stack approach that co-designs the algorithmic and system components across model block and optimizer design, computation and communication overlapping, operator optimization, data pipeline, and network performance tuning. Maintaining high efficiency throughout the training process (i.e., stability) is an important consideration in production given the long extent of LLM training jobs. Many hard stability issues only emerge at large scale, and in-depth observability is the key to address them. We develop a set of diagnosis tools to monitor system components and events deep in the stack, identify root causes, and derive effective techniques to achieve fault tolerance and mitigate stragglers. MegaScale achieves 55.2% Model FLOPs Utilization (MFU) when training a 175B LLM model on 12,288 GPUs, improving the MFU by 1.34x compared to Megatron-LM. We share our operational experience in identifying and fixing failures and stragglers. We hope by articulating the problems and sharing our experience from a systems perspective, this work can inspire future LLM systems research.","Industry,Academia","China,China",SOTA improvement,Improves SOTA in FLOP utilization for distributed LLM training by 1.34X.,,504.0,"Speculative. Authors state ""several weeks"". For analysis, I've assumed this means around 3 weeks.",NVIDIA A100,12288.0,0.48,2614019.245,,9728028.18454986,,,,,,Unreleased,Unreleased,,"Code for MegaScale (also called veScale) training system are released under Apache Licence: https://github.com/volcengine/vescale
The model itself is unreleased.",,True
Sora Turbo,OpenAI,2024-02-15,"Video,Vision","Video generation,Text-to-video",,,,,Unspecified unreleased,,,Unknown,https://openai.com/index/sora-is-here/,Sora is here,,,"Our video generation model is rolling out at sora.com⁠.

Earlier this year, we introduced Sora⁠, our model that can create realistic videos from text, and shared our initial research progress⁠ on world simulation. Sora serves as a foundation for AI that understands and simulates reality—an important step towards developing models that can interact with the physical world.

We developed a new version of Sora—Sora Turbo—that is significantly faster than the model we previewed in February. We’re releasing it today as a standalone product at Sora.com to ChatGPT Plus and Pro users.",Industry,United States of America,Significant use,,,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
Sora,OpenAI,2024-02-15,"Video,Vision","Video generation,Text-to-video,Image-to-video,Video-to-video",,,,,Unspecified unreleased,,,Unknown,https://openai.com/index/video-generation-models-as-world-simulators/,Video generation models as world simulators,,,"Sora is OpenAI’s video generation model, designed to take text, image, and video inputs and generate a new video as an output. Users can create videos up to 1080p resolution (20 seconds max) in various formats, generate new content from text, or enhance, remix, and blend their own assets. Users will be able to explore the Featured and Recent feeds which showcase community creations and offer inspiration for new ideas. Sora builds on learnings from DALL·E and GPT models, and is designed to give people expanded tools for storytelling and creative expression. 

Sora is a diffusion model, which generates a video by starting off with a base video that looks like static noise and gradually transforms it by removing the noise over many steps. By giving the model foresight of many frames at a time, we’ve solved a challenging problem of making sure a subject stays the same even when it goes out of view temporarily. Similar to GPT models, Sora uses a transformer architecture, unlocking superior scaling performance. ",Industry,United States of America,SOTA improvement,,,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
Gemini 1.5 Pro,Google DeepMind,2024-02-15,"Language,Multimodal","Language modeling,Visual question answering",,MoE architecture,1.580001e+25,Training compute imputed from benchmark scores.,Unspecified unreleased,,,Speculative,https://storage.googleapis.com/deepmind-media/gemini/gemini_v1_5_report.pdf,Gemini 1.5: Unlocking multimodal understanding across millions of tokens of context,,Gemini Team,,Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",Significant use,"Google DeepMind's current best public model, being used for their products.",,,,Google TPU v4,,,7753789.965,,,,,,,,API access,Unreleased,,API access: https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models,,True
Aya,"Cohere for AI,Brown University,Cohere,Carnegie Mellon University (CMU),Massachusetts Institute of Technology (MIT)",2024-02-12,Language,"Language modeling/generation,Chat,Translation",13000000000.0,13B  - fine tune of mT5 - from last page - model card ,,"13B parameters, batch size = 256, sequence length = 1024 (for both input and output), 30K updates
- aproximation 6ND = 6 * 13B * 2 * 1024 * 30K * 256= 1226833920000000000000 = 1.22683392e+21
""We finetune mT5 models using the Adafactor optimizer [Shazeer & Stern, 2018] with a learning rate of 3 × 10−4 and a batch size of 256. We find that using a smaller learning rate compared to 1 × 10−3 leads to a better downstream performance, which is potentially due to the diverse nature of our IFT mixture. Both input and target sequence length are set to 1024.""
""We train all the models for 30,000 update steps with data packing enabled.16 This results in a training budget of 25M samples. """,,,"at least 835 GB + size of ShareGPT-command + size of DataProvenance collection
https://huggingface.co/CohereForAI/aya-101#data-sourcesxP3x  - 680GB - from 
https://huggingface.co/datasets/CohereForAI/xP3x

aya_dataset - 138MB - https://huggingface.co/datasets/CohereForAI/aya_dataset

aya collection - 155GB - https://huggingface.co/datasets/CohereForAI/aya_collection",Speculative,https://arxiv.org/abs/2402.07827,Aya Model: An Instruction Finetuned Open-Access Multilingual Language Model,114.0,"Ahmet Üstün, Viraat Aryabumi, Zheng-Xin Yong, Wei-Yin Ko, Daniel D'souza, Gbemileke Onilude, Neel Bhandari, Shivalika Singh, Hui-Lee Ooi, Amr Kayid, Freddie Vargus, Phil Blunsom, Shayne Longpre, Niklas Muennighoff, Marzieh Fadaee, Julia Kreutzer, Sara Hooker","Recent breakthroughs in large language models (LLMs) have centered around a handful of data-rich languages. What does it take to broaden access to breakthroughs beyond first-class citizen languages? Our work introduces Aya, a massively multilingual generative language model that follows instructions in 101 languages of which over 50% are considered as lower-resourced. Aya outperforms mT0 and BLOOMZ on the majority of tasks while covering double the number of languages. We introduce extensive new evaluation suites that broaden the state-of-art for multilingual eval across 99 languages -- including discriminative and generative tasks, human evaluation, and simulated win rates that cover both held-out tasks and in-distribution performance. Furthermore, we conduct detailed investigations on the optimal finetuning mixture composition, data pruning, as well as the toxicity, bias, and safety of our models. We open-source our instruction datasets and our model at this https://huggingface.co/CohereForAI/aya-101","Industry,Academia,Industry,Academia,Academia","Multinational,Canada,United States of America,Canada,United States of America,United States of America",SOTA improvement,"from abstract ""We introduce extensive new evaluation suites that broaden the state-of-art for multilingual eval across 99
language""",,,,Google TPU v4,128.0,,,,43077.3425083266,mT5-XXL,1.22683392e+21,"13B parameters, batch size = 256, sequence length = 1024 (for both input and output), 30K updates
- aproximation 6ND = 6 * 13B * 2 * 1024 * 30K * 256= 1226833920000000000000 = 1.22683392e+21
""We finetune mT5 models using the Adafactor optimizer [Shazeer & Stern, 2018] with a learning rate of 3 × 10−4 and a batch size of 256. We find that using a smaller learning rate compared to 1 × 10−3 leads to a better downstream performance, which is potentially due to the diverse nature of our IFT mixture. Both input and target sequence length are set to 1024.""
""We train all the models for 30,000 update steps with data packing enabled.16 This results in a training budget of 25M samples. """,,,Open weights (unrestricted),Unreleased,,Apache 2.0,,
Qwen1.5-72B,Alibaba,2024-02-04,Language,"Chat,Language modeling/generation,Quantitative reasoning,Code generation,Translation",72000000000.0,72B,1.3e+24,"3T training tokens: https://github.com/QwenLM/Qwen2/issues/97 

6 * 72 billion * 3 trillion = ~1.3e24",Unspecified unreleased,3000000000000.0,3 trillion tokens from this response https://github.com/QwenLM/Qwen2/issues/97,Confident,https://qwenlm.github.io/blog/qwen1.5/,Introducing Qwen1.5,,Qwen Team,"In recent months, our focus has been on developing a “good” model while optimizing the developer experience. As we progress towards Qwen1.5, the next iteration in our Qwen series, this update arrives just before the Chinese New Year. With Qwen1.5, we are open-sourcing base and chat models across six sizes: 0.5B, 1.8B, 4B, 7B, 14B, and 72B. In line with tradition, we’re also providing quantized models, including Int4 and Int8 GPTQ models, as well as AWQ and GGUF quantized models. To enhance the developer experience, we’ve merged Qwen1.5’s code into Hugging Face transformers, making it accessible with transformers>=4.37.0 without needing trust_remote_code.",Industry,China,SOTA improvement,"#1 in C-Eval (84.1, better than Qwen-72B. https://qwenlm.github.io/blog/qwen1.5/, https://cevalbenchmark.com/static/leaderboard.html)",,,,,,,,,,,,,,,Open weights (restricted use),Unreleased,,"restriction on >100m monthly users:

https://huggingface.co/Qwen/Qwen1.5-72B/blob/main/LICENSE",,
Qwen-VL-Max,Alibaba,2024-01-25,"Multimodal,Language,Vision","Chat,Image captioning,Face recognition,Visual question answering",7000000000.0,"Not stated. Qwen-VL (less capable, presumably smaller version) is 9.6B

Upd: 7B parameters mentioned here
https://github.com/QwenLM/Qwen-VL#qwen-vl-plus",,,Unspecified unreleased,,,Confident,https://qwenlm.github.io/blog/qwen-vl/,Introducing Qwen-VL,,,"Along with the rapid development of our large language model Qwen, we leveraged Qwen’s capabilities and unified multimodal pretraining to address the limitations of multimodal models in generalization, and we opensourced multimodal model Qwen-VL in Sep. 2023. Recently, the Qwen-VL series has undergone a significant upgrade with the launch of two enhanced versions, Qwen-VL-Plus and Qwen-VL-Max. The key technical advancements in these versions include:

Substantially boost in image-related reasoning capabilities;
Considerable enhancement in recognizing, extracting, and analyzing details within images and texts contained therein;
Support for high-definition images with resolutions above one million pixels and images of various aspect ratios.",Industry,China,SOTA improvement,"""Notably, Qwen-VL-Max outperforms both GPT-4V from OpenAI and Gemini from Google in tasks on Chinese question answering and Chinese text comprehension""",,,,,,,,,,,,,,,API access,Unreleased,,https://help.aliyun.com/zh/dashscope/developer-reference/tongyi-qianwen-vl-plus-api,,
AlphaGeometry,"Google DeepMind,New York University (NYU)",2024-01-17,Mathematics,"Quantitative reasoning,Geometry",151000000.0,"""Overall, the transformer has 151 million parameters, excluding embedding layers at its input and output heads.""",,"Training details. Don't think there's enough info for a FLOP estimate.

""Our customized tokenizer is trained with ‘word’ mode using
SentencePiece36 and has a vocabulary size of 757. We limit the maximum context length to 1,024 tokens and use T5-style relative position embedding37. Sequence packing38,39 is also used because more
than 90% of our sequences are under 200 in length. During training, a
dropout40 rate of 5% is applied pre-attention and post-dense. A 4 × 4 slice of TPUv3 (ref. 41) is used as its hardware accelerator. For pretraining, we train the transformer with a batch size of 16 per core
and a cosine learning-rate schedule that decays from 0.01 to 0.001
in 10,000,000 steps. For fine-tuning, we maintain the final learning rate of 0.001 for another 1,000,000 steps""",,,"100m examples of theorem-proofs

""By using existing symbolic engines on a diverse set of random theorem premises, we extracted 100 million synthetic theorems and their
proofs, many with more than 200 proof steps, four times longer than
the average proof length of olympiad theorems.""",Confident,https://www.nature.com/articles/s41586-023-06747-5,Solving olympiad geometry without human demonstrations,186.0,"Trieu H. Trinh, Yuhuai Wu, Quoc V. Le, He He, Thang Luong","Proving mathematical theorems at the olympiad level represents a notable milestone in human-level automated reasoning1,2,3,4, owing to their reputed difficulty among the world’s best talents in pre-university mathematics. Current machine-learning approaches, however, are not applicable to most mathematical domains owing to the high cost of translating human proofs into machine-verifiable format. The problem is even worse for geometry because of its unique translation challenges1,5, resulting in severe scarcity of training data. We propose AlphaGeometry, a theorem prover for Euclidean plane geometry that sidesteps the need for human demonstrations by synthesizing millions of theorems and proofs across different levels of complexity. AlphaGeometry is a neuro-symbolic system that uses a neural language model, trained from scratch on our large-scale synthetic data, to guide a symbolic deduction engine through infinite branching points in challenging problems. On a test set of 30 latest olympiad-level problems, AlphaGeometry solves 25, outperforming the previous best method that only solves ten problems and approaching the performance of an average International Mathematical Olympiad (IMO) gold medallist. Notably, AlphaGeometry produces human-readable proofs, solves all geometry problems in the IMO 2000 and 2015 under human expert evaluation and discovers a generalized version of a translated IMO theorem in 2004.","Industry,Academia","United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France,United States of America",SOTA improvement,"""On a test set of 30 latest olympiad-level problems, AlphaGeometry solves 25, outperforming the previous best method that only solves ten problems and approaching the performance of an average International Mathematical Olympiad (IMO) gold medallist.""",,,,Google TPU v3,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"Apache 2.0: https://github.com/google-deepmind/alphageometry 

Data is synthetic so can be reproduced using open code",,
Palmyra X 003,Writer,2024-01-01,Language,Language modeling/generation,72000000000.0,,,,,,,,https://writer.com/llms/palmyra-x-003/,Palmyra X 003 Instruct,,Writer,"Palmyra X 003, is a top-performing instruct model, built specifically for structured text completion rather than conversational use. Available in AI Studio no-code apps, the Writer Framework, and via API, it delivers precise, contextually accurate responses to instructions across diverse workflows. Ranked #3 on HELM at release, Palmyra X 003 remains a powerful option for enterprises needing reliable, instruct-focused AI.",Industry,United States of America,SOTA improvement,"""Palmyra X 003 launched as the #3 model on Stanford’s HELM benchmark and has since claimed the top spot in translation accuracy.""",,,,,,,,,,,,,,,API access,Unreleased,,,,
Kimi Explorer,Moonshot,2024-01-01,Language,Language modeling/generation,,,,,,,,Unknown,https://www.53ai.com/news/LargeLanguageModel/2024101137012.html,,,,,Industry,China,SOTA improvement,"Highest score at SuperCLUE benchmark for ""AISearch"" in term of ""Basic Capabilities https://www.superclueai.com/",,,,,,,,,,,,,,,Hosted access (no API),Unreleased,,,,
CoRe,Tsinghua University,2023-12-29,"Mathematics,Language","Quantitative reasoning,Language modeling/generation",12400000000.0,"""Since the default setting consists of two GPT-J (6B) and a DeBERTa-large (0.4B), we note our backbone as “GPT-J 12B”, which implies around 12.4 billion parameters in total. """,,,"GSM8K,ASDiv",,,Speculative,https://arxiv.org/abs/2210.16257,Solving Math Word Problems via Cooperative Reasoning induced Language Models,51.0,"Xinyu Zhu, Junjie Wang, Lin Zhang, Yuxiang Zhang, Ruyi Gan, Jiaxing Zhang, Yujiu Yang","Large-scale pre-trained language models (PLMs) bring new opportunities to challenging problems, especially those that need high-level intelligence, such as the math word problem (MWPs). However, directly applying existing PLMs to MWPs can fail as the generation process lacks sufficient supervision and thus lacks fast adaptivity as humans. We notice that human reasoning has a dual reasoning framework that consists of an immediate reaction system (system 1) and a delicate reasoning system (system 2), where the entire reasoning is determined by their interaction. This inspires us to develop a cooperative reasoning-induced PLM for solving MWPs, called Cooperative Reasoning (CoRe), resulting in a human-like reasoning architecture with system 1 as the generator and system 2 as the verifier. In our approach, the generator is responsible for generating reasoning paths, and the verifiers are used to supervise the evaluation in order to obtain reliable feedback for the generator. We evaluate our CoRe framework on several mathematical reasoning datasets and achieve decent improvement over state-of-the-art methods, up to 9.6% increase over best baselines.",Academia,China,SOTA improvement,"We evaluate our CoRe framework on several mathematical reasoning datasets and achieve decent improvement over state-of-the-art methods, up to 9.6% increase over best baselines.",,,,NVIDIA A100 SXM4 40 GB,,,,,,GPT-J-6B,,,,,Unreleased,Open (non-commercial),Open access (non-commercial),"no clear license
https://github.com/TianHongZXY/CoRe",,
nekomata-14b,rinna,2023-12-21,Language,Language generation,14200000000.0,Source: https://huggingface.co/rinna/nekomata-14b,2.5562e+23,"Begins from Qwen-14B (2.5e23 FLOP). They continue pretraining on a mix of Japanese and English text for 66B tokens.
(assuming 1 epoch, and using the C=6ND approximation)
= # of active parameters / forward pass * # of tokens * 6 FLOPs / token
~= 14.2e9 active parameters * 66e9 tokens * 6 FLOPs / token
~= 5623.2e18 FLOPs
~= 5.62e21 FLOPs

In total, 2.5562e23","Japanese CC-100,Japanese C4,The Pile,Wikipedia",66000000000.0,"The 66B tokens on which the model was pre-trained came from a mixture of Japanese and English datasets. The authors didn’t state the Japanese-to-English ratio of these tokens, so I decided to estimate the maximum size of the dataset. Since the model is a predictive language model, the dataset size is measured in number of words (https://docs.google.com/document/d/1XWLyMzcVfDv4eFQX3yPgM8MZ3_Q1phtIFz9GKv4_KaM/edit?tab=t.0#heading=h.or67a8q9faep).

According to the source cited above, for text generation models, English has 0.75 words/token and Japanese has 1 word/token. Thus, the dataset attains maximum size when it contains only Japanese text. I don’t think this assumption is unreasonable because the model is a Japanese language model. To that end,
Maximum dataset size
~= 66e9 tokens * 1 Japanese word / token
= 6.6e10 words",Confident,https://arxiv.org/abs/2404.01657,rinna/nekomata-14b,17.0,"Tianyu Zhao, Akio Kaga, Kei Sawada","We conduct continual pre-training of qwen-14b on 66B tokens from a mixture of Japanese and English datasets. The continual pre-training significantly improves the model's performance on Japanese tasks. It also enjoys the following great features provided by the original Qwen model.

* The inclusive Qwen vocabulary (vocab size > 150k) enables the model to processs Japanese texts much more efficiently than the previously released youri series.
* The model supports a maximum sequence length of 8192.

The name nekomata comes from the Japanese word 猫又/ねこまた/Nekomata, which is a kind of Japanese mythical creature (妖怪/ようかい/Youkai).",Industry,Japan,SOTA improvement,"Nekomata-14b was released on December 21, 2023. According to rinna, on that date, the model was the best-performing one on the JSQuAD (2-shot) dataset, with an F1 score of 94.21, when evaluated using template v0.2 of Stability-AI/lm-evaluation-harness. When evaluated using template v0.3 on that same date, nekomata-14b was the best-performing model on the JCommonsenseQA (3-shot) dataset (with an accuracy of 92.23%), the MARC-ja (0-shot) dataset (with a balanced accuracy of 92.31%), and the jaqket-2 (1-shot) dataset (with an F1 score of 89.34). 

While the JSQuAD dataset alone is not a benchmark, it is part of the JGLUE benchmark. This benchmark should be recognized since it was introduced in a paper published by the LREC, which has 105 citations as of April 9, 2025 (source: https://aclanthology.org/2022.lrec-1.317/). I think nekomata-14b’s performance on the JSQuAD dataset suffices to show that it is state of the art. I decided to use the evaluation with template v0.2 to determine notability because nekomata-14b was compared against dozens of other models here, unlike in the evaluation with template v0.3, where it was compared to only several models by Qwen and rinna themselves.",,168.0,The pre-training job was completed within a timeframe of approximately 7 days (source: https://huggingface.co/rinna/nekomata-14b).,Amazon Trainium1,256.0,0.171,,,,Qwen-14B,,,,,Open weights (restricted use),Unreleased,,"Tongyi Qianwen license: requires separate license if >100M MAUs
https://huggingface.co/rinna/nekomata-14b",BF16,
Gemini Nano-2,Google DeepMind,2023-12-19,"Multimodal,Language,Vision,Audio","Chat,Image captioning,Speech recognition",3250000000.0,3.25B,,"More tokens than Chinchilla-optimal:

""The number of tokens used to train the largest models were determined following the approach in Hoffmann et al. (2022). The smaller models are trained for significantly more tokens to improve performance for a given inference budget, similar to the approach advocated in Touvron et al. (2023a)""

Chinchilla was 1.4T tokens for 70B params, so Chinchilla-optimal for 3.25B params would be ~1.4T/20 = 70B tokens.

So compute was significantly greater than 3.25B * 70B * 6, which is 1.4e21. 

Touvron et al. is the Llama 1 paper, in which a 6.7B model is trained for 1T tokens. Using the same ratio, a 3.25B model would be trained on ~500B tokens. 3.25 * 500B * 6 = 9.75e21. No guarantee that the exact ratio for Nano is close to Llama's, of course.",Unspecified unreleased,,,Confident,https://arxiv.org/abs/2312.11805,Gemini: A Family of Highly Capable Multimodal Models,633.0,Gemini Team,"This report introduces a new family of multimodal models, Gemini, that exhibit remarkable capabilities across image, audio, video, and text understanding. The Gemini family consists of Ultra, Pro, and Nano sizes, suitable for applications ranging from complex reasoning tasks to on-device memory-constrained use-cases. Evaluation on a broad range of benchmarks shows that our most-capable Gemini Ultra model advances the state of the art in 30 of 32 of these benchmarks - notably being the first model to achieve human-expert performance on the well-studied exam benchmark MMLU, and improving the state of the art in every one of the 20 multimodal benchmarks we examined. We believe that the new capabilities of Gemini models in cross-modal reasoning and language understanding will enable a wide variety of use cases and we discuss our approach toward deploying them responsibly to users.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",Significant use,"Significant use; deployed on Android phones such as the Pixel: https://store.google.com/intl/en/ideas/articles/pixel-feature-drop-december-2023/

""Despite their size, they show exceptionally strong performance on factuality,
i.e. retrieval-related tasks, and significant performance on reasoning, STEM, coding, multimodal and multilingual tasks""",,,,Google TPU v5e,,,,,,,,,,,Unreleased,Unreleased,,"May be API access in the future. There is an Android API but it ""is under a closed early access preview program at this time"": https://ai.google.dev/gemini-api/docs/get-started/android_aicore",,
Gemini Nano-1,Google DeepMind,2023-12-19,"Multimodal,Language,Vision,Audio","Chat,Image captioning,Speech recognition",1800000000.0,1.8B,,"More tokens than Chinchilla-optimal:

""The number of tokens used to train the largest models were determined following the approach in Hoffmann et al. (2022). The smaller models are trained for significantly more tokens to improve performance for a given inference budget, similar to the approach advocated in Touvron et al. (2023a)""",Unspecified unreleased,,,Confident,https://arxiv.org/abs/2312.11805,Gemini: A Family of Highly Capable Multimodal Models,633.0,Gemini Team,"This report introduces a new family of multimodal models, Gemini, that exhibit remarkable capabilities across image, audio, video, and text understanding. The Gemini family consists of Ultra, Pro, and Nano sizes, suitable for applications ranging from complex reasoning tasks to on-device memory-constrained use-cases. Evaluation on a broad range of benchmarks shows that our most-capable Gemini Ultra model advances the state of the art in 30 of 32 of these benchmarks - notably being the first model to achieve human-expert performance on the well-studied exam benchmark MMLU, and improving the state of the art in every one of the 20 multimodal benchmarks we examined. We believe that the new capabilities of Gemini models in cross-modal reasoning and language understanding will enable a wide variety of use cases and we discuss our approach toward deploying them responsibly to users.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",Significant use,"Significant use; deployed on Android phones such as the Pixel: https://store.google.com/intl/en/ideas/articles/pixel-feature-drop-december-2023/

""Despite their size, they show exceptionally strong performance on factuality,
i.e. retrieval-related tasks, and significant performance on reasoning, STEM, coding, multimodal and multilingual tasks""",,,,Google TPU v5e,,,,,,,,,,,API access,Unreleased,,https://developer.android.com/ai/gemini-nano,,
FunSearch,Google DeepMind,2023-12-14,"Language,Search",Code generation,15000000000.0,"From the section called ""Pretrained LLM"": ""We use Codey, an LLM built on top of the PaLM2 model family... Because FunSearch relies on sampling from an LLM extensively, an important performance-defining tradeoff is between the quality of the samples and the inference speed of the LLM. In practice, we have chosen to work with a fast-inference model (rather than slower-inference, higher-quality)""

Unclear which PaLM2 model was used (of Gecko, Otter, Bison, and Unicorn); above quote indicates it was perhaps Otter or Bison, but not Unicorn. Exact parameter counts are not publicly disclosed for any of these models. In comparisons where FunSearch uses StarCoder-15B, Codey is an improvement but not obviously of an entirely different model class.

I report the 15B parameters from StarCoder-15B, used as an open-source comparison",3.87e+23,"Appendix A.5: ""Finding the full-sized symmetric admissible set I(15, 10) required the generation and analysis of approximately two million programs... To reproduce admissible set experiments done above (generating 2 million samples) one would have to use 15 instances of StarCoder-15B running on A100 40 GB GPU each and 5 CPU servers (each running 32 evaluators in parallel) for two days. We estimate that when running on Google Cloud, the price of an experiment is around $800 – $1400, and the energy usage around 250 – 500 kWh; i.e., 0.5% of the energy used for training StarCoder""

15 GPUs * 7.80E+13 FLOP/GPU-sec * 2 days * 24 hours/day * 3600 sec/hour = 2.02e20 FLOP for the GPU servers

We should also add the compute used to train the PaLM2 variant used as the base LLM. Since we don't have any details about this model, I use the compute from StarCoder-15B (used as the open source comparison point): 3.87e+23 FLOP

Unclear how to evaluate the compute from the CPU servers implementing the evolutionary algorithm, but this is very likely dwarfed by the pre-training compute for the LLM.",,0.0,"""The experiments carried out in this paper do not require any data corpus other than the publicly available OR-Library bin packing benchmarks""",Speculative,"https://www.nature.com/articles/s41586-023-06924-6
https://deepmind.google/discover/blog/funsearch-making-new-discoveries-in-mathematical-sciences-using-large-language-models/",Mathematical discoveries from program search with large language models,170.0,"Bernardino Romera-Paredes, Mohammadamin Barekatain, Alexander Novikov, Matej Balog, M. Pawan Kumar, Emilien Dupont, Francisco J. R. Ruiz, Jordan S. Ellenberg, Pengming Wang, Omar Fawzi, Pushmeet Kohli, Alhussein Fawzi ","Large language models (LLMs) have demonstrated tremendous capabilities in solving complex tasks, from quantitative reasoning to understanding natural language. However, LLMs sometimes suffer from confabulations (or hallucinations), which can result in them making plausible but incorrect statements1,2. This hinders the use of current large models in scientific discovery. Here we introduce FunSearch (short for searching in the function space), an evolutionary procedure based on pairing a pretrained LLM with a systematic evaluator. We demonstrate the effectiveness of this approach to surpass the best-known results in important problems, pushing the boundary of existing LLM-based approaches3. Applying FunSearch to a central problem in extremal combinatorics—the cap set problem—we discover new constructions of large cap sets going beyond the best-known ones, both in finite dimensional and asymptotic cases. This shows that it is possible to make discoveries for established open problems using LLMs. We showcase the generality of FunSearch by applying it to an algorithmic problem, online bin packing, finding new heuristics that improve on widely used baselines. In contrast to most computer search approaches, FunSearch searches for programs that describe how to solve a problem, rather than what the solution is. Beyond being an effective and scalable strategy, discovered programs tend to be more interpretable than raw solutions, enabling feedback loops between domain experts and FunSearch, and the deployment of such programs in real-world applications.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France","SOTA improvement,Historical significance",Improved SOTA for the cap set problem. Can plausibly claim the first instance of a LLM system making a genuine and novel scientific contribution.,,48.0,"Appendix A.5: ""To reproduce admissible set experiments done above (generating 2 million samples) one would have to use 15 instances of StarCoder-15B running on A100 40 GB GPU each and 5 CPU servers (each running 32 evaluators in parallel) for two days""",,,,,"Appendix A.5: ""We estimate that when running on Google Cloud, the price of an experiment is around $800 – $1400, and the energy usage around 250 – 500 kWh; i.e., 0.5% of the energy used for training StarCoder"" (in reference to a replication done using StarCoder-15B)

Estimate (800+1400)/2 = $1100 at time of publication. CPI conversion to 2020 dollars: $929",,PaLM 2,0.0,No finetuning,,,Open weights (unrestricted),Unreleased,,"Code to run FunSearch with an LLM of your choice is open source under Apache 2.0 (software) and CC-BY (all else). However, the actual LLM used in the main experiments is unknown and may or may not be one of the Codey models available via API access.

(in other words code is available for the search tool but not for the model): https://github.com/google-deepmind/funsearch ",,
CogAgent,"Tsinghua University,Zhipu AI",2023-12-14,"Vision,Language","Instruction interpretation,Visual question answering",18000000000.0,,6.707e+22,"States 12.6 TFLOP per 1120x1120 image forward pass. Trained 60k steps with 4608 batch size, and then 10k with 1024 batch size.
12.6 TFLOP * (60000*4608 + 10000*1024) = 3.76e21

Uses pretrained CogVLM as base (6.331e22 FLOP), along with EVA2-CLIP-L. EVA2-CLIP-L's FLOPs are potentially estimable, but based on details about EVA2-CLIP-g/14 (a larger model), they likely contribute negligibly to CogAgent.

Sum: 6.707e22","COYO-700M,LAION-2B,Common Crawl,Unspecified unreleased",287000000.0,,Likely,https://arxiv.org/abs/2312.08914,CogAgent: A Visual Language Model for GUI Agents,150.0,"Wenyi Hong, Weihan Wang, Qingsong Lv, Jiazheng Xu, Wenmeng Yu, Junhui Ji, Yan Wang, Zihan Wang, Yuxuan Zhang, Juanzi Li, Bin Xu, Yuxiao Dong, Ming Ding, Jie Tang","People are spending an enormous amount of time on digital devices through graphical user interfaces (GUIs), e.g., computer or smartphone screens. Large language models (LLMs) such as ChatGPT can assist people in tasks like writing emails, but struggle to understand and interact with GUIs, thus limiting their potential to increase automation levels. In this paper, we introduce CogAgent, an 18-billion-parameter visual language model (VLM) specializing in GUI understanding and navigation. By utilizing both low-resolution and high-resolution image encoders, CogAgent supports input at a resolution of 1120*1120, enabling it to recognize tiny page elements and text. As a generalist visual language model, CogAgent achieves the state of the art on five text-rich and four general VQA benchmarks, including VQAv2, OK-VQA, Text-VQA, ST-VQA, ChartQA, infoVQA, DocVQA, MM-Vet, and POPE. CogAgent, using only screenshots as input, outperforms LLM-based methods that consume extracted HTML text on both PC and Android GUI navigation tasks -- Mind2Web and AITW, advancing the state of the art. The model and codes are available at this https URL .","Academia,Industry","China,China",SOTA improvement,See Table 1,,,,,,,,,,CogVLM-17B,,,,,Open weights (restricted use),Open source,Open source,"Code is Apache License 2.0; model is under a more restrictive custom licence which still allows commercial usage but which limits uses undermining Chinese national security and unity.

finetune code (this model is a finetune): https://github.com/THUDM/CogVLM/blob/main/finetune_demo/finetune_cogagent_demo.py ",BF16,
VILA-13B,"NVIDIA,Massachusetts Institute of Technology (MIT)",2023-12-12,Multimodal,"Chat,Visual question answering,Image captioning,Language modeling/generation",13350839296.0,"https://huggingface.co/Efficient-Large-Model/VILA-13b/tree/main?show_file_info=model.safetensors.index.json
",2.3003136e+21,"Appendix B: ""We perform training on 16 A100 GPU nodes, each node has 8 GPUs. The training hours for each stage of the 7B model are: projector initialization: 4 hours; visual language pre-training: 30 hours; visual instruction-tuning: 6 hours. The training corresponds to a total of 5.1k GPU hours. Most of the computation is spent on the pre-training stage.""
16 nodes * 8 GPU/node = 128 GPU
128 GPU * (4 h + 30 h + 6 h) = 5120 GPU*h
8 GPU/node -> A100 SMX4

https://huggingface.co/Efficient-Large-Model/VILA-13b/tree/main?show_file_info=model.safetensors.index.json
-> BF16

Assume 80 GB variant (A100 SMX4 80 GB)
pk-BF16: 312000000000000 FLOP/s = 3.12e14 FLOP/s

Assume 0.4 utilization (NVIDIA in-house)

0.4 * 3.12e14 FLOP/s/GPU * (3600 s / 1 h) * 5120 GPU*h = 2.3003136e21 FLOP
",,32430000000.0,"Table 2
MMC4: 25M images with 576+122.5 tokens each
COYO: 25M images with 576+22.7 tokens each
25M*(576+122.5+576+22.7)=32430000000",Confident,"https://arxiv.org/abs/2312.07533
https://huggingface.co/Efficient-Large-Model/VILA-13b",VILA: On Pre-training for Visual Language Models,384.0,"Ji Lin, Hongxu Yin, Wei Ping, Yao Lu, Pavlo Molchanov, Andrew Tao, Huizi Mao, Jan Kautz, Mohammad Shoeybi, Song Han","Visual language models (VLMs) rapidly progressed with the recent success of large language models. There have been growing efforts on visual instruction tuning to extend the LLM with visual inputs, but lacks an in-depth study of the visual language pre-training process, where the model learns to perform joint modeling on both modalities. In this work, we examine the design options for VLM pre-training by augmenting LLM towards VLM through step-by-step controllable comparisons. We introduce three main findings: (1) freezing LLMs during pre-training can achieve decent zero-shot performance, but lack in-context learning capability, which requires unfreezing the LLM; (2) interleaved pre-training data is beneficial whereas image-text pairs alone are not optimal; (3) re-blending text-only instruction data to image-text data during instruction fine-tuning not only remedies the degradation of text-only tasks, but also boosts VLM task accuracy. With an enhanced pre-training recipe we build VILA, a Visual Language model family that consistently outperforms the state-of-the-art models, e.g., LLaVA-1.5, across main benchmarks without bells and whistles. Multi-modal pre-training also helps unveil appealing properties of VILA, including multi-image reasoning, enhanced in-context learning, and better world knowledge.","Industry,Academia","United States of America,United States of America",SOTA improvement,"Table5. Comparison with state-of-the-art methods on 12 visual-language benchmarks. Our models consistently outperform LLaVA-1.5 under
a head-to-head comparison, using the same prompts and the same base LLM (Vicuna-1.5 is based on Llama-2), showing the effectiveness of
visual-language pre-training",,,,NVIDIA A100 SXM4 80 GB,128.0,,,,101498.495336141,"Llama 2-13B,CLIP (ViT L/14@336px)",,,,,Open weights (non-commercial),Open source,Open source,"https://huggingface.co/Efficient-Large-Model/VILA-13b

code:
Apache 2.0

weights:
CC-BY-NC-SA-4.0",BF16,
Mixtral 8x7B,Mistral AI,2023-12-11,Language,"Language modeling/generation,Question answering,Quantitative reasoning,Translation",46700000000.0,"46.7B *sparse* params. 12.9B params used on average:

""Concretely, Mixtral has 46.7B total parameters but only uses 12.9B parameters per token. It, therefore, processes input and generates output at the same speed and for the same cost as a 12.9B model.""",7.74e+23,"Assuming the model was trained on ~1-10 trillions of tokens (same OOM as the models from the comparison in Figure 1. Llama 2 was trained on 2T tokens) + Mistral Small 3 was trained on 8T of tokens, we can estimate training compute with ""speculative"" confidence:

6 FLOP / token / parameter * 12.9 * 10^9 active parameters * 10*10^12 tokens [speculatively] = 7.74e+23 FLOP",Unspecified unreleased,,,Speculative,"https://mistral.ai/news/mixtral-of-experts/, https://arxiv.org/abs/2401.04088",Mixtral of experts: A high quality Sparse Mixture-of-Experts.,,"Albert Jiang, Alexandre Sablayrolles, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, Lélio Renard Lavaud, Louis Ternon, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Teven Le Scao, Théophile Gervet, Thibaut Lavril, Thomas Wang, Timothée Lacroix, William El Sayed.","Today, the team is proud to release Mixtral 8x7B, a high-quality sparse mixture of experts model (SMoE) with open weights. Licensed under Apache 2.0. Mixtral outperforms Llama 2 70B on most benchmarks with 6x faster inference. It is the strongest open-weight model with a permissive license and the best model overall regarding cost/performance trade-offs. In particular, it matches or outperforms GPT3.5 on most standard benchmarks.",Industry,France,Significant use,"Frequently downloaded: https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1

Probably the best OS model by a big margin at time of release, e.g. #7 on Chatbot Arena, above Gemini Pro and Claude 2.1: https://huggingface.co/spaces/lmsys/chatbot-arena-leaderboard
",,,,,,,,,,,,,,,Open weights (unrestricted),Unreleased,,Apache 2.0,,
SeamlessM4T,"Facebook,INRIA,University of California (UC) Berkeley",2023-12-08,"Speech,Language","Translation,Speech synthesis,Speech recognition",2300000000.0,2.3B,,,,,~5M hours of audio data (figure 2),Confident,"https://arxiv.org/abs/2312.05187, https://huggingface.co/facebook/seamless-m4t-v2-large",Seamless: Multilingual Expressive and Streaming Speech Translation,93.0,"Loïc Barrault, Yu-An Chung, Mariano Coria Meglioli, David Dale, Ning Dong, Mark Duppenthaler, Paul-Ambroise Duquenne, Brian Ellis, Hady Elsahar, Justin Haaheim, John Hoffman, Min-Jae Hwang, Hirofumi Inaguma, Christopher Klaiber, Ilia Kulikov, Pengwei Li, Daniel Licht, Jean Maillard, Ruslan Mavlyutov, Alice Rakotoarison, Kaushik Ram Sadagopan, Abinesh Ramakrishnan, Tuan Tran, Guillaume Wenzek, Yilin Yang, Ethan Ye, Ivan Evtimov, Pierre Fernandez, Cynthia Gao, Prangthip Hansanti, Elahe Kalbassi, Amanda Kallet, Artyom Kozhevnikov, Gabriel Mejia Gonzalez, Robin San Roman, Christophe Touret, Corinne Wong, Carleigh Wood, Bokai Yu, Pierre Andrews, Can Balioglu, Peng-Jen Chen, Marta R. Costa-jussà, Maha Elbayad, Hongyu Gong, Francisco Guzmán, Kevin Heffernan, Somya Jain, Justine Kao, Ann Lee, Xutai Ma, Alex Mourachko, Benjamin Peloquin, Juan Pino, Sravya Popuri, Christophe Ropers, Safiyyah Saleem, Holger Schwenk, Anna Sun, Paden Tomasello, Changhan Wang, Jeff Wang, Skyler Wang, Mary Williamson","Large-scale automatic speech translation systems today lack key features that help machine-mediated communication feel seamless when compared to human-to-human dialogue. In this work, we introduce a family of models that enable end-to-end expressive and multilingual translations in a streaming fashion. First, we contribute an improved version of the massively multilingual and multimodal SeamlessM4T model-SeamlessM4T v2. This newer model, incorporating an updated UnitY2 framework, was trained on more low-resource language data. SeamlessM4T v2 provides the foundation on which our next two models are initiated. SeamlessExpressive enables translation that preserves vocal styles and prosody. Compared to previous efforts in expressive speech research, our work addresses certain underexplored aspects of prosody, such as speech rate and pauses, while also preserving the style of one's voice. As for SeamlessStreaming, our model leverages the Efficient Monotonic Multihead Attention mechanism to generate low-latency target translations without waiting for complete source utterances. As the first of its kind, SeamlessStreaming enables simultaneous speech-to-speech/text translation for multiple source and target languages. To ensure that our models can be used safely and responsibly, we implemented the first known red-teaming effort for multimodal machine translation, a system for the detection and mitigation of added toxicity, a systematic evaluation of gender bias, and an inaudible localized watermarking mechanism designed to dampen the impact of deepfakes. Consequently, we bring major components from SeamlessExpressive and SeamlessStreaming together to form Seamless, the first publicly available system that unlocks expressive cross-lingual communication in real-time. The contributions to this work are publicly released and accessible at this https URL","Industry,Academia,Academia","United States of America,France,United States of America",SOTA improvement,"""As an improved version of SeamlessM4T,
SeamlessM4T v2 delivers state-of-the-art semantic accuracy across different speech and text translation tasks
while supporting nearly 100 languages as input speech or text""",,,,NVIDIA V100,,,,,,W2v-BERT,,expanded from 1M hours data to 4.5M hours,,,Open weights (unrestricted),Open source,Open source,"looks like code is MIT licensed, model is CC 4.0?
https://github.com/facebookresearch/seamless_communication?tab=readme-ov-file
train code: https://github.com/facebookresearch/seamless_communication/blob/main/src/seamless_communication/cli/m4t/finetune/trainer.py",FP16,
Llama Guard,Meta AI,2023-12-07,Language,Chat,7000000000.0,7B,1.6e+23,"1.7e17 finetune compute, plus Llama 2-13B pretrain compute (1.6e+23)",,4096000.0,"14k prompt-response pairs. Based on training details it's trained on ~4M tokens, which is stated to be ~1 epoch:
2 * 4096 * 500 = 4,096,000
(batch size) * (sequence length) * (steps)",Confident,https://arxiv.org/abs/2312.06674,Llama Guard: LLM-based Input-Output Safeguard for Human-AI Conversations,201.0,"Hakan Inan, Kartikeya Upasani, Jianfeng Chi, Rashi Rungta, Krithika Iyer, Yuning Mao, Davide Testuggine, Madian Khabsa","We introduce Llama Guard, an LLM-based input-output safeguard model geared towards Human-AI conversation use cases. Our model incorporates a safety risk taxonomy, a valuable tool for categorizing a specific set of safety risks found in LLM prompts (i.e., prompt classification). This taxonomy is also instrumental in classifying the responses generated by LLMs to these prompts, a process we refer to as response classification. For the purpose of both prompt and response classification, we have meticulously gathered a dataset of high quality. Llama Guard, a Llama2-7b model that is instruction-tuned on our collected dataset, albeit low in volume, demonstrates strong performance on existing benchmarks such as the OpenAI Moderation Evaluation dataset and ToxicChat, where its performance matches or exceeds that of currently available content moderation tools. Llama Guard functions as a language model, carrying out multi-class classification and generating binary decision scores. Furthermore, the instruction fine-tuning of Llama Guard allows for the customization of tasks and the adaptation of output formats. This feature enhances the model's capabilities, such as enabling the adjustment of taxonomy categories to align with specific use cases, and facilitating zero-shot or few-shot prompting with diverse taxonomies at the input. We are making Llama Guard model weights available and we encourage researchers to further develop and adapt them to meet the evolving needs of the community for AI safety.",Industry,United States of America,SOTA improvement,"""Llama Guard, a Llama2-7b model that is instruction-tuned on our collected dataset, albeit low in volume, demonstrates strong performance on existing benchmarks such as the OpenAI Moderation Evaluation dataset and oxicChat, where its performance matches or exceeds that of currently available content moderation tools. """,1.0,,,NVIDIA A100 SXM4 80 GB,,,,,,Llama 2-7B,1.7e+17,"""We train on a single machine with 8xA100 80GB GPUs using a batch size of 2, with sequence length of 4096, using model parallelism of 1 and a learning rate of 2 × 10−6. We train for 500 steps, which corresponds to ∼1 epoch over our training set.""

6 * 2*4096*500 * 7 billion = 1.7e17",,,Open weights (restricted use),Unreleased,,"Llama 2 license
https://github.com/facebookresearch/PurpleLlama/tree/main/Llama-Guard",,
Gemini 1.0 Ultra,Google DeepMind,2023-12-06,"Multimodal,Language,Vision","Language modeling,Visual question answering,Chat,Translation",,,5.0000000001e+25,"This number is an estimate based on limited evidence. In particular, we combine information about the performance of Gemini Ultra on various benchmarks compared to other models, and guesstimates about the hardware setup used for training to arrive at our estimate. Our reasoning and calculations are detailed in this Colab notebook.
https://colab.research.google.com/drive/1sfG91UfiYpEYnj_xB5YRy07T5dv-9O_c",Unspecified unreleased,,,Speculative,https://storage.googleapis.com/deepmind-media/gemini/gemini_1_report.pdf,Gemini: A Family of Highly Capable Multimodal Models,633.0,Gemini Team,"This report introduces a new family of multimodal models, Gemini, that exhibit remarkable capabilities across image, audio, video, and text understanding. The Gemini family consists of Ultra, Pro, and Nano sizes, suitable for applications ranging from complex reasoning tasks to on-device memory-constrained use-cases. Evaluation on a broad range of benchmarks shows that our most-capable Gemini Ultra model advances the state of the art in 30 of 32 of these benchmarks — notably being the first model to achieve human-expert performance on the well-studied exam benchmark MMLU, and improving the state of the art in every one of the 20 multimodal benchmarks we examined. We believe that the new capabilities of Gemini models in cross-modal reasoning and language understanding will enable a wide variety of use cases and we discuss our approach toward deploying them responsibly to users.
",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France","SOTA improvement,Training cost","""Evaluation on a broad range of benchmarks shows that our most-capable Gemini Ultra model advances the state of the art in 30 of 32 of these benchmarks — notably being the first model to achieve human-expert performance on the well-studied exam benchmark MMLU, and improving the state of the art in every one of the 20 multimodal benchmarks we examined.""",,2400.0,"Dylan Patel, author of SemiAnalysis, speculates that the training duration of Gemini may have been 100 days.",Google TPU v4,57000.0,,29827341.919963885,,19211950.056161165,,,,,,API access,Unreleased,,API access: https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models,,True
Gemini 1.0 Pro,Google DeepMind,2023-12-06,"Multimodal,Language,Vision","Language modeling,Visual question answering,Chat,Translation",,,1.830001e+24,"Training compute estimated from benchmark scores.

Our reasoning and calculations for Gemini 1 Ultra are detailed in this Colab notebook.
https://colab.research.google.com/drive/1sfG91UfiYpEYnj_xB5YRy07T5dv-9O_c

",Unspecified unreleased,,,Speculative,https://storage.googleapis.com/deepmind-media/gemini/gemini_1_report.pdf,Gemini: A Family of Highly Capable Multimodal Models,633.0,Gemini Team,"This report introduces a new family of multimodal models, Gemini, that exhibit remarkable capabilities across image, audio, video, and text understanding. The Gemini family consists of Ultra, Pro, and Nano sizes, suitable for applications ranging from complex reasoning tasks to on-device memory-constrained use-cases. Evaluation on a broad range of benchmarks shows that our most-capable Gemini Ultra model advances the state of the art in 30 of 32 of these benchmarks — notably being the first model to achieve human-expert performance on the well-studied exam benchmark MMLU, and improving the state of the art in every one of the 20 multimodal benchmarks we examined. We believe that the new capabilities of Gemini models in cross-modal reasoning and language understanding will enable a wide variety of use cases and we discuss our approach toward deploying them responsibly to users.
",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",Significant use,"Default/free model on gemini.google.com

From paper:
""Broadly, we find that the performance of Gemini Pro outperforms inference-optimized models such as GPT-3.5 and performs comparably with several of the most capable models available, and Gemini Ultra outperforms all current models. In this section, we examine some of these findings.""",,,,Google TPU v4,,,,,,,,,,,API access,Unreleased,,API access: https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models,,
Mamba-24M (SC09),"Carnegie Mellon University (CMU),Princeton University",2023-12-01,Speech,Audio generation,23400000.0,Table 4,,,SC09,305280000.0,"Section 4.4.2: ""We largely follow the autoregressive training setup and generation protocol of Goel et al. (2022)""
In which they model raw audio waveforms, such that each sample is a datapoint.

SC09 is 5.3 hours long. 5.3h * 3600 sec/h * 16k samples/sec = 305,280,000 samples

Appendix E.4.2: ""We used a learning rate of 0.002 and 200000 training steps at a batch size of 16... training went through 100 epochs""",Confident,https://arxiv.org/abs/2312.00752,Mamba: Linear-Time Sequence Modeling with Selective State Spaces,1195.0,"Albert Gu, Tri Dao","Foundation models, now powering most of the exciting applications in deep learning, are almost universally based on the Transformer architecture and its core attention module. Many subquadratic-time architectures such as linear attention, gated convolution and recurrent models, and structured state space models (SSMs) have been developed to address Transformers' computational inefficiency on long sequences, but they have not performed as well as attention on important modalities such as language. We identify that a key weakness of such models is their inability to perform content-based reasoning, and make several improvements. First, simply letting the SSM parameters be functions of the input addresses their weakness with discrete modalities, allowing the model to selectively propagate or forget information along the sequence length dimension depending on the current token. Second, even though this change prevents the use of efficient convolutions, we design a hardware-aware parallel algorithm in recurrent mode. We integrate these selective SSMs into a simplified end-to-end neural network architecture without attention or even MLP blocks (Mamba). Mamba enjoys fast inference (5× higher throughput than Transformers) and linear scaling in sequence length, and its performance improves on real data up to million-length sequences. As a general sequence model backbone, Mamba achieves state-of-the-art performance across several modalities such as language, audio, and genomics. On language modeling, our Mamba-3B model outperforms Transformers of the same size and matches Transformers twice its size, both in pretraining and downstream evaluation.","Academia,Academia","United States of America,United States of America",SOTA improvement,"""SC09 is a benchmark speech generation dataset (Donahue, McAuley, and Puckette 2019; Warden 2018), consisting
of 1-second clips sampled at 16000 Hz of the digits “zero” through “nine” with highly variable characteristics. We
largely follow the autoregressive training setup and generation protocol of Goel et al. (2022).
Table 4 shows automated metrics of the Mamba-UNet model compared to a variety of baselines from Goel et al.
(2022): WaveNet (Oord et al. 2016), SampleRNN (Mehri et al. 2017), WaveGAN (Donahue, McAuley, and Puckette
2019), DiffWave (Z. Kong et al. 2021), and SaShiMi. A small Mamba model outperforms the state-of-the-art
(and much larger) GAN- and diffusion- based models. A larger model parameter-matched to the baselines further
improves on fidelity metrics dramatically.""",100.0,,,,,,,,,,,,,,Unreleased,Unreleased,Unreleased,"no code or weights for 24M Mamaba model, but there are code and weights for other Mamba models:
https://github.com/state-spaces/mamba",,
Qwen-72B,Alibaba,2023-11-30,Language,"Chat,Code generation",72000000000.0,72B,1.3e+24,"72 billion params, 3 trillion tokens
72b * 3T * 6 = 1.3e24",,3000000000000.0,Assuming not trained for multiple epochs.,Confident,https://huggingface.co/Qwen/Qwen-72B,,,"Jinze Bai, Shuai Bai, Yunfei Chu, Zeyu Cui, Kai Dang, Xiaodong Deng, Yang Fan, Wenbin Ge, Yu Han, Fei Huang, Binyuan Hui, Luo Ji, Mei Li, Junyang Lin, Runji Lin, Dayiheng Liu, Gao Liu, Chengqiang Lu, Keming Lu, Jianxin Ma, Rui Men, Xingzhang Ren, Xuancheng Ren, Chuanqi Tan, Sinan Tan, Jianhong Tu, Peng Wang, Shijie Wang, Wei Wang, Shengguang Wu, Benfeng Xu, Jin Xu, An Yang, Hao Yang, Jian Yang, Shusheng Yang, Yang Yao, Bowen Yu, Hongyi Yuan, Zheng Yuan, Jianwei Zhang, Xingxuan Zhang, Yichang Zhang, Zhenru Zhang, Chang Zhou, Jingren Zhou, Xiaohuan Zhou, Tianhang Zhu","Qwen-72B is the 72B-parameter version of the large language model series, Qwen (abbr. Tongyi Qianwen), proposed by Alibaba Cloud. Qwen-72B is a Transformer-based large language model, which is pretrained on a large volume of data, including web texts, books, codes, etc. Additionally, based on the pretrained Qwen-72B, we release Qwen-72B-Chat, a large-model-based AI assistant, which is trained with alignment techniques.",Industry,China,SOTA improvement,"SOTA on several Chinese benchmarks, with highest average rating overall for Chinese benchmarks:

https://opencompass.org.cn/leaderboard-llm",,,,,,,,,,,,,4000000.0,"Table 1 https://arxiv.org/abs/2309.16609
(this is uncertain because this table only lists sizes up to 14B. 72B was released after the paper)",Open weights (restricted use),Unreleased,,"up to 100m active users:
https://github.com/QwenLM/Qwen/blob/main/Tongyi%20Qianwen%20LICENSE%20AGREEMENT",BF16,
PPLX-70B-Online,Perplexity,2023-11-29,Language,"Question answering,Chat,Language modeling/generation",70000000000.0,70B,,,,,,Likely,https://blog.perplexity.ai/blog/introducing-pplx-online-llms,Introducing PPLX Online LLMs ,,"Lauren Yang, Kevin Hu, Aarash Heydari, Gradey Wang, Dmitry Pervukhin, Nikhil Thota, Alexandr Yarats, Max Morozov, Denis Yarats","We’re excited to share two new PPLX models: pplx-7b-online and pplx-70b-online! Our online models are focused on delivering helpful, up-to-date, and factual responses, and are publicly available via pplx-api, making it a first-of-its-kind API. pplx-7b-online and pplx-70b-online are also accessible via Perplexity Labs, our LLM playground.",Industry,United States of America,Significant use,"Probably significant use: ""Perplexity, which has just 41 employees and is based out of a shared working space in San Francisco, has 10 million monthly active users, an impressive number for a young start-up."" However, this includes everyone who uses Perplexity's app which also uses third party models like GPT-4.

https://www.nytimes.com/2024/02/01/technology/perplexity-search-ai-google.html

",,,,,,,,,,Llama 2-70B,,"""Fine-tuning: our PPLX models have been fine-tuned to effectively use snippets to inform their responses. Using our in-house data contractors, we carefully curate high quality, diverse, and large training sets in order to achieve high performance on various axes like helpfulness, factuality, and freshness. Our models are regularly fine-tuned to continually improve performance.""",,,API access,Unreleased,,https://docs.perplexity.ai/home,,
GNoME for crystal discovery,Google DeepMind,2023-11-29,Materials science,Crystal discovery,16240000.0,"""The pretrained potential has 16.24 million parameters.""
This refers to the GNoME network, which is a ""Gaussian Network Model of Energy"" for predicting crystal potential energy of new crystals.",,"Pretraining involved 36.43M steps:
""The learning rate was decreased to a new value of 2 × 10−4 after approximately 23 million steps, to 5 × 10−5 after a further approximately 11 million steps and then trained for a final 2.43 million steps. Training was performed on four TPU v3 chips.""

""Inference on an A100 GPU on a 50-atom system takes approximately 14 ms""
3.12e14 FLOP/s * 0.014 s = 4.368e12 FLOP per 50 atom system

Batch size was 32. Multiply inference FLOPs by 3 to account for forward and backward passes during training.
32 * 4.368e12 * 36.43 million * 3 = 1.53e22

This seems implausible – on 4 TPUv3 chips this would take
(1.53e22 / (4 * 1.23e14)) / (3600 * 24) = 360 days",,69000.0,"""Initial models are trained on a snapshot of the Materials Project from 2018 of approximately 69,000 materials""",Likely,https://www.nature.com/articles/s41586-023-06735-9,Scaling deep learning for materials discovery,,"Amil Merchant, Simon Batzner, Samuel S. Schoenholz, Muratahan Aykol, Gowoon Cheon, Ekin Dogus Cubuk","Novel functional materials enable fundamental breakthroughs across technological applications from clean energy to information processing. From microchips to batteries and photovoltaics, discovery of inorganic crystals has been bottlenecked by expensive trial-and-error approaches. Concurrently, deep-learning models for language, vision and biology have showcased emergent predictive capabilities with increasing data and computation. Here we show that graph networks trained at scale can reach unprecedented levels of generalization, improving the efficiency of materials discovery by an order of magnitude. Building on 48,000 stable crystals identified in continuing studies15,16,17, improved efficiency enables the discovery of 2.2 million structures below the current convex hull, many of which escaped previous human chemical intuition. Our work represents an order-of-magnitude expansion in stable materials known to humanity. Stable discoveries that are on the final convex hull will be made available to screen for technological applications, as we demonstrate for layered materials and solid-electrolyte candidates. Of the stable structures, 736 have already been independently experimentally realized. The scale and diversity of hundreds of millions of first-principles calculations also unlock modelling capabilities for downstream applications, leading in particular to highly accurate and robust learned interatomic potentials that can be used in condensed-phase molecular-dynamics simulations and high-fidelity zero-shot prediction of ionic conductivity.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",Historical significance,Economic impacts from development of commercially and socially valuable protein designs and materials,1000.0,,,Google TPU v4,4.0,,,,1348.4172039257987,,,,,,Unreleased,Unreleased,,,,
Inflection-2,Inflection AI,2023-11-22,Language,"Language modeling,Language modeling/generation,Chat,Question answering",,,1.001e+25,"""Inflection-2 was trained on 5,000 NVIDIA H100 GPUs in fp8 mixed precision for ~10²⁵ FLOPs""

(the second 1 is there because of airtable being wonky, it's not a real sig fig)",Unspecified unreleased,,,Confident,https://inflection.ai/inflection-2,Inflection-2: The Next Step Up,,,"Today we are proud to announce that we have completed training of Inflection-2, the best model in the world for its compute class and the second most capable LLM in the world today. Our mission at Inflection is to create a personal AI for everyone. Just a few months ago, we announced Inflection-1 — a best-in-class language model that currently powers Pi. Our new model, Inflection-2, is substantially more capable than Inflection-1, demonstrating much improved factual knowledge, better stylistic control, and dramatically improved reasoning.",Industry,United States of America,"Significant use,Training cost","Inflection-2 either already powers Pi or soon will: https://inflection.ai/inflection-2

Inflection has claimed that Pi has >1m users: https://x.com/inflectionAI/status/1699100179390210091?s=20",,,,NVIDIA H100 SXM5 80GB,5000.0,,12991551.78,,6941464.657305156,,,,,,Hosted access (no API),Unreleased,,"via Pi, no API",FP8,True
Claude 2.1,Anthropic,2023-11-21,Language,"Language modeling,Chat,Language modeling/generation,Question answering",,,,,Unspecified unreleased,,,Unknown,https://www.anthropic.com/index/claude-2-1,Introducing Claude 2.1,,,"Our latest model, Claude 2.1, is now available over API in our Console and is powering our claude.ai chat experience. Claude 2.1 delivers advancements in key capabilities for enterprises—including an industry-leading 200K token context window, significant reductions in rates of model hallucination, system prompts and our new beta feature: tool use.",Industry,United States of America,Significant use,,,,,,,,,,,Claude 2,,,,,API access,Unreleased,,,,
AndesGPT,Oppo Mobile Telecommunications,2023-11-16,Language,"Language modeling/generation,Question answering",,,,,,,,Unknown,https://www.oppo.com/en/newsroom/press/2023-oppo-developers-conference-odc23/,,,,,Industry,China,SOTA improvement,Highest score at SuperCLUE Safety benchmark. https://www.superclueai.com/,,,,,,,,,,,,,,,Hosted access (no API),Unreleased,Unreleased,,,
Nemotron-3-8B,NVIDIA,2023-11-15,Language,"Chat,Language generation,Language modeling/generation,Translation,Code generation,Question answering",8000000000.0,,1.8e+23,"https://huggingface.co/nvidia/nemotron-3-8b-base-4k

""This model was trained on a dataset containing 3.8 Trillion tokens of text""

8 billion * 3.8 trillion * 6 = 1.8e23

Also, using the hardware method: ""1,024 A100s were used for 19 days to train the model.""

19*1024 * 312 trillion * 24 * 3600 * 0.3 = 1.57e23","Unspecified unreleased,Flan,P3 (Public Pool of Prompts)",3800000000000.0,,Confident,"https://developer.nvidia.com/blog/nvidia-ai-foundation-models-build-custom-enterprise-chatbots-and-co-pilots-with-production-ready-llms/

https://catalog.ngc.nvidia.com/orgs/nvidia/teams/nemo/models/nemotron-3-8b-base-4k",NVIDIA AI Foundation Models: Build Custom Enterprise Chatbots and Co-Pilots with Production-Ready LLMs,,,"Large language models (LLMs) are revolutionizing data science, enabling advanced capabilities in natural language understanding, AI, and machine learning. Custom LLMs, tailored for domain-specific insights, are finding increased traction in enterprise applications.

The NVIDIA Nemotron-3 8B family of foundation models is a powerful new tool for building production-ready generative AI applications for the enterprise–fostering innovations ranging from customer service AI chatbots to cutting-edge AI products.",Industry,United States of America,SOTA improvement,"""The Nemotron-3-8B-QA model offers state-of-the-art performance, achieving a zero-shot F1 score of 41.99% on the Natural Questions dataset. This metric measures how closely the generated answer resembles the truth in ‌QA. """,,456.0,19 days,NVIDIA A100,1024.0,0.3473,214467.02013524104,,812476.3359553809,,,,,,Open weights (restricted use),Unreleased,,"can't use to train other models:

https://developer.download.nvidia.com/ai-foundation-models/nvidia-ai-foundation-models-license-10Nov2023.pdf",,
Qwen-Audio-Chat,Alibaba,2023-11-14,"Language,Speech,Audio","Audio question answering,Chat,Speech recognition,Translation,Transcription,Text classification,Question answering,Audio classification,Voice identification,Part-of-speech tagging",8460000000.0,"the model has two components - audio and language.
670M + 7.7B = 8.46B
""The audio encoder is composed of 640M parameters""

""Qwen-Audio incorporates a large language model as its foundational component.
The model is initialized using pre-trained weights derived from Qwen-7B (Bai et al., 2023a). Qwen-7B is a 32-layer Transformer decoder model with a hidden size of 4096, encompassing a total of 7.7B parameters.""",,,,,not clear,Likely,https://arxiv.org/abs/2311.07919,Qwen-Audio: Advancing Universal Audio Understanding via Unified Large-Scale Audio-Language Models,144.0,"Yunfei Chu, Jin Xu, Xiaohuan Zhou, Qian Yang, Shiliang Zhang, Zhijie Yan, Chang Zhou, Jingren Zhou"," Recently, instruction-following audio-language models have received broad attention for audio interaction with humans. However, the absence of pre-trained audio models capable of handling diverse audio types and tasks has hindered progress in this field. Consequently, most existing works have only been able to support a limited range of interaction capabilities. In this paper, we develop the Qwen-Audio model and address this limitation by scaling up audio-language pre-training to cover over 30 tasks and various audio types, such as human speech, natural sounds, music, and songs, to facilitate universal audio understanding abilities. However, directly co-training all tasks and datasets can lead to interference issues, as the textual labels associated with different datasets exhibit considerable variations due to differences in task focus, language, granularity of annotation, and text structure. To overcome the one-to-many interference, we carefully design a multi-task training framework by conditioning on a sequence of hierarchical tags to the decoder for encouraging knowledge sharing and avoiding interference through shared and specified tags respectively. Remarkably, Qwen-Audio achieves impressive performance across diverse benchmark tasks without requiring any task-specific fine-tuning, surpassing its counterparts. Building upon the capabilities of Qwen-Audio, we further develop Qwen-Audio-Chat, which allows for input from various audios and text inputs, enabling multi-turn dialogues and supporting various audio-central scenarios. ",Industry,China,SOTA improvement,"""A notable achievement of Qwen-Audio is its state-of-the-art performance on the test set of Aishell1, cochlscene, ClothoAQA, and VocalSound""",,,,,,,,,,,,,,,Open weights (restricted use),Open (restricted use),Open access (restricted use),"Qwen license:

https://github.com/QwenLM/Qwen-Audio/blob/main/LICENSE

https://huggingface.co/Qwen/Qwen-Audio

separate license required for companies with 100M+ MAU",BF16,
GraphCast,Google DeepMind,2023-11-14,Earth science,Weather forecasting,,Not mentioned in paper.,2.1e+22,"""Training GraphCast took roughly four weeks on 32 Cloud TPU v4 devices using batch parallelism.""

4.6: ""we use bfloat16 floating point precision""

2.1e22 = 2.75E+14 FLOP/s * 32 * 60* 60 * 24 * 7 * 4",ERA5,,,Speculative,https://www.science.org/doi/epdf/10.1126/science.adi2336,Learning skillful medium-range globalweather forecasting,,"Remi Lam, Alvaro Sanchez-Gonzalez, Matthew Willson, Peter Wirnsberger, Meire Fortunato, Ferran Alet, Suman Ravuri, Timo Ewalds, Zach Eaton-Rosen, Weihua Hu, Alexander Merose, Stephan Hoyer, George Holland, Oriol Vinyals, Jacklynn Stott, Alexander Pritzel, Shakir Mohamed, Peter Battaglia","Global medium-range weather forecasting is critical to decision-making across many social and economic domains. Traditional numerical weather prediction uses increased compute resources to improve forecast accuracy but does not directly use historical weather data to improve the underlying model. Here, we introduce GraphCast, a machine learning–based method trained directly from reanalysis data. It predicts hundreds of weather variables for the next 10 days at 0.25° resolution globally in under 1 minute. GraphCast significantly outperforms the most accurate operational deterministic systems on 90% of 1380 verification targets, and its forecasts support better severe event prediction, including tropical cyclone tracking, atmospheric rivers, and extreme temperatures. GraphCast is a key advance in accurate and efficient weather forecasting and helps realize the promise of machine learning for modeling complex dynamical systems.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",SOTA improvement,"""Our state-of-the-art model delivers 10-day weather predictions at unprecedented accuracy in under one minute""",,,,,,,,,,,,,,,Open weights (non-commercial),Open source,Open source,"Apache 2 for training and inference code
https://github.com/google-deepmind/graphcast

CC BY-NC-SA 4.0 for weights",BF16,
Volcano 13B,"Korea University,Korea Advanced Institute of Science and Technology (KAIST),LG",2023-11-13,"Language,Multimodal,Vision","Language modeling/generation,Visual question answering",13000000000.0,13B,4.56e+22,"Base model is LLaVa-1.5 13B, which used 4.55e22 FLOP (mostly coming from Llama base)

""For this research, we used an NVIDIA A100-SXM4-80GB GPU and an AMD EPYC 7513 32-Core Processor running at 2.0778 GHz. Training
VOLCANO 7B required 8 GPUs and took a total of 15 hours, while training VOLCANO 13B took 30 hours.""
3.12e14 * 8 * 30 * 3600 * 0.3 = 8.1e19 finetune compute","LAION,SBU,ShareGPT4V,Unspecified unreleased",,"https://huggingface.co/datasets/kaist-ai/volcano-train

558k image-text pairs, rest of dataset is ~1M examples of text data; length per sequence is not clear",Likely,https://arxiv.org/abs/2311.07362,Volcano: Mitigating Multimodal Hallucination through Self-Feedback Guided Revision,28.0,"Seongyun Lee, Sue Hyun Park, Yongrae Jo, Minjoon Seo","Large multimodal models (LMMs) suffer from multimodal hallucination, where they provide incorrect responses misaligned with the given visual information. Recent works have conjectured that one of the reasons behind multimodal hallucination might be due to the vision encoder failing to ground on the image properly. To mitigate this issue, we propose a novel approach that leverages self-feedback as visual cues. Building on this approach, we introduce Volcano, a multimodal self-feedback guided revision model. Volcano generates natural language feedback to its initial response based on the provided visual information and utilizes this feedback to self-revise its initial response. Volcano effectively reduces multimodal hallucination and achieves state-of-the-art on MMHal-Bench, POPE, and GAVIE. It also improves on general multimodal abilities and outperforms previous models on MM-Vet and MMBench. Through a qualitative analysis, we show that Volcano's feedback is properly grounded on the image than the initial response. This indicates that Volcano can provide itself with richer visual information, helping alleviate multimodal hallucination. We publicly release Volcano models of 7B and 13B sizes along with the data and code at this https URL.","Academia,Academia,Industry","Korea (Republic of),Korea (Republic of),Korea (Republic of)",SOTA improvement,"""Volcano effectively reduces multimodal hallucination and achieves state-of-the-art on MMHal-Bench, POPE, and GAVIE"" (hallucination benchmarks)",1.0,30.0,,NVIDIA A100 SXM4 80 GB,,,,,,LLaVA 1.5,8.1e+19,"""For this research, we used an NVIDIA A100- SXM4-80GB GPU and an AMD EPYC 7513 32-Core Processor running at 2.0778 GHz. Training VOLCANO 7B required 8 GPUs and took a total of 15 hours, while training VOLCANO 13B took 30 hours""

= 8 * 312 teraflops * 30 * 3600 * 0.4 utilization (assumed)
= 8.1e19
",128.0,,Open weights (non-commercial),Open (non-commercial),Open access (non-commercial),"dataset and weights are open, no license

https://github.com/kaistAI/Volcano

https://huggingface.co/kaist-ai/volcano-13b",FP16,
SPHINX (Llama 2 13B),"Shanghai AI Lab,Chinese University of Hong Kong (CUHK),ShanghaiTech University",2023-11-13,"Vision,Language,Multimodal","Visual question answering,Image captioning",19900000000.0,"SPHINX + Llama 2 13B
SPHINX component involves four vision encoders:
- CLIP - ViT
- CLIP - ConvNeXt V2 (89M to 659M params, depending on size)
- DinoV2 - ViT (22M to 1.14B params, depending on size)
- Q-former (188M params)
Also involves to projection networks

Huggingface Hub model files appear to be 39.8GB. Assuming models are stored in fp16 there are 2 bytes per parameter, so 39.8 / 2 = 19.9B parameters.",3.04e+22,"""The pre-training time is around 125 hours on 32 A100 GPUs with a 7B
language model and about twice the time with a 13B language model... The fine-tuning takes about 38 hours with 16 A100 GPUs with a 13B
language model.""

((125*2 * 32) + (38 * 16)) * 3.12e14 * 3600 * 0.3 = 2.9e21

Component vision encoders were initialized from pre-trained:
- CLIP ViT: 1.5e22 FLOPs for L/14@336
- ConvNeXt V2: 6.8e21 FLOPs for largest
- DinoV2: 7.42e+21 FLOPs for largest
- Q-former: 1.2e21 FLOPs for largest

(Based on full parameter count, SPHINX probably uses largest models)

Sum: 3.04e22 FLOPs","LAION-400M,LAION-COCO,RefinedWeb",,""" For the joint training on both images and texts, we form each
batch with 640 image-text pairs from LAION-400M or LAION-COCO and 65, 536 text tokens from RefinedWeb""

As per Figure 7 there was 20000 training steps",Likely,https://arxiv.org/abs/2311.07575,"SPHINX: The Joint Mixing of Weights, Tasks, and Visual Embeddings for Multi-modal Large Language Models",,"Ziyi Lin, Chris Liu, Renrui Zhang, Peng Gao, Longtian Qiu, Han Xiao, Han Qiu, Chen Lin, Wenqi Shao, Keqin Chen, Jiaming Han, Siyuan Huang, Yichi Zhang, Xuming He, Hongsheng Li, Yu Qiao","We present SPHINX, a versatile multi-modal large language model (MLLM) with a joint mixing of model weights, tuning tasks, and visual embeddings. First, for stronger vision-language alignment, we unfreeze the large language model (LLM) during pre-training, and introduce a weight mix strategy between LLMs trained by real-world and synthetic data. By directly integrating the weights from two domains, the mixed LLM can efficiently incorporate diverse semantics with favorable robustness. Then, to enable multi-purpose capabilities, we mix a variety of tasks for joint visual instruction tuning, and design task-specific instructions to avoid inter-task conflict. In addition to the basic visual question answering, we include more challenging tasks such as region-level understanding, caption grounding, document layout detection, and human pose estimation, contributing to mutual enhancement over different scenarios. Additionally, we propose to extract comprehensive visual embeddings from various network architectures, pre-training paradigms, and information granularity, providing language models with more robust image representations. Based on our proposed joint mixing, SPHINX exhibits superior multi-modal understanding capabilities on a wide range of applications. On top of this, we further propose an efficient strategy aiming to better capture fine-grained appearances of high-resolution images. With a mixing of different scales and high-resolution sub-images, SPHINX attains exceptional visual parsing and reasoning performance on existing evaluation benchmarks. We hope our work may cast a light on the exploration of joint mixing in future MLLM research.","Academia,Academia,Academia","China,Hong Kong,China,China",SOTA improvement,"""as shown in Figure 2, SPHINX can achieve impressive fine-grained visual perception for high-resolution images, which exhibits state-of-the-art performance on extensive evaluation benchmarks, e.g., MMBench (Liu et al., 2023f), MME (Fu et al., 2023a), and POPE (Li et al., 2023e).""",,290.0,"""The pre-training time is around 125 hours on 32 A100 GPUs with a 7B
language model and about twice the time with a 13B language model.""
"" The fine-tuning takes about 38 hours with 16 A100 GPUs with a 13B
language model.""",NVIDIA A100 SXM4 40 GB,32.0,,239188.6875340231,,25391.016357362598,Llama 2-13B,4.00000000001e+21,"32 A100 * 312 TFLOPS/A100 * 290 hours * 40% utilization ~= 4e21 FLOP
https://www.wolframalpha.com/input?i=250+hours+*+312+TFLOPS+*+32+*+0.4",,,Open weights (restricted use),Open (restricted use),Open access (restricted use),"https://github.com/Alpha-VLLM/LLaMA2-Accessory

looks like same as LLama license

finetune code: https://github.com/Alpha-VLLM/LLaMA2-Accessory/tree/main/SPHINX ",BF16,
MultiBand Diffusion,"Meta AI,Hebrew University of Jerusalem,LORIA",2023-11-08,"Audio,Speech",Audio generation,,,2.6e+19,"""It takes around 2 days on 4 Nvidia V100 with 16 GB to train one of the 4 models.""

125 tflop/s for V100 SXM (not clear which they used, could be PCI given small number - still same OOM thus confident)
4 * 125 trillion * 2 * 24 * 3600 * 0.3 = 2.6e19","Common Voice,DNS,MTG-Jamendo,FSD50K,AudioSet",,9096+2425+919+108+4989=17537 hours,Confident,https://arxiv.org/abs/2308.02560,From Discrete Tokens to High-Fidelity Audio Using Multi-Band Diffusion,13.0,"Robin San Roman, Yossi Adi, Antoine Deleforge, Romain Serizel, Gabriel Synnaeve, Alexandre Défossez","Deep generative models can generate high-fidelity audio conditioned on various types of representations (e.g., mel-spectrograms, Mel-frequency Cepstral Coefficients (MFCC)). Recently, such models have been used to synthesize audio waveforms conditioned on highly compressed representations. Although such methods produce impressive results, they are prone to generate audible artifacts when the conditioning is flawed or imperfect. An alternative modeling approach is to use diffusion models. However, these have mainly been used as speech vocoders (i.e., conditioned on mel-spectrograms) or generating relatively low sampling rate signals. In this work, we propose a high-fidelity multi-band diffusion-based framework that generates any type of audio modality (e.g., speech, music, environmental sounds) from low-bitrate discrete representations. At equal bit rate, the proposed approach outperforms state-of-the-art generative techniques in terms of perceptual quality. Training and, evaluation code, along with audio samples, are available on the facebookresearch/audiocraft Github page.","Industry,Academia,Academia","United States of America,Israel,France",SOTA improvement,"""At equal bit rate, the proposed approach outperforms state-of-the-art generative techniques in terms of perceptual quality""",,48.0,around 2 days,NVIDIA V100,,,22.81032329809286,,,,,,,,Open weights (unrestricted),Open source,Open source,"training, inference, and models (MIT)
https://github.com/facebookresearch/audiocraft/blob/main/docs/MBD.md ",,
OmniVec,TensorTour,2023-11-07,"Multimodal,Vision,Speech,Language,Video,3D modeling","Image classification,Speech recognition",,,,,"AudioSet,Something-Something v2 (SSv2),English Wikipedia,ImageNet-1k,SUN RGB-D,ModelNet40",,,Unknown,https://arxiv.org/abs/2311.05709v1,OmniVec: Learning robust representations with cross modal sharing,38.0,"Siddharth Srivastava, Gaurav Sharma","Majority of research in learning based methods has been towards designing and training networks for specific tasks. However, many of the learning based tasks, across modalities, share commonalities and could be potentially tackled in a joint framework. We present an approach in such direction, to learn multiple tasks, in multiple modalities, with a unified architecture. The proposed network is composed of task specific encoders, a common trunk in the middle, followed by task specific prediction heads. We first pre-train it by self-supervised masked training, followed by sequential training for the different tasks. We train the network on all major modalities, e.g.\ visual, audio, text and 3D, and report results on 22 diverse and challenging public benchmarks. We demonstrate empirically that, using a joint network to train across modalities leads to meaningful information sharing and this allows us to achieve state-of-the-art results on most of the benchmarks. We also show generalization of the trained network on cross-modal tasks as well as unseen datasets and tasks.",Industry,United States of America,SOTA improvement,"Table 13.

E.g. SOTA on ImageNet at 92.4 top-1 accuracy",2000.0,,,,,,,,,BERT-Large,,"Appears to build on several models, like BERT and ViT (Table 1)",,,Unreleased,Unreleased,,,,
mPLUG-Owl2,Alibaba,2023-11-07,"Vision,Language,Multimodal","Visual question answering,Image captioning,Language modeling/generation",7120000000.0,"""As depicted in Figure 2, our model, referred to as mPLUGOwl2, is composed of three main components: a fundamental vision encoder, a visual abstractor, and a language decoder. Specifically, we utilize ViT-L/14 as the
vision encoder and LLaMA-2-7B [58] as the language decoder""
ViT-L/14 has 123M parameters and Llama 2 7B has 7B parameters.",,"ViT-L/14 and Llama 2-7b compute, plus 1.7e19 joint pretrain FLOP (6 * 400M * 7.1B) and 4e16 joint finetune FLOP. Everything is a negligible fraction except the Llama 2 compute.","Conceptual Captions (CC3M),Conceptual Captions 12M (CC12M),COCO,LAION,COYO-700M",400672000.0,"400 million image-text pairs at pre-training + 672k image-text pairs at instruction tuning (table 14) = 400672000 images

+ 558k text instructions (table 14) ",Speculative,https://arxiv.org/abs/2311.04257,mPLUG-Owl2: Revolutionizing Multi-modal Large Language Model with Modality Collaboration,,"Qinghao Ye, Haiyang Xu, Jiabo Ye, Ming Yan, Anwen Hu, Haowei Liu, Qi Qian, Ji Zhang, Fei Huang, Jingren Zhou","Multi-modal Large Language Models (MLLMs) have demonstrated impressive instruction abilities across various open-ended tasks. However, previous methods primarily focus on enhancing multi-modal capabilities. In this work, we introduce a versatile multi-modal large language model, mPLUG-Owl2, which effectively leverages modality collaboration to improve performance in both text and multi-modal tasks. mPLUG-Owl2 utilizes a modularized network design, with the language decoder acting as a universal interface for managing different modalities. Specifically, mPLUG-Owl2 incorporates shared functional modules to facilitate modality collaboration and introduces a modality-adaptive module that preserves modality-specific features. Extensive experiments reveal that mPLUG-Owl2 is capable of generalizing both text tasks and multi-modal tasks and achieving state-of-the-art performances with a single generic model. Notably, mPLUG-Owl2 is the first MLLM model that demonstrates the modality collaboration phenomenon in both pure-text and multi-modal scenarios, setting a pioneering path in the development of future multi-modal foundation models.
",Industry,China,SOTA improvement,"""Extensive experiments illustrate the effectiveness and generalization abilities of mPLUG-Owl2, which achieves state-of-the-art performance on 8 classic vision-language benchmarks using a single generic model.""",1.0,,,,,,,,,Llama 2-7B,1.7000000001e+19,https://www.wolframalpha.com/input?i=6+*+400+million+*+7.12+billion,,,Open weights (unrestricted),Open source,,"Apache 2
https://github.com/X-PLUG/mPLUG-Owl/tree/main/mPLUG-Owl2

https://huggingface.co/Mizukiluke/mplug_owl_2_1",BF16,
GPT-4 Turbo,OpenAI,2023-11-06,"Multimodal,Vision,Language,Image generation","Chat,Language modeling/generation,Image generation,Speech synthesis,Table tasks,Visual question answering,Image captioning",,Not known. Maybe smaller/sparser than GPT-4.,2.2e+25,Estimated using benchmark imputation,Unspecified unreleased,,,Unknown,https://openai.com/blog/new-models-and-developer-products-announced-at-devday,New models and developer products announced at DevDay,,,"Today, we shared dozens of new additions and improvements, and reduced pricing across many parts of our platform. These include:

New GPT-4 Turbo model that is more capable, cheaper and supports a 128K context window",Industry,United States of America,SOTA improvement,"""More capable"" than GPT-4 according to OpenAI, with larger context window",,,,,,,,,,,,,,,API access,Unreleased,,,,True
CogVLM-17B,"Tsinghua University,Zhipu AI,Beihang University",2023-11-06,"Multimodal,Vision,Language","Image captioning,Visual question answering,Chat",17000000000.0,"CogVLM-17B has 10 billion vision parameters and 7 billion language parameters. However, ""the total number of trainable parameters is 6.5B"".

""CogVLM model comprises four fundamental components: a vision transformer (ViT) encoder, an MLP adapter, a pretrained large language model (GPT), and a visual expert module.""

ViT: EVA2-CLIP-E, last layer removed (5B params with last layer, non-trainable)
MLP adapter: 2 layers, parameter count unavailable
GPT: Vicuna1.5-7B (7B params)
Visual expert module: parameter count unclear",6.331e+22,"from table 8 on page 17

230.1 FLOPS*days 
so 
10**15*24*3600*230.1= 1.988e22

Since this training uses pretrained weights from EVA02-CLIP-E and Vicuna1.5-7B, we report the full number of FLOPs baked into the model.

EVA02-CLIP-g/14 is stated to have taken 25 days to train 12B samples using 64 A100-40GB GPUs, implying: 
25 days * 24 hr/day * 3600 sec/hr * 64 GPU * 7.80E+13 FLOP/GPU-sec * 30% efficiency = 3.23e21

EVA02-CLIP-E doesn't give a training time; it saw 1/4 as many samples as the g/14 model but has 4.27x more parameters; as a rough estimate, assume it took the same number of FLOPs to train.

Vicuna1.5-7B's training compute is ~entirely embedded in the base Llama-7b weights, which took 4.02e+22 FLOPs

Total: 1.988e22 + 3.23e21 + 4.02e22 = 6.331E22","VQAv2,LAION-2B,COYO-700M,OKVQA,TextVQA,OCR-VQA,ScienceQA,LLaVA-Instruct-150k,LRV-Instruction,LLaVAR,Flickr30K Entities,RefCOCO,Visual7W,VisualGenome,COCO,TextCaps",1518534581.0,"After filtering, about 1.5B image-text pairs are left for pretraining in stage one. Stage two of pretraining adds a visual grounding dataset of 40M images with generated noun bounding boxes. These are filtered from LAION-115M so that 75% of images contain at least two bounding boxes.

Two different kinds of finetuning are done, each using a number of datasets:
- CogVLM-Chat: VQAv2 (11059040), OKVQA (70275), TextVQA (453360), OCRVQA (1002146), ScienceQA (21208), LLaVAInstruct (150000), LRV-Instruction (300000), LLaVAR (1633000)
- CogVLM-Grounding: Flickr30K Entities (520000), RefCOCO (142209), Visual7W (889388), VisualGenome (1700000)

Additional experiments finetune using the training sets from COCO (413915 in train) and TextCaps (109765 in train)

In sum, pretraining and finetuning appear to contain 1,500,000,000 and 18,534,581 datapoints, respectively.",Confident,"https://arxiv.org/abs/2311.03079
https://huggingface.co/THUDM/cogvlm-chat-hf
https://github.com/THUDM/CogVLM
",CogVLM: Visual Expert for Pretrained Language Models,297.0,"Weihan Wang, Qingsong Lv, Wenmeng Yu, Wenyi Hong, Ji Qi, Yan Wang, Junhui Ji, Zhuoyi Yang, Lei Zhao, Xixuan Song, Jiazheng Xu, Bin Xu, Juanzi Li, Yuxiao Dong, Ming Ding, Jie Tang","We introduce CogVLM, a powerful open-source visual language foundation model. Different from the popular shallow alignment method which maps image features into the input space of language model, CogVLM bridges the gap between the frozen pretrained language model and image encoder by a trainable visual expert module in the attention and FFN layers. As a result, CogVLM enables deep fusion of vision language features without sacrificing any performance on NLP tasks. CogVLM-17B achieves state-of-the-art performance on 10 classic cross-modal benchmarks, including NoCaps, Flicker30k captioning, RefCOCO, RefCOCO+, RefCOCOg, Visual7W, GQA, ScienceQA, VizWiz VQA and TDIUC, and ranks the 2nd on VQAv2, OKVQA, TextVQA, COCO captioning, etc., surpassing or matching PaLI-X 55B. Codes and checkpoints are available at this https URL. ","Academia,Industry,Academia","China,China,China",SOTA improvement,"""CogVLM-17B
achieves state-of-the-art performance on 17 clas-
sic cross-modal benchmarks, including 1) im-
age captioning datasets: NoCaps, Flicker30k, 2)
VQA datasets: OKVQA, TextVQA, OCRVQA,
ScienceQA, 3) LVLM benchmarks: MM-
Vet, MMBench, SEED-Bench, LLaVABench,
POPE, MMMU, MathVista, 4) visual grounding
datasets: RefCOCO, RefCOCO+, RefCOCOg,
Visual7W. Codes and checkpoints are available at
https://github.com/THUDM/CogVLM""",,,,,,,,,,Vicuna-7B v0,2e+22,Trained from Vicuna1.5-7B weights,,"8192 in pretraining stage 1, 1024 in stage 2",Open weights (restricted use),Unreleased,Open source,"code is Apache, model more restrictive, commercial allowed, subject to PRC laws and interests

code isn't training code",BF16,
LLaVA 1.5,"University of Wisconsin Madison,Microsoft Research",2023-11-05,"Multimodal,Language,Vision","Chat,Question answering,Visual question answering",13000000000.0,"from abstract ""Our final 13B checkpoint uses merely 1.2M publicly available data, and finishes full training in ~1 day on a single 8-A100 node. """,7.807e+22,"""Due to the increased image input resolution to 336^2, the training of LLaVA-1.5 is ∼2× as long as LLaVA: ∼6 hours of pretraining and ∼20 hours of visual instruction tuning using 8× A100s.""
26 * 3600 * 8 * 3.12e14 * 0.3 = 7.0e19

Fine-tuned from Vicuna-13B (itself finetuned from LLaMa-13B), which used 7.8e22 FLOPs

7.0e19 + 7.8e22",Unspecified unreleased,1200000.0,1.2M text-image pairs from https://huggingface.co/liuhaotian/llava-v1.5-13b#training-dataset,Confident,"https://arxiv.org/abs/2310.03744,
",Improved Baselines with Visual Instruction Tuning,1430.0,"Haotian Liu, Chunyuan Li, Yuheng Li, Yong Jae Lee","Large multimodal models (LMM) have recently shown encouraging progress with visual instruction tuning. In this note, we show that the fully-connected vision-language cross-modal connector in LLaVA is surprisingly powerful and data-efficient. With simple modifications to LLaVA, namely, using CLIP-ViT-L-336px with an MLP projection and adding academic-task-oriented VQA data with simple response formatting prompts, we establish stronger baselines that achieve state-of-the-art across 11 benchmarks. Our final 13B checkpoint uses merely 1.2M publicly available data, and finishes full training in ~1 day on a single 8-A100 node. We hope this can make state-of-the-art LMM research more accessible. Code and model will be publicly available. ","Academia,Industry","United States of America,United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational",SOTA improvement,"from abstract: ""we establish stronger baselines that achieve state-of-the-art across 11 benchmark""",1.0,24.0,"from abstract ""Our final 13B checkpoint uses merely 1.2M publicly available data, and finishes full training in ~1 day on a single 8-A100 node. """,NVIDIA A100,8.0,,,,6348.88507402357,Vicuna-13B v0,7.008768e+19,"""Due to the increased image input resolution to 336^2, the training of LLaVA-1.5 is ∼2× as long as LLaVA: ∼6 hours of pretraining and ∼20 hours of visual instruction tuning using 8× A100s.""

26 * 3600 * 8 * 3.12e14 * 0.3 = 7.0e19",,,Open weights (restricted use),Open source,Open source,"Llama 2 license for weights

https://huggingface.co/liuhaotian/llava-v1.5-13b

Apache 2.0 license for code:
https://github.com/haotian-liu/LLaVA",BF16,
Grok-1,xAI,2023-11-04,Language,"Language modeling,Chat",314000000000.0,"""314B parameter Mixture-of-Experts model with 25% of the weights active on a given token"". So effectively 78B parameters

Mixture of 8 experts: https://github.com/xai-org/grok-1",2.90000000001e+24,"""On these benchmarks, Grok-1 displayed strong results, surpassing all other models in its compute class, including ChatGPT-3.5 and Inflection-1. It is only surpassed by models that were trained with a significantly larger amount of training data and compute resources like GPT-4""

Per table, Grok-1 is surpassed by Palm 2, Claude 2, GPT-4, so it required less compute than these three models. Palm 2 was trained on 7e24 FLOP.

GPT-3.5 is ~2.6e24. Inflection-1's compute is not public/known by us but Inflection says Inflection-1 compute was <= Palm-540B's (which was ~2.5e24). 

For optimal training, our current working hypothesis is that you still need something like Chinchilla scaling on the total number of parameters in the model, even for MoE models, so optimal dataset size would be 20*310B tokens. With 25%*314B params active per forward pass, this would be around 3e24 FLOP.
https://www.wolframalpha.com/input?i=20*310+billion+*+6+*+25%25+*+314+billion",Unspecified unreleased,6200000000000.0,"(Speculative confidence, see compute notes)",Likely,"https://x.ai/model-card/, https://x.ai/blog/grok-os",Announcing Grok,,,"Grok is an AI modeled after the Hitchhiker’s Guide to the Galaxy, so intended to answer almost anything and, far harder, even suggest what questions to ask!

Grok is designed to answer questions with a bit of wit and has a rebellious streak, so please don’t use it if you hate humor!

A unique and fundamental advantage of Grok is that it has real-time knowledge of the world via the 𝕏 platform. It will also answer spicy questions that are rejected by most other AI systems.

Grok is still a very early beta product – the best we could do with 2 months of training – so expect it to improve rapidly with each passing week with your help.",Industry,United States of America,Training cost,"""On these benchmarks, Grok-1 displayed strong results, surpassing all other models in its compute class, including ChatGPT-3.5 and Inflection-1""",,,,,,,,,,,,,,,Open weights (unrestricted),Unreleased,,apache 2.0,,True
RT-Trajectory,"Google DeepMind,University of California San Diego,Stanford University",2023-11-03,Robotics,Robotic manipulation,,seems to be based on the RT-1 architecture (35M parameters) with some modifications (section 3.3),,"Given the architecture seems to use 35M parameters, it seems unlikely this is above 1e23 FLOP.",RT-1,,,Unknown,https://arxiv.org/abs/2311.01977,RT-Trajectory: Robotic Task Generalization via Hindsight Trajectory Sketches,28.0,"Jiayuan Gu, Sean Kirmani, Paul Wohlhart, Yao Lu, Montserrat Gonzalez Arenas, Kanishka Rao, Wenhao Yu, Chuyuan Fu, Keerthana Gopalakrishnan, Zhuo Xu, Priya Sundaresan, Peng Xu, Hao Su, Karol Hausman, Chelsea Finn, Quan Vuong, Ted Xiao","Generalization remains one of the most important desiderata for robust robot learning systems. While recently proposed approaches show promise in generalization to novel objects, semantic concepts, or visual distribution shifts, generalization to new tasks remains challenging. For example, a language-conditioned policy trained on pick-and-place tasks will not be able to generalize to a folding task, even if the arm trajectory of folding is similar to pick-and-place. Our key insight is that this kind of generalization becomes feasible if we represent the task through rough trajectory sketches. We propose a policy conditioning method using such rough trajectory sketches, which we call RT-Trajectory, that is practical, easy to specify, and allows the policy to effectively perform new tasks that would otherwise be challenging to perform. We find that trajectory sketches strike a balance between being detailed enough to express low-level motion-centric guidance while being coarse enough to allow the learned policy to interpret the trajectory sketch in the context of situational visual observations. In addition, we show how trajectory sketches can provide a useful interface to communicate with robotic policies: they can be specified through simple human inputs like drawings or videos, or through automated methods such as modern image-generating or waypoint-generating methods. We evaluate RT-Trajectory at scale on a variety of real-world robotic tasks, and find that RT-Trajectory is able to perform a wider range of tasks compared to language-conditioned and goal-conditioned policies, when provided the same training data.","Industry,Academia,Academia","United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France,United States of America,United States of America",SOTA improvement,"from blog https://deepmind.google/discover/blog/shaping-the-future-of-advanced-robotics/

""When tested on 41 tasks unseen in the training data, an arm controlled by RT-Trajectory more than doubled the performance of existing state-of-the-art RT models: it achieved a task success rate of 63%, compared with 29% for RT-2.""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
BLUUMI,"University of Turku,Hugging Face",2023-11-03,Language,Language modeling,176000000000.0,176 billion,,,"Parsebank,mC4,Common Crawl,Wikipedia",38000000000.0,"38B tokens
""In total, the final pretraining dataset (including oversampling) consists of 38 billion tokens when processed with our Finnish tokenizer.""",Likely,https://arxiv.org/abs/2311.05640,FinGPT: Large Generative Models for a Small Language,28.0,"Risto Luukkonen, Ville Komulainen, Jouni Luoma, Anni Eskelinen, Jenna Kanerva, Hanna-Mari Kupari, Filip Ginter, Veronika Laippala, Niklas Muennighoff, Aleksandra Piktus, Thomas Wang, Nouamane Tazi, Teven Le Scao, Thomas Wolf, Osma Suominen, Samuli Sairanen, Mikko Merioksa, Jyrki Heinonen, Aija Vahtola, Samuel Antao, Sampo Pyysalo","Large language models (LLMs) excel in many tasks in NLP and beyond, but most open models have very limited coverage of smaller languages and LLM work tends to focus on languages where nearly unlimited data is available for pretraining. In this work, we study the challenges of creating LLMs for Finnish, a language spoken by less than 0.1% of the world population. We compile an extensive dataset of Finnish combining web crawls, news, social media and eBooks. We pursue two approaches to pretrain models: 1) we train seven monolingual models from scratch (186M to 13B parameters) dubbed FinGPT, 2) we continue the pretraining of the multilingual BLOOM model on a mix of its original training data and Finnish, resulting in a 176 billion parameter model we call BLUUMI. For model evaluation, we introduce FIN-bench, a version of BIG-bench with Finnish tasks. We also assess other model qualities such as toxicity and bias. Our models and tools are openly available at this https URL.","Academia,Industry","Finland,Multinational,United States of America",SOTA improvement,"SOTA for Finnish: ""Our best monolingual model outperforms this result by over 10% points and the BLUUMI model by over 20% points, representing a substantial advance in the state of the art in the capability of generative models trained for Finnish.""",8.0,,,AMD Radeon Instinct MI250X,,,,,,BLOOM-176B,,"They ""continued pretraining"" of BLOOM on Finnish data. Don't think they specify the number of tokens they trained BLOOM/BLUUMI on; for their smaller models it was 300b.",4194304.0,Table 5.,Open weights (restricted use),Unreleased,,"The BigScience RAIL License
https://turkunlp.org/gpt3-finnish
https://huggingface.co/TurkuNLP/bloom-finnish-176b

""The Responsible AI License allows users to take advantage of the model in a wide range of settings (including free use and redistribution) as long as they respect the specific use case restrictions outlined, which correspond to model applications the licensor deems ill-suited for the model or are likely to cause harm.""",,
Yi-34B,01.AI,2023-11-02,Language,"Chat,Language modeling/generation,Translation,Code generation",34000000000.0,34b,6.1e+23,"""The dataset we use contains Chinese & English only. We used approximately 3T tokens"" sounds like this means it was trained on 3T tokens, not necessarily that the dataset contains 3T tokens?

If so, 34b * 3T * 6 = 6.1e23",Unspecified unreleased,3100000000000.0,"""language models pretrained from scratch on 3.1T highly-engineered large amount of data, and finetuned on a small but meticulously polished alignment data.""",Confident,https://arxiv.org/abs/2403.04652,Yi: Open Foundation Models by 01.AI,,"Alex Young, Bei Chen, Chao Li, Chengen Huang, Ge Zhang, Guanwei Zhang, Heng Li, Jiangcheng Zhu, Jianqun Chen, Jing Chang, Kaidong Yu, Peng Liu, Qiang Liu, Shawn Yue, Senbin Yang, Shiming Yang, Tao Yu, Wen Xie, Wenhao Huang, Xiaohui Hu, Xiaoyi Ren, Xinyao Niu, Pengcheng Nie, Yuchi Xu, Yudong Liu, Yue Wang, Yuxuan Cai, Zhenyu Gu, Zhiyuan Liu, Zonghong Dai",The Yi series models are large language models trained from scratch by developers at 01.AI.,Industry,China,Significant use,"2nd most popular model on HuggingFace: https://decrypt.co/206195/new-open-source-ai-model-from-china-boasts-twice-the-capacity-of-chatgpt

also maybe the best open-source model, does better than Llama 2-70B on several benchmarks",,,,NVIDIA A100,128.0,,,,101588.94792366636,,,,,,Open weights (restricted use),Unreleased,,"apply for commercial license:
no training code
https://github.com/01-ai/Yi/blob/main/MODEL_LICENSE_AGREEMENT.txt

the model https://huggingface.co/01-ai/Yi-34B-Chat Apache 2.0
""If you create derivative works based on this model, please include the following attribution in your derivative works: ....""",FP16,
Cohere Embed,Cohere,2023-11-02,Language,Semantic embedding,,,,"https://docs.cohere.com/docs/environmental-impact

Embed v2 (older version) produced 6689.76 kg CO2 to train. Using the calculator Cohere links (https://mlco2.github.io/impact/) that's the equivalent of 80,000 TPUv3-hours in the ""us-west1"" region. That's 3.5e22 FLOP without considering utilization. However, I have no idea which region Cohere's GPUs are in (looks like CO2/energy can vary a lot by region), and they probably used a more recent GPU.",Unspecified unreleased,,"""First, they have been trained on questions and answers from a large web crawl. When we presented our multilingual-v2.0 model last year, we had a collection of over 1.4 billion question-and-answer pairs from 100+ languages on basically every topic on the internet.""

""Hence, the second stage involved measuring content quality. We used over 3 million search queries from search engines and retrieved the top-10 most similar documents for each query.""",Unknown,https://txt.cohere.com/introducing-embed-v3/,Cohere Command & Embed on Amazon Bedrock,,"Nils Reimers, Elliott Choi, Amr Kayid, Alekhya Nandula, Manoj Govindassamy, Abdullah Elkady","We're excited to introduce Embed v3, our latest and most advanced embeddings model. Embed v3 offers state-of-the-art performance per trusted MTEB and BEIR benchmarks.",Industry,Canada,SOTA improvement,"""We are releasing new English and multilingual Embed versions with either 1024 or 384 dimensions. All models can be accessed via our APIs. As of October 2023, these models achieve state-of-the-art performance among 90+ models on the Massive Text Embedding Benchmark (MTEB) and state-of-the-art performance for zero-shot dense retrieval on BEIR.""",,,,,,,,,,,,,,,API access,Unreleased,,,,
Skywork-13B,Kunlun Inc.,2023-10-30,Language,"Language modeling,Language modeling/generation,Translation",13000000000.0,13B,2.5e+23,"""Our Skywork-13B is trained on a cluster of 64 NVIDIA-HGX-A800 nodes, a total of 512 A800-80G SXM GPUs... The training process of Skywork-13B spanned a total of 39 days.""

They note that ""we achieved a token throughput of 1873 per GPU per second and a model flops utilization (MFU) of 56.5%... "". 

""MFU"" was coined in the Palm paper (https://arxiv.org/pdf/2204.02311.pdf) and only counts operations used to train the model, not all operations observed on the hardware. MFU is lower than traditionally measured utilization.

Using the 56.5% number, and a peak tensor performance of 623.8 TFLOPS for the A800, this suggests 512 * 623.8 TFLOPS * 39 days * 86400 seconds/day * 0.565 = 6.08e23 FLOP.

Based on C=6ND, with 13B parameters and 3.2T tokens, we have C=6*(13B)*(3.2T)=2.5e23 FLOP.

Since the reported MFU is quite high, and would imply a higher compute usage than 6ND, it seems they may have trained on mixed precision and with the GPUs not always operating in the 623.8 TFLOPS mode.",SkyPile,3180000000000.0,"The full SkyPile dataset is 6 trillion tokens, roughly half English and half Chinese: (https://huggingface.co/Skywork/Skywork-13B-base).

The model is trained for the equivalent of 0.53 epochs on the full dataset, or 3.18 trillion unique tokens. This is around 2.78 trillion words, based on an average of 1 word/token for the Chinese portion and 0.75 word/token on the English portion.",Confident,https://arxiv.org/abs/2310.19341,Skywork: A More Open Bilingual Foundation Model,75.0,"Tianwen Wei, Liang Zhao, Lichang Zhang, Bo Zhu, Lijie Wang, Haihua Yang, Biye Li, Cheng Cheng, Weiwei Lü, Rui Hu, Chenxia Li, Liu Yang, Xilin Luo, Xuejie Wu, Lunan Liu, Wenjun Cheng, Peng Cheng, Jianhao Zhang, Xiaoyu Zhang, Lei Lin, Xiaokun Wang, Yutuan Ma, Chuanhai Dong, Yanqi Sun, Yifu Chen, Yongyi Peng, Xiaojuan Liang, Shuicheng Yan, Han Fang, Yahui Zhou","In this technical report, we present Skywork-13B, a family of large language models (LLMs) trained on a corpus of over 3.2 trillion tokens drawn from both English and Chinese texts. This bilingual foundation model is the most extensively trained and openly published LLMs of comparable size to date. We introduce a two-stage training methodology using a segmented corpus, targeting general purpose training and then domain-specific enhancement training, respectively. We show that our model not only excels on popular benchmarks, but also achieves state of the art performance in Chinese language modeling on diverse domains. Furthermore, we propose a novel leakage detection method, demonstrating that test data contamination is a pressing issue warranting further investigation by the LLM community. To spur future research, we release Skywork-13B along with checkpoints obtained during intermediate stages of the training process. We are also releasing part of our SkyPile corpus, a collection of over 150 billion tokens of web text, which is the largest high quality open Chinese pre-training corpus to date. We hope Skywork-13B and our open corpus will serve as a valuable open-source resource to democratize access to high-quality LLMs.",Industry,China,SOTA improvement,"""We show that our model not only excels on popular benchmarks, but also achieves state of the art performance in Chinese language modeling on diverse domains""",1.0,940.0,39 days,NVIDIA A800 PCIe 40 GB,512.0,0.565,,,253989.3377909499,,,,16000000.0,Table 3,Open weights (restricted use),Open (restricted use),Open access (restricted use),"commercial but restrictive license: https://github.com/SkyworkAI/Skywork/blob/main/LICENSE

part of the training data is open, but only 2.5%: ""In order to train Skywork-13B, we build SkyPile, a vast, high quality corpus comprising more than 6 trillion tokens. A segment of the corpus, comprising over 150 billion tokens of web text, has been open sourced to facilitate research and training on Chinese LLMs""

training code: https://github.com/SkyworkAI/Skywork/blob/main/train/train.py ",BF16,
ChatGLM3-6B,Zhipu AI,2023-10-27,"Multimodal,Language,Vision","Chat,Visual question answering,Code generation",6000000000.0,6B from https://arxiv.org/abs/2406.12793,5.04e+22,"Highly speculative.
Assume 1 epoch on 1.4T tokens.
6 FLOP/token/param * 1.4T tokens * 6B params=50.4 * 10 ^(12+9) = 5.04*10^(22)",Unspecified unreleased,1400000000000.0,"""ChatGLM-6B was pre-trained on approximately one trillion tokens of Chinese and English corpus""
""By further realizing more diverse training datasets, more sufficient training steps, and more optimized training strategies, ChatGLM3-6B topped 42 benchmarks across semantics, mathematics, reasoning, code, and knowledge.""
The ChatGLM website states that the latest ChatGLM service is based on (and upgraded from) ChatGLM2, which was trained on 1.4T tokens. Assume that ChatGLM3 is trained on at least the same number of tokens.
Sources:
https://chatglm.cn/
https://github.com/THUDM/ChatGLM2-6B/blob/main/README_EN.md
https://www.zhipuai.cn/en/news/76

here (https://github.com/Kwai-Kolors/Kolors/blob/master/imgs/Kolors_paper.pdf) they confirm the dataset size ""Consequently, in Kolors, we utilize the open-source ChatGLM3-6B-Base as text encoder, which has been pre-trained with over 1.4 trillion bilingual tokens, resulting in a robust capability for Chinese language understanding.""",Speculative,https://www.zhipuai.cn/en/news/76,Zhipu AI launches third-generation base model,,"Aohan Zeng, Bin Xu, Bowen Wang, Chenhui Zhang, Da Yin, Diego Rojas, Guanyu Feng, Hanlin Zhao, Hanyu Lai, Hao Yu, Hongning Wang, Jiadai Sun, Jiajie Zhang, Jiale Cheng, Jiayi Gui, Jie Tang, Jing Zhang, Juanzi Li, Lei Zhao, Lindong Wu, Lucen Zhong, Mingdao Liu, Minlie Huang, Peng Zhang, Qinkai Zheng, Rui Lu, Shuaiqi Duan, Shudan Zhang, Shulin Cao, Shuxun Yang, Weng Lam Tam, Wenyi Zhao, Xiao Liu, Xiao Xia, Xiaohan Zhang, Xiaotao Gu, Xin Lv, Xinghan Liu, Xinyi Liu, Xinyue Yang, Xixuan Song, Xunkai Zhang, Yifan An, Yifan Xu, Yilin Niu, Yuantao Yang, Yueyan Li, Yushi Bai, Yuxiao Dong, Zehan Qi, Zhaoyu Wang, Zhen Yang, Zhengxiao Du, Zhenyu Hou, Zihan Wang","On October 27, 2023, at the 2023 China Computer Conference (CNCC), Zhipu AI launched the fully self-developed third-generation large base model ChatGLM3 and related series of products.",Industry,China,SOTA improvement,"Aiming at GPT-4V, ChatGLM3 has implemented iterative upgrades of several new functions this time, including:

CogVLM with multi-modal understanding capabilities, looks at image semantics, and achieved SOTA on more than 10 international standard image and text evaluation data sets;",,,,,,,,,,,,,,,Open weights (restricted use),Unreleased,,weights available with restricted license: https://huggingface.co/THUDM/chatglm-6b/blob/main/MODEL_LICENSE ,,
DiT-XL/2 + CADS,"ETH Zurich,Disney Research",2023-10-26,Image generation,Image generation,675000000.0,original parameter count for DiT-XL/2,,,ImageNet,,,Likely,https://arxiv.org/abs/2310.17347v2,CADS: Unleashing the Diversity of Diffusion Models through Condition-Annealed Sampling,,"Seyedmorteza Sadat, Jakob Buhmann, Derek Bradley, Otmar Hilliges, Romann M. Weber","While conditional diffusion models are known to have good coverage of the data distribution, they still face limitations in output diversity, particularly when sampled with a high classifier-free guidance scale for optimal image quality or when trained on small datasets. We attribute this problem to the role of the conditioning signal in inference and offer an improved sampling strategy for diffusion models that can increase generation diversity, especially at high guidance scales, with minimal loss of sample quality. Our sampling strategy anneals the conditioning signal by adding scheduled, monotonically decreasing Gaussian noise to the conditioning vector during inference to balance diversity and condition alignment. Our Condition-Annealed Diffusion Sampler (CADS) can be used with any pretrained model and sampling algorithm, and we show that it boosts the diversity of diffusion models in various conditional generation tasks. Further, using an existing pretrained diffusion model, CADS achieves a new state-of-the-art FID of 1.70 and 2.31 for class-conditional ImageNet generation at 256×256 and 512×512 respectively.","Academia,Industry","Switzerland,United States of America,Switzerland,United Kingdom of Great Britain and Northern Ireland",SOTA improvement,"""Further, using an existing pretrained diffusion model, CADS achieves a new state-of-the-art FID of 1.70 and 2.31 for class-conditional ImageNet generation at 256×256 and 512×512 respectively""",,,,,,,,,,DiT-XL/2,,,,,Unreleased,Unreleased,,,,
CODEFUSION (Python),"Microsoft,Microsoft Research",2023-10-26,Language,Code generation,75000000.0,Table 1,7.92e+18,"V100 performance: 125 teraFLOPS according to https://www.nvidia.com/en-us/data-center/v100/

11 hours * 4 GPUs * 125 teraFLOPS/GPU * 0.40 utilization = 7.92e18 FLOP",,4390400.0,"Section A3, Table 5: for python, 56k samples with an average length of 78.4 tokens",Confident,"https://arxiv.org/abs/2310.17680 (was withdrawn)

https://www.microsoft.com/en-us/research/wp-content/uploads/2023/11/CodeFusion-Revised-CameraReady.pdf",CODEFUSION: A Pre-trained Diffusion Model for Code Generation,17.0,"Mukul Singh, José Cambronero, Sumit Gulwani, Vu Le, Carina Negreanu, Gust Verbruggen","Imagine a developer who can only change their last line of code, how often would they have to start writing a function from scratch before it is correct? Auto-regressive models for code generation from natural language have a similar limitation: they do not easily allow reconsidering earlier tokens generated. We introduce CodeFusion, a pre-trained diffusion code generation model that addresses this limitation by iteratively denoising a complete program conditioned on the encoded natural language. We evaluate CodeFusion on the task of natural language to code generation for Bash, Python, and Microsoft Excel conditional formatting (CF) rules. Experiments show that CodeFusion (75M parameters) performs on par with state-of-the-art auto-regressive systems (350M-175B parameters) in top-1 accuracy and outperforms them in top-3 and top-5 accuracy due to its better balance in diversity versus quality.","Industry,Industry","United States of America,Multinational,India,Belgium,United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational",SOTA improvement,"See Table 1, SOTA in Python code generation",,11.0,"""The system used to run the experiments uses an Intel Core i7 processor (base at 1.8 GHz) along with 4 V100 GPU units, a 64-bit operating system, and 56 GB RAM. CODEFUSION took 8 hours to pre-train and 3 hours to fine-tune on average for each dataset.""",NVIDIA V100,4.0,,8.542235671062665,,2381.36215809478,,,,,,Unreleased,Unreleased,,,,
DALL·E 3,OpenAI,2023-10-19,Image generation,"Image generation,Text-to-image",,,,,Unspecified unreleased,,,Unknown,https://cdn.openai.com/papers/dall-e-3.pdf,Improving Image Generation with Better Captions,622.0,"James Betker, Gabriel Goh, Li Jing, Tim Brooks, Jianfeng Wang, Linjie Li, Long Ouyang, Juntang Zhuang, Joyce Lee, Yufei Guo, Wesam Manassra, Prafulla Dhariwal, Casey Chu, Yunxin Jiao, Aditya Ramesh","We show that prompt following abilities of text-to-image models can be substantially improved by training on highly descriptive generated image captions.
Existing text-to-image models struggle to follow detailed image descriptions and often ignore words or confuse the meaning of prompts. We hypothesize that this issue stems from noisy and inaccurate image captions in the training dataset. We address this by training a bespoke image captioner and use it to recaption the training dataset. We then train several text-to-image models and find that training on these synthetic captions reliably improves prompt following ability. Finally, we use these findings to build DALL-E 3: a new text-to-image generation system, and benchmark its performance on an evaluation designed to measure prompt following, coherence, and aesthetics, finding that it compares favorably to competitors. We publish samples and code for these evaluations so that future research can continue optimizing this important aspect of text-to-image systems.",Industry,United States of America,SOTA improvement,,,,,,,,,,,,,,,,API access,Unreleased,,https://platform.openai.com/docs/models/dall-e,,
ERNIE 4.0,Baidu,2023-10-17,"Multimodal,Language,Video,Image generation","Chat,Language modeling/generation,Video generation,Image generation",,"""similar architecture with 3.5 version""  -interpreter dub at 01:25:08 https://www.youtube.com/watch?v=wYozcsavRuM",,"Unlikely to be >1e25 FLOP, ERNIE 4.5 was <1e25 FLOP.

may be mentioned here https://www.youtube.com/watch?v=wYozcsavRuM",,,,Unknown,https://www.prnewswire.com/news-releases/baidu-launches-ernie-4-0-foundation-model-leading-a-new-wave-of-ai-native-applications-301958681.html,"Baidu Launches ERNIE 4.0 Foundation Model, Leading a New Wave of AI-Native Applications",,,"Baidu, Inc. (NASDAQ: BIDU and HKEX: 9888), a leading AI company with strong Internet foundation, today hosted its annual flagship technology conference Baidu World 2023 in Beijing, marking the conference's return to an offline format after four years. With the theme ""Prompt the World,"" this year's Baidu World conference saw Baidu launch ERNIE 4.0, Baidu's next-generation and most powerful foundation model offering drastically enhanced core AI capabilities. Baidu also showcased some of its most popular applications, solutions, and products re-built around the company's state-of-the-art generative AI.                                                                               

Robin Li, Co-founder, Chairman and CEO of Baidu, announced ERNIE 4.0 at Baidu World 2023
""ERNIE 4.0 has achieved a full upgrade with drastically improved performance in understanding, generation, reasoning, and memory,"" Robin Li, Co-founder, Chairman and CEO of Baidu, said at the event. ""These four core capabilities form the foundation of AI-native applications and have now unleashed unlimited opportunities for new innovations.""

",Industry,China,Significant use,"Likely SOTA for Mandarin? But very little info available.

Lots of users (https://www.cnn.com/2023/12/15/tech/gpt4-china-baidu-ernie-ai-comparison-intl-hnk/index.html):

""Baidu says ERNIE has racked up 70 million users. That’s compared with 150 million users for ChatGPT, according to an estimate from Similarweb, a digital data and analytics company.""",,,,,,,,,,,,,,,API access,Unreleased,,"""ERNIE 4.0 is now accessible to invited users on ERNIE Bot, and the API will be available upon application to enterprise clients via Qianfan foundation model platform.""",,
RT-2-X,Google DeepMind,2023-10-13,Robotics,Robotic manipulation,55000000000.0,55B,,,Open X-Embodiment,,,Confident,https://arxiv.org/abs/2310.08864,Open X-Embodiment: Robotic Learning Datasets and RT-X Models,255.0,Open X-Embodiment Collaboration,"Large, high-capacity models trained on diverse datasets have shown remarkable successes on efficiently tackling downstream applications. In domains from NLP to Computer Vision, this has led to a consolidation of pretrained models, with general pretrained backbones serving as a starting point for many applications. Can such a consolidation happen in robotics? Conventionally, robotic learning methods train a separate model for every application, every robot, and even every environment. Can we instead train generalist X-robot policy that can be adapted efficiently to new robots, tasks, and environments? In this paper, we provide datasets in standardized data formats and models to make it possible to explore this possibility in the context of robotic manipulation, alongside experimental results that provide an example of effective X-robot policies. We assemble a dataset from 22 different robots collected through a collaboration between 21 institutions, demonstrating 527 skills (160266 tasks). We show that a high-capacity model trained on this data, which we call RT-X, exhibits positive transfer and improves the capabilities of multiple robots by leveraging experience from other platforms. More details can be found on the project website this https URL.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",SOTA improvement,"""Emergent skills evaluation. To investigate the transfer
of knowledge across robots, we conduct experiments with
the Google Robot, assessing the performance on tasks like
the ones shown in Fig. 5. These tasks involve objects and
skills that are not present in the RT-2 dataset but occur in the
Bridge dataset [95] for a different robot (the WidowX robot).
Results are shown in Table II, Emergent Skills Evaluation
column. Comparing rows (1) and (2), we find that RT-2-X
outperforms RT-2 by ∼ 3×, suggesting that incorporating
data from other robots into the training improves the range
of tasks that can be performed even by a robot that already
has large amounts of data available. Our results suggest that
co-training with data from other platforms imbues the RT-2-
X controller with additional skills for the platform that are
not present in that platform’s original dataset.""

Top10 recent paper from Sebastian Sartor 2025-05-14",,,,,,,,,,RT-2,,"""RT-2-X is trained via
co-fine-tuning (similarly to the original RT-2 [9]), with an approximately one to one split of the original VLM data
and the robotics data mixture. N""

RT-2 is in turn a fine-tune of Pali-X 55B",,,Unreleased,Unreleased,,,,
Ferret (13B),"Columbia University,Apple",2023-10-11,"Multimodal,Language,Vision","Object recognition,Language modeling",13000000000.0,13B,,"Fine-tuned from Vicuna-13B, which we don't have an estimate for. Finetuning cost is ~4e19.

""Training Details. We initialize the image encoder with CLIP-ViT-L/14@336p, the LLM with Vicuna, and the projection layer with LLaVA’s first-stage weights, leaving the visual sampler randomly initialized. After the initialization, Ferret is trained on the aforementioned GRIT data for three epochs, optimized by Loshchilov & Hutter (2017) with a learning rate of 2e − 5 and a batch size of 128. The training takes ∼5/2.5 days on 8 A100 GPU for a Ferret-13B/7B.""

5 * 24 * 3600 * 0.3 utilization (assumption) * 312 TFLOP/s = 4.04e19",GRIT,,,Confident,https://arxiv.org/abs/2310.07704,Ferret: Refer and Ground Anything Anywhere at Any Granularity,193.0,"Haoxuan You, Haotian Zhang, Zhe Gan, Xianzhi Du, Bowen Zhang, Zirui Wang, Liangliang Cao, Shih-Fu Chang, Yinfei Yang","We introduce Ferret, a new Multimodal Large Language Model (MLLM) capable of understanding spatial referring of any shape or granularity within an image and accurately grounding open-vocabulary descriptions. To unify referring and grounding in the LLM paradigm, Ferret employs a novel and powerful hybrid region representation that integrates discrete coordinates and continuous features jointly to represent a region in the image. To extract the continuous features of versatile regions, we propose a spatial-aware visual sampler, adept at handling varying sparsity across different shapes. Consequently, Ferret can accept diverse region inputs, such as points, bounding boxes, and free-form shapes. To bolster the desired capability of Ferret, we curate GRIT, a comprehensive refer-and-ground instruction tuning dataset including 1.1M samples that contain rich hierarchical spatial knowledge, with 95K hard negative data to promote model robustness. The resulting model not only achieves superior performance in classical referring and grounding tasks, but also greatly outperforms existing MLLMs in region-based and localization-demanded multimodal chatting. Our evaluations also reveal a significantly improved capability of describing image details and a remarkable alleviation in object hallucination.","Academia,Industry","United States of America,United States of America",SOTA improvement,"claimed SOTA on a new benchmark ""To evaluate this new capability, we introduce Ferret-Bench, covering three new types of tasks: Referring Description, Referring Reasoning, and Grounding in Conversation. We benchmark existing MLLMs and observe that Ferret can outperform the best of them by 20.4% on average.""",3.0,120.0,"""The training takes ∼5/2.5 days on 8 A100 GPU for a Ferret-13B/7B.""",NVIDIA A100,8.0,,,,6352.420700106825,Vicuna-13B v0,4.04e+19,"""The training takes ~5 days on 8 A100 GPU for a Ferret-13B""

5 * 24 * 3600 * 0.3 utilization (assumption) * 312 TFLOP/s = 4.04e19",,,Open weights (non-commercial),Open (non-commercial),Open source,"https://github.com/apple/ml-ferret?tab=License-1-ov-file#readme
confusingly, the license page in the repo is permissive and MIT-like, but the README says ""The data, and code is intended and licensed for research use only. They are also restricted to uses that follow the license agreement of LLaMA, Vicuna and GPT-4. The dataset is CC BY NC 4.0 (allowing only non-commercial use) and models trained using the dataset should not be used outside of research purposes."" 
train script: https://github.com/apple/ml-ferret/blob/main/experiments/ferret_13b_train.sh ",BF16,
FinGPT-13B,"University of California Los Angeles (UCLA),Columbia University,New York University (NYU)",2023-10-07,Language,"Named entity recognition,Sentiment classification,Language modeling/generation",13000000000.0,"Finetunes using LoRA, so only trains 3.67 million parameters",1.6e+23,From Llama 2-13B,,,,Likely,https://arxiv.org/abs/2310.04793; https://github.com/AI4Finance-Foundation/FinGPT,FinGPT: Instruction Tuning Benchmark for Open-Source Large Language Models in Financial Datasets,33.0,"Neng Wang, Hongyang Yang, Christina Dan Wang","In the swiftly expanding domain of Natural Language Processing (NLP), the potential of GPT-based models for the financial sector is increasingly evident. However, the integration of these models with financial datasets presents challenges, notably in determining their adeptness and relevance. This paper introduces a distinctive approach anchored in the Instruction Tuning paradigm for open-source large language models, specifically adapted for financial contexts. Through this methodology, we capitalize on the interoperability of open-source models, ensuring a seamless and transparent integration. We begin by explaining the Instruction Tuning paradigm, highlighting its effectiveness for immediate integration. The paper presents a benchmarking scheme designed for end-to-end training and testing, employing a cost-effective progression. Firstly, we assess basic competencies and fundamental tasks, such as Named Entity Recognition (NER) and sentiment analysis to enhance specialization. Next, we delve into a comprehensive model, executing multi-task operations by amalgamating all instructional tunings to examine versatility. Finally, we explore the zero-shot capabilities by earmarking unseen tasks and incorporating novel datasets to understand adaptability in uncharted terrains. Such a paradigm fortifies the principles of openness and reproducibility, laying a robust foundation for future investigations in open-source financial large language models (FinLLMs).","Academia,Academia,Academia","United States of America,United States of America,United States of America",SOTA improvement,SOTA for financial sentiment analysis,,17.25,https://github.com/AI4Finance-Foundation/FinGPT?tab=readme-ov-file,NVIDIA GeForce RTX 3090,1.0,,,"Finetuning cost for FinGPT v3.3 given as $17.25 at github repo; paper notes cost to train a financial model using their methods are ""typically"" between $100 - $300",381.7900590727425,Llama 2-13B,6.532488e+17,"fine-tuned Llama 2 13B

RTX 3090 for 17 hours, at a cost of $17

35.5 trillion flops * 17 * 3600 * 0.3 = 6.532488e+17",,,Open weights (unrestricted),Open source,Open source,"MIT license (though probably subject to Llama 2 license too)
https://github.com/AI4Finance-Foundation/FinGPT/blob/master/LICENSE

train code: https://github.com/AI4Finance-Foundation/FinGPT/blob/master/fingpt/FinGPT_Benchmark/train.sh ",FP16,
CTM (CIFAR-10),"Stanford University,Sony",2023-10-01,Image generation,"Image generation,Text-to-image",,,,"Almost certainly <1e23 FLOP due to the small scale experiments.

""We use 4×V100 (16G) GPUs for CIFAR-10 experiment""
100K training iterations
",CIFAR-10,60000.0,100K training iterations / 60K images in the training dataset = 1.7 epochs,Unknown,https://arxiv.org/abs/2310.02279v1,Consistency Trajectory Models: Learning Probability Flow ODE Trajectory of Diffusion,108.0,"Dongjun Kim, Chieh-Hsin Lai, Wei-Hsiang Liao, Naoki Murata, Yuhta Takida, Toshimitsu Uesaka, Yutong He, Yuki Mitsufuji, Stefano Ermon","Consistency Models (CM) (Song et al., 2023) accelerate score-based diffusion model sampling at the cost of sample quality but lack a natural way to trade-off quality for speed. To address this limitation, we propose Consistency Trajectory Model (CTM), a generalization encompassing CM and score-based models as special cases. CTM trains a single neural network that can -- in a single forward pass -- output scores (i.e., gradients of log-density) and enables unrestricted traversal between any initial and final time along the Probability Flow Ordinary Differential Equation (ODE) in a diffusion process. CTM enables the efficient combination of adversarial training and denoising score matching loss to enhance performance and achieves new state-of-the-art FIDs for single-step diffusion model sampling on CIFAR-10 (FID 1.73) and ImageNet at 64X64 resolution (FID 2.06). CTM also enables a new family of sampling schemes, both deterministic and stochastic, involving long jumps along the ODE solution trajectories. It consistently improves sample quality as computational budgets increase, avoiding the degradation seen in CM. Furthermore, CTM's access to the score accommodates all diffusion model inference techniques, including exact likelihood computation.","Academia,Industry","United States of America,Japan",SOTA improvement,"""CTM... achieves new state-of-the-art FIDs for single-step diffusion model sampling on CIFAR-10 (FID 1.73)""",1.7,,,NVIDIA V100,4.0,,,,2382.6883131695167,,,,128.0,,Open weights (unrestricted),Open source,Open source,"MIT license
https://github.com/Kim-Dongjun/ctm-cifar10
https://drive.google.com/drive/folders/1ei4PLmTrAlj-j_yUfLqXSpI5OOIqDlgv",FP16,
Amazon Titan,Amazon,2023-09-28,"Language,Image generation","Semantic search,Image generation,Language modeling/generation,Code generation,Chat,Text-to-image,Translation",200000000000.0,"200B dense model
https://importai.substack.com/p/import-ai-365-wmd-benchmark-amazon",4.7999999999999996e+24,"trained using NVIDIA NeMo: https://blogs.nvidia.com/blog/nemo-amazon-titan/

13,760 NVIDIA A100 chips (using 1,720 P4d nodes). It took 48 days to train.
from https://importai.substack.com/p/import-ai-365-wmd-benchmark-amazon

counting operations: 6*200000000000*4000000000000=4.8e+24

gpu usage: 312000000000000(FLOP/s)*0.3*13760*1152*3600=5.3413281792e+24",,4000000000000.0,"4T tokens of data, based on comments from amazon engineer James Hamilton at a 2024 talk: https://perspectives.mvdirona.com/2024/01/cidr-2024/
Also cited here:
https://lifearchitect.ai/titan/",Likely,https://aws.amazon.com/bedrock/titan/,,,,,Industry,United States of America,Training cost,,,1152.0,,NVIDIA A100,13760.0,0.2696,7656704.716,,10929327.206416875,,,,,,API access,Unreleased,,,,True
Show-1,National University of Singapore,2023-09-27,Video,"Video generation,Text-to-video",,,,,WebVid-10M,,"WebVid-10M
10.7M video-caption pairs. 52K total video hours.",Unknown,https://arxiv.org/abs/2309.15818,Show-1: Marrying Pixel and Latent Diffusion Models for Text-to-Video Generation,,"David Junhao Zhang, Jay Zhangjie Wu, Jia-Wei Liu, Rui Zhao, Lingmin Ran, Yuchao Gu, Difei Gao, Mike Zheng Shou","Significant advancements have been achieved in the realm of large-scale pre-trained text-to-video Diffusion Models (VDMs). However, previous methods either rely solely on pixel-based VDMs, which come with high computational costs, or on latent-based VDMs, which often struggle with precise text-video alignment. In this paper, we are the first to propose a hybrid model, dubbed as Show-1, which marries pixel-based and latent-based VDMs for text-to-video generation. Our model first uses pixel-based VDMs to produce a low-resolution video of strong text-video correlation. After that, we propose a novel expert translation method that employs the latent-based VDMs to further upsample the low-resolution video to high resolution. Compared to latent VDMs, Show-1 can produce high-quality videos of precise text-video alignment; Compared to pixel VDMs, Show-1 is much more efficient (GPU memory usage during inference is 15G vs 72G). We also validate our model on standard video generation benchmarks. Our code and model weights are publicly available at this https URL.",Academia,Singapore,SOTA improvement,"""Our approach achieves state-of-the-art performance on standard benchmarks including UCF-101 and MSR-VTT.""",,,,NVIDIA A100,,,,,,,,,,,Open weights (non-commercial),Unreleased,Open access (non-commercial),"https://github.com/showlab/Show-1 don't see training code
Attribution-NonCommercial 4.0 International
",,
GPT-4V,OpenAI,2023-09-25,"Multimodal,Vision,Language","Language modeling,Visual question answering",,,,,Unspecified unreleased,,,Unknown,https://cdn.openai.com/papers/GPTV_System_Card.pdf,GPT-4V(ision) system card,,,"GPT-4 with vision (GPT-4V) enables users to instruct GPT-4 to analyze image inputs provided by the user, and is the latest capability we are making broadly available. Incorporating additional modalities (such as image inputs) into large language models (LLMs) is viewed by some as a key frontier in artificial intelligence research and development. Multimodal LLMs offer the possibility of expanding the impact of language-only systems with novel interfaces and capabilities, enabling them to solve new tasks and provide novel experiences for their users. In this system card, we analyze the safety properties of GPT-4V. Our work on safety for GPT-4V builds on the work done for GPT-4 and here we dive deeper into the evaluations, preparation, and mitigation work done specifically for image inputs.",Industry,United States of America,Significant use,Incorporated into ChatGPT,,,,,,,,,,GPT-4,,,,,API access,Unreleased,,,,
AlphaMissense,Google DeepMind,2023-09-22,Biology,"Protein pathogenicity prediction,Protein folding prediction,Proteins",93000000.0,"""The model architecture is similar to that of AlphaFold (21), with minor modifications""
Reference is to the AlphaFold 2 paper; that model had 93 million parameters",,"From supplementary materials: ""We independently trained three AlphaFold models and fine-tuned them independently on variants. We followed the training procedure described in (21), (only the “Initial training” stage) ... AF training is carried out for about 7e6 steps on single-chain structures ... Fine-tuning is carried out @until auROC of the evaluation set converges (about 350k samples, each training sample contains maximum 50 variants)""

Table S4 gives details. Total samples seen across the three pretraining models are (7.8M + 7.5M + 5.85M) = 21.15M

Each sequence is cropped to 256 elements long, which suggests 5.4B tokens seen in training.","MGnify,UniRef90",9000000.0,"7800000 samples - size of training dataset (see Table S4 in supplementary materials)
+1,345,605 variants for fine-tuning (but less could be used)  see Table S1

around 9000000 samples is quite confident estimation",Likely,https://www.science.org/doi/10.1126/science.adg7492,Accurate proteome-wide missense variant effect prediction with AlphaMissense,425.0,"Jun Cheng, Guido Novati, Joshua Pan, Clare Bycroft, Akvile ̇Žemgulyte ̇, Taylor Applebaum, Alexander Pritzel, Lai Hong Wong, Michal Zielinski, Tobias Sargeant, Rosalia G. Schneider,Andrew W. Senior, John Jumper, Demis Hassabis, Pushmeet Kohli,Žiga Avsec","The vast majority of missense variants observed in the human genome are of unknown clinical significance. We present AlphaMissense, an adaptation of AlphaFold fine-tuned on human and primate variant population frequency databases to predict missense variant pathogenicity. By combining structural context and evolutionary conservation, our model achieves state-of-the-art results across a wide range of genetic and experimental benchmarks, all without explicitly training on such data. The average pathogenicity score of genes is also predictive for their cell essentiality, capable of identifying short essential genes that existing statistical approaches are underpowered to detect. As a resource to the community, we provide a database of predictions for all possible human single amino acid substitutions and classify 89% of missense variants as either likely benign or likely pathogenic.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",SOTA improvement,"""By combining structural context and evolutionary conservation, our model achieves state-of-the-art results across a wide range of genetic and experimental benchmarks, all without explicitly training on such data."" [Abstract]",4.0,,,,,,,,,AlphaFold 2,,,,,Unreleased,Open source,Open source,"Apache for code. weights not released
https://github.com/google-deepmind/alphamissense",BF16,
Robot Parkour,"Shanghai Qi Zhi institute,Stanford University,Carnegie Mellon University (CMU),Tsinghua University",2023-09-12,Robotics,Animal (human/non-human) imitation,500000.0,"Parkour policy details on page 8, table 11.",,"The paper provides some details on the training time and hardware used:

Each specialized skill policy (climbing, leaping, etc) was pre-trained with soft dynamics constraints for 12 hours using 1 Nvidia RTX 3090 GPU.
The skills were then fine-tuned with hard dynamics constraints for 6 hours each.
The final parkour policy distillation process used 4 computers with 1 RTX 3090 GPU each, training for an unspecified amount of time.
So the total training time was at least 12 + 6 x 5 = 42 hours for the initial skills, plus an additional unknown time for the distillation.

The hardware used was high-end Nvidia RTX 3090 GPUs, which at the time of paper writing would have been top of the line GPUs. Multiple GPUs were used in parallel during the distillation stage.",,,,Confident,https://arxiv.org/abs/2309.05665,Robot Parkour Learning,97.0,"Ziwen Zhuang, Zipeng Fu, Jianren Wang, Christopher Atkeson, Soeren Schwertfeger, Chelsea Finn, Hang Zhao","Parkour is a grand challenge for legged locomotion that requires robots to overcome various obstacles rapidly in complex environments. Existing methods can generate either diverse but blind locomotion skills or vision-based but specialized skills by using reference animal data or complex rewards. However, autonomous parkour requires robots to learn generalizable skills that are both vision-based and diverse to perceive and react to various scenarios. In this work, we propose a system for learning a single end-to-end vision-based parkour policy of diverse parkour skills using a simple reward without any reference motion data. We develop a reinforcement learning method inspired by direct collocation to generate parkour skills, including climbing over high obstacles, leaping over large gaps, crawling beneath low barriers, squeezing through thin slits, and running. We distill these skills into a single vision-based parkour policy and transfer it to a quadrupedal robot using its egocentric depth camera. We demonstrate that our system can empower two different low-cost robots to autonomously select and execute appropriate parkour skills to traverse challenging real-world environments.","Academia,Academia,Academia","China,United States of America,United States of America,China",SOTA improvement,,,,,NVIDIA GeForce RTX 3090,,,,,,,,,,,Unreleased,Open source,Open source,"MIT license for training and inference code:
https://github.com/ZiwenZhuang/parkour",,
Falcon-180B,Technology Innovation Institute,2023-09-06,Language,Language modeling,180000000000.0,"""Falcon 180B is a super-powerful language model with 180 billion parameters""",3.76e+24,"43,500 petaflop-days per Table 1 of the paper

43500 * 1e15 * 24 * 3600 = 3.76e24


C = 6ND = 6 FLOP/token/parameter * 3.5 trillion tokens * 180 billion parameters = 3.78*10^24 FLOP",RefinedWeb,2625000000000.0,3.5 trillion tokens * (~3 words per 4 tokens) ~= 2.625 trillion words,Confident,https://falconllm.tii.ae/falcon-180b.html; https://arxiv.org/abs/2311.16867,The Falcon Series of Open Language Models,261.0,"Ebtesam Almazrouei, Hamza Alobeidli, Abdulaziz Alshamsi, Alessandro Cappelli, Ruxandra Cojocaru, Mérouane Debbah, Étienne Goffinet, Daniel Hesslow, Julien Launay, Quentin Malartic, Daniele Mazzotta, Badreddine Noune, Baptiste Pannier, Guilherme Penedo","Falcon 180B is a super-powerful language model with 180 billion parameters, trained on 3.5 trillion tokens. It's currently at the top of the Hugging Face Leaderboard for pre-trained Open Large Language Models and is available for both research and commercial use.

This model performs exceptionally well in various tasks like reasoning, coding, proficiency, and knowledge tests, even beating competitors like Meta's LLaMA 2.

Among closed source models, it ranks just behind OpenAI's GPT 4, and performs on par with Google's PaLM 2 Large, which powers Bard, despite being half the size of the model.",Government,United Arab Emirates,Training cost,"""It's currently at the top of the Hugging Face Leaderboard for pre-trained Open Large Language Models and is available for both research and commercial use.""

""This model performs exceptionally well in various tasks like reasoning, coding, proficiency, and knowledge tests, even beating competitors like Meta's LLaMA 2.""",1.0,4320.0,"Stanford CRFM foundation model ecosystem graph data page https://crfm.stanford.edu/ecosystem-graphs/index.html?asset=Falcon-180B says 9 months, which is the maximum possible amount of time: training began sometime in 2023, and it was released in September. 

However, 6 months is more realistic. That is the length of the gap between Falcon 40B and Falcon 180B. Additionally, the amount of compute is specified in the paper, so there is only one degree of freedom in the uncertain values of training duration and hardware utilization rate. At six months, the utilization is unusually low, so the training was probably not longer than that.",NVIDIA A100 SXM4 40 GB,4096.0,0.1892,10368712.43,"From Hugging Face:
""Falcon-180B was trained on up to 4,096 A100 40GB GPUs, using a 3D parallelism strategy (TP=8, PP=8, DP=64) combined with ZeRO.""
""Falcon-180B was trained on AWS SageMaker, on up to 4,096 A100 40GB GPUs in P4d instances.""
https://huggingface.co/tiiuae/falcon-180B

Utilization must have been at least 12.5%, and they probably did not use the whole 4096 GPU cluster for 9 months, so it was probably higher. Lower bound estimate:
https://www.wolframalpha.com/input?i=%286+FLOP+*+3.5+trillion+*+180+billion%29+%2F+%284096*312+teraFLOPS+*+9+months%29",3254975.4289709157,,,,4194304.0,"from paper (https://arxiv.org/pdf/2311.16867.pdf):

Batch size 2048 (presumably sequences) per Table 16. Warmed up using smaller batches for first 100B tokens.

""All Falcon models are pretrained with a 2,048 sequence length""

2048*2048 = 4194304",Open weights (restricted use),Unreleased,,"""Falcon 180b can be commercially used but under very restrictive conditions, excluding any ""hosting use""."" https://huggingface.co/blog/falcon-180b",BF16,True
Swift,Intel Labs,2023-08-30,Robotics,Helicopter driving,56804.0,"The control network is an MLP with input dimension 31, two hidden layers of size 128, and an output of dimension 4.
(31+1)*128+(128+1)*128+(128+1)*4 = 21124

Gate detector is a 6 layer U-net with 
8*(3^3*3+1) + 16*(3^2*8+1) + 16*(3^2*16+1) + 16*(5^2*16+1) + 16*(7^2*16+1) + 16*(7^2*16+1) = 35680

35680 + 21124 = 56804",5.337e+16,"Policies are trained for a total of 1 × 108 environment interactions, which takes 50 min on a workstation (i9 12900K, RTX 3090, 32 GB RAM DDR5). Fine-tuning is performed for 2 × 107 environment interactions.

35.58 TFLOPS * 50 min * 60 s/min * 0.50 utilization = 5.337*10^16 FLOP",,,,Likely,https://www.nature.com/articles/s41586-023-06419-4,Champion-level drone racing using deep reinforcement learning,101.0,"Elia Kaufmann, Leonard Bauersfeld, Antonio Loquercio, Matthias Müller, Vladlen Koltun, Davide Scaramuzza ","First-person view (FPV) drone racing is a televised sport in which professional competitors pilot high-speed aircraft through a 3D circuit. Each pilot sees the environment from the perspective of their drone by means of video streamed from an onboard camera. Reaching the level of professional pilots with an autonomous drone is challenging because the robot needs to fly at its physical limits while estimating its speed and location in the circuit exclusively from onboard sensors1. Here we introduce Swift, an autonomous system that can race physical vehicles at the level of the human world champions. The system combines deep reinforcement learning (RL) in simulation with data collected in the physical world. Swift competed against three human champions, including the world champions of two international leagues, in real-world head-to-head races. Swift won several races against each of the human champions and demonstrated the fastest recorded race time. This work represents a milestone for mobile robotics and machine intelligence2, which may inspire the deployment of hybrid learning-based solutions in other physical systems.",Industry,"Multinational,United States of America",SOTA improvement,"""Our work marks the first time, to our knowledge, that an autonomous mobile robot achieved world-champion-level performance in a real-world competitive sport.""",,0.833,"50 minutes (training details, page 8)",NVIDIA GeForce RTX 3090,1.0,,,,382.113280348051,,,,,,Unreleased,Unreleased,,"""Pseudocode for Swift detailing the training process and algorithms can be found in the file ‘pseudocode.zip’ on Zenodo at https://doi.org/10.5281/zenodo.7955278. To safeguard against potential misuse, the full source code associated with this research will not be made publicly available.""",,
Jais,"Cerebras Systems,Mohamed bin Zayed University of Artificial Intelligence (MBZUAI),Inception",2023-08-29,Language,"Language modeling,Chat,Translation",13000000000.0,"""With 13 billion parameters, they demonstrate better knowledge and reasoning capabilities in Arabic""",3.08e+22,C = 6ND = 6 * 13 billion params * 395 billion tokens = 3.081e+22 FLOP,"Abu El-Khair,Aranews,ArabicText 2022,C4 Arabic,Arabic Wikipedia,ArabicNews 2020,Maktabah,United Nations Parallel Corpus,The Pile,Books3,arXiv,PubMed Central,WebText2,English Wikipedia,FreeLaw,PubMed Abstracts,DeepMind Mathematics,Project Gutenberg,BookCorpus2,EuroParl,PhilPapers,YouTube Subtitles,NIH Grant Abstracts,Enron Emails,GitHub",300000000000.0,395B tokens ~= 300B words,Confident,https://arxiv.org/abs/2308.16149,Jais and Jais-chat: Arabic-Centric Foundation and Instruction-Tuned Open Generative Large Language Models,24.0,"Neha Sengupta, Sunil Kumar Sahu, Bokang Jia, Satheesh Katipomu, Haonan Li, Fajri Koto, Osama Mohammed Afzal, Samta Kamboj, Onkar Pandit, Rahul Pal, Lalit Pradhan, Zain Muhammad Mujahid, Massa Baali, Alham Fikri Aji, Zhengzhong Liu, Andy Hock, Andrew Feldman, Jonathan Lee, Andrew Jackson, Preslav Nakov, Timothy Baldwin, Eric Xing","We introduce Jais and Jais-chat, new state-of-the-art Arabic-centric foundation and instruction-tuned open generative large language models (LLMs). The models are based on the GPT-3 decoder-only architecture and are pretrained on a mixture of Arabic and English texts, including source code in various programming languages. With 13 billion parameters, they demonstrate better knowledge and reasoning capabilities in Arabic than any existing open Arabic and multilingual models by a sizable margin, based on extensive evaluation. Moreover, the models are competitive in English compared to English-centric open models of similar size, despite being trained on much less English data. We provide a detailed description of the training, the tuning, the safety alignment, and the evaluation of the models. We release two open versions of the model —the foundation Jais model, and an instruction-tuned Jais-chat variant— with the aim of promoting research on Arabic LLMs.","Industry,Academia","Multinational,United Arab Emirates,United States of America",SOTA improvement,SOTA at Arabic language tasks.,,600.0,2023 June 25 to July 18 = 25 days = 600 hours,,,,,,,,,,3932160.0,"""After packing, we used a global batch size of 1,920 sequences of 2,048 tokens each. """,Open weights (unrestricted),Unreleased,,"apache 2.0
https://huggingface.co/inceptionai/jais-13b",,
PeptideBERT,Carnegie Mellon University (CMU),2023-08-28,Biology,Proteins,,,4.9e+16,"""Compute for fine-tuning ProtBERT: 1 NVidia GeForce GTX 1080Ti, 30 epochs, batch size 32, model trained for individual tasks with training time ranging from 58-116 minutes, assuming 
from Table 1 we have 244 minutes
11.34e12 FLOPs and 0.3 utilization rate FLOP = 244 min * 60 sec/min * 11.34e12 FLOP/sec *0.3 = 4.9e16 FLOP,",,21700000000.99997,"Pretraining:
217,000,000 sequences × 100 residues = 2.17 × 10¹⁰ tokens

Fine-tuning sequences:
9,316 + 29,892 + 17,185 = 56,393 sequences
56,393 × 100 residues = 5.64 × 10⁶ tokens

Total tokens:
2.17 × 10¹⁰ + 5.64 × 10⁶ ≈ 2.17 × 10¹⁰",Confident,https://arxiv.org/abs/2309.03099,PeptideBERT: A language Model based on Transformers for Peptide Property Prediction,,"Chakradhar Guntuboina, Adrita Das, Parisa Mollaei, Seongwon Kim, and Amir Barati Farimani","Recent advances in Language Models have enabled the protein modeling community with a powerful tool since protein sequences can be represented as text. Specifically, by taking advantage of Transformers, sequence-to-property prediction will be amenable without the need for explicit structural data. In this work, inspired by recent progress in Large Language Models (LLMs), we introduce PeptideBERT, a protein language model for predicting three key properties of peptides (hemolysis, solubility, and non- fouling). The PeptideBert utilizes the ProtBERT pretrained transformer model with 12 attention heads and 12 hidden layers. We then finetuned the pretrained model for the three downstream tasks. Our model has achieved state of the art (SOTA) for predicting Hemolysis, which is a task for determining peptide’s potential to induce red blood cell lysis. Our PeptideBert non-fouling model also achieved remarkable accuracy in predicting peptide’s capacity to resist non-specific interactions. This model, trained predominantly on shorter sequences, benefits from the dataset where negative examples are largely associated with insoluble peptides. Codes, models, and data used in this study are freely available at: https://github.com/ChakradharG/PeptideBERT",Academia,United States of America,SOTA improvement,"""Our model has achieved state of the art (SOTA) for predicting Hemolysis, which is a task for determining peptide’s potential to induce red blood cell lysis.""",30.0,4.067,244 minues from Table 1,NVIDIA GeForce GTX 1080 Ti,1.0,,,,272.95021398005304,ProtBERT-UniRef,4.980528e+16,"""Compute for fine-tuning ProtBERT: 1 NVidia GeForce GTX 1080Ti, 30 epochs, batch size 32, model trained for individual tasks with training time ranging from 58-116 minutes, assuming 
from Table 1 we have 244 minutes
11.34e12 FLOPs and 0.3 utilization rate FLOP = 244 min * 60 sec/min * 11.34e12 FLOP/sec *0.3 = 4.9e16 FLOP,",,,Open weights (unrestricted),Open source,Open source,"MIT (models, training, inference): https://github.com/ChakradharG/PeptideBERT ",,
Qwen-VL,Alibaba,2023-08-24,"Multimodal,Language,Vision","Image captioning,Chat,Question answering,Visual question answering",9600000000.0,9.6B total - Table 1,,"Qwen-7B and ViT as base models, trained on 1.5B image-text pairs",,1400000000.0,1.4B text-image pairs,Likely,https://arxiv.org/abs/2308.12966,"Qwen-VL: A Versatile Vision-Language Model for Understanding, Localization, Text Reading, and Beyond",405.0,"Jinze Bai, Shuai Bai, Shusheng Yang, Shijie Wang, Sinan Tan, Peng Wang, Junyang Lin, Chang Zhou, Jingren Zhou","We introduce the Qwen-VL series, a set of large-scale vision-language models designed to perceive and understand both text and images. Comprising Qwen-VL and Qwen-VL-Chat, these models exhibit remarkable performance in tasks like image captioning, question answering, visual localization, and flexible interaction. The evaluation covers a wide range of tasks including zero-shot captioning, visual or document visual question answering, and grounding. We demonstrate the Qwen-VL outperforms existing Large Vision Language Models (LVLMs). We present their architecture, training, capabilities, and performance, highlighting their contributions to advancing multimodal artificial intelligence. Code, demo and models are available at https://github.com/QwenLM/Qwen-VL.",Industry,China,SOTA improvement,"""As the results shown, our Qwen-VL and Qwen-VL-Chat both achieve obviously better results compared to previous
generalist models in terms of both two tasks. Specifically, on zero-shot image caption task, Qwen-VL achieves
state-of-the-art performance (i.e., 85.8 CIDEr score) on the Flickr30K karpathy-test split, even outperforms
previous generalist models with much more parameters (e.g., Flamingo-80B with 80B parameters).""",1.0,,,,,,,,,Qwen-7B,,"50k steps, 30k batch size (table 8)",,,Open weights (restricted use),Unreleased,,,BF16,
GGNN,"Westlake University,Tsinghua University,Toyota Technological Institute at Chicago",2023-08-05,Biology,"Proteins,Protein interaction prediction",,"ESM-2 650M is used as the main PLM, they run ablations with versions up to 3B. Unclear how many parameters are are in the geometric graph neural network module.",7.56e+21,"ESM-2 650M is very likely the majority of FLOPs, since they only used 2 A100s (ESM-2 650M used 512 V100s for 8 days). As such I'm reporting the compute from ESM-2 650M here only.",,,,Confident,https://www.nature.com/articles/s42003-023-05133-1,Integration of pre-trained protein language models into geometric deep learning networks,19.0,"Fang Wu, Lirong Wu, Dragomir Radev, Jinbo Xu and Stan Z. Li","Geometric deep learning has recently achieved great success in non-Euclidean domains, and learning on 3D structures of large biomolecules is emerging as a distinct research area. However, its efficacy is largely constrained due to the limited quantity of structural data. Meanwhile, protein language models trained on substantial 1D sequences have shown burgeoning capabilities with scale in a broad range of applications. Several preceding studies consider combining these different protein modalities to promote the representation power of geometric neural networks but fail to present a comprehensive understanding of their benefits. In this work, we integrate the knowledge learned by well-trained protein language models into several state-of-the-art geometric networks and evaluate a variety of protein representation learning benchmarks, including protein-protein interface prediction, model quality assessment, protein-protein rigid-body docking, and binding affinity prediction. Our findings show an overall improvement of 20% over baselines. Strong evidence indicates that the incorporation of protein language models’ knowledge enhances geometric networks’ capacity by a significant margin and can be generalized to complex tasks.","Academia,Academia,Academia","China,China,United States of America",SOTA improvement,"""In this work, we integrate the knowledge learned by well-trained protein language models into several state-of-the-art geometric networks and evaluate a variety of protein representation learning benchmarks, including protein-protein interface prediction, model quality assessment, protein-protein rigid-body docking, and binding affinity prediction. Our findings show an overall improvement of 20% over baselines.""",,,,NVIDIA A100 SXM4 80 GB,2.0,,,,1590.4764725839211,ESM2-650M,,,,,Unreleased,Open source,Open source,"MIT license
https://github.com/smiles724/GNN-Bottleneck",,
RT-2,Google DeepMind,2023-07-28,Robotics,Robotic manipulation,55000000000.0,"""We train two specific instantiations of RT-2 that leverage pre-trained VLMs: (1) RT-2-PaLI-X is built from 5B and 55B PaLI-X (Chen et al., 2023a), and (2) RT-2-PaLM-E is built from 12B PaLM-E (Driess et al., 2023).""

55B and 12B have similar overall performance",,"""""For RT-2-PaLI-X-55B, we use learning rate 1e-3 and batch size 2048 and co-fine-tune the model for 80K gradient steps""
Sequence length not stated",RT-1,,,Confident,https://arxiv.org/abs/2307.15818,RT-2: Vision-Language-Action Models Transfer Web Knowledge to Robotic Control,691.0,"Anthony Brohan, Noah Brown, Justice Carbajal, Yevgen Chebotar, Xi Chen, Krzysztof Choromanski, Tianli Ding, Danny Driess, Avinava Dubey, Chelsea Finn, Pete Florence, Chuyuan Fu, Montse Gonzalez Arenas, Keerthana Gopalakrishnan, Kehang Han, Karol Hausman, Alexander Herzog, Jasmine Hsu, Brian Ichter, Alex Irpan, Nikhil Joshi, Ryan Julian, Dmitry Kalashnikov, Yuheng Kuang, Isabel Leal, Lisa Lee, Tsang-Wei Edward Lee, Sergey Levine, Yao Lu, Henryk Michalewski, Igor Mordatch, Karl Pertsch, Kanishka Rao, Krista Reymann, Michael Ryoo, Grecia Salazar, Pannag Sanketi, Pierre Sermanet, Jaspiar Singh, Anikait Singh, Radu Soricut, Huong Tran, Vincent Vanhoucke, Quan Vuong, Ayzaan Wahid, Stefan Welker, Paul Wohlhart, Jialin Wu, Fei Xia, Ted Xiao, Peng Xu, Sichun Xu, Tianhe Yu, Brianna Zitkovich","We study how vision-language models trained on Internet-scale data can be incorporated directly into end-to-end robotic control to boost generalization and enable emergent semantic reasoning. Our goal is to enable a single end-to-end trained model to both learn to map robot observations to actions and enjoy the benefits of large-scale pretraining on language and vision-language data from the web. To this end, we propose to co-fine-tune state-of-the-art vision-language models on both robotic trajectory data and Internet-scale vision-language tasks, such as visual question answering. In contrast to other approaches, we propose a simple, general recipe to achieve this goal: in order to fit both natural language responses and robotic actions into the same format, we express the actions as text tokens and incorporate them directly into the training set of the model in the same way as natural language tokens. We refer to such category of models as vision-language-action models (VLA) and instantiate an example of such a model, which we call RT-2. Our extensive evaluation (6k evaluation trials) shows that our approach leads to performant robotic policies and enables RT-2 to obtain a range of emergent capabilities from Internet-scale training. This includes significantly improved generalization to novel objects, the ability to interpret commands not present in the robot training data (such as placing an object onto a particular number or icon), and the ability to perform rudimentary reasoning in response to user commands (such as picking up the smallest or largest object, or the one closest to another object). We further show that incorporating chain of thought reasoning allows RT-2 to perform multi-stage semantic reasoning, for example figuring out which object to pick up for use as an improvised hammer (a rock), or which type of drink is best suited for someone who is tired (an energy drink).",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",SOTA improvement,"""We compare our method to multiple state-of-the-art baselines that challenge different aspects of our method. All of the baselines use the exact same robotic data... Here, on average, both instantiations of RT-2 perform similarly, resulting in ∼2x improvement over the next two baselines, RT-1 and MOO, and ∼6x better than the other baselines""

Top10 recent paper from Sebastian Sartor 2025-05-14",,,,,,,,,,PaLI-X,,"""For RT-2-PaLI-X-55B, we use learning rate 1e-3 and batch size 2048 and co-fine-tune the model for 80K gradient steps""

",,,Unreleased,Unreleased,,"no model weights or training code releases are mentioned
https://robotics-transformer2.github.io/",,
AudioLM,Google Research,2023-07-26,Audio,Audio generation,1500000000.0,"""We use identical decoder-only Transformers in
all stages, with 12 layers, 16 attention heads, embedding
dimension of 1024, feed-forward layer dimension of 4096
and dropout of 0.1, together with T5-style relative positional
embeddings [38], resulting in a model parameter size of
0.3B per stage.""

Three stages (figure 2), and 300M per stage. Plus 600M parameters for w2v-BERT XL, so 1.5B total",3.9e+18,"""We train each stage on 16 TPUv4s with batch size of 256 for 1M steps.""

That's for the 900M-param transformers

If there's 256 passes in each batch, then using 6ND that's 900m * 256m * 6 = 1.3e18. sanity check: 16 tpu4s is 4.4e15 FLOP/s. 1.3e18 FLOP / 4.4e15 FLOP/s is 295 seconds. adjusting for utilization it would be ~1000 seconds or 15 minutes? probably too short, so 1.3e18 seems too low.

upd there are 3 stages -> 1.3e18*3 = 3.9e+18 (Speculative due to reasoning above)",LibriLight,820800000.0,"60k hours of English speech
13680*60000 = 820800000 words

https://docs.google.com/document/d/1G3vvQkn4x_W71MKg0GmHVtzfd9m0y3_Ofcoew0v902Q/edit#heading=h.sxcem9l5k3ce",Speculative,https://arxiv.org/abs/2209.03143,AudioLM: a Language Modeling Approach to Audio Generation,446.0,"Zalán Borsos, Raphaël Marinier, Damien Vincent, Eugene Kharitonov, Olivier Pietquin, Matt Sharifi, Dominik Roblek, Olivier Teboul, David Grangier, Marco Tagliasacchi, Neil Zeghidour","We introduce AudioLM, a framework for high-quality audio generation with long-term consistency. AudioLM maps the input audio to a sequence of discrete tokens and casts audio generation as a language modeling task in this representation space. We show how existing audio tokenizers provide different trade-offs between reconstruction quality and long-term structure, and we propose a hybrid tokenization scheme to achieve both objectives. Namely, we leverage the discretized activations of a masked language model pre-trained on audio to capture long-term structure and the discrete codes produced by a neural audio codec to achieve high-quality synthesis. By training on large corpora of raw audio waveforms, AudioLM learns to generate natural and coherent continuations given short prompts. When trained on speech, and without any transcript or annotation, AudioLM generates syntactically and semantically plausible speech continuations while also maintaining speaker identity and prosody for unseen speakers. Furthermore, we demonstrate how our approach extends beyond speech by generating coherent piano music continuations, despite being trained without any symbolic representation of music.",Industry,"Multinational,United States of America,Canada,Switzerland",SOTA improvement,"Compared to other systems without text supervision, AudioLM achieves the highest
sWUGGY scores across both splits. Similarly, it also attains the
highest score in the sBLIMP metric, improving by 8% relative
over the previous state-of-the-art (CPC-BERT [59]).",,,,Google TPU v4,,,,,,,,,,,Unreleased,Unreleased,,,,
Llama 2-70B,Meta AI,2023-07-18,Language,Language modeling,70000000000.0,"Llama has been released in 7B, 13B, 34B, and 70B variants.",8.1e+23,"""Pretraining utilized a cumulative 3.3M GPU hours of computation on hardware of type A100-80GB"" of which 1720320 GPU hours were used to train the 70B model.

311.84 BF16 TFLOP/s * 1720320 hours * 0.40 utilization = 7.725e+23 FLOP.

Alternatively: the model was trained for 1 epoch on 2 trillion tokens and has 70B parameters. C = 6ND = 6*70B*2T = 8.4e+23 FLOP.",Llama 2 dataset,1500000000000.0,2 trillion tokens ~= 1.5 trillion words,Confident,"https://ai.meta.com/research/publications/llama-2-open-foundation-and-fine-tuned-chat-models/
https://arxiv.org/abs/2307.09288",Llama 2: Open Foundation and Fine-Tuned Chat Models,8056.0,"Hugo Touvron, Louis Martin, Kevin Stone, Peter Albert, Amjad Almahairi, Yasmine Babaei, Nikolay Bashlykov, Soumya Batra, Prajjwal Bhargava, Shruti Bhosale, Dan Bikel, Lukas Blecher, Cristian Canton Ferrer, Moya Chen, Guillem Cucurull, David Esiobu, Jude Fernandes, Jeremy Fu, Wenyin Fu, Brian Fuller, Cynthia Gao, Vedanuj Goswami, Naman Goyal, Anthony Hartshorn, Saghar Hosseini, Rui Hou, Hakan Inan, Marcin Kardas, Viktor Kerkez, Madian Khabsa, Isabel Kloumann, Artem Korenev, Punit Singh Koura, Marie-Anne Lachaux, Thibaut Lavril, Jenya Lee, Diana Liskovich, Yinghai Lu, Yuning Mao, Xavier Martinet, Todor Mihaylov, Pushkar Mishra, Igor Molybog, Yixin Nie, Andrew Poulton, Jeremy Reizenstein, Rashi Rungta, Kalyan Saladi, Alan Schelten, Ruan Silva, Eric Michael Smith, Ranjan Subramanian, Xiaoqing Ellen Tan, Binh Tang, Ross Taylor, Adina Williams, Jian Xiang Kuan, Puxin Xu, Zheng Yan, Iliyan Zarov, Yuchen Zhang, Angela Fan, Melanie Kambadur, Sharan Narang, Aurelien Rodriguez, Robert Stojnic, Sergey Edunov, Thomas Scialom
","In this work, we develop and release Llama 2, a collection of pretrained and fine-tuned large language models (LLMs) ranging in scale from 7 billion to 70 billion parameters. Our fine-tuned LLMs, called Llama 2-Chat, are optimized for dialogue use cases. Our models outperform open-source chat models on most benchmarks we tested, and based on our human evaluations for helpfulness and safety, may be a suitable substitute for closedsource models. We provide a detailed description of our approach to fine-tuning and safety improvements of Llama 2-Chat in order to enable the community to build on our work and contribute to the responsible development of LLMs.",Industry,United States of America,"Historical significance,Significant use,Highly cited,Training cost",Model has been open-sourced and frequently downloaded. The paper claims that Llama 2 is the current best open-source chat model as of its release date.,1.0,1728.0,"Model was trained from January 2023 to July 2023, which is six months. However, the training run duration did not take up this whole period. According to a Meta employee interviewed by Epoch, Llama 2 34B and 70B were trained on different clusters, with overlapping training periods. Based on an estimate of 1000 GPUs, it would have taken 72 days.",NVIDIA A100 SXM4 80 GB,1000.0,0.4191975017,1102561.194,"A100 cost in 2023: $1.10/hour
Training time: 1720320 A100 GPU-hours
Inflation adjustment: $1.000 2020 = $1.145 2023",795557.0703894598,,,,4000000.0,,Open weights (restricted use),Unreleased,,"Llama 2 license. can't use outputs to train models.

https://github.com/meta-llama/llama/blob/main/LICENSE",,
Llama 2-7B,Meta AI,2023-07-18,Language,Language modeling,7000000000.0,"Llama has been released in 7B, 13B, and 70B variants.",8.4e+22,"Trained on 2 trillion tokens per Table 1. 

C = 6ND = 6 FLOP / token / parameter * 7B parameters * 2T tokens = 8.4e+22 FLOP.

Also, 7B model was trained on 184320 GPU-hours

312 trillion * 184320 GPU-hours * 3600 sec/hour * 0.3 [utilization] = 6.21e22 FLOP",Llama 2 dataset,1500000000000.0,2 trillion tokens ~= 1.5T words,Confident,https://ai.meta.com/research/publications/llama-2-open-foundation-and-fine-tuned-chat-models/,Llama 2: Open Foundation and Fine-Tuned Chat Models,8056.0,"Hugo Touvron, Louis Martin, Kevin Stone, Peter Albert, Amjad Almahairi, Yasmine Babaei, Nikolay Bashlykov, Soumya Batra, Prajjwal Bhargava, Shruti Bhosale, Dan Bikel, Lukas Blecher, Cristian Canton Ferrer, Moya Chen, Guillem Cucurull, David Esiobu, Jude Fernandes, Jeremy Fu, Wenyin Fu, Brian Fuller, Cynthia Gao, Vedanuj Goswami, Naman Goyal, Anthony Hartshorn, Saghar Hosseini, Rui Hou, Hakan Inan, Marcin Kardas, Viktor Kerkez, Madian Khabsa, Isabel Kloumann, Artem Korenev, Punit Singh Koura, Marie-Anne Lachaux, Thibaut Lavril, Jenya Lee, Diana Liskovich, Yinghai Lu, Yuning Mao, Xavier Martinet, Todor Mihaylov, Pushkar Mishra, Igor Molybog, Yixin Nie, Andrew Poulton, Jeremy Reizenstein, Rashi Rungta, Kalyan Saladi, Alan Schelten, Ruan Silva, Eric Michael Smith, Ranjan Subramanian, Xiaoqing Ellen Tan, Binh Tang, Ross Taylor, Adina Williams, Jian Xiang Kuan, Puxin Xu, Zheng Yan, Iliyan Zarov, Yuchen Zhang, Angela Fan, Melanie Kambadur, Sharan Narang, Aurelien Rodriguez, Robert Stojnic, Sergey Edunov, Thomas Scialom
","In this work, we develop and release Llama 2, a collection of pretrained and fine-tuned large language models (LLMs) ranging in scale from 7 billion to 70 billion parameters. Our fine-tuned LLMs, called Llama 2-Chat, are optimized for dialogue use cases. Our models outperform open-source chat models on most benchmarks we tested, and based on our human evaluations for helpfulness and safety, may be a suitable substitute for closedsource models. We provide a detailed description of our approach to fine-tuning and safety improvements of Llama 2-Chat in order to enable the community to build on our work and contribute to the responsible development of LLMs.",Industry,United States of America,"Historical significance,Significant use,Highly cited",Model has been open-sourced and frequently downloaded. The paper claims that Llama 2 is the current best open-source chat model as of its release date.,1.0,,,NVIDIA A100 SXM4 80 GB,,,114259.38527188863,"A100 cost in 2023: $1.10/hour
Training time: 184320 A100 GPU-hours
Inflation adjustment: $1.000 2020 = $1.145 2023

184320 * 1.10 / 1.145 = $177,075",,,,,4000000.0,,Open weights (restricted use),Unreleased,,"Llama 2 license. can't use outputs to train models.

https://github.com/meta-llama/llama/blob/main/LICENSE",,
GPT3-2.7B (FlashAttention-2),"Stanford University,Princeton University",2023-07-18,Language,Language modeling/generation,2700000000.0,,,"8x A100 SXMs used, but no indication of dataset size, how long training took, or compute costs",,,,Confident,https://arxiv.org/pdf/2307.08691,FlashAttention-2: Faster Attention with Better Parallelism and Work Partitioning,1178.0,Tri Dao,"Scaling Transformers to longer sequence lengths has been a major problem in the last several years, promising to improve performance in language modeling and high-resolution image understanding, as well as to unlock new applications in code, audio, and video generation. The attention layer is the main bottleneck in scaling to longer sequences, as its runtime and memory increase quadratically in the sequence length. FlashAttention exploits the asymmetric GPU memory hierarchy to bring significant memory saving (linear instead of quadratic) and runtime speedup (2-4\times compared to optimized baselines), with no approximation. However, FlashAttention is still not nearly as fast as optimized matrix-multiply (GEMM) operations, reaching only 25-40\% of the theoretical maximum FLOPs/s. We observe that the inefficiency is due to suboptimal work partitioning between different thread blocks and warps on the GPU, causing either low-occupancy or unnecessary shared memory reads/writes. We propose FlashAttention-2, with better work partitioning to address these issues. In particular, we (1) tweak the algorithm to reduce the number of non-matmul FLOPs (2) parallelize the attention computation, even for a single head, across different thread blocks to increase occupancy, and (3) within each thread block, distribute the work between warps to reduce communication through shared memory. These yield around 2\times speedup compared to FlashAttention, reaching 50-73\% of the theoretical maximum FLOPs/s on A100 and getting close to the efficiency of GEMM operations. We empirically validate that when used end-to-end to train GPT-style models, FlashAttention-2 reaches training speed of up to 225 TFLOPs/s per A100 GPU (72\% model FLOPs utilization).","Academia,Academia","United States of America,United States of America","Highly cited,Historical significance",,,,,NVIDIA A100 SXM4 80 GB,8.0,0.72,,,6364.456563115679,,,,,,Unreleased,,,,,
Claude 2,Anthropic,2023-07-11,Language,"Language modeling,Chat,Language modeling/generation,Question answering",,,3.866e+24,https://colab.research.google.com/drive/1MdPuhS4Emaf23VXYZ-ooExDW-5GXZkw0#scrollTo=Ds0Q5X8aMnOY,Unspecified unreleased,,,Speculative,"https://www.anthropic.com/index/claude-2, https://www-files.anthropic.com/production/images/Model-Card-Claude-2.pdf",,,,,Industry,United States of America,Historical significance,,,,,,,,,,,,,,,,API access,Unreleased,,,,True
xTrimoPGLM -100B,"Tsinghua University,BioMap Research",2023-07-06,Biology,"Proteins,Protein or nucleotide language model (pLM/nLM)",100000000000.0,"Abstract: ""training xTrimoPGLM at an unprecedented scale of 100 billion
parameters and 1 trillion training tokens""",6.2e+23,"""xTrimoPGLM-100B is trained on a cluster of 96 DGX-A100 GPU (8×40G) servers in FP16 precision from January 18 to June 30, 2023. During this time, xTrimoPGLM-100B has consumed 1 trillion tokens from the dataset consisting of Uniref90 and ColAbFoldDB. As of the current date, xTrimoPGLM-100B continues its pre-training process to pass through as many tokens as possible""

6 * 100 billion params * 1T tokens = 6e23

8*96 * 312 trillion * 163 days * 24 * 3600 * 0.3 ~= 1e24

directly given in the paper (Table 9, or Table 4 in new version): 6.2E+23 ",UniRef50,,~24M protein sequences,Confident,https://www.biorxiv.org/content/10.1101/2023.07.05.547496v4,xTrimoPGLM: Unified 100B-Scale Pre-trained Transformer for Deciphering the Language of Protein,65.0,"Bo Chen, Xingyi Cheng, Yangli-ao Geng, Shen Li, Xin Zeng, Boyan Wang, Jing Gong, Chiming Liu, Aohan Zeng, Yuxiao Dong, Jie Tang, Le Song","Protein language models have shown remarkable success in learning biological information from protein sequences. However, most existing models are limited by either autoencoding or autoregressive pre-training objectives, which makes them struggle to handle protein understanding and generation tasks concurrently. This paper proposes a unified protein language model, xTrimoPGLM, to address these two types of tasks simultaneously through an innovative pre-training framework. Our key technical contribution is an exploration of the compatibility and the potential for joint optimization of the two types of objectives, which has led to a strategy for training xTrimoPGLM at an unprecedented scale of 100 billion parameters and 1 trillion training tokens. Our extensive experiments reveal that xTrimoPGLM significantly outperforms other advanced baselines in diverse protein understanding tasks (13 out of 15 tasks across four categories) and generates novel protein sequences which are structurally similar to natural ones. Furthermore, using the same xTrimoPGLM framework, we train an antibody-specific model (xTrimoPGLM-Ab) using 1 billion parameters. This model set a new record in predicting antibody naturalness and structures, both essential to the field of antibody-based drug design, and demonstrated a significantly faster inference speed than AlphaFold2. These results highlight the substantial capability and versatility of xTrimoPGLM in understanding and generating protein sequences.","Academia,Industry","China,China","SOTA improvement,Training cost","""Our extensive experiments reveal that xTrimoPGLM significantly outperforms other advanced baselines in diverse protein understanding tasks (13 out of 15 tasks across four categories)""",,3912.0,163 days,NVIDIA A100 SXM4 40 GB,768.0,,1823415.258,,611151.12765533,,,,2097152.0,"""We employ batches of 2,048 sequences, each 1,024 tokens in length""",Unreleased,Unreleased,,,FP16,
InternLM,"Shanghai AI Lab,SenseTime",2023-07-06,Language,Language modeling,104000000000.0,"""We present InternLM, a multilingual foundational language model with 104B parameters""",9.984e+23,6 * 104b * 1.6T = 9.984e23,,1600000000000.0,"""InternLM is pre-trained on a large corpora with 1.6T tokens""",Confident,https://github.com/InternLM/InternLM-techreport/blob/main/InternLM.pdf,,,,"Pre-training a bilingual 100B Foundation model on data with over a trillion tokens, the model exhibits excellent performance in scenarios such as Chinese, English, and coding due to the appropriate data ratio. Based on the foundation model, the application of high-quality human annotated dialogue data combined with RLHF technology enables the InternLM large language model to respond to complex commands during human interaction, while also demonstrating responses in line with human morality and values.","Academia,Industry","China,Hong Kong,China",SOTA improvement,"(from Google-translated page) ""In addition to using academic datasets to evaluate InternLM, we also use human examinations to assess its capabilities. InternLM can achieve good scores on examination benchmarks such as MMLU, AGIEval, C-Eval, and GAOKAO-bench that cover different languages and subjects, scoring higher than ChatGPT on multiple benchmarks""",,,Training performance for the open-source InternLM-7B: https://github.com/InternLM/InternLM/blob/main/doc/en/train_performance.md,NVIDIA A100 SXM4 80 GB,,,1505257.378,,,,,,,,Unreleased,Unreleased,,Though they released 7b and 20b models (https://github.com/InternLM/InternLM/tree/main/model_cards) 100b model is not found,,
Pangu-Weather,Huawei,2023-07-05,Earth science,Weather forecasting,256000000.0,"4*64 million = 256M params

""We trained four deep networks with lead times (the time difference
between input and output) at 1 h, 3 h, 6 h and 24 h, respectively... 

This modification increases the number of bias parameters by a factor of 527, with each 3D deep network containing approximately 64 million parameters.""",3.98e+22,"""Each of the four deep networks was trained for 100 epochs, and
each of them takes approximately 16 days on a cluster of 192 NVIDIA
Tesla-V100 GPUs.""

192 * 4 * 16 * 24 * 3600 * 125 teraflops * 0.3 utilization = 3.98e22",ERA5,,"""We used a single point in time for both input and output. The time resolution
of the ERA5 data is 1 h; in the training subset (1979–2017), there were
as many as 341,880 time points, the amount of training data in one
epoch... We fed all included weather variables, including 13 layers of upper-air
variables and the surface variables""

341,880 is the number of hours in ~40 years. But there's lots of data for each hour.",Confident,"https://www.nature.com/articles/s41586-023-06185-3, https://www.huaweicloud.com/intl/en-us/news/20230707180809498.html,
https://www.huawei.com/en/news/2023/7/pangu-ai-model-nature-publish",Accurate medium-range global weather forecasting with 3D neural networks,197.0,"Kaifeng Bi, Lingxi Xie, Hengheng Zhang, Xin Chen, Xiaotao Gu, Qi Tian","Weather forecasting is important for science and society. At present, the most accurate forecast system is the numerical weather prediction (NWP) method, which represents atmospheric states as discretized grids and numerically solves partial diferential equations that describe the transition between those states1 . However, this procedure is computationally expensive. Recently, artifcial-intelligence-based methods2 have shown potential in accelerating weather forecasting by orders of magnitude, but the forecast accuracy is still signifcantly lower than that of NWP methods. Here we introduce an artifcial-intelligence-based method for accurate, medium-range global weather forecasting. We show that three-dimensional deep networks equipped with
Earth-specifc priors are efective at dealing with complex patterns in weather data, and that a hierarchical temporal aggregation strategy reduces accumulation errors in medium-range forecasting. Trained on 39 years of global data, our program, Pangu-Weather, obtains stronger deterministic forecast results on reanalysis data in all tested variables when compared with the world’s best NWP system, the operational integrated forecasting system of the European Centre for Medium-Range Weather Forecasts (ECMWF)3
. Our method also works well with extreme weather forecasts and ensemble forecasts. When initialized with reanalysis data, the accuracy of tracking
tropical cyclones is also higher than that of ECMWF-HRES.",Industry,China,SOTA improvement,"""In meteorology, the Pangu Meteorology Model (or Pangu-Weather) is the first AI model to have surpassed state-of-the-art numerical weather prediction (NWP) methods in terms of accuracy. The prediction speed is also several orders of magnitude faster. In the past, predicting the trajectory of a typhoon over 10 days took 4 to 5 hours of simulation on a high-performance cluster of 3,000 servers. Now, the Pangu model can do it in 10 seconds on a single GPU of a single server, and with more accurate results.""

https://www.huaweicloud.com/intl/en-us/news/20230707180809498.html",100.0,1536.0,"4*16 = 64 days
""Each of the four deep networks was trained for 100 epochs, andeach of them takes approximately 16 days on a cluster of 192 NVIDIA Tesla-V100 GPUs.""
",NVIDIA V100,192.0,,51279.01751905432,,114593.38832967015,,,"Possibly based on Pangu 3? Pangu-Weather is mentioned in the Pangu 3 announcement. But the architecture description doesn't seem to resemble Pangu 3. So it seems like Pangu-Weather is one of the higher-level models that can be attached to Pangu 3. 

https://www.huaweicloud.com/intl/en-us/news/20230707180809498.html 
",,,Open weights (non-commercial),Unreleased,Open access (non-commercial),"Models and code here: https://github.com/198808xc/Pangu-Weather 

Commercial use forbidden",,
Stable Diffusion XL (SDXL),Stability AI,2023-07-04,Image generation,"Image generation,Text-to-image",3400000000.0,"""...result in a model size of 2.6B parameters in the UNet, see Tab. 1. The text encoders have a total size of 817M parameters.""",,,Unspecified unreleased,,,Speculative,https://arxiv.org/abs/2307.01952,SDXL: Improving Latent Diffusion Models for High-Resolution Image Synthesis,1165.0,"Dustin Podell, Zion English, Kyle Lacey, Andreas Blattmann, Tim Dockhorn, Jonas Müller, Joe Penna, Robin Rombach","We present SDXL, a latent diffusion model for text-to-image synthesis. Compared to previous versions of Stable Diffusion, SDXL leverages a three times larger UNet backbone: The increase of model parameters is mainly due to more attention blocks and a larger cross-attention context as SDXL uses a second text encoder. We design multiple novel conditioning schemes and train SDXL on multiple aspect ratios. We also introduce a refinement model which is used to improve the visual fidelity of samples generated by SDXL using a post-hoc image-to-image technique. We demonstrate that SDXL shows drastically improved performance compared the previous versions of Stable Diffusion and achieves results competitive with those of black-box state-of-the-art image generators. In the spirit of promoting open research and fostering transparency in large model training and evaluation, we provide access to code and model weights at this https URL",Industry,United Kingdom of Great Britain and Northern Ireland,Significant use,Looks like this is now the main/flagship Stable Diffusion model,,,,,,,,,,,,,,,Open weights (non-commercial),Unreleased,Open source,"SDXL 0.9 Research License:
https://huggingface.co/stabilityai/stable-diffusion-xl-base-0.9

MIT license for inference code, not sure if training code is here:
https://github.com/Stability-AI/generative-models/tree/main",,
HyenaDNA,"Stanford University,Harvard University,Mila - Quebec AI (originally Montreal Institute for Learning Algorithms),University of Montreal / Université de Montréal",2023-06-27,Biology,Protein or nucleotide language model (pLM/nLM),6600000.0,"Table A.1 shows details, largest experiment is on far right.",1.811e+21,"8 Nvidia A100 (80GB) GPUs, ~4 weeks
(4 * 7 * 24 * 3600) seconds * (8 * 3.12e14) FLOP/sec * 0.3 (utilization) = 1.811e21",Human Reference Genome (GRCh38/hg38),2945000000.0,"Human genome is ~3.2B nucleotide pairs, 14 and X are ~101M and 154M respectively. Largest run sees 2T tokens, which implies ~679 epochs.",Confident,https://arxiv.org/abs/2306.15794,HyenaDNA: Long-Range Genomic Sequence Modeling at Single Nucleotide Resolution,123.0,"Eric Nguyen, Michael Poli, Marjan Faizi, Armin W. Thomas, Callum Birch Sykes, Michael Wornow, Aman Patel, Clayton Rabideau, Stefano Massaroli, Yoshua Bengio, Stefano Ermon, Stephen A. Baccus, Christopher Ré","Genomic (DNA) sequences encode an enormous amount of information for gene regulation and protein synthesis. Similar to natural language models, researchers have proposed foundation models in genomics to learn generalizable features from unlabeled genome data that can then be fine-tuned for downstream tasks such as identifying regulatory elements. Due to the quadratic scaling of attention, previous Transformer-based genomic models have used 512 to 4k tokens as context (<0.001% of the human genome), significantly limiting the modeling of long-range interactions in DNA. In addition, these methods rely on tokenizers or fixed k-mers to aggregate meaningful DNA units, losing single nucleotide resolution where subtle genetic variations can completely alter protein function via single nucleotide polymorphisms (SNPs). Recently, Hyena, a large language model based on implicit convolutions was shown to match attention in quality while allowing longer context lengths and lower time complexity. Leveraging Hyena's new long-range capabilities, we present HyenaDNA, a genomic foundation model pretrained on the human reference genome with context lengths of up to 1 million tokens at the single nucleotide-level - an up to 500x increase over previous dense attention-based models. HyenaDNA scales sub-quadratically in sequence length (training up to 160x faster than Transformer), uses single nucleotide tokens, and has full global context at each layer. We explore what longer context enables - including the first use of in-context learning in genomics. On fine-tuned benchmarks from the Nucleotide Transformer, HyenaDNA reaches state-of-the-art (SotA) on 12 of 18 datasets using a model with orders of magnitude less parameters and pretraining data. On the GenomicBenchmarks, HyenaDNA surpasses SotA on 7 of 8 datasets on average by +10 accuracy points.","Academia,Academia,Academia,Academia","United States of America,United States of America,Canada,Canada",SOTA improvement,"""On fine-tuned benchmarks from the Nucleotide Transformer, HyenaDNA reaches state-of-the-art (SotA) on 12 of 18 datasets using a model with orders of magnitude less parameters and pretraining data.1 On the GenomicBenchmarks, HyenaDNA surpasses SotA on 7 of 8 datasets on average by +10 accuracy points, and by as much as +20 accuracy points on enhancer identification.""",679.117147708,672.0,"""For example, the largest model with context length 1M was trained on 2T tokens over 4 weeks.""",NVIDIA A100,8.0,,5000.0,,6367.433640556241,,,,64000000.0,"Table A.1 indicates largest model saw sequence length of 1M, and that batch sizes range from 64-1024. In section 3.2: ""Our sequence length schedule starts at L1 = 64, then doubles the window at each stage while keeping the global batch size constant."" I assume smallest batch size was used for largest sequence length.",Open weights (restricted use),Open source,Open source,"BSD 3-Clause License for weights (prohibits others from using the name of the copyright holder)
https://huggingface.co/LongSafari/hyenadna-large-1m-seqlen-hf

training code: Apache 2.0
https://github.com/HazyResearch/hyena-dna",FP16,
ERNIE 3.5,Baidu,2023-06-27,Language,"Language modeling,Language modeling/generation",,,,,,,,Unknown,http://research.baidu.com/Blog/index-view?id=185,Introducing ERNIE 3.5: Baidu’s Knowledge-Enhanced Foundation Model Takes a Giant Leap Forward,,,,Industry,China,SOTA improvement,SOTA scores on AGIEval and MMLU. See article in China Science Daily: https://mp.weixin.qq.com/s/QVdkmofRSTgjQ7UOFX7s1g,,,,,,,,,,,,,,,Hosted access (no API),Unreleased,,,,
RoboCat,"Google DeepMind,Google",2023-06-20,Robotics,Robotic manipulation,1180000000.0,"""Most of the experimental results are based on models with a 1.18B-parameter decoder-only transformer (Vaswani et al., 2017) with 24 layers, an embedding size of 2048, and a post-attention feedforward hidden size of 8196."" page 8",,,,,,Speculative,https://arxiv.org/abs/2306.11706,RoboCat: A Self-Improving Foundation Agent for Robotic Manipulation,33.0,"Konstantinos Bousmalis, Giulia Vezzani, Dushyant Rao, Coline Devin, Alex X. Lee, Maria Bauza, Todor Davchev, Yuxiang Zhou, Agrim Gupta, Akhil Raju, Antoine Laurens, Claudio Fantacci, Valentin Dalibard, Martina Zambelli, Murilo Martins, Rugile Pevceviciute, Michiel Blokzijl, Misha Denil, Nathan Batchelor, Thomas Lampe, Emilio Parisotto, Konrad Żołna, Scott Reed, Sergio Gómez Colmenarejo, Jon Scholz, Abbas Abdolmaleki, Oliver Groth, Jean-Baptiste Regli, Oleg Sushkov, Tom Rothörl, José Enrique Chen, Yusuf Aytar, Dave Barker, Joy Ortiz, Martin Riedmiller, Jost Tobias Springenberg, Raia Hadsell, Francesco Nori, Nicolas Heess","The ability to leverage heterogeneous robotic experience from different robots and tasks to quickly master novel skills and embodiments has the potential to transform robot learning. Inspired by recent advances in foundation models for vision and language, we propose a foundation agent for robotic manipulation. This agent, named RoboCat, is a visual goal-conditioned decision transformer capable of consuming multi-embodiment action-labelled visual experience. This data spans a large repertoire of motor control skills from simulated and real robotic arms with varying sets of observations and actions. With RoboCat, we demonstrate the ability to generalise to new tasks and robots, both zero-shot as well as through adaptation using only 100--1000 examples for the target task. We also show how a trained model itself can be used to generate data for subsequent training iterations, thus providing a basic building block for an autonomous improvement loop. We investigate the agent's capabilities, with large-scale evaluations both in simulation and on three different real robot embodiments. We find that as we grow and diversify its training data, RoboCat not only shows signs of cross-task transfer, but also becomes more efficient at adapting to new tasks.","Industry,Industry","United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France,United States of America",SOTA improvement,Top10 recent paper from Sebastian Sartor 2025-05-14,,,,,,,,,,,,,,,Unreleased,Unreleased,,https://deepmind.google/discover/blog/robocat-a-self-improving-robotic-agent/,,
MusicGen,Meta AI,2023-06-08,Audio,Audio generation,3359000000.0,"""We train autoregressive transformer models at different sizes: 300M, 1.5B, 3.3B parameters""

Uses EnCodec 32kHz (HF version has 59M params) for audio tokenization.",,"We train the 300M, 1.5B and 3.3B parameter models, using respectively 32, 64 and 96 GPUs, with mixed precision.

Unclear how many epochs used so FLOP calculation is not feasible.",ShutterStock and Pond5 music data collections,,"""We train on 30-second audio crops sampled at random from the full track... We use 20K hours of licensed music""

20000 hours * 60 min/hour * 2 inputs/min = 2400000 input sequences

EnCodec is run at 32kHz but after convolutions has a frame rate of 50 Hz, suggesting 2400000 * 30s * 50/s = 3,600,000,000 audio tokens.

Not confident enough in this calculation to add to database.",Likely,https://arxiv.org/abs/2306.05284,Simple and Controllable Music Generation,240.0,"Jade Copet, Felix Kreuk, Itai Gat, Tal Remez, David Kant, Gabriel Synnaeve, Yossi Adi, Alexandre Défossez","We tackle the task of conditional music generation. We introduce MusicGen, a single Language Model (LM) that operates over several streams of compressed discrete music representation, i.e., tokens. Unlike prior work, MusicGen is comprised of a single-stage transformer LM together with efficient token interleaving patterns, which eliminates the need for cascading several models, e.g., hierarchically or upsampling. Following this approach, we demonstrate how MusicGen can generate high-quality samples, while being conditioned on textual description or melodic features, allowing better controls over the generated output. We conduct extensive empirical evaluation, considering both automatic and human studies, showing the proposed approach is superior to the evaluated baselines on a standard text-to-music benchmark. Through ablation studies, we shed light over the importance of each of the components comprising MusicGen. Music samples, code, and models are available at this https URL.",Industry,United States of America,SOTA improvement,"""We conduct extensive empirical evaluation, considering both automatic and human studies, showing the proposed approach is superior to the evaluated baselines on a standard text-to-music benchmark""",,,,,,,,,,,,,,,Open weights (non-commercial),Open source,,"Code is released under MIT, model weights are released under CC-BY-NC 4.0

https://github.com/facebookresearch/audiocraft/blob/main/docs/MUSICGEN.md",FP16,
LTM-1,Magic,2023-06-06,Language,Code generation,,,,"Must be below 1e23 FLOP, as it's trained with a single A100.",,,,Unknown,https://magic.dev/blog/ltm-1,"LTM-1: an LLM with a 5,000,000 token context window",,,"Magic’s LTM-1 enables 50x larger context windows than transformers
Magic's trained a Large Language Model (LLM) that’s able to take in the gigantic amounts of context when generating suggestions. For our coding assistant, this means Magic can now see your entire repository of code.",Industry,United States of America,SOTA improvement,Very long context window - 5M tokens,,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
PaLI-X,Google Research,2023-05-29,"Multimodal,Language,Vision,Video","Image captioning,Video description,Character recognition",55000000000.0,55B (table 1),,,WebLI,1400000000.0,"1 billion images with alt texts in WebLI, 400m images in Episodic WebLI data",Likely,https://arxiv.org/abs/2305.18565,PaLI-X: On Scaling up a Multilingual Vision and Language Model,155.0,"Xi Chen, Josip Djolonga, Piotr Padlewski, Basil Mustafa, Soravit Changpinyo, Jialin Wu, Carlos Riquelme Ruiz, Sebastian Goodman, Xiao Wang, Yi Tay, Siamak Shakeri, Mostafa Dehghani, Daniel Salz, Mario Lucic, Michael Tschannen, Arsha Nagrani, Hexiang Hu, Mandar Joshi, Bo Pang, Ceslee Montgomery, Paulina Pietrzyk, Marvin Ritter, AJ Piergiovanni, Matthias Minderer, Filip Pavetic, Austin Waters, Gang Li, Ibrahim Alabdulmohsin, Lucas Beyer, Julien Amelot, Kenton Lee, Andreas Peter Steiner, Yang Li, Daniel Keysers, Anurag Arnab, Yuanzhong Xu, Keran Rong, Alexander Kolesnikov, Mojtaba Seyedhosseini, Anelia Angelova, Xiaohua Zhai, Neil Houlsby, Radu Soricut","We present the training recipe and results of scaling up PaLI-X, a multilingual vision and language model, both in terms of size of the components and the breadth of its training task mixture. Our model achieves new levels of performance on a wide-range of varied and complex tasks, including multiple image-based captioning and question-answering tasks, image-based document understanding and few-shot (in-context) learning, as well as object detection, video question answering, and video captioning. PaLI-X advances the state-of-the-art on most vision-and-language benchmarks considered (25+ of them). Finally, we observe emerging capabilities, such as complex counting and multilingual object detection, tasks that are not explicitly in the training mix.",Industry,"Multinational,United States of America,Canada,Switzerland",SOTA improvement,"""PaLI-X advances the state-of-the-art on most vision-and-language benchmarks considered (25+ of them).""",,,,,,,,,,UL2,,,,,Unreleased,Unreleased,,,,
Goat-7B,National University of Singapore,2023-05-23,Language,Quantitative reasoning,7000000000.0,7B,,2.78e+22 for base LLaMA-7B,,,Fine-tune dataset had 1 million question-answer pairs. likely ~10 tokens per pair?,Speculative,https://arxiv.org/abs/2305.14201,Goat: Fine-tuned LLaMA Outperforms GPT-4 on Arithmetic Tasks,64.0,"Tiedong Liu, Bryan Kian Hsiang Low","We introduce Goat, a fine-tuned LLaMA model that significantly outperforms GPT-4 on a range of arithmetic tasks. Fine-tuned on a synthetically generated dataset, Goat achieves state-of-the-art performance on BIG-bench arithmetic sub-task. In particular, the zero-shot Goat-7B matches or even surpasses the accuracy achieved by the few-shot PaLM-540B. Surprisingly, Goat can achieve near-perfect accuracy on large-number addition and subtraction through supervised fine-tuning only, which is almost impossible with previous pretrained language models, such as Bloom, OPT, GPT-NeoX, etc. We attribute Goat's exceptional performance to LLaMA's consistent tokenization of numbers. To tackle more challenging tasks like large-number multiplication and division, we propose an approach that classifies tasks based on their learnability, and subsequently decomposes unlearnable tasks, such as multi-digit multiplication and division, into a series of learnable tasks by leveraging basic arithmetic principles. We thoroughly examine the performance of our model, offering a comprehensive evaluation of the effectiveness of our proposed decomposition steps. Additionally, Goat-7B can be easily trained using LoRA on a 24GB VRAM GPU, facilitating reproducibility for other researchers. We release our model, dataset, and the Python script for dataset generation.",Academia,Singapore,SOTA improvement,"""We introduce Goat, a fine-tuned LLaMA model that significantly outperforms GPT-4 on a range of arithmetic tasks. Fine-tuned on a synthetically generated dataset, Goat achieves state-ofthe-art performance on BIG-bench arithmetic sub-task.""",1.0,,,NVIDIA A10 PCIe,,,,,,LLaMA-7B,2.02e+18,"""Goat-7B can be easily fine-tuned using LoRA on a 24GB VRAM GPU... In particular, the fine-tuning process for a specific arithmetic sub-task, such as 8-digit addition using 100K instances, takes only approximately 1.5 hours on an A10 GPU to achieve near-perfect accuracy""

Info isn't very complete - no timeframe specified for the VRAM GPU, I'm not sure how many tokens are in the fine-tune dataset and they use LoRA. Maybe it's 15 A10-hours total (1M total instances)? But safe to assume it's a small fraction of Llama's pretrain compute.

125 trillion (A10 FLOPs) * 15 * 3600 * 0.3 = 2.02e18",,,Open weights (non-commercial),Open (non-commercial),Open source,"no license noted. perhaps LLaMA 1 license by default (non-comm). repo with finetune (i.e. training since this is a Llama finetune) code
https://github.com/liutiedong/goat",FP16,
CodeT5+,Salesforce,2023-05-20,Language,"Code generation,Code autocompletion",16000000000.0,"""We implemented a family of CodeT5+ models, with model sizes ranging from 220M to 16B""",,,,,"""We use the CodeT5 tokenizer to tokenize the multilingual dataset, resulting in 51.5B tokens""",,https://arxiv.org/abs/2305.07922,CodeT5+: Open Code Large Language Models for Code Understanding and Generation,326.0,"Yue Wang, Hung Le, Akhilesh Deepak Gotmare, Nghi D.Q. Bui, Junnan Li, Steven C.H. Hoi","""Large language models (LLMs) pretrained on vast source code have achieved prominent progress in code intelligence. However, existing code LLMs have two main limitations in terms of architecture and pretraining tasks. First, they often adopt a specific architecture (encoder-only or decoder-only) or rely on a unified encoder-decoder network for different downstream tasks. The former paradigm is limited by inflexibility in applications while in the latter, the model is treated as a single system for all tasks, leading to suboptimal performance on a subset of tasks. Secondly, they often employ a limited set of pretraining objectives which might not be relevant to some downstream tasks and hence result in substantial performance degrade. To address these limitations, we propose ``CodeT5+'', a family of encoder-decoder LLMs for code in which component modules can be flexibly combined to suit a wide range of downstream code tasks. Such flexibility is enabled by our proposed mixture of pretraining objectives to mitigate the pretrain-finetune discrepancy. These objectives cover span denoising, contrastive learning, text-code matching, and causal LM pretraining tasks, on both unimodal and bimodal multilingual code corpora. Furthermore, we propose to initialize CodeT5+ with frozen off-the-shelf LLMs without training from scratch to efficiently scale up our models, and explore instruction-tuning to align with natural language instructions. We extensively evaluate CodeT5+ on over 20 code-related benchmarks in different settings, including zero-shot, finetuning, and instruction-tuning. We observe state-of-the-art (SoTA) model performance on various code-related tasks, such as code generation and completion, math programming, and text-to-code retrieval tasks. Particularly, our instruction-tuned CodeT5+ 16B achieves new SoTA results on HumanEval code generation task against other open code LLMs.""",Industry,United States of America,SOTA improvement,"""We extensively evaluate CodeT5+ on over 20 code-related benchmarks in different settings, including zero-shot, finetuning, and instruction-tuning. We observe state-of-the-art (SoTA) model performance on various code-related tasks, such as code generation and completion, math programming, and text-to-code retrieval tasks""",10.8,,,NVIDIA A100,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"BSD 3-clause 
https://github.com/salesforce/CodeT5/blob/main/LICENSE.txt

https://huggingface.co/Salesforce/codet5p-16b",FP16,
ONE-PEACE,"Alibaba,Huazhong University of Science and Technology",2023-05-18,"Multimodal,Vision,Speech,Language","Image classification,Speech recognition,Audio question answering,Audio classification",4000000000.0,"""we propose ONE-PEACE, a model with 4B parameters""",1.8e+20,"4 billion params * 7.5 billion data * 6 = 1.8e20.

see training dataset size notes. this estimate required some more assumptions than usual.","LAION-2B,LAION-Audio-630K",1600000000.0,"""After these steps, we retain about 1.5 billion image-text pairs""
...
""We also perform simple cleaning on the data, which involves removing samples with text lengths less than 3 or greater than
512, as well as texts containing non-English or emoji characters. Ultimately, we obtain about 2.4 million audio-text pairs, with a total duration of around 8,000 hours""

8000 hours = 480,000 minutes = ~109,440,000 words at 228 wpm

https://docs.google.com/document/d/1G3vvQkn4x_W71MKg0GmHVtzfd9m0y3_Ofcoew0v902Q/edit#heading=h.3pbt0hfgv7pq

Trained on 10 epochs for audio. For text, they train on ""200K steps with a batch size of 32768"" = 6,533,600,000
Adding together, they train on ~ 7.5b data points on a dataset of 1.6b, for ~4.7 epochs on average.",Speculative,https://arxiv.org/abs/2305.11172v1,ONE-PEACE: Exploring One General Representation Model Toward Unlimited Modalities,76.0,"Peng Wang, Shijie Wang, Junyang Lin, Shuai Bai, Xiaohuan Zhou, Jingren Zhou, Xinggang Wang, Chang Zhou","In this work, we explore a scalable way for building a general representation model toward unlimited modalities. We release ONE-PEACE, a highly extensible model with 4B parameters that can seamlessly align and integrate representations across vision, audio, and language modalities. The architecture of ONE-PEACE comprises modality adapters, shared self-attention layers, and modality FFNs. This design allows for the easy extension of new modalities by adding adapters and FFNs, while also enabling multi-modal fusion through self-attention layers. To pretrain ONE-PEACE, we develop two modality-agnostic pretraining tasks, cross-modal aligning contrast and intra-modal denoising contrast, which align the semantic space of different modalities and capture fine-grained details within modalities concurrently. With the scaling-friendly architecture and pretraining tasks, ONE-PEACE has the potential to expand to unlimited modalities. Without using any vision or language pretrained model for initialization, ONE-PEACE achieves leading results on a wide range of uni-modal and multi-modal tasks, including image classification (ImageNet), semantic segmentation (ADE20K), audio-text retrieval (AudioCaps, Clotho), audio classification (ESC-50, FSD50K, VGGSound), audio question answering (AVQA), image-text retrieval (MSCOCO, Flickr30K), and visual grounding (RefCOCO/+/g). Code is available at this https URL.","Industry,Academia","China,China",SOTA improvement,""" ONEPEACE achieves leading results in both uni-modal and multi-modal tasks, including image classification (89.8%
accuracy on ImageNet w/o privately labeled data), semantic segmentation (63.0% mIoU on ADE20K), audio-text
retrieval (outperforming previous SOTAs on AudioCaps and Clotho by a large margin), audio classification (91.8%
zero-shot accuracy on ESC-50, 69.7% accuracy on FSD50K, 59.6% accuracy on VGGSound w/o visual information),
audio question answering (86.2% accuracy on AVQA w/o visual information), image-text retrieval (84.1% I2T R@1
on MSCOCO and 97.6% I2T R@1 on Flickr30K w/o intermediate finetuning and ranking), and visual grounding
(89.26%/83.23%/89.27% scores on RefCOCO/+/g test sets).""",4.7,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"Apache 2.0, includes train code
https://github.com/OFA-Sys/ONE-PEACE/tree/main/one_peace ",BF16,
LIMA,"Meta AI,Carnegie Mellon University (CMU),University of Southern California,Tel Aviv University",2023-05-18,Language,"Chat,Language modeling/generation",65000000000.0,"""We train LIMA (Less Is More for Alignment) using the following protocol. Starting from LLaMa 65B [Touvron et al., 2023], we fine-tune on our 1,000-example alignment training set,"" according to page 4 of https://arxiv.org/pdf/2305.11206.",5.5000439e+23,"Finetune:  4.39e18 FLOP
Base model: 5.5e+23 FLOP 
Total: 4.39e18+5.5e+23=5.5e+23 FLOP","Stack Exchange,wikiHow,Pushshift Reddit",750000.0,"The total amount of training data is roughly 750,000 tokens, split over exactly 1,000 sequences.",Confident,https://arxiv.org/abs/2305.11206,LIMA: Less Is More for Alignment,1081.0,"Chunting Zhou, Pengfei Liu, Puxin Xu, Srini Iyer, Jiao Sun, Yuning Mao, Xuezhe Ma, Avia Efrat, Ping Yu, Lili Yu, Susan Zhang, Gargi Ghosh, Mike Lewis, Luke Zettlemoyer, Omer Levy","Large language models are trained in two stages: (1) unsupervised pretraining from raw text, to learn general-purpose representations, and (2) large scale instruction tuning and reinforcement learning, to better align to end tasks and user preferences. We measure the relative importance of these two stages by training LIMA, a 65B parameter LLaMa language model fine-tuned with the standard supervised loss on only 1,000 carefully curated prompts and responses, without any reinforcement learning or human preference modeling. LIMA demonstrates remarkably strong performance, learning to follow specific response formats from only a handful of examples in the training data, including complex queries that range from planning trip itineraries to speculating about alternate history. Moreover, the model tends to generalize well to unseen tasks that did not appear in the training data. In a controlled human study, responses from LIMA are either equivalent or strictly preferred to GPT-4 in 43% of cases; this statistic is as high as 58% when compared to Bard and 65% versus DaVinci003, which was trained with human feedback. Taken together, these results strongly suggest that almost all knowledge in large language models is learned during pretraining, and only limited instruction tuning data is necessary to teach models to produce high quality output.","Industry,Academia,Academia,Academia","United States of America,United States of America,United States of America,Israel",Highly cited,"Citation count obtained from a Google search for ""LIMA: Less Is More for Alignment"" (https://www.google.com/search?q=LIMA%3A+Less+Is+More+for+Alignment&rlz=1C5CHFA_enUS627US627&oq=LIMA%3A+Less+Is+More+for+Alignment&gs_lcrp=EgZjaHJvbWUqBggAEEUYOzIGCAAQRRg7MgYIARBFGDoyBggCEEUYPdIBBzQ4NWowajeoAgCwAgA&sourceid=chrome&ie=UTF-8).",15.0,,,,,,,,,LLaMA-65B,4.39e+20,"“The total amount of training data is roughly 750,000 tokens, split over exactly 1,000 sequences,” according to page 2 of https://arxiv.org/pdf/2305.11206.

“We train LIMA (Less Is More for Alignment) using the following protocol. Starting from LLaMa 65B [Touvron et al., 2023], we fine-tune on our 1,000-example alignment training set. To differentiate between each speaker (user and assistant), we introduce a special end-of-turn token (EOT) at the end of each utterance; this token plays the same role as EOS of halting generation, but avoids conflation with any other meaning that the pretrained model may have imbued into the preexisting EOS token.

We follow standard fine-tuning hyperparameters: we fine-tune for 15 epochs using AdamW [Loshchilov and Hutter, 2017] with 1 = 0.9, 2 = 0.95, and weight decay of 0.1. Without warmup steps, we set the initial learning rate to 1 − 5 and linearly decaying to 1 − 6 by the end of training. The batch size is set to 32 examples (64 for smaller models), and texts longer than 2048 tokens are trimmed. One notable deviation from the norm is the use of residual dropout;
we follow Ouyang et al. [2022] and apply dropout over residual connections, starting at  = 0.0 at the bottom layer and linearly raising the rate to  = 0.3 at the last layer ( = 0.2 for smaller models). We find that perplexity does not correlate with generation quality, and thus manually select checkpoints between the 5th and the 10th epochs using the held-out 50-example development set,"" according to page 4 of https://arxiv.org/pdf/2305.11206.

Since Llama has a dense transformer architecture, the 6ND approximation yields
Fine-tuning compute
= # of active parameters / forward pass * # of tokens * 6 FLOPS / token * # of epochs
~= 65e9 parameters * 75e4 tokens * 6 FLOPS / token * 15 epochs
= 438,750e13 FLOPS
~= 4.39e18 FLOPS",,,Unreleased,Unreleased,,,,
CoEdiT-xxl,"University of Minnesota,Grammarly",2023-05-17,Language,Language generation,11000000000.0,11B,,finetuned from Flan-T5,,3000000.0,"82k pairs of sentences. Roughly 20 words per sentence based on examples but mean length could be higher due to outliers.
40*82k = ~3,000,000",Likely,"https://arxiv.org/abs/2305.09857, https://huggingface.co/grammarly/coedit-large",CoEdIT: Text Editing by Task-Specific Instruction Tuning,37.0,"Vipul Raheja, Dhruv Kumar, Ryan Koo, Dongyeop Kang","We introduce COEDIT, a state-of-the-art text editing system for writing assistance. COEDIT takes instructions from the user specifying the attributes of the desired text, such as ""Make the sentence simpler"" or ""Write it in a more neutral style,"" and outputs the edited text. We present a large language model fine-tuned on a diverse collection of task-specific instructions for text editing (a total of 82K instructions). Our model (1) achieves state-of-the-art performance on various text editing benchmarks, (2) is competitive with publicly available largestsized LLMs trained on instructions while being ∼60x smaller, (3) is capable of generalizing to unseen edit instructions, and (4) exhibits abilities to generalize to composite instructions containing different combinations of edit actions. Through extensive qualitative and quantitative analysis, we show that writers prefer the edits suggested by COEDIT, relative to other stateof-the-art text editing models1.","Academia,Industry","United States of America,United States of America",SOTA improvement,"""We achieve state-of-the-art performance on multiple text editing tasks: grammatical error correction, text simplification, sentence fusion, iterative text editing, and three stylistic editing
tasks (formality style transfer, neutralization,
and paraphrasing).""",5.0,,,NVIDIA A100,,,,,,Flan-T5 11B,1e+18,"""We fine-tune different versions of pre-trained FLANT5 (Chung et al., 2022a) models on the COEDIT dataset. Specifically, we use FLANT5-L (770M parameters), FLANT5-XL (3B parameters), FLANT5-XXL (11B parameters) models.""

""Each model is trained for 5 epochs with early stopping. All models were fine-tuned on A100 GPUs using Deepspeed""

6 * 5 epochs * 3 million words (rough estimate) * 11 billion = 9.9e17 ~= 1e18

",,,Open weights (non-commercial),Open (non-commercial),Open access (non-commercial),"cc-by-nc (non commercial) for weights: https://huggingface.co/grammarly/coedit-large
training code/data here with unclear licenses: https://github.com/vipulraheja/coedit",FP16,
Med-PaLM 2,"Google Research,DeepMind",2023-05-16,"Medicine,Language",Question answering,340000000000.0,from PaLM 2,,,MultiMedQA,,"Dataset Count Mixture ratio
MedQA 10,178 37.5%
MedMCQA 182,822 37.5%
LiveQA 10 3.9%
MedicationQA 9 3.5%
HealthSearchQA 45 17.6%

MedMCQA (https://proceedings.mlr.press/v174/pal22a/pal22a.pdf, Table 2) has on average 12.77+ 2.69+67.52 = 82.98 tokens per datapoint",Likely,https://arxiv.org/abs/2305.09617,Towards Expert-Level Medical Question Answering with Large Language Models,,"Karan Singhal, Tao Tu, Juraj Gottweis, Rory Sayres, Ellery Wulczyn, Le Hou, Kevin Clark, Stephen Pfohl, Heather Cole-Lewis, Darlene Neal, Mike Schaekermann, Amy Wang, Mohamed Amin, Sami Lachgar, Philip Mansfield, Sushant Prakash, Bradley Green, Ewa Dominowska, Blaise Aguera y Arcas, Nenad Tomasev, Yun Liu, Renee Wong, Christopher Semturs, S. Sara Mahdavi, Joelle Barral, Dale Webster, Greg S. Corrado, Yossi Matias, Shekoofeh Azizi, Alan Karthikesalingam, Vivek Natarajan","Recent artificial intelligence (AI) systems have reached milestones in ""grand challenges"" ranging from Go to protein-folding. The capability to retrieve medical knowledge, reason over it, and answer medical questions comparably to physicians has long been viewed as one such grand challenge.
Large language models (LLMs) have catalyzed significant progress in medical question answering; Med-PaLM was the first model to exceed a ""passing"" score in US Medical Licensing Examination (USMLE) style questions with a score of 67.2% on the MedQA dataset. However, this and other prior work suggested significant room for improvement, especially when models' answers were compared to clinicians' answers. Here we present Med-PaLM 2, which bridges these gaps by leveraging a combination of base LLM improvements (PaLM 2), medical domain finetuning, and prompting strategies including a novel ensemble refinement approach.
Med-PaLM 2 scored up to 86.5% on the MedQA dataset, improving upon Med-PaLM by over 19% and setting a new state-of-the-art. We also observed performance approaching or exceeding state-of-the-art across MedMCQA, PubMedQA, and MMLU clinical topics datasets.
We performed detailed human evaluations on long-form questions along multiple axes relevant to clinical applications. In pairwise comparative ranking of 1066 consumer medical questions, physicians preferred Med-PaLM 2 answers to those produced by physicians on eight of nine axes pertaining to clinical utility (p < 0.001). We also observed significant improvements compared to Med-PaLM on every evaluation axis (p < 0.001) on newly introduced datasets of 240 long-form ""adversarial"" questions to probe LLM limitations.
While further studies are necessary to validate the efficacy of these models in real-world settings, these results highlight rapid progress towards physician-level performance in medical question answering.","Industry,Industry","Multinational,United States of America,Canada,Switzerland,United Kingdom of Great Britain and Northern Ireland",SOTA improvement,https://paperswithcode.com/sota/question-answering-on-medqa-usmle ,,,,,,,,,,PaLM 2,,,,,Unreleased,Unreleased,,,,
InstructBLIP,"Salesforce Research,Hong Kong University of Science and Technology (HKUST),Nanyang Technological University",2023-05-11,"Multimodal,Language,Vision","Visual question answering,Chat",13000000000.0,13B form 2.6,1.94e+20,"""All models are trained utilizing 16 Nvidia A100 (40G) GPUs and are completed within 1.5 days.""
16 * 3.12e14 * 1.5 * 24 * 3600 * 0.3 = 1.94e20","COCO,Web CapFilt,NoCaps,Flickr30K Entities,TextCaps,VQAv2,VizWiz,GQA,OKVQA,ScienceQA,OCR-VQA,TextVQA,LLaVA-Instruct-150k",,"""All models are instruction-tuned with a maximum of 60K steps""

""We employ a batch size of 192, 128, and 64 for the 3B, 7B, and 11/13B models, respectively. """,Confident,https://arxiv.org/abs/2305.06500,InstructBLIP: Towards General-purpose Vision-Language Models with Instruction Tuning,1343.0,"Wenliang Dai, Junnan Li, Dongxu Li, Anthony Meng Huat Tiong, Junqi Zhao, Weisheng Wang, Boyang Li, Pascale Fung, Steven Hoi","Large-scale pre-training and instruction tuning have been successful at creating general-purpose language models with broad competence. However, building general-purpose vision-language models is challenging due to the rich input distributions and task diversity resulting from the additional visual input. Although vision-language pretraining has been widely studied, vision-language instruction tuning remains under-explored. In this paper, we conduct a systematic and comprehensive study on vision-language instruction tuning based on the pretrained BLIP-2 models. We gather 26 publicly available datasets, covering a wide variety of tasks and capabilities, and transform them into instruction tuning format. Additionally, we introduce an instruction-aware Query Transformer, which extracts informative features tailored to the given instruction. Trained on 13 held-in datasets, InstructBLIP attains state-of-the-art zero-shot performance across all 13 held-out datasets, substantially outperforming BLIP-2 and larger Flamingo models. Our models also lead to state-of-the-art performance when finetuned on individual downstream tasks (e.g., 90.7% accuracy on ScienceQA questions with image contexts). Furthermore, we qualitatively demonstrate the advantages of InstructBLIP over concurrent multimodal models. All InstructBLIP models are open-sourced at this https URL. ","Industry,Academia,Academia","United States of America,Hong Kong,China,Singapore",SOTA improvement,from abstract - SOTA on ScienceQA,,36.0,"""All models are trained utilizing 16 Nvidia A100 (40G) GPUs and are completed within 1.5 days.""",NVIDIA A100 SXM4 40 GB,16.0,,,,12748.20334097663,Vicuna-13B v0,1.9408896e+20,"flops = (16) * (312 * 10**12) * (1.5* 24 * 3600) * (0.3) = 1.9e20
(num gpu) * (peak flops) * (time in seconds) * (assumed utilization rate)

""All models are trained utilizing 16 Nvidia A100 (40G) GPUs and are completed within 1.5 days.""",,,Open weights (non-commercial),Open (non-commercial),Open access (non-commercial),"LlaMA/Vicuna license, non-comm:
https://github.com/salesforce/LAVIS/tree/main/projects/instructblip

research only:
https://huggingface.co/Salesforce/instructblip-vicuna-13b",FP16,
PaLM 2,Google,2023-05-10,Language,"Language modeling,Language modeling/generation",340000000000.0,"Model Architecture: ""PaLM-2 is a new state-of-the-art language model. We have small, medium, and large variants that use stacked layers based on the Transformer architecture, with varying parameters depending on model size. Further details of model size and architecture are withheld from external publication.""
However, the parameter count was leaked to CNBC: https://www.cnbc.com/2023/05/16/googles-palm-2-uses-nearly-five-times-more-text-data-than-predecessor.html",7.34e+24,"Compute Requirements ""Not reported.""
Paper suggests heuristic of  C=6ND. Based on 340B parameters and 3.6T tokens, training compute would be around 7.3*10^24 FLOP.",,2700000000000.0,"""The pre-training corpus is significantly larger than the corpus used to train PaLM"" so greater than 6e+11. According to the leaked documents viewed by CNBC, the corpus was 3.6 trillion tokens or around 2.7*10^12 words.

https://www.cnbc.com/2023/05/16/googles-palm-2-uses-nearly-five-times-more-text-data-than-predecessor.html",Likely,https://arxiv.org/abs/2305.10403,PaLM 2 Technical Report,1734.0,"Andrew M. Dai, David R. So, Dmitry Lepikhin, Jonathan H. Clark, Maxim Krikun, Melvin Johnson, Nan Du, Rohan Anil, Siamak Shakeri, Xavier Garcia, Yanping Huang, Yi Tay, Yong Cheng, Yonghui Wu, Yuanzhong Xu, Yujing Zhang, Zachary Nado, Bryan Richter, Alex Polozov, Andrew Nystrom, Fangxiaoyu Feng, Hanzhao Lin, Jacob Austin, Jacob Devlin, Kefan Xiao, Orhan Firat, Parker Riley, Steven Zheng, Yuhuai Wu, Zhongtao Liu, Jiahui Yu, Guy Gur-Ari, Weikang Zhou, Sneha Kudugunta, Sunipa Dev, Frederick Liu, Gustavo Hernandez Abrego, Kelvin Xu, Abe Ittycheriah, Daniel Sohn, John Nham, Le Hou, Siyuan Qiao, Pidong Wang, Zirui Wang, Laurent El Shafey, Hyeontaek Lim, Marcello Maggioni, Michael Isard, Paul Barham, Qiao Zhang, Tao Wang, Yash Katariya, Aurko Roy, Benjamin Lee, Brennan Saeta, Ce Zheng, Hadi Hashemi, Junwhan Ahn, Rajkumar Samuel, Steven Hand, Zhifeng Chen, Kiran Vodrahalli, Aakanksha Chowdhery, Ethan Dyer, Emanuel Taropa, Vlad Feinberg, James Bradbury, Reiner Pope, Wei Li, YaGuang Li, Eric Chu, Jeffrey Hui, Joshua Howland, Vlad Fienber, Aroma Mahendru, Michele Catasta, Vedant Misra, Kevin Robinson, Maysam Moussalem, Sebastian Ruder, Erica Moreira, Eric Ni, Paige Bailey, Lucas Gonzalez, Alexandre Passos, Slav Petrov, Gaurav Mishra, Mark Omernick, Ambrose Slone, Andrea Hu, Colin Cherry, Denny Zhou, Jan Botha, John Wieting, Joshua Maynez, Kathleen Kenealy, Kevin Brooks, Linting Xue, Markus Freitag, Martin Polacek, Pengcheng Yin, Sebastian Gehrmann, Xuezhi Wang, Kathy Meier-Hellstern, Christopher A. Choquette-Choo, Daniel Smilkov, Emily Reif, Alicia Parrish, Alex Castro Ros, Clément Crepy, Dasha Valter, Jeremy Hurwitz, Katherine Lee, Mark Díaz, Marie Pellat, Matthew Jagielski, Renee Shelby, Shachi Dave","We introduce PaLM 2, a new state-of-the-art language model that has better multilingual and reasoning capabilities and is more compute-efficient than its predecessor PaLM (Chowdhery et al., 2022). PaLM 2 is a Transformer-based model trained using a mixture of objectives similar to UL2 (Tay et al., 2023). Through extensive evaluations on English and multilingual language, and reasoning tasks, we demonstrate that PaLM 2 has significantly improved quality on downstream tasks across different model sizes, while simultaneously exhibiting faster and more efficient inference compared to PaLM. This improved efficiency enables broader deployment while also allowing the model to respond faster, for a more natural pace of interaction. PaLM 2 demonstrates robust reasoning capabilities exemplified by large improvements over PaLM on BIG-Bench and other reasoning tasks. PaLM 2 exhibits stable performance on a suite of responsible AI evaluations, and enables inference-time control over toxicity without additional overhead or impact on other capabilities. Overall, PaLM 2 achieves state-of-the-art performance across a diverse set of tasks and capabilities.",Industry,United States of America,"SOTA improvement,Training cost,Significant use,Highly cited","Significant use: Gmail and Google Docs have millions of users.
""At I/O today, we announced over 25 new products and features powered by PaLM 2. That means that PaLM 2 is bringing the latest in advanced AI capabilities directly into our products and to people — including consumers, developers, and enterprises of all sizes around the world. Here are some examples:
PaLM 2’s improved multilingual capabilities are allowing us to expand Bard to new languages, starting today. Plus, it’s powering our recently announced coding update.
Workspace features to help you write in Gmail and Google Docs, and help you organize in Google Sheets are all tapping into the capabilities of PaLM 2 at a speed that helps people get work done better, and faster.""
https://blog.google/technology/ai/google-palm-2-ai-large-language-model/",,,,Google TPU v4,,,4865570.06395341,PaLM 2 was trained on TPU v4 according to the model card (pages 91-92),,,,,,,API access,Unreleased,,,,True
StarCoder,"Hugging Face,ServiceNow,Northeastern University,Mila - Quebec AI (originally Montreal Institute for Learning Algorithms),Carnegie Mellon University (CMU),Johns Hopkins University,Leipzig University,ScaDS.AI,Queen Mary University of London,Roblox,Sea AI Lab,Technion - Israel Institute of Technology,Monash University,CSIRO,Data61,McGill University,Saama,University of British Columbia (UBC),Massachusetts Institute of Technology (MIT),Technical University of Munich,IBM,University of Vermont,UnfoldML,SAP,University of Notre Dame,Columbia University,New York University (NYU),University of Allahabad,Discover Dollar,Toloka,Telefonica,Stanford University,Weizmann Institute of Science,Alan Turing Institute,Wellesley College,EleutherAI,Forschungszentrum Julich",2023-05-09,Language,Code generation,15500000000.0,"""We trained a 15.5B parameter model""",8.46e+22,"FLOP reported here, 8.46e22
https://huggingface.co/bigcode/starcoder


""We trained our model on a GPU cluster with 512 A100 80 GB GPUs... Based on the total number of GPU hours that training took (320,256) and an average power usage of 280W per GPU... The fine-tuned model adds 3.5% of training time""

320256 * 312 tFLOP/s * 3600 * 1.035 * 0.3 (utilization assumption) = 1.12e23",The Stack,1000000000000.0,"""StarCoderBase is trained on 1 trillion tokens sourced from The Stack""",Confident,https://arxiv.org/abs/2305.06161,StarCoder: may the source be with you!,512.0,"Raymond Li, Loubna Ben Allal, Yangtian Zi, Niklas Muennighoff, Denis Kocetkov, Chenghao Mou, Marc Marone, Christopher Akiki, Jia Li, Jenny Chim, Qian Liu, Evgenii Zheltonozhskii, Terry Yue Zhuo, Thomas Wang, Olivier Dehaene, Mishig Davaadorj, Joel Lamy-Poirier, João Monteiro, Oleh Shliazhko, Nicolas Gontier, Nicholas Meade, Armel Zebaze, Ming-Ho Yee, Logesh Kumar Umapathi, Jian Zhu, Benjamin Lipkin, Muhtasham Oblokulov, Zhiruo Wang, Rudra Murthy, Jason Stillerman, Siva Sankalp Patel, Dmitry Abulkhanov, Marco Zocca, Manan Dey, Zhihan Zhang, Nour Fahmy, Urvashi Bhattacharyya, Wenhao Yu, Swayam Singh, Sasha Luccioni, Paulo Villegas, Maxim Kunakov, Fedor Zhdanov, Manuel Romero, Tony Lee, Nadav Timor, Jennifer Ding, Claire Schlesinger, Hailey Schoelkopf, Jan Ebert, Tri Dao, Mayank Mishra, Alex Gu, Jennifer Robinson, Carolyn Jane Anderson, Brendan Dolan-Gavitt, Danish Contractor, Siva Reddy, Daniel Fried, Dzmitry Bahdanau, Yacine Jernite, Carlos Muñoz Ferrandis, Sean Hughes, Thomas Wolf, Arjun Guha, Leandro von Werra, Harm de Vries","""The BigCode community, an open-scientific collaboration working on the responsible development of Large Language Models for Code (Code LLMs), introduces StarCoder and StarCoderBase: 15.5B parameter models with 8K context length, infilling capabilities and fast large-batch inference enabled by multi-query attention. StarCoderBase is trained on 1 trillion tokens sourced from The Stack, a large collection of permissively licensed GitHub repositories with inspection tools and an opt-out process. We fine-tuned StarCoderBase on 35B Python tokens, resulting in the creation of StarCoder. We perform the most comprehensive evaluation of Code LLMs to date and show that StarCoderBase outperforms every open Code LLM that supports multiple programming languages and matches or outperforms the OpenAI code-cushman-001 model. Furthermore, StarCoder outperforms every model that is fine-tuned on Python, can be prompted to achieve 40\% pass@1 on HumanEval, and still retains its performance on other programming languages. We take several important steps towards a safe open-access model release, including an improved PII redaction pipeline and a novel attribution tracing tool, and make the StarCoder models publicly available under a more commercially viable version of the Open Responsible AI Model license.""","Industry,Industry,Academia,Academia,Academia,Academia,Academia,Academia,Industry,Academia,Academia,Government,Government,Academia,Academia,Academia,Academia,Industry,Academia,Industry,Academia,Academia,Academia,Academia,Industry,Industry,Industry,Academia,Academia,Government,Academia,Research collective,Government","Multinational,United States of America,United States of America,United States of America,Canada,United States of America,United States of America,Germany,Germany,United Kingdom of Great Britain and Northern Ireland,United States of America,Singapore,Israel,Australia,Australia,Australia,Canada,United States of America,Canada,United States of America,Germany,United States of America,United States of America,Sweden,Multinational,Germany,United States of America,United States of America,United States of America,India,India,Multinational,Spain,United States of America,Israel,United Kingdom of Great Britain and Northern Ireland,United States of America,Multinational,United States of America,Germany",SOTA improvement,"""We perform the most comprehensive evaluation of Code LLMs to date and show that StarCoderBase outperforms every open Code LLM that supports multiple programming languages and matches or outperforms the OpenAI code-cushman-001 model. Furthermore, StarCoder outperforms every model that is fine-tuned on Python""",1.0,625.5,"625.5 hours = 320256 /512
512 GPUs from ""We trained our model on a GPU cluster with 512 A100 80 GB GPUs ""

320256 GPU hours from ""Based on the total number of GPU hours that training took (320,256)""
citations from sections 5.6 and 5.7",NVIDIA A100 SXM4 80 GB,512.0,0.2272360999,212217.65075330864,,407960.6765621668,,,,4000000.0,"""The model was trained for 250k iterations, with a batch size of 4M tokens, for a total of one trillion tokens.""",Open weights (restricted use),Unreleased,,"some restrictions

https://huggingface.co/spaces/bigcode/bigcode-model-license-agreement

data is The Stack, which has multiple licenses
https://huggingface.co/datasets/bigcode/the-stack-dedup ",BF16,
ImageBind,Meta AI,2023-05-09,"Multimodal,Vision,Audio,Language,Image generation,Speech","Image classification,Speech recognition,Image generation,Language modeling/generation",932000000.0,used ViT-Huge 630M as an image/video encoder and OpenCLIP-302m as text encoder,,,"SUN RGB-D,LLVIP,Ego4D,AudioSet",,,Likely,"https://arxiv.org/abs/2305.05665, https://github.com/facebookresearch/ImageBind",IMAGEBIND: One Embedding Space To Bind Them All,607.0,"Rohit Girdhar, Alaaeldin El-Nouby, Zhuang Liu, Mannat Singh, Kalyan Vasudev Alwala, Armand Joulin, Ishan Misra","We present ImageBind, an approach to learn a joint embedding across six different modalities - images, text, audio, depth, thermal, and IMU data. We show that all combinations of paired data are not necessary to train such a joint embedding, and only image-paired data is sufficient to bind the modalities together. ImageBind can leverage recent large scale vision-language models, and extends their zero-shot capabilities to new modalities just by using their natural pairing with images. It enables novel emergent applications 'out-of-the-box' including cross-modal retrieval, composing modalities with arithmetic, cross-modal detection and generation. The emergent capabilities improve with the strength of the image encoder and we set a new state-of-the-art on emergent zero-shot recognition tasks across modalities, outperforming specialist supervised models. Finally, we show strong few-shot recognition results outperforming prior work, and that ImageBind serves as a new way to evaluate vision models for visual and non-visual tasks.",Industry,United States of America,SOTA improvement,"""we set a new state-of-the-art on emergent zero-shot recognition tasks across modalities, outperforming specialist supervised models""",64.0,,,"NVIDIA V100,NVIDIA A100",,,,,,ViT-Huge/14,,,,,Open weights (non-commercial),Open (non-commercial),Open access (non-commercial),"Creative commons non-commercial
models and code in this repo: https://github.com/facebookresearch/ImageBind/blob/main/README.md 
train code: https://github.com/facebookresearch/ImageBind/blob/main/imagebind/models/imagebind_model.py ",,
Agile Soccer Robot,Google DeepMind,2023-04-26,Robotics,"Animal (human/non-human) imitation,Sports",,,,,,,""". The get-up teacher learns to get up relatively quickly and trained in total for approximately 2.4 · 10^8 environment steps,
equivalent to approximately 70 days of simulation time, or 14 hours of wall-clock time. The soccer
teacher was trained for 2 · 10^9 environment steps, which took 158 hours of training, equivalent to
approximately 580 days of simulated match""",Unknown,https://arxiv.org/abs/2304.13653,Learning Agile Soccer Skills for a Bipedal Robot with Deep Reinforcement Learning,82.0,"Tuomas Haarnoja, Ben Moran, Guy Lever, Sandy H. Huang, Dhruva Tirumala, Markus Wulfmeier, Jan Humplik, Saran Tunyasuvunakool, Noah Y. Siegel, Roland Hafner, Michael Bloesch, Kristian Hartikainen, Arunkumar Byravan, Leonard Hasenclever, Yuval Tassa, Fereshteh Sadeghi, Nathan Batchelor, Federico Casarini, Stefano Saliceti, Charles Game, Neil Sreendra, Kushal Patel, Marlon Gwira, Andrea Huber, Nicole Hurley, Francesco Nori, Raia Hadsell, Nicolas Heess","We investigate whether Deep Reinforcement Learning (Deep RL) is able to synthesize sophisticated and safe movement skills for a low-cost, miniature humanoid robot that can be composed into complex behavioral strategies in dynamic environments. We used Deep RL to train a humanoid robot with 20 actuated joints to play a simplified one-versus-one (1v1) soccer game. We first trained individual skills in isolation and then composed those skills end-to-end in a self-play setting. The resulting policy exhibits robust and dynamic movement skills such as rapid fall recovery, walking, turning, kicking and more; and transitions between them in a smooth, stable, and efficient manner - well beyond what is intuitively expected from the robot. The agents also developed a basic strategic understanding of the game, and learned, for instance, to anticipate ball movements and to block opponent shots. The full range of behaviors emerged from a small set of simple rewards. Our agents were trained in simulation and transferred to real robots zero-shot. We found that a combination of sufficiently high-frequency control, targeted dynamics randomization, and perturbations during training in simulation enabled good-quality transfer, despite significant unmodeled effects and variations across robot instances. Although the robots are inherently fragile, minor hardware modifications together with basic regularization of the behavior during training led the robots to learn safe and effective movements while still performing in a dynamic and agile way. Indeed, even though the agents were optimized for scoring, in experiments they walked 156% faster, took 63% less time to get up, and kicked 24% faster than a scripted baseline, while efficiently combining the skills to achieve the longer term objectives. Examples of the emergent behaviors and full 1v1 matches are available on the supplementary website.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",SOTA improvement,"Likely the best bipedal soccer AI, since it's DeepMind, and related work section just discusses results involving specific soccer skills and quadruped robots:

""Whether bipedal or quadrupedal, navigation represents only a fraction of animal and human capabilities. Motivated by this observation, there is a growing interest in whole body control, i.e. tasks in which the whole body is used in flexible ways to interact with the environment. Examples include climbing (Rudin et al., 2022a), getting-up from the ground (Ma et al., 2023), catching objects (Ma et al., 2023), and mobile manipulation with legs (Cheng et al., 2023). Recently, reinforcement learning has been applied to learn simple soccer skills, including goalkeeping (Huang et al., 2022), ball manipulation on diverse terrains (Bohez et al., 2022; Ji et al., 2023), and shooting (Ji et al.,
2022). These works focus on a narrower set of skills than the 1v1 soccer game, and the quadrupedal platform is inherently more stable and therefore presents an easier learning challenge.""",,240.0,"14+158+68 hours:
""Training the get-up and soccer teachers took 14 and 158 hours (6.5 days), respectively, and distillation and self-play
took 68 hours (see Appendix B for details)""",,,,,,,,,,,,Unreleased,Unreleased,Unreleased,"only video demos here
https://sites.google.com/view/op3-soccer",,
LLaVA,"University of Wisconsin Madison,Microsoft Research,Columbia University",2023-04-17,"Multimodal,Vision,Language","Chat,Question answering,Visual question answering",13000000000.0,13B,7.8049e+22,"8 * 3.12e14 * (18 * 3600) * 0.3 = 4.9e19
num gpus * peak flops * time *assumed utilization rate 
""We train all models with 8× A100s. Pretraining on CC-595K completes within 4 hours. Finetuning on Instruct-158K completes within 10 hours. Finetuning on ScienceQA completes within 4 hours."" so 18 hours of time in total.

However, they use Vicuna as their LLM backbone, which used 7.8e22 FLOPs in training. Total FLOPs are then 4.9e19 + 7.8e22 = 7.8049e22",Conceptual Captions (CC3M),,"595K + 158K = 753K image text pairs
""This results in around 595K image-text pairs""
""We collect 158K unique language-image instruction-following samples in total, including 58K in conversations, 23K in detailed description, and 77k in complex reasoning, respectively. """,Confident,https://arxiv.org/abs/2304.08485,Visual Instruction Tuning,2482.0,"Haotian Liu, Chunyuan Li, Qingyang Wu, Yong Jae Lee","Instruction tuning large language models (LLMs) using machine-generated instruction-following data has improved zero-shot capabilities on new tasks, but the idea is less explored in the multimodal field. In this paper, we present the first attempt to use language-only GPT-4 to generate multimodal language-image instruction-following data. By instruction tuning on such generated data, we introduce LLaVA: Large Language and Vision Assistant, an end-to-end trained large multimodal model that connects a vision encoder and LLM for general-purpose visual and language understanding.Our early experiments show that LLaVA demonstrates impressive multimodel chat abilities, sometimes exhibiting the behaviors of multimodal GPT-4 on unseen images/instructions, and yields a 85.1% relative score compared with GPT-4 on a synthetic multimodal instruction-following dataset. When fine-tuned on Science QA, the synergy of LLaVA and GPT-4 achieves a new state-of-the-art accuracy of 92.53%. We make GPT-4 generated visual instruction tuning data, our model and code base publicly available. ","Academia,Industry,Academia","United States of America,United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,United States of America",SOTA improvement,"When fine-tuned on Science QA, the synergy of LLaVA and GPT-4 achieves a new state-of-the-art accuracy of 92.53%.",,10.0,"""We train all models with 8× A100s. Pretraining on CC-595K completes within 4 hours. Finetuning on Instruct-158K completes within 10 hours. Finetuning on ScienceQA completes within 4 hours.""",NVIDIA A100,8.0,,42.46267260692187,,6377.509314719864,Vicuna-13B v0,4.9e+19,"8 * 3.12e14 * (18 * 3600) * 0.3 = 4.9e19
num gpus * peak flops * time *assumed utilization rate 
""We train all models with 8× A100s. Pretraining on CC-595K completes within 4 hours. Finetuning on Instruct-158K completes within 10 hours. Finetuning on ScienceQA completes within 4 hours."" so 18 hours of time in total.",,,Open weights (unrestricted),Open source,Open source,"apache 2.0

train repo: https://github.com/haotian-liu/LLaVA?tab=readme-ov-file#train 

model: https://github.com/haotian-liu/LLaVA/blob/main/docs/MODEL_ZOO.md ",BF16,
DINOv2,"Facebook AI Research,INRIA",2023-04-14,Vision,Image representation,1140000000.0,1.14B from https://huggingface.co/facebook/dinov2-giant,7.41851136e+21,"table 14

22016 * 3600 * 312 * 10 ** 12 * 3/10 = 7.41851136e+21
gpu hours in seconds * flops of A100 * assumed utilization  rate",,142000000.0,new dataset  - named LVD142M Table 15,Confident,https://arxiv.org/abs/2304.07193,DINOv2: Learning Robust Visual Features without Supervision,1697.0,"Maxime Oquab, Timothée Darcet, Théo Moutakanni, Huy Vo, Marc Szafraniec, Vasil Khalidov, Pierre Fernandez, Daniel Haziza, Francisco Massa, Alaaeldin El-Nouby, Mahmoud Assran, Nicolas Ballas, Wojciech Galuba, Russell Howes, Po-Yao Huang, Shang-Wen Li, Ishan Misra, Michael Rabbat, Vasu Sharma, Gabriel Synnaeve, Hu Xu, Hervé Jegou, Julien Mairal, Patrick Labatut, Armand Joulin, Piotr Bojanowski","The recent breakthroughs in natural language processing for model pretraining on large quantities of data have opened the way for similar foundation models in computer vision. These models could greatly simplify the use of images in any system by producing all-purpose visual features, i.e., features that work across image distributions and tasks without finetuning. This work shows that existing pretraining methods, especially self-supervised methods, can produce such features if trained on enough curated data from diverse sources. We revisit existing approaches and combine different techniques to scale our pretraining in terms of data and model size. Most of the technical contributions aim at accelerating and stabilizing the training at scale. In terms of data, we propose an automatic pipeline to build a dedicated, diverse, and curated image dataset instead of uncurated data, as typically done in the self-supervised literature. In terms of models, we train a ViT model (Dosovitskiy et al., 2020) with 1B parameters and distill it into a series of smaller models that surpass the best available all-purpose features, OpenCLIP (Ilharco et al., 2021) on most of the benchmarks at image and pixel levels. ","Industry,Academia","United States of America,France",SOTA improvement,"""Our family of models drastically improves over
the previous state of the art in self-supervised learning and reaches performance comparable with weakly-
supervised features.""
",,,,NVIDIA A100 SXM4 40 GB,,,10203.60518105836,,,,,,,,Open weights (unrestricted),Open source,Open source,"apache 2.0

training code and weights here: https://github.com/facebookresearch/dinov2 ",FP16,
Incoder-6.7B,"Facebook AI Research,University of Washington,University of California (UC) Berkeley,Carnegie Mellon University (CMU),Toyota Technological Institute at Chicago",2023-04-09,Language,Code generation,6700000000.0,6.7B,3.00001e+21,"per table 5, required 3 zettaflop (3e21) to train.

also, ""INCODER-6.7B was trained on 248 V100 GPUs for 24 days""

hardware method: 125 trillion * 248 * 24 * 24 * 3600 * 0.3 = 2e22. suggests their utilization was quite low, or 24 days was just calendar time.
",,,"216 GB: ""Our final pre-training corpus contains a total of 159 GB of code, 52 GB of it
in Python, and a total of 57 GB of content from StackOverflow""",Confident,https://arxiv.org/abs/2204.05999,InCoder: A Generative Model for Code Infilling and Synthesis,515.0,"Daniel Fried, Armen Aghajanyan, Jessy Lin, Sida Wang, Eric Wallace, Freda Shi, Ruiqi Zhong, Wen-tau Yih, Luke Zettlemoyer, Mike Lewis","Code is seldom written in a single left-to-right pass and is instead repeatedly edited and refined. We introduce InCoder, a unified generative model that can perform program synthesis (via left-to-right generation) as well as editing (via infilling). InCoder is trained to generate code files from a large corpus of permissively licensed code, where regions of code have been randomly masked and moved to the end of each file, allowing code infilling with bidirectional context. Our model is the first generative model that is able to directly perform zero-shot code infilling, which we evaluate on challenging tasks such as type inference, comment generation, and variable re-naming. We find that the ability to condition on bidirectional context substantially improves performance on these tasks, while still performing comparably on standard program synthesis benchmarks in comparison to left-to-right only models pretrained at similar scale. The InCoder models and code are publicly released. this https URL","Industry,Academia,Academia,Academia,Academia","United States of America,United States of America,United States of America,United States of America,United States of America",SOTA improvement,"""Zero-shot infilling with bidirectional context substantially outperforms approaches based on left-to-right-only models, and on several tasks
obtains performance comparable to state-of-the-art models fine-tuned on the tasks""",1.0,576.0,24,NVIDIA V100,,,3129.0771365574788,,,,,,,,Open weights (non-commercial),Unreleased,Open access (non-commercial),"CC-BY-NC 4.0 (non commercial)

data is open: ""To train our models, we collect a corpus of (1) public code with permissive, non-copyleft, opensource licenses from GitHub and GitLab and (2) StackOverflow questions, answers, and comments.""

inference code, not training code in this repo: https://github.com/dpfried/incoder/blob/main/README.md ",,
Segment Anything Model,Meta AI,2023-04-05,Vision,Image segmentation,636000000.0,"From Facebook website: https://segment-anything.com/
""How big is the model? The image encoder has 632M parameters.
The prompt encoder and mask decoder have 4M parameters.""",7.8e+21,"""SAM was trained on 256 A100 GPUS for 68 hours. We acknowledge the environmental impact and cost of training
large scale models. The environmental impact of training the released SAM model is approximately 6963 kWh""

68*256 A100-hours = 
17408 hours * 3600 * 312 trillion * 0.4 (utilization assumption for image models)
= 7.82e21

max A100 power is 400W. 6,963,000 watt-hours / 400 watts = 17407.5 hours (so they probably just calculated backwards from power rating, and this doesn't give any info on utilization)",Segment Anything 1B,1100000000.0,"""SA-1B contains 11M diverse, high-resolution, licensed, and privacy protecting images and 1.1B high-quality segmentation masks.""
segmentation mask is a map that identifies segments in an image",Confident,https://arxiv.org/abs/2304.02643,Segment Anything,4323.0,"Alexander Kirillov, Eric Mintun, Nikhila Ravi, Hanzi Mao, Chloe Rolland, Laura Gustafson, Tete Xiao, Spencer Whitehead, Alexander C. Berg, Wan-Yen Lo, Piotr Dollár, Ross Girshick","We introduce the Segment Anything (SA) project: a new task, model, and dataset for image segmentation. Using our efficient model in a data collection loop, we built the largest segmentation dataset to date (by far), with over 1 billion masks on 11M licensed and privacy respecting images. The model is designed and trained to be promptable, so it can transfer zero-shot to new image distributions and tasks. We evaluate its capabilities on numerous tasks and find that its zero-shot performance is impressive -- often competitive with or even superior to prior fully supervised results. We are releasing the Segment Anything Model (SAM) and corresponding dataset (SA-1B) of 1B masks and 11M images at this https URL to foster research into foundation models for computer vision.",Industry,United States of America,Highly cited,,2.0,68.0,"""SAM was trained on 256 A100 GPUS for 68 hours""",NVIDIA A100,256.0,,15888.411228475235,,204134.84223782964,ViT-Huge/14,7.8e+21,see Training Compute notes,,,Open weights (unrestricted),Unreleased,,"Apache 2.0 license
don't see pretrain code in the repo, could be wrong

https://github.com/facebookresearch/segment-anything",FP32,
BloombergGPT,"Bloomberg,Johns Hopkins University",2023-03-30,Language,Language modeling,50558868480.0,,2.36e+23,"2.36e23 per Table 4

(using our usual hardware method, 512 A100s over 53 days would be 512 * 312 teraFLOP/s * 53 * 24 * 3600 * 0.3 = 2.19e23)",,532000000000.0,"708.9 billion tokens. At 0.75 English words per token, that's 532B words",Confident,https://arxiv.org/abs/2303.17564,BloombergGPT: A Large Language Model for Finance,556.0,"Shijie Wu, Ozan Irsoy, Steven Lu, Vadim Dabravolski, Mark Dredze, Sebastian Gehrmann, Prabhanjan Kambadur, David Rosenberg, Gideon Mann","The use of NLP in the realm of financial technology is broad and complex, with applications ranging from sentiment analysis and named entity recognition to question answering. Large Language Models (LLMs) have been shown to be effective on a variety of tasks; however, no LLM specialized for the financial domain has been reported in literature. In this work, we present BloombergGPT, a 50 billion parameter language model that is trained on a wide range of financial data. We construct a 363 billion token dataset based on Bloomberg's extensive data sources, perhaps the largest domain-specific dataset yet, augmented with 345 billion tokens from general purpose datasets. We validate BloombergGPT on standard LLM benchmarks, open financial benchmarks, and a suite of internal benchmarks that most accurately reflect our intended usage. Our mixed dataset training leads to a model that outperforms existing models on financial tasks by significant margins without sacrificing performance on general LLM benchmarks. Additionally, we explain our modeling choices, training process, and evaluation methodology. We release Training Chronicles (Appendix C) detailing our experience in training BloombergGPT.","Industry,Academia","United States of America,United States of America",SOTA improvement,"""We validate BloombergGPT on standard LLM benchmarks, open financial benchmarks, and a suite of internal benchmarks that most accurately reflect our intended usage. Our mixed dataset training leads to a model that outperforms existing models on financial tasks by significant margins without sacrificing performance on general LLM benchmarks.""",0.8,1270.0,"""~53 days""",NVIDIA A100,512.0,0.327,369586.1352802876,,408324.2395754059,,,,4200000.0,"""in the first 7,200 steps, we use a batch size of 1,024 (2.1M tokens), then switch to a batch size of 2,048 (4.2M tokens) for the remainder of training.""",Unreleased,Unreleased,,,BF16,
VideoMAE V2,"Nanjing University,Shenzhen Institute of Advanced Technology,Shanghai AI Lab",2023-03-29,Video,Action recognition,1000000000.0,1B,9.7e+21,"finetuned on ViT-g (smaller than ViT-G with 1B params)

""It takes more than two weeks to pre-train a ViT-g model with VideoMAE
on 64 A100 GPUs""

64 * 312 trillion * 2 * 7 * 24 * 3600 * 0.4 (utilization assumption) = 9.7e21",,,"1.35 million video clips. Not sure about average length (34 seconds, but that's only reported for Instagram portion).

""In total, there are around 1.35M clips in our mixed dataset and
this is the largest dataset ever used for video masked autoencoding.",Confident,https://arxiv.org/abs/2303.16727v2,VideoMAE V2: Scaling Video Masked Autoencoders with Dual Masking,222.0,"Limin Wang, Bingkun Huang, Zhiyu Zhao, Zhan Tong, Yinan He, Yi Wang, Yali Wang, Yu Qiao","Scale is the primary factor for building a powerful foundation model that could well generalize to a variety of downstream tasks. However, it is still challenging to train video foundation models with billions of parameters. This paper shows that video masked autoencoder (VideoMAE) is a scalable and general self-supervised pre-trainer for building video foundation models. We scale the VideoMAE in both model and data with a core design. Specifically, we present a dual masking strategy for efficient pre-training, with an encoder operating on a subset of video tokens and a decoder processing another subset of video tokens. Although VideoMAE is very efficient due to high masking ratio in encoder, masking decoder can still further reduce the overall computational cost. This enables the efficient pre-training of billion-level models in video. We also use a progressive training paradigm that involves an initial pre-training on a diverse multi-sourced unlabeled dataset, followed by a post-pre-training on a mixed labeled dataset. Finally, we successfully train a video ViT model with a billion parameters, which achieves a new state-of-the-art performance on the datasets of Kinetics (90.0% on K400 and 89.9% on K600) and Something-Something (68.7% on V1 and 77.0% on V2). In addition, we extensively verify the pre-trained video ViT models on a variety of downstream tasks, demonstrating its effectiveness as a general video representation learner. The code and model is available at \url{this https URL}.","Academia,Academia","China,China,China",SOTA improvement,"""Finally, we successfully train a video ViT model with a
billion parameters, which achieves a new state-of-the-art
performance on the datasets of Kinetics (90.0% on K400
and 89.9% on K600) and Something-Something (68.7% on
V1 and 77.0% on V2).""",1200.0,336.0,2 weeks,NVIDIA A100 SXM4 80 GB,64.0,,18339.96928068276,,51041.66660009344,ViT-G/14,9.7e+21,"finetuned on ViT-g (smaller than ViT-G with 1B params)

""It takes more than two weeks to pre-train a ViT-g model with VideoMAE
on 64 A100 GPUs""

64 * 312 trillion * 2 * 7 * 24 * 3600 * 0.4 (utilization assumption) = 9.7e21
",,,Open weights (unrestricted),Open source,Open source,"MIT
https://github.com/OpenGVLab/VideoMAEv2/blob/master/LICENSE",FP16,
SigLIP 400M,Google DeepMind,2023-03-27,Vision,"Image classification,Image embedding",400000000.0,Table 3,4.9467301e+21,"Operation Counting: 
6ND = 6 FLOP / token / parameter*400*10^6 parameters * 6705000000000 tokens [see Dataset size notes] = 1.6092e+22 FLOP

Hardware:
275000000000000 FLOP/s/GPU * 32 GPUs * 120 hours * 3600 sec / hour * 0.4 = 1.52064e+21 FLOPs

geometric mean (1.6092e+22, 1.52064e+21) = 4.9467301e+21",WebLI,6705000000000.0,"""B/16 ViT for image embeddings and B-sized transformer for text embeddings. The input images are resized to 224×224 resolution.""

""SigLIP performs best at batch size 32 k [image-text pairs]"" 

729 patches (table 3)

""a maximum of 16 text tokens are kept""

9B examples * (16 text tokens + 729 image tokens) = 6.705e+12 total training tokens",Confident,https://arxiv.org/abs/2303.15343,Sigmoid Loss for Language Image Pre-Training,,"Xiaohua Zhai, Basil Mustafa, Alexander Kolesnikov, Lucas Beyer","We propose a simple pairwise Sigmoid loss for Language-Image Pre-training (SigLIP). Unlike standard contrastive learning with softmax normalization, the sigmoid loss operates solely on image-text pairs and does not require a global view of the pairwise similarities for normalization. The sigmoid loss simultaneously allows further scaling up the batch size, while also performing better at smaller batch sizes. Combined with Locked-image Tuning, with only four TPUv4 chips, we train a SigLiT model that achieves 84.5% ImageNet zero-shot accuracy in two days. The disentanglement of the batch size from the loss further allows us to study the impact of examples vs pairs and negative to positive ratio. Finally, we push the batch size to the extreme, up to one million, and find that the benefits of growing batch size quickly diminish, with a more reasonable batch size of 32k being sufficient. We release our models at this https URL and hope our research motivates further explorations in improving the quality and efficiency of language-image pre-training.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",Significant use,,,120.0,5 days = 120 hours,Google TPU v4,32.0,,,,10846.837246253186,,,,,,Open weights (unrestricted),Unreleased,Open source,"Apache2 license

https://github.com/google-research/big_vision

https://colab.research.google.com/github/google-research/big_vision/blob/main/big_vision/configs/proj/image_text/SigLIP_demo.ipynb

code release is still pending as ""TODO""",,
Firefly,Adobe,2023-03-21,Image generation,Image generation,,,,,Adobe Stock,,,Unknown,https://news.adobe.com/news/news-details/2023/Adobe-Unveils-Firefly-a-Family-of-new-Creative-Generative-AI/default.aspx,"Adobe Unveils Firefly, a Family of new Creative Generative AI",,,"Today, Adobe (Nasdaq:ADBE) introduced Adobe Firefly, a new family of creative generative AI models, first focused on the generation of images and text effects. Adobe Firefly will bring even more precision, power, speed and ease directly into Creative Cloud, Document Cloud, Experience Cloud and Adobe Express workflows where content is created and modified. Adobe Firefly will be part of a series of new Adobe Sensei generative AI services across Adobe’s clouds.",Industry,United States of America,Significant use,"Integrated into Photoshop. Users generate >200m images within a few months of release:

https://venturebeat.com/ai/adobe-stock-creators-arent-happy-with-firefly-the-companys-commercially-safe-gen-ai-tool/

As of October 2024, users have generated 13B images since March 2023. Paid users get 100 generations per month (and can continue at a slower rate after that). Assuming an average of 100 monthly generations per user, that's around 6.7M monthly average users across 19.5 months.",,,,,,,,,,,,,,,Hosted access (no API),Unreleased,,,,
PanGu-Σ,Huawei Noah's Ark Lab,2023-03-20,Language,"Code generation,Language modeling,Translation,Question answering",1085000000000.0,"""In this work, we present PanGu-Σ , a large language model with sparse architecture containing 1.085 trillion parameters.""",4.67e+23,"It has sparse architecture, so we can't use C=6ND.
""We develop PanGu-Σ model under the framework of MindSpore and train it on a cluster with only 512 Ascend 910 AI Accelerators with 329 billion tokens over 100 days.""
100 days * 512 processors * 320 teraFLOPS/processor * 33% utilization = 4.67e+23 FLOP
https://www.wolframalpha.com/input?i=100+days+*+512+*+320+terahertz+*+0.33",,246750000000.0,329B tokens ~= 247B words,Confident,https://arxiv.org/abs/2303.10845,PanGu-Σ: Towards Trillion Parameter Language Model with Sparse Heterogeneous Computing,48.0,"Xiaozhe Ren, Pingyi Zhou, Xinfan Meng, Xinjing Huang, Yadao Wang, Weichao Wang, Pengfei Li, Xiaoda Zhang, Alexander Podolskiy, Grigory Arshinov, Andrey Bout, Irina Piontkovskaya, Jiansheng Wei, Xin Jiang, Teng Su, Qun Liu, Jun Yao","The scaling of large language models has greatly improved natural language understanding, generation, and reasoning. In this work, we develop a system that trained a trillion-parameter language model on a cluster of Ascend 910 AI processors and MindSpore framework, and present the language model with 1.085T parameters named PanGu-{\Sigma}. With parameter inherent from PanGu-{\alpha}, we extend the dense Transformer model to sparse one with Random Routed Experts (RRE), and efficiently train the model over 329B tokens by using Expert Computation and Storage Separation(ECSS). This resulted in a 6.3x increase in training throughput through heterogeneous computing. Our experimental findings show that PanGu-{\Sigma} provides state-of-the-art performance in zero-shot learning of various Chinese NLP downstream tasks. Moreover, it demonstrates strong abilities when fine-tuned in application data of open-domain dialogue, question answering, machine translation and code generation.",Industry,China,SOTA improvement,"""Our experimental findings show that PanGu-{\Sigma} provides state-of-the-art performance in zero-shot learning of various Chinese NLP downstream tasks.""",1.836,2400.0,"We develop PanGu-Σ model under the framework of MindSpore 5
and train it on a cluster with only 512 Ascend 910 AI Accelerators [28] with 329 billion tokens over 100 days.",Huawei Ascend 910,512.0,,,,316521.76523003745,,,,524288.0,"""We train PanGu-Σ with global batch size of 512 with sequence length of 1024 for each sample""",Unreleased,Unreleased,,,FP16,
Gen-2,Runway,2023-03-20,Video,"Video generation,Text-to-video,Image-to-video,Video-to-video",,,,,,,,Unknown,https://research.runwayml.com/gen2,"Gen-2: Generate novel videos with text, images or video clips",,Gen-2 authors,,Industry,United States of America,SOTA improvement,"Website claims SOTA improvement over Stable Diffusion and Text2Live, paper forthcoming",,,,,,,,,,,,,,,API access,Unreleased,,,,
LEP-AD,"King Abdullah University of Science and Technology (KAUST),Karolinska Institute",2023-03-15,Biology,"Proteins,Protein interaction prediction",3007381000.0,"Uses ESM-2 3B. Table 2 gives details on the non-ESM layers. The GCN appears to have about 3.31M parameters and the linear layers should have 771k and 3.3M, respectively. So total is ~3.007B",,No indication of the training used here. ESM-2 3B used 3e22.,,1244420.0,"Largest dataset appears to be STITCH, at 1244420 drug-target pairs.",Confident,https://www.biorxiv.org/content/10.1101/2023.03.14.532563v1.full.pdf,LEP-AD: Language Embedding of Proteins and Attention to Drugs predicts Drug Target Interactions,1.0,"Anuj Daga, Sumeer Ahmad Khan, David Gomez Cabrero, Robert Hoehndorf, Narsis A. Kiani, Jesper Tegner","Predicting drug-target interactions is a tremendous challenge for drug development and lead optimization. Recent advances include training algorithms to learn drug-target interactions from data and molecular simulations. Here we utilize Evolutionary Scale Modeling (ESM-2) models to establish a Transformer protein language model for drug-target interaction predictions. Our architecture, LEPAD, combines pre-trained ESM-2 and Transformer-GCN models predicting binding affinity values. We report new best-in-class state-of-the-art results compared to competing methods such as SimBoost, DeepCPI, Attention-DTA, GraphDTA, and more using multiple datasets, including Davis, KIBA, DTC, Metz, ToxCast, and STITCH. Finally, we find that a pre-trained model with embedding of proteins (the LED-AD) outperforms a model using an explicit alpha-fold 3D representation of proteins (e.g., LEP-AD supervised by Alphafold). The LEP-AD model
scales favorably in performance with the size of training data. Code available at https://github.com/adaga06/LEP-AD","Academia,Academia","Saudi Arabia,Sweden",SOTA improvement,"""We report new best-in-class state-of-the-art results compared
to competing methods such as SimBoost, DeepCPI, Attention-DTA, GraphDTA,
and more using multiple datasets, including Davis, KIBA, DTC, Metz, ToxCast,
and STITCH. Finally, we find that a pre-trained model with embedding of proteins
(the LED-AD) outperforms a model using an explicit alpha-fold 3D representation of proteins (e.g., LEP-AD supervised by Alphafold)""",,,,,,,,,,ESM2-3B,,,,,Unreleased,Open (non-commercial),Open access (non-commercial),https://github.com/adaga06/LEP-AD unclear license,FP16,
GPT-4,OpenAI,2023-03-15,"Multimodal,Language,Vision","Language modeling,Language modeling/generation,Question answering,Visual question answering",,,2.1e+25,"90% CI: 8.2E+24 to 4.4E+25

NOTE: this is a rough estimate based on public information, much less information than most other systems in the database.

Calculation and confidence intervals here: https://colab.research.google.com/drive/1O99z9b1I5O66bT78r9ScslE_nOj5irN9?usp=sharing",Unspecified unreleased,4900000000000.0,"Speculative. Reported secondhand by online sources such as Semianalysis, but not verified by OpenAI. If total number of tokens seen was 13T, text was repeated for 2 epochs, and text was the majority of tokens, then dataset size roughly is 13T*0.75/2 = 4.9T words.

Note this examines only the text dataset, since GPT-4 was first and foremost a language model. However, the vision component had its own vision dataset, which we believe accounted for a much smaller part of the compute budget.",Speculative,https://arxiv.org/abs/2303.08774,GPT-4 Technical Report,8281.0,"OpenAI, Josh Achiam, Steven Adler, Sandhini Agarwal, Lama Ahmad, Ilge Akkaya, Florencia Leoni Aleman, Diogo Almeida, Janko Altenschmidt, Sam Altman, Shyamal Anadkat, Red Avila, Igor Babuschkin, Suchir Balaji, Valerie Balcom, Paul Baltescu, Haiming Bao, Mohammad Bavarian, Jeff Belgum, Irwan Bello, Jake Berdine, Gabriel Bernadett-Shapiro, Christopher Berner, Lenny Bogdonoff, Oleg Boiko, Madelaine Boyd, Anna-Luisa Brakman, Greg Brockman, Tim Brooks, Miles Brundage, Kevin Button, Trevor Cai, Rosie Campbell, Andrew Cann, Brittany Carey, Chelsea Carlson, Rory Carmichael, Brooke Chan, Che Chang, Fotis Chantzis, Derek Chen, Sully Chen, Ruby Chen, Jason Chen, Mark Chen, Ben Chess, Chester Cho, Casey Chu, Hyung Won Chung, Dave Cummings, Jeremiah Currier, Yunxing Dai, Cory Decareaux, Thomas Degry, Noah Deutsch, Damien Deville, Arka Dhar, David Dohan, Steve Dowling, Sheila Dunning, Adrien Ecoffet, Atty Eleti, Tyna Eloundou, David Farhi, Liam Fedus, Niko Felix, Simón Posada Fishman, Juston Forte, Isabella Fulford, Leo Gao, Elie Georges, Christian Gibson, Vik Goel, Tarun Gogineni, Gabriel Goh, Rapha Gontijo-Lopes, Jonathan Gordon, Morgan Grafstein, Scott Gray, Ryan Greene, Joshua Gross, Shixiang Shane Gu, Yufei Guo, Chris Hallacy, Jesse Han, Jeff Harris, Yuchen He, Mike Heaton, Johannes Heidecke, Chris Hesse, Alan Hickey, Wade Hickey, Peter Hoeschele, Brandon Houghton, Kenny Hsu, Shengli Hu, Xin Hu, Joost Huizinga, Shantanu Jain, Shawn Jain et al. (181 additional authors not shown)","We report the development of GPT-4, a large-scale, multimodal model which can accept image and text inputs and produce text outputs. While less capable than humans in many real-world scenarios, GPT-4 exhibits human-level performance on various professional and academic benchmarks, including passing a simulated bar exam with a score around the top 10% of test takers. GPT-4 is a Transformer-based model pre-trained to predict the next token in a document. The post-training alignment process results in improved performance on measures of factuality and adherence to desired behavior. A core component of this project was developing infrastructure and optimization methods that behave predictably across a wide range of scales. This allowed us to accurately predict some aspects of GPT-4's performance based on models trained with no more than 1/1,000th the compute of GPT-4.",Industry,United States of America,"Highly cited,SOTA improvement,Training cost","See the paper, p.1: ""On a suite of traditional NLP benchmarks, GPT-4 outperforms both previous large language models and most state-of-the-art systems (which often have benchmark-specific training or hand-engineering).""",2.0,2280.0,(Speculative) SemiAnalysis conjectures that GPT-4 training took 90-100 days with utilization of 32-36%.,NVIDIA A100 SXM4 40 GB,25000.0,0.34,40695706.4,,19944368.12599428,,,,,,API access,Unreleased,,,,True
Falcon-40B,Technology Innovation Institute,2023-03-15,Language,Language modeling,40000000000.0,Model comes in 7B and 40B variants.,2.4e+23,"C = 6ND = 6 * 40B * 1000B = 2.4e+23 FLOP (assuming one epoch)

Table 1 from https://arxiv.org/pdf/2311.16867 Falcon paper

2,800 petaflop-days * 1e15 * 24 * 3600 = 2.4192e+23 FLOPs",RefinedWeb,1000000000000.0,1000B tokens ~= 750B words,Confident,https://arxiv.org/abs/2311.16867; https://www.tii.ae/news/abu-dhabi-based-technology-innovation-institute-introduces-falcon-llm-foundational-large,Abu Dhabi-based Technology Innovation Institute Introduces Falcon LLM: Foundational Large Language Model (LLM) outperforms GPT-3 with 40 Billion Parameters,0.0,,,Government,United Arab Emirates,Historical significance,,,1440.0,"""Falcon-40B was trained on AWS SageMaker, on 384 A100 40GB GPUs in P4d instances.""
""Training started in December 2022 and took two months.""",NVIDIA A100,384.0,0.3864,319783.157242365,,306345.49441527214,,,,2359296.0,"Batch size 1152 (presumably sequences) per Table 16. Warmed up using smaller batches for first 100B tokens.

""All Falcon models are pretrained with a 2,048 sequence length""

https://arxiv.org/pdf/2311.16867.pdf
",Open weights (unrestricted),Unreleased,,apache 2.0,BF16,
Claude,Anthropic,2023-03-14,Language,"Language modeling,Chat",,,,,Unspecified unreleased,,,Unknown,https://www.anthropic.com/index/introducing-claude,Introducing Claude,,,"Claude is a next-generation AI assistant based on Anthropic’s research into training helpful, honest, and harmless AI systems. Accessible through chat interface and API in our developer console, Claude is capable of a wide variety of conversational and text processing tasks while maintaining a high degree of reliability and predictability.",Industry,United States of America,"Historical significance,SOTA improvement",,,,,,,,,,,,,,,,API access,Unreleased,,,,
PaLM-E,"Google,TU Berlin",2023-03-06,"Robotics,Vision,Language","Visual question answering,Robotic manipulation,Image captioning,Language generation",562000000000.0,562B,,"Based on Palm-540B and ViT-22B and then trained on robotics data.

",,,,Likely,https://arxiv.org/abs/2303.03378,PaLM-E: An Embodied Multimodal Language Model,1192.0,"Danny Driess, Fei Xia, Mehdi S. M. Sajjadi, Corey Lynch, Aakanksha Chowdhery, Brian Ichter, Ayzaan Wahid, Jonathan Tompson, Quan Vuong, Tianhe Yu, Wenlong Huang, Yevgen Chebotar, Pierre Sermanet, Daniel Duckworth, Sergey Levine, Vincent Vanhoucke, Karol Hausman, Marc Toussaint, Klaus Greff, Andy Zeng, Igor Mordatch, Pete Florence","Large language models excel at a wide range of complex tasks. However, enabling general inference in the real world, e.g., for robotics problems, raises the challenge of grounding. We propose embodied language models to directly incorporate real-world continuous sensor modalities into language models and thereby establish the link between words and percepts. Input to our embodied language model are multi-modal sentences that interleave visual, continuous state estimation, and textual input encodings. We train these encodings end-to-end, in conjunction with a pre-trained large language model, for multiple embodied tasks including sequential robotic manipulation planning, visual question answering, and captioning. Our evaluations show that PaLM-E, a single large embodied multimodal model, can address a variety of embodied reasoning tasks, from a variety of observation modalities, on multiple embodiments, and further, exhibits positive transfer: the model benefits from diverse joint training across internet-scale language, vision, and visual-language domains. Our largest model, PaLM-E-562B with 562B parameters, in addition to being trained on robotics tasks, is a visual-language generalist with state-of-the-art performance on OK-VQA, and retains generalist language capabilities with increasing scale.","Industry,Academia","United States of America,Germany",SOTA improvement,"""Our largest model, PaLM-E-562B with 562B parameters, in addition to being trained on robotics tasks, is a visual-language generalist
with state-of-the-art performance on OK-VQA, and retains
generalist language capabilities with increasing scale.""",,,,,,,,,,PaLM (540B),,"Based on Palm-540B and ViT 22B. No compute details given.

""We scale PaLM-E up to 562B parameters, integrating the 540B PaLM (Chowdhery et al., 2022) LLM and the 22B Vision Transformer (ViT) (Dehghani et al., 2023) into, to our knowledge, the largest vision-language model currently reported.""",,,Unreleased,Unreleased,,,,
AudioGen,"Meta AI,Hebrew University of Jerusalem",2023-03-05,Audio,Audio generation,1000000000.0,"""We trained two sets of ALMs, one with 285M parameters (base) and the other with 1B parameters (large).""",9.5e+21,"""the large model was trained on 128 A100 GPUs for 200k steps (∼1 week)""
A100s are 312 teraflop/s
128 * 312 trillion * 7 * 24 * 3600 * 0.3 (utilization assumption) = 7.2e21

Text encoding uses T5-Large, which used 2.3e21 FLOP in pre-training per Flan paper: https://arxiv.org/abs/2210.11416 ","AudioSet,AudioCaps",230400000000.0,"""Overall we are left with ∼4k hours for training data.""
mix of speech and other sounds

Training the audio autoencoder uses reconstruction loss on sequence of raw audio samples. Audio files are in 16kHz, so
16k * 4k * 3600 = 230.4B samples

Audio language modelling operates on tokens; ""each second of audio is represented by 500 tokens"". 
4k * 3600 * 500 = 7.2B tokens",Likely,https://arxiv.org/abs/2209.15352,AudioGen: Textually Guided Audio Generation,229.0,"Felix Kreuk, Gabriel Synnaeve, Adam Polyak, Uriel Singer, Alexandre Défossez, Jade Copet, Devi Parikh, Yaniv Taigman, Yossi Adi","We tackle the problem of generating audio samples conditioned on descriptive text captions. In this work, we propose AaudioGen, an auto-regressive generative model that generates audio samples conditioned on text inputs. AudioGen operates on a learnt discrete audio representation. The task of text-to-audio generation poses multiple challenges. Due to the way audio travels through a medium, differentiating ``objects'' can be a difficult task (e.g., separating multiple people simultaneously speaking). This is further complicated by real-world recording conditions (e.g., background noise, reverberation, etc.). Scarce text annotations impose another constraint, limiting the ability to scale models. Finally, modeling high-fidelity audio requires encoding audio at high sampling rate, leading to extremely long sequences. To alleviate the aforementioned challenges we propose an augmentation technique that mixes different audio samples, driving the model to internally learn to separate multiple sources. We curated 10 datasets containing different types of audio and text annotations to handle the scarcity of text-audio data points. For faster inference, we explore the use of multi-stream modeling, allowing the use of shorter sequences while maintaining a similar bitrate and perceptual quality. We apply classifier-free guidance to improve adherence to text. Comparing to the evaluated baselines, AudioGen outperforms over both objective and subjective metrics. Finally, we explore the ability of the proposed method to generate audio continuation conditionally and unconditionally. Samples: this https URL","Industry,Academia","United States of America,Israel",SOTA improvement,"""We propose a state-of-the-art auto-regressive audio generation model conditioned on textual descriptions or audio prompts, as evaluated with objective and subjective (human
listeners) scores.""",,168.0,1 week,NVIDIA A100,,,9429.74091062958,,,,,,,,Open weights (non-commercial),Open source,Open source,"MIT license, but non-commercial for weights: https://github.com/facebookresearch/audiocraft/blob/main/LICENSE_weights

training info: https://github.com/facebookresearch/audiocraft/blob/main/docs/AUDIOGEN.md ",,
DiT-XL/2,"New York University (NYU),University of California (UC) Berkeley",2023-03-02,Image generation,Image generation,675000000.0,"675M

Table 4: ""Parameter and flop counts exclude the VAE model which contains 84M parameters across the encoder and decoder.""
675e6 not including VAE (likely frozen), 759e6 including VAE",6e+20,"~6e20, based on eyeballing Figure 9. It's between 1e11 and 1e12 gigaflop (1 gigaflop = 1e9 flop), and about 80% of the way towards 1e12 on a log scale. 10^0.8 is about 6. 

3M iterations with a batch size of 256.

""Compute. We implement all models in JAX [1] and train
them using TPU-v3 pods. DiT-XL/2, our most computeintensive model, trains at roughly 5.7 iterations/second on a
TPU v3-256 pod with a global batch size of 256""
256*123000000000000 FLOPs/s * 800000 training steps / 5.7 iterations/second * 0.3 = 1.3258105e+21",ImageNet,,didn't state which ImageNet set,Confident,https://arxiv.org/abs/2212.09748,Scalable Diffusion Models with Transformers,960.0,"William Peebles, Saining Xie","We explore a new class of diffusion models based on the transformer architecture. We train latent diffusion models of images, replacing the commonly-used U-Net backbone with a transformer that operates on latent patches. We analyze the scalability of our Diffusion Transformers (DiTs) through the lens of forward pass complexity as measured by Gflops. We find that DiTs with higher Gflops -- through increased transformer depth/width or increased number of input tokens -- consistently have lower FID. In addition to possessing good scalability properties, our largest DiT-XL/2 models outperform all prior diffusion models on the class-conditional ImageNet 512x512 and 256x256 benchmarks, achieving a state-of-the-art FID of 2.27 on the latter.","Academia,Academia","United States of America,United States of America",SOTA improvement,"""our largest DiT-XL/2 models outperform all prior diffusion models on the classconditional ImageNet 512×512 and 256×256 benchmarks,
achieving a state-of-the-art FID of 2.27 on the latter.""",,,,Google TPU v3,,,111048.19613085664,,,Stable Diffusion (LDM-KL-8-G),,,,,Open weights (non-commercial),Open (non-commercial),,"CC-BY-NC
https://github.com/facebookresearch/DiT?tab=readme-ov-file

https://www.wpeebles.com/DiT.html",,
LLaMA-65B,Meta AI,2023-02-24,Language,"Language modeling,Code generation",65200000000.0,"Model card, table 1: https://github.com/facebookresearch/llama/blob/53011c3d7946dadb8274a4c5c7586ab54edf792d/MODEL_CARD.md",5.5e+23,"1.4e12 tokens * 6.52e10 parameters * 6 FLOP/token/parameter = 5.5e23 FLOP

Compared to 2048 A100 GPUs each with 311.84 TFLOPS maximum performance for 21 days, this implies 47% utilization.
https://www.wolframalpha.com/input?i=5.5*10%5E23+FLOP+%2F+%282048+*+311.84+teraFLOPS+*+21+days%29","CCNet,GitHub,Wikipedia,books,arXiv,Stack Exchange",1340000000000.0,"Table 1 indicates that 1.4T tokens involved sampling sub-datasets at more or less than one epoch. Correcting for this:

(1.1 epoch * 3.3TB) + (1.06 epoch * 0.783TB) + ... = 1.4T tokens
5.24 epoch-TBs = 1.4T tokens
5.24 epoch-TB * 1000 GB/TB * 200M token/GB = 1.4T tokens
1.05T epoch*token = 1.4T tokens
1 epoch = 1.34T tokens
",Confident,https://arxiv.org/abs/2302.13971,LLaMA: Open and Efficient Foundation Language Models,8872.0,"Hugo Touvron, Thibaut Lavril, Gautier Izacard, Xavier Martinet, Marie-Anne Lachaux, Timothée Lacroix, Baptiste Rozière, Naman Goyal, Eric Hambro, Faisal Azhar, Aurelien Rodriguez, Armand Joulin, Edouard Grave, Guillaume Lample","We introduce LLaMA, a collection of foundation language models ranging from 7B to 65B parameters. We train our models on trillions of tokens, and show that it is possible to train state-of-the-art models using publicly available datasets exclusively, without resorting to proprietary and inaccessible datasets. In particular, LLaMA-13B outperforms GPT-3 (175B) on most benchmarks, and LLaMA-65B is competitive with the best models, Chinchilla-70B and PaLM-540B. We release all our models to the research community.",Industry,United States of America,"Historical significance,Highly cited",Widely-used foundation model that has been adapted for others such as Alpaca.,1.09,500.0,"""When training a 65B-parameter model, our code processes around 380 tokens/sec/GPU on 2048 A100 GPU with 80GB of RAM. This means that training over our dataset containing 1.4T tokens takes approximately 21 days.""",NVIDIA A100,2048.0,0.4746,578026.3043,"1023384 processor-hours on A100 GPUs. May 2023 cost rate is $1.36/GPU-hour on Azure ML cloud. https://azure.microsoft.com/en-us/pricing/details/machine-learning/ 
According to https://www.bls.gov/data/inflation_calculator.htm, $1.18 in May 2023 = $1.00 in January 2020.
$1391674 / 1.18 = $1179385 in 2020 USD.",1634534.091472035,,,,4000000.0,,Open weights (non-commercial),Unreleased,,"""we are releasing our model under a noncommercial license focused on research use cases"" https://ai.meta.com/blog/large-language-model-llama-meta-ai/",,
BASIC-L + Lion,"Google,University of California Los Angeles (UCLA)",2023-02-13,Vision,Image classification,3070000000.0,parameter count of original BASIC-L,,"This model is BASIC-L retrained with a different optimizer, Lion. Lion seems more compute-efficient, so we should expect compute to be less than BASIC-L.",,,,Confident,https://arxiv.org/abs/2302.06675v4,Symbolic Discovery of Optimization Algorithms,239.0,"Xiangning Chen, Chen Liang, Da Huang, Esteban Real, Kaiyuan Wang, Yao Liu, Hieu Pham, Xuanyi Dong, Thang Luong, Cho-Jui Hsieh, Yifeng Lu, Quoc V. Le","We present a method to formulate algorithm discovery as program search, and apply it to discover optimization algorithms for deep neural network training. We leverage efficient search techniques to explore an infinite and sparse program space. To bridge the large generalization gap between proxy and target tasks, we also introduce program selection and simplification strategies. Our method discovers a simple and effective optimization algorithm, Lion (EvoLved Sign Momentum). It is more memory-efficient than Adam as it only keeps track of the momentum. Different from adaptive optimizers, its update has the same magnitude for each parameter calculated through the sign operation. We compare Lion with widely used optimizers, such as Adam and Adafactor, for training a variety of models on different tasks. On image classification, Lion boosts the accuracy of ViT by up to 2% on ImageNet and saves up to 5x the pre-training compute on JFT. On vision-language contrastive learning, we achieve 88.3% zero-shot and 91.1% fine-tuning accuracy on ImageNet, surpassing the previous best results by 2% and 0.1%, respectively. On diffusion models, Lion outperforms Adam by achieving a better FID score and reducing the training compute by up to 2.3x. For autoregressive, masked language modeling, and fine-tuning, Lion exhibits a similar or better performance compared to Adam. Our analysis of Lion reveals that its performance gain grows with the training batch size. It also requires a smaller learning rate than Adam due to the larger norm of the update produced by the sign function. Additionally, we examine the limitations of Lion and identify scenarios where its improvements are small or not statistically significant. Lion is also successfully deployed in production systems such as Google search ads CTR model.","Industry,Academia","United States of America,United States of America",SOTA improvement,"""On vision-language contrastive learning, we achieve 88.3% zero-shot and 91.1% fine-tuning accuracy on ImageNet, surpassing the previous best results by 2% and 0.1%, respectively""",,,,,,,,,,,,,,,Unreleased,Open source,,"Apache 2.0
https://github.com/google/automl/tree/master/lion",BF16,
ViT-22B,Google,2023-02-10,Vision,"Object detection,Image classification",21743000000.0,"21.743B, Table 1",1.93248e+23,"""ViT-22B was trained using 256 visual tokens per image, where each token represents a 14 × 14 patch extracted from 224 × 224 sized images. ViT-22B is trained for 177k steps with batch size of 65k: approximately 3 epochs""

""ViT-22B was trained on 1024 TPU V4 chips for 177K steps""

""Using these techniques, ViT-22B processes 1.15k tokens per second per core during training (forward and backward pass) on TPUv4 [...] ViT-22B’s model flops utilization (MFU) is 54.9%""

256 * 177k * 65k = 2.945T tokens

So training time is 2.945T tokens / (1.15k * 2 * 1024) tokens/s = 1.25M seconds = 347.4 hours

So 1024 TPUv4 chips for 1.25M seconds at 54.9% MFU:
1024 * 2.75e14 * 1.25M * 0.549 = 1.93248e23",JFT-4B,4000000000.0,"""Dataset. ViT-22B is trained on a version of JFT (Sun et al., 2017), extended to around 4B images (Zhai et al.,
2022a). These images have been semi-automatically annotated with a class-hierarchy of 30k labels""",Confident,https://arxiv.org/abs/2302.05442v1,Scaling Vision Transformers to 22 Billion Parameters,428.0,"Mostafa Dehghani, Josip Djolonga, Basil Mustafa, Piotr Padlewski, Jonathan Heek, Justin Gilmer, Andreas Steiner, Mathilde Caron, Robert Geirhos, Ibrahim Alabdulmohsin, Rodolphe Jenatton, Lucas Beyer, Michael Tschannen, Anurag Arnab, Xiao Wang, Carlos Riquelme, Matthias Minderer, Joan Puigcerver, Utku Evci, Manoj Kumar, Sjoerd van Steenkiste, Gamaleldin F. Elsayed, Aravindh Mahendran, Fisher Yu, Avital Oliver, Fantine Huot, Jasmijn Bastings, Mark Patrick Collier, Alexey Gritsenko, Vighnesh Birodkar, Cristina Vasconcelos, Yi Tay, Thomas Mensink, Alexander Kolesnikov, Filip Pavetić, Dustin Tran, Thomas Kipf, Mario Lučić, Xiaohua Zhai, Daniel Keysers, Jeremiah Harmsen, Neil Houlsby","The scaling of Transformers has driven breakthrough capabilities for language models. At present, the largest large language models (LLMs) contain upwards of 100B parameters. Vision Transformers (ViT) have introduced the same architecture to image and video modelling, but these have not yet been successfully scaled to nearly the same degree; the largest dense ViT contains 4B parameters (Chen et al., 2022). We present a recipe for highly efficient and stable training of a 22B-parameter ViT (ViT-22B) and perform a wide variety of experiments on the resulting model. When evaluated on downstream tasks (often with a lightweight linear model on frozen features), ViT-22B demonstrates increasing performance with scale. We further observe other interesting benefits of scale, including an improved tradeoff between fairness and performance, state-of-the-art alignment to human visual perception in terms of shape/texture bias, and improved robustness. ViT-22B demonstrates the potential for ""LLM-like"" scaling in vision, and provides key steps towards getting there.",Industry,United States of America,SOTA improvement,"""The largest
ViT-22B sets the new SOTA on the challenging ObjectNet test set""",2.9,347.4,"""Using these techniques, ViT-22B processes 1.15k tokens per second per core during training (forward and backward pass)""
From model card we know they trained with 1024 TPUv4 chips, and there are 2 cores per chip. Total number of tokens was 177K steps * 65k images/step * 256 tokens/image = 2.945T tokens

So training time is 2.945T tokens / (1.15k * 2 * 1024) tokens/s = 1.25M seconds = 347.4 hours",Google TPU v4,1024.0,0.549,285555.57016183576,,347446.80145890714,,,,,,Unreleased,Unreleased,,don't see it here: https://github.com/google-research/vision_transformer?tab=readme-ov-file#available-vit-models ,BF16,
ProteinDT,"University of California (UC) Berkeley,California Institute of Technology,University of Toronto,University of Wisconsin Madison,Texas A&M,NVIDIA,Mila - Quebec AI (originally Montreal Institute for Learning Algorithms)",2023-02-09,"Biology,Language",Proteins,,,,,UniProtKB,197000000.9999998,"Total amino acids: 197,000,000 residues

Final calculation: 1.97 × 10⁸ datapoints

Value = 197,000,000 = 1.97e8",Unknown,https://arxiv.org/abs/2302.04611,A Text-guided Protein Design Framework,,"Shengchao Liu, Yanjing Li, Zhuoxinran Li, Anthony Gitter, Yutao Zhu, Jiarui Lu, Zhao Xu, Weili Nie, Arvind Ramanathan, Chaowei Xiao, Jian Tang, Hongyu Guo, and Anima Anandkumar","Current AI-assisted protein design mainly utilizes protein sequential and structural information. Meanwhile, there exists tremendous knowledge curated by humans in the text format describing proteins’ high-level functionalities. Yet, whether the incorporation of such text data can help protein design tasks has not been explored. To bridge this gap, we propose ProteinDT, a multi-modal framework that leverages textual descriptions for protein design. ProteinDT consists of three subsequent steps: ProteinCLAP which aligns the representation of two modalities, a facilitator that generates the protein representation from the text modality, and a decoder that creates the protein sequences from the representation. To train ProteinDT, we construct a large dataset, SwissProtCLAP, with 441K text and protein pairs. We quantitatively verify the effectiveness of ProteinDT on three challenging tasks: (1) over 90% accuracy for text-guided protein generation; (2) best hit ratio on 10 zero-shot text-guided protein editing tasks; (3) superior performance on four out of six protein property prediction benchmarks.","Academia,Academia,Academia,Academia,Academia,Industry,Academia","United States of America,United States of America,Canada,United States of America,United States of America,United States of America,Canada",SOTA improvement,"""Compared to six state-of-the-art protein sequence representation methods, ProteinDT can obtain consistently superior performance on four of six benchmark tasks.""",,,,,,,,,,SciBERT,,,,,Open weights (unrestricted),Open source,,"MIT license
https://github.com/chao1224/ProteinDT",FP16,
Gen-1,Runway,2023-02-06,Video,"Video generation,Text-to-video",,,,,,,,Unknown,https://arxiv.org/abs/2302.03011,Structure and Content-Guided Video Synthesis with Diffusion Models,377.0,"Patrick Esser, Johnathan Chiu, Parmida Atighehchian, Jonathan Granskog, Anastasis Germanidis","Text-guided generative diffusion models unlock powerful image creation and editing tools. While these have been extended to video generation, current approaches that edit the content of existing footage while retaining structure require expensive re-training for every input or rely on error-prone propagation of image edits across frames. In this work, we present a structure and content-guided video diffusion model that edits videos based on visual or textual descriptions of the desired output. Conflicts between user-provided content edits and structure representations occur due to insufficient disentanglement between the two aspects. As a solution, we show that training on monocular depth estimates with varying levels of detail provides control over structure and content fidelity. Our model is trained jointly on images and videos which also exposes explicit control of temporal consistency through a novel guidance method. Our experiments demonstrate a wide variety of successes; fine-grained control over output characteristics, customization based on a few reference images, and a strong user preference towards results by our model.",Industry,United States of America,SOTA improvement,,,,,,,,,,,,,,,,API access,Unreleased,,,,
Flan T5-XXL + BLIP-2,Salesforce Research,2023-01-30,"Multimodal,Language,Vision","Vision-language generation,Chat,Visual question answering",12100000000.0,"12.1B, per Table 2. 

only 108M trainable params (i.e. params trained during the BLIP process)",,"fine-tuned from Flan-T5 XXL (11B) and ViT-g

fine-tuning compute:

""using a single 16-A100(40G) machine, our largest model with
ViT-g and FlanT5-XXL requires less than 6 days for the first
stage and less than 3 days for the second stage.""

16 * 9 days * 24 * 3600 * 312 teraflops * 0.3 ~= 1.2e21","COCO,LAION-400M",,"""We use the same pre-training dataset as BLIP with 129M images in total""",Confident,"https://arxiv.org/abs/2301.12597, https://huggingface.co/Salesforce/blip2-flan-t5-xl",BLIP-2: Bootstrapping Language-Image Pre-training with Frozen Image Encoders and Large Language Models,2880.0,"Junnan Li, Dongxu Li, Silvio Savarese, Steven Hoi","The cost of vision-and-language pre-training has become increasingly prohibitive due to end-to-end training of large-scale models. This paper proposes BLIP-2, a generic and efficient pre-training strategy that bootstraps vision-language pre-training from off-the-shelf frozen pre-trained image encoders and frozen large language models. BLIP-2 bridges the modality gap with a lightweight Querying Transformer, which is pre-trained in two stages. The first stage bootstraps vision-language representation learning from a frozen image encoder. The second stage bootstraps vision-to-language generative learning from a frozen language model. BLIP-2 achieves state-of-the-art performance on various vision-language tasks, despite having significantly fewer trainable parameters than existing methods. For example, our model outperforms Flamingo80B by 8.7% on zero-shot VQAv2 with 54x fewer trainable parameters. We also demonstrate the model's emerging capabilities of zero-shot image-to-text generation that can follow natural language instructions.",Industry,United States of America,Highly cited,,,200.0,"""less than 6 days for the first
stage and less than 3 days for the second stage""
9*24 is 216, rounding down a bit is 200 hours",NVIDIA A100 SXM4 40 GB,,,99690.24664120316,,,Flan-T5 11B,1.2e+21,"ViT-g is the other base model.

""using a single 16-A100(40G) machine, our largest model with
ViT-g and FlanT5-XXL requires less than 6 days for the first
stage and less than 3 days for the second stage.""

16 * 9 days * 24 * 3600 * 312 teraflops * 0.3 ~= 1.2e21",,,Open weights (unrestricted),Open source,Open source,"BSD license (commercial)
https://github.com/salesforce/LAVIS/tree/main/projects/blip2",BF16,
BLIP-2 (Q-Former),Salesforce Research,2023-01-30,"Vision,Language","Visual question answering,Image captioning",1480000000.0,"Q-Former has 188M params. The BLIP-2 system overall has ""54x fewer trainable parameters"" than Flamingo80B.",1.20000000001e+21,https://www.wolframalpha.com/input?i=312+teraFLOPS+*+16+*+200+hours+*+0.33,"COCO,LAION-400M,Conceptual Captions (CC3M),Conceptual Captions 12M (CC12M),VisualGenome,SBU",,,Confident,https://arxiv.org/abs/2301.12597,BLIP-2: Bootstrapping Language-Image Pre-training with Frozen Image Encoders and Large Language Models,2880.0,"Junnan Li, Dongxu Li, Silvio Savarese, Steven Hoi","The cost of vision-and-language pre-training has become increasingly prohibitive due to end-to-end training of large-scale models. This paper proposes BLIP-2, a generic and efficient pre-training strategy that bootstraps vision-language pre-training from off-the-shelf frozen pre-trained image encoders and frozen large language models. BLIP-2 bridges the modality gap with a lightweight Querying Transformer, which is pre-trained in two stages. The first stage bootstraps vision-language representation learning from a frozen image encoder. The second stage bootstraps vision-to-language generative learning from a frozen language model. BLIP-2 achieves state-of-the-art performance on various vision-language tasks, despite having significantly fewer trainable parameters than existing methods. For example, our model outperforms Flamingo80B by 8.7% on zero-shot VQAv2 with 54x fewer trainable parameters. We also demonstrate the model's emerging capabilities of zero-shot image-to-text generation that can follow natural language instructions.",Industry,United States of America,SOTA improvement,"""BLIP-2 achieves state-of-the-art performance on various vision-language tasks""",,200.0,"""For example, using
a single 16-A100(40G) machine, our largest model with
ViT-g and FlanT5-XXL requires less than 6 days for the first
stage and less than 3 days for the second stage.""
9 days = 216 hours",NVIDIA A100 SXM4 40 GB,16.0,,1960.8225382725807,,12776.908953102382,,,,,,Open weights (unrestricted),Open source,Open source,"https://github.com/salesforce/LAVIS/tree/main/projects/blip2 includes training and inference code

models here: https://huggingface.co/models?other=blip-2 ",FP16,
DDPM-IP (CelebA),Utrecht University,2023-01-27,Image generation,"Image generation,Text-to-image",295000000.0,"295M for CelebA model, per Table 9",3.5e+20,"""We use Pytorch 1.8 (Paszke et al., 2019) and trained all the models on different NVIDIA Tesla V100s (16G memory). In
more detail, we use 2 GPUs to train the models on CIFAR10 for 2 days, and 4 GPUs to train the models on ImageNet 32×32
for 34 days. For LSUN tower 64×64, CelebA 64×64 and FFHQ 128×128, we used 16 GPUs to train the models for 3 days,
5 days and 4 days, respectively""

5*16 V100-days for CelebA.

5 * 16 * 24 * 3600 * 125 teraflops * 0.4 ~= 3.5e20",CelebA,203000.0,,Likely,https://arxiv.org/abs/2301.11706v3,Input Perturbation Reduces Exposure Bias in Diffusion Models,39.0,"Mang Ning, Enver Sangineto, Angelo Porrello, Simone Calderara, Rita Cucchiara","Denoising Diffusion Probabilistic Models have shown an impressive generation quality, although their long sampling chain leads to high computational costs. In this paper, we observe that a long sampling chain also leads to an error accumulation phenomenon, which is similar to the exposure bias problem in autoregressive text generation. Specifically, we note that there is a discrepancy between training and testing, since the former is conditioned on the ground truth samples, while the latter is conditioned on the previously generated results. To alleviate this problem, we propose a very simple but effective training regularization, consisting in perturbing the ground truth samples to simulate the inference time prediction errors. We empirically show that, without affecting the recall and precision, the proposed input perturbation leads to a significant improvement in the sample quality while reducing both the training and the inference times. For instance, on CelebA 64×64, we achieve a new state-of-the-art FID score of 1.27, while saving 37.5% of the training time. The code is publicly available at this https URL",Academia,Netherlands,SOTA improvement,"""For instance, on CelebA 64×64, we achieve a new state-of-theart FID score of 1.27, while saving 37.5% of the training time""",681.0,120.0,5 days,NVIDIA V100,,,390.4861317667304,,,,,,,,Open weights (unrestricted),Open source,,MIT license,FP16,
MusicLM,Google,2023-01-26,Audio,Audio generation,860000000.0,"""We use decoder-only Transformers for modeling the semantic stage and the acoustic stages of AudioLM. The models
share the same architecture, composed of 24 layers, 16 attention heads, an embedding dimension of 1024, feed-forward
layers of dimensionality 4096, dropout of 0.1, and relative
positional embeddings (Raffel et al., 2020), resulting in
430M parameters per stage.""

""stage"" seems to mean semantic + acoustic, so 860M total",,,Free Music Archive,,>280k hours,Confident,https://arxiv.org/abs/2301.11325,MusicLM: Generating Music From Text,329.0,"Andrea Agostinelli, Timo I. Denk, Zalán Borsos, Jesse Engel, Mauro Verzetti, Antoine Caillon, Qingqing Huang, Aren Jansen, Adam Roberts, Marco Tagliasacchi, Matt Sharifi, Neil Zeghidour, Christian Frank","We introduce MusicLM, a model generating high-fidelity music from text descriptions such as ""a calming violin melody backed by a distorted guitar riff"". MusicLM casts the process of conditional music generation as a hierarchical sequence-to-sequence modeling task, and it generates music at 24 kHz that remains consistent over several minutes. Our experiments show that MusicLM outperforms previous systems both in audio quality and adherence to the text description. Moreover, we demonstrate that MusicLM can be conditioned on both text and a melody in that it can transform whistled and hummed melodies according to the style described in a text caption. To support future research, we publicly release MusicCaps, a dataset composed of 5.5k music-text pairs, with rich text descriptions provided by human experts.",Industry,United States of America,SOTA improvement,"""We demonstrate that our method outperforms baselines on MusicCaps, a hand-curated, high-quality
dataset of 5.5k music-text pairs prepared by musicians.""",,,,,,,,,,W2v-BERT,,also MuLan and SoundStream,,,Unreleased,Unreleased,,,,
Ankh_large,"Technical University of Munich,Columbia University",2023-01-16,Biology,"Protein generation,Proteins,Protein or nucleotide language model (pLM/nLM)",1900000000.0,"Figure 1 indicates 1.15B parameters, but both the huggingface model and a replication (https://huggingface.co/ElnaggarLab/ankh-large and https://www.biorxiv.org/content/10.1101/2023.07.05.547496v1.full.pdf) indicate 1.9B parameters.
Notebook for counting params: https://colab.research.google.com/drive/1EGI5_vDl4pOBUukJexMHQR16BFKJe4a5?usp=sharing",6.5e+21,"Table 9 from here: https://www.biorxiv.org/content/10.1101/2023.07.05.547496v1.full.pdf

Can also be manually estimated based on the details in Table 11 and 4.6.1 Exp 4. 14B residues * 68 epochs = 952B tokens seen in forward passes. However, only 20% of tokens are masked as individual targets; other tokens in consecutive spans are collapsed into single-token targets to reduce computations. For masking rate of 20%, the average sequence will have 36% as many targets as input tokens under this strategy. This is the relevant number of backward passes:
(2 * 952B * 19B) + (4 * 952B * 0.36 * 19B) = 6.22e22

36% figure verified here: https://colab.research.google.com/drive/1ETsmp_KRMK8kIRA5kdfcO9QiPK28cBQ6?usp=sharing ",UniRef50,14000000000.0,"Pretrained over UniRef50; 45M proteins and 14B amino acids, per Table 2

952B tokens from Table 9 at:
https://www.biorxiv.org/content/10.1101/2023.07.05.547496v1
(This is total tokens over multiple epochs)",Confident,https://arxiv.org/abs/2301.06568,Ankh: Optimized Protein Language Model Unlocks General-Purpose Modelling,59.0,"Ahmed Elnaggar, Hazem Essam, Wafaa Salah-Eldin, Walid Moustafa, Mohamed Elkerdawy, Charlotte Rochereau, Burkhard Rost","As opposed to scaling-up protein language models (PLMs), we seek improving performance via protein-specific optimization. Although the proportionality between the language model size and the richness of its learned representations is validated, we prioritize accessibility and pursue a path of data-efficient, cost-reduced, and knowledge-guided optimization. Through over twenty experiments ranging from masking, architecture, and pre-training data, we derive insights from protein-specific experimentation into building a model that interprets the language of life, optimally. We present Ankh, the first general-purpose PLM trained on Google’s TPU-v4 surpassing the state-of-the-art performance with fewer parameters (<10% for pre-training, <7% for inference, and <30% for the embedding dimension). We provide a representative range of structure and function benchmarks where Ankh excels. We further provide a protein variant generation analysis on High-N and One-N input data scales where Ankh succeeds in learning protein evolutionary conservation-mutation trends and introducing functional diversity while retaining key structural-functional characteristics. We dedicate our work to promoting accessibility to research innovation via attainable resources.","Academia,Academia","Germany,United States of America",SOTA improvement,"""On average, Ankh improved the PLM SOTA performance by 4.8%""",68.0,,,Google TPU v4,64.0,,4802.398249072418,,21727.518178781516,,,,524288.0,Table 11,Open weights (non-commercial),Unreleased,Open access (non-commercial),"cc non-commercial:
https://github.com/agemagician/Ankh/blob/main/LICENSE.md

cc-by-nc for weigths:
https://huggingface.co/ElnaggarLab/ankh-large
",,
Nucleotide Transformer,"NVIDIA,Technical University of Munich",2023-01-15,Biology,Protein or nucleotide language model (pLM/nLM),2500000000.0,"""We built four distinct foundation language models of different sizes, ranging from 500M up to 2.5B parameters""",8.08e+21,"""Training the largest parameter model required a total of 128 GPUs across 16 compute nodes for 28 days""

In repo, they default to jnp.float32, but recommend fp16 or bp16 for activations in the docstring. JAX defaults to TF32 so they should be utilizing tensor cores.

Assuming 1.56e14 FLOP/s for 32-bit calculations and 0.3 utilization rate

Estimate: 1.56e14 FLOP/s * 128 GPUs * 28 days * 24 h/day * 3600 s/h * 0.3 utilization rate = 1.45e22

Or, with 6ND:
""the model processed a total of 300B tokens during training""
6 * 300B * 2.5B = 4.5e21

Geometric mean: sqrt(1.45e22 * 4.5e21) = 8.08e21","Human Reference Genome (GRCh38/hg38),1000 Genomes Project",300000000000.0,"Largest dataset is the 1000 Genome dataset, with 3202 genomes for a total of 20.5 trillion nucleotides. However, for each dataset training was run until the model saw 300B tokens.",Likely,https://www.biorxiv.org/content/10.1101/2023.01.11.523679v1.full.pdf,"The Nucleotide Transformer: Building and Evaluating Robust
Foundation Models for Human Genomics",22.0,"Hugo Dalla-Torre, Liam Gonzalez, Javier Mendoza Revilla, Nicolas Lopez Carranza, Adam Henryk Grzywaczewski, Francesco Oteri, Christian Dallago, Evan Trop, Hassan Sirelkhatim, Guillaume Richard, Marcin Skwark, Karim Beguir,
Marie Lopez, Thomas Pierrot","Closing the gap between measurable genetic information and observable traits is a longstanding challenge in genomics. Yet, the prediction of molecular phenotypes from DNA sequences alone remains limited and inaccurate, often driven by the scarcity of annotated data and the inability to transfer learnings between prediction tasks. Here, we present an extensive study of foundation models pre-trained on DNA sequences, named the Nucleotide Transformer, integrating information from 3,202 diverse human genomes, as well as 850 genomes from a wide range of species, including model and non-model organisms. These transformer models yield transferable, context-specific representations of nucleotide sequences, which allow for accurate molecular phenotype prediction even in low-data settings. We show that the representations alone match or outperform specialized methods on 11 of 18 prediction tasks, and up to 15 after fine-tuning. Despite no supervision, the transformer models learnt to focus attention on key genomic elements, including those that regulate gene expression, such as enhancers. Lastly, we demonstrate that utilizing model representations alone can improve the prioritization of functional genetic variants. The training and application of foundational models in genomics explored in this study provide a widely applicable stepping stone to bridge the gap of accurate molecular phenotype prediction from DNA sequence alone.
","Industry,Academia","United States of America,Germany",SOTA improvement,"""We show that the representations alone match or outperform specialized
methods on 11 of 18 prediction tasks, and up to 15 after fine-tuning.""",1.0,672.0,"""Training the largest parameter model required a total of 128 GPUs across 16 compute nodes for 28 days""",NVIDIA A100,128.0,,51064.70621394041,,102249.42137571,,9.35e+17,"""All fine-tuning runs were performed on a single node with eight A100 GPUs. [...] On average, a fine-tuning run lasted 20 minutes for the 500M parameter models, and 50 minutes for the 2.5B parameter models.""

Estimate: 78e12 FLOP/s * 8 GPUs * 50 min * 60 seconds * 0.5 utilization rate = 9.36e17",,,Open weights (non-commercial),Unreleased,,"Attribution-NonCommercial-ShareAlike 4.0 International license
https://github.com/instadeepai/nucleotide-transformer

In this repository, you will find the following:

Inference code for our models
Pre-trained weights for all 9 NT models and 2 SegmentNT models
Instructions for using the code and pre-trained models","TF32,FP32",
DreamerV3,"DeepMind,University of Toronto",2023-01-10,"Multimodal,Games",Open ended play,200000000.0,Table B1,2.2032e+20,"16 environment instances, each with 1 V100 running for 17 days (table A1) - it's not entirely clear if the GPU days already account for multiple environment instances.

Assuming no:
Compute: 17*24*60*60*125000000000000*0.3=5.508e+19
Assuming yes:
Compute: 17*24*60*60*16*125000000000000*0.3=8.8128e+20

Geometric mean: 220320000000000000000",,100000000.0,,Likely,https://arxiv.org/abs/2301.04104v1,Mastering Diverse Domains through World Models,645.0,"Danijar Hafner, Jurgis Pasukonis, Jimmy Ba, Timothy Lillicrap ","General intelligence requires solving tasks across many domains. Current reinforcement learning algorithms carry this potential but are held back by the resources and knowledge required to tune them for new tasks. We present DreamerV3, a general and scalable algorithm based on world models that outperforms previous approaches across a wide range of domains with fixed hyperparameters. These domains include continuous and discrete actions, visual and low-dimensional inputs, 2D and 3D worlds, different data
budgets, reward frequencies, and reward scales. We observe favorable scaling properties of DreamerV3, with larger models directly translating to higher data-efficiency and final performance. Applied out of the box, DreamerV3 is the first algorithm to collect diamonds in Minecraft from scratch without human data or curricula, a long-standing challenge in artificial intelligence. Our general algorithm makes reinforcement learning broadly applicable and allows scaling to hard decision making problems
","Industry,Academia","United Kingdom of Great Britain and Northern Ireland,Canada",SOTA improvement,"Using the same hyperparameters across all domains, DreamerV3 outperforms specialized model-free and model-based algorithms in a wide range of benchmarks and data-efficiency regimes. Applied out of the box, DreamerV3 also learns to obtain diamonds in the popular video game Minecraft from scratch given sparse rewards, a long-standing challenge in artificial intelligence for which previous approaches required human data or domain-specific heuristics.",,6528.0,,NVIDIA V100,16.0,,,,9586.950671364422,,,,,,Unreleased,Open source,,"Apache 2.0
https://github.com/danijar/dreamerv3",BF16,
VALL-E,Microsoft,2023-01-05,"Audio,Speech","Speech synthesis,Text-to-speech",353000000.0,"""Both the AR model and the NAR model have the same transformer architecture with 12
layers, 16 attention heads, an embedding dimension of 1024, a feed-forward layer dimension of 4096, and a dropout of 0.1""

Ben's script says that's 353M parameters, using n_block 12, d_model 1024, d_ff 4096, encoder only False

https://github.com/bencottier/ml-parameter-count/blob/main/parameter_count.py",1.01e+19,"""The models are trained using 16 NVIDIA TESLA V100 32GB GPUs with a batch size of 6k acoustic
tokens per GPU for 800k steps""

353M * 800k * 6k * 6 = 1.01e19

16 V100s is 2080 teraFLOP or 2e15 FLOP so 1e19 would take 1.5 hours at 100% utilization or ~5 hours at 30%. Is that plausible?",LibriLight,820800000.0,"60k hours
~13,680 words/hour * 60,000 = 820800000 words
https://docs.google.com/document/d/1G3vvQkn4x_W71MKg0GmHVtzfd9m0y3_Ofcoew0v902Q/edit#heading=h.3pbt0hfgv7pq",Speculative,https://arxiv.org/abs/2301.02111,Neural Codec Language Models are Zero-Shot Text to Speech Synthesizers,471.0,"Chengyi Wang, Sanyuan Chen, Yu Wu, Ziqiang Zhang, Long Zhou, Shujie Liu, Zhuo Chen, Yanqing Liu, Huaming Wang, Jinyu Li, Lei He, Sheng Zhao, Furu Wei","We introduce a language modeling approach for text to speech synthesis (TTS). Specifically, we train a neural codec language model (called Vall-E) using discrete codes derived from an off-the-shelf neural audio codec model, and regard TTS as a conditional language modeling task rather than continuous signal regression as in previous work. During the pre-training stage, we scale up the TTS training data to 60K hours of English speech which is hundreds of times larger than existing systems. Vall-E emerges in-context learning capabilities and can be used to synthesize high-quality personalized speech with only a 3-second enrolled recording of an unseen speaker as an acoustic prompt. Experiment results show that Vall-E significantly outperforms the state-of-the-art zero-shot TTS system in terms of speech naturalness and speaker similarity. In addition, we find Vall-E could preserve the speaker's emotion and acoustic environment of the acoustic prompt in synthesis. See this https URL for demos of our work.",Industry,"United States of America,Multinational,India,Belgium",SOTA improvement,"""VALL-E significantly outperforms
the state-of-the-art zero-shot TTS system [Casanova et al., 2022b] in terms of speech naturalness and
speaker similarity, with +0.12 comparative mean option score (CMOS) and +0.93 similarity mean
option score (SMOS) improvement on LibriSpeech""",,,,NVIDIA V100,,,11.40575196486363,,,,,,,,Unreleased,Unreleased,Unreleased,onlly demos https://www.microsoft.com/en-us/research/project/vall-e-x/vall-e/,,
Hybrid H3-2.7B,"Stanford University,University at Buffalo",2022-12-28,Language,Language modeling/generation,2700000000.0,2.7B,6.48e+21,"6 FLOP/token/parameter * 400000000000 training tokens * 2700000000 parameters = 6.48e+21 FLOP

___________________
in the algorithmic progress paper the estimation was 8.49 × 10^20 based on the assumption of WT-103 dataset and 509 epochs",The Pile,400000000000.0,"""We train hybrid models at sizes 125M, 355M, 1.3B, and 2.7B on the Pile [21] for 400B tokens""",Likely,https://arxiv.org/abs/2212.14052,Hungry Hungry Hippos: Towards Language Modeling with State Space Models,271.0,"Daniel Y. Fu, Tri Dao, Khaled K. Saab, Armin W. Thomas, Atri Rudra, Christopher Ré","State space models (SSMs) have demonstrated state-of-the-art sequence modeling performance in some modalities, but underperform attention in language modeling. Moreover, despite scaling nearly linearly in sequence length instead of quadratically, SSMs are still slower than Transformers due to poor hardware utilization. In this paper, we make progress on understanding the expressivity gap between SSMs and attention in language modeling, and on reducing the hardware barrier between SSMs and attention. First, we use synthetic language modeling tasks to understand the gap between SSMs and attention. We find that existing SSMs struggle with two capabilities: recalling earlier tokens in the sequence and comparing tokens across the sequence. To understand the impact on language modeling, we propose a new SSM layer, H3, that is explicitly designed for these abilities. H3 matches attention on the synthetic languages and comes within 0.4 PPL of Transformers on OpenWebText. Furthermore, a hybrid 125M-parameter H3-attention model that retains two attention layers surprisingly outperforms Transformers on OpenWebText by 1.0 PPL. Next, to improve the efficiency of training SSMs on modern hardware, we propose FlashConv. FlashConv uses a fused block FFT algorithm to improve efficiency on sequences up to 8K, and introduces a novel state passing algorithm that exploits the recurrent properties of SSMs to scale to longer sequences. FlashConv yields 2× speedup on the long-range arena benchmark and allows hybrid language models to generate text 2.4× faster than Transformers. Using FlashConv, we scale hybrid H3-attention language models up to 2.7B parameters on the Pile and find promising initial results, achieving lower perplexity than Transformers and outperforming Transformers in zero- and few-shot learning on a majority of tasks in the SuperGLUE benchmark.","Academia,Academia","United States of America,United States of America",SOTA improvement,Results table shows SOTA performance for some benchmarks,509.02,,"""All models were trained on either a single 16xA100-40GB node or a cluster of 8xA100-80GB nodes.""",NVIDIA A100 SXM4 80 GB,8.0,,,,6393.151008587547,,,,,,Open weights (unrestricted),Unreleased,Open source,"apache 2.0
repo (weights and inference only): https://github.com/HazyResearch/H3/blob/main/README.md ",BF16,
CaLM,University of Oxford,2022-12-19,Biology,"Protein or nucleotide language model (pLM/nLM),Protein embedding",86000000.0,"""We trained a large language model with 86M parameters""",2.9e+19,"""4 NVIDIA Quadro RTX4000 GPUs for 40 days""

Calculation assuming FP32, utilization 30%:
= (40 * 24 * 3600) s * 7.1e12 FLOP/s * 0.3 * 4 GPU = 2.999808e+19

alternative calculation:
""Gradients were accumulated to an effective batch size of 1,000 examples, or approximately 256,000 tokens. ""
""(66,000 gradient steps, 14 full epochs)""

256000*66000*14*86000000*6=1.220567e+20",European Nucleotide Archive (ENA),2304000000.0,"""a dataset of 9M non-redundant and diverse cDNA sequences identified from whole-genome sequencing""

""Gradients were accumulated to an effective batch size of 1,000 examples, or approximately 256,000 tokens. ""

9000000*256000/1000=2304000000 tokens",Likely,https://www.biorxiv.org/content/10.1101/2022.12.15.519894v1.full.pdf,Codon language embeddings provide strong signals for protein engineering,8.0,"Carlos Outeiral, Charlotte M. Deane","Protein representations from deep language models have yielded state-of-the-art performance across many tasks in computational protein engineering. In recent years, progress has primarily focused on parameter count, with recent models’ capacities surpassing the size of the very datasets they were trained on. Here, we propose an alternative direction. We show that large language models trained on codons, instead of amino acid sequences, provide high-quality representations that outperform comparable state-of-the-art models across a variety of tasks.
In some tasks, like species recognition, prediction of protein and transcript abundance, or melting point estimation, we show that a language model trained on codons outperforms every other published protein language model, including some that contain over 50 times more parameters. These results suggest that, in addition to commonly studied scale and model complexity, the information content of biological data provides an orthogonal direction to improve the power of machine learning in biology.",Academia,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,"""We show that large language models trained on codons, instead of amino acid sequences, provide high-quality representations that outperform comparable state-of-the-art models across a variety of tasks. In some tasks, like species recognition, prediction of protein and transcript abundance, or melting point estimation, we show that a language model trained on codons outperforms every other published protein language model, including some that contain over 50 times more parameters"" [Abstract]",14.0,960.0,"""The model reported in this work was trained on 4 NVIDIA Quadro
RTX4000 GPUs for 40 days (66,000 gradient steps, 14 full epochs)""",NVIDIA Quadro RTX 4000,4.0,,,,1278.886496016633,,,,,,Unreleased,Open source,Open source,"BSD-3-Clause license
https://github.com/oxpig/CaLM",,
RT-1,Google,2022-12-13,Robotics,Robotic manipulation,35000000.0,"""we also limit the size of the model compared to
the original publication, which was 1.2B parameters (resulting in on robot inference time of 1.9s),
to be of similar size to RT-1 (37M parameters for Gato vs. 35M for RT-1""

16M params for image tokenizer, 19M for the transformer",,,RT-1,,,Confident,https://arxiv.org/abs/2212.06817,RT-1: Robotics Transformer for Real-World Control at Scale,678.0,"Anthony Brohan, Noah Brown, Justice Carbajal, Yevgen Chebotar, Joseph Dabis, Chelsea Finn, Keerthana Gopalakrishnan, Karol Hausman, Alex Herzog, Jasmine Hsu, Julian Ibarz, Brian Ichter, Alex Irpan, Tomas Jackson, Sally Jesmonth, Nikhil J Joshi, Ryan Julian, Dmitry Kalashnikov, Yuheng Kuang, Isabel Leal, Kuang-Huei Lee, Sergey Levine, Yao Lu, Utsav Malla, Deeksha Manjunath, Igor Mordatch, Ofir Nachum, Carolina Parada, Jodilyn Peralta, Emily Perez, Karl Pertsch, Jornell Quiambao, Kanishka Rao, Michael Ryoo, Grecia Salazar, Pannag Sanketi, Kevin Sayed, Jaspiar Singh, Sumedh Sontakke, Austin Stone, Clayton Tan, Huong Tran, Vincent Vanhoucke, Steve Vega, Quan Vuong, Fei Xia, Ted Xiao, Peng Xu, Sichun Xu, Tianhe Yu, Brianna Zitkovich","By transferring knowledge from large, diverse, task-agnostic datasets, modern machine learning models can solve specific downstream tasks either zero-shot or with small task-specific datasets to a high level of performance. While this capability has been demonstrated in other fields such as computer vision, natural language processing or speech recognition, it remains to be shown in robotics, where the generalization capabilities of the models are particularly critical due to the difficulty of collecting real-world robotic data. We argue that one of the keys to the success of such general robotic models lies with open-ended task-agnostic training, combined with high-capacity architectures that can absorb all of the diverse, robotic data. In this paper, we present a model class, dubbed Robotics Transformer, that exhibits promising scalable model properties. We verify our conclusions in a study of different model classes and their ability to generalize as a function of the data size, model size, and data diversity based on a large-scale data collection on real robots performing real-world tasks. The project's website and videos can be found at this http URL",Industry,United States of America,SOTA improvement,"""Across each category, we find that RT-1 outperforms the prior
models significantly. On seen tasks, RT-1 is able to perform 97% of the more than 200 instructions successfully, which is 25% more than BC-Z and 32% more than Gato. On unseen tasks, RT-1
shows it is capable of generalizing to novel instructions, performing 76% of the never-before-seen
instructions, 24% more than the next best baseline""

Top10 recent paper from Sebastian Sartor 2025-05-14",,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"weights and code here, apache 2.0:
https://github.com/google-research/robotics_transformer

data here, also apache: 
https://github.com/google-deepmind/open_x_embodiment",,
TranceptEve,"University of Oxford,Harvard Medical School",2022-12-10,Biology,"Proteins,Protein pathogenicity prediction",,,,,ProteinGym,,,Unknown,https://www.biorxiv.org/content/10.1101/2022.12.07.519495v1,TranceptEVE: Combining Family-specific and Family-agnostic Models of Protein Sequences for Improved Fitness Prediction,,"Pascal Notin, Lood Van Niekerk, Aaron W Kollasch, Daniel Ritter, Yarin Gal, Debora S. Marks","Modeling the fitness landscape of protein sequences has historically relied on training models on family-specific sets of homologous sequences called Multiple Sequence Alignments. Many proteins are however difficult to align or have shallow alignments which limits the potential scope of alignment-based methods. Not subject to these limitations, large protein language models trained on non-aligned sequences across protein families have achieved increasingly high predictive performance – but have not yet fully bridged the gap with their alignment-based counterparts. In this work, we introduce TranceptEVE – a hybrid method between family-specific and family-agnostic models that seeks to build on the relative strengths from each approach. Our method gracefully adapts to the depth of the alignment, fully relying on its autoregressive transformer when dealing with shallow alignments and leaning more heavily on the family-specifc models for proteins with deeper alignments. Besides its broader application scope, it achieves state-of-the-art performance for mutation effects prediction, both in terms of correlation with experimental assays and with clinical annotations from ClinVar.","Academia,Academia","United Kingdom of Great Britain and Northern Ireland,United States of America",SOTA improvement,"""Besides its broader application scope, it achieves state-of- the-art performance for mutation effects prediction, both in terms of correlation with experimental assays and with clinical annotations from ClinVar.""",,,,,,,,,,Tranception,,,,,Unreleased,Unreleased,Unreleased,https://www.pascalnotin.com/publication/trancepteve/,,
Vega v2,"Wuhan University,JD Explore Academy,Shanghai AI Lab,Nanyang Technological University,Washington University in St Louis,Chongqing University of Posts and Telecommunications,University of Sydney",2022-12-04,Language,"Language modeling,Question answering,Word sense disambiguation",6000000000.0,,7.76e+22,"Pretraining took 1 month on 320 A100 (Section 3.1)
720*60*60*320*312000000000000*0.3=7.7635584e+22",,,,Confident,https://arxiv.org/abs/2212.01853,Toward Efficient Language Model Pretraining and Downstream Adaptation via Self-Evolution: A Case Study on SuperGLUE,39.0,"Qihuang Zhong, Liang Ding, Yibing Zhan, Yu Qiao, Yonggang Wen, Li Shen, Juhua Liu, Baosheng Yu, Bo Du, Yixin Chen, Xinbo Gao, Chunyan Miao, Xiaoou Tang, Dacheng Tao","This technical report briefly describes our JDExplore d-team's Vega v2 submission on the SuperGLUE leaderboard. SuperGLUE is more challenging than the widely used general language understanding evaluation (GLUE) benchmark, containing eight difficult language understanding tasks, including question answering, natural language inference, word sense disambiguation, coreference resolution, and reasoning. [Method] Instead of arbitrarily increasing the size of a pretrained language model (PLM), our aim is to 1) fully extract knowledge from the input pretraining data given a certain parameter budget, e.g., 6B, and 2) effectively transfer this knowledge to downstream tasks. To achieve goal 1), we propose self-evolution learning for PLMs to wisely predict the informative tokens that should be masked, and supervise the masked language modeling (MLM) process with rectified smooth labels. For goal 2), we leverage the prompt transfer technique to improve the low-resource tasks by transferring the knowledge from the foundation model and related downstream tasks to the target task. [Results] According to our submission record (Oct. 2022), with our optimized pretraining and fine-tuning strategies, our 6B Vega method achieved new state-of-the-art performance on 4/8 tasks, sitting atop the SuperGLUE leaderboard on Oct. 8, 2022, with an average score of 91.3.","Academia,Academia,Academia,Academia","China,China,Singapore,Australia",SOTA improvement,Highest score at SuperGLUE leaderboard version 2.0 in terms of RTE (Recognizing Textual Entailment-Accuracy),,720.0,,NVIDIA A100,320.0,,,,255862.7534697245,,,,,,Unreleased,Unreleased,Unreleased,,,
DeepNash,DeepMind,2022-12-01,Games,Stratego,,,,"""The final agent was trained using 768 MXU’s (matrix multiplication unit) for Learners and
256 MXU’s for Actors (using 256 TPU’s in total).""
Some more details in Table S1 (in supplementary materials)",,,"768 * 7.21M trajectories? (Table S1)

768 * 7.21M = 5,537,280,000

https://www.science.org/doi/suppl/10.1126/science.add4679/suppl_file/science.add4679_sm.pdf",Unknown,https://www.science.org/stoken/author-tokens/ST-887/full,Mastering the game of Stratego with model-free multiagent reinforcement learning,147.0,"Julien Perolat, Bart de Vylder, Daniel Hennes, Eugene Tarassov, Florian Strub, Vincent de Boer, Paul Muller, Jerome T. Connor, Neil Burch, Thomas Anthony, Stephen McAleer, Romuald Elie, Sarah H. Cen, Zhe Wang, Audrunas Gruslys, Aleksandra Malysheva, Mina Khan, Sherjil Ozair, Finbarr Timbers, Toby Pohlen, Tom Eccles, Mark Rowland, Marc Lanctot, Jean-Baptiste Lespiau, Bilal Piot, Shayegan Omidshafiei, Edward Lockhart, Laurent Sifre, Nathalie Beauguerlange, Remi Munos, David Silver, Satinder Singh, Demis Hassabis, Karl Tuyls","We introduce DeepNash, an autonomous agent that plays the imperfect information game Stratego at a human expert level. Stratego is one of the few iconic board games that artificial intelligence (AI) has not yet mastered. It is a game characterized by a twin challenge: It requires long-term strategic thinking as in chess, but it also requires dealing with imperfect information as in poker. The technique underpinning DeepNash uses a game-theoretic, model-free deep reinforcement learning method, without search, that learns to master Stratego through self-play from scratch. DeepNash beat existing state-of-the-art AI methods in Stratego and achieved a year-to-date (2022) and all-time top-three ranking on the Gravon games platform, competing with human expert players.",Industry,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,"DeepNash beat existing state-of-the-art AI methods in Stratego and achieved a year-to-date (2022) and all-time top-three ranking on the Gravon games platform, competing with human expert players.",,,,,,,,,,,,,,,Unreleased,Unreleased,,"the training code used to be here but not anymore

https://github.com/google-deepmind/open_spiel/tree/master/open_spiel/python/algorithms/rnad",,
GPT-3.5 Turbo,OpenAI,2022-11-30,Language,"Language modeling/generation,Question answering,Chat",20000000000.0,20B parameters according to Table 1 in Microsoft's CODEFUSION paper: https://arxiv.org/pdf/2310.17680.pdf,,,Unspecified unreleased,,,Speculative,https://platform.openai.com/docs/models/gpt-3.5-turbo,"A fast, inexpensive model for simple tasks",,"John Schulman, Barret Zoph, Christina Kim, Jacob Hilton, Jacob Menick, Jiayi Weng, Juan Felipe Ceron Uribe, Liam Fedus, Luke Metz, Michael Pokorny, Rapha Gontijo Lopes, Shengjia Zhao, Arun Vijayvergiya, Eric Sigler, Adam Perelman, Chelsea Voss, Mike Heaton, Joel Parish, Dave Cummings, Rajeev Nayak, Valerie Balcom, David Schnurr, Tomer Kaftan, Chris Hallacy, Nicholas Turley, Noah Deutsch, Vik Goel, Jonathan Ward, Aris Konstantinidis, Wojciech Zaremba, Long Ouyang, Leonard Bogdonoff, Joshua Gross, David Medina, Sarah Yoo, Teddy Lee, Ryan Lowe, Dan Mossing, Joost Huizinga, Roger Jiang, Carroll Wainwright, Diogo Almeida, Steph Lin, Marvin Zhang, Kai Xiao, Katarina Slama, Steven Bills, Alex Gray, Jan Leike, Jakub Pachocki, Phil Tillet, Shantanu Jain, Greg Brockman, Nick Ryder, Alex Paino, Qiming Yuan, Clemens Winter, Ben Wang, Mo Bavarian, Igor Babuschkin, Szymon Sidor, Ingmar Kanitscheider, Mikhail Pavlov, Matthias Plappert, Nik Tezak, Heewoo Jun, William Zhuk, Vitchyr Pong, Lukasz Kaiser, Jerry Tworek, Andrew Carr, Lilian Weng, Sandhini Agarwal, Karl Cobbe, Vineet Kosaraju, Alethea Power, Stanislas Polu, Jesse Han, Raul Puri, Shawn Jain, Benjamin Chess, Christian Gibson, Oleg Boiko, Emy Parparita, Amin Tootoonchian, Kyle Kosic, Christopher Hesse","GPT-3.5 Turbo models can understand and generate natural language or code and have been optimized for chat using the Chat Completions API but work well for non-chat tasks as well. As of July 2024, use gpt-4o-mini in place of GPT-3.5 Turbo, as it is cheaper, more capable, multimodal, and just as fast. GPT-3.5 Turbo is still available for use in the API.",Industry,United States of America,"Historical significance,Significant use","https://www.reuters.com/technology/chatgpt-sets-record-fastest-growing-user-base-analyst-note-2023-02-01/

was the default free model in ChatGPT, so likely one of the most popular models in existence",,,,,,,,,,,,,,,API access,Unreleased,,available on API: https://platform.openai.com/docs/models/gpt-3-5-turbo ,,
GPT-3.5,OpenAI,2022-11-28,Language,Language modeling,,"Parameter count may be 175B based on OpenAI's statements that text-davinci-003 is in the GPT-3.5 series of models. It was also stated to be 175B in the Microsoft CODEFUSION paper, but the paper was reportedly retracted because the authors did not know the parameter count.",2.578e+24,https://colab.research.google.com/drive/1QSxa8YCWjEBQU7mrXLhw6TP1VX5oqgdW#scrollTo=Gt6Z6oZ26clI,,,,Speculative,https://platform.openai.com/docs/models/gpt-3-5,,,,,Industry,United States of America,"Historical significance,Significant use,SOTA improvement,Training cost",,,,,NVIDIA A100 SXM4 40 GB,,,4637986.173,,,,,,,,API access,Unreleased,,,,True
DiT-XL/2 + Discriminator Guidance,"Korea Advanced Institute of Science and Technology (KAIST),NAVER",2022-11-28,Image generation,"Image generation,Text-to-image",,,,"This is a finetune of DiT-XL/2, so its compute won't be much higher.",,,,Unknown,https://arxiv.org/abs/2211.17091v4,Refining Generative Process with Discriminator Guidance in Score-based Diffusion Models,68.0,"Dongjun Kim, Yeongmin Kim, Se Jung Kwon, Wanmo Kang, Il-Chul Moon","The proposed method, Discriminator Guidance, aims to improve sample generation of pre-trained diffusion models. The approach introduces a discriminator that gives explicit supervision to a denoising sample path whether it is realistic or not. Unlike GANs, our approach does not require joint training of score and discriminator networks. Instead, we train the discriminator after score training, making discriminator training stable and fast to converge. In sample generation, we add an auxiliary term to the pre-trained score to deceive the discriminator. This term corrects the model score to the data score at the optimal discriminator, which implies that the discriminator helps better score estimation in a complementary way. Using our algorithm, we achive state-of-the-art results on ImageNet 256x256 with FID 1.83 and recall 0.64, similar to the validation data's FID (1.68) and recall (0.66). We release the code at this https URL.","Academia,Industry","Korea (Republic of),Korea (Republic of)",SOTA improvement,"""Using our algorithm, we achive state-of-the-art results on ImageNet 256x256 with FID 1.83 and recall 0.64, similar to the validation data's FID (1.68) and recall (0.66)""",10.0,,,NVIDIA A100,,,,,,DiT-XL/2,,,,,Unreleased,Open (non-commercial),,"Attribution-NonCommercial-ShareAlike 4.0 International
https://github.com/alsdudrla10/DG?tab=readme-ov-file

I cannot see checkpoints / model weights in the repo",FP16,
Discriminator Guidance,"Korea Advanced Institute of Science and Technology (KAIST),NAVER",2022-11-28,Image generation,Image generation,,,2.1570000001e+20,481 hours * 312 TFLOPS (A100) * 40% utilization,,,,Confident,https://arxiv.org/abs/2211.17091v4,Refining Generative Process with Discriminator Guidance in Score-based Diffusion Models,68.0,"Dongjun Kim, Yeongmin Kim, Se Jung Kwon, Wanmo Kang, Il-Chul Moon","The proposed method, Discriminator Guidance, aims to improve sample generation of pre-trained diffusion models. The approach introduces a discriminator that gives explicit supervision to a denoising sample path whether it is realistic or not. Unlike GANs, our approach does not require joint training of score and discriminator networks. Instead, we train the discriminator after score training, making discriminator training stable and fast to converge. In sample generation, we add an auxiliary term to the pre-trained score to deceive the discriminator. This term corrects the model score to the data score at the optimal discriminator, which implies that the discriminator helps better score estimation in a complementary way. Using our algorithm, we achive state-of-the-art results on ImageNet 256x256 with FID 1.83 and recall 0.64, similar to the validation data's FID (1.68) and recall (0.66).","Academia,Industry","Korea (Republic of),Korea (Republic of)",SOTA improvement,"""Using our algorithm, we achive state-of-the-art results on ImageNet 256x256 with FID 1.83 and recall 0.64, similar to the validation data's FID (1.68) and recall (0.66).""
https://paperswithcode.com/paper/refining-generative-process-with",10.0,481.0,Table 6,NVIDIA A100 PCIe,,,337.8811363173893,,,,,,,,Open weights (non-commercial),Open (non-commercial),Open access (non-commercial),"https://github.com/alsdudrla10/DG
Attribution-NonCommercial-ShareAlike 4.0 International

checkpoints and train code here: https://github.com/alsdudrla10/DG/blob/main/README.md ",FP16,
ALM 1.0,Beijing Academy of Artificial Intelligence / BAAI,2022-11-28,Language,Language modeling,335000000.0,335M parameters: https://github.com/FlagAI-Open/FlagAI/blob/master/examples/ALM/README.md,,,ArabicText 2022,,,Speculative,https://github.com/FlagAI-Open/FlagAI/blob/master/examples/ALM/README.md,ALM 1.0,,,,Academia,China,SOTA improvement,SOTA results on Arabic-language benchmark ALUE.,,,,,,,,,,,,,,,Hosted access (no API),Unreleased,,"It seems to have only inference and finetuning codes, no weights or pretraining code

https://github.com/FlagAI-Open/FlagAI/tree/master/examples/ALM",,
CICERO,Meta AI,2022-11-22,Games,Diplomacy,,"""We took R2C2 (22) as our base model – a 2.7B parameter Transformer-based (23) encoder-decoder model pre-trained on text from the Internet using a BART de-noising objective (24).""",,,WebDiplomacy,,"""We obtained a dataset of 125,261 games of Diplomacy played online at webDiplomacy.net. Of these, 40,408 games contained dialogue, with a total of 12,901,662 messages exchanged between players. Player accounts were de-identified and automated redaction of personally identifiable information (PII) was performed by webDiplomacy. We refer to this dataset hereafter as WebDiplomacy .""",Unknown,https://www.science.org/doi/10.1126/science.ade9097,Human-level play in the game of Diplomacy by combining language models with strategic reasoning,274.0,"Anton Bakhtin, Noam Brown, Emily Dinan, Gabriele Farina, Colin Flaherty, Daniel Fried, Andrew Goff, Jonathan Gray, Hengyuan Hu, Athul Paul Jacob, Mojtaba Komeili, Karthik Konath, Minae Kwon, Adam Lerer, Mike Lewis, Alexander H. Miller, Sasha Mitts, Adithya Renduchintala, Stephen Roller, Dirk Rowe, Weiyan Shi, Joe Spisak, Alexander Wei, David Wu, Hugh Zhang, Markus Zijlstra",,Industry,United States of America,SOTA improvement,"""We introduce Cicero, the first AI agent to achieve human-level performance in Diplomacy""",,,,,,,,,,,,,,,Open weights (non-commercial),Open source,Open source,"creative commons (non comm) for model weights, MIT for code
https://github.com/facebookresearch/diplomacy_cicero?tab=readme-ov-file#license-for-model-weights",FP16,
AR-LDM,"Alibaba,University of Waterloo,Vector Institute",2022-11-20,Image generation,Text-to-image,1500000000.0,Table 1,5.1e+20,8 NVIDIA A100 GPUs for 8 days,,,"PororoSV, FlintstonesSV and VIST. All storytelling datasets, sizes would be possible to look up.",Confident,https://arxiv.org/abs/2211.10950,Synthesizing Coherent Story with Auto-Regressive Latent Diffusion Models,51.0,"Xichen Pan, Pengda Qin, Yuhong Li, Hui Xue, Wenhu Chen","Conditioned diffusion models have demonstrated state-of-the-art text-to-image synthesis capacity. Recently, most works focus on synthesizing independent images; While for real-world applications, it is common and necessary to generate a series of coherent images for story-stelling. In this work, we mainly focus on story visualization and continuation tasks and propose AR-LDM, a latent diffusion model auto-regressively conditioned on history captions and generated images. Moreover, AR-LDM can generalize to new characters through adaptation. To our best knowledge, this is the first work successfully leveraging diffusion models for coherent visual story synthesizing. Quantitative results show that AR-LDM achieves SoTA FID scores on PororoSV, FlintstonesSV, and the newly introduced challenging dataset VIST containing natural images. Large-scale human evaluations show that AR-LDM has superior performance in terms of quality, relevance, and consistency.","Industry,Academia,Academia","China,Canada,Canada",SOTA improvement,"The first latent diffusion model for coherent visual story synthesizing.
""Quantitative results show that AR-LDM achieves SoTA FID scores on PororoSV, FlintstonesSV, and the newly introduced challenging dataset VIST containing natural images""",50.0,194.0,8 NVIDIA A100 GPUs for 8 days,NVIDIA A100,,,745.8360575556148,,,Stable Diffusion (LDM-KL-8-G),,,,,Unreleased,Open (non-commercial),Open access (non-commercial),"no weights, no license. training and inference code here:
https://github.com/xichenpan/ARLDM",,
Fusion in Encoder,Samsung,2022-11-18,Language,Question answering,330000000.0,330M,1.3e+20,"""The experiments were run on 8x80GB Nvidia A100s with 800GB RAM and 4x32-core CPUs, and each experiment took around 1 day for NQ and 2 days for TriviaQA with large models. Inference was run on the same system, and took 2 minutes.""

2 days * 24 * 3600 * 8 * 312 teraflop/s * 0.3 utilization = 1.3e20",TriviaQA,,79k per table 11 (probably number of question-answer pairs),Likely,https://arxiv.org/abs/2211.10147,FiE: Building a Global Probability Space by Leveraging Early Fusion in Encoder for Open-Domain Question Answering,8.0,"Akhil Kedia, Mohd Abbas Zaidi, Haejun Lee","Generative models have recently started to outperform extractive models in Open Domain Question Answering, largely by leveraging their decoder to attend over multiple encoded passages and combining their information. However, generative models tend to be larger than extractive models due to the need for a decoder, run slower during inference due to auto-regressive decoder beam search, and their generated output often suffers from hallucinations. We propose to extend transformer encoders with the ability to fuse information from multiple passages, using global representation to provide cross-sample attention over all tokens across samples. Furthermore, we propose an alternative answer span probability calculation to better aggregate answer scores in the global space of all samples. Using our proposed method, we outperform the current state-of-the-art method by 2.5 Exact Match score on the Natural Question dataset while using only 25% of parameters and 35% of the latency during inference, and 4.4 Exact Match on WebQuestions dataset. When coupled with synthetic data augmentation, we outperform larger models on the TriviaQA dataset as well. The latency and parameter savings of our method make it particularly attractive for open-domain question answering, as these models are often compute-intensive.",Industry,Korea (Republic of),SOTA improvement,"""Using our proposed method, we outperform the current state-of-the-art method by 2.5 Exact Match score on the Natural Question dataset while using only 25% of parameters and 35% of the latency during inference, and 4.4 Exact Match on WebQuestions dataset""",,48.0,2 days,NVIDIA A100 SXM4 80 GB,,,233.0630322095263,,,,,,,,Unreleased,Unreleased,,"""The source code is based on the original implementation of FiD (Izacard and Grave, 2021b), which can be found at their Github. The modeling for the fused Electra model was implemented using
HuggingFace (Wolf et al., 2020) by modifying the ElectraModel.",,
Galactica,Meta AI,2022-11-16,"Language,Biology","Language modeling,Question answering",120000000000.0,"""The largest 120B model we train runs on a single NVIDIA A100 node""",3.24e+23,"Authors state the model is trained on 450b tokens. Using 6 FLOP/token/parameter, this is 6*120b*450b = 3.24e23",Galactica Corpus,106000000000.0,"""Total dataset size = 106 billion tokens""",Likely,https://arxiv.org/abs/2211.09085,Galactica: A Large Language Model for Science,599.0,"Ross Taylor, Marcin Kardas, Guillem Cucurull, Thomas Scialom, Anthony Hartshorn, Elvis Saravia, Andrew Poulton, Viktor Kerkez, Robert Stojnic","Information overload is a major obstacle to scientific progress. The explosive growth in scientific literature and data has made it ever harder to discover useful insights in a large mass of information. Today scientific knowledge is accessed through search engines, but they are unable to organize scientific knowledge alone. In this paper we introduce Galactica: a large language model that can store, combine and reason about scientific knowledge. We train on a large scientific corpus of papers, reference material, knowledge bases and many other sources. We outperform existing models on a range of scientific tasks. On technical knowledge probes such as LaTeX equations, Galactica outperforms the latest GPT-3 by 68.2% versus 49.0%. Galactica also performs well on reasoning, outperforming Chinchilla on mathematical MMLU by 41.3% to 35.7%, and PaLM 540B on MATH with a score of 20.4% versus 8.8%. It also sets a new state-of-the-art on downstream tasks such as PubMedQA and MedMCQA dev of 77.6% and 52.9%. And despite not being trained on a general corpus, Galactica outperforms BLOOM and OPT-175B on BIG-bench. We believe these results demonstrate the potential for language models as a new interface for science. We open source the model for the benefit of the scientific community.",Industry,United States of America,SOTA improvement,"""We outperform existing models on a range of scientific tasks. On technical knowledge probes such as LaTeX equations, Galactica outperforms the latest GPT-3 by 68.2% versus 49.0%. Galactica also performs well on reasoning, outperforming Chinchilla on mathematical MMLU by 41.3% to 35.7%, and PaLM 540B on MATH""",4.0,,,NVIDIA A100 SXM4 80 GB,128.0,,591076.8943544837,,102386.13451047534,,,,2000000.0,"Table 1: batch size 2M, warmup 1.1B (out of 450B tokens)",Open weights (non-commercial),Unreleased,,"cc-by-nc (non-commercial): https://huggingface.co/facebook/galactica-120b 

repo but no training code: https://github.com/paperswithcode/galai/blob/main/README.md ",,
EVA-01,"Beijing Academy of Artificial Intelligence / BAAI,Huazhong University of Science and Technology,Zhejiang University (ZJU),Beijing Institute of Technology",2022-11-14,Vision,"Image classification,Object detection,Semantic segmentation",1011000000.0,1011M from table 3,1.501e+22,"flops = (128) * (3.12e14) * (14.5 * 24 * 3600) * (0.3) = 1.501e22
(num gpu) * (peak flops) * (time in seconds) * (assumed utilization rate)

from Table 3, time and num gpus, GPU model is on page 4 (A100), precision is fp16 and likely utilizes tensor cores","ImageNet21k,COCO,Conceptual Captions 12M (CC12M),Conceptual Captions (CC3M)",29600000.0,from table 3: 29.6M images,Confident,https://arxiv.org/abs/2211.07636,EVA: Exploring the Limits of Masked Visual Representation Learning at Scale,509.0,"Yuxin Fang, Wen Wang, Binhui Xie, Quan Sun, Ledell Wu, Xinggang Wang, Tiejun Huang, Xinlong Wang, Yue Cao","We launch EVA, a vision-centric foundation model to explore the limits of visual representation at scale using only publicly accessible data. EVA is a vanilla ViT pre-trained to reconstruct the masked out image-text aligned vision features conditioned on visible image patches. Via this pretext task, we can efficiently scale up EVA to one billion parameters, and sets new records on a broad range of representative vision downstream tasks, such as image recognition, video action recognition, object detection, instance segmentation and semantic segmentation without heavy supervised training. Moreover, we observe quantitative changes in scaling EVA result in qualitative changes in transfer learning performance that are not present in other models. For instance, EVA takes a great leap in the challenging large vocabulary instance segmentation task: our model achieves almost the same state-of-the-art performance on LVISv1.0 dataset with over a thousand categories and COCO dataset with only eighty categories. Beyond a pure vision encoder, EVA can also serve as a vision-centric, multi-modal pivot to connect images and text. We find initializing the vision tower of a giant CLIP from EVA can greatly stabilize the training and outperform the training from scratch counterpart with much fewer samples and less compute, providing a new direction for scaling up and accelerating the costly training of multi-modal foundation models. To facilitate future research, we release all the code and billion-scale model.","Academia,Academia,Academia,Academia","China,China,China,China",SOTA improvement,"from abstract 'Via this pretext task, we can efficiently scale up EVA to one billion parameters, and sets new records on a broad range of representative vision downstream tasks, such as image recognition, video action recognition, object detection, instance segmentation and semantic segmentation without heavy supervised training.'",150.0,348.0,from Table 3 14.5 days = 348 hours,NVIDIA A100 SXM4 40 GB,128.0,,29374.46909439904,,102390.69476171424,,,,,,Open weights (unrestricted),Open source,Open source,MIT: https://github.com/baaivision/EVA pretrain code: https://github.com/baaivision/EVA/tree/master/EVA-01/eva ,FP16,
AltCLIP_M9,Beijing Academy of Artificial Intelligence / BAAI,2022-11-12,"Multimodal,Language,Vision","Language modeling/generation,Chat,Visual question answering,Image generation",,,,,"Conceptual Captions (CC3M),LAION-400M,TSL2019,OPUS,WuDao Corpora,LAION-2B",,,Unknown,https://arxiv.org/abs/2211.06679,AltCLIP: Altering the Language Encoder in CLIP for Extended Language Capabilities,63.0,"Zhongzhi Chen, Guang Liu, Bo-Wen Zhang, Fulong Ye, Qinghong Yang, Ledell Wu","In this work, we present a conceptually simple and effective method to train a strong bilingual/multilingual multimodal representation model. Starting from the pre-trained multimodal representation model CLIP released by OpenAI, we altered its text encoder with a pre-trained multilingual text encoder XLM-R, and aligned both languages and image representations by a two-stage training schema consisting of teacher learning and contrastive learning. We validate our method through evaluations of a wide range of tasks. We set new state-of-the-art performances on a bunch of tasks including ImageNet-CN, Flicker30k-CN, COCO-CN and XTD. Further, we obtain very close performances with CLIP on almost all tasks, suggesting that one can simply alter the text encoder in CLIP for extended capabilities such as multilingual understanding. Our models and code are available at this https URL.",Academia,China,SOTA improvement,"""We set new state-of-the-art performances on a bunch of tasks including ImageNet-CN, Flicker30kCN, COCO-CN and XTD""",10.0,,,,,,,,,CLIP (ViT L/14@336px),,,,,Open weights (unrestricted),Open source,Open source,https://github.com/FlagAI-Open/FlagAI/blob/master/examples/AltCLIP/altclip_ft_bmtrain.py Apache-2.0 license,FP32,
InternImage,"Shanghai AI Lab,Tsinghua University,Nanjing University,SenseTime,Chinese University of Hong Kong (CUHK)",2022-11-10,Vision,"Image classification,Object detection,Image segmentation",1080000000.0,"1.08B, table 1",2.408e+21,"InternImage-H is pre-trained on a 427 million joint dataset of public Laion-400M [61], YFCC-15M [62], and CC12M [63] for 30 epochs, and then fine-tuned the model on ImageNet-1K for 20 epochs. ImageNet-1K has 1,281,167 images.

Table 2 says InternImage-H uses 188 GFLOP per forward pass at 224 resolution, and 1478 GFLOP at 640

Table 7 indicates training InternImage-H was done at a scale of ""224/640"" so presumably there was pretraining at 224x224 resolution and then some fine-tuning at 640x640. It's not clear how much training was done at each resolution, but typically this is a small fraction of total training (e.g. Noisy Student finds it sufficient to train for 350 epochs at smaller resolution, and then fine-tune at the higher resolution for 1.5 epochs). We'll ignore the additional FLOPs from high resolution training.

Total training FLOPs:
188e9 FLOP/image * (427M images * 30 epochs) + (1.281M images * 20 epochs) * 3 (additional FLOPs for backward pass) = 2.408e21","LAION-400M,Conceptual Captions 12M (CC12M),ImageNet-1k",427000000.0,,Confident,https://arxiv.org/abs/2211.05778,InternImage: Exploring Large-Scale Vision Foundation Models with Deformable Convolutions,463.0,"Wenhai Wang, Jifeng Dai, Zhe Chen, Zhenhang Huang, Zhiqi Li, Xizhou Zhu, Xiaowei Hu, Tong Lu, Lewei Lu, Hongsheng Li, Xiaogang Wang, Yu Qiao","Compared to the great progress of large-scale vision transformers (ViTs) in recent years, large-scale models based on convolutional neural networks (CNNs) are still in an early state. This work presents a new large-scale CNN-based foundation model, termed InternImage, which can obtain the gain from increasing parameters and training data like ViTs. Different from the recent CNNs that focus on large dense kernels, InternImage takes deformable convolution as the core operator, so that our model not only has the large effective receptive field required for downstream tasks such as detection and segmentation, but also has the adaptive spatial aggregation conditioned by input and task information. As a result, the proposed InternImage reduces the strict inductive bias of traditional CNNs and makes it possible to learn stronger and more robust patterns with large-scale parameters from massive data like ViTs. The effectiveness of our model is proven on challenging benchmarks including ImageNet, COCO, and ADE20K. It is worth mentioning that InternImage-H achieved a new record 65.4 mAP on COCO test-dev and 62.9 mIoU on ADE20K, outperforming current leading CNNs and ViTs. The code will be released at this https URL.","Academia,Academia,Academia,Industry,Academia","China,China,China,Hong Kong,China,Hong Kong,China",SOTA improvement,"""InternImage-H achieved a new record 65.4 mAP on COCO test-dev and 62.9 mIoU on ADE20K, outperforming current leading CNNs and ViTs""",30.0,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"https://github.com/OpenGVLab/InternImage
MIT license

https://huggingface.co/OpenGVLab/internimage_h_jointto22k_384",FP16,
mT0-13B,"Hugging Face,BigScience",2022-11-03,Language,"Translation,Language modeling/generation",13000000000.0,13B,,"fine-tuned from mT5

1.37e22 fine-tune compute",xP3,20000000000.0,"per https://huggingface.co/datasets/bigscience/xP3, 94,941,936 KB or 94GB 

if approx 200M words per GB, that's ~20B words (rougher estimate because it's multilingual)

https://docs.google.com/document/d/1G3vvQkn4x_W71MKg0GmHVtzfd9m0y3_Ofcoew0v902Q/edit#heading=h.ieihc08p8dn0",Confident,https://arxiv.org/abs/2211.01786,Crosslingual Generalization through Multitask Finetuning,242.0,"Niklas Muennighoff, Thomas Wang, Lintang Sutawika, Adam Roberts, Stella Biderman, Teven Le Scao, M Saiful Bari, Sheng Shen, Zheng-Xin Yong, Hailey Schoelkopf, Xiangru Tang, Dragomir Radev, Alham Fikri Aji, Khalid Almubarak, Samuel Albanie, Zaid Alyafeai, Albert Webson, Edward Raff, Colin Raffel","Multitask prompted finetuning (MTF) has been shown to help large language models generalize to new tasks in a zero-shot setting, but so far explorations of MTF have focused on English data and models. We apply MTF to the pretrained multilingual BLOOM and mT5 model families to produce finetuned variants called BLOOMZ and mT0. We find finetuning large multilingual language models on English tasks with English prompts allows for task generalization to non-English languages that appear only in the pretraining corpus. Finetuning on multilingual tasks with English prompts further improves performance on English and non-English tasks leading to various state-of-the-art zero-shot results. We also investigate finetuning on multilingual tasks with prompts that have been machine-translated from English to match the language of each dataset. We find training on these machine-translated prompts leads to better performance on human-written prompts in the respective languages. Surprisingly, we find models are capable of zero-shot generalization to tasks in languages they have never intentionally seen. We conjecture that the models are learning higher-level capabilities that are both task- and language-agnostic. In addition, we introduce xP3, a composite of supervised datasets in 46 languages with English and machine-translated prompts. Our code, datasets and models are freely available at this https URL.","Industry,Research collective","Multinational,United States of America,Multinational,France",SOTA improvement,"""Finetuning on multilingual tasks with English prompts further improves performance on English and non-English tasks leading to various state-of-the-art zero-shot results.""

Table 1",,,,,,,,,,mT5-XXL,1.01e+21,"""We finetune the models for an additional 13 billion tokens with loss only being computed on target tokens...
For finetuning mT5, we follow the same procedure as described above for BLOOM, except that inputs are fed into the encoder and thus are not space-separated from targets.""

13B * 13B * 6 = 1.01e21",,,Open weights (unrestricted),Unreleased,,apache 2.0,,
Mogrifier RLSTM (WT2),DeepMind,2022-11-03,Language,Language modeling,35000000.0,Table 1,1.4e+17,6ND = 6*35000000*2666667*250 = 1.4000002e+17,WikiText-2,,,Confident,https://arxiv.org/abs/2211.01848,Circling Back to Recurrent Models of Language,0.0,Gábor Melis,"Just because some purely recurrent models suffer from being hard to optimize and inefficient on today's hardware, they are not necessarily bad models of language. We demonstrate this by the extent to which these models can still be improved by a combination of a slightly better recurrent cell, architecture, objective, as well as optimization. In the process, we establish a new state of the art for language modelling on small datasets and on Enwik8 with dynamic evaluation.",Industry,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,"""On top of these improvements, the RLSTM
outperformed the LSTM by a small margin, and we established a new state of the art on both datasets""",250.0,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
BLOOMZ-176B,Hugging Face,2022-11-03,Language,"Translation,Language modeling/generation",176000000000.0,176B,,"fine-tuned from BLOOM-176B

1.37e22 fine-tune compute",xP3,20000000000.0,"per https://huggingface.co/datasets/bigscience/xP3, 94,941,936 KB or 94GB 

if approx 200M words per GB, that's ~20B words (rougher estimate because it's multilingual)

https://docs.google.com/document/d/1G3vvQkn4x_W71MKg0GmHVtzfd9m0y3_Ofcoew0v902Q/edit#heading=h.ieihc08p8dn0",Likely,"https://arxiv.org/abs/2211.01786, https://huggingface.co/bigscience/bloomz",Crosslingual Generalization through Multitask Finetuning,242.0,"Niklas Muennighoff, Thomas Wang, Lintang Sutawika, Adam Roberts, Stella Biderman, Teven Le Scao, M Saiful Bari, Sheng Shen, Zheng-Xin Yong, Hailey Schoelkopf, Xiangru Tang, Dragomir Radev, Alham Fikri Aji, Khalid Almubarak, Samuel Albanie, Zaid Alyafeai, Albert Webson, Edward Raff, Colin Raffel","Multitask prompted finetuning (MTF) has been shown to help large language models generalize to new tasks in a zero-shot setting, but so far explorations of MTF have focused on English data and models. We apply MTF to the pretrained multilingual BLOOM and mT5 model families to produce finetuned variants called BLOOMZ and mT0. We find finetuning large multilingual language models on English tasks with English prompts allows for task generalization to non-English languages that appear only in the pretraining corpus. Finetuning on multilingual tasks with English prompts further improves performance on English and non-English tasks leading to various state-of-the-art zero-shot results. We also investigate finetuning on multilingual tasks with prompts that have been machine-translated from English to match the language of each dataset. We find training on these machine-translated prompts leads to better performance on human-written prompts in the respective languages. Surprisingly, we find models are capable of zero-shot generalization to tasks in languages they have never intentionally seen. We conjecture that the models are learning higher-level capabilities that are both task- and language-agnostic. In addition, we introduce xP3, a composite of supervised datasets in 46 languages with English and machine-translated prompts. Our code, datasets and models are freely available at this https URL.",Industry,"Multinational,United States of America",SOTA improvement,"""Finetuning on multilingual tasks with English prompts further improves performance on English and non-English tasks leading to various state-of-the-art zero-shot results.""

Table 1",,,,,,,,,,BLOOM-176B,1.3728e+22,"""We use publicly available pretrained BLOOM models ranging from 560 million to 176 billion parameters. BLOOM models are large decoder-only language models pretrained for around 350 billion tokens with an architecture similar to GPT-3
(Brown et al., 2020). We finetune the models for an additional 13 billion tokens with loss only being
computed on target tokens.""

13B * 176B * 6",,,Open weights (unrestricted),Open source,Open source,"Apache 2.0
train/eval code: https://github.com/bigscience-workshop/xmtf?tab=readme-ov-file#train-models 
weights: https://huggingface.co/bigscience/bloomz ",,
eDiff-I,NVIDIA,2022-11-02,Image generation,"Image generation,Text-to-image",9100000000.0,"9.1B for config D, Table 1",5.46e+19,"6ND = 6*9100000000*1000000000=5.46e+19 (likely, might change because of several epochs / dataset division)

""The base model was trained using 256 NVIDIA A100 GPUs, while the two super-resolution models were trained with 128 NVIDIA A100 GPUs each"" 
no info on duration",Unspecified unreleased,1000000000.0,"""The final dataset to train our model contains about one billion text-image pairs""",Likely,https://arxiv.org/abs/2211.01324,eDiff-I: Text-to-Image Diffusion Models with an Ensemble of Expert Denoisers,669.0,"Yogesh Balaji, Seungjun Nah, Xun Huang, Arash Vahdat, Jiaming Song, Qinsheng Zhang, Karsten Kreis, Miika Aittala, Timo Aila, Samuli Laine, Bryan Catanzaro, Tero Karras, Ming-Yu Liu","Large-scale diffusion-based generative models have led to breakthroughs in text-conditioned high-resolution image synthesis. Starting from random noise, such text-to-image diffusion models gradually synthesize images in an iterative fashion while conditioning on text prompts. We find that their synthesis behavior qualitatively changes throughout this process: Early in sampling, generation strongly relies on the text prompt to generate text-aligned content, while later, the text conditioning is almost entirely ignored. This suggests that sharing model parameters throughout the entire generation process may not be ideal. Therefore, in contrast to existing works, we propose to train an ensemble of text-to-image diffusion models specialized for different synthesis stages. To maintain training efficiency, we initially train a single model, which is then split into specialized models that are trained for the specific stages of the iterative generation process. Our ensemble of diffusion models, called eDiff-I, results in improved text alignment while maintaining the same inference computation cost and preserving high visual quality, outperforming previous large-scale text-to-image diffusion models on the standard benchmark. In addition, we train our model to exploit a variety of embeddings for conditioning, including the T5 text, CLIP text, and CLIP image embeddings. We show that these different embeddings lead to different behaviors. Notably, the CLIP image embedding allows an intuitive way of transferring the style of a reference image to the target text-to-image output. Lastly, we show a technique that enables eDiff-I's ""paint-with-words"" capability. A user can select the word in the input text and paint it in a canvas to control the output, which is very handy for crafting the desired image in mind. The project page is available at this https URL",Industry,United States of America,SOTA improvement,"SOTA zero-shot FID on COCO 2014, Table 1

May be significantly used, via Nvidia Picasso: https://www.nvidia.com/en-us/gpu-cloud/picasso/",,,,NVIDIA A100,,,,,,,,,,,Unreleased,Unreleased,Unreleased,,,
EnCodec,Meta AI,2022-10-24,Audio,Audio generation,,,,"""We train all models for 300 epochs, with one epoch being 2,000 updates with the Adam optimizer with a batch size of 64 examples of 1 second each, a learning rate of 3 · 10−4 , β1 = 0.5, and β2 = 0.9. All the models are traind using 8 A100 GPUs""","DNS,Common Voice,AudioSet,FSD50K,Jamendo",,"~17k hours total, per Table A.1",Unknown,"https://arxiv.org/abs/2210.13438, ",High Fidelity Neural Audio Compression,440.0,"Alexandre Défossez, Jade Copet, Gabriel Synnaeve, Yossi Adi","We introduce a state-of-the-art real-time, high-fidelity, audio codec leveraging neural networks. It consists in a streaming encoder-decoder architecture with quantized latent space trained in an end-to-end fashion. We simplify and speed-up the training by using a single multiscale spectrogram adversary that efficiently reduces artifacts and produce high-quality samples. We introduce a novel loss balancer mechanism to stabilize training: the weight of a loss now defines the fraction of the overall gradient it should represent, thus decoupling the choice of this hyper-parameter from the typical scale of the loss. Finally, we study how lightweight Transformer models can be used to further compress the obtained representation by up to 40%, while staying faster than real time. We provide a detailed description of the key design choices of the proposed model including: training objective, architectural changes and a study of various perceptual loss functions. We present an extensive subjective evaluation (MUSHRA tests) together with an ablation study for a range of bandwidths and audio domains, including speech, noisy-reverberant speech, and music. Our approach is superior to the baselines methods across all evaluated settings, considering both 24 kHz monophonic and 48 kHz stereophonic audio. Code and models are available at this http URL.",Industry,United States of America,SOTA improvement,""" Finally, our best model, EnCodec, reaches state-of-the-art scores for speech and for
music at 1.5, 3, 6, 12 kbps at 24 kHz, and at 6, 12, and 24 kbps for 48 kHz with stereo channels.""",300.0,,,NVIDIA A100,,,,,,,,,,,Open weights (non-commercial),Open source,Open source,"MIT for repo in general, non commercial weights. Dataset is in repo.
https://github.com/facebookresearch/audiocraft/blob/main/docs/ENCODEC.md",,
U-PaLM (540B),Google,2022-10-20,Language,Language generation,540000000000.0,,2.53e+24,"""The total number of extra tokens we train on for the 540B
model is approximately 1.3 Billion which constitutes 0.16% extra computation... Training an U-PaLM 540B model only consumes 512 TPUv4 chips and finishes in about 5 days which is considered to be lightweight.""

original PaLM was 2.527e+24. adding 0.16% is ~2.53e24",,,,Confident,https://arxiv.org/abs/2210.11399,Transcending Scaling Laws with 0.1% Extra Compute,61.0,"Yi Tay, Jason Wei, Hyung Won Chung, Vinh Q. Tran, David R. So, Siamak Shakeri, Xavier Garcia, Huaixiu Steven Zheng, Jinfeng Rao, Aakanksha Chowdhery, Denny Zhou, Donald Metzler, Slav Petrov, Neil Houlsby, Quoc V. Le, Mostafa Dehghani","Scaling language models improves performance but comes with significant computational costs. This paper proposes UL2R, a method that substantially improves existing language models and their scaling curves with a relatively tiny amount of extra compute. The key idea is to continue training a state-of-the-art large language model (e.g., PaLM) on a few more steps with UL2's mixture-of-denoiser objective. We show that, with almost negligible extra computational costs and no new sources of data, we are able to substantially improve the scaling properties of large language models on downstream metrics. In this paper, we continue training PaLM with UL2R, introducing a new set of models at 8B, 62B, and 540B scale which we call U-PaLM. Impressively, at 540B scale, we show an approximately 2x computational savings rate where U-PaLM achieves the same performance as the final PaLM 540B model at around half its computational budget (i.e., saving ∼4.4 million TPUv4 hours). We further show that this improved scaling curve leads to 'emergent abilities' on challenging BIG-Bench tasks -- for instance, U-PaLM does much better than PaLM on some tasks or demonstrates better quality at much smaller scale (62B as opposed to 540B). Overall, we show that U-PaLM outperforms PaLM on many few-shot setups, i.e., English NLP tasks (e.g., commonsense reasoning, question answering), reasoning tasks with chain-of-thought (e.g., GSM8K), multilingual tasks (MGSM, TydiQA), MMLU and challenging BIG-Bench tasks. Finally, we provide qualitative examples showing the new capabilities of U-PaLM for single and multi-span infilling.",Industry,United States of America,SOTA improvement,"""We show that U-PaLM 540B outperforms PaLM 540B on 21 out of 26 tasks. Given that PaLM is
the SOTA language model on these tasks, this makes U-PaLM the new state-of-the-art on these tasks.""

performance improvement equivalent to 2x training efficiency: ""Impressively, at 540B scale, we show an approximately 2x computational savings rate where U-PaLM achieves the same performance as the final PaLM 540B model at around half its computational budget """,,120.0,5 days,Google TPU v4,512.0,,,,174161.11557264757,PaLM (540B),4e+21,"""The total number of extra tokens we train on for the 540B
model is approximately 1.3 Billion which constitutes 0.16% extra computation... Training an U-PaLM 540B model only consumes 512 TPUv4 chips and finishes in about 5 days which is considered to be lightweight.""

PaLM was 2.5e24
0.16% of that is 4e21",,,Unreleased,Unreleased,,,,True
LMSI-Palm,"Google,University of Illinois Urbana-Champaign (UIUC)",2022-10-20,Language,"Language generation,Language modeling/generation,Question answering",540000000000.0,540B,,"(fine-tuned from Palm-540B, which was 2.52e24)",GSM8K,,,Confident,https://arxiv.org/abs/2210.11610,Large Language Models Can Self-Improve,417.0,"Jiaxin Huang, Shixiang Shane Gu, Le Hou, Yuexin Wu, Xuezhi Wang, Hongkun Yu, Jiawei Han","Large Language Models (LLMs) have achieved excellent performances in various tasks. However, fine-tuning an LLM requires extensive supervision. Human, on the other hand, may improve their reasoning abilities by self-thinking without external inputs. In this work, we demonstrate that an LLM is also capable of self-improving with only unlabeled datasets. We use a pre-trained LLM to generate ""high-confidence"" rationale-augmented answers for unlabeled questions using Chain-of-Thought prompting and self-consistency, and fine-tune the LLM using those self-generated solutions as target outputs. We show that our approach improves the general reasoning ability of a 540B-parameter LLM (74.4%->82.1% on GSM8K, 78.2%->83.0% on DROP, 90.0%->94.4% on OpenBookQA, and 63.4%->67.9% on ANLI-A3) and achieves state-of-the-art-level performance, without any ground truth label. We conduct ablation studies and show that fine-tuning on reasoning is critical for self-improvement.","Industry,Academia","United States of America,United States of America",SOTA improvement,"""We show that our approach improves the general reasoning ability of a 540B-parameter LLM (74.4%->82.1% on GSM8K, 78.2%->83.0% on DROP, 90.0%->94.4% on OpenBookQA, and 63.4%->67.9% on ANLI-A3) and achieves state-of-the-art-level performance, without any ground truth label.""",,,,,,,,,,PaLM (540B),,"""To reduce the training burden, we sample 5k examples from the non-football and football partition of the DROP dataset, and sample 5k examples from ANLI-A2 and ANLI-A3. For each dataset, we fine-tune the model for 10k steps with a learning rate of 5e−5
and a batch size of 32."" Not sure about sequence length",,,Unreleased,Unreleased,,,,
Flan-T5 11B,Google,2022-10-20,Language,Language modeling/generation,11000000000.0,11B,3.3e+22,"Table 2: 0.2% greater than T5 xxl, which used 3.3e22 FLOP",,100000000000.0,"""For T5 models without instruction finetuning, we use LM-adapted models, which were produced by training T5 on 100B additional tokens from C4 on a standard language modeling objective""",Confident,"https://arxiv.org/abs/2210.11416, https://huggingface.co/google/flan-t5-xxl",Scaling Instruction-Finetuned Language Models,2506.0,"Hyung Won Chung, Le Hou, Shayne Longpre, Barret Zoph, Yi Tay, William Fedus, Yunxuan Li, Xuezhi Wang, Mostafa Dehghani, Siddhartha Brahma, Albert Webson, Shixiang Shane Gu, Zhuyun Dai, Mirac Suzgun, Xinyun Chen, Aakanksha Chowdhery, Alex Castro-Ros, Marie Pellat, Kevin Robinson, Dasha Valter, Sharan Narang, Gaurav Mishra, Adams Yu, Vincent Zhao, Yanping Huang, Andrew Dai, Hongkun Yu, Slav Petrov, Ed H. Chi, Jeff Dean, Jacob Devlin, Adam Roberts, Denny Zhou, Quoc V. Le, Jason Wei","Finetuning language models on a collection of datasets phrased as instructions has been shown to improve model performance and generalization to unseen tasks. In this paper we explore instruction finetuning with a particular focus on (1) scaling the number of tasks, (2) scaling the model size, and (3) finetuning on chain-of-thought data. We find that instruction finetuning with the above aspects dramatically improves performance on a variety of model classes (PaLM, T5, U-PaLM), prompting setups (zero-shot, few-shot, CoT), and evaluation benchmarks (MMLU, BBH, TyDiQA, MGSM, open-ended generation). For instance, Flan-PaLM 540B instruction-finetuned on 1.8K tasks outperforms PALM 540B by a large margin (+9.4% on average). Flan-PaLM 540B achieves state-of-the-art performance on several benchmarks, such as 75.2% on five-shot MMLU. We also publicly release Flan-T5 checkpoints, which achieve strong few-shot performance even compared to much larger models, such as PaLM 62B. Overall, instruction finetuning is a general method for improving the performance and usability of pretrained language models.",Industry,United States of America,Highly cited,,,,,Google TPU v4,,,98374.29476250126,,,T5-11B,7.6e+19,"7.6e19, per Table 2",,,Open weights (unrestricted),Unreleased,,"apache 2.0 license

https://github.com/google-research/t5x/blob/main/docs/models.md#flan-t5-checkpoints",,
Flan-PaLM 540B,Google,2022-10-20,Language,Language modeling/generation,540000000000.0,540B,2.4999999999999997e+24,"0.2% greater than Palm 540B, which used 2.5e24",Flan,,,Confident,https://arxiv.org/abs/2210.11416,Scaling Instruction-Finetuned Language Models,2506.0,"Hyung Won Chung, Le Hou, Shayne Longpre, Barret Zoph, Yi Tay, William Fedus, Yunxuan Li, Xuezhi Wang, Mostafa Dehghani, Siddhartha Brahma, Albert Webson, Shixiang Shane Gu, Zhuyun Dai, Mirac Suzgun, Xinyun Chen, Aakanksha Chowdhery, Alex Castro-Ros, Marie Pellat, Kevin Robinson, Dasha Valter, Sharan Narang, Gaurav Mishra, Adams Yu, Vincent Zhao, Yanping Huang, Andrew Dai, Hongkun Yu, Slav Petrov, Ed H. Chi, Jeff Dean, Jacob Devlin, Adam Roberts, Denny Zhou, Quoc V. Le, Jason Wei","Finetuning language models on a collection of datasets phrased as instructions has been shown to improve model performance and generalization to unseen tasks. In this paper we explore instruction finetuning with a particular focus on (1) scaling the number of tasks, (2) scaling the model size, and (3) finetuning on chain-of-thought data. We find that instruction finetuning with the above aspects dramatically improves performance on a variety of model classes (PaLM, T5, U-PaLM), prompting setups (zero-shot, few-shot, CoT), and evaluation benchmarks (MMLU, BBH, TyDiQA, MGSM, open-ended generation). For instance, Flan-PaLM 540B instruction-finetuned on 1.8K tasks outperforms PALM 540B by a large margin (+9.4% on average). Flan-PaLM 540B achieves state-of-the-art performance on several benchmarks, such as 75.2% on five-shot MMLU. We also publicly release Flan-T5 checkpoints, which achieve strong few-shot performance even compared to much larger models, such as PaLM 62B. Overall, instruction finetuning is a general method for improving the performance and usability of pretrained language models.",Industry,United States of America,"Highly cited,SOTA improvement",">1k cites

""Flan-PaLM 540B achieves state-of-the-art performance on several benchmarks, such as 75.2% on five-shot MMLU.""",,37.0,"""we only use 0.2% of the pre-training compute to instruction-finetune Flan-PaLM 540B (approximately 512 v4 TPU chips for 37 hours)""",Google TPU v4,512.0,0.3,,,174161.11557264757,PaLM (540B),5.6e+21,"5.6e21 per Table 2

""we only use 0.2% of the pre-training compute to instruction-finetune Flan-PaLM 540B (approximately 512 v4 TPU chips for 37 hours)""

512 * 37 * 3600 * 275 teraflops * 0.3 = 5.6e21 (so 30% utilization was correct)",,,Unreleased,Unreleased,,,,True
GenSLM,"University of Chicago,NVIDIA,Harvard University,Cerebras Systems,Technical University of Munich,California Institute of Technology",2022-10-11,Biology,Protein or nucleotide language model (pLM/nLM),25000000000.0,See Table 3,1.42e+21,"See Table 3
Overall ZettaFlops 1.42","SARS-CoV-2 genome dataset,BV-BRC",56000000001.00008,"110,000,000 sequences * 512 tokens/sequence = 56,320,000,000 tokens (5.6e10)",Confident,https://www.biorxiv.org/content/biorxiv/early/2022/10/11/2022.10.10.511571.full.pdf,GenSLMs: Genome-scale language models reveal SARS-CoV-2 evolutionary dynamics,58.0,"Maxim Zvyagin, Alexander Brace, Kyle Hippe, Yuntian Deng, Bin Zhang, Cindy Orozco Bohorquez, Austin Clyde, Bharat Kale, Danilo Perez-Rivera, Heng Ma, Carla M. Mann, Michael Irvin, J. Gregory Pauloski, Logan Ward, Valerie Hayot, Murali Emani, Sam Foreman, Zhen Xie, Diangen Lin, Maulik Shukla, Weili Nie, Josh Romero, Christian Dallago, Arash Vahdat, Chaowei Xiao, Thomas Gibbs, Ian Foster, James J. Davis, Michael E. Papka, Thomas Brettin, Rick Stevens, Anima Anandkumar, Venkatram Vishwanath, Arvind Ramanathan","Our work seeks to transform how new and emergent variants of pandemic causing viruses, specially SARS-CoV-2, are identified and classified. By adapting large language models (LLMs) for genomic data, we build genome-scale language models (GenSLMs) which can learn the evolutionary landscape of SARS-CoV-2 genomes. By pretraining on over 10 million prokaryotic gene sequences, and then finetuning a SARS-CoV-2 specific model on 1.5 million genomes, we show that GenSLM can accurately and rapidly identify variants of concern. Thus, to our knowledge, GenSLM represents one of the first whole genome scale foundation models which can generalize to other prediction tasks. We demonstrate the scaling of GenSLMs on both GPU-based supercomputers and AI-hardware accelerators, achieving over 1.54 zettaflops in training runs. We present initial scientific insights gleaned from examining GenSLMs in tracking the evolutionary dynamics of SARS-CoV-2, noting that its full potential on large biological data is yet to be realized.","Academia,Industry,Academia,Industry,Academia,Academia","United States of America,United States of America,United States of America,Multinational,Germany,United States of America",SOTA improvement,"""Together, these capabilities go beyond state-of-the-art techniques
for global-scale whole genome surveillance of pandemic-causing
viruses and address a critical infrastructure need for the global
public health organization"" - SOTA improvement on very specific task",,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"MIT license
https://github.com/ramanathanlab/genslm",FP16,
Diplodocus,"Meta AI,Massachusetts Institute of Technology (MIT)",2022-10-11,Games,Diplomacy,,may be estimated from https://github.com/facebookresearch/diplomacy_cicero?tab=readme-ov-file,,,,,"""we train the architecture described in Appendix F on a dataset of roughly 46000 online Diplomacy games provided by webdiplomacy.net.""
then self-play training",Unknown,https://arxiv.org/abs/2210.05492,Mastering the Game of No-Press Diplomacy via Human-Regularized Reinforcement Learning and Planning,33.0,"Anton Bakhtin, David J Wu, Adam Lerer, Jonathan Gray, Athul Paul Jacob, Gabriele Farina, Alexander H Miller, Noam Brown","No-press Diplomacy is a complex strategy game involving both cooperation and competition that has served as a benchmark for multi-agent AI research. While self-play reinforcement learning has resulted in numerous successes in purely adversarial games like chess, Go, and poker, self-play alone is insufficient for achieving optimal performance in domains involving cooperation with humans. We address this shortcoming by first introducing a planning algorithm we call DiL-piKL that regularizes a reward-maximizing policy toward a human imitation-learned policy. We prove that this is a no-regret learning algorithm under a modified utility function. We then show that DiL-piKL can be extended into a self-play reinforcement learning algorithm we call RL-DiL-piKL that provides a model of human play while simultaneously training an agent that responds well to this human model. We used RL-DiL-piKL to train an agent we name Diplodocus. In a 200-game no-press Diplomacy tournament involving 62 human participants spanning skill levels from beginner to expert, two Diplodocus agents both achieved a higher average score than all other participants who played more than two games, and ranked first and third according to an Elo ratings model.","Industry,Academia","United States of America,United States of America",SOTA improvement,"SOTA Improvement in no-press Diplomacy
""In a 200-game no-press Diplomacy tournament involving 62 human participants spanning skill levels from beginner to expert, two Diplodocus agents both achieved a higher average score than all other participants who played more than two games, and ranked first and third according to an Elo ratings model. """,,,,,,,,,,,,,,,Open weights (non-commercial),Open source,Open source,"creative commons (non comm) for model weights, MIT for code
https://github.com/facebookresearch/diplomacy_cicero?tab=readme-ov-file#license-for-model-weights",,
Phenaki,"University College London (UCL),University of Michigan,Google Brain",2022-10-05,Video,"Video generation,Text-to-video",1800000000.0,"Unless specified otherwise, we train a 1.8B parameter Phenaki model on a corpus of ∼15M textvideo pairs at 8 FPS mixed with ∼50M text-images plus ∼400M pairs of LAION-400M [41] (more
details in Appendix B.3). The model used in the visualisations in this paper was trained for 1 million
steps at a batch size of 512, which took less than 5 days. In this setup 80% of the training data came
from the video dataset and each image dataset contributed 10%.",,,"LAION-400M,Unspecified unreleased",,"Unless specified otherwise, we train a 1.8B parameter Phenaki model on a corpus of ∼15M textvideo pairs at 8 FPS mixed with ∼50M text-images plus ∼400M pairs of LAION-400M [41] (more
details in Appendix B.3). The model used in the visualisations in this paper was trained for 1 million
steps at a batch size of 512, which took less than 5 days. In this setup 80% of the training data came
from the video dataset and each image dataset contributed 10%.",,https://arxiv.org/abs/2210.02399,Phenaki: Variable Length Video Generation From Open Domain Textual Description,289.0,"Ruben Villegas, Mohammad Babaeizadeh, Pieter-Jan Kindermans, Hernan Moraldo, Han Zhang, Mohammad Taghi Saffar, Santiago Castro, Julius Kunze, Dumitru Erhan","We present Phenaki, a model capable of realistic video synthesis, given a sequence of textual prompts. Generating videos from text is particularly challenging due to the computational cost, limited quantities of high quality text-video data and variable length of videos. To address these issues, we introduce a new model for learning video representation which compresses the video to a small representation of discrete tokens. This tokenizer uses causal attention in time, which allows it to work with variable-length videos. To generate video tokens from text we are using a bidirectional masked transformer conditioned on pre-computed text tokens. The generated video tokens are subsequently de-tokenized to create the actual video. To address data issues, we demonstrate how joint training on a large corpus of image-text pairs as well as a smaller number of video-text examples can result in generalization beyond what is available in the video datasets. Compared to the previous video generation methods, Phenaki can generate arbitrary long videos conditioned on a sequence of prompts (i.e. time variable text or a story) in open domain. To the best of our knowledge, this is the first time a paper studies generating videos from time variable prompts. In addition, compared to the per-frame baselines, the proposed video encoder-decoder computes fewer tokens per video but results in better spatio-temporal consistency.","Academia,Academia,Industry","United Kingdom of Great Britain and Northern Ireland,United States of America,United States of America",SOTA improvement,"""To the best of our knowledge, this is the first time a paper studies generating videos from time variable prompts""",,,,,,,,,,,,,,,Unreleased,Unreleased,Unreleased,,,
DiffDock,Massachusetts Institute of Technology (MIT),2022-10-04,Biology,Proteins,20240000.0,"""For determining the hyperparameters of DIFFDOCK’s score model, we trained
smaller models (3.97 million parameters) that fit into 48GB of GPU RAM before scaling it up to the final model (20.24 million parameters) that was trained on four 48GB GPUs""

There's a separate 4.77M ""confidence model"" that helps make predictions along with the score model",7.2e+19,"""We trained our final score model on four 48GB RTX A6000 GPUs for 850 epochs (around 18 days).""

4 * 38.7 teraflops * 18 days * 24 * 3600 * 0.3 = 7.2e19

https://www.techpowerup.com/gpu-specs/rtx-a6000.c3686",PDB (Protein Data Bank),17000.0,"""We employ the time-split of PDBBind proposed by Stark et al. [2022] with 17k complexes from 2018 or earlier for training/validation and 363 test structures from 2019 with no ligand overlap with the training complexes""",Likely,"https://arxiv.org/abs/2210.01776, https://docs.nvidia.com/bionemo-framework/latest/models/diffdock.html","DiffDock: Diffusion Steps, Twists, and Turns for Molecular Docking",313.0,"Gabriele Corso, Hannes Stärk, Bowen Jing, Regina Barzilay, Tommi Jaakkola","Predicting the binding structure of a small molecule ligand to a protein -- a task known as molecular docking -- is critical to drug design. Recent deep learning methods that treat docking as a regression problem have decreased runtime compared to traditional search-based methods but have yet to offer substantial improvements in accuracy. We instead frame molecular docking as a generative modeling problem and develop DiffDock, a diffusion generative model over the non-Euclidean manifold of ligand poses. To do so, we map this manifold to the product space of the degrees of freedom (translational, rotational, and torsional) involved in docking and develop an efficient diffusion process on this space. Empirically, DiffDock obtains a 38% top-1 success rate (RMSD<2A) on PDBBind, significantly outperforming the previous state-of-the-art of traditional docking (23%) and deep learning (20%) methods. Moreover, while previous methods are not able to dock on computationally folded structures (maximum accuracy 10.4%), DiffDock maintains significantly higher precision (21.7%). Finally, DiffDock has fast inference times and provides confidence estimates with high selective accuracy.",Academia,United States of America,SOTA improvement,"""DiffDock obtains a 38% top-1 success rate (RMSD<2A) on PDBBind, significantly outperforming the previous state-of-the-art of traditional docking (23%) and deep learning (20%) methods""",850.0,432.0,18 days,NVIDIA RTX A6000,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"MIT license
https://github.com/gcorso/DiffDock",,
Make-A-Video,Meta AI,2022-09-29,Video,"Video generation,Text-to-video",,,,,"LAION,WebVid-10M,HD-VILA-100M",,,Unknown,https://arxiv.org/abs/2209.14792,Make-A-Video: Text-to-Video Generation without Text-Video Data,962.0,"Uriel Singer, Adam Polyak, Thomas Hayes, Xi Yin, Jie An, Songyang Zhang, Qiyuan Hu, Harry Yang, Oron Ashual, Oran Gafni, Devi Parikh, Sonal Gupta, Yaniv Taigman","We propose Make-A-Video -- an approach for directly translating the tremendous recent progress in Text-to-Image (T2I) generation to Text-to-Video (T2V). Our intuition is simple: learn what the world looks like and how it is described from paired text-image data, and learn how the world moves from unsupervised video footage. Make-A-Video has three advantages: (1) it accelerates training of the T2V model (it does not need to learn visual and multimodal representations from scratch), (2) it does not require paired text-video data, and (3) the generated videos inherit the vastness (diversity in aesthetic, fantastical depictions, etc.) of today's image generation models. We design a simple yet effective way to build on T2I models with novel and effective spatial-temporal modules. First, we decompose the full temporal U-Net and attention tensors and approximate them in space and time. Second, we design a spatial temporal pipeline to generate high resolution and frame rate videos with a video decoder, interpolation model and two super resolution models that can enable various applications besides T2V. In all aspects, spatial and temporal resolution, faithfulness to text, and quality, Make-A-Video sets the new state-of-the-art in text-to-video generation, as determined by both qualitative and quantitative measures.",Industry,United States of America,SOTA improvement,,,,,,,,,,,,,,,,Hosted access (no API),Unreleased,,,,
Whisper,OpenAI,2022-09-21,Speech,Speech recognition,1550000000.0,Table 1,4.2072663e+21,See figure 9,Unspecified unreleased,9302400000.0,"""When scaled to 680,000 hours of multilingual and multitask
supervision, the resulting models generalize well
to standard benchmarks and are often competitive
with prior fully supervised results but in a zeroshot transfer setting without the need for any finetuning.""


13,680 words/h * 680,000h = 9,302,400,000 words",Likely,"https://cdn.openai.com/papers/whisper.pdf

https://arxiv.org/abs/2212.04356",Robust Speech Recognition via Large-Scale Weak Supervision,2240.0,"Alec Radford, Jong Wook Kim, Tao Xu, Greg Brockman, Christine McLeavey, Ilya Sutskever","We study the capabilities of speech processing systems trained simply to predict large amounts of transcripts of audio on the internet. When scaled to 680,000 hours of multilingual and multitask supervision, the resulting models generalize well to standard benchmarks and are often competitive with prior fully supervised results but in a zeroshot transfer setting without the need for any finetuning. When compared to humans, the models approach their accuracy and robustness. We are releasing models and inference code to serve as a foundation for further work on robust speech processing.",Industry,United States of America,SOTA improvement,,3.0,,,,,,,,,,,,256.0,Table 17,Open weights (unrestricted),Unreleased,,"MIT for weights:
https://github.com/openai/whisper

the repo looks like just inference code to me. also, this paper says it's just inference code and they reproduced their version of Whisper through other means: https://arxiv.org/pdf/2309.13876 ",FP16,
PaLI,Google,2022-09-14,"Language,Vision,Multimodal","Visual question answering,Language modeling/generation",16900000000.0,"3.9b Image Encoder, 
14b Multimodal Encoder-Decoder",1.69e+23,"Pre-training the ViT component involved 1.1 million steps (they train over 1M steps but run the last 100k twice and then average the two resulting models). Batch size is 16384 and the inputs are 224x224. Table 8 indicates a forward pass with ViT-e/14 on a 224 image takes 1980 GFLOPs, so total training compute for the ViT-e/14 model is:
1980e9 * 16384 * 1.1 million * 3 (account for backward passes) = 1.07e23

In the ""overal model"" section, they then say: ""The largest model, PaLI-17B, is pretrained using 1,024 GCP-TPUv4 chips for 7 days"". It is then trained for another 3 days on 512 chips at higher resolution. 

I assume the stated TPUv4 training does not include the ViT pretraining, since it amounts to fewer FLOPs than we estimate above for the ViT.

275 teraFLOP/s * ((1024 * 7) + (512 * 3)) * 24 * 3600 * 0.3 (utilization assumption) = 6.2e22

Total: 1.07e23 + 6.2e22 = 1.69e23",WebLI,1600000000.0,"""During training, the model passes over 1.6B images, one epoch over the entire pretraining dataset""",Likely,https://arxiv.org/abs/2209.06794v4,PaLI: A Jointly-Scaled Multilingual Language-Image Model,567.0,"Xi Chen, Xiao Wang, Soravit Changpinyo, AJ Piergiovanni, Piotr Padlewski, Daniel Salz, Sebastian Goodman, Adam Grycner, Basil Mustafa, Lucas Beyer, Alexander Kolesnikov, Joan Puigcerver, Nan Ding, Keran Rong, Hassan Akbari, Gaurav Mishra, Linting Xue, Ashish Thapliyal, James Bradbury, Weicheng Kuo, Mojtaba Seyedhosseini, Chao Jia, Burcu Karagol Ayan, Carlos Riquelme, Andreas Steiner, Anelia Angelova, Xiaohua Zhai, Neil Houlsby, Radu Soricut","Effective scaling and a flexible task interface enable large language models to excel at many tasks. We present PaLI (Pathways Language and Image model), a model that extends this approach to the joint modeling of language and vision. PaLI generates text based on visual and textual inputs, and with this interface performs many vision, language, and multimodal tasks, in many languages. To train PaLI, we make use of large pre-trained encoder-decoder language models and Vision Transformers (ViTs). This allows us to capitalize on their existing capabilities and leverage the substantial cost of training them. We find that joint scaling of the vision and language components is important. Since existing Transformers for language are much larger than their vision counterparts, we train a large, 4-billion parameter ViT (ViT-e) to quantify the benefits from even larger-capacity vision models. To train PaLI, we create a large multilingual mix of pretraining tasks, based on a new image-text training set containing 10B images and texts in over 100 languages. PaLI achieves state-of-the-art in multiple vision and language tasks (such as captioning, visual question-answering, scene-text understanding), while retaining a simple, modular, and scalable design.",Industry,United States of America,SOTA improvement,"""PaLI achieves state-of-the-art in multiple vision and language tasks
(such as captioning, visual question-answering, scene-text understanding)""",1.0,240.0,10,Google TPU v4,1024.0,,50878.10777366616,,348601.5921270125,,,,,,Unreleased,Unreleased,,,,
BEIT-3,Microsoft,2022-08-22,"Multimodal,Vision,Language","Object detection,Semantic segmentation,Image classification,Visual question answering,Image captioning,Language generation",1900000000.0,1.9B from Table 2,7e+19,"from Table 11, 1M training steps with batch size 6144. 
From Table 2 we have that model have 1.9B parameters.
Model is VIT","ImageNet21k,COCO,English Wikipedia,BookCorpus (BooksCorpus, Toronto Book Corpus)",,"from Table 3
21M pairs image text,
14M images,160GB documents",Likely,https://arxiv.org/abs/2208.10442,Image as a Foreign Language: BEiT Pretraining for All Vision and Vision-Language Tasks,563.0,Image as a Foreign Language: BEiT Pretraining for All Vision and Vision-Language Tasks,"A big convergence of language, vision, and multimodal pretraining is emerging. In this work, we introduce a general-purpose multimodal foundation model BEiT-3, which achieves state-of-the-art transfer performance on both vision and vision-language tasks. Specifically, we advance the big convergence from three aspects: backbone architecture, pretraining task, and model scaling up. We introduce Multiway Transformers for general-purpose modeling, where the modular architecture enables both deep fusion and modality-specific encoding. Based on the shared backbone, we perform masked ""language"" modeling on images (Imglish), texts (English), and image-text pairs (""parallel sentences"") in a unified manner. Experimental results show that BEiT-3 obtains state-of-the-art performance on object detection (COCO), semantic segmentation (ADE20K), image classification (ImageNet), visual reasoning (NLVR2), visual question answering (VQAv2), image captioning (COCO), and cross-modal retrieval (Flickr30K, COCO). ",Industry,"United States of America,Multinational,India,Belgium",SOTA improvement,"from abstract: 'In this work, we introduce a general-purpose multimodal foundation model BEiT-3, which achieves state-of-the-art transfer performance on both vision and vision-language tasks.'",,,,,,,,,,,,,,,Open weights (unrestricted),Unreleased,Open source,"apache 2.0
https://github.com/microsoft/unilm/tree/master/beit3

It seems that there are no pre-training code, only fine-tuning code",,
BlenderBot 3,"McGill University,Meta AI,Mila - Quebec AI (originally Montreal Institute for Learning Algorithms)",2022-08-10,Language,Chat,175000000000.0,,4.3e+23,(taken from OPT-175 base),BlenderBot 3 Data,1300000000.0,,Likely,"https://arxiv.org/abs/2208.03188, https://github.com/facebookresearch/ParlAI/blob/main/parlai/zoo/bb3/model_card.md

training code: https://parl.ai/projects/bb3/ ",BlenderBot 3: a deployed conversational agent that continually learns to responsibly engage,218.0,"Kurt Shuster, Jing Xu, Mojtaba Komeili, Da Ju, Eric Michael Smith, Stephen Roller, Megan Ung, Moya Chen, Kushal Arora, Joshua Lane, Morteza Behrooz, William Ngan, Spencer Poff, Naman Goyal, Arthur Szlam, Y-Lan Boureau, Melanie Kambadur, Jason Weston","We present BlenderBot 3, a 175B parameter dialogue model capable of open-domain conversation with access to the internet and a long-term memory, and having been trained on a large number of user defined tasks. We release both the model weights and code, and have also deployed the model on a public web page to interact with organic users. This technical report describes how the model was built (architecture, model and training scheme), and details of its deployment, including safety mechanisms. Human evaluations show its superiority to existing open-domain dialogue agents, including its predecessors (Roller et al., 2021; Komeili et al., 2022). Finally, we detail our plan for continual learning using the data collected from deployment, which will also be publicly released. The goal of this research program is thus to enable the community to study ever-improving responsible agents that learn through interaction.","Academia,Industry,Academia","Canada,United States of America,Canada",SOTA improvement,"""Human evaluations show its superiority to existing open-domain dialogue agents, including its predecessors""",,,,NVIDIA A100 SXM4 40 GB,128.0,,,,102609.82584809876,OPT-175B,1.5e+21,"""The 30B and 175B parameter BlenderBot 3 models were each trained for one epoch of the training data
on 64 (30B) or 128 (175B) x 40gb A100 GPUs; we found that the model (especially the 175B version)
overfit significantly when seeing the training data more than once. The 175B model was trained with
a batch size of 2^18 and the 30B model was trained with a batch size of 2^19, resulting in roughly 5600
updates and 2800 updates respectively.""

175b params * 5600 * 2^18 * 6 = 1.5e21
",262144.0,"Note that this is batch size for fine-tuning. Blenderbot is based on OPT-175B which had batch size 2M.

""The 175B model was trained with a batch size of 2^18""
2^18 = 262144",Open weights (non-commercial),Open source,Open source,"weights have a non-commercial license, must go through request form: https://docs.google.com/forms/d/e/1FAIpQLSfRzw8xVzxaxgRyuodTZtkcYADAjzYjN5gcxx6DMa4XaGwwhQ/viewform

meanwhile training code is here. repo is MIT-licensed https://github.com/facebookresearch/ParlAI/blob/main/parlai/scripts/train_model.py ",,
GLM-130B,Tsinghua University,2022-08-04,Language,"Language modeling/generation,Translation",130000000000.0,Dense model,3.5490054945e+23,"""96 NVIDIA A100 (40G * 8) servers for 2 months""

312 TFLOPS/GPU * 96 servers * 8 GPU/server * 2 months * 32.5% utilization = 4.037e23

utilization rate - citation from the paper: ""we report hardware FLOPs utilization (HFU) of 43.3% and model FLOPs utilization (MFU) of 32.5% due to re-materialization.""

Aligns pretty well with 6ND:
6 * 400B * 130B = 3.12E23

Geometric mean: sqrt(4.037e23 * 3.12e23) = 3.549e23","The Pile,WuDao Corpora",400000000000.0,"400B ""We completed the 400B-token training and evaluation of GLM-130B in July, and subsequently released the model and pre-training details in August 2022. ""  from https://arxiv.org/pdf/2406.12793

""As of July 3rd, 2022, GLM-130B has been trained on over 400 billion text tokens (200B each for Chinese and English)""",Confident,https://keg.cs.tsinghua.edu.cn/glm-130b/posts/glm-130b/,GLM-130B: An Open Bilingual Pre-trained Model,989.0,"Aohan Zeng, Xiao Liu, Zhengxiao Du, Zihan Wang, Hanyu Lai, Ming Ding, Zhuoyi Yang, Yifan Xu, Wendi Zheng, Xiao Xia, Weng Lam Tam, Zixuan Ma, Yufei Xue, Jidong Zhai, Wenguang Chen, Peng Zhang, Yuxiao Dong, Jie Tang","GLM-130B (ICLR 2023) is an open bilingual (English & Chinese) bidirectional dense model with 130 billion parameters, pre-trained using the General Language Model (GLM) algorithm1. It is designed to support inference tasks with the 130B parameters on a single A100 (40G * 8) or V100 (32G * 8) server. As of July 3rd, 2022, GLM-130B has been trained on over 400 billion text tokens (200B each for Chinese and English) ",Academia,China,SOTA improvement,"""GLM-130B achieves an accuracy of 80.2% on zero-shot LAMBADA (En), while 76.2% for GPT-3 175B and 77.9% for the SOTA offered by PaLM 540B.""",1.0,1440.0,"""During the 60-day access to the cluster, we manage to train GLM-130B for 400 billion tokens""
60 days * 24 = 1,440 hours",NVIDIA A100 SXM4 40 GB,768.0,0.325,820296.6313095269,,615741.2226117075,,,,8650752.0,,Open weights (non-commercial),Unreleased,,non commercial license. looks like inference but not training code: https://github.com/THUDM/GLM-130B/blob/main/MODEL_LICENSE,FP16,
AlexaTM 20B,Amazon,2022-08-02,Language,"Language modeling,Translation,Question answering",19750000000.0,See Table 1 on p.3 of the paper,2.04374016e+23,"Training throughput is reported as 154 TFLOP/s - see p.5 of the paper.
""We relied on an internal and optimized version of DeepSpeed that we have since open-sourced (Chiu & Zheng, 2022) to obtain training throughput of up to 154 TFLOPS/GPU on 16 AWS p4d.24xlarge compute instances.""

Accelerator compute days are reported as 15,360 days - see Table 17 on p.18 of the paper.","mC4,Wikipedia",1319000000000.0,"See Table 2 on p.3 of the paper.

119B Wikipedia tokens + 1.2T mC4 tokens = 1319000000000 tokens",Confident,https://arxiv.org/abs/2208.01448,AlexaTM 20B: Few-Shot Learning Using a Large-Scale Multilingual Seq2Seq Model,73.0,"Saleh Soltan, Shankar Ananthakrishnan, Jack FitzGerald, Rahul Gupta, Wael Hamza, Haidar Khan, Charith Peris, Stephen Rawls, Andy Rosenbaum, Anna Rumshisky, Chandana Satya Prakash, Mukund Sridhar, Fabian Triefenbach, Apurv Verma, Gokhan Tur, Prem Natarajan","In this work, we demonstrate that multilingual large-scale sequence-to-sequence (seq2seq) models, pre-trained on a mixture of denoising and Causal Language Modeling (CLM) tasks, are more efficient few-shot learners than decoder-only models on various tasks. In particular, we train a 20 billion parameter multilingual seq2seq model called Alexa Teacher Model (AlexaTM 20B) and show that it achieves state-of-the-art (SOTA) performance on 1-shot summarization tasks, outperforming a much larger 540B PaLM decoder model. AlexaTM 20B also achieves SOTA in 1-shot machine translation, especially for low-resource languages, across almost all language pairs supported by the model (Arabic, English, French, German, Hindi, Italian, Japanese, Marathi, Portuguese, Spanish, Tamil, and Telugu) on Flores-101 dataset. We also show in zero-shot setting, AlexaTM 20B outperforms GPT3 (175B) on SuperGLUE and SQuADv2 datasets and provides SOTA performance on multilingual tasks such as XNLI, XCOPA, Paws-X, and XWinograd. Overall, our results present a compelling case for seq2seq models as a powerful alternative to decoder-only models for Large-scale Language Model (LLM) training. ",Industry,United States of America,SOTA improvement,The Abstract reports SOTA improvement on multiple benchmarks.,,2880.0,"See p.5 of the paper: ""We trained AlexaTM 20B for 120 days on 128 A100 GPUs...""",NVIDIA A100,128.0,0.4935,267943.21130997164,,102628.10792703854,,,,2000000.0,"""We trained AlexaTM 20B for 120 days on 128 A100 GPUs for the total of 500k updates with the accumulated batch size of 2 million tokens""",API access,Unreleased,,https://aws.amazon.com/about-aws/whats-new/2022/11/alexatm-20b-model-available-sagemaker-jumpstart/?nc1=h_ls,BF16,
OmegaPLM,"Massachusetts Institute of Technology (MIT),Westlake University",2022-07-22,Biology,"Proteins,Protein folding prediction",670000000.0,"""Our model contains 66 layers with around 670 million parameters without sharing parameters, which doubles the layer count of ESM-1b but roughly retains the parameter count.""",1.03514112e+22,"""OmegaPLM is implemented in PyTorch (44) and trained for 2,560 GPU Nvidia A100 80G days."" 
""Default precision format in Nvidia A100 GPUs is set to TensorFloat-32 for matrix operations.""

Assume 0.3 utilization for language model

Estimate: (2560 * 24 * 3600) s * 156e12 FLOP/s * 0.3 * = 1.04e22",UniRef50,8960000000.999996,"Number of sequences: 35 x 10^6
Sequence length: 512
Total data points: 35 x 10^6 x 512 = 1.792 x 10^10 tokens

First stage crop size: 256
First stage data points: 35 x 10^6 x 256 = 8.96 x 10^9 tokens

Additional structural data: ~110,000 sequences = 7.68 x 10^7 tokens

Final estimate: 8.96 x 10^9 tokens",Confident,https://www.biorxiv.org/content/10.1101/2022.07.21.500999v1,High-resolution de novo structure prediction from primary sequence,268.0,"Ruidong Wu, Fan Ding, Rui Wang, Rui Shen, Xiwen Zhang, Shitong Luo, Chenpeng Su, Zuofan Wu, Qi Xie, Bonnie Berger, Jianzhu Ma, Jian Peng","Recent breakthroughs have used deep learning to exploit evolutionary information in multiple sequence alignments (MSAs) to accurately predict protein structures. However, MSAs of homologous proteins are not always available, such as with orphan proteins or fast-evolving proteins like antibodies, and a protein typically folds in a natural setting from its primary amino acid sequence into its three-dimensional structure, suggesting that evolutionary information and MSAs should not be necessary to predict a protein’s folded form. Here, we introduce OmegaFold, the first computational method to successfully predict high-resolution protein structure from a single primary sequence alone. Using a new combination of a protein language model that allows us to make predictions from single sequences and a geometry-inspired transformer model trained on protein structures, OmegaFold outperforms RoseTTAFold and achieves similar prediction accuracy to AlphaFold2 on recently released structures. OmegaFold enables accurate predictions on orphan proteins that do not belong to any functionally characterized protein family and antibodies that tend to have noisy MSAs due to fast evolution. Our study fills a much-encountered gap in structure prediction and brings us a step closer to understanding protein folding in nature.","Academia,Academia","United States of America,China",Historical significance,"""Here, we introduce OmegaFold, the first computational method to successfully predict high-resolution protein structure from a single primary sequence alone. Using a new combination of a protein language model that allows us to make predictions from single sequences and a geometry-inspired transformer model trained on protein structures, OmegaFold outperforms RoseTTAFold and achieves similar prediction accuracy to AlphaFold2 on recently released structures""",,,"2,560 GPU Nvidia A100 80G days",NVIDIA A100 SXM4 80 GB,,,52400.32118528479,,,,,,2097152.0,"""[...] each batch contains 4,096 sequences and each sequence is padded or cropped to 512 residues"" 4096 * 512 = 2097152",Unreleased,Unreleased,,,TF32,
ESM2-15B,"Meta AI,New York University (NYU),Stanford University,Massachusetts Institute of Technology (MIT)",2022-07-21,Biology,"Proteins,Protein or nucleotide language model (pLM/nLM),Protein folding prediction",15000000000.0,"""we train models up to 15B parameters""",7.35000000001e+22,"from xTrimoPGLM paper Table 9 (https://www.biorxiv.org/content/10.1101/2023.07.05.547496v1): 5.1e22 FLOP

from Arb Research (https://arbresearch.com/files/gen_bio.pdf): ""ESM-2-15B: 270000 updates x 3.2M batch size x 15 B “connections” x 6. : 7.8e22 FLOP

from the paper's Supplementary Materials: 
""We trained each model over 512 NVIDIA V100 GPUs. ESM2 700M took 8 days to train. The 3B parameter LM took 30 days. The 15B model took 60 days.""
60 days x 512 V100s x an imputed 30% utilization"": 1e23 FLOP

Geometric mean: 7.35e22",UniRef50,12000000000.0,"Section A.1.1:
""This allowed ESM-2 models to train on over 60M protein sequences.""

Average protein sequence is 200 tokens, per https://epoch.ai/blog/biological-sequence-models-in-the-context-of-the-ai-directives#fn:4 
60M * 200 = 12B tokens

Epochs: 15B model used 270k steps at 3.2M token batch size
270k * 3.2M / 12B = 72",Confident,"https://www.science.org/doi/abs/10.1126/science.ade2574
https://www.biorxiv.org/content/10.1101/2022.07.20.500902v2",Evolutionary-scale prediction of atomic-level protein structure with a language model,636.0,"Zeming Lin, Halil Akin, Roshan Rao, Brian Hie, Zhongkai Zhu, Wenting Lu, Nikita Smetanin, Robert Verkuil, Ori Kabeli, Yaniv Shmueli, Allan dos Santos Costa, Maryam Fazel-Zarandi, Tom Sercu, Salvatore Candido, Alexander Rives","""Recent advances in machine learning have leveraged evolutionary information in multiple sequence alignments to predict protein structure. We demonstrate direct inference of full atomic-level protein structure from primary sequence using a large language model. As language models of protein sequences are scaled up to 15 billion parameters, an atomic-resolution picture of protein structure emerges in the learned representations. This results in an order-of-magnitude acceleration of high-resolution structure prediction, which enables large-scale structural characterization of metagenomic proteins. We apply this capability to construct the ESM Metagenomic Atlas by predicting structures for >617 million metagenomic protein sequences, including >225 million that are predicted with high confidence, which gives a view into the vast breadth and diversity of natural proteins.""","Industry,Academia,Academia,Academia","United States of America,United States of America,United States of America,United States of America",SOTA improvement,"""The resulting ESM-2 model family significantly outperforms previously state-of-the-art ESM-1b (a ∼650 million parameter model) at a comparable number of parameters, and on structure prediction benchmarks it also outperforms other recent protein language models""",72.0,1440.0,,NVIDIA V100,512.0,,163467.82019979745,,307966.61145938886,,,,,,Open weights (unrestricted),Unreleased,Open source,"MIT weights, CC BY 4.0 data
https://github.com/facebookresearch/esm?tab=readme-ov-file#available-esmssd

may just be inference code in the repo^",,
BLOOM-176B,"Hugging Face,BigScience",2022-07-11,Language,"Language modeling,Translation,Code generation",176247271424.0,"See ""Technical Specifications"" on Hugging Face:
https://huggingface.co/bigscience/bloom",3.65664e+23,"https://bigscience.huggingface.co/blog/bloom Blog post says 117 days.

384 A100 GPUs * 314 TFLOPS throughput per GPU * 117 days * 0.3 (utilization assumption) = 3.65664e23
https://www.wolframalpha.com/input?i=384+*+314+TFLOPS+*+117+days+*+0.3",BigScience ROOTS Corpus,379000000000.0,"Table 3.5 https://arxiv.org/pdf/2211.05100

366B (pretrain) + 13B (finetune) = 379B  tokens total ",Confident,https://arxiv.org/abs/2211.05100,BLOOM: A 176B-Parameter Open-Access Multilingual Language Model,1984.0,"Margaret Mitchell, Giada Pistilli, Yacine Jernite, Ezinwanne Ozoani, Marissa Gerchick, Nazneen Rajani, Sasha Luccioni, Irene Solaiman, Maraim Masoud, Somaieh Nikpoor, Carlos Muñoz Ferrandis, Stas Bekman, Christopher Akiki, Danish Contractor, David Lansky, Angelina McMillan-Major, Tristan Thrush, Suzana Ilić, Gérard Dupont, Shayne Longpre, Manan Dey, Stella Biderman, Douwe Kiela, Emi Baylor, Teven Le Scao, Aaron Gokaslan, Julien Launay, Niklas Muennighoff","Large language models (LLMs) have been shown to be able to perform new tasks based on a few demonstrations or natural language instructions. While these capabilities have led to widespread adoption, most LLMs are developed by resource-rich organizations and are frequently kept from the public. As a step towards democratizing this powerful technology, we present BLOOM, a 176B-parameter open-access language model designed and built thanks to a collaboration of hundreds of researchers. BLOOM is a decoder-only Transformer language model that was trained on the ROOTS corpus, a dataset comprising hundreds of sources in 46 natural and 13 programming languages (59 in total). We find that BLOOM achieves competitive performance on a wide variety of benchmarks, with stronger results after undergoing multitask prompted finetuning. To facilitate future research and applications using LLMs, we publicly release our models and code under the Responsible AI License.","Industry,Research collective","Multinational,United States of America,Multinational,France","Historical significance,Highly cited","Was the largest open-source model at the time. 1000+ researchers, many from important orgs such as Microsoft and NVIDIA.

https://huggingface.co/bigscience/bloom",1.0,2808.0,117 days * 24 hours/day,NVIDIA A100 SXM4 80 GB,384.0,0.5,995819.1171,,308035.2013244814,,,,4194304.0,Table 3. 2048*2048,Open weights (restricted use),Unreleased,,responsible use restrictions: https://bigscience.huggingface.co/blog/the-bigscience-rail-license,BF16,
NLLB,Meta AI,2022-07-06,Language,Translation,54500000000.0,"Section 8.2.4: ""The model has a total of 54.5B parameters
and FLOPs similar to that of a 3.3B dense model""",1.751113728e+22,"Section 8.8:
"" To train NLLB-200, a cumulative
of 51968 GPU hours of computation was performed on hardware of type A100-SXM-80GB""
See also Table 48

Section 8.2.4 states they use FP16

NVIDIA Datasheet states 312TFLOPS for FP16
https://www.nvidia.com/content/dam/en-zz/Solutions/Data-Center/a100/pdf/nvidia-a100-datasheet-nvidia-us-2188504-web.pdf

Assuming 0.3 utilization:

312e12*3600*51968*0.3

Also:
""Our final model is a Transformer
encoder-decoder model in which we replace the Feed Forward Network (FFN) layer in
every 4th Transformer block with a Sparsely Gated Mixture of Experts layer containing 128
experts. We use model dimension 2048, FFN dimension 8192, 16 attention heads, 24 encoder
layers and 24 decoder layers. We use Pre-LayerNorm (Xiong et al., 2020) as described in
Section 6.1.1. We share the embedding weights of the encoder input embedding, decoder
input embedding and decoder output embedding layers. We use an overall dropout of 0.3,
attention dropout 0.1 and EOM with peom=0.2. The model has a total of 54.5B parameters
and FLOPs similar to that of a 3.3B dense model.""",,360000000000.0,"[WORDS]

Section 8.2.2: ""As we prepare to train on the final 202 language dataset comprising of over 18B sentence
pairs and 2440 language directions""

18B sentences * 20 words/sentence",Confident,https://research.facebook.com/publications/no-language-left-behind/,No Language Left Behind: Scaling Human-Centered Machine Translation,924.0,"Marta R. Costa-jussà, James Cross, Onur Çelebi, Maha Elbayad, Kenneth Heafield, Kevin Heffernan, Elahe Kalbassi, Janice Lam, Daniel Licht, Jean Maillard, Anna Sun, Skyler Wang, Guillaume Wenzek, Al Youngblood, Bapi Akula, Loic Barrault, Gabriel Mejia Gonzalez, Prangthip Hansanti, John Hoffman, Semarley Jarrett, Kaushik Ram Sadagopan, Dirk Rowe, Shannon Spruit, Chau Tran, Pierre Andrews, Necip Fazil Ayan, Shruti Bhosale, Sergey Edunov, Angela Fan, Cynthia Gao, Vedanuj Goswami, Francisco (Paco) Guzmán, Philipp Koehn, Alexandre Mourachko, Christophe Ropers, Safiyyah Saleem, Holger Schwenk, Jeff Wang","Driven by the goal of eradicating language barriers on a global scale, machine translation has solidified itself as a key focus of artificial intelligence research today. However, such efforts have coalesced around a small subset of languages, leaving behind the vast majority of mostly low-resource languages. What does it take to break the 200 language barrier while ensuring safe, high quality results, all while keeping ethical considerations in mind? In No Language Left Behind, we took on this challenge by first contextualizing the need for low-resource language translation support through exploratory interviews with native speakers. Then, we created datasets and models aimed at narrowing the performance gap between low and high-resource languages. More specifically, we developed a conditional compute model based on Sparsely Gated Mixture of Experts that is trained on data obtained with novel and effective data mining techniques tailored for low-resource languages. We propose multiple architectural and training improvements to counteract overfitting while training on thousands of tasks. Critically, we evaluated the performance of over 40,000 different translation directions using a human-translated benchmark, Flores-200, and combined human evaluation with a novel toxicity benchmark covering all languages in Flores-200 to assess translation safety. Our model achieves an improvement of 44% BLEU relative to the previous state-of-the-art, laying important groundwork towards realizing a universal translation system. Finally, we open source all contributions described in this work, accessible at https://github.com/facebookresearch/fairseq/tree/nllb.",Industry,United States of America,SOTA improvement,"""Our model achieves an improvement of 44% BLEU relative to the previous state-of-the-art""",,,,NVIDIA A100 SXM4 80 GB,,,50667.25034038439,,,,,,1000000.0,"""We train the model for 300k steps using the 4 phase curriculum
described in Section 8.2.3. We use an effective batch size of 1M tokens per update.""",Open weights (unrestricted),Open source,Open source,"MIT

train code: https://github.com/facebookresearch/fairseq/blob/nllb/examples/nllb/modeling/README.md ",FP16,
CodeT5-large,Salesforce,2022-07-05,Language,Code generation,770000000.0,"""We pretrain a CodeT5-large model (770M) from scratch following T5-large’s architecture""",2.72e+21,"""We perform our experiments on a kubernetes with 16 A100-40G GPUs on Google Cloud Platform and the total pretraining duration is around 21 days""

16 * 312tFLOP/s * 21 * 24 * 3600 * 0.3 (utilization assumption) = 2.72e21",GitHub,10500000000.0,10.5b tokens,Likely,https://arxiv.org/abs/2207.01780,CodeRL: Mastering Code Generation through Pretrained Models and Deep Reinforcement Learning,190.0,"Hung Le, Yue Wang, Akhilesh Deepak Gotmare, Silvio Savarese, Steven C.H. Hoi ","""Program synthesis or code generation aims to generate a program that satisfies a problem specification. Recent approaches using large-scale pretrained language models (LMs) have shown promising results, yet they have some critical limitations. In particular, they often follow a standard supervised fine-tuning procedure to train a code generation model only from the pairs of natural-language problem descriptions and ground-truth programs. Such paradigm largely ignores some important but potentially useful signals in the problem specification such as unit tests, which thus often results in poor performance when solving complex unseen coding tasks. To address the limitations, we propose ""CodeRL"", a new framework for program synthesis tasks through pretrained LMs and deep reinforcement learning (RL). Specifically, during training, we treat the code-generating LM as an actor network, and introduce a critic network that is trained to predict the functional correctness of generated programs and provide dense feedback signals to the actor. During inference, we introduce a new generation procedure with a critical sampling strategy that allows a model to automatically regenerate programs based on feedback from example unit tests and critic scores. For the model backbones, we extended the encoder-decoder architecture of CodeT5 with enhanced learning objectives, larger model sizes, and better pretraining data. Our method not only achieves new SOTA results on the challenging APPS benchmark, but also shows strong zero-shot transfer capability with new SOTA results on the simpler MBPP benchmark.""",Industry,United States of America,SOTA improvement,"""Our method not only achieves new SOTA results on the challenging APPS benchmark, but also shows strong zero-shot transfer capability with new SOTA results on the simpler MBPP benchmark.""",150.0,504.0,21 days,NVIDIA A100,,,4478.145684414144,,,,,,,,Open weights (unrestricted),Open source,Open source,"BSD-3-Clause license
https://github.com/salesforce/CodeT5

https://huggingface.co/Salesforce/codet5-large",FP16,
Minerva (540B),Google,2022-06-29,Language,Quantitative reasoning,540350000000.0,"""To further our understanding of the impact of scale on few-shot learning, we trained a 540-billion parameter, densely activated, Transformer language model, which we call Pathways Language Model (PaLM).""

Our approach is to start with the PaLM pretrained decoder-only transformer language models Chowdhery et al. (2022), and further train (finetune) them on our mathematical dataset using an autoregressive objective.
Table 2 contains the main model and training hyperparameters.

See Table 2",2.7415e+24,"Minerva was fine-tuned from PaLM using the same hardware. Assume the same model FLOPs utilization rate for pre-training and fine-tuning.
""the 540B model was trained for 29 days on a v4-1024""

PaLM pretraining time: 6144 TPU for 1200 hours + 3072 TPU for 336 hours = @8404992 TPU-hours
Minerva finetuning time: 1024 TPU for 696 hours = 712704 TPU-hours
So fine-tuning added 8.5% more compute.

Minerva total compute = PaLM pretraining compute * (712704+8404992)/(8404992) = 2.7415*10^24 FLOP
https://www.wolframalpha.com/input?i=%28712704%2B8404992%29%2F%288404992%29+*+2.5272*10%5E24

Palm pretraining: 2.5272e+24",arXiv,26000000000.0,"""Our models were trained on a dataset of 38.5B tokens"" + PaLM

upd 38.5B tokens - sie of the dataset, the model saw 26B tokens in 399k steps (see Table 2)",Confident,https://arxiv.org/abs/2206.14858,Solving Quantitative Reasoning Problems with Language Models,585.0,"Aitor Lewkowycz, Anders Andreassen, David Dohan, Ethan Dyer, Henryk Michalewski, Vinay Ramasesh, Ambrose Slone, Cem Anil, Imanol Schlag, Theo Gutman-Solo, Yuhuai Wu, Behnam Neyshabur, Guy Gur-Ari, Vedant Misra","Language models have achieved remarkable performance on a wide range of tasks that require natural language understanding. Nevertheless, state-of-the-art models have generally struggled with tasks that require quantitative reasoning, such as solving mathematics, science, and engineering problems at the college level. To help close this gap, we introduce Minerva, a large language model pretrained on general natural language data and further trained on technical content. The model achieves state-of-the-art performance on technical benchmarks without the use of external tools. We also evaluate our model on over two hundred undergraduate-level problems in physics, biology, chemistry, economics, and other sciences that require quantitative reasoning, and find that the model can correctly answer nearly a third of them.",Industry,United States of America,SOTA improvement,,,696.0,,Google TPU v4,1024.0,,,,349199.866571188,PaLM (540B),2.1429e+23,,,,Unreleased,Unreleased,,,,True
ProGen2-xlarge,"Salesforce Research,Columbia University,Johns Hopkins University",2022-06-27,Biology,"Proteins,Protein generation,Protein or nucleotide language model (pLM/nLM)",6400000000.0,"""We introduce a suite of protein language models, named ProGen2, that are scaled up to 6.4B parameters""",1.35e+22,"Estimate 1:
""350,000 steps x 1m batch size x 6.4 B “connections” x 6"" - Arb Research (https://arbresearch.com/files/gen_bio.pdf)
Steps and batches from Table 1. 
FLOP estimate: 1.3e22

Table 9 from here: https://www.biorxiv.org/content/10.1101/2023.07.05.547496v1.full.pdf
FLOP estimate: 1.4e22

Geometric mean = 1.35e22 FLOP","UniRef90,BFD30",350000000000.0,350B from Table 9 https://www.biorxiv.org/content/10.1101/2023.07.05.547496v1,Confident,https://arxiv.org/abs/2206.13517,ProGen2: Exploring the Boundaries of Protein Language Models,199.0,"Erik Nijkamp, Jeffrey Ruffolo, Eli N. Weinstein, Nikhil Naik, Ali Madani
","Attention-based models trained on protein sequences have demonstrated incredible success at classification and generation tasks relevant for artificial intelligence- driven protein design. However, we lack a sufficient understanding of how very large-scale models and data play a role in effective protein model development. We introduce a suite of protein language models, named ProGen2, that are scaled up to 6.4B parameters and trained on different sequence datasets drawn from over a billion proteins from genomic, metagenomic, and immune repertoire databases. ProGen2 models show state-of-the-art performance in capturing the distribution of observed evolutionary sequences, generating novel viable sequences, and predicting protein fitness without additional finetuning. As large model sizes and raw numbers of protein sequences continue to become more widely accessible, our results suggest that a growing emphasis needs to be placed on the data distribution provided to a protein sequence model. We release the ProGen2 models and code at https://github.com/salesforce/progen.","Industry,Academia,Academia","United States of America,United States of America,United States of America",SOTA improvement,"""ProGen2 models show state-of-the-art performance in capturing the distribution of observed evolutionary sequences, generating novel viable sequences, and pre- dicting protein fitness without additional finetuning.""",,,,Google TPU v3,,,11850.178410269727,,,,,,,,Open weights (unrestricted),Unreleased,Open source,"BSD license (permissive)
https://github.com/salesforce/progen?tab=BSD-3-Clause-1-ov-file#readme",,
Parti,Google Research,2022-06-22,Image generation,"Text-to-image,Image generation",20000000000.0,"Abstract: ""we achieve consistent quality improvements
by scaling the encoder-decoder Transformer model up to 20B parameters""",5.09607936e+23,"Calculated from architecture. Does not take into account the encoding and decoding of text and images, only the transformer stack.

Table 1 shows for the 20B model
16 encoder layers
64 decoder layers
Dmodel = 4096
Dhidden = 16384
Num heads = 64

Just below table 1:
""We use a maximum length of text tokens of 128, and the length of image tokens are fixed to 1024""

I take the length of the sequence to be 100 for the encoder stack and 1024 for the decoder stack.

Section 3, Training: ""a total
of 450,000 steps and final ratio of 0.025. We use a global batch size of 8192 during training.""

6* 20B parameters * (1024+128) sequence length*450000 steps*8192 batch size= 5.096079e+23","LAION-400M,FIT400M,JFT-4B",4800000000.0,,Confident,https://arxiv.org/abs/2206.10789v1,Scaling Autoregressive Models for Content-Rich Text-to-Image Generation,880.0,"Jiahui Yu, Yuanzhong Xu, Jing Yu Koh, Thang Luong, Gunjan Baid, Zirui Wang, Vijay Vasudevan, Alexander Ku, Yinfei Yang, Burcu Karagol Ayan, Ben Hutchinson, Wei Han, Zarana Parekh, Xin Li, Han Zhang, Jason Baldridge, Yonghui Wu","We present the Pathways Autoregressive Text-to-Image (Parti) model, which generates high-fidelity photorealistic images and supports content-rich synthesis involving complex compositions and world knowledge. Parti treats text-to-image generation as a sequence-to-sequence modeling problem, akin to machine translation, with sequences of image tokens as the target outputs rather than text tokens in another language. This strategy can naturally tap into the rich body of prior work on large language models, which have seen continued advances in capabilities and performance through scaling data and model sizes. Our approach is simple: First, Parti uses a Transformer-based image tokenizer, ViT-VQGAN, to encode images as sequences of discrete tokens. Second, we achieve consistent quality improvements by scaling the encoder-decoder Transformer model up to 20B parameters, with a new state-of-the-art zero-shot FID score of 7.23 and finetuned FID score of 3.22 on MS-COCO. Our detailed analysis on Localized Narratives as well as PartiPrompts (P2), a new holistic benchmark of over 1600 English prompts, demonstrate the effectiveness of Parti across a wide variety of categories and difficulty aspects. We also explore and highlight limitations of our models in order to define and exemplify key areas of focus for further improvements. See https://parti.research.google/ for high-resolution images.",Industry,"Multinational,United States of America,Canada,Switzerland",SOTA improvement,"""Second, we achieve consistent quality improvements by scaling the encoder-decoder Transformer model up to 20B parameters, with a new state-of-the-art zero-shot FID score of 7.23 and finetuned FID score of 3.22 on MS-COCO""",,,,Google TPU v4,,,427178.712,,,,,,,,Unreleased,Unreleased,,"""For these reasons, we have decided not to release our Parti models, code, or data for public use without further safeguards in place""
https://sites.research.google/parti/",BF16,True
CoCa,Google Research,2022-06-14,Vision,"Image classification,Visual question answering,Image captioning",2100000000.0,"""Our largest CoCa model (""CoCa"" in short) follows the ViT-giant setup in [21] with 1B-parameters in the image encoder and 2.1B-parameters altogether with the text decoder""",7.3e+22,"""Pretraining CoCa takes about 5 days on 2,048 CloudTPUv4 chips""

275 teraFLOP/s * 2048 * 5 * 24 * 3600 * 0.3 (assumed utilization) = 7.3e22","JFT-3B,ALIGN",4800000000.0,"JFT is 3 billion captioned images, ALIGN is 1.8 billion captioned images

""we use a batch size of 65,536 image-text pairs, where half of each batch comes from JFT and ALIGN, respectively. All models are trained on the
combined contrastive and captioning objectives in Eq.(4) for 500k steps, roughly corresponding to 5 epochs on JFT and 10 epochs on ALIGN.""

(5*3b+10*1.8b)/4.8b=6.875 epochs on average",Confident,https://arxiv.org/abs/2205.01917v2,CoCa: Contrastive Captioners are Image-Text Foundation Models,1056.0,"Jiahui Yu, Zirui Wang, Vijay Vasudevan, Legg Yeung, Mojtaba Seyedhosseini, Yonghui Wu","Exploring large-scale pretrained foundation models is of significant interest in computer vision because these models can be quickly transferred to many downstream tasks. This paper presents Contrastive Captioner (CoCa), a minimalist design to pretrain an image-text encoder-decoder foundation model jointly with contrastive loss and captioning loss, thereby subsuming model capabilities from contrastive approaches like CLIP and generative methods like SimVLM. In contrast to standard encoder-decoder transformers where all decoder layers attend to encoder outputs, CoCa omits cross-attention in the first half of decoder layers to encode unimodal text representations, and cascades the remaining decoder layers which cross-attend to the image encoder for multimodal image-text representations. We apply a contrastive loss between unimodal image and text embeddings, in addition to a captioning loss on the multimodal decoder outputs which predicts text tokens autoregressively. By sharing the same computational graph, the two training objectives are computed efficiently with minimal overhead. CoCa is pretrained end-to-end and from scratch on both web-scale alt-text data and annotated images by treating all labels simply as text, seamlessly unifying natural language supervision for representation learning. Empirically, CoCa achieves state-of-the-art performance with zero-shot transfer or minimal task-specific adaptation on a broad range of downstream tasks, spanning visual recognition (ImageNet, Kinetics-400/600/700, Moments-in-Time), crossmodal retrieval (MSCOCO, Flickr30K, MSR-VTT), multimodal understanding (VQA, SNLI-VE, NLVR2), and image captioning (MSCOCO, NoCaps). Notably on ImageNet classification, CoCa obtains 86.3% zero-shot top-1 accuracy, 90.6% with a frozen encoder and learned classification head, and new state-of-the-art 91.0% top-1 accuracy on ImageNet with a finetuned encoder.",Industry,"Multinational,United States of America,Canada,Switzerland",SOTA improvement,"""Notably on ImageNet classification, CoCa obtains 86.3% zero-shot top-1 accuracy, 90.6% with a frozen encoder and learned classification head, and new state-of-the-art 91.0% top-1 accuracy on ImageNet with a finetuned encoder.""",6.875,120.0,5 days,Google TPU v4,2048.0,,78043.3756911775,,698633.0659558588,,,,,"65,536 image-text pairs",Unreleased,Unreleased,,,,
MetaLM,Microsoft Research,2022-06-13,"Multimodal,Language,Vision","Language modeling,Visual question answering,Language modeling/generation",,,,,The Pile,,,Unknown,https://arxiv.org/abs/2206.06336v1,Language Models are General-Purpose Interfaces,90.0,"Yaru Hao, Haoyu Song, Li Dong, Shaohan Huang, Zewen Chi, Wenhui Wang, Shuming Ma, Furu Wei","Foundation models have received much attention due to their effectiveness across a broad range of downstream applications. Though there is a big convergence in terms of architecture, most pretrained models are typically still developed for specific tasks or modalities. In this work, we propose to use language models as a general-purpose interface to various foundation models. A collection of pretrained encoders perceive diverse modalities (such as vision, and language), and they dock with a language model that plays the role of a universal task layer. We propose a semi-causal language modeling objective to jointly pretrain the interface and the modular encoders. We subsume the advantages and capabilities from both causal and non-causal modeling, thereby combining the best of two worlds. Specifically, the proposed method not only inherits the capabilities of in-context learning and open-ended generation from causal language modeling, but also is conducive to finetuning because of the bidirectional encoders. More importantly, our approach seamlessly unlocks the combinations of the above capabilities, e.g., enabling in-context learning or instruction following with finetuned encoders. Experimental results across various language-only and vision-language benchmarks show that our model outperforms or is competitive with specialized models on finetuning, zero-shot generalization, and few-shot learning.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational",SOTA improvement,"Abstract: ""Experimental results across various language-only and vision-language benchmarks show that our model outperforms or is competitive with specialized models on finetuning, zero-shot generalization, and few-shot learning.""",,,,,,,,,,,,,,,Unreleased,Unreleased,,"I don't see neither code nor weights here
https://github.com/microsoft/unilm/tree/master/metalm",,
DITTO,"Tsinghua University,Apple,Westlake University,Chinese University of Hong Kong (CUHK)",2022-06-06,Language,Language modeling/generation,750000000.0,"""We train a Transformer model (750M parameters, similar to GPT-2 Large)""

""Specifically, we use a 16-layer Transformer with 8 attention heads, hidden size 1024 and fully-connected dimension 4096.""",3.31776e+18,6 FLOP / token / parameter * 160000 steps * 3 samples per batch * 1536 tokens per sample *  750000000 parameters = 3.31776 × 10^18 FLOP,WikiText-103,103000000.0,,Confident,https://arxiv.org/abs/2206.02369,Learning to Break the Loop: Analyzing and Mitigating Repetitions for Neural Text Generation,53.0,"Jin Xu, Xiaojiang Liu, Jianhao Yan, Deng Cai, Huayang Li, Jian Li","While large-scale neural language models, such as GPT2 and BART, have achieved impressive results on various text generation tasks, they tend to get stuck in undesirable sentence-level loops with maximization-based decoding algorithms (\textit{e.g.}, greedy search). This phenomenon is counter-intuitive since there are few consecutive sentence-level repetitions in human corpora (e.g., 0.02\% in Wikitext-103). To investigate the underlying reasons for generating consecutive sentence-level repetitions, we study the relationship between the probabilities of the repetitive tokens and their previous repetitions in the context. Through our quantitative experiments, we find that 1) Language models have a preference to repeat the previous sentence; 2) The sentence-level repetitions have a \textit{self-reinforcement effect}: the more times a sentence is repeated in the context, the higher the probability of continuing to generate that sentence; 3) The sentences with higher initial probabilities usually have a stronger self-reinforcement effect. Motivated by our findings, we propose a simple and effective training method \textbf{DITTO} (Pseu\underline{D}o-Repet\underline{IT}ion Penaliza\underline{T}i\underline{O}n), where the model learns to penalize probabilities of sentence-level repetitions from pseudo repetitive data. Although our method is motivated by mitigating repetitions, experiments show that DITTO not only mitigates the repetition issue without sacrificing perplexity, but also achieves better generation quality. Extensive experiments on open-ended text generation (Wikitext-103) and text summarization (CNN/DailyMail) demonstrate the generality and effectiveness of our method.","Academia,Industry,Academia,Academia","China,United States of America,China,Hong Kong,China",SOTA improvement,"Achieves SOTA on CNN/DailyMail by fine-tuning and improving on BART-large, which is SOTA",7.158,,,NVIDIA V100,8.0,,,,4816.802908983849,,,,,,Unreleased,Open source,Open source,"open code
https://github.com/Jxu-Thu/DITTO

training: https://github.com/Jxu-Thu/DITTO/blob/main/train.py ",FP16,
Diffusion-GAN,"UT Austin,Microsoft",2022-06-05,Image generation,"Image generation,Text-to-image",,,,"Must be <1e23 FLOP, all experiments were done with 4 or 8 V100s.","CIFAR-10,LSUN Bedroom,AFHQ,LSUN Church,STL-10,FFHQ",,,Unknown,https://arxiv.org/abs/2206.02262v4,Diffusion-GAN: Training GANs with Diffusion,164.0,"Zhendong Wang, Huangjie Zheng, Pengcheng He, Weizhu Chen, Mingyuan Zhou","Generative adversarial networks (GANs) are challenging to train stably, and a promising remedy of injecting instance noise into the discriminator input has not been very effective in practice. In this paper, we propose Diffusion-GAN, a novel GAN framework that leverages a forward diffusion chain to generate Gaussianmixture distributed instance noise. Diffusion-GAN consists of three components, including an adaptive diffusion process, a diffusion timestep-dependent discriminator, and a generator. Both the observed and generated data are diffused by the same adaptive diffusion process. At each diffusion timestep, there is a different noise-to-data ratio and the timestep-dependent discriminator learns to distinguish the diffused real data from the diffused generated data. The generator learns from the discriminator’s feedback by backpropagating through the forward diffusion chain, whose length is adaptively adjusted to balance the noise and data levels. We theoretically show that the discriminator’s timestep-dependent strategy gives consistent and helpful guidance to the generator, enabling it to match the true data distribution. We demonstrate the advantages of Diffusion-GAN over strong GAN baselines on various datasets, showing that it can produce more realistic images with higher stability and data efficiency than state-of-the-art GANs.","Academia,Industry","United States of America,United States of America,Multinational,India,Belgium",SOTA improvement,"""We demonstrate the advantages of Diffusion-GAN over strong GAN
baselines on various datasets, showing that it can produce more realistic images with higher stability and data efficiency than state-of-the-art GANs.""",,,,NVIDIA V100,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"MIT license
https://github.com/Zhendong-Wang/Diffusion-GAN

https://huggingface.co/zhendongw/diffusion-gan/tree/main",FP16,
CogVideo,"Tsinghua University,Beijing Academy of Artificial Intelligence / BAAI",2022-05-29,Video,"Video generation,Text-to-video",9400000000.0,,,,Unspecified unreleased,5400000.0,"""trained on 5.4 million text-video pairs""",Speculative,https://arxiv.org/abs/2205.15868,CogVideo: Large-scale Pretraining for Text-to-Video Generation via Transformers,356.0,"Wenyi Hong, Ming Ding, Wendi Zheng, Xinghan Liu, Jie Tang","Large-scale pretrained transformers have created milestones in text (GPT-3) and text-to-image (DALL-E and CogView) generation. Its application to video generation is still facing many challenges: The potential huge computation cost makes the training from scratch unaffordable; The scarcity and weak relevance of text-video datasets hinder the model understanding complex movement semantics. In this work, we present 9B-parameter transformer CogVideo, trained by inheriting a pretrained text-to-image model, CogView2. We also propose multi-frame-rate hierarchical training strategy to better align text and video clips. As (probably) the first open-source large-scale pretrained text-to-video model, CogVideo outperforms all publicly available models at a large margin in machine and human evaluations.","Academia,Academia","China,China",Historical significance,The world's largest and first opensource large-scale pre-trained text-to-video model.,,,,,,,,,,CogView2,3.0456e+19,"6ND = 6*9400000000*5400000=3.0456e+17

(number of epochs is unknown)",,,Open weights (unrestricted),Open source,Open source,"https://github.com/THUDM/CogVideo
Apache 2
train code: https://github.com/THUDM/CogVideo/blob/CogVideo/pretrain_cogvideo.py ",FP16,
Tranception,"University of Oxford,Harvard Medical School,Cohere",2022-05-27,Biology,"Proteins,Protein pathogenicity prediction",700000000.0,"""Our largest transformer model, Tranception L, has 700M parameters and is trained on UniRef100 (Suzek et al., 2014)""",7.24e+21,"Trained using 64 A100 GPUs for two weeks.
64 * 312 teraFLOP/s * 14 days * 24 hours/day * 3600 seconds/hour * 0.3 utilization (assumption)
= 7.24e21",UniRef100,75000000001.00037,"Total tokens = Number of Sequences × Average Sequence Length
249,000,000 × 300 = 74,700,000,000 ≈ 7.5 × 10¹⁰ tokens",Confident,https://arxiv.org/abs/2205.13760,Tranception: protein fitness prediction with autoregressive transformers and inference-time retrieval,139.0,"Pascal Notin, Mafalda Dias, Jonathan Frazer, Javier Marchena-Hurtado, Aidan Gomez, Debora S. Marks, Yarin Gal","The ability to accurately model the fitness landscape of protein sequences is critical to a wide range of applications, from quantifying the effects of human variants on disease likelihood, to predicting immune-escape mutations in viruses and designing novel biotherapeutic proteins. Deep generative models of protein sequences trained on multiple sequence alignments have been the most successful approaches so far to address these tasks. The performance of these methods is however contingent on the availability of sufficiently deep and diverse alignments for reliable training. Their potential scope is thus limited by the fact many protein families are hard, if not impossible, to align. Large language models trained on massive quantities of non-aligned protein sequences from diverse families address these problems and show potential to eventually bridge the performance gap. We introduce Tranception, a novel transformer architecture leveraging autoregressive predictions and retrieval of homologous sequences at inference to achieve state-of-the-art fitness prediction performance. Given its markedly higher performance on multiple mutants, robustness to shallow alignments and ability to score indels, our approach offers significant gain of scope over existing approaches. To enable more rigorous model testing across a broader range of protein families, we develop ProteinGym -- an extensive set of multiplexed assays of variant effects, substantially increasing both the number and diversity of assays compared to existing benchmarks.","Academia,Academia,Industry","United Kingdom of Great Britain and Northern Ireland,United States of America,Canada",SOTA improvement,"""We introduce Tranception, a novel transformer architecture leveraging autoregressive predictions and retrieval of homologous sequences at inference to achieve state-of-the-art fitness prediction performance. Given its markedly higher performance on multiple mutants, robustness to shallow alignments and ability to score indels, our approach offers significant gain of scope over existing approaches.""",,336.0,2 weeks,NVIDIA A100,64.0,,15247.43608848737,,51390.67413498394,,,,,,Open weights (unrestricted),Open source,Open source,"MIT license

https://github.com/OATML-Markslab/Tranception

https://huggingface.co/OATML-Markslab/Tranception_Large",,
Imagen,Google Brain,2022-05-23,Image generation,"Text-to-image,Image generation",7762000000.0,"2B 64x64 generation model, 600M 64->256 super-resolution model, 400M 256->1024 super-resolution model
Uses encodings from a frozen T5-XXL, which should be included in total parameter count. Loading the model directly, there are 4,762,310,656 parameters in the encoder.
2B + 4.762B + 600M + 400M = 7.762 billion

here they claim it is 3B parameters: https://arxiv.org/pdf/2407.15811",1.46e+22,"256 TPU v4 chips for 64x64, for 4 days
128 TPU v4 chips for 64->256, for 2 days
128 TPU v4 chips for 256->1024, for 2 days

256 TPUs * 275 teraFLOPS/TPU * 4 days + 2 * (128 TPUs * 275 teraFLOPS/TPU * 2 days) * 40% utilization = 1.46e+22 FLOP","LAION-400M,Unspecified unreleased",860000000.0,"[IMAGE-TEXT PAIRS]
""We train on a combination of internal datasets, with ≈ 460M
image-text pairs, and the publicly available Laion dataset [61], with ≈ 400M image-text pairs.""",Likely,https://arxiv.org/abs/2205.11487,Photorealistic Text-to-Image Diffusion Models with Deep Language Understanding,4580.0,"Chitwan Saharia, William Chan, Saurabh Saxena, Lala Li, Jay Whang, Emily Denton, Seyed Kamyar Seyed Ghasemipour, Burcu Karagol Ayan, S. Sara Mahdavi, Rapha Gontijo Lopes, Tim Salimans, Jonathan Ho, David J Fleet, Mohammad Norouzi","We present Imagen, a text-to-image diffusion model with an unprecedented degree of photorealism and a deep level of language understanding. Imagen builds on the power of large transformer language models in understanding text and hinges on the strength of diffusion models in high-fidelity image generation. Our key discovery is that generic large language models (e.g. T5), pretrained on text-only corpora, are surprisingly effective at encoding text for image synthesis: increasing the size of the language model in Imagen boosts both sample fidelity and image-text alignment much more than increasing the size of the image diffusion model. Imagen achieves a new state-of-the-art FID score of 7.27 on the COCO dataset, without ever training on COCO, and human raters find Imagen samples to be on par with the COCO data itself in image-text alignment. To assess text-to-image models in greater depth, we introduce DrawBench, a comprehensive and challenging benchmark for text-to-image models. With DrawBench, we compare Imagen with recent methods including VQ-GAN+CLIP, Latent Diffusion Models, and DALL-E 2, and find that human raters prefer Imagen over other models in side-by-side comparisons, both in terms of sample quality and image-text alignment.",Industry,United States of America,"Significant use,SOTA improvement,Highly cited",,,96.0,4 days,Google TPU v4,256.0,,7915.823806150154,,87371.9285545078,,,,,,API access,Unreleased,,,,
SimCSE,"Princeton University,Tsinghua University",2022-05-18,Language,Semantic embedding,,,,,,,,Unknown,https://arxiv.org/abs/2104.08821,SimCSE: Simple Contrastive Learning of Sentence Embeddings,2795.0,"Tianyu Gao, Xingcheng Yao, Danqi Chen","This paper presents SimCSE, a simple contrastive learning framework that greatly advances state-of-the-art sentence embeddings. We first describe an unsupervised approach, which takes an input sentence and predicts itself in a contrastive objective, with only standard dropout used as noise. This simple method works surprisingly well, performing on par with previous supervised counterparts. We find that dropout acts as minimal data augmentation, and removing it leads to a representation collapse. Then, we propose a supervised approach, which incorporates annotated pairs from natural language inference datasets into our contrastive learning framework by using ""entailment"" pairs as positives and ""contradiction"" pairs as hard negatives. We evaluate SimCSE on standard semantic textual similarity (STS) tasks, and our unsupervised and supervised models using BERT base achieve an average of 76.3% and 81.6% Spearman's correlation respectively, a 4.2% and 2.2% improvement compared to the previous best results. We also show -- both theoretically and empirically -- that the contrastive learning objective regularizes pre-trained embeddings' anisotropic space to be more uniform, and it better aligns positive pairs when supervised signals are available.","Academia,Academia","United States of America,China","Highly cited,SOTA improvement",,3.0,,,,,,,,,RoBERTa Large,,,,,Open weights (unrestricted),Open source,Open source,"Unclear lisense: https://huggingface.co/princeton-nlp/sup-simcse-roberta-large

MIT license: 
https://github.com/princeton-nlp/SimCSE?tab=readme-ov-file",FP16,
Gato,DeepMind,2022-05-12,"Multimodal,Robotics,Games,Language","Atari,Image captioning,Chat,Robotic manipulation",1180000000.0,"""This section focuses on in-simulation evaluation.
Figure 10 compares the full 1.18B parameter Gato"" p.10",4.02e+21,"256 (16x16x) TPUv3 chips x 123e12 FLOPS/chip x 4 days x 86400 seconds/day * 0.4 utilization = 4.35e21 FLOPs

Similar value by 6NC:
6 * 524288000000 * 1.18B = 3.71e21

Using geometric mean:
sqrt(4.35e21 * 3.71e21) = 4.02e21",,524288000000.0,,Confident,https://arxiv.org/abs/2205.06175,A Generalist Agent,668.0,"Scott Reed, Konrad Żołna, Emilio Parisotto, Sergio Gómez Colmenarejo, Alexander Novikov, Gabriel Barth-Maron, Mai Giménez, Yury Sulsky, Jackie Kay, Jost Tobias Springenberg, Tom Eccles, Jake Bruce, Ali Razavi, Ashley Edwards, Nicolas Heess, Yutian Chen, Raia Hadsell, Oriol Vinyals, Mahyar Bordbar, Nando de Freitas","Inspired by progress in large-scale language modeling, we apply a similar approach towards building a single generalist agent beyond the realm of text outputs. The agent, which we refer to as Gato, works as a multi-modal, multi-task, multi-embodiment generalist policy. The same network with the same weights can play Atari, caption images, chat, stack blocks with a real robot arm and much more, deciding based on its context whether to output text, joint torques, button presses, or other tokens. In this report we describe the model and the data, and document the current capabilities of Gato.",Industry,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,"SOTA at Meta-World MT50 tasks (96.6%) page 14, section 5.5",,96.0,4 days,Google TPU v3,256.0,,3523.0649800752253,,113097.25585951032,,,,,,Unreleased,Unreleased,,,,
UL2,"Google Research,Google Brain",2022-05-10,Language,Language modeling/generation,20000000000.0,Taken from Directory of LLMs,1.2e+23,"Trained on 1T tokens
20B * 1T * 6 = 1.2e23 

Second source: Section 5.1 says model was trained on 512 TPUv4 chips, and took slightly over 1 month
512 * 2.75e14 * 31 * 24 * 3600 * 0.3 = 1.13e23",C4,1000000000000.0,1T tokens,Confident,https://arxiv.org/abs/2205.05131v1,Unifying Language Learning Paradigms,253.0,"Yi Tay, Mostafa Dehghani, Vinh Q. Tran, Xavier Garcia, Dara Bahri, Tal Schuster, Huaixiu Steven Zheng, Neil Houlsby, Donald Metzler","Existing pre-trained models are generally geared towards a particular class of problems. To date, there seems to be still no consensus on what the right architecture and pre-training setup should be. This paper presents a unified framework for pre-training models that are universally effective across datasets and setups. We begin by disentangling architectural archetypes with pre-training objectives -- two concepts that are commonly conflated. Next, we present a generalized and unified perspective for self-supervision in NLP and show how different pre-training objectives can be cast as one another and how interpolating between different objectives can be effective. We then propose Mixture-of-Denoisers (MoD), a pre-training objective that combines diverse pre-training paradigms together. We furthermore introduce a notion of mode switching, wherein downstream fine-tuning is associated with specific pre-training schemes. We conduct extensive ablative experiments to compare multiple pre-training objectives and find that our method pushes the Pareto-frontier by outperforming T5 and/or GPT-like models across multiple diverse setups. Finally, by scaling our model up to 20B parameters, we achieve SOTA performance on 50 well-established supervised NLP tasks ranging from language generation (with automated and human evaluation), language understanding, text classification, question answering, commonsense reasoning, long text reasoning, structured knowledge grounding and information retrieval. Our model also achieve strong results at in-context learning, outperforming 175B GPT-3 on zero-shot SuperGLUE and tripling the performance of T5-XXL on one-shot summarization. We release Flax-based T5X model checkpoints for the 20B model at \url{this https URL}.","Industry,Industry","Multinational,United States of America,Canada,Switzerland,United States of America",SOTA improvement,"""by scaling our model up to 20B parameters, we achieve SOTA
performance on 50 well-established supervised NLP tasks""",,744.0,"around 31 days from 'Pre-training took approximately slight more than one month for about 1 trillion
tokens.' from section 5.1
so around 31*24 = 744
",Google TPU v4,512.0,0.2992518703,126785.76203549476,,174794.45309829456,,,,65536.0,"""We pre-train all models for 500K steps with a batch size of 128 and a sequence length of 512 inputs and 512 targets using the C4 corpus. The total approximate tokens seen during pre-training is approximately 32 billion tokens.""

500k*128*512 ~= 32B
128*512=65,536",Open weights (unrestricted),Unreleased,,"Apache 2.0

https://huggingface.co/google/ul2",BF16,
DeBERTaV3large + KEAR,Microsoft,2022-05-04,Language,"Question answering,Language modeling/generation",418000000.0,"DeBERTaV3-large had 418M params, per Table 2",,this is a fine-tuned version of DeBERTaV3-large,,,,Confident,https://arxiv.org/abs/2112.03254v3,Human Parity on CommonsenseQA: Augmenting Self-Attention with External Attention,50.0,"Yichong Xu, Chenguang Zhu, Shuohang Wang, Siqi Sun, Hao Cheng, Xiaodong Liu, Jianfeng Gao, Pengcheng He, Michael Zeng, Xuedong Huang","Most of today's AI systems focus on using self-attention mechanisms and transformer architectures on large amounts of diverse data to achieve impressive performance gains. In this paper, we propose to augment the transformer architecture with an external attention mechanism to bring external knowledge and context to bear. By integrating external information into the prediction process, we hope to reduce the need for ever-larger models and increase the democratization of AI systems. We find that the proposed external attention mechanism can significantly improve the performance of existing AI systems, allowing practitioners to easily customize foundation AI models to many diverse downstream applications. In particular, we focus on the task of Commonsense Reasoning, demonstrating that the proposed external attention mechanism can augment existing transformer models and significantly improve the model's reasoning capabilities. The proposed system, Knowledgeable External Attention for commonsense Reasoning (KEAR), reaches human parity on the open CommonsenseQA research benchmark with an accuracy of 89.4\% in comparison to the human accuracy of 88.9\%.",Industry,"United States of America,Multinational,India,Belgium",SOTA improvement,"""The proposed system, Knowledgeable External Attention for commonsense Reasoning (KEAR), reaches human parity on the open CommonsenseQA research benchmark with an accuracy of 89.4\% in comparison to the human accuracy of 88.9\%.""

SOTA per https://paperswithcode.com/sota/common-sense-reasoning-on-commonsenseqa",10.0,,,,,,,,,DeBERTaV3large,,,,,Unreleased,Open source,,"no attributed license 
https://github.com/microsoft/KEAR?tab=readme-ov-file",,
OPT-175B,Meta AI,2022-05-02,Language,"Language modeling,Chat,Language modeling/generation,Question answering",175000000000.0,"""In line with Meta AI’s commitment to open science, we are sharing Open Pretrained Transformer (OPT-175B), a language model with 175 billion parameters trained on publicly available data sets""",4.3e+23,"https://github.com/facebookresearch/metaseq/blob/main/projects/OPT/chronicles/final_update.md

""As of yesterday, at 12:46pm PST on January 6, our 175B model finally completed its training run on 300B tokens. This required ~4.30E+23 FLOPs of compute""","The Pile,BookCorpus (BooksCorpus, Toronto Book Corpus),CC-Stories,Pushshift Reddit",180000000000.0,"""The training data contains 180B tokens corresponding to 800 GB of data""

1 token ~ 0.75 words",Confident,https://arxiv.org/abs/2205.01068,OPT: Open Pre-trained Transformer Language Models,2932.0,"Susan Zhang∗ , Stephen Roller∗ , Naman Goyal∗ , Mikel Artetxe, Moya Chen, Shuohui Chen, Christopher Dewan, Mona Diab, Xian Li, Xi Victoria Lin, Todor Mihaylov, Myle Ott† , Sam Shleifer† , Kurt Shuster, Daniel Simig, Punit Singh Koura, Anjali Sridhar, Tianlu Wang, Luke Zettlemoyer","Large language models, which are often trained for hundreds of thousands of compute days, have shown remarkable capabilities for zero- and few-shot learning. Given their computational cost, these models are difficult to replicate without significant capital. For the few that are available through APIs, no access is granted to the full model weights, making them difficult to study. We present Open Pre-trained Transformers (OPT), a suite of decoder-only pre-trained transformers ranging from 125M to 175B parameters, which we aim to fully and responsibly share with interested researchers. We show that OPT-175B is comparable to GPT-3,1 while requiring only 1/7th the carbon footprint to develop. We are also releasing our logbook detailing the infrastructure challenges we faced, along with code for experimenting with all of the released models",Industry,United States of America,"Significant use,Highly cited",https://ai.meta.com/blog/opt-175b-large-language-model-applications/,1.6667,793.5,"4.3*10^23 FLOP / (147 TFLOPS) = 813000 A100-hours
https://www.wolframalpha.com/input?i=4.3*10%5E23+FLOP+%2F+%28147+TFLOPS%29

""As of yesterday, at 12:46pm PST on January 6, our 175B model finally completed its training run on 300B tokens. This required ~4.30E+23 FLOPs of compute, or roughly ~33 days of continuous training on 1024 80GB A100s (assuming no hardware issues, no numerical instabilities, etc.).""",NVIDIA A100 SXM4 80 GB,1024.0,0.47115,733634.637,,822708.6888139298,,,,2000000.0,Table 1,Open weights (non-commercial),Open source,Open source,"non-commercial for weights:
https://github.com/facebookresearch/metaseq/blob/main/projects/OPT/MODEL_LICENSE.md

training code (MIT) https://github.com/facebookresearch/metaseq/blob/main/docs/training.md ",FP16,True
Flamingo,DeepMind,2022-04-29,"Multimodal,Vision,Language,Video","Visual question answering,Image captioning",80000000000.0,"""We obtain three models, Flamingo-3B, Flamingo-9B and Flamingo-80B""

"" The Flamingo-80B model builds on top of the frozen Chinchilla 70B language model [42]. Starting from the very first layer and before every seventh transformer blocks, we add a GATED XATTN-DENSE layer attending to the visual inputs; this accounts for 10B additional learned parameters. For simplicity, we refer to this model as simply Flamingo throughout the paper""",2.18972000000001e+23,"1536 TPU v4 chips for 15 days. Assuming 40% utilization:
C = 1536 TPU * 275*10^12 FLOP/s/TPU * 15 day * 86400 s/day * 0.40 = 2.2*10^23 FLOP

""All training and evaluation was performed on TPUv4 instances. The largest model containing 80 billion parameters is trained on QUSV chips for 15 days and sharded across 16 devices.""

""All trained parameters and optimizer accumulators are stored and updated in float32; all activations and gradients are computed in bfloat16 after downcasting of parameters from float32 to bfloat16""","MultiModal MassiveWeb,LTIP,VTP,ALIGN",,"Flamingo was trained on a mixture of web-scraped datasets:
43M pages of text with interleaved images (MultiModal MassiveWeb dataset)
312M image-text pairs (LTIP dataset)
27M video-text pairs (VTP dataset)
1.8B image-alt text pairs (ALIGN dataset)

Training dataset size is at least 2.1 billion.",Confident,https://arxiv.org/abs/2204.14198,Flamingo: a Visual Language Model for Few-Shot Learning,2473.0,"Jean-Baptiste Alayrac, Jeff Donahue, Pauline Luc, Antoine Miech, Iain Barr, Yana Hasson, Karel Lenc, Arthur Mensch, Katie Millican, Malcolm Reynolds, Roman Ring, Eliza Rutherford, Serkan Cabi, Tengda Han, Zhitao Gong, Sina Samangooei, Marianne Monteiro, Jacob Menick, Sebastian Borgeaud, Andrew Brock, Aida Nematzadeh, Sahand Sharifzadeh, Mikolaj Binkowski, Ricardo Barreira, Oriol Vinyals, Andrew Zisserman, Karen Simonyan","Building models that can be rapidly adapted to novel tasks using only a handful of annotated examples is an open challenge for multimodal machine learning research. We introduce Flamingo, a family of Visual Language Models (VLM) with this ability. We propose key architectural innovations to: (i) bridge powerful pretrained vision-only and language-only models, (ii) handle sequences of arbitrarily interleaved visual and textual data, and (iii) seamlessly ingest images or videos as inputs. Thanks to their flexibility, Flamingo models can be trained on large-scale multimodal web corpora containing arbitrarily interleaved text and images, which is key to endow them with in-context few-shot learning capabilities. We perform a thorough evaluation of our models, exploring and measuring their ability to rapidly adapt to a variety of image and video tasks. These include open-ended tasks such as visual question-answering, where the model is prompted with a question which it has to answer; captioning tasks, which evaluate the ability to describe a scene or an event; and close-ended tasks such as multiple-choice visual question-answering. For tasks lying anywhere on this spectrum, a single Flamingo model can achieve a new state of the art with few-shot learning, simply by prompting the model with task-specific examples. On numerous benchmarks, Flamingo outperforms models fine-tuned on thousands of times more task-specific data.",Industry,United Kingdom of Great Britain and Northern Ireland,"Highly cited,SOTA improvement","""For tasks lying anywhere on this spectrum, a single Flamingo model can achieve a new state of the art with few-shot learning, simply by prompting the model with task-specific examples. On numerous benchmarks, Flamingo outperforms models fine-tuned on thousands of times more task-specific data.""",,360.0,1536 TPU v4 chips for 15 days,Google TPU v4,1536.0,,183423.16330597224,,524511.829594388,Chinchilla,,,,,Unreleased,Unreleased,,,BF16,
Sparse all-MLP,Meta AI,2022-04-14,Language,Language modeling,9410000000.0,"Table 2: ""In Section 4.4, we run our large model (9.41B parameters)""",5.32224e+20,"112 hours on 32 V100 GPUs
assumed 0.33 util rate

112 hours *3600 seconds / hour *0.33 utilization *32 gpus *125000000000000 FLOPs=532224000000000000000
","RoBERTa dataset,CC100",100000000000.0,100B tokens (Table 2) so 75B words.,Confident,https://arxiv.org/abs/2203.06850,Efficient Language Modeling with Sparse all-MLP,11.0,"Ping Yu, Mikel Artexte, Myle Ott, Sam Shleifer, Hongyu Gong, Ves Stoyanov, Xian Li","All-MLP architectures have attracted increasing interest as an alternative to attention-based models. In NLP, recent work like gMLP shows that all-MLPs can match Transformers in language modeling, but still lag behind in downstream tasks. In this work, we analyze the limitations of MLPs in expressiveness, and propose sparsely activated MLPs with mixture-of-experts (MoEs) in both feature and input (token) dimensions. Such sparse all-MLPs significantly increase model capacity and expressiveness while keeping the compute constant. We address critical challenges in incorporating conditional computation with two routing strategies. The proposed sparse all-MLP improves language modeling perplexity and obtains up to 2× improvement in training efficiency compared to both Transformer-based MoEs (GShard, Switch Transformer, Base Layers and HASH Layers) as well as dense Transformers and all-MLPs. Finally, we evaluate its zero-shot in-context learning performance on six downstream tasks, and find that it surpasses Transformer-based MoEs and dense Transformers.",Industry,United States of America,SOTA improvement,"Abstract:
""Our model also outperforms
the RoBERTa-Large model on several English tasks of the GLUE benchmark by 0.3% on average while handling 99 more languages.""",,112.0,,NVIDIA V100,,,,,,,,,,,Unreleased,Unreleased,,,,
Stable Diffusion (LDM-KL-8-G),"Runway,Ludwig Maximilian University",2022-04-13,Image generation,"Image generation,Text-to-image",1450000000.0,See Table 2,5e+22,"""I get 5e22 FLOP. 150k hours on A100 [1] gives 150*10^3 hours * 3600 seconds/hour * 3.12E+14 peak performance of A100 * 0.33 utilisation = 5e22  FLOP""

[1] https://twitter.com/EMostaque/status/1563870674111832066",LAION-400M,400000000.0,,Confident,https://arxiv.org/abs/2112.10752,High-Resolution Image Synthesis with Latent Diffusion Models,10764.0,"Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, Björn Ommer","By decomposing the image formation process into a sequential application of denoising autoencoders, diffusion models (DMs) achieve state-of-the-art synthesis results on image data and beyond. Additionally, their formulation allows for a guiding mechanism to control the image generation process without retraining. However, since these models typically operate directly in pixel space, optimization of powerful DMs often consumes hundreds of GPU days and inference is expensive due to sequential evaluations. To enable DM training on limited computational resources while retaining their quality and flexibility, we apply them in the latent space of powerful pretrained autoencoders. In contrast to previous work, training diffusion models on such a representation allows for the first time to reach a near-optimal point between complexity reduction and detail preservation, greatly boosting visual fidelity. By introducing cross-attention layers into the model architecture, we turn diffusion models into powerful and flexible generators for general conditioning inputs such as text or bounding boxes and high-resolution synthesis becomes possible in a convolutional manner. Our latent diffusion models (LDMs) achieve a new state of the art for image inpainting and highly competitive performance on various tasks, including unconditional image generation, semantic scene synthesis, and super-resolution, while significantly reducing computational requirements compared to pixel-based DMs. Code is available at this https URL .","Industry,Academia","United States of America,Germany","Significant use,Highly cited",,,585.9375,"total chip-hours divided by number of GPUs
150k/256",NVIDIA A100,256.0,,111248.21698072633,,205764.21634205984,,,,,,Open weights (restricted use),Open source,Open source,"OpenRAIL license for weights
https://huggingface.co/CompVis/stable-diffusion-v-1-4-original

""The Responsible AI License allows users to take advantage of the model in a wide range of settings (including free use and redistribution) as long as they respect the specific use case restrictions outlined, which correspond to model applications the licensor deems ill-suited for the model or are likely to cause harm""

MIT license for code
https://github.com/CompVis/stable-diffusion",,
BERT-RBP,Waseda University,2022-04-07,Biology,"Proteins,Protein interaction prediction",110000000.0,"Base model is BERT base (110M parameters), pre-trained on human reference genome (DNABert: https://academic.oup.com/bioinformatics/article/37/15/2112/6128680)",1.4e+20,"See DNABert entry:

""Since the pre-training of DNABERT model is resource-intensive (about 25 days on 8 NVIDIA 2080Ti GPUs)""

Assuming FP16 and 30% utilization

Calculation = (25 * 24 *3600) s * 2.7e13 FLOP/s per GPU * 8 GPUs * 0.3 utilization = 1.4e20 FLOP",RBPSuite,78000001.00000003,"RBPs: 154
Sequences per RBP: 15,000
Total sequences = 154 × 15,000 = 2,310,000
Tokens per sequence = 34
Total tokens = 2,310,000 × 34 = 78,540,000
Final estimate: 7.8 × 10⁷ tokens",Confident,https://academic.oup.com/bioinformaticsadvances/article/2/1/vbac023/6564689,Prediction of RNA–protein interactions using a nucleotide language model,36.0,"Keisuke Yamada, Michiaki Hamada","Motivation
The accumulation of sequencing data has enabled researchers to predict the interactions between RNA sequences and RNA-binding proteins (RBPs) using novel machine learning techniques. However, existing models are often difficult to interpret and require additional information to sequences. Bidirectional encoder representations from transformer (BERT) is a language-based deep learning model that is highly interpretable. Therefore, a model based on BERT architecture can potentially overcome such limitations.

Results
Here, we propose BERT-RBP as a model to predict RNA–RBP interactions by adapting the BERT architecture pretrained on a human reference genome. Our model outperformed state-of-the-art prediction models using the eCLIP-seq data of 154 RBPs. The detailed analysis further revealed that BERT-RBP could recognize both the transcript region type and RNA secondary structure only based on sequence information. Overall, the results provide insights into the fine-tuning mechanism of BERT in biological contexts and provide evidence of the applicability of the model to other RNA-related problems.",Academia,Japan,SOTA improvement,"""Our model outperformed state-of-the-art prediction models using the eCLIP-seq data of 154 RBPs"" [Abstract] - SOTA improvement on a very specific task",3.0,,,,,,,,,DNABERT,2.2e+16,"""The models were trained on four NVIDIA Tesla V100 GPUs (128
GB memory). The training of one RBP model using 19 200 samples
took <10 min.""

Calculation assuming FP16 and 30% utlization and NVIDIA Tesla V100 SMX2 model: 
10 min * 60 sec/min * 3.1e13 FLOP/s * 4 GPU * 0.3 utilization = 2.2e16",,,Open weights (non-commercial),Open (non-commercial),Open access (non-commercial),"No clear license: https://github.com/kkyamada/bert-rbp

train script: https://github.com/kkyamada/bert-rbp/blob/master/examples/run_finetune.py 

data also doesn't have a clear license: http://www.csbio.sjtu.edu.cn/bioinf/RBPsuite/dataset_new.html",,
DALL·E 2,OpenAI,2022-04-06,Image generation,"Text-to-image,Image generation",3500000000.0,"""Our decoder architecture is the 3.5 billion parameter GLIDE model""",3.3695784e+23,"Decoder architecture is similar to Imagen (1.46E+22), but trained on 1.6e9 datapoints (Table 3) rather than Imagen's 5.1e9 datapoints.

DALL-E 2 uses two models as priors. I estimate the prior model's FLOP as 6*N*D = 6 * 1e9 * 4096 * 1e6 = 2.5e19 FLOP. However, this seems low compared to CLIP.

So it may be possible to estimate DALL-E 2's compute by analogy to Imagen, but there is a lot of uncertainty and more research would be needed.

here (https://arxiv.org/pdf/2407.15811) they claim the DALL-E.2 model was trained on the equivalent of 5208.3 days on 8*A100 GPUs:

312000000000000 FLOP / sec / GPU * 8 GPUs * 5208.3 days * 24 hours / day * 3600 sec / hour * 0.3 [assumed utilization] = 3.3695784e+23 FLOP","CLIP,DALL-E",650000000.0,"""When training the encoder, we sample from the CLIP [39] and DALL-E [40] datasets (approximately 650M images in total) with equal probability""",Speculative,https://cdn.openai.com/papers/dall-e-2.pdf,Hierarchical Text-Conditional Image Generation with CLIP Latents,5470.0,"Aditya Ramesh, Prafulla Dhariwal, Alex Nichol, Casey Chu, Mark Chen","Contrastive models like CLIP have been shown to learn robust representations of images that capture both semantics and style. To leverage these representations for image generation, we propose a two-stage model: a prior that generates a CLIP image embedding given a text caption, and a decoder that generates an image conditioned on the image embedding. We show that explicitly generating image representations improves image diversity with minimal loss in photorealism and caption similarity. Our decoders conditioned on image representations can also produce variations of an image that preserve both its semantics and style, while varying the non-essential details absent from the image representation. Moreover, the joint embedding space of CLIP enables language-guided image manipulations in a zero-shot fashion. We use diffusion models for the decoder and experiment with both autoregressive and diffusion models for the prior, finding that the latter
are computationally more efficient and produce higher-quality samples.",Industry,United States of America,"Highly cited,SOTA improvement",,,,,,,,,,,,,,,,API access,Unreleased,,,,
PaLM (540B),Google Research,2022-04-04,Language,"Language modeling,Code generation,Translation",540350000000.0,"""To further our understanding of the impact of scale on few-shot learning, we trained a 540-billion parameter, densely activated, Transformer language model, which we call Pathways Language Model (PaLM).""",2.5272e+24,"See Table 20.

6144 TPUv4 for 1200 hours + 3072 TPUv4 for 336 hours.
Equivalent to 6144 TPUv4 for 1368 hours.

46.2% model FLOPs utilization

""The 540B-parameter PaLM model sustained a remarkable 57.8% of the peak hardware floating point performance over 50 days while training on TPU v4 supercomputers. "" https://cloud.google.com/blog/topics/systems/tpu-v4-enables-performance-energy-and-co2e-efficiency-gains","Wikipedia,GLaM dataset,LaMBDA dataset,GitHub",585000000000.0,"""The PaLM pretraining dataset consists of a high-quality corpus of 780 billion tokens that represent a wide range of natural language use cases.""

1 token ~ 0.75 words",Confident,https://arxiv.org/abs/2204.02311,PaLM: Scaling Language Modeling with Pathways,5064.0,"Aakanksha Chowdhery, Sharan Narang, Jacob Devlin, Maarten Bosma, Gaurav Mishra, Adam Roberts, Paul Barham, Hyung Won Chung, Charles Sutton, Sebastian Gehrmann, Parker Schuh, Kensen Shi, Sasha Tsvyashchenko, Joshua Maynez, Abhishek Rao, Parker Barnes, Yi Tay, Noam Shazeer, Vinodkumar Prabhakaran, Emily Reif, Nan Du, Ben Hutchinson, Reiner Pope, James Bradbury, Jacob Austin, Michael Isard, Guy Gur-Ari, Pengcheng Yin, Toju Duke, Anselm Levskaya, Sanjay Ghemawat, Sunipa Dev,, Henryk Michalewski, Xavier Garcia, Vedant Misra, Kevin Robinson, Liam Fedus, Denny Zhou, Daphne Ippolito, David Luan, Hyeontaek Lim, Barret Zoph, Alexander Spiridonov, Ryan Sepassi, David Dohan, Shivani Agrawal, Mark Omernick, Andrew M. Dai, Thanumalayan Sankaranarayana Pillai, Marie Pellat, Aitor Lewkowycz, Erica Moreira, Rewon Child, Oleksandr Polozov, Katherine Lee, Zongwei Zhou, Xuezhi Wang, Brennan Saeta ,Mark Diaz, Orhan Firat, Michele Catasta, Jason Wei, Kathy Meier-Hellstern, Douglas Eck, Jeff Dean, Slav Petrov, Noah Fiedel","Large language models have been shown to achieve remarkable performance across a variety of natural language tasks using few-shot learning, which drastically reduces the number of task-specific training examples needed to adapt the model to a particular application. To further our understanding of the impact of scale on few-shot learning, we trained a 540-billion parameter, densely activated, Transformer language model, which we call Pathways Language Model PaLM. We trained PaLM on 6144 TPU v4 chips using Pathways, a new ML system which enables highly efficient training across multiple TPU Pods. We demonstrate continued benefits of scaling by achieving state-of-the-art few-shot learning results on hundreds of language understanding and generation benchmarks. On a number of these tasks, PaLM 540B achieves breakthrough performance, outperforming the finetuned state-of-the-art on a suite of multi-step reasoning tasks, and outperforming average human performance on the recently released BIG-bench benchmark. A significant number of BIG-bench tasks showed discontinuous improvements from model scale, meaning that performance steeply increased as we scaled to our largest model. PaLM also has strong capabilities in multilingual tasks and source code generation, which we demonstrate on a wide array of benchmarks. We additionally provide a comprehensive analysis on bias and toxicity, and study the extent of training data memorization with respect to model scale. Finally, we discuss the ethical considerations related to large language models and discuss potential mitigation strategies.",Industry,"Multinational,United States of America,Canada,Switzerland","Highly cited,SOTA improvement,Training cost","Demonstrates continued benefits of scaling, as well as discontinuous improvements in performance",1.0,1536.0,"6144 TPUv4 for 1200 hours + 3072 TPUv4 for 336 hours.

Equivalent to 6144 TPUv4 for 1368 hours.",Google TPU v4,6144.0,0.462,2945949.763287097,"Training compute and utilization rate exclude rematerialization FLOP, but cost should account for rematerialization.",2099215.6984531507,,,,4000000.0,"""For the largest model, we use batch size 512 (1M tokens) until step 50k, then double it to 1024 (2M tokens) until step 115k, and finally double again it to 2048 (4M tokens) until training is complete at step 255k""",Unreleased,Unreleased,,,,True
Chinchilla,DeepMind,2022-03-29,Language,Language modeling,70000000000.0,"""We test this hypothesis by training a predicted compute-optimal model, \chinchilla, that uses the same compute budget as \gopher but with 70B parameters and 4× more more data. \chinchilla uniformly and significantly outperforms \Gopher (280B), GPT-3 (175B), Jurassic-1 (178B), and Megatron-Turing NLG (530B) on a large range of downstream evaluation tasks.""",5.76e+23,"""Both Chinchilla and Gopher have been trained for the same number of FLOPs but differ in the size of the model and the number of training tokens.""

We see the number of flops in table 3","MassiveWeb,C4",1050000000000.0,"Table 1 shows Chinchilla was training on 1.4 trillion tokens

1 token ~ 0.75 words",Confident,https://arxiv.org/abs/2203.15556,Training Compute-Optimal Large Language Models,1486.0,"Jordan Hoffmann, Sebastian Borgeaud, Arthur Mensch, Elena Buchatskaya, Trevor Cai, Eliza Rutherford, Diego de Las Casas, Lisa Anne Hendricks, Johannes Welbl, Aidan Clark, Tom Hennigan, Eric Noland, Katie Millican, George van den Driessche, Bogdan Damoc, Aurelia Guy, Simon Osindero, Karen Simonyan, Erich Elsen, Jack W. Rae, Oriol Vinyals, Laurent Sifre","We investigate the optimal model size and number of tokens for training a transformer language model under a given compute budget. We find that current large language models are significantly undertrained, a consequence of the recent focus on scaling language models whilst keeping the amount of training data constant. By training over \nummodels language models ranging from 70 million to over 16 billion parameters on 5 to 500 billion tokens, we find that for compute-optimal training, the model size and the number of training tokens should be scaled equally: for every doubling of model size the number of training tokens should also be doubled. We test this hypothesis by training a predicted compute-optimal model, \chinchilla, that uses the same compute budget as \gopher but with 70B parameters and 4× more more data. \chinchilla uniformly and significantly outperforms \Gopher (280B), GPT-3 (175B), Jurassic-1 (178B), and Megatron-Turing NLG (530B) on a large range of downstream evaluation tasks. This also means that \chinchilla uses substantially less compute for fine-tuning and inference, greatly facilitating downstream usage. As a highlight, \chinchilla reaches a state-of-the-art average accuracy of 67.5\% on the MMLU benchmark, greater than a 7\% improvement over \gopher.",Industry,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,"Proposes new scaling law, with good empirical results",1.0,,,"Google TPU v4,Google TPU v3",,,,,,,,,3000000.0,"Table 1. ""1.5M → 3M""",Unreleased,Unreleased,,,BF16,True
"Segatron-XL large, M=384 + HCP","Microsoft Research,University of Waterloo",2022-03-21,Language,Language modeling,257000000.0,"257M
(Table 1)

18 layers, 16 heads, hidden size
1024 batch size 128.",2.65e+19,6 FLOP / token / parameter * 257000000 parameters * 384 tokens/batch × 128 [batch size] * 350000 steps = 2.6527334e+19 FLOP,WikiText-103,103000000.0,"103000000 tokens - size of wikitext 103

Training steps: 350,000 steps 
Sequence length: 384 tokens
Batch size: 128
Tokens per batch = 384 tokens/batch × 128 = 49,152 tokens/batch
Total tokens = 49,152 tokens/batch × 350,000 steps = 17.2 billion tokens 

17200000000/103000000 = 167 epochs",Confident,https://arxiv.org/abs/2203.10692,Better Language Model with Hypernym Class Prediction,14.0,"He Bai, Tong Wang, Alessandro Sordoni, Peng Shi","Class-based language models (LMs) have been long devised to address context sparsity in n-gram LMs. In this study, we revisit this approach in the context of neural LMs. We hypothesize that class-based prediction leads to an implicit context aggregation for similar words and thus can improve generalization for rare words. We map words that have a common WordNet hypernym to the same class and train large neural LMs by gradually annealing from predicting the class to token prediction during training. Empirically, this curriculum learning strategy consistently improves perplexity over various large, highly-performant state-of-the-art Transformer-based models on two datasets, WikiText-103 and Arxiv. Our analysis shows that the performance improvement is achieved without sacrificing performance on rare words. Finally, we document other attempts that failed to yield empirical gains, and discuss future directions for the adoption of class-based LMs on a larger scale.","Industry,Academia","United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada",SOTA improvement,"""Empirically, this curriculum learning strategy consistently improves perplexity over various large, highly-performant state-of-the-art Transformer-based models on two datasets, WikiText-103 and ARXIV""",167.02,,,,,,,,,,,,,,Unreleased,Open (non-commercial),Open access (non-commercial),"code, no license
https://github.com/richardbaihe/robustlm",,
ViT-G (model soup),"University of Washington,Columbia University,Google,Meta AI,Tel Aviv University",2022-03-10,Vision,Image classification,1843000000.0,This is from the original ViT-G paper,3.4e+21,"This is a fine-tuned version of ViT-G, which required 3.4e21 to train per PCD/Akronomicon.

Fine-tuning compute is likely minor in comparision:
""Models are fine-tuned at a batch size of 512 for either 10,000 or 20,000 steps (approximately 4 or 8 epochs)... all models are fine-tuned at 518 × 518 resolution""
At 20k steps, we have (518^2) * 512 * 20k = 2.75e12 pixels seen in fine-tuning, compared to (224^2) * 32768 * 5M = 8.22e15 in pre-training.",,,,Confident,https://arxiv.org/abs/2203.05482v3,Model soups: averaging weights of multiple fine-tuned models improves accuracy without increasing inference time,703.0,"Mitchell Wortsman, Gabriel Ilharco, Samir Yitzhak Gadre, Rebecca Roelofs, Raphael Gontijo-Lopes, Ari S. Morcos, Hongseok Namkoong, Ali Farhadi, Yair Carmon, Simon Kornblith, Ludwig Schmidt","The conventional recipe for maximizing model accuracy is to (1) train multiple models with various hyperparameters and (2) pick the individual model which performs best on a held-out validation set, discarding the remainder. In this paper, we revisit the second step of this procedure in the context of fine-tuning large pre-trained models, where fine-tuned models often appear to lie in a single low error basin. We show that averaging the weights of multiple models fine-tuned with different hyperparameter configurations often improves accuracy and robustness. Unlike a conventional ensemble, we may average many models without incurring any additional inference or memory costs -- we call the results ""model soups."" When fine-tuning large pre-trained models such as CLIP, ALIGN, and a ViT-G pre-trained on JFT, our soup recipe provides significant improvements over the best model in a hyperparameter sweep on ImageNet. The resulting ViT-G model, which attains 90.94% top-1 accuracy on ImageNet, achieved a new state of the art. Furthermore, we show that the model soup approach extends to multiple image classification and natural language processing tasks, improves out-of-distribution performance, and improves zero-shot performance on new downstream tasks. Finally, we analytically relate the performance similarity of weight-averaging and logit-ensembling to flatness of the loss and confidence of the predictions, and validate this relation empirically. Code is available at this https URL.","Academia,Academia,Industry,Industry,Academia","United States of America,United States of America,United States of America,United States of America,Israel",SOTA improvement,"""When fine-tuning large pre-trained models such as CLIP, ALIGN, and a ViT-G pre-trained on JFT, our soup recipe provides significant improvements over the best model in a hyperparameter sweep on ImageNet. The resulting ViT-G model, which attains 90.94% top-1 accuracy on ImageNet, achieved a new state of the art.""",8.0,,,,,,,,,,,,,,Open weights (non-commercial),Unreleased,Open access (non-commercial),"no license
code here, may just be inference code: https://github.com/mlfoundations/model-soups ",,
MegaSyn,Collaborations Pharmaceuticals,2022-03-07,Medicine,Drug discovery,,"model details here: https://chemrxiv.org/engage/chemrxiv/article-details/61551803d1fc335b7cf8fd45

""The variational autoencoder utilizes an encoder-decoder architecture to map chemical space into a latent vector 34. The encoder is composed of 3 LSTM layers of 512 units each followed by a linear layer of 64 units (the latent space).
Our decoder is comprised of 3 LSTM layers of 512 units each with dropout of 0.2 between
all layers""",,,ChEMBL,,,Unknown,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9544280/,Dual Use of Artificial Intelligence-powered Drug Discovery,148.0,"Fabio Urbina, Filippa Lentzos, Cédric Invernizzi, Sean Ekins",An international security conference explored how artificial intelligence (AI) technologies for drug discovery could be misused for de novo design of biochemical weapons. A thought experiment evolved into a computational proof.,Industry,United States of America,Historical significance,"Notable example of an AI model having a potential dual use for bio/chemical weapons:

""To narrow the universe of molecules we chose to drive the generative model towards compounds like the nerve agent VX, one of the most toxic chemical warfare agents developed during the 20th century—a few salt-sized grains of VX, (6–10 mg)5, is sufficient to kill a person. Nerve agents such as Novichoks have also been in the headlines recently6.

In less than 6 hours after starting on our in-house server, our model generated forty thousand molecules that scored within our desired threshold. In the process, the AI designed not only VX, but many other known chemical warfare agents that we identified through visual confirmation with structures in public chemistry databases. Many new molecules were also designed that looked equally plausible. These new molecules were predicted to be more toxic based on the predicted LD50 in comparison to publicly known chemical warfare agents (Figure 1). This was unexpected as the datasets we used for training the AI did not include these nerve agents. The virtual molecules even occupied a region of molecular property space that was entirely separate to the many thousands of molecules in the organism-specific LD50 model, which is mainly made up of pesticides, environmental toxins, and drugs (Figure 1). By inverting the use of our machine learning models, we had transformed our innocuous generative model from a helpful tool of medicine to a generator of likely deadly molecules.""",,,,,,,,,,,,,,,Hosted access (no API),Unreleased,,"""We can use MegaSyn in fee for service work for you.
We can provide an annual license for you to access this software on your own server.
We provide maintenance and customization options.""
https://www.collaborationspharma.com/megasyn",,
Statement Curriculum Learning,OpenAI,2022-03-02,"Language,Mathematics",Automated theorem proving,774000000.0,,,Probably below 1e23 FLOP given the small model size.,"Common Crawl,WebMath",275000000000.0,"Table on p12 gives WebMath dataset size in GB of code. Uncompressed code probably has a similar number of tokens per gigabyte as natural language text, on the order of 3e8 tokens per GB.",,https://arxiv.org/abs/2202.01344,Formal Mathematics Statement Curriculum Learning,92.0,"Stanislas Polu, Jesse Michael Han, Kunhao Zheng, Mantas Baksys, Igor Babuschkin, Ilya Sutskever ","We explore the use of expert iteration in the context of language modeling applied to formal mathematics. We show that at same compute budget, expert iteration, by which we mean proof search interleaved with learning, dramatically outperforms proof search only. We also observe that when applied to a collection of formal statements of sufficiently varied difficulty, expert iteration is capable of finding and solving a curriculum of increasingly difficult problems, without the need for associated ground-truth proofs. Finally, by applying this expert iteration to a manually curated set of problem statements, we achieve state-of-the-art on the miniF2F benchmark, automatically solving multiple challenging problems drawn from high school olympiads.",Industry,United States of America,SOTA improvement,"""by applying this expert iteration to a manually curated set
of problem statements, we achieve state-of-the-art on the miniF2F benchmark, automatically solving
multiple challenging problems drawn from high school olympiads.""",,,,,,,,,,,,,,,API access,Unreleased,Open source,"It seems that only inference code is here, no model weights or pre-training code:
https://github.com/openai/lean-gym
Apache 2.0

""We present lean-gym’s API""",,
DeepNet,Microsoft Research,2022-03-01,Language,"Language modeling,Translation,Language modeling/generation",3200000000.0,"""Remarkably, on a multilingual benchmark with 7,482 translation directions, our 200-layer model with 3.2B parameters significantly outperforms the 48-layer state-of-the-art model with 12B parameters by 5 BLEU points, which indicates a promising scaling direction""

EDIT 05/05/2022: The 12B model was presented in an earlier paper. This paper presents a 3.2B model",,"They show results on par with the original Transformer, so probably less than 2.3e19 FLOP.","CCMatrix,OPUS",12000000000.0,""" The final data consists of 102 languages, 1932 directions, and
12B sentence pairs.""",,https://arxiv.org/abs/2203.00555,"DeepNet: Scaling Transformers to 1,000 Layers",126.0,"Hongyu Wang, Shuming Ma, Li Dong, Shaohan Huang, Dongdong Zhang, Furu Wei","In this paper, we propose a simple yet effective method to stabilize extremely deep Transformers. Specifically, we introduce a new normalization function (DeepNorm) to modify the residual connection in Transformer, accompanying with theoretically derived initialization. In-depth theoretical analysis shows that model updates can be bounded in a stable way. The proposed method combines the best of two worlds, i.e., good performance of Post-LN and stable training of Pre-LN, making DeepNorm a preferred alternative. We successfully scale Transformers up to 1,000 layers (i.e., 2,500 attention and feed-forward network sublayers) without difficulty, which is one order of magnitude deeper than previous deep Transformers. Remarkably, on a multilingual benchmark with 7,482 translation directions, our 200-layer model with 3.2B parameters significantly outperforms the 48-layer state-of-the-art model with 12B parameters by 5 BLEU points, which indicates a promising scaling direction.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational",SOTA improvement,"""Remarkably, on a multilingual benchmark with 7,482 translation directions, our 200-layer model with 3.2B parameters significantly outperforms the 48-layer state-of-the-art model with 12B parameters by 5 BLEU points""",,,,,,,,,,,,,,,Unreleased,Open source,,"model code is said to be part of the torchscale library (I am not sure if full pre-training code is here):
https://github.com/microsoft/torchscale

MIT license",FP16,
PolyCoder,Carnegie Mellon University (CMU),2022-02-26,Language,Code generation,2700000000.0,2.7B for largest model,1.1e+21,"""We use GPT-NeoX toolkit 11 to
train the model efficiently in parallel with 8 Nvidia RTX 8000 GPUs on a single machine. The wall
time used to train the largest 2.7B model is about 6 weeks""

8 * 130 TFLOP/s * 6 * 7 * 24 * 3600 * 0.3 (utilization) ~= 1.1e21",,,"249GB

They trained on 39B tokens per Table 3, but I'm not sure how many epochs that is. May be <1. ",Likely,https://arxiv.org/abs/2202.13169,A Systematic Evaluation of Large Language Models of Code,510.0,"Frank F. Xu, Uri Alon, Graham Neubig, Vincent J. Hellendoorn","Large language models (LMs) of code have recently shown tremendous promise in completing code and synthesizing code from natural language descriptions. However, the current state-of-the-art code LMs (e.g., Codex (Chen et al., 2021)) are not publicly available, leaving many questions about their model and data design decisions. We aim to fill in some of these blanks through a systematic evaluation of the largest existing models: Codex, GPT-J, GPT-Neo, GPT-NeoX-20B, and CodeParrot, across various programming languages. Although Codex itself is not open-source, we find that existing open-source models do achieve close results in some programming languages, although targeted mainly for natural language modeling. We further identify an important missing piece in the form of a large open-source model trained exclusively on a multi-lingual corpus of code. We release a new model, PolyCoder, with 2.7B parameters based on the GPT-2 architecture, which was trained on 249GB of code across 12 programming languages on a single machine. In the C programming language, PolyCoder outperforms all models including Codex. Our trained models are open-source and publicly available at this https URL, which enables future research and application in this area.",Academia,United States of America,SOTA improvement,"""In the C programming language, PolyCoder outperforms
all models including Codex""",,1000.0,6 weeks,NVIDIA Quadro RTX 8000,,,,,,,,,,,Open weights (unrestricted),Unreleased,,"MIT license for model weights
https://huggingface.co/NinedayWang/PolyCoder-2.7B

It seems that there is no pretraining code here: https://github.com/VHellendoorn/Code-LMs",FP16,
ST-MoE,"Google,Google Brain,Google Research",2022-02-17,Language,Language modeling/generation,269000000000.0,269B. it's called ST-MoE-32B because it's equivalent to a 32B dense model.,2.9e+23,"The paper claims ""scaling a sparse model to 269B parameters, with a computational cost comparable to a 32B dense encoder-decoder"". If this is true for training cost, then 6*32e9*1.5e12 = 2.9e23",C4,1500000000000.0,"""We pre-train for 1.5T tokens on a mixture of English-only C4 dataset (Raffel et al., 2019) and the dataset from GLaM (Du et al., 2021) summarized in Appendix E""
",Likely,https://arxiv.org/abs/2202.08906v2,ST-MoE: Designing Stable and Transferable Sparse Expert Models,117.0,"Barret Zoph, Irwan Bello, Sameer Kumar, Nan Du, Yanping Huang, Jeff Dean, Noam Shazeer, William Fedus","Scale has opened new frontiers in natural language processing -- but at a high cost. In response, Mixture-of-Experts (MoE) and Switch Transformers have been proposed as an energy efficient path to even larger and more capable language models. But advancing the state-of-the-art across a broad set of natural language tasks has been hindered by training instabilities and uncertain quality during fine-tuning. Our work focuses on these issues and acts as a design guide. We conclude by scaling a sparse model to 269B parameters, with a computational cost comparable to a 32B dense encoder-decoder Transformer (Stable and Transferable Mixture-of-Experts or ST-MoE-32B). For the first time, a sparse model achieves state-of-the-art performance in transfer learning, across a diverse set of tasks including reasoning (SuperGLUE, ARC Easy, ARC Challenge), summarization (XSum, CNN-DM), closed book question answering (WebQA, Natural Questions), and adversarially constructed tasks (Winogrande, ANLI R3).","Industry,Industry,Industry","United States of America,United States of America,Multinational,United States of America,Canada,Switzerland",SOTA improvement,"""ST-MoE-32B improves the current state-of-the-art on the test server submissions for both ARC Easy (92.7 → 94.8) and ARC Challenge (81.4 → 86.5).""",0.84,,,,,,,,,,,,1000000.0,""" We use 1M tokens per batch""",Unreleased,Open source,Open source,"Apache License 2.0
Code for our models is available at https://github.com/tensorflow/mesh/blob/master/mesh_tensorflow/transformer/moe.py",BF16,
Midjourney V1,Midjourney,2022-02-15,Image generation,Image generation,,,,,Unspecified unreleased,,,Unknown,,,,,,Industry,United States of America,"Significant use,Historical significance","Significant historical usage and controversy as one of the first generative AI art models. For example:
https://www.nytimes.com/2022/09/02/technology/ai-artificial-intelligence-artists.html",,,,,,,,,,,,,,,Hosted access (no API),Unreleased,,,,
ProteinBERT,"Hebrew University of Jerusalem,Ben-Gurion University of the Negev,Deep Trading",2022-02-10,Biology,"Proteins,Protein generation",16000000.0,"""Altogether, it includes ∼16M trainable parameters, making it substantially smaller than other protein language models""",6.5e+19,"""Pretraining speed on a single GPU (Nvidia Quadro RTX 5000) was 280 protein records per second. We trained the model for 28 days over ∼670M records""

28 * 24 * 3600 * 89 TFLOP/s * 0.3 (assumed utilization) = 6.5e19
https://www.wolframalpha.com/input?i=28+days+*+89+TFLOP%2Fs+*+0.3",UniRef90,32000000001.0,"Number of proteins: 106,000,000
Average protein length: 300 amino acids

Total unique tokens = 106,000,000 × 300 = 31,800,000,000 ≈ 3.2e10 tokens",Confident,https://academic.oup.com/bioinformatics/article/38/8/2102/6502274,ProteinBERT: a universal deep-learning model of protein sequence and function,386.0,"Nadav Brandes, Dan Ofer, Yam Peleg, Nadav Rappoport, Michal Linial","Self-supervised deep language modeling has shown unprecedented success across natural language tasks, and has recently been repurposed to biological sequences. However, existing models and pretraining methods are designed and optimized for text analysis. We introduce ProteinBERT, a deep language model specifically designed for proteins. Our pretraining scheme combines language modeling with a novel task of Gene Ontology (GO) annotation prediction. We introduce novel architectural elements that make the model highly efficient and flexible to long sequences. The architecture of ProteinBERT consists of both local and global representations, allowing end-to-end processing of these types of inputs and outputs. ProteinBERT obtains near state-of-the-art performance, and sometimes exceeds it, on multiple benchmarks covering diverse protein properties (including protein structure, post-translational modifications and biophysical attributes), despite using a far smaller and faster model than competing deep-learning methods. Overall, ProteinBERT provides an efficient framework for rapidly training protein predictors, even with limited labeled data.","Academia,Academia,Industry","Israel,Israel,United States of America",SOTA improvement,"""ProteinBERT obtains near state-of-the-art performance, and sometimes exceeds it, on multiple benchmarks covering diverse protein properties (including protein structure, post-translational modifications and biophysical attributes)""",6.4,672.0,28 days,NVIDIA Quadro RTX 5000,1.0,,,,254.28806247515055,,,,26008.0,"Supplementary materials: ""During pretraining we used batch sizes of 128, 64 or 32 for episodes of 128, 512 or 1,024 tokens, respectively"" Since they seem to be used in equal parts, taking geometric mean: ((128*128)*(64*512)*(32*1024))**(1/3) = 26,008",Open weights (unrestricted),Open source,,"MIT license

https://github.com/nadavbra/protein_bert",,
LaMDA,Google,2022-02-10,Language,Language modeling,137000000000.0,"""LaMDA is a family of Transformer-based neural language models specialized for dialog, which have up to 137B parameters""",3.55e+23,"""The total FLOPS is 56.5% * 123 TFLOPS/s * 1024 chips * 57.7 days
= 3.55E+23""
From https://arxiv.org/pdf/2201.08239.pdf p.18
",Infiniset,1560000000000.0,"""and are pre-trained on 1.56T words of public dialog data and web text""",Confident,https://arxiv.org/abs/2201.08239,LaMDA: Language Models for Dialog Applications,1375.0,"Romal Thoppilan, Daniel De Freitas, Jamie Hall, Noam Shazeer, Apoorv Kulshreshtha, Heng-Tze Cheng, Alicia Jin, Taylor Bos, Leslie Baker, Yu Du, YaGuang Li, Hongrae Lee, Huaixiu Steven Zheng, Amin Ghafouri, Marcelo Menegali, Yanping Huang, Maxim Krikun, Dmitry Lepikhin, James Qin, Dehao Chen, Yuanzhong Xu, Zhifeng Chen, Adam Roberts, Maarten Bosma, Yanqi Zhou, Chung-Ching Chang, Igor Krivokon, Will Rusch, Marc Pickett, Kathleen Meier-Hellstern, Meredith Ringel Morris, Tulsee Doshi, Renelito Delos Santos, Toju Duke, Johnny Soraker, Ben Zevenbergen, Vinodkumar Prabhakaran, Mark Diaz, Ben Hutchinson, Kristen Olson, Alejandra Molina, Erin Hoffman-John, Josh Lee, Lora Aroyo, Ravi Rajakumar, Alena Butryna, Matthew Lamm, Viktoriya Kuzmina, Joe Fenton, Aaron Cohen, Rachel Bernstein, Ray Kurzweil, Blaise Aguera-Arcas, Claire Cui, Marian Croak, Ed Chi, Quoc Le","We present LaMDA: Language Models for Dialog Applications. LaMDA is a family of Transformer-based neural language models specialized for dialog, which have up to 137B parameters and are pre-trained on 1.56T words of public dialog data and web text. While model scaling alone can improve quality, it shows less improvements on safety and factual grounding. We demonstrate that fine-tuning with annotated data and enabling the model to consult external knowledge sources can lead to significant improvements towards the two key challenges of safety and factual grounding. The first challenge, safety, involves ensuring that the model's responses are consistent with a set of human values, such as preventing harmful suggestions and unfair bias. We quantify safety using a metric based on an illustrative set of human values, and we find that filtering candidate responses using a LaMDA classifier fine-tuned with a small amount of crowdworker-annotated data offers a promising approach to improving model safety. The second challenge, factual grounding, involves enabling the model to consult external knowledge sources, such as an information retrieval system, a language translator, and a calculator. We quantify factuality using a groundedness metric, and we find that our approach enables the model to generate responses grounded in known sources, rather than responses that merely sound plausible. Finally, we explore the use of LaMDA in the domains of education and content recommendations, and analyze their helpfulness and role consistency.",Industry,United States of America,Historical significance,,,1385.0,57.7 days * 24,Google TPU v3,1024.0,0.565,229949.98625999544,,453306.7251313544,,,,256000.0,"""All models were trained with 256K tokens per batch""",Unreleased,Unreleased,,,,True
GPT-NeoX-20B,EleutherAI,2022-02-09,Language,Language modeling/generation,20000000000.0,,9.31627008e+22,Trained for 3 months on 96 A100s (according to correspondence with author). Let's say 0.4 utilization rate.,The Pile,341173367965.0,"""In aggregate, the Pile consists of over 825GiB of raw text data""

Figure 4",Confident,https://arxiv.org/abs/2204.06745,GPT-NeoX-20B: An Open-Source Autoregressive Language Model,688.0,"Sid Black, Stella Biderman, Eric Hallahan, Quentin Anthony, Leo Gao, Laurence Golding, Horace He, Connor Leahy, Kyle McDonell, Jason Phang, Michael Pieler, USVSN Sai Prashanth, Shivanshu Purohit, Laria Reynolds, Jonathan Tow, Ben Wang, Samuel Weinbach","We introduce GPT-NeoX-20B, a 20 billion parameter autoregressive language model trained on the Pile, whose weights will be made freely and openly available to the public through a permissive license. It is, to the best of our knowledge, the largest dense autoregressive model that has publicly available weights at the time of submission. In this work, we describe \model{}'s architecture and training and evaluate its performance on a range of language-understanding, mathematics, and knowledge-based tasks. We find that GPT-NeoX-20B is a particularly powerful few-shot reasoner and gains far more in performance when evaluated five-shot than similarly sized GPT-3 and FairSeq models. We open-source the training and evaluation code, as well as the model weights, at this https URL.",Research collective,"Multinational,United States of America",Historical significance,,1.4,2160.0,"see other notes
",NVIDIA A100 SXM4 40 GB,96.0,,184272.8073600264,,77269.91251696396,,,,3150000.0,"""we opt to use the same batch size as OpenAI’s 175B model–approximately 3.15M tokens, or 1538 contexts of 2048 tokens each, and train for a total of 150,000 steps""",Open weights (unrestricted),Open source,Open source,Apache 2.0. training code: https://github.com/EleutherAI/gpt-neox ,FP16,
RETRO-7B,DeepMind,2022-02-07,Language,Language modeling/generation,7500000000.0,"""Retro provides a constant gain for models ranging from 150M to 7B parameters, and Retro can be improved at evaluation time by increasing the database size and the number of retrieved neighbours. """,1.68e+22,C=6ND = 6 * 7e9 * 400e9 = 1.7e22 ,WikiText-103,419430400000.0,"""we train for 419,430,400,000 training tokens"" ~= 315B words.",Confident,https://arxiv.org/abs/2112.04426,Improving language models by retrieving from trillions of tokens,817.0,"Sebastian Borgeaud, Arthur Mensch, Jordan Hoffmann, Trevor Cai, Eliza Rutherford, Katie Millican, George van den Driessche, Jean-Baptiste Lespiau, Bogdan Damoc, Aidan Clark, Diego de Las Casas, Aurelia Guy, Jacob Menick, Roman Ring, Tom Hennigan, Saffron Huang, Loren Maggiore, Chris Jones, Albin Cassirer, Andy Brock, Michela Paganini, Geoffrey Irving, Oriol Vinyals, Simon Osindero,Karen Simonyan, Jack W. Rae‡, Erich Elsen‡ and Laurent Sifre","We enhance auto-regressive language models by conditioning on document chunks retrieved from a large corpus, based on local similarity with preceding tokens. With a 2 trillion token database, our Retrieval-Enhanced Transformer (RETRO) obtains comparable performance to GPT-3 and Jurassic-1 on the Pile, despite using 25× fewer parameters. After fine-tuning, RETRO performance translates to downstream knowledge-intensive tasks such as question answering. RETRO combines a frozen Bert retriever, a differentiable encoder and a chunked cross-attention mechanism to predict tokens based on an order of magnitude more data than what is typically consumed during training. We typically train RETRO from scratch, yet can also rapidly RETROfit pre-trained transformers with retrieval and still achieve good performance. Our work opens up new avenues for improving language models through explicit memory at unprecedented scale.",Industry,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,"""Our largest model obtains state-of-the-art results on a range of downstream evaluation
datasets including Wikitext103""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
AlphaCode,DeepMind,2022-02-02,Language,Code generation,41100000000.0,41.1B. Table 3,1.63944e+23,"Figure 7 (a) shows a maximum training compute budget of approx 23000 TPU-days per model.
23000 days * 24 h/day * 3600 sec/h * 2.75e14 FLOP/s * 0.3 utilization = 1.64e23 FLOP","CodeContests,Unspecified unreleased",,Appendix part A has answers for pretraining.,Confident,https://arxiv.org/abs/2203.07814,Competition-Level Code Generation with AlphaCode,1013.0,"Yujia Li, David Choi, Junyoung Chung, Nate Kushman, Julian Schrittwieser, Rémi Leblond, Tom Eccles, James Keeling, Felix Gimeno, Agustin Dal Lago, Thomas Hubert, Peter Choy, Cyprien de Masson d'Autume, Igor Babuschkin, Xinyun Chen, Po-Sen Huang, Johannes Welbl, Sven Gowal, Alexey Cherepanov, James Molloy, Daniel J. Mankowitz, Esme Sutherland Robson, Pushmeet Kohli, Nando de Freitas, Koray Kavukcuoglu, Oriol Vinyals","Programming is a powerful and ubiquitous problem-solving tool. Developing systems that can assist programmers or even generate programs independently could make programming more productive and
accessible, yet so far incorporating innovations in AI has proven challenging. Recent large-scale language models have demonstrated an impressive ability to generate code, and are now able to complete
simple programming tasks. However, these models still perform poorly when evaluated on more complex, unseen problems that require problem-solving skills beyond simply translating instructions into
code. For example, competitive programming problems which require an understanding of algorithms
and complex natural language remain extremely challenging. To address this gap, we introduce AlphaCode, a system for code generation that can create novel solutions to these problems that require deeper
reasoning. In simulated evaluations on recent programming competitions on the Codeforces platform,
AlphaCode achieved on average a ranking of top 54.3% in competitions with more than 5,000 participants. We found that three key components were critical to achieve good and reliable performance:
(1) an extensive and clean competitive programming dataset for training and evaluation, (2) large and
efficient-to-sample transformer-based architectures, and (3) large-scale model sampling to explore the
search space, followed by filtering based on program behavior to a small set of submissions.
",Industry,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,,,147.2,"Figure 7 (a) shows that the models were trained for around 23000 TPU-days. We know they trained on TPUv4s, and in appendix D.1 they say they have 3750 TPUv4 and TPUv4i. Assuming they trained only on the 3750 TPUv4s, that suggests 23000 / 3750 = 6.13 days, or 147.2 hours.",Google TPU v4,3750.0,,,,1283001.2678531131,,,,4718592.0,"2304 token sequences, 2048 batch size. 2304 * 2048 = 4718592

trained on 967B tokens and 205k steps. 967B/205k = 4717073, so seems they didn't do warmup",Unreleased,Unreleased,,,BF16,
InstructGPT 175B,OpenAI,2022-01-27,Language,Language modeling/generation,175000000000.0,"""We train three model sizes (1.3B, 6B, and 175B parameters)""",3.19181e+23,"""training our 175B PPO-ptx model requires 60 petaflops/s-days, compared to 3,640 petaflops/s-days for GPT-3 (Brown et al., 2020)""

60/3640 = +1.65% to base model compute

base model was reported 3.14e+23 FLOP

3.14e+23 * 1.0165 = 319181000000000000000000",,374000033207.0,"Table 6 - describes **number of prompts**

26584 + 6623 = 33207

This is added to GPT-3 dataset size.",Confident,https://arxiv.org/pdf/2203.02155,Training language models to follow instructions with human feedback,9228.0,"Long Ouyang, Pamela Mishkin, Jeff Wu, Xu Jiang, Diogo Almeida, Carroll L. Wainwright,John Schulman Amanda Askell, Fraser Kelton Peter Welinder, Luke Miller Maddie Simens Paul Christiano,Ryan Lowe,Chong Zhang Jacob Hilton, Sandhini Agarwal Katarina Slama Alex Ray, Jan Leike","Making language models bigger does not inherently make them better at following a user’s intent. For example, large language models can generate outputs that are untruthful, toxic, or simply not helpful to the user. In other words, these models are not aligned with their users. In this paper, we show an avenue for aligning language models with user intent on a wide range of tasks by fine-tuning with human feedback. Starting with a set of labeler-written prompts and prompts submitted through the OpenAI API, we collect a dataset of labeler demonstrations of the desired model behavior, which we use to fine-tune GPT-3 using supervised learning. We then collect a dataset of rankings of model outputs, which we use to further fine-tune this supervised model using reinforcement learning from human feedback (RLHF). We call the resulting models InstructGPT. In human evaluations on our prompt distribution, outputs from the 1.3B parameter InstructGPT model are preferred to outputs from the 175B GPT-3, despite having 100x fewer parameters. Moreover, InstructGPT models show improvements in truthfulness and reductions in toxic output generation while having minimal performance regressions on public NLP datasets. Even though InstructGPT still makes simple mistakes, our results show that fine-tuning with human feedback is a promising direction for aligning language models with human intent.",Industry,United States of America,"Historical significance,Highly cited",,,,,,,,,,,GPT-3 175B (davinci),5.181e+21,,,,API access,Unreleased,,"used to be accessible via API, now deprecated",,
InstructGPT 6B,OpenAI,2022-01-27,Language,Language modeling/generation,6000000000.0,"""We train three model sizes (1.3B, 6B, and 175B parameters)""",,,,,,Confident,https://arxiv.org/abs/2203.02155,Training language models to follow instructions with human feedback,9228.0,"Long Ouyang, Pamela Mishkin, Jeff Wu, Xu Jiang, Diogo Almeida, Carroll L. Wainwright,John Schulman Amanda Askell, Fraser Kelton Peter Welinder, Luke Miller Maddie Simens Paul Christiano,Ryan Lowe,Chong Zhang Jacob Hilton, Sandhini Agarwal Katarina Slama Alex Ray, Jan Leike","Making language models bigger does not inherently make them better at following a user’s intent. For example, large language models can generate outputs that are untruthful, toxic, or simply not helpful to the user. In other words, these models are not aligned with their users. In this paper, we show an avenue for aligning language models with user intent on a wide range of tasks by fine-tuning with human feedback. Starting with a set of labeler-written prompts and prompts submitted through the OpenAI API, we collect a dataset of labeler demonstrations of the desired model behavior, which we use to fine-tune GPT-3 using supervised learning. We then collect a dataset of rankings of model outputs, which we use to further fine-tune this supervised model using reinforcement learning from human feedback (RLHF). We call the resulting models InstructGPT. In human evaluations on our prompt distribution, outputs from the 1.3B parameter InstructGPT model are preferred to outputs from the 175B GPT-3, despite having 100x fewer parameters. Moreover, InstructGPT models show improvements in truthfulness and reductions in toxic output generation while having minimal performance regressions on public NLP datasets. Even though InstructGPT still makes simple mistakes, our results show that fine-tuning with human feedback is a promising direction for aligning language models with human intent.",Industry,United States of America,"Historical significance,Highly cited",,,,,,,,,,,GPT-3 6.7B,,,,,API access,Unreleased,Unreleased,"used to be accessible via API, now deprecated",,
InstructGPT 1.3B,OpenAI,2022-01-27,Language,Language modeling/generation,1300000000.0,"""We train three model sizes (1.3B, 6B, and 175B parameters)""",,,,,,Confident,https://arxiv.org/abs/2203.02155,Training language models to follow instructions with human feedback,9228.0,"Long Ouyang, Pamela Mishkin, Jeff Wu, Xu Jiang, Diogo Almeida, Carroll L. Wainwright,John Schulman Amanda Askell, Fraser Kelton Peter Welinder, Luke Miller Maddie Simens Paul Christiano,Ryan Lowe,Chong Zhang Jacob Hilton, Sandhini Agarwal Katarina Slama Alex Ray, Jan Leike","Making language models bigger does not inherently make them better at following a user’s intent. For example, large language models can generate outputs that are untruthful, toxic, or simply not helpful to the user. In other words, these models are not aligned with their users. In this paper, we show an avenue for aligning language models with user intent on a wide range of tasks by fine-tuning with human feedback. Starting with a set of labeler-written prompts and prompts submitted through the OpenAI API, we collect a dataset of labeler demonstrations of the desired model behavior, which we use to fine-tune GPT-3 using supervised learning. We then collect a dataset of rankings of model outputs, which we use to further fine-tune this supervised model using reinforcement learning from human feedback (RLHF). We call the resulting models InstructGPT. In human evaluations on our prompt distribution, outputs from the 1.3B parameter InstructGPT model are preferred to outputs from the 175B GPT-3, despite having 100x fewer parameters. Moreover, InstructGPT models show improvements in truthfulness and reductions in toxic output generation while having minimal performance regressions on public NLP datasets. Even though InstructGPT still makes simple mistakes, our results show that fine-tuning with human feedback is a promising direction for aligning language models with human intent.",Industry,United States of America,"Historical significance,Highly cited",,,,,,,,,,,GPT-3 XL,,,,,API access,Unreleased,Unreleased,"used to be accessible via API, now deprecated",,
OntoProtein,Zhejiang University (ZJU),2022-01-23,"Biology,Language","Proteins,Protein or nucleotide language model (pLM/nLM)",420000000.0,"""For the protein encoder, we use the pre-trained ProtBert from Elnaggar et al. (2020).""",,,ProteinKG25,160000001.00000018,"Data Summary:
- Protein tokens: 488,000 × 300 = 1.464 × 10^8
- GO term tokens: 612,483 × 20 = 1.224966 × 10^7
- Knowledge graph triples: 4,990,097
Total: (1.464 × 10^8 + 1.224966 × 10^7 + 4.99 × 10^6) ≈ 1.626 × 10^8 data points",,https://openreview.net/pdf?id=yfe1VMYAXa4,ONTOPROTEIN: PROTEIN PRETRAINING WITH GENE ONTOLOGY EMBEDDING,,"Ningyu Zhang, Zhen Bi, Xiaozhuan Liang, Siyuan Cheng, Shumin Deng, Qiang Zhang, Jiazhang Lian, Huajun Chen, Haosen Hong","Self-supervised protein language models have proved their effectiveness in learn- ing the proteins representations. With the increasing computational power, cur- rent protein language models pre-trained with millions of diverse sequences can advance the parameter scale from million-level to billion-level and achieve re- markable improvement. However, those prevailing approaches rarely consider incorporating knowledge graphs (KGs), which can provide rich structured knowl- edge facts for better protein representations. We argue that informative biology knowledge in KGs can enhance protein representation with external knowledge. In this work, we propose OntoProtein, the first general framework that makes use of structure in GO (Gene Ontology) into protein pre-training models. We construct a novel large-scale knowledge graph that consists of GO and its related proteins, and gene annotation texts or protein sequences describe all nodes in the graph. We propose novel contrastive learning with knowledge-aware negative sampling to jointly optimize the knowledge graph and protein embedding during pre-training. Experimental results show that OntoProtein can surpass state-of-the-art methods with pre-trained protein language models in TAPE benchmark and yield better performance compared with baselines in protein-protein interaction and protein function prediction1.",Academia,China,SOTA improvement,Experimental results show that OntoProtein can surpass state-of-the-art methods with pre-trained protein language models in TAPE benchmark and yield better performance compared with baselines in protein-protein interaction and protein function prediction1.,,,,,,,,,,ProtBERT-BFD,,,,,Open weights (unrestricted),Open source,Open source,"MIT license
https://github.com/zjunlp/OntoProtein

unclear license
https://huggingface.co/zjunlp/OntoProtein",FP16,
AbLang (heavy sequences),University of Oxford,2022-01-22,Biology,"Proteins,Antibody property prediction,Protein or nucleotide language model (pLM/nLM)",355000000.0,"""The hyperparameters were selected to be similar to those used
in the RoBERTa paper (Liu et al., 2019).""

Liu et al., 2019 link: https://arxiv.org/pdf/1907.11692.pdf
""We begin by training RoBERTa following the BERTLARGE architecture (L = 24, H = 1024, A = 16, 355M parameters)""",,,Observed Antibody Space (OAS) database,2290000001.0000024,"Heavy Chain: 14,126,724 sequences × 160 residues = 2,260,275,840 datapoints
Light Chain: 187,068 sequences × 160 residues = 29,930,880 datapoints
Total: 2,260,275,840 + 29,930,880 = 2,290,206,720 datapoints (2.29B)",Confident,https://academic.oup.com/bioinformaticsadvances/article/2/1/vbac046/6609807,AbLang: an antibody language model for completing antibody sequences,99.0,"Tobias H Olsen, Iain H Moal, Charlotte M Deane","Motivation
General protein language models have been shown to summarize the semantics of protein sequences into representations that are useful for state-of-the-art predictive methods. However, for antibody specific problems, such as restoring residues lost due to sequencing errors, a model trained solely on antibodies may be more powerful. Antibodies are one of the few protein types where the volume of sequence data needed for such language models is available, e.g. in the Observed Antibody Space (OAS) database.

Results
Here, we introduce AbLang, a language model trained on the antibody sequences in the OAS database. We demonstrate the power of AbLang by using it to restore missing residues in antibody sequence data, a key issue with B-cell receptor repertoire sequencing, e.g. over 40% of OAS sequences are missing the first 15 amino acids. AbLang restores the missing residues of antibody sequences better than using IMGT germlines or the general protein language model ESM-1b. Further, AbLang does not require knowledge of the germline of the antibody and is seven times faster than ESM-1b.",Academia,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,"""AbLang restores residues more accurately and faster than a current state-of-the-art protein language model ESM-1b, emphasizing the benefits and potential of an antibody specific language model"" - SOTA improvement for a very specific task",20.0,,,,,,,,,,,,,,Open weights (unrestricted),Unreleased,Open source," BSD-3-Clause license
https://github.com/oxpig/AbLang

AbLang is a python package",,
data2vec (vision),Meta AI,2022-01-20,Vision,Image classification,705134592.0,"Section 4: ""We experiment with two model sizes: data2vec Base and
data2vec Large, containing either L = 12 or L = 24 Trans-
former blocks with H = 768 or H = 1024 hidden dimen-
sion (with 4 × H feed-forward inner-dimension)""
",,,ImageNet-1k,1281167.0,"Section 5.1: 
""we pretrain data2vec on the images of the ImageNet-1K training
set""",,https://ai.facebook.com/research/data2vec-a-general-framework-for-self-supervised-learning-in-speech-vision-and-language/,"Data2vec: A General Framework for Self-supervised Learning in Speech, Vision and Language",716.0,"Alexei Baevski,  Wei-Ning Hsu,  Qiantong Xu , Arun Babu,  Jiatao Gu,  Michael Auli","While the general idea of self-supervised learning is identical across modalities, the actual algorithms and objectives differ widely because they were developed with a single modality in mind. To get us closer to general self-supervised learning, we present data2vec, a framework that uses the same learning method for either speech,NLP or computer vision. The core idea is to predict latent representations of the full input data based on a masked view of the input in a selfdistillation setup using a standard Transformer architecture. Instead of predicting modality-specific targets such as words, visual tokens or units of human speech which are local in nature, data2vec predicts contextualized latent representations that contain information from the entire input. Experiments on the major benchmarks of speech recognition, image classification, and natural language understanding demonstrate a new state of the art or competitive performance to predominant approaches.",Industry,United States of America,SOTA improvement,"""Experiments on the major benchmarks of speech recognition, image classification, and natural lan guage understanding demonstrate a new state of the art or competitive performance to predominant approaches""",800.0,,,,,,,,,,,,,,Open weights (unrestricted),Open source,,"MIT license
https://github.com/facebookresearch/data2vec_vision/tree/main/beit",FP16,
data2vec (speech),Meta AI,2022-01-20,Speech,Speech recognition,705134592.0,"Section 4: ""We experiment with two model sizes: data2vec Base and
data2vec Large, containing either L = 12 or L = 24 Trans-
former blocks with H = 768 or H = 1024 hidden dimen-
sion (with 4 × H feed-forward inner-dimension)""
",,,LibriSpeech,13132800.0,"Section 5.2:
""we pre-train data2vec on the 960
hours of speech audio data from Librispeech (LS-960)""

13,680 words per hour",,https://ai.facebook.com/research/data2vec-a-general-framework-for-self-supervised-learning-in-speech-vision-and-language/,"Data2vec: A General Framework for Self-supervised Learning in Speech, Vision and Language",716.0,"Alexei Baevski,  Wei-Ning Hsu,  Qiantong Xu , Arun Babu,  Jiatao Gu,  Michael Auli","While the general idea of self-supervised learning is identical across modalities, the actual algorithms and objectives differ widely because they were developed with a single modality in mind. To get us closer to general self-supervised learning, we present data2vec, a framework that uses the same learning method for either speech,NLP or computer vision. The core idea is to predict latent representations of the full input data based on a masked view of the input in a selfdistillation setup using a standard Transformer architecture. Instead of predicting modality-specific targets such as words, visual tokens or units of human speech which are local in nature, data2vec predicts contextualized latent representations that contain information from the entire input. Experiments on the major benchmarks of speech recognition, image classification, and natural language understanding demonstrate a new state of the art or competitive performance to predominant approaches.",Industry,United States of America,SOTA improvement,"""Experiments on the major benchmarks of speech recognition, image classification, and natural lan guage understanding demonstrate a new state of the art or competitive performance to predominant approaches""",,,,,,,,,,,,,,,Open weights (unrestricted),Open source,,"MIT license
https://github.com/facebookresearch/fairseq/tree/main/examples/data2vec",FP16,
data2vec (language),Meta AI,2022-01-20,Language,Language modeling/generation,705134592.0,"Section 4: ""We experiment with two model sizes: data2vec Base and
data2vec Large, containing either L = 12 or L = 24 Trans-
former blocks with H = 768 or H = 1024 hidden dimen-
sion (with 4 × H feed-forward inner-dimension)""
",,,"BookCorpus (BooksCorpus, Toronto Book Corpus),English Wikipedia",3300000000.0,"Section 5.3: ""we adopt the same training setup as BERT (Devlin et al., 2019)
by pre-training on the Books Corpus (Zhu et al., 2015) and English Wikipedia data over 1M updates and a batch size of 256 sequences.""",,https://ai.facebook.com/research/data2vec-a-general-framework-for-self-supervised-learning-in-speech-vision-and-language/,"Data2vec: A General Framework for Self-supervised Learning in Speech, Vision and Language",716.0,"Alexei Baevski,  Wei-Ning Hsu,  Qiantong Xu , Arun Babu,  Jiatao Gu,  Michael Auli","While the general idea of self-supervised learning is identical across modalities, the actual algorithms and objectives differ widely because
they were developed with a single modality in mind. To get us closer to general self-supervised learning, we present data2vec, a framework that
uses the same learning method for either speech, NLP or computer vision. The core idea is to predict latent representations of the full input data based on a masked view of the input in a selfdistillation setup using a standard transformer architecture. Instead of predicting modality-specific
targets such as words, visual tokens or units of human speech which are local in nature, data2vecpredicts contextualized latent representations that
contain information from the entire input. Experiments on the major benchmarks of speech recognition, image classification, and natural language understanding demonstrate a new state of the art or competitive performance to predominant approaches. Models and code are available at www.github.com/pytorch/fairseq/tree/master/examples/data2vec.
",Industry,United States of America,SOTA improvement,"""Experiments on the major benchmarks of speech recognition, image classification, and natural lan guage understanding demonstrate a new state of the art or competitive performance to predominant approaches""",,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"MIT License
Models and code are available at www.github.com/pytorch/fairseq/tree/master/examples/data2vec",FP16,
Detic,"Meta AI,University of Texas at Austin",2022-01-07,Vision,"Object detection,Image classification",88000000.0,"from https://github.com/microsoft/Swin-Transformer Swin-B have 88M, 
from page 8 :  'Training our ResNet50 model takes ∼ 22 hours on 8 V100 GPUs. The large 21K Swin-B model trains in ∼ 24 hours on 32 GPUs.'",2.34399744e+19,"28.26e12* 32 * 24*3600*0.3 =2.34e19 = peak flops * num gpus * num seconds * assumed utilization rate
for Swin-B model from page 8 :  'Training our ResNet50 model takes ∼ 22 hours on 8 V100 GPUs. The large 21K Swin-B model trains in ∼ 24 hours on 32 GPUs.'","ImageNet21k,Conceptual Captions (CC3M),LVIS",16900000.0,"14M + 1.5M + 1.2M + 100K + 100K = 16900000.0
table above section 5.1",Speculative,https://arxiv.org/abs/2201.02605,Detecting Twenty-thousand Classes using Image-level Supervision,483.0,"Xingyi Zhou, Rohit Girdhar, Armand Joulin, Philipp Krähenbühl, Ishan Misra"," Current object detectors are limited in vocabulary size due to the small scale of detection datasets. Image classifiers, on the other hand, reason about much larger vocabularies, as their datasets are larger and easier to collect. We propose Detic, which simply trains the classifiers of a detector on image classification data and thus expands the vocabulary of detectors to tens of thousands of concepts. Unlike prior work, Detic does not need complex assignment schemes to assign image labels to boxes based on model predictions, making it much easier to implement and compatible with a range of detection architectures and backbones. Our results show that Detic yields excellent detectors even for classes without box annotations. It outperforms prior work on both open-vocabulary and long-tail detection benchmarks. Detic provides a gain of 2.4 mAP for all classes and 8.3 mAP for novel classes on the open-vocabulary LVIS benchmark. On the standard LVIS benchmark, Detic obtains 41.7 mAP when evaluated on all classes, or only rare classes, hence closing the gap in performance for object categories with few samples. For the first time, we train a detector with all the twenty-one-thousand classes of the ImageNet dataset and show that it generalizes to new datasets without finetuning. Code is available at \url{this https URL}. ","Industry,Academia","United States of America,United States of America",SOTA improvement,"""On open-vocabulary COCO, our method outperforms the previous state-of-the-art OVR-CNN [ 72 ] by 5 point with the same detector and data""",,24.0,"from page 8 :  'Training our ResNet50 model takes ∼ 22 hours on 8 V100
GPUs. The large 21K Swin-B model trains in ∼ 24 hours on 32 GPUs.'",NVIDIA V100,32.0,,191.44581825616132,,19331.67955389363,,,,,,Open weights (unrestricted),Open source,Open source,"Apache, models and code: https://github.com/facebookresearch/Detic","FP32,FP16",
ERNIE-ViLG,Baidu,2021-12-31,"Multimodal,Image generation,Vision","Vision-language generation,Image generation",10000000000.0,"""To explore the landscape of large-scale pre-training for bidirectional text-image generation, we pre-train a 10-billion parameter model on a large-scale dataset of 145 million high-quality Chinese image-text pairs.""",,,,145000000.0,"To explore the landscape of large-scale pre-training for bidirectional text-image generation, we pre-train a 10-billion parameter model on a large-scale dataset of 145 million high-quality Chinese image-text pairs.",,https://arxiv.org/abs/2112.15283,ERNIE-ViLG: Unified Generative Pre-training for Bidirectional Vision-Language Generation,54.0,"Han Zhang, Weichong Yin, Yewei Fang, Lanxin Li, Boqiang Duan, Zhihua Wu, Yu Sun, Hao Tian, Hua Wu, Haifeng Wang","Conventional methods for the image-text generation tasks mainly tackle the naturally bidirectional generation tasks separately, focusing on designing task-specific frameworks to improve the quality and fidelity of the generated samples. Recently, Vision-Language Pre-training models have greatly improved the performance of the image-to-text generation tasks, but large-scale pre-training models for text-to-image synthesis task are still under-developed. In this paper, we propose ERNIE-ViLG, a unified generative pre-training framework for bidirectional image-text generation with transformer model. Based on the image quantization models, we formulate both image generation and text generation as autoregressive generative tasks conditioned on the text/image input. The bidirectional image-text generative modeling eases the semantic alignments across vision and language. For the text-to-image generation process, we further propose an end-to-end training method to jointly learn the visual sequence generator and the image reconstructor. To explore the landscape of large-scale pre-training for bidirectional text-image generation, we train a 10-billion parameter ERNIE-ViLG model on a large-scale dataset of 145 million (Chinese) image-text pairs which achieves state-of-the-art performance for both text-to-image and image-to-text tasks, obtaining an FID of 7.9 on MS-COCO for text-to-image synthesis and best results on COCO-CN and AIC-ICC for image captioning.",Industry,China,SOTA improvement,"""we train a 10-billion parameter ERNIE-ViLG model on a large-scale dataset of 145 million (Chinese) image-text pairs which achieves state-of-the-art performance for both text-to-image and image-to-text tasks""",,,,,,,,,,,,,,,Unreleased,Unreleased,,it seems that the model was completely substituted by its successor ViLG 2.0 - I haven't found niether model weights nor code or API.,FP16,
ERNIE 3.0 Titan,"Baidu,Peng Cheng Laboratory",2021-12-23,Language,"Language modeling,Language modeling/generation",260000000000.0,"""[We] developed... distributed training technology, including fine-grained parallelism, heterogeneous hardware-aware training, and fault tolerance mechanism to train the 260B model on both Nvidia V100 GPU and Ascend 910 NPU clusters.""
See also:
https://twitter.com/BaiduResearch/status/1468633977242243078?t=6q4zuLNdTSc4GUBe9OM5Aw&s=19",1.0421e+24,"The paper suggests that ERNIE 3.0 Titan uses more compute than GPT-3. This is consistent with the 6ND approximation.

C = 6ND = 6 (FLOP/param/token) * (260B params) * (668B tokens) = 1.0421*10^24 FLOP",ERNIE 3.0 Corpus,668000000000.0,"""To ensure the success of the pre-training of ERNIE 3.0 Titan, we utilize the ERNIE 3.0 Corpus [ 2 ], a large-scale, wide-variety, and high-quality Chinese text corpora amounting to 4TB""

Assuming 167M words/tokens per GB",Confident,https://arxiv.org/abs/2112.12731,ERNIE 3.0 Titan: Exploring Larger-scale Knowledge Enhanced Pre-training for Language Understanding and Generation,70.0,"Shuohuan Wang, Yu Sun, Yang Xiang, Zhihua Wu, Siyu Ding, Weibao Gong, Shikun Feng","Pre-trained language models have achieved state-of-the-art results in various Natural Language Processing (NLP) tasks. GPT-3 has shown that scaling up pre-trained language models can further exploit their enormous potential. A unified framework named ERNIE 3.0 was recently proposed for pre-training large-scale knowledge enhanced models and trained a model with 10 billion parameters. ERNIE 3.0 outperformed the state-of-the-art models on various NLP tasks. In order to explore the performance of scaling up ERNIE 3.0, we train a hundred-billion-parameter model called ERNIE 3.0 Titan with up to 260 billion parameters on the PaddlePaddle platform. Furthermore, we design a self-supervised adversarial loss and a controllable language modeling loss to make ERNIE 3.0 Titan generate credible and controllable texts. To reduce the computation overhead and carbon emission, we propose an online distillation framework for ERNIE 3.0 Titan, where the teacher model will teach students and train itself simultaneously. ERNIE 3.0 Titan is the largest Chinese dense pre-trained model so far. Empirical results show that the ERNIE 3.0 Titan outperforms the state-of-the-art models on 68 NLP datasets.","Industry,Academia","China,China",SOTA improvement,"""Empirical results show that the ERNIE 3.0 Titan outperforms the state-of-the-art models on 68 NLP datasets.""",,,,"NVIDIA Tesla V100 DGXS 32 GB,Huawei Ascend 910",1920.0,,,,,,,,1048576.0,"""The maximum sequence length of context and
the memory length of language generation is 512 and 128, respectively""

In table 1, they use a global batch size of 512 when data parallelism is ""1"" and 2048 when DP is ""4"". Not sure I fully understand this part but I guess they'd use parallelism as much as possible given how they talk about it.

2048 * 512 = 1048576.",Hosted access (no API),Unreleased,,"The Ernie 3.0 Titan model was used in Ernie bot. Today, ERNIE has been widely deployed across finance, healthcare, insurance, equity, Internet, logistics, and other fields.

http://research.baidu.com/Blog/index-view?id=165",FP16,True
XGLM-7.5B,"Meta AI,Facebook AI Research",2021-12-20,Language,"Translation,Question answering,Language modeling/generation",7500000000.0,"""Our largest model with 7.5 billion parameters sets new state of the art""",2.25e+22,"""The XGLM 7.5B model was trained on 256 A100 GPUs for about 3 weeks, at a speed of 311.6k words per second""

256 * 312 teraFLOP/s * 21 * 24 * 3600 * 0.3 utilization assumption ~= 4.3e22

also, it was trained for 500B tokens. Using Compute = 6ND, we have
6 * 500B * 7.5B = 2.25e22

311k tokens per second * 7.5B params * 6 is 1.35e16 FLOP/s. divide that by 312 teraFLOP/s, which is A100 peak compute, gets 43, suggesting low utilization (17%) of the 256-GPU cluster, or somewhat higher if there's more than one token per word. So I'll use the 6ND number.","Subset of CC100-XL,CC100-XL,Common Crawl",1740000000.0,"Training Data. Our models are trained on a static multilingual corpus extracted from CommonCrawl, with English text comprising 32.6% of the total number of tokens corresponding to 163B tokens.
163B / 0.326 = 500B total

Note that this dataset is sampled from the much larger CC100-XL, outlined in Appendix F and here: https://huggingface.co/facebook/xglm-7.5B#training-data-statistics

The huggingface link sums to 1.64T tokens, while the Data Card in the appendix claims 1.9T tokens.",Confident,https://arxiv.org/abs/2112.10668,Few-shot Learning with Multilingual Language Models,245.0,"Xi Victoria Lin, Todor Mihaylov, Mikel Artetxe, Tianlu Wang, Shuohui Chen, Daniel Simig, Myle Ott, Naman Goyal, Shruti Bhosale, Jingfei Du, Ramakanth Pasunuru, Sam Shleifer, Punit Singh Koura, Vishrav Chaudhary, Brian O'Horo, Jeff Wang, Luke Zettlemoyer, Zornitsa Kozareva, Mona Diab, Veselin Stoyanov, Xian Li","Large-scale generative language models such as GPT-3 are competitive few-shot learners. While these models are known to be able to jointly represent many different languages, their training data is dominated by English, potentially limiting their cross-lingual generalization. In this work, we train multilingual generative language models on a corpus covering a diverse set of languages, and study their few- and zero-shot learning capabilities in a wide range of tasks. Our largest model with 7.5 billion parameters sets new state of the art in few-shot learning in more than 20 representative languages, outperforming GPT-3 of comparable size in multilingual commonsense reasoning (with +7.4% absolute accuracy improvement in 0-shot settings and +9.4% in 4-shot settings) and natural language inference (+5.4% in each of 0-shot and 4-shot settings). On the FLORES-101 machine translation benchmark, our model outperforms GPT-3 on 171 out of 182 directions with 32 training examples, while surpassing the official supervised baseline in 45 directions. We conduct an in-depth analysis of different multilingual prompting approaches, showing in particular that strong few-shot learning performance across languages can be achieved via cross-lingual transfer through both templates and demonstration examples. Finally, we evaluate our models in social value tasks such as hate speech detection in five languages and find it has limitations similar to comparable sized GPT-3 models. ","Industry,Industry","United States of America,United States of America",SOTA improvement,"""Our largest model (XGLM7.5B) sets a new state of the art performance for few-shot learning in more than 20 representative languages (including medium- and low-resource languages) for the tasks of commonsense reasoning, natural language inference and machine translation.""",1.0,504.0,"appendix A : ""The XGLM 7.5B model was trained on 256 A100 GPUs for about 3 weeks, at a speed of 311.6k words per second""",NVIDIA A100,256.0,,104152.22590136188,,206287.25531193183,,,,,,Open weights (non-commercial),Unreleased,,"MIT license
https://github.com/facebookresearch/fairseq/tree/main/examples/xglm

https://github.com/facebookresearch/fairseq/blob/main/examples/xglm/model_card.md#primary-intended-use",,
LDM-1.45B,"Heidelberg University,Runway",2021-12-20,Image generation,"Image generation,Text-to-image",1450000000.0,1.45B,,,LAION-400M,400000000.0,400M image-text pairs,Confident,https://arxiv.org/abs/2112.10752,High-Resolution Image Synthesis with Latent Diffusion Models,10764.0,"Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, Björn Ommer","By decomposing the image formation process into a sequential application of denoising autoencoders, diffusion models (DMs) achieve state-of-the-art synthesis results on image data and beyond. Additionally, their formulation allows for a guiding mechanism to control the image generation process without retraining. However, since these models typically operate directly in pixel space, optimization of powerful DMs often consumes hundreds of GPU days and inference is expensive due to sequential evaluations. To enable DM training on limited computational resources while retaining their quality and flexibility, we apply them in the latent space of powerful pretrained autoencoders. In contrast to previous work, training diffusion models on such a representation allows for the first time to reach a near-optimal point between complexity reduction and detail preservation, greatly boosting visual fidelity. By introducing cross-attention layers into the model architecture, we turn diffusion models into powerful and flexible generators for general conditioning inputs such as text or bounding boxes and high-resolution synthesis becomes possible in a convolutional manner. Our latent diffusion models (LDMs) achieve a new state of the art for image inpainting and highly competitive performance on various tasks, including unconditional image generation, semantic scene synthesis, and super-resolution, while significantly reducing computational requirements compared to pixel-based DMs. Code is available at this https URL.","Academia,Industry","Germany,United States of America",Highly cited,,0.66,,,NVIDIA A100,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,MIT: https://github.com/CompVis/latent-diffusion/blob/main/LICENSE,,
GLIDE,OpenAI,2021-12-20,Image generation,"Image generation,Text-to-image",3500000000.0,"""Samples from a 3.5 billion parameter text-conditional diffusion model using classifier-free guidance are favored by human evaluators to those from DALL-E, even when the latter uses expensive CLIP reranking""",4.7e+22,"""Note that GLIDE was
trained with roughly the same training compute as DALL-E
but with a much smaller model (3.5 billion vs. 12 billion
parameters)""",DALL-E,250000000.0,"Section 4:
""We train our model on the same dataset as DALL-E (Ramesh et al., 2021)""

This paper used 250M image-text pairs
https://arxiv.org/pdf/2102.12092.pdf",Speculative,https://arxiv.org/abs/2112.10741,GLIDE: Towards Photorealistic Image Generation and Editing with Text-Guided Diffusion Models,2795.0,"Alex Nichol, Prafulla Dhariwal, Aditya Ramesh, Pranav Shyam, Pamela Mishkin, Bob McGrew, Ilya Sutskever, Mark Chen","Diffusion models have recently been shown to generate high-quality synthetic images, especially when paired with a guidance technique to trade off diversity for fidelity. We explore diffusion models for the problem of text-conditional image synthesis and compare two different guidance strategies: CLIP guidance and classifier-free guidance. We find that the latter is preferred by human evaluators for both photorealism and caption similarity, and often produces photorealistic samples. Samples from a 3.5 billion parameter text-conditional diffusion model using classifier-free guidance are favored by human evaluators to those from DALL-E, even when the latter uses expensive CLIP reranking. Additionally, we find that our models can be fine-tuned to perform image inpainting, enabling powerful text-driven image editing. We train a smaller model on a filtered dataset and release the code and weights at this https URL.",Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,Open weights (unrestricted),Unreleased,,"MIT license
https://github.com/openai/glide-text2im",FP16,
Contriever,"Meta AI,University College London (UCL),PSL University,Université Grenoble Alpes",2021-12-16,Language,Language modeling,110000000.0,"Based on BERT base, which had 110m params.

""We initialize the network with the publicly available BERT base uncased model.""",1.57e+20,"Pre-training:
""We use the random cropping data augmentation, with documents of 256 tokens... batch size of 2,048 and 500,000 steps""
256 * 2048 * 500k * 100M * 6 = 1.57e20

Fine-tuning looks unlikely to move final sum much beyond this.","Wikipedia,CCNet",,,Likely,https://arxiv.org/abs/2112.09118,Unsupervised Dense Information Retrieval with Contrastive Learning,590.0,"Gautier Izacard, Mathilde Caron, Lucas Hosseini, Sebastian Riedel, Piotr Bojanowski, Armand Joulin, Edouard Grave","Recently, information retrieval has seen the emergence of dense retrievers, using neural networks, as an alternative to classical sparse methods based on term-frequency. These models have obtained state-of-the-art results on datasets and tasks where large training sets are available. However, they do not transfer well to new applications with no training data, and are outperformed by unsupervised term-frequency methods such as BM25. In this work, we explore the limits of contrastive learning as a way to train unsupervised dense retrievers and show that it leads to strong performance in various retrieval settings. On the BEIR benchmark our unsupervised model outperforms BM25 on 11 out of 15 datasets for the Recall@100. When used as pre-training before fine-tuning, either on a few thousands in-domain examples or on the large MS~MARCO dataset, our contrastive model leads to improvements on the BEIR benchmark. Finally, we evaluate our approach for multi-lingual retrieval, where training data is even scarcer than for English, and show that our approach leads to strong unsupervised performance. Our model also exhibits strong cross-lingual transfer when fine-tuned on supervised English data only and evaluated on low resources language such as Swahili. We show that our unsupervised models can perform cross-lingual retrieval between different scripts, such as retrieving English documents from Arabic queries, which would not be possible with term matching methods.","Industry,Academia,Academia,Academia","United States of America,United Kingdom of Great Britain and Northern Ireland,France,France",SOTA improvement,"""We observe that when
used as pre-training, contrastive learning leads to strong performance: contriever obtains the best results
among dense bi-encoder methods for the nDCG@10, and is state-of-the-art for the recall@100 (improving the
average recall@100 from 65.0 to 67.1). This strong recall@100 performance can be further exploited by using
a cross-encoder2
to re-rank the retrieved documents: this leads to the state-of-the-art on 8 datasets of the
BEIR benchmark for the nDCG@10, as well as on average""",,,,,,,,,,BERT-Large,,actually BERT base,,,Open weights (non-commercial),Open (non-commercial),Open access (non-commercial),non-commercial for weights/code: https://github.com/facebookresearch/contriever/blob/main/LICENSE,,
LongT5,Google Research,2021-12-15,Language,Text summarization,3000000000.0,3B from section 4.1,,"architecture is sparse so we cannot use 6ND method,
from 3.1.1 ""we simply replace the encoder
self-attention operation in T5 with a sparse sliding-
window local attention operation following the im-
plementation in ETC ""
at the end of section 3.1.2 there is information about 
complexity O(l(r + l/k)) of local attention
from 4.1.1 ""We pre-train LongT5 models for 1M steps on
4096 input sequence length and 910 output se-
quence length.
batch size is 128 (from 4.1 configurations section)
so with l = 4096, k = 16, r = 127, 
so l(r+l/k) = 1568768, but we are not sure about constant.

if normal attention have complexity O(l^2), and l^2 = 16777216
16777216/1568768 = 10.7
We can try to estimate that LongT5 would have 10 times less compute that normal architecture.",C4,200000000000.0,"size of C4, from https://huggingface.co/datasets/c4 , C4 dataset is a collection of about 750GB of English-language text
200M word/GB * 4/3 token/word * 750GB = 200000000000 tokens

Actual tokens seen:
1M steps * (4096 input len + 910 output len) * 128 batch size = 641B tokens, so around 3.2 epochs.",Confident,https://arxiv.org/abs/2112.07916,LongT5: Efficient Text-To-Text Transformer for Long Sequences,257.0,"Mandy Guo, Joshua Ainslie, David Uthus, Santiago Ontanon, Jianmo Ni, Yun-Hsuan Sung, Yinfei Yang","Recent work has shown that either (1) increasing the input length or (2) increasing model size can improve the performance of Transformer-based neural models. In this paper, we present a new model, called LongT5, with which we explore the effects of scaling both the input length and model size at the same time. Specifically, we integrated attention ideas from long-input transformers (ETC), and adopted pre-training strategies from summarization pre-training (PEGASUS) into the scalable T5 architecture. The result is a new attention mechanism we call {\em Transient Global} (TGlobal), which mimics ETC's local/global attention mechanism, but without requiring additional side-inputs. We are able to achieve state-of-the-art results on several summarization tasks and outperform the original T5 models on question answering tasks.",Industry,"Multinational,United States of America,Canada,Switzerland",SOTA improvement,"from abstract: ""We are able to achieve state-of-the-art results on several summarization tasks and outperform the original T5 models on question answering tasks.""",3.2,,,Google TPU v3,128.0,,,,56735.31215774296,,,,,,Open weights (unrestricted),Open source,Open source,"Apache 2.0: https://github.com/google-research/longt5
train code: https://github.com/google-research/longt5/blob/master/longt5/tasks.py ",,
GLaM,Google,2021-12-13,Language,"Language modeling/generation,Question answering",1200000000000.0,1.2 trillion parameters,3.6363112434e+23,"The network activates 96.6 billion parameters per token and trained for 600B tokens.

6 * 600B * 96.6B = 3.478e23

Digitizing figure 4 (d) indicates 139.67 TPU-years of training. 
2.75e14 * 139.67 * 365.25 * 24 * 3600 * 0.3 = 3.636e23

Since these are close, we will use the 6NC estimate and derive hardware utilization from the training time information.

Later they say they measured 326W power usage per chip, which could maybe be used to estimate utilization.","Wikipedia,GLaM dataset",600000000000.0,"The dataset is made of 1.6 trillion tokens, but later in the paper they say they only train the largest model for 600b tokens. 600b / 0.75 words/token = 800b words.

""The complete GLaM training using 600B tokens consumes only 456 MWh and emits 40.2 net tCO2e.""",Confident,https://arxiv.org/abs/2112.06905,GLaM: Efficient Scaling of Language Models with Mixture-of-Experts,597.0,"Nan Du, Yanping Huang, Andrew M. Dai, Simon Tong, Dmitry Lepikhin, Yuanzhong Xu, Maxim Krikun, Yanqi Zhou, Adams Wei Yu, Orhan Firat, Barret Zoph, Liam Fedus, Maarten Bosma, Zongwei Zhou, Tao Wang, Yu Emma Wang, Kellie Webster, Marie Pellat, Kevin Robinson, Kathleen Meier-Hellstern, Toju Duke, Lucas Dixon, Kun Zhang, Quoc V Le, Yonghui Wu, Zhifeng Chen, Claire Cui","Scaling language models with more data, compute and parameters has driven significant progress in natural language processing. For example, thanks to scaling, GPT-3 was able to achieve strong results on in-context learning tasks. However, training these large dense models requires significant amounts of computing resources. In this paper, we propose and develop a family of language models named GLaM (Generalist Language Model), which uses a sparsely activated mixture-of-experts architecture to scale the model capacity while also incurring substantially less training cost compared to dense variants. The largest GLaM has 1.2 trillion parameters, which is approximately 7x larger than GPT-3. It consumes only 1/3 of the energy used to train GPT-3 and requires half of the computation flops for inference, while still achieving better overall zero-shot and one-shot performance across 29 NLP tasks.",Industry,United States of America,SOTA improvement,"""As shown in Table 5, GLaM (64B/64E) is better than the dense model and outperforms the previous finetuned state-of-the-art (SOTA) on this dataset in the open-domain setting""",,1366.0,"Note that they give several energy estimates. Use the complete training figures for 600B tokens, not the GPT-3 comparison values with 280B tokens.

""326W measured system power per TPU-v4 chip""
""The complete GLaM training using 600B tokens consumes only
456 MWh""
1024 TPU v4 chips
(456 MWh) / (326W/chip * 1024 chips) = 1366 hours",Google TPU v4,1024.0,0.2869636964,541437.4162400038,,350743.0055524121,,,,1000000.0,"""We use a maximum sequence
length of 1024 tokens, and pack each input example to have
up to 1 million tokens per batch.""",Unreleased,Unreleased,,,BF16,True
Gopher (280B),DeepMind,2021-12-08,Language,"Language modeling,Question answering",280000000000.0,"Language modelling provides a step towards intelligent communication systems by harnessing large repositories of written human knowledge to better predict and understand the world. In this paper, we present an analysis of Transformer-based language model performance across a wide range of model scales -- from models with tens of millions of parameters up to a 280 billion parameter model called Gopher. These models are evaluated on 152 diverse tasks, achieving state-of-the-art performance across the majority. Gains from scale are largest in areas such as reading comprehension, fact-checking, and the identification of toxic language, but logical and mathematical reasoning see less benefit. We provide a holistic analysis of the training dataset and model's behaviour, covering the intersection of model scale with bias and toxicity. Finally we discuss the application of language models to AI safety and the mitigation of downstream harms.",6.31e+23,"Table A26
6.31E+08 Train PFLOPs",MassiveTex,300000000000.0,"""We train all models for 300 billion tokens with a 2048 token context window, using the Adam (Kingma and Ba, 2014) optimiser.""

1 token ~ 0.75 words",Confident,https://arxiv.org/abs/2112.11446,"""Scaling Language Models: Methods, Analysis & Insights from Training Gopher""",1122.0,"Jack W. Rae, Sebastian Borgeaud, Trevor Cai, Katie Millican, Jordan Hoffmann, Francis Song, John Aslanides, Sarah Henderson, Roman Ring, Susannah Young, Eliza Rutherford, Tom Hennigan, Jacob Menick, Albin Cassirer, Richard Powell, George van den Driessche, Lisa Anne Hendricks, Maribeth Rauh, Po-Sen Huang, Amelia Glaese, Johannes Welbl, Sumanth Dathathri, Saffron Huang, Jonathan Uesato, John Mellor, Irina Higgins, Antonia Creswell, Nat McAleese, Amy Wu, Erich Elsen, Siddhant Jayakumar, Elena Buchatskaya, David Budden, Esme Sutherland, Karen Simonyan, Michela Paganini, Laurent Sifre, Lena Martens, Xiang Lorraine Li, Adhiguna Kuncoro, Aida Nematzadeh, Elena Gribovskaya, Domenic Donato, Angeliki Lazaridou, Arthur Mensch, Jean-Baptiste Lespiau, Maria Tsimpoukelli, Nikolai Grigorev, Doug Fritz, Thibault Sottiaux, Mantas Pajarskas, Toby Pohlen, Zhitao Gong, Daniel Toyama, Cyprien de Masson d'Autume, Yujia Li, Tayfun Terzi, Vladimir Mikulik, Igor Babuschkin, Aidan Clark, Diego de Las Casas, Aurelia Guy, Chris Jones, James Bradbury, Matthew Johnson, Blake Hechtman, Laura Weidinger, Iason Gabriel, William Isaac, Ed Lockhart, Simon Osindero, Laura Rimell, Chris Dyer, Oriol Vinyals, Kareem Ayoub, Jeff Stanway, Lorrayne Bennett, Demis Hassabis, Koray Kavukcuoglu, Geoffrey Irving","We enhance auto-regressive language models by conditioning on document chunks retrieved from a large corpus, based on local similarity with preceding tokens. With a 2 trillion token database, our Retrieval-Enhanced Transformer (RETRO) obtains comparable performance to GPT-3 and Jurassic-1 on the Pile, despite using 25× fewer parameters. After fine-tuning, RETRO performance translates to downstream knowledge-intensive tasks such as question answering. RETRO combines a frozen Bert retriever, a differentiable encoder and a chunked cross-attention mechanism to predict tokens based on an order of magnitude more data than what is typically consumed during training. We typically train RETRO from scratch, yet can also rapidly RETROfit pre-trained transformers with retrieval and still achieve good performance. Our work opens up new avenues for improving language models through explicit memory at unprecedented scale.",Industry,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,"""These models are evaluated on 152 diverse tasks, achieving state-of-the-art performance across the majority""",1.0,920.0,"""We trained Gopher for 920 hours in November and December 2020 in Google’s Georgia datacentre. The PUE of the datacenter at this time was 1.08; the net tCO2e per MWh in October 2020 was 0.33. Using an estimate of 283W drawn per chip, this leads to a total of 380 net tCO2e""",Google TPU v3,4096.0,0.378,616611.1391817601,,1815813.0260876147,,,,6000000.0,"Table 1. ""Furthermore, we increase Gopher’s batch size from three to six million tokens per batch during training""",Unreleased,Unreleased,,,BF16,True
Student of Games,DeepMind,2021-12-06,Games,"Chess,Go,Poker",,,3.667927300468287e+22,"""We trained a version of AlphaZero using its original settings in chess and Go, e.g. , using 800 MCTS simulations during training, with 3500 concurrent actors each on a single TPUv4, for a total of 800k training steps. SOG was trained using a similar amount of TPU resources.""",,,,Speculative,https://arxiv.org/abs/2112.03178,Player of Games,13.0,"Martin Schmid, Matej Moravcik, Neil Burch, Rudolf Kadlec, Josh Davidson, Kevin Waugh, Nolan Bard, Finbarr Timbers, Marc Lanctot, Zach Holland, Elnaz Davoodi, Alden Christianson, Michael Bowling","Games have a long history as benchmarks for progress in artificial intelligence. Approaches using search and learning produced strong performance across many perfect information games, and approaches using game-theoretic reasoning and learning demonstrated strong performance for specific imperfect information poker variants. We introduce Student of Games, a general-purpose algorithm that unifies previous approaches, combining guided search, self-play learning, and game-theoretic reasoning. Student of Games achieves strong empirical performance in large perfect and imperfect information games -- an important step towards truly general algorithms for arbitrary environments. We prove that Student of Games is sound, converging to perfect play as available computation and approximation capacity increases. Student of Games reaches strong performance in chess and Go, beats the strongest openly available agent in heads-up no-limit Texas hold'em poker, and defeats the state-of-the-art agent in Scotland Yard, an imperfect information game that illustrates the value of guided search, learning, and game-theoretic reasoning.",Industry,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,"""Player of Games reaches strong performance in chess and Go, beats the strongest openly available agent in heads-up no-limit Texas hold'em poker (Slumbot), and defeats the state-of-the-art agent in Scotland Yard""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
T-NLRv5 XXL,Microsoft,2021-12-03,Language,,5400000000.0,Table 1 of the blogpost,,,,,,Confident,"https://www.marketscreener.com/quote/stock/MICROSOFT-CORPORATION-4835/news/Microsoft-Turing-NLRv5-achieves-new-performance-milestones-37207301/
https://www.microsoft.com/en-us/research/blog/efficiently-and-effectively-scaling-up-language-model-pretraining-for-best-language-representation-model-on-glue-and-superglue/",Microsoft : Turing-NLRv5 achieves new performance milestones,,,"As part of Microsoft AI at Scale(opens in new tab), the Turing family of NLP models are being used at scale across Microsoft to enable the next generation of AI experiences. Today, we are happy to announce that the latest Microsoft Turing model (T-NLRv5) is the state of the art at the top of SuperGLUE and GLUE leaderboards, further surpassing human performance and other models. Notably, T-NLRv5 first achieved human parity on MNLI and RTE on the GLUE benchmark, the last two GLUE tasks which human parity had not yet met. In addition, T-NLRv5 is more efficient than recent pretraining models, achieving comparable effectiveness with 50% fewer parameters and pretraining computing costs.",Industry,"United States of America,Multinational,India,Belgium",SOTA improvement,"Highest score at SuperGLUE leaderboard version 2.0 in terms of CB (CommitmentBank-Av. F1/Accuracy; together with Ernie 3.0) and ReCoRD (Reading Comprehsention with Commonsense Reasoning-F1/Accuracy)
https://super.gluebenchmark.com/leaderboard/ ",,,,,,,,,,,,,,,Unreleased,Unreleased,,"I cannot find repo with model weights or training code though they said:
""We will make T-NLRv5 and its capabilities available in the same way as with other Microsoft Turing models.
We will leverage its increased capabilities to further improve the execution of popular language tasks in A(opens in new tab)zure Cognitive Services(opens in new tab). Customers will automatically benefit from these.

Customers interested in using Turing models for their own specific task can submit a request to join the Turing Private Preview. Finally, we will make T-NLRv5 available to researchers for collaborative projects via the Microsoft Turing Academic Program.""",,
NÜWA,"Microsoft Research,Peking University",2021-11-24,"Multimodal,Vision,Image generation,Video,Language","Image generation,Video generation,Text-to-image,Text-to-video",870000000.0,Section 4.1,7.24598784e+21,"From AI Tracker:
""Compute cost: End of Sec 4.1: ""We pre-train on 64 A100 GPUs for two weeks"". 

Half precision FLOPs of A100: 312000000000000

64 gpus *312000000000000 FLOPs *0.3 utilization * 14 day* (24*60*60) seconds / day=7.245988e+21

","Conceptual Captions (CC3M),Moments in Time,VATEX",,"we first pre-train N  ̈UWA on three
datasets: Conceptual Captions [22] for text-to-image (T2I)
generation, which includes 2.9M text-image pairs, Mo-
ments in Time [26] for video prediction (V2V), which in-
cludes 727K videos, and VATEX dataset [43] for text-to-
video (T2V) generation, which includes 241K text-video
pairs.",Confident,https://arxiv.org/abs/2111.12417,NÜWA: Visual Synthesis Pre-training for Neural visUal World creAtion,258.0,"Chenfei Wu, Jian Liang, Lei Ji, Fan Yang, Yuejian Fang, Daxin Jiang, Nan Duan","This paper presents a unified multimodal pre-trained model called NÜWA that can generate new or manipulate existing visual data (i.e., images and videos) for various visual synthesis tasks. To cover language, image, and video at the same time for different scenarios, a 3D transformer encoder-decoder framework is designed, which can not only deal with videos as 3D data but also adapt to texts and images as 1D and 2D data, respectively. A 3D Nearby Attention (3DNA) mechanism is also proposed to consider the nature of the visual data and reduce the computational complexity. We evaluate NÜWA on 8 downstream tasks. Compared to several strong baselines, NÜWA achieves state-of-the-art results on text-to-image generation, text-to-video generation, video prediction, etc. Furthermore, it also shows surprisingly good zero-shot capabilities on text-guided image and video manipulation tasks. Project repo is this https URL.","Industry,Academia","United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,China",SOTA improvement,"""NÜWA achieves state-of-the-art results on text-to-image generation, text-to-video generation, video prediction, etc""",,,,NVIDIA A100,,,,,,,,,,,Unreleased,Unreleased,,https://github.com/microsoft/NUWA,,
Florence,Microsoft,2021-11-22,Vision,"Image captioning,Visual question answering,Image classification,Object detection",893000000.0,"""Our Florence pretrained model has in total 893M parameters, including the language transformer with 256M parameters and the CoSwin-H transformer with 637M parameters.""",4.831e+22,"""The model takes 10 days to train on 512 NVIDIA A100 GPUs with 40GB memory per GPU.""
512 * 312 teraFLOPS * 10 days * 35% utilization = 4.831e22 FLOP",FLD-900M,900000000.0,,Confident,https://arxiv.org/abs/2111.11432v1,Florence: A New Foundation Model for Computer Vision,758.0,"Lu Yuan, Dongdong Chen, Yi-Ling Chen, Noel Codella, Xiyang Dai, Jianfeng Gao, Houdong Hu, Xuedong Huang, Boxin Li, Chunyuan Li, Ce Liu, Mengchen Liu, Zicheng Liu, Yumao Lu, Yu Shi, Lijuan Wang, JianFeng Wang, Bin Xiao, Zhen Xiao, Jianwei Yang, Michael Zeng, Luowei Zhou, Pengchuan Zhang","Automated visual understanding of our diverse and open world demands computer vision models to generalize well with minimal customization for specific tasks, similar to human vision. Computer vision foundation models, which are trained on diverse, large-scale dataset and can be adapted to a wide range of downstream tasks, are critical for this mission to solve real-world computer vision applications. While existing vision foundation models such as CLIP, ALIGN, and Wu Dao 2.0 focus mainly on mapping images and textual representations to a cross-modal shared representation, we introduce a new computer vision foundation model, Florence, to expand the representations from coarse (scene) to fine (object), from static (images) to dynamic (videos), and from RGB to multiple modalities (caption, depth). By incorporating universal visual-language representations from Web-scale image-text data, our Florence model can be easily adapted for various computer vision tasks, such as classification, retrieval, object detection, VQA, image caption, video retrieval and action recognition. Moreover, Florence demonstrates outstanding performance in many types of transfer learning: fully sampled fine-tuning, linear probing, few-shot transfer and zero-shot transfer for novel images and objects. All of these properties are critical for our vision foundation model to serve general purpose vision tasks. Florence achieves new state-of-the-art results in majority of 44 representative benchmarks, e.g., ImageNet-1K zero-shot classification with top-1 accuracy of 83.74 and the top-5 accuracy of 97.18, 62.4 mAP on COCO fine tuning, 80.36 on VQA, and 87.8 on Kinetics-600.",Industry,"United States of America,Multinational,India,Belgium","Historical significance,SOTA improvement",,,240.0,10 days on 512 A100 40GB,NVIDIA A100 SXM4 40 GB,512.0,,106950.61569328008,,412831.8485448412,,,,,,Unreleased,Unreleased,,,FP16,
BASIC-L,Google,2021-11-19,Vision,Image classification,3070000000.0,2.4B image model + 670M text model,4.12e+22,"6.9k + 1k + 0.8k = 8.7k TPUv4 core-days for BASIC-L, per Table 8

Two cores per chip, and 275 teraflop/s per chip 
(https://cloud.google.com/tpu/docs/system-architecture-tpu-vm#tpu_v4)

275 teraflops * 8700/2 * 24 * 3600 * 0.4 (assumed utilization) = 8.3e22","JFT,ALIGN",6700000000.0,6.7B image-text pairs,Likely,https://arxiv.org/abs/2111.10050,Combined Scaling for Zero-shot Transfer Learning,166.0,"Hieu Pham, Zihang Dai, Golnaz Ghiasi, Kenji Kawaguchi, Hanxiao Liu, Adams Wei Yu, Jiahui Yu, Yi-Ting Chen, Minh-Thang Luong, Yonghui Wu, Mingxing Tan, Quoc V. Le","We present a combined scaling method - named BASIC - that achieves 85.7% top-1 accuracy on the ImageNet ILSVRC-2012 validation set without learning from any labeled ImageNet example. This accuracy surpasses best published similar models - CLIP and ALIGN - by 9.3%. Our BASIC model also shows significant improvements in robustness benchmarks. For instance, on 5 test sets with natural distribution shifts such as ImageNet-{A,R,V2,Sketch} and ObjectNet, our model achieves 84.3% top-1 average accuracy, only a small drop from its original ImageNet accuracy. To achieve these results, we scale up the contrastive learning framework of CLIP and ALIGN in three dimensions: data size, model size, and batch size. Our dataset has 6.6B noisy image-text pairs, which is 4x larger than ALIGN, and 16x larger than CLIP. Our largest model has 3B weights, which is 3.75x larger in parameters and 8x larger in FLOPs than ALIGN and CLIP. Finally, our batch size is 65536 which is 2x more than CLIP and 4x more than ALIGN. We encountered two main challenges with the scaling rules of BASIC. First, the main challenge with implementing the combined scaling rules of BASIC is the limited memory of accelerators, such as GPUs and TPUs. To overcome the memory limit, we propose two simple methods which make use of gradient checkpointing and model parallelism. Second, while increasing the dataset size and the model size has been the defacto method to improve the performance of deep learning models like BASIC, the effect of a large contrastive batch size on such contrastive-trained image-text models is not well-understood. To shed light on the benefits of large contrastive batch sizes, we develop a theoretical framework which shows that larger contrastive batch sizes lead to smaller generalization gaps for image-text models such as BASIC.",Industry,United States of America,SOTA improvement,"SOTA on ImageNet for a model that was not trained on ImageNet images:
""We present a combined scaling method – named BASIC – that achieves 85.7% top-1 accuracy on the ImageNet ILSVRC-2012 validation set without learning from any labeled ImageNet example. This accuracy
surpasses best-published similar models – CLIP and ALIGN – by 9.3%""",,,,Google TPU v4,,,1684.770712126102,,,,,,,"65536, but these are image-text pairs not tokens
""For the batch size, we use 65536 contrastive
learning examples per minibatch""",Unreleased,Unreleased,,,BF16,
Swin Transformer V2 (SwinV2-G),Microsoft Research Asia,2021-11-18,"Vision,Video","Action recognition,Image classification",3000000000.0,,1.1e+21,"trained on ""<0.5k"" TPUv3 core-days per Table 2 (not trained on TPUs, this is a comparison with other papers)

A core is 123/2 teraflops

500 core-days
= 500 * 123/2 trillion * 24 * 3600 * 0.4 utilization
~= 1.1e21",ImageNet21k,,,Confident,https://arxiv.org/abs/2111.09883v2,Swin Transformer V2: Scaling Up Capacity and Resolution,1368.0,"Ze Liu, Han Hu, Yutong Lin, Zhuliang Yao, Zhenda Xie, Yixuan Wei, Jia Ning, Yue Cao, Zheng Zhang, Li Dong, Furu Wei, Baining Guo","Large-scale NLP models have been shown to significantly improve the performance on language tasks with no signs of saturation. They also demonstrate amazing few-shot capabilities like that of human beings. This paper aims to explore large-scale models in computer vision. We tackle three major issues in training and application of large vision models, including training instability, resolution gaps between pre-training and fine-tuning, and hunger on labelled data. Three main techniques are proposed: 1) a residual-post-norm method combined with cosine attention to improve training stability; 2) A log-spaced continuous position bias method to effectively transfer models pre-trained using low-resolution images to downstream tasks with high-resolution inputs; 3) A self-supervised pre-training method, SimMIM, to reduce the needs of vast labeled images. Through these techniques, this paper successfully trained a 3 billion-parameter Swin Transformer V2 model, which is the largest dense vision model to date, and makes it capable of training with images of up to 1,536×1,536 resolution. It set new performance records on 4 representative vision tasks, including ImageNet-V2 image classification, COCO object detection, ADE20K semantic segmentation, and Kinetics-400 video action classification. Also note our training is much more efficient than that in Google's billion-level visual models, which consumes 40 times less labelled data and 40 times less training time. Code is available at \url{this https URL}.",Industry,China,"SOTA improvement,Highly cited","""It set new performance records on 4 representative vision tasks, including ImageNet-V2
image classification, COCO object detection, ADE20K semantic segmentation, and Kinetics-400 video action classification.""",,,,NVIDIA A100 SXM4 40 GB,,,2326.6636503781665,,,,,,,,Open weights (unrestricted),Open source,Open source,"MIT license

https://github.com/microsoft/Swin-Transformer

training code: https://github.com/microsoft/Swin-Transformer/blob/main/get_started.md ",,
ViT-G/14 (LiT),Google Research,2021-11-15,Vision,Image classification,3005000000.0,Table 7,,"They start with the ViT-G/14 image model and train their own text model. ViT-G/14 is 3.4e21. 

They also say ""We use 128 TPU cores by default for the above experiments, and 256 TPU cores for our best run with 18 billion seen image-text pairs"" which may be relevant.","Conceptual Captions 12M (CC12M),YFCC-100M,Unspecified unreleased",4000000000.0,"Largest dataset is ""4 billion image and alt-text pairs"". This is rounded down slightly; the other datasets are much smaller.",Confident,https://arxiv.org/abs/2111.07991v3,Zero-Shot Transfer with Locked-image Text Tuning,461.0,"Xiaohua Zhai, Xiao Wang, Basil Mustafa, Andreas Steiner, Daniel Keysers, Alexander Kolesnikov, Lucas Beyer","This paper presents contrastive-tuning, a simple method employing contrastive training to align image and text models while still taking advantage of their pre-training. In our empirical study we find that locked pre-trained image models with unlocked text models work best. We call this instance of contrastive-tuning ""Locked-image Tuning"" (LiT), which just teaches a text model to read out good representations from a pre-trained image model for new tasks. A LiT model gains the capability of zero-shot transfer to new vision tasks, such as image classification or retrieval. The proposed LiT is widely applicable; it works reliably with multiple pre-training methods (supervised and unsupervised) and across diverse architectures (ResNet, Vision Transformers and MLP-Mixer) using three different image-text datasets. With the transformer-based pre-trained ViT-g/14 model, the LiT model achieves 85.2% zero-shot transfer accuracy on the ImageNet test set, and 82.5% on the challenging out-of-distribution ObjectNet test set.",Industry,"Multinational,United States of America,Canada,Switzerland",SOTA improvement,"""For example, it achieves 82.5% accuracy on the challenging ObjectNet test set [1], outperforming the previous state-of-the-art
method [46] by 10.2%.""",4.5,,,Google TPU v3,,,,,,ViT-G/14,,,,,Unreleased,Open source,,"Apache 2.0 license

https://colab.research.google.com/github/google-research/big_vision/blob/main/big_vision/configs/proj/image_text/lit.ipynb

https://github.com/google-research/big_vision",,
Masked Autoencoders ViT-H,Facebook AI Research,2021-11-11,Vision,"Semantic segmentation,Image classification,Image generation",632000000.0,"Three models:
ViT-B (86M), ViT-L (304M), ViT-H (632M)",4.6e+20,"128 TPU-v3 cores trained for 1600 epochs. Times are given for 800 epochs in Table 2; largest model (ViT-H) took 34.5 hrs for 800.
128 TPU-v3 cores * 0.5 chips/core * 34.5 hours * 2 * 1.23E+14 FLOP/sec / chip * 3600 sec/hour  * 40% utilization = 7.84e20 FLOP

Note that the operations counting method disagrees:
2 × 632000000 connections × 3 × 1281167 training examples × 1600 of epochs  = 7.8e18 FLOP

Manual calculation with `calflops` package roughly agrees with hardware-time calculation: 
286.21 GFLOPS/observation * 1281167 observations * 1600 epochs = 5.86e20 FLOP

See reproduction here: https://colab.research.google.com/drive/1KCsmrfPzT9BgGO_YQthnz4oP3QRqbw5o?usp=sharing

Weighting three estimates equally:
(7.84e20 + 7.8e18 + 5.86e20)/3 = 4.6e20",ImageNet-1k,1281167.0,,Speculative,https://arxiv.org/abs/2111.06377,Masked Autoencoders Are Scalable Vision Learners,5980.0,"Kaiming He, Xinlei Chen, Saining Xie, Yanghao Li, Piotr Dollár, Ross Girshick","This paper shows that masked autoencoders (MAE) are scalable self-supervised learners for computer vision. Our MAE approach is simple: we mask random patches of the input image and reconstruct the missing pixels. It is based on two core designs. First, we develop an asymmetric encoder-decoder architecture, with an encoder that operates only on the visible subset of patches (without mask tokens), along with a lightweight decoder that reconstructs the original image from the latent representation and mask tokens. Second, we find that masking a high proportion of the input image, e.g., 75%, yields a nontrivial and meaningful self-supervisory task. Coupling these two designs enables us to train large models efficiently and effectively: we accelerate training (by 3x or more) and improve accuracy. Our scalable approach allows for learning high-capacity models that generalize well: e.g., a vanilla ViT-Huge model achieves the best accuracy (87.8%) among methods that use only ImageNet-1K data. Transfer performance in downstream tasks outperforms supervised pre-training and shows promising scaling behavior.",Industry,United States of America,"Highly cited,SOTA improvement","""By fine-tuning with a 448 size, we achieve 87.8% accuracy, using only IN1K data. The previous best accuracy, among all methods using only IN1K data, is 87.1% (512 size)... We improve over the state-of-the-art by a nontrivial margin in the highly competitive benchmark of IN1K (no external data). Our result is based on vanilla ViT, and we expect advanced networks will perform better.""

See Table 3",1600.0,69.0,"Table 2 gives wall times for training ViT-L and ViT-H to 800 epochs; later it is stated that the systems are each trained for 1600 epochs.
(34.5 hours / 800 epochs) * 1600 epochs = 69 hours",,,,,"$0.62 / 32 cores of TPU-v3 * (128 cores / 32 cores) = $2.65/hour
CPI conversion to 2020: $2.25
$2.25/hour * 69 hours = $155.25",,ViT-Huge/14,,"UNCERTAIN
128 TPU-v3 cores trained for 1600 epochs. Times are given for 800 epochs in Table 2; largest model (ViT-H) took 34.5 hrs for 800.
128 TPU-v3 cores * 0.5 chips/core * 34.5 hours * 2 * 1.23E+14 FLOP/sec / chip * 3600 sec/hour  * 40% utilization = 7.84e20 FLOP

Note that the operations counting method disagrees:
2 × 632000000 connections × 3 × 1281167 training examples × 1600 of epochs  = 7.8e18 FLOP
",,,Open weights (non-commercial),Open (non-commercial),Open access (non-commercial),"Code at https://github.com/facebookresearch/mae

This project is under the CC-BY-NC 4.0 license

training code: https://github.com/facebookresearch/mae/blob/main/PRETRAIN.md ",,
Projected GAN,Heidelberg University,2021-11-01,Image generation,Image generation,,Possibly calculable from Appendix Table 8,1.05e+19,"""With this setting, each experiment takes roughly 100-200 GPU hours on a NVIDIA V100,
for more details we refer to the appendix.""

""We conduct our experiments on an internal cluster with several nodes, each with up to 8 Quadro RTX
6000 or NVIDIA V100 using PyTorch 1.7.1 and CUDA 11.0.""

In appendix table 7, takes 10.1 seconds per 1k images on 8 Quadro RTX 6000s. Longest training run for Projected GAN appears to be in Figure 4 (left), at 14M images, though this is overtrained and the largest checkpoint used for evaluations was 10M.
10M images * 10.1 s/1000 images * 8 * 3.26e13 FLOP/s * 0.4 = 1.05e19",,3000000.0,They experiment with 22 image datasets. Largest appears to be LSUN-Bedroom at 3M images.,Confident,https://proceedings.neurips.cc/paper/2021/hash/9219adc5c42107c4911e249155320648-Abstract.html,Projected GANs Converge Faster,207.0,"Axel Sauer, Kashyap Chitta, Jens Müller, Andreas Geiger","Generative Adversarial Networks (GANs) produce high-quality images but are
challenging to train. They need careful regularization, vast amounts of compute,
and expensive hyper-parameter sweeps. We make significant headway on these issues by projecting generated and real samples into a fixed, pretrained feature space.
Motivated by the finding that the discriminator cannot fully exploit features from
deeper layers of the pretrained model, we propose a more effective strategy that
mixes features across channels and resolutions. Our Projected GAN improves image quality, sample efficiency, and convergence speed. It is further compatible with
resolutions of up to one Megapixel and advances the state-of-the-art Fréchet Inception Distance (FID) on twenty-two benchmark datasets. Importantly, Projected
GANs match the previously lowest FIDs up to 40 times faster, cutting the wall-clock
time from 5 days to less than 3 hours given the same computational resources.",Academia,Germany,SOTA improvement,"""It is further compatible with resolutions of up to one Megapixel and advances the state-of-the-art Fréchet Inception Distance (FID) on twenty-two benchmark datasets""",,,,"NVIDIA V100,NVIDIA Quadro RTX 6000",,,,,,,,,,,Open weights (unrestricted),Open source,,"MIT license

https://github.com/autonomousvision/projected-gan",,
CodeT5-base,"Salesforce,Nanyang Technological University",2021-11-01,Language,Code generation,220000000.0,"""We build CodeT5 based on Huggingface’s T5 (Raffel et al., 2020) PyTorch implementation and employ two sizes of CodeT5-small (60M) and CodeT5-base (220M)""",1.56e+21,"""We pre-train the model with the denoising objective for 100 epochs and bimodal dual training for further 50 epochs on a cluster of 16 NVIDIA A100 GPUs with 40G memory. The total training time for CodeT5-small and CodeT5- base is 5 and 12 days, respectively""

16 * 312 teraFLOP/s * 12 * 24 * 3600 * 0.3 (utilization assumption) = 1.56e21","CodeSearchNet,BigQuery",,"""In total, we employ around 8.35 million instances for pretraining"" 
Instances meaning code snippets/examples, not tokens.",Likely,https://aclanthology.org/2021.emnlp-main.685/,CodeT5: Identifier-aware Unified Pre-trained Encoder-Decoder Models for Code Understanding and Generation,1211.0,"Yue Wang, Weishi Wang, Shafiq Joty, Steven C.H. Hoi","""Pre-trained models for Natural Languages (NL) like BERT and GPT have been recently shown to transfer well to Programming Languages (PL) and largely benefit a broad set of code-related tasks. Despite their success, most current methods either rely on an encoder-only (or decoder-only) pre-training that is suboptimal for generation (resp. understanding) tasks or process the code snippet in the same way as NL, neglecting the special characteristics of PL such as token types. We present CodeT5, a unified pre-trained encoder-decoder Transformer model that better leverages the code semantics conveyed from the developer-assigned identifiers. Our model employs a unified framework to seamlessly support both code understanding and generation tasks and allows for multi-task learning. Besides, we propose a novel identifier-aware pre-training task that enables the model to distinguish which code tokens are identifiers and to recover them when they are masked. Furthermore, we propose to exploit the user-written code comments with a bimodal dual generation task for better NL-PL alignment. Comprehensive experiments show that CodeT5 significantly outperforms prior methods on understanding tasks such as code defect detection and clone detection, and generation tasks across various directions including PL-NL, NL-PL, and PL-PL. Further analysis reveals that our model can better capture semantic information from code. Our code and pre-trained models are released at https://github.com/salesforce/CodeT5.""","Industry,Academia","United States of America,Singapore",SOTA improvement,"""Extensive experiments show that CodeT5 yields state-of-the-art results on the fourteen sub-tasks in CodeXGLUE.""",150.0,288.0,"""The total training time for CodeT5-small and CodeT5- base is 5 and 12 days, respectively""",NVIDIA A100,,,3114.8690946174474,,,,,,,,Open weights (unrestricted),Open source,Open source,"BSD-3-Clause license

https://github.com/salesforce/CodeT5",FP16,
S4,Stanford University,2021-10-31,Language,Language modeling/generation,249000000.00000003,249M (Table 8),7.8328627e+19,"6 FLOP / token / parameter * 249000000 parameters * 8 GPUs * 8192 tokens/step/GPU * 800000 steps = 7.8328627e+19 FLOP
 
""our S4 model was trained with the simpler AdamW optimizer with a single cosine learning rate cycle with a maximum of 800000 steps.
The initial learning rate was set to 0.0005. We used 8 A100 GPUs with a batch size of 1 per gpu and context size 8192.""

",WikiText-103,103000000.0,,Likely,https://arxiv.org/abs/2111.00396,Efficiently Modeling Long Sequences with Structured State Spaces,1058.0,"Albert Gu, Karan Goel, Christopher Ré","A central goal of sequence modeling is designing a single principled model that can address sequence data across a range of modalities and tasks, particularly on long-range dependencies. Although conventional models including RNNs, CNNs, and Transformers have specialized variants for capturing long dependencies, they still struggle to scale to very long sequences of 10000 or more steps. A promising recent approach proposed modeling sequences by simulating the fundamental state space model (SSM) \( x'(t) = Ax(t) + Bu(t), y(t) = Cx(t) + Du(t) \), and showed that for appropriate choices of the state matrix \( A \), this system could handle long-range dependencies mathematically and empirically. However, this method has prohibitive computation and memory requirements, rendering it infeasible as a general sequence modeling solution. We propose the Structured State Space sequence model (S4) based on a new parameterization for the SSM, and show that it can be computed much more efficiently than prior approaches while preserving their theoretical strengths. Our technique involves conditioning \( A \) with a low-rank correction, allowing it to be diagonalized stably and reducing the SSM to the well-studied computation of a Cauchy kernel. S4 achieves strong empirical results across a diverse range of established benchmarks, including (i) 91\% accuracy on sequential CIFAR-10 with no data augmentation or auxiliary losses, on par with a larger 2-D ResNet, (ii) substantially closing the gap to Transformers on image and language modeling tasks, while performing generation 60× faster (iii) SoTA on every task from the Long Range Arena benchmark, including solving the challenging Path-X task of length 16k that all prior work fails on, while being as efficient as all competitors.",Academia,United States of America,SOTA improvement,"""S4 achieves strong empirical results across a diverse range of established benchmarks, including... SoTA on every task from the Long Range Arena benchmark""",509.02,,,NVIDIA A100,8.0,,,,6453.658675376135,,,,,,Open weights (unrestricted),Open source,Open source,"Apache 2 0
repo with training, inference, checkpoints:
https://github.com/state-spaces/s4",FP16,
EfficientZero,"Tsinghua University,University of California (UC) Berkeley,Shanghai Qi Zhi institute",2021-10-30,Games,Atari,,,,"""Our implementation is computationally friendly. To train an Atari agent for 100k steps, it only needs 4 GPUs to train 7 hours.""",,,,Unknown,https://arxiv.org/abs/2111.00210,Mastering Atari Games with Limited Data,184.0,"Weirui Ye, Shaohuai Liu, Thanard Kurutach, Pieter Abbeel, Yang Gao","Reinforcement learning has achieved great success in many applications. However, sample efficiency remains a key challenge, with prominent methods requiring millions (or even billions) of environment steps to train. Recently, there has been significant progress in sample efficient image-based RL algorithms; however, consistent human-level performance on the Atari game benchmark remains an elusive goal. We propose a sample efficient model-based visual RL algorithm built on MuZero, which we name EfficientZero. Our method achieves 194.3% mean human performance and 109.0% median performance on the Atari 100k benchmark with only two hours of real-time game experience and outperforms the state SAC in some tasks on the DMControl 100k benchmark. This is the first time an algorithm achieves super-human performance on Atari games with such little data. EfficientZero's performance is also close to DQN's performance at 200 million frames while we consume 500 times less data. EfficientZero's low sample complexity and high performance can bring RL closer to real-world applicability. We implement our algorithm in an easy-to-understand manner and it is available at this https URL. We hope it will accelerate the research of MCTS-based RL algorithms in the wider community.","Academia,Academia","China,United States of America,China",SOTA improvement,"""Our method is 176% and 163% better
than the previous SoTA performance, in mean and median human normalized score respectively""",,,,,,,,,,,,,,,Unreleased,Open source,Open source,"GPL-3.0 (copyleft + prohibits incorporating the software into proprietary software)
https://github.com/YeWR/EfficientZero?tab=readme-ov-file",FP16,
Eve,"Harvard Medical School,University of Oxford",2021-10-27,Biology,"Protein pathogenicity prediction,Proteins",15010300.0,"""The Bayesian VAE architecture in EVE is comprised of a symmetric 3-layer encoder & decoder architecture (with 2,000-1,000-300 and 300-1,000-2,000 units respectively) and a latent space of dimension 50 [...] We use a single set of parameters for the encoder (ϕp) and learn a fully-factorized gaussian distribution over the weights of the decoder (θp)""
They train a new VAE for each protein, and it doesn't seem like they trim the input sequence length, so the largest model will be the one trained for the largest input protein. Supplementary materials 1 gives statistics for each protein; the longest is 5202, which would indicate a network of size 15,010,300",,,UniRef100,,,Likely,https://www.nature.com/articles/s41586-021-04043-8#change-history,Disease variant prediction with deep generative models of evolutionary data,411.0,"Jonathan Frazer, Pascal Notin, Mafalda Dias, Aidan Gomez, Joseph K. Min, Kelly Brock, Yarin Gal and Debora S. Marks","Quantifying the pathogenicity of protein variants in human disease-related genes would have a marked effect on clinical decisions, yet the overwhelming majority (over 98%) of these variants still have unknown consequences1–3. In principle, computational methods could support the large-scale interpretation of genetic variants. However, state-of-the-art methods4–10 have relied on training machine learning models on known disease labels. As these labels are sparse, biased and of variable quality, the resulting models have been considered insufficiently reliable11. Here we propose an approach that leverages deep generative models to predict variant pathogenicity without relying on labels. By modelling the distribution of sequence variation across organisms, we implicitly capture constraints on the protein sequences that maintain fitness. Our model EVE (evolutionary model of variant effect) not only outperforms computational approaches that rely on labelled data but also performs on par with, if not better than, predictions from high-throughput experiments, which are increasingly used as evidence for variant classifcation12–16. We predict the pathogenicity of more than 36 million variants across 3,219 disease genes and provide evidence for the classification of more than 256,000 variants of unknown significance. Our work suggests that models of evolutionary information can provide valuable independent evidence for variant interpretation that will be widely useful in research and clinical settings.","Academia,Academia","United States of America,United Kingdom of Great Britain and Northern Ireland",SOTA improvement,"""Our model EVE (evolutionary model of variant effect) not only outperforms computational approaches that rely on labelled data but also performs on par with, if not better than, predictions from high-throughput experiments, which are increasingly used as evidence for variant classification"" [Abstract] - SOTA improvement for very specific task",,,,,,,,,,,,,,,Unreleased,Open source,Open source,"The model code is available at https://github.com/OATML-Markslab/EVE
MIT license",,
base LM+GNN+kNN,"Shannon.AI,Nanjing University,Nanyang Technological University,Zhejiang University (ZJU)",2021-10-17,Language,Language modeling,274000000.0,"274M (table 1)

""We use the base version of deep Transformer language model with adaptive embeddings (Baevski & Auli, 2018) as our base LM. This model has 16 decoder layers. The dimensionality of word representations is 1,024, the number of multi-attention heads is 16, and the inner dimensionality of feedforward layers is 4,096.""",5.2587456e+19,"base model compute: 4.47*10^19 FLOP 
fine-tune lower bound estimation: 1.69332e+17 FLOP -> 4.47*10^19 FLOP + 1.69332e+17 FLOP = 4.4869332e+19 FLOP total 
fine-tune upper bound estimation: 1.69332e+19 FLOP -> 4.47*10^19 FLOP + 1.69332e+19 FLOP = 6.16332e+19 FLOP total

geometric mean: sqrt(4.4869332e+19*6.16332e+19) = 5.2587456e+19 
",WikiText-103,,"""During training, data is partitioned into blocks of 3,072 contiguous
tokens.""",Confident,https://arxiv.org/abs/2110.08743,GNN-LM: Language Modeling based on Global Contexts via GNN,35.0,"Yuxian Meng, Shi Zong, Xiaoya Li, Xiaofei Sun, Tianwei Zhang, Fei Wu, Jiwei Li","Inspired by the notion that ``{\it to copy is easier than to memorize}``, in this work, we introduce GNN-LM, which extends the vanilla neural language model (LM) by allowing to reference similar contexts in the entire training corpus. We build a directed heterogeneous graph between an input context and its semantically related neighbors selected from the training corpus, where nodes are tokens in the input context and retrieved neighbor contexts, and edges represent connections between nodes. Graph neural networks (GNNs) are constructed upon the graph to aggregate information from similar contexts to decode the token. This learning paradigm provides direct access to the reference contexts and helps improve a model's generalization ability. We conduct comprehensive experiments to validate the effectiveness of the GNN-LM: GNN-LM achieves a new state-of-the-art perplexity of 14.8 on WikiText-103 (a 3.9 point improvement over its counterpart of the vanilla LM model), and shows substantial improvement on One Billion Word and Enwiki8 datasets against strong baselines. In-depth ablation studies are performed to understand the mechanics of GNN-LM. \footnote{The code can be found at this https URL","Industry,Academia,Academia,Academia","China,China,Singapore,China",SOTA improvement,,,,,,,,,,,Transformer (Adaptive Input Embeddings) WT103,,"6 FLOP / token / parameter * 274000000 parameters * 103000000 tokens * 1 epoch [assumed for lower bound] = 1.69332e+17 FLOP

upper bound [assuming 100 epochs]: 1.69332e+19 FLOP",,,Open weights (unrestricted),Open source,Open source,"MIT License, training/eval code and weights
https://github.com/ShannonAI/GNN-LM",FP16,
T0-XXL,"Hugging Face,Brown University",2021-10-15,Language,Language modeling,11000000000.0,"""Unless specified otherwise, we use the XXL version which
has 11B parameters.""",9.1819e+20,"From Table 1 and section B.1, a single run uses 27 hours of a 512 core slice of a TPU-v3 pod. 
512 * 0.5 * 1.23e14 * 3600 * 27 * 0.3 = 9.18e20
(cores) * (chip/core) * (FLOP/chip-sec) * (sec/hour) * (hours) * (utilization assumption)",P3 (Public Pool of Prompts),,"Multitask - 12 tasks, 62 datasets. See fig 2 for details. 

This is going to be a nightmare to figure out! TODO figure out the sizes of each of these 62 datasets!

All datasets from here: https://arxiv.org/pdf/2109.02846.pdf

From B.2: ""across all of our training runs (including preliminary test experiments not described in this paper) we trained for 250 billion tokens""",Confident,https://arxiv.org/abs/2110.08207,Multitask Prompted Training Enables Zero-Shot Task Generalization,1526.0,"Victor Sanh, Albert Webson, Colin Raffel, Stephen H. Bach, Lintang Sutawika, Zaid Alyafeai, Antoine Chaffin, Arnaud Stiegler, Teven Le Scao,  Arun Raja, Manan Dey, M Saiful Bari, Canwen Xu, Urmish Thakker, Shanya Sharma, Eliza Szczechla, Taewoon Kim, Gunjan Chhablani, Nihal V. Nayak, Debajyoti Datta, Jonathan Chang, Mike Tian-Jian Jiang, Han Wang, Matteo Manica, Sheng Shen, Zheng-Xin Yong, Harshit Pandey, Michael McKenna, Rachel Bawden, Thomas Wang, Trishala Neeraj, Jos Rozen, Abheesht Sharma, Andrea Santilli, Thibault Fevry, Jason Alan Fries, Ryan Teehan, Tali Bers, Stella Biderman, Leo Gao, Thomas Wolf, Alexander M. Rush","Large language models have recently been shown to attain reasonable zero-shot generalization on a diverse set of tasks (Brown et al., 2020). It has been hypothesized that this is a consequence of implicit multitask learning in language models' pretraining (Radford et al., 2019). Can zero-shot generalization instead be directly induced by explicit multitask learning? To test this question at scale, we develop a system for easily mapping any natural language tasks into a human-readable prompted form. We convert a large set of supervised datasets, each with multiple prompts with diverse wording. These prompted datasets allow for benchmarking the ability of a model to perform completely held-out tasks. We fine-tune a pretrained encoder-decoder model (Raffel et al., 2020; Lester et al., 2021) on this multitask mixture covering a wide variety of tasks. The model attains strong zero-shot performance on several standard datasets, often outperforming models up to 16x its size. Further, our approach attains strong performance on a subset of tasks from the BIG-bench benchmark, outperforming models up to 6x its size. All trained models are available at this https URL and all prompts are available at this https URL.","Industry,Academia","Multinational,United States of America,United States of America",Highly cited,"""we compare T0 to the zero-shot performance of the largest language models available as of writing, i.e., various GPT-3 models up to 175B parameters...
We find that T0 matches or exceeds the performance
of all GPT-3 models on 9 out of 11 held-out datasets""",,27.0,"For main model, 27 hours (Table 1)

Total time taken to train for all experiments was 270 hours ""These training runs corresponded to about 270 total hours of training on a v3-512 Cloud TPU device.""",Google TPU v3,256.0,,11671.840843653788,,113624.87114581963,T5-11B,,,,,Open weights (unrestricted),Open source,Open source,"Apache-2.0 license
https://github.com/bigscience-workshop/t-zero

training scripts: https://github.com/bigscience-workshop/t-zero/blob/master/training/README.md ",,
Yuan 1.0,Inspur,2021-10-12,Language,Language modeling,245730000000.0,"Table 2: Parameters of Yuan models.
""Parameters (billion)""",3.5380000000001e+23,"Table 9: 4095 petaFLOPS-days which equals 3.538*10^23 FLOP

https://www.wolframalpha.com/input?i=4095+petaFLOPS+*+1+day
","Common Crawl,Wikipedia,Sogue News",1000000000000.0,"""Yuan 1.0 was trained on a new Chinese dataset of 5TB high-quality text that was built on 850TB raw data from Internet.""

1 GB ~ 167M words in English or 333M words in Chinese. For a mixed dataset of mostly Chinese, 5TB may be equivalent to around 1T words.

Table 2: 180B training tokens",Confident,https://arxiv.org/abs/2110.04725,Yuan 1.0: Large-Scale Pre-trained Language Model in Zero-Shot and Few-Shot Learning,51.0,"Shaohua Wu, Xudong Zhao, Tong Yu, Rongguo Zhang, Chong Shen, Hongli Liu, Feng Li, Hong Zhu, Jiangang Luo, Liang Xu, Xuanwei Zhang, Jun Liu","Recent work like GPT-3 has demonstrated excellent performance of Zero-Shot and Few-Shot learning on many natural language processing (NLP) tasks by scaling up model size, dataset size and the amount of computation. However, training a model like GPT-3 requires huge amount of computational resources which makes it challengeable to researchers. In this work, we propose a method that incorporates large-scale distributed training performance into model architecture design. With this method, Yuan 1.0, the current largest singleton language model with 245B parameters, achieves excellent performance on thousands GPUs during training, and the state-of-the-art results on NLP tasks. A data processing method is designed to efficiently filter massive amount of raw data. The current largest high-quality Chinese corpus with 5TB high quality texts is built based on this method. In addition, a calibration and label expansion method is proposed to improve the Zero-Shot and Few-Shot performance, and steady improvement is observed on the accuracy of various tasks. Yuan 1.0 presents strong capacity of natural language generation, and the generated articles are difficult to distinguish from the human-written ones.",Industry,China,SOTA improvement,"""The zero-shot average scores of both LM and PLM are superior to the SOTA one. On Csldcp, Tnews and Iflytek tasks, we surpass the zero-shot SOTA by a large margin""",,,,,2128.0,0.45,,,,,,,6881280.0,"Table 2. Batch size 3360, sequence length 2048. 3360*2048 = 6881280",API access,Unreleased,,https://github.com/Shawn-IEITSystems/Yuan-1.0,FP16,True
Megatron-Turing NLG 530B,"Microsoft,NVIDIA",2021-10-11,Language,Language modeling,530000000000.0,,8.586e+23,"https://www.lesswrong.com/posts/bGuMrzhJdENCo8BxX/nvidia-and-microsoft-releases-530b-parameter-transformer?commentId=HSJSNspKp94tFcSCx

source: https://lair.lighton.ai/akronomicon/
9938 PF-days * 3600 * 24 * 10^15  = 8.586432e+23

6ND estimate: 6 * 530B * 270B = 8.586000e+23","Common Crawl,The Pile,CC-Stories,Realnews",270000000000.0,"""Our training dataset consists of 339 billion tokens and we
trained MT-NLG on 270 billions tokens by blending the 15 training datasets as described above. We also set aside 2% of our data for validation.""

1 token ~ 0.75 words",Confident,https://arxiv.org/abs/2201.11990,"Using DeepSpeed and Megatron to Train Megatron-Turing NLG 530B, A Large-Scale Generative Language Model",657.0,"Shaden Smith, Mostofa Patwary, Brandon Norick, Patrick LeGresley, Samyam Rajbhandari, Jared Casper, Zhun Liu, Shrimai Prabhumoye, George Zerveas, Vijay Korthikanti, Elton Zhang, Rewon Child, Reza Yazdani Aminabadi, Julie Bernauer, Xia Song, Mohammad Shoeybi, Yuxiong He, Michael Houston, Saurabh Tiwary, Bryan Catanzaro","Pretrained general-purpose language models can achieve state-of-the-art accuracies in various natural language processing domains by adapting to downstream tasks via zero-shot, few-shot and fine-tuning techniques. Because of their success, the size of these models has increased rapidly, requiring high-performance hardware, software, and algorithmic techniques to enable training such large models. As the result of a joint effort between Microsoft and NVIDIA, we present details on the training of the largest monolithic transformer based language model, Megatron-Turing NLG 530B (MT-NLG), with 530 billion parameters. In this paper, we first focus on the infrastructure as well as the 3D parallelism methodology used to train this model using DeepSpeed and Megatron. Next, we detail the training process, the design of our training corpus, and our data curation techniques, which we believe is a key ingredient to the success of the model. Finally, we discuss various evaluation results, as well as other interesting observations and new properties exhibited by MT-NLG. We demonstrate that MT-NLG achieves superior zero-, one-, and few-shot learning accuracies on several NLP benchmarks and establishes new state-of-the-art results. We believe that our contributions will help further the development of large-scale training infrastructures, large-scale language models, and natural language generations.","Industry,Industry","United States of America,Multinational,India,Belgium,United States of America","SOTA improvement,Training cost","The 105-layer, transformer-based MT-NLG improved upon the prior state-of-the-art models in zero-, one-, and few-shot settings",,770.0,"Total compute was 1.17*10^24 FLOP.
They don't directly report the utilization and training speed when using the full Selene supercomputer with 560 DGX * 8 A100/DGX = 4480 GPUs. See section 2.3 Hardware Setup.

At 280 DGX, the utilization is 126/312 = 40% and a batch takes 60 seconds; at 350, it is 39% for 50 seconds; at 420, it is 36% for 44 seconds.

The overall utilization was 30.2% and the full cluster has 560 DGX. Dividing the total compute by the total performance of 4480 A100 at 30.2% utilization gives 770 hours.",NVIDIA A100 SXM4 80 GB,4480.0,0.302,3714250.001,,3615658.868639838,,,,3932160.0,"""The sequence length is 2048 and the global batch size is 1920. We used 8-way tensor and 35-way pipeline parallelism. The learning rate is 5.0e −5 . We used one billion tokens for linear learning rate warmup. We used cosine decay for the learning rate targeting to reach 10% of its value over 340 billion tokens. Over the first 12 billion tokens, we started at a batch size of 32 and gradually increased the batch size in increments of 32, until we reach the final batch size of 1920"" 

Final batch size is 1920 * 2048 = 3932160",Unreleased,Unreleased,,,BF16,True
AlphaFold-Multimer,"Google DeepMind,DeepMind",2021-10-04,Biology,"Protein folding prediction,Proteins",,"""Multiple changes to the AlphaFold system were made to adapt it to training on protein complexes, which are detailed below. Summarizing briefly, we [...] make various small adjustments to the structure losses and the model architecture."" [2. Methods]

Hence, this will have approximately the same amount of parameters as AlphaFold2",4.35e+21,"Section: 2.5. Training Regimen
""We train the model to convergence (approximately 10M samples, for 2 weeks) across 128 TPUv3 cores [...]. Then we [...] run two separate fine-tuning stages (one further day of training each)""

Assuming: FP16 and utilization 0.4

Calculation: (14+2) days * 24 hours/day * 60 min/hour * 60 sec/min * (128 TPU cores/2 cores per chip) * 1.23e14 FLOP/s per chip * 0.4 utilization = 4.35e21 FLOPs",PDB (Protein Data Bank),147328.0,"See: https://www.rcsb.org/stats/growth/growth-released-structures for 2018

""We train the model to convergence (approximately 10M samples, for 2 weeks) across 128 TPUv3 cores with a batch size of 1 per TPU core. Then we halve the learning rate and double the number of sequences fed into the MSA stack before running two separate fine-tuning stages (one further day of training each)""

10000000/147328 ~ 68 epochs",Confident,https://www.biorxiv.org/content/10.1101/2021.10.04.463034v1,Protein complex prediction with AlphaFold-Multimer,1762.0,"Richard Evans, Michael O’Neill, Alexander Pritzel, Natasha Antropova, Andrew Senior, Tim Green, Augustin Žídek, Russ Bates, Sam Blackwell, Jason Yim, Olaf Ronneberger, Sebastian Bodenstein, Michal Zielinski, Alex Bridgland, Anna Potapenko, Andrew Cowie, Kathryn Tunyasuvunakool, Rishub Jain, Ellen Clancy, Pushmeet Kohli, John Jumper and Demis Hassabis","While the vast majority of well-structured single protein chains can now be predicted to high accuracy due to the recent AlphaFold [1] model, the prediction of multi-chain protein complexes remains a challenge in many cases. In this work, we demonstrate that an AlphaFold model trained specifically for multimeric inputs of known stoichiometry, which we call AlphaFold-Multimer, significantly increases accuracy of predicted multimeric interfaces over input-adapted single-chain AlphaFold while maintaining high intra-chain accuracy. On a benchmark dataset of 17 heterodimer proteins without templates (introduced in [2]) we achieve at least medium accuracy (DockQ [3] ≥ 0.49) on 14 targets and high accuracy (DockQ ≥ 0.8) on 6 targets, compared to 9 targets of at least medium accuracy and 4 of high accuracy for the previous state of the art system (an AlphaFold-based system from [2]). We also predict structures for a large dataset of 4,433 recent protein complexes, from which we score all non-redundant interfaces with low template identity. For heteromeric interfaces we successfully predict the interface (DockQ ≥ 0.23) in 67% of cases, and produce high accuracy predictions (DockQ ≥ 0.8) in 23% of cases, an improvement of +25 and +11 percentage points over the flexible linker modification of AlphaFold [4] respectively. For homomeric interfaces we successfully predict the interface in 69% of cases, and produce high accuracy predictions in 34% of cases, an improvement of +5 percentage points in both instances.","Industry,Industry","United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France,United Kingdom of Great Britain and Northern Ireland","Highly cited,SOTA improvement","""On a benchmark dataset of 17 heterodimer proteins without templates (introduced in [2]) we achieve at least medium accuracy (DockQ [3] ≥ 0.49) on 14 targets and high accuracy (DockQ ≥ 0.8) on 6 targets, compared to 9 targets of at least medium accuracy and 4 of high accuracy for the previous state of the art system (an AlphaFold-based system from [2])""

""For heteromeric interfaces we successfully predict the interface (DockQ ≥ 0.23) in 67% of cases, and produce high accuracy predictions (DockQ ≥ 0.8) in 23% of cases, an improvement of +25 and +11 percentage points over the flexible linker modification of AlphaFold [4] respectively""

""For homomeric interfaces we successfully predict the interface in 69% of cases, and produce high accuracy predictions in 34% of cases, an improvement of +5 percentage points in both instances""",68.0,384.0,"Section: 2.5. Training Regimen
""We train the model to convergence (approximately 10M samples, for 2 weeks) across 128 TPUv3 cores [...]. Then we [...] run two separate fine-tuning stages (one further day of training each)""",Google TPU v3,64.0,,7966.2330131223,,28413.1771135238,AlphaFold 2,,,,,Open weights (unrestricted),Unreleased,Open source,"While the AlphaFold code is licensed under the Apache 2.0 License, the AlphaFold parameters and CASP15 prediction data are made available under the terms of the CC BY 4.0 license

https://github.com/google-deepmind/alphafold",,
TrOCR,"Beihang University,Microsoft Research Asia",2021-09-21,Vision,Character recognition,558000000.0,558M table 5,,May be computed from github and datasets details. Uses pretrained BEiT and DeiT models.,,721200000.0,"The input data to the model are images.
684M + 17.9M + 3.3M + 16M",Confident,https://arxiv.org/abs/2109.10282,TrOCR: Transformer-based Optical Character Recognition with Pre-trained Models,246.0,"Minghao Li, Tengchao Lv, Jingye Chen, Lei Cui, Yijuan Lu, Dinei Florencio, Cha Zhang, Zhoujun Li, Furu Wei","Text recognition is a long-standing research problem for document digitalization. Existing approaches are usually built based on CNN for image understanding and RNN for char-level text generation. In addition, another language model is usually needed to improve the overall accuracy as a post-processing step. In this paper, we propose an end-to-end text recognition approach with pre-trained image Transformer and text Transformer models, namely TrOCR, which leverages the Transformer architecture for both image understanding and wordpiece-level text generation. The TrOCR model is simple but effective, and can be pre-trained with large-scale synthetic data and fine-tuned with human-labeled datasets. Experiments show that the TrOCR model outperforms the current state-of-the-art models on the printed, handwritten and scene text recognition tasks. The TrOCR models and code are publicly available at https://aka.ms/trocr","Academia,Industry","China,China",SOTA improvement,"from conclusion ""Experiment results show that TrOCR achieves state-of-the-art results on printed, handwritten and scene text recognition with just a simple encoder-decoder model, without any post-processing steps""",,,,NVIDIA V100,32.0,,,,19378.229980216885,,,,,,Open weights (unrestricted),Open source,Open source,MIT: https://github.com/microsoft/unilm/tree/master/trocr,,
PLATO-XL,Baidu,2021-09-20,Language,Language modeling,11000000000.0,,9.9e+21,"""In PLATO-XL, each model was trained for a total of 150B tokens, with
a batch size of 2M tokens.""

150B * 11B * 6 = 9.9e21",,150000000000.0,"""In PLATO-XL, each model was trained for a total of 150B tokens, with
a batch size of 2M tokens.""
811M English and 1.2B Chinese (context, response) samples. So if the average response is at least 75 tokens, the 150B tokens seen in training don't include repeat tokens. This seems plausible.",Confident,https://arxiv.org/abs/2109.09519,PLATO-XL: Exploring the Large-scale Pre-training of Dialogue Generation,57.0,"Siqi Bao, Huang He, Fan Wang, Hua Wu, Haifeng Wang, Wenquan Wu, Zhihua Wu, Zhen Guo, Hua Lu, Xinxian Huang, Xin Tian, Xinchao Xu, Yingzhan Lin, Zheng-Yu Niu","To explore the limit of dialogue generation pre-training, we present the models of PLATO-XL with up to 11 billion parameters, trained on both Chinese and English social media conversations. To train such large models, we adopt the architecture of unified transformer with high computation and parameter efficiency. In addition, we carry out multi-party aware pre-training to better distinguish the characteristic information in social media conversations. With such designs, PLATO-XL successfully achieves superior performances as compared to other approaches in both Chinese and English chitchat. We further explore the capacity of PLATO-XL on other conversational tasks, such as knowledge grounded dialogue and task-oriented conversation. The experimental results indicate that PLATO-XL obtains state-of-the-art results across multiple conversational tasks, verifying its potential as a foundation model of conversational AI.",Industry,China,SOTA improvement,,,,,NVIDIA V100,256.0,,,,155029.29220816068,,,,,,Open weights (unrestricted),Unreleased,Open source,"apache 2.0
https://github.com/PaddlePaddle/Knover/tree/develop/projects/PLATO-XL",,
HyperCLOVA 204B,NAVER,2021-09-10,Language,Language modeling/generation,204000000000.0,https://www.navercorp.com/navercorp_/ir/announce/2023/NAVER_CEO%20letter%20to%20shareholders_Aug%202023_Eng.pdf,2.0000000001e+23,"Estimations for 82B model (marked as lower bound estimations)

""For experiments in Section 4, the model trained with 150B is used for fair comparison, because not all models are finished training at the same iteration. However, experiments in Section 5.2 use the model trained with 300B tokens, as HyperCLOVA Studio provided the 39B and 82B models trained with 300B tokens.""

82e9 connections * 2 FLOP/connection * 300e9 tokens * 3 backward pass = 1.476e23 FLOP

Calculation using GPU time corroborates this:
- ""Our model is based on megatron-LM (Shoeybi et al., 2019) and trained on the NVIDIA Superpod, which includes 128 strongly clustered DGX servers with 1,024 A100 GPUs.""
- ""It takes 13.4 days to train a model with 82B parameters with 150B tokens."" Assume 300B tokens takes twice as long, 26.8 days.
- Assume the default of 30% utilization rate for large language models.

1024 A100 GPUs * 312e12 FLOP/second * 0.3 utilization * 26.8 days * 24 * 60 * 60 seconds/day = 2.219e+23 FLOP",Unspecified unreleased,560000000000.0,"https://twitter.com/arankomatsuzaki/status/1397583304610783238
https://venturebeat.com/ai/naver-trained-a-gpt-3-like-korean-language-model/",Speculative,https://aibusiness.com/nlp/south-korea-s-naver-unveils-hyperscale-ai-platform-language-model-with-more-parameters-than-gpt-3,"South Korea's Naver unveils 'hyperscale AI' platform, language model with more parameters than GPT-3",92.0,,,Industry,Korea (Republic of),SOTA improvement,"""HyperCLOVA with our training configuration shows state-of-the-art in-context zero-shot and few-shot learning performances on various downstream tasks in Korean""",,,,NVIDIA A100,,,426358.7992,,,,,,,,Hosted access (no API),Unreleased,Unreleased,,,True
PermuteFormer,Peking University,2021-09-06,Language,Language modeling,149697024.0,"Parameterization appears to be similar to a vanilla transformer. 6 layers, hidden dimension of 512, feed forward dimension of 1024, 8 attention heads. This would imply 20,447,232 parameters without embedding weights, and 512*vocab_size embedding weights (assuming tied embedding and unembedding projections)

They appear to use word-level tokenization: ""We evaluate unidirectional PermuteFormer on WikiText-103 (Merity et al., 2017). It is a language modeling dataset with about 103 million tokens,"" and I confirmed that word-level tokenization results in about 102M words across train-test-validation.

If this is the case, there are 267,735 unique words, so the embedding layer alone would be 137,080,320 parameters, for a total of 149,697,024.",2.775e+18,"6 * (30 * 103M) * 149,697,024 = 2.775e18

This seems a bit small relative to their statement: ""It takes about 10 days on 8 V100 GPUs to get all the figures in this paper"" which suggests about 2.7e20 FLOPs at 30% MFU.

Table 2 indicates that Performer and PermuteFormer take 0.23x to 0.58x as long to train as a Transformer model. Figure 2 appears to be the most compute intensive figure, and would take about 4 * (2.775e18) + 1 * (2.775e18 / 0.365) = 1.9e19 FLOPs. ",WikiText-103,103000000.0,WikiText-103 is about 103M tokens,Speculative,https://arxiv.org/abs/2109.02377,PermuteFormer: Efficient Relative Position Encoding for Long Sequences,20.0,Peng Chen,"A recent variation of Transformer, Performer, scales Transformer to longer sequences with a linear attention mechanism. However, it is not compatible with relative position encoding, which has advantages over absolute position encoding. In this paper, we discuss possible ways to add relative position encoding to Performer. Based on the analysis, we propose PermuteFormer, a Performer-based model with relative position encoding that scales linearly on long sequences. PermuteFormer applies position-dependent transformation on queries and keys to encode positional information into the attention module. This transformation is carefully crafted so that the final output of self-attention is not affected by absolute positions of tokens. PermuteFormer introduces negligible computational overhead by design that it runs as fast as Performer. We evaluate PermuteFormer on Long-Range Arena, a dataset for long sequences, as well as WikiText-103, a language modeling dataset. The experiments show that PermuteFormer uniformly improves the performance of Performer with almost no computational overhead and outperforms vanilla Transformer on most of the tasks.",Academia,China,SOTA improvement,"""Results show that
PermuteFormer uniformly improves the performance of Performer, accelerates convergence, and
achieves state-of-the-art on some tasks.""",30.0,,Running all code needed to produce plots took about 10 days on 8 V100s,NVIDIA V100,8.0,,,,4846.17604411253,,,,,,Unreleased,Open source,Open source,no specific license. training code: https://github.com/cpcp1998/PermuteFormer/tree/master/language_model ,,
MEB,Microsoft,2021-09-04,"Search,Language",Search,135000000000.0,See paper title,,,,,"""MEB uses three years of search logs from Bing as training data."" TODO convert",,https://www.microsoft.com/en-us/research/blog/make-every-feature-binary-a-135b-parameter-sparse-neural-network-for-massively-improved-search-relevance/,Make Every feature Binary: A 135B parameter sparse neural network for massively improved search relevance,26.0,"W Liu, Z Wang, X Liu, N Zeng, Y Liu, FE Alsaadi","Recently, Transformer-based deep learning models like GPT-3 have been getting a lot of attention in the machine learning world. These models excel at understanding semantic relationships, and they have contributed to large improvements in Microsoft Bing’s search experience and surpassing human performance on the SuperGLUE academic benchmark. However, these models can fail to capture more nuanced relationships between query and document terms beyond pure semantics.

In this blog post, we are introducing “Make Every feature Binary” (MEB), a large-scale sparse model that complements our production Transformer models to improve search relevance for Microsoft customers using AI at Scale. To make search more accurate and dynamic, MEB better harnesses the power of large data and allows for an input feature space with over 200 billion binary features that reflect the subtle relationships between search queries and documents.",Industry,"United States of America,Multinational,India,Belgium",Significant use,"""MEB is running in production for 100 percent of Bing searches, in all regions and languages.""",,,,,,,,,,,,,,,Hosted access (no API),Unreleased,,"""MEB is running in production for 100 percent of Bing searches, in all regions and languages. It is the largest universal model we’re serving at Microsoft""",,
FLAN 137B,Google Research,2021-09-03,Language,"Language modeling,Question answering,Language modeling/generation",137000000000.0,"Abstract:
""We take a 137B parameter pretrained language model and instruction tune it on
over 60 NLP datasets verbalized via natural language instruction templates. We
evaluate this instruction-tuned model, which we call FLAN, on unseen task types.""

Many models seem to be using the same 137B base transformer model?",2.047e+24,"From section 2.4: Pretraining was done over 2.49T tokens.
6 * 2.49T * 137B = 2.047e24 
Also, ""instruction tuning takes around 60 hours on a TPUv3 with 128 cores."" 128 TPUv3 cores = 64 TPUv3 chips. Environmental considerations section claims this took less than 2% of total time
1.23e14 * 64 * 60 * 3600 * 0.3 = 5.10e20","Wikipedia,Unspecified unreleased",2490000000000.0,"""Model architecture and pretraining. In our experiments, we use LaMDA-PT, a dense left-to-right, decoder-only transformer language model of 137B parameters (Thoppilan et al., 2022). This model is pretrained on a collection of web documents (including those with computer code), dialog data, and Wikipedia, tokenized into 2.49T BPE tokens with a 32k vocabulary using the  SentencePiece library (Kudo & Richardson, 2018). Around 10% of the pretraining data was non-English. Note that LaMDA-PT only has language model pretraining (c.f. LaMDA, which was finetuned for dialog).""",Confident,https://arxiv.org/abs/2109.01652,Finetuned Language Models Are Zero-Shot Learners,2994.0,"Jason Wei, Maarten Bosma, Vincent Y. Zhao, Kelvin Guu, Adams Wei Yu, Brian Lester, Nan Du, Andrew M. Dai, and Quoc V. Le","This paper explores a simple method for improving the zero-shot learning abilities of language models. We show that instruction tuning—finetuning language models on a collection of datasets described via instructions—substantially improves zeroshot performance on unseen tasks. We take a 137B parameter pretrained language model and instruction tune it on over 60 NLP datasets verbalized via natural language instruction templates. We evaluate this instruction-tuned model, which we call FLAN, on unseen task types. FLAN substantially improves the performance of its unmodified counterpart and surpasses zero-shot 175B GPT-3 on 20 of 25 datasets that we evaluate. FLAN even outperforms few-shot GPT-3 by a large margin on ANLI, RTE, BoolQ, AI2-ARC, OpenbookQA, and StoryCloze. Ablation studies reveal that number of finetuning datasets, model scale, and natural language instructions are key to the success of instruction tuning.",Industry,"Multinational,United States of America,Canada,Switzerland","Highly cited,SOTA improvement","Abstract: 
""FLAN substantially improves the performance of its unmodified counterpart and surpasses zero-shot 175B GPT-3 on 20 of 25 datasets that we evaluate.""",1.0,,,Google TPU v3,,,230526.76439336664,,,LaMDA,,"""In our experiments, we use LaMDA-PT, a dense left-to-right,
decoder-only transformer language model of 137B parameters (Thoppilan et al., 2022) [...] Note that LaMDA-PT only has language model pretraining (c.f. LaMDA, which was finetuned for dialog)."" In our entry for LaMDA we only measured pre-training compute, so we just specify LaMDA as the base model of FLAN 137B.",,,Unreleased,Unreleased,,,,True
XLMR-XXL,Facebook AI Research,2021-08-17,Language,"Translation,Language modeling/generation",10700000000.0,"Section 2.1:
"" ...XLM-RXXL (L= 48, H = 4096, A = 32, 10.7B params)""",3.366e+22,"Trained for 500k steps at a batch size of 2048 with sequence length of 512 = 524,288,000,000 tokens seen.
6 * 10700000000 * 524,288,000,000 = 3.366e22",CC100,167000000000.0,"""We pretrain the models on the CC100 dataset, which corresponds to 167B tokens in 100 languages.""",Confident,https://arxiv.org/abs/2105.00572,Larger-Scale Transformers for Multilingual Masked Language Modeling,107.0,"Naman Goyal, Jingfei Du, Myle Ott, Giri Anantharaman, Alexis Conneau","Recent work has demonstrated the effectiveness of cross-lingual language model pretraining for cross-lingual understanding. In this study, we present the results of two larger multilingual masked language models, with 3.5B and 10.7B parameters. Our two new models dubbed XLM-R XL and XLM-R XXL outperform XLM-R by 1.8% and 2.4% average accuracy on XNLI. Our model also outperforms the RoBERTa-Large model on several English tasks of the GLUE benchmark by 0.3% on average while handling 99 more languages. This suggests pretrained models with larger capacity may obtain both strong performance on high-resource languages while greatly improving low-resource languages. We make our code and models publicly available.",Industry,United States of America,SOTA improvement,"Abstract:
""Our model also outperforms
the RoBERTa-Large model on several English tasks of the GLUE benchmark by 0.3% on average while handling 99 more languages.""",3.1394491018,,,,,,,,,,,,1048576.0,Batches of 2048 with sequence length of 512,Open weights (unrestricted),Unreleased,Open source,https://github.com/facebookresearch/fairseq/tree/main/examples/xlmr,,
DNABERT,Northeastern University,2021-08-15,Biology,Protein or nucleotide language model (pLM/nLM),110000000.0,"""We used the same model architecture as the BERT base, which consists of 12 Transformer layers with 768 hidden units and 12 attention heads in each layer, and the same parameter setting across all the four DNABERT models during pre-training""

Known to have 110 million parameters as reported in: https://arxiv.org/pdf/1810.04805v2.pdf
""We primarily report results on two model sizes: BERTBASE (L=12, H=768, A=12, Total Parameters=110M) [...]""",1.07e+20,"""Since the pre-training of DNABERT model is resource-intensive (about 25 days on 8 NVIDIA 2080Ti GPUs)""

Assuming FP16 and 30% utilization

Calculation = (25 * 24 *3600) s * 2.7e13 FLOP/s per GPU * 8 GPUs * 0.3 utilization = 1.4e20 FLOP

Alternatively:
""DNABERT takes a sequence with a max length of 512 as input... We pre-trained DNABERT for 120k steps with a batch size of 2000""
6 * 512 * 2000 * 120k * 110M = 8.11e19

Geometric mean: 1.07e20",Human Reference Genome (GRCh38/hg38),3000000000.0,"The human genome is around 3 billion base pairs (https://useast.ensembl.org/Homo_sapiens/Info/Annotation).
The authors use both non-overlapping sampling and random sampling from a human genome, though the source is unspecified.",Confident,https://academic.oup.com/bioinformatics/article/37/15/2112/6128680,DNABERT: pre-trained Bidirectional Encoder Representations from Transformers model for DNA-language in genome,479.0,"Yanrong Ji, Zhihan Zhou, Han Liu, Ramana V Davuluri","Motivation
Deciphering the language of non-coding DNA is one of the fundamental problems in genome research. Gene regulatory code is highly complex due to the existence of polysemy and distant semantic relationship, which previous informatics methods often fail to capture especially in data-scarce scenarios.

Results
To address this challenge, we developed a novel pre-trained bidirectional encoder representation, named DNABERT, to capture global and transferrable understanding of genomic DNA sequences based on up and downstream nucleotide contexts. We compared DNABERT to the most widely used programs for genome-wide regulatory elements prediction and demonstrate its ease of use, accuracy and efficiency. We show that the single pre-trained transformers model can simultaneously achieve state-of-the-art performance on prediction of promoters, splice sites and transcription factor binding sites, after easy fine-tuning using small task-specific labeled data. Further, DNABERT enables direct visualization of nucleotide-level importance and semantic relationship within input sequences for better interpretability and accurate identification of conserved sequence motifs and functional genetic variant candidates. Finally, we demonstrate that pre-trained DNABERT with human genome can even be readily applied to other organisms with exceptional performance. We anticipate that the pre-trained DNABERT model can be fined tuned to many other sequence analyses tasks.",Academia,United States of America,SOTA improvement,"""We show that the single pre-trained transformers model can simultaneously achieve state-of-the-art performance on prediction of promoters, splice sites and transcription factor binding sites, after easy fine-tuning using small task-specific labeled data."" [Abstract] - SOTA improvement on very specific task",4.04,600.0,"""Since the pre-training of DNABERT model is resource-intensive (about 25 days on 8 NVIDIA 2080Ti GPUs)""",NVIDIA GeForce RTX 2080 Ti 11GB,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"Apache 2.0, code and weights: https://github.com/jerryji1993/DNABERT",FP16,
Zidong Taichu,"Chinese Academy of Sciences,Wuhan AI Computing Center",2021-08-11,"Multimodal,Speech,Vision,Language","Language modeling/generation,Speech recognition,Image captioning",3200000000.0,共32亿参数 translated as A total of 3.2 billion parameters ,8.016e+20,4.175e10 * 3.2e9 * 6 = 8.016e20 FLOP,,41750000000.0,"主要采用CLUE与WMT中收集的中文数据，同时我们加入了额外收集的对话数据以及翻译平行语料中的中文部分，总共约250G的中文语料，领域覆盖广泛。

From context, seems to mean 250GB

250GB * 167M tokens/GB = 4.175e+10 tokens

https://gitee.com/zidongtaichu/multi-modal-models/tree/master/text#%E6%95%B0%E6%8D%AE%E9%9B%86",Confident,https://gitee.com/zidongtaichu/multi-modal-models,Zidong Ancestral multi-modal large model,,,,"Academia,Government","China,China",Historical significance,"The world’s first image, language, and audio trimodal pre-trained model.",,,,,,,,,,,,,,,Open weights (unrestricted),Unreleased,,"Apache 2.0
https://gitee.com/zidongtaichu/multi-modal-models

I don't see training code there",,
Jurassic-1-Jumbo,AI21 Labs,2021-08-11,Language,"Language modeling/generation,Chat",178000000000.0,"""Jurassic-1 models come in two sizes, where the Jumbo version, at 178B parameters, is the largest and most sophisticated language model ever released for general use by developers.""",3.7e+23,"see here https://docs.google.com/document/d/1B8x6XYcmB1u6Tmq3VcbAtj5bzhDaj2TcIPyK6Wpupx4/edit

6 * 178B * 300B = 3.204000e+23",,225000000000.0,"""Our model was trained with the conventional self-supervised auto-regressive training objective on 300B tokens drawn from publicly available resources""

1 token ~ 0.75 words",Confident,https://uploads-ssl.webflow.com/60fd4503684b466578c0d307/61138924626a6981ee09caf6_jurassic_tech_paper.pdf,Jurassic-1: Technical Details and Evaluation,55.0,"Opher Lieber, Or Sharir, Barak Lenz, Yoav Shoham","Jurassic-1 is a pair of auto-regressive language models recently released by AI21 Labs, consisting of J1-Jumbo, a 178B-parameter model, and J1-Large, a 7B-parameter model. We describe their architecture and training, and evaluate their performance relative to GPT-3. The evaluation is in terms of perplexity, as well as zero-shot and few-shot learning. To that end, we developed a zeroshot and few-shot test suite, which we made publicly available (https://github.com/ai21labs/ lm-evaluation) as a shared resource for the evaluation of mega language models.",Industry,Israel,Training cost,"""Training such a large model, on over 800 GPUs over many months""

Lower-bound cost estimate:
800 GPUs * $1/GPU-hour * 4 months = $2.3M
True cost was probably substantially higher. ""many months"" implies more than 4, and the GPUs were probably more expensive than $1/hour.",,,,NVIDIA A100,,,807511.6596,,,,,,3200000.0,"""Namely, we used a base learning rate of 1.2 × 10−4 and 0.6 × 10−4 , and a batch size of 2M and 3.2M tokens, for J1-Large and J1-Jumbo, respectively. We also used a linear warm-up over roughly the first 375 million tokens, and gradually increased the batch size from 32K tokens up to its target value for the first few billion tokens.""",API access,Unreleased,,,,True
W2v-BERT,"Google Brain,Massachusetts Institute of Technology (MIT)",2021-08-07,Speech,Speech recognition,1000000000.0,1B for XXL model,,,LibriLight,,,Confident,https://arxiv.org/abs/2108.06209v2,W2v-BERT: Combining Contrastive Learning and Masked Language Modeling for Self-Supervised Speech Pre-Training,352.0,"Yu-An Chung, Yu Zhang, Wei Han, Chung-Cheng Chiu, James Qin, Ruoming Pang, Yonghui Wu","Motivated by the success of masked language modeling~(MLM) in pre-training natural language processing models, we propose w2v-BERT that explores MLM for self-supervised speech representation learning. w2v-BERT is a framework that combines contrastive learning and MLM, where the former trains the model to discretize input continuous speech signals into a finite set of discriminative speech tokens, and the latter trains the model to learn contextualized speech representations via solving a masked prediction task consuming the discretized tokens. In contrast to existing MLM-based speech pre-training frameworks such as HuBERT, which relies on an iterative re-clustering and re-training process, or vq-wav2vec, which concatenates two separately trained modules, w2v-BERT can be optimized in an end-to-end fashion by solving the two self-supervised tasks~(the contrastive task and MLM) simultaneously. Our experiments show that w2v-BERT achieves competitive results compared to current state-of-the-art pre-trained models on the LibriSpeech benchmarks when using the Libri-Light~60k corpus as the unsupervised data. In particular, when compared to published models such as conformer-based wav2vec~2.0 and HuBERT, our model shows~5\% to~10\% relative WER reduction on the test-clean and test-other subsets. When applied to the Google's Voice Search traffic dataset, w2v-BERT outperforms our internal conformer-based wav2vec~2.0 by more than~30\% relatively.","Industry,Academia","United States of America,United States of America",SOTA improvement,"""Our experiments show that w2v-BERT achieves competitive results
compared to current state-of-the-art pre-trained models on the LibriSpeech benchmarks when using the Libri-Light 60k corpus as the
unsupervised data. In particular, when compared to published models such as conformer-based wav2vec 2.0 and HuBERT, our model
shows 5% to 10% relative WER reduction on the test-clean and
test-other subsets""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
YOLOX-X,Megvii Inc,2021-08-06,Vision,Object detection,99100000.0,"99.1M, table 3",6.34275e+20,"""We train the models for a total of 300 epochs with 5 epochs warmup on COCO train2017 [17]. We use stochastic gradient descent (SGD) for training ... The batch size is 128 by default to typical 8-GPU devices ... input size is evenly drawn from 448 to 832 with 32 strides""

Training is done on 300 epochs of the 2.5 million image-label pairs in COCO train2017.

Table 3 indicates 281.9 GFLOP per forward pass on a 640x640 image. The mean image width/height is 640, though using this to estimate training FLOPs is probably a slight underestimate as FLOPs will scale roughly linearly in the number of pixels (which scale at width^2).

Ignoring this slight issue: 281.9e9 * 2.5M * 300 * 3 = 6.34e20",COCO 2017,2500000.0,"2.5 million image-label pairs, per Coco paper https://arxiv.org/abs/1405.0312",Likely,https://arxiv.org/abs/2107.08430,YOLOX: Exceeding YOLO Series in 2021,3207.0,"Zheng Ge, Songtao Liu, Feng Wang, Zeming Li, Jian Sun","In this report, we present some experienced improvements to YOLO series, forming a new high-performance detector -- YOLOX. We switch the YOLO detector to an anchor-free manner and conduct other advanced detection techniques, i.e., a decoupled head and the leading label assignment strategy SimOTA to achieve state-of-the-art results across a large scale range of models: For YOLO-Nano with only 0.91M parameters and 1.08G FLOPs, we get 25.3% AP on COCO, surpassing NanoDet by 1.8% AP; for YOLOv3, one of the most widely used detectors in industry, we boost it to 47.3% AP on COCO, outperforming the current best practice by 3.0% AP; for YOLOX-L with roughly the same amount of parameters as YOLOv4-CSP, YOLOv5-L, we achieve 50.0% AP on COCO at a speed of 68.9 FPS on Tesla V100, exceeding YOLOv5-L by 1.8% AP. Further, we won the 1st Place on Streaming Perception Challenge (Workshop on Autonomous Driving at CVPR 2021) using a single YOLOX-L model. We hope this report can provide useful experience for developers and researchers in practical scenes, and we also provide deploy versions with ONNX, TensorRT, NCNN, and Openvino supported. Source code is at this https URL.",Industry,China,"Highly cited,SOTA improvement",Table 6,300.0,,,NVIDIA V100,8.0,,,,4849.522759284234,,,,128.0,,Open weights (unrestricted),Open source,Open source,"Apache 2.0 for code/weights
https://github.com/Megvii-BaseDetection/YOLOX/blob/main/LICENSE",FP16,
6-Act Tether,"Facebook AI Research,Georgia Institute of Technology",2021-08-03,Robotics,Object detection,5000000.0,"""Agent parameter counts were all 5 − 6 million parameters, excluding parameters in auxiliary modules""",,"""In our experiments, we train each of our agents for 8 GPU-weeks (192 GPU-hours)"". No GPU specified.",Matterport,,,Confident,"https://openaccess.thecvf.com/content/ICCV2021/html/Ye_Auxiliary_Tasks_and_Exploration_Enable_ObjectGoal_Navigation_ICCV_2021_paper.html
https://arxiv.org/abs/2104.04112",Auxiliary Tasks and Exploration Enable ObjectGoal Navigation,81.0,"Joel Ye, Dhruv Batra, Abhishek Das, Erik Wijmans","ObjectGoal Navigation (ObjectNav) is an embodied task wherein agents are to navigate to an object instance in an unseen  environment. Prior works have shown that end-to-end ObjectNav agents that use vanilla visual and recurrent modules, e.g. a CNN+RNN, perform poorly due to overfitting and sample inefficiency. This has motivated current state-of-the-art methods to mix analytic and learned components and operate on explicit spatial maps of the environment. We instead re-enable a generic learned agent by adding auxiliary learning tasks and an exploration reward. Our agents achieve 24.5% success and 8.1% SPL, a 37% and 8% relative improvement over prior state-of-the-art, respectively, on the Habitat ObjectNav Challenge. From our analysis, we propose that agents will act to simplify their visual inputs so as to smooth their RNN dynamics, and that auxiliary tasks reduce overfitting by minimizing effective RNN dimensionality; i.e. a performant ObjectNav agent that must maintain coherent plans over long horizons does so by learning smooth, low-dimensional recurrent dynamics.","Industry,Academia","United States of America,United States of America",SOTA improvement,"""Our agents achieve 24.5% success and 8.1% SPL, a 37% and 8% relative improvement over prior state-of-the-art, respectively, on the Habitat ObjectNav Challenge""",,,,,,,,,,,,,,,Open weights (unrestricted),Open source,,"MIT license

https://github.com/joel99/objectnav",,
SEER,"Facebook AI Research,INRIA",2021-07-29,Vision,"Image embedding,Image classification",1300000000.0,"From abstract:
"" Our final SElf-supERvised (SEER) model, a RegNetY with 1.3B parameters...""",1.8e+22,"Numbers from section 3.2, they specifically mention using mixed precision training.
6125 ms / batch * 114890 batches = 8.14 days (they round to 8 in the text)

512 GPUs * 8.14 days * 24h/day * 3600s/h * 125 TFLOP/s * 0.4 (assumed utilization) = 1.800e22

""on 512 V100 32GB NVIDIA GPUs. Training this model on 1 billion images requires 114, 890 training iterations for a batch size of 8, 704 images, summing to 8 days of training over 512 GPUs.""",Instagram,1000000000.0,"""Overall, we train
on 1B images for a total of 122K iterations.""",Confident,https://arxiv.org/abs/2103.01988,Self-supervised Pretraining of Visual Features in the Wild,244.0,"Priya Goyal, Mathilde Caron, Benjamin Lefaudeux, Min Xu, Pengchao Wang, Vivek Pai, Mannat Singh, Vitaliy Liptchinsky, Ishan Misra, Armand Joulin, Piotr Bojanowski","Recently, self-supervised learning methods like MoCo, SimCLR, BYOL and SwAV have reduced the gap with supervised methods. These results have been achieved in a control environment, that is the highly curated ImageNet dataset. However, the premise of self-supervised learning is that it can learn from any random image and from any unbounded dataset. In this work, we explore if self-supervision lives to its expectation by training large models on random, uncurated images with no supervision. Our final SElf-supERvised (SEER) model, a RegNetY with 1.3B parameters trained on 1B random images with 512 GPUs achieves 84.2% top-1 accuracy, surpassing the best self-supervised pretrained model by 1% and confirming that self-supervised learning works in a real world setting. Interestingly, we also observe that self-supervised models are good few-shot learners achieving 77.9% top-1 with access to only 10% of ImageNet. Code: this https URL","Industry,Academia","United States of America,France",SOTA improvement,"SOTA for self-supervised models on ImageNet, which seems fair to consider a different benchmark than ImageNet for supervised models.

""Our final SElf-supERvised (SEER) model,
a RegNetY with 1.3B parameters trained on 1B random
images with 512 GPUs achieves 84.2% top-1 accuracy,
surpassing the best self-supervised pretrained model by 1%""",,195.5,6125 ms / batch * 114890 batches = 195.5 hours,NVIDIA V100,512.0,,34114.252463690456,,310424.75538121304,,,,,,Open weights (non-commercial),Open (non-commercial),Open access (non-commercial),"https://github.com/facebookresearch/vissl/tree/main/projects/SEER

We share instructions on how to train SEER model on GPUs using PyTorch. First, Install VISSL and follow the data setup instructions to easily setup your data input with VISSL.

https://github.com/facebookresearch/vissl/blob/main/projects/SEER/MODEL_LICENSE.md",FP16,
HuBERT,Facebook AI Research,2021-07-27,Speech,Speech recognition,1000000000.0,"From abstract:
""Using a 1B parameter model, HuBERT shows up to 19% and 13% relative WER reduction on the more challenging dev-other and test-other evaluation subsets""",5.54e+21,"GPU NOT SPECIFIED - for the sake of argument I assume something on the order of 1 TFLOP/s

Numbers from Section IV part C
0.1 * (960h * 32GPUs + 60000h * 256 GPUs) * 3600s/h * 1 TFLOP/s/GPU","LibriSpeech,LibriLight",820800000.0,"""When the HuBERT model is pre-trained on either the standard Librispeech 960h [24] or the Libri-Light 60k hours [25], it either matches or improves upon the state-of-theart wav2vec 2.0 [6] performance on all fine-tuning subsets of 10mins, 1h, 10h, 100h, and 960h.""

1h ~ 13,680 words
13,680 * 60,000 = 820800000",Speculative,https://arxiv.org/abs/2106.07447,HuBERT: Self-Supervised Speech Representation Learning by Masked Prediction of Hidden Units,2235.0,"Wei-Ning Hsu, Benjamin Bolte, Yao-Hung Hubert Tsai, Kushal Lakhotia, Ruslan Salakhutdinov, Abdelrahman Mohamed","Self-supervised approaches for speech representation learning are challenged by three unique problems: (1) there are multiple sound units in each input utterance, (2) there is no lexicon of input sound units during the pre-training phase, and (3) sound units have variable lengths with no explicit segmentation. To deal with these three problems, we propose the Hidden-Unit BERT (HuBERT) approach for self-supervised speech representation learning, which utilizes an offline clustering step to provide aligned target labels for a BERT-like prediction loss. A key ingredient of our approach is applying the prediction loss over the masked regions only, which forces the model to learn a combined acoustic and language model over the continuous inputs. HuBERT relies primarily on the consistency of the unsupervised clustering step rather than the intrinsic quality of the assigned cluster labels. Starting with a simple k-means teacher of 100 clusters, and using two iterations of clustering, the HuBERT model either matches or improves upon the state-of-the-art wav2vec 2.0 performance on the Librispeech (960h) and Libri-light (60,000h) benchmarks with 10min, 1h, 10h, 100h, and 960h fine-tuning subsets. Using a 1B parameter model, HuBERT shows up to 19% and 13% relative WER reduction on the more challenging dev-other and test-other evaluation subsets.",Industry,United States of America,"Highly cited,SOTA improvement","Abstract: 
"" the
HuBERT model either matches or improves upon the state-ofthe-art wav2vec 2.0 performance on the Librispeech (960h) and
Libri-light (60,000h) benchmarks with 10min, 1h, 10h, 100h, and
960h fine-tuning subsets.""",,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"https://github.com/facebookresearch/fairseq/tree/main/examples/hubert

fairseq(-py) is MIT-licensed. The license applies to the pre-trained models as well.
includes training code",FP16,
GOAT,DeepMind,2021-07-27,Games,Open ended play,3472816.0,estimate described here: https://docs.google.com/document/d/1S9xZyCeITDOs-P1W_-liNW0WgVN-OLsSudVrPXMaLqw/edit?usp=sharing,2.412e+22,"[Final calculation]
(8 TPUs) * (1.23e14 FLOP/TPU-s) * (0.1 utilization) / (50k steps/s) = 1.968e9 FLOP/step

(32 agents) * (383B steps/agent) * (1.968e9 FLOP/step) = 2.412e22 FLOPs

==========================
NOTES BELOW

6.1: Each agent is trained using 8 TPUv3s and consumes approximately 50,000 agent steps (observations) per second.
Multiple agents interacting probably mean a fairly low utilization rate, so let’s assume 0.10
8 * 1.23e14 * 0.1 / 50k = 1.968e9 FLOPs per step

The paper doesn’t say exactly how many agents they train in each population. The original PBT paper uses 32 agents for one task (in general it uses between 10 and 80), so as a guesstimate let’s go with that.

Figure 16: They train over 5 generations. Summing the number of steps, it looks like there were roughly 383B steps
32 * 383B * 1.968e9 = 2.412e22

Final estimate:
2.412e22

I do a confidence interval analysis here and find a 90% CI of 6.9e21 to 1.3e23, so we can call this estimate ""likely"" (within 1 OOM): https://colab.research.google.com/drive/1wGSTQxBExY6Fa0-d7msVumf5-KnsWLe6?usp=sharing",XLand,390000000000.0,Figure 16 shows steps per generation and agent. In total there are 1.5e10 + 4.0e10 + 2.5e10 + 1.1e11 + 2e11 = 3.9e11 steps per agent.,Speculative,"https://deepmind.com/blog/article/generally-capable-agents-emerge-from-open-ended-play

https://arxiv.org/abs/2107.12808",Open-Ended Learning Leads to Generally Capable Agents,163.0,"Open-Ended Learning Team*, Adam Stooke, Anuj Mahajan, Catarina Barros, Charlie Deck, Jakob Bauer, Jakub Sygnowski, Maja Trebacz, Max Jaderberg, Michael Mathieu, Nat McAleese, Nathalie Bradley-Schmieg, Nathaniel Wong, Nicolas Porcel, Roberta Raileanu, Steph Hughes-Fitt, Valentin Dalibard and Wojciech Marian Czarnecki","In this work we create agents that can perform well beyond a single, individual task, that exhibit much wider generalisation of behaviour to a massive, rich space of challenges. We define a universe of tasks within an environment domain and demonstrate the ability to train agents that are generally capable across this vast space and beyond. The environment is natively multi-agent, spanning the continuum of competitive, cooperative, and independent games, which are situated within procedurally generated physical 3D worlds. The resulting space is exceptionally diverse in terms of the challenges posed to agents, and as such, even measuring the learning progress of an agent is an open research problem. We propose an iterative notion of improvement between successive generations of agents, rather than seeking to maximise a singular objective, allowing us to quantify progress despite tasks being incomparable in terms of achievable rewards. We show that through constructing an open-ended learning process, which dynamically changes the training task distributions and training objectives such that the agent never stops learning, we achieve consistent learning of new behaviours. The resulting agent is able to score reward in every one of our humanly solvable evaluation levels, with behaviour generalising to many held-out points in the universe of tasks. Examples of this zero-shot generalisation include good performance on Hide and Seek, Capture the Flag, and Tag. Through analysis and hand-authored probe tasks we characterise the behaviour of our agent, and find interesting emergent heuristic behaviours such as trial-and-error experimentation, simple tool use, option switching, and cooperation. Finally, we demonstrate that the general capabilities of this agent could unlock larger scale transfer of behaviour through cheap finetuning.",Industry,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,likely qualitatively SOTA,,,"see other notes
",Google TPU v3,,,84799.78517435073,,,,,,64.0,,Unreleased,Unreleased,,,,
Codex,OpenAI,2021-07-07,Language,Code autocompletion,12000000000.0,"""With just a single sample, a 12B parameter Codex solves 28.8% of these problems, and a 300M parameter Codex solves 13.2% of these problems""",7.344e+22,"""The original training of GPT-3-12B consumed hundreds of petaflop/sdays of compute, while fine-tuning it to create Codex-12B
consumed a similar amount of compute.""
1 PFLOP/s-day = 8.64e19 FLOPs.
""Hundreds"" is likely between 200 and 900, geometric mean = 425.
2 * 425 * 8.64e19 = 7.344e22
",,31800000000.0,"""Our training dataset was collected in May 2020 from 54 million public software repositories hosted on GitHub, containing 179 GB of unique Python files under 1 MB. We filtered out files which were likely auto-generated, had average line
length greater than 100, had maximum line length greater
than 1000, or contained a small percentage of alphanumeric
characters. After filtering, our final dataset totaled 159 GB.""

1 GB ~ 200M words",Likely,"https://openai.com/blog/openai-codex/
https://arxiv.org/abs/2107.03374",Evaluating Large Language Models Trained on Code,3818.0,"Mark Chen , Jerry Tworek, Heewoo Jun, Qiming Yuan, Henrique Ponde de Oliveira Pinto, Jared Kaplan, Harri Edwards, Yuri Burda, Nicholas Joseph, Greg Brockman, Alex Ray, Raul Puri, Gretchen Krueger,  Michael Petrov, Heidy Khlaaf, Girish Sastry, Pamela Mishkin, Brooke Chan, Scott Gray, Nick Ryder, Mikhail Pavlov, Alethea Power, Lukasz Kaiser, Clemens Winter, Philippe Tillet, Felipe Petroski Such, Dave Cummings, Fotios Chantzis, Elizabeth Barnes, Ariel Herbert-Voss, William Hebgen Guss, Nikolas Tezak, Jie Tang, Igor Babuschkin, Suchir Balaji,  Shantanu Jain, William Saunders, Christopher Hesse, Andrew N. Carr, Jan Leike, Josh Achiam, Vedant Misra, Evan Morikawa, Alec Radford, Matthew Knight, Miles Brundage, Mira Murati, Katie Mayer, Peter Welinder, Bob McGrew, Dario Amodei, Sam McCandlish, Ilya Sutskever, Wojciech Zaremba ","We introduce Codex, a GPT language model fine-tuned on publicly available code from GitHub, and study its Python code-writing capabilities. A distinct production version of Codex powers GitHub Copilot. On HumanEval, a new evaluation set we release to measure functional correctness for synthesizing programs from docstrings, our model solves 28.8% of the problems, while GPT-3 solves 0% and GPT-J solves 11.4%. Furthermore, we find that repeated sampling from the model is a surprisingly effective strategy for producing working solutions to difficult prompts. Using this method, we solve 70.2% of our problems with 100 samples per problem. Careful investigation of our model reveals its limitations, including difficulty with docstrings describing long chains of operations and with binding operations to variables. Finally, we discuss the potential broader impacts of deploying powerful code generation technologies, covering safety, security, and economics.",Industry,United States of America,"Significant use,Highly cited",,,,,,,,,,,GPT-3 13B,,,,,API access,Unreleased,,"Codex was available via the OpenAI API from announcement: https://openai.com/index/openai-codex/

It is still available via the Research Access Program. https://x.com/OfficialLoganK/status/1638336152800206858",,True
ERNIE 3.0,Baidu,2021-07-05,Language,"Language modeling,Language modeling/generation",10000000000.0,"""We trained the model with 10 billion parameters on a 4TB corpus consisting of plain texts and a large-scale knowledge graph.""",2.25e+22,"Section 3.3.3: 
""""The model is trained for
a total of 375 billion tokens""

Total compute approximated as 6*N*D",,668000000000.0,"""To ensure the success of the pre-training of ERNIE 3.0, we construct a large-scale, wide-variety and high-quality Chinese text corpora amounting to 4TB storage size in 11 different categories.""

1 GB ~ 167M chinese words",Confident,http://research.baidu.com/Blog/index-view?id=160,ERNIE 3.0: Large-scale Knowledge Enhanced Pre-training for Language Understanding and Generation,347.0,"Y Sun, S Wang, S Feng, S Ding, C Pang",,Industry,China,SOTA improvement,"""ERNIE 3.0 achieved new state-of-the-art results across 54 Chinese NLP tasks""",,,,NVIDIA V100,384.0,,39104.26710360624,,232943.03314881725,,,,,,Open weights (unrestricted),Open source,Open source,"apache 2.0 
train code: https://github.com/PaddlePaddle/PaddleNLP/tree/develop/legacy/model_zoo/ernie-3.0#%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83 ",FP16,
Adaptive Input Transformer + RD,"Microsoft Research Asia,Soochow University",2021-06-28,Language,Language modeling,247000000.00000003,,8.58e+19,"""We train Transformer model for 50k steps and Adaptive Input Transformer for 286k steps""

assuming 1 step took 1 second:

125000000000000 FLOP / sec [assumed precision: bf16] * 286000 seconds * 8 GPUs * 0.3 [assumed utilization] = 8.58e+19 FLOP",,,,Likely,https://arxiv.org/abs/2106.14448,R-Drop: Regularized Dropout for Neural Networks,379.0,"Xiaobo Liang, Lijun Wu, Juntao Li, Yue Wang, Qi Meng, Tao Qin, Wei Chen, Min Zhang, Tie-Yan Liu","Dropout is a powerful and widely used technique to regularize the training of deep neural networks. In this paper, we introduce a simple regularization strategy upon dropout in model training, namely R-Drop, which forces the output distributions of different sub models generated by dropout to be consistent with each other. Specifically, for each training sample, R-Drop minimizes the bidirectional KL-divergence between the output distributions of two sub models sampled by dropout. Theoretical analysis reveals that R-Drop reduces the freedom of the model parameters and complements dropout. Experiments on 5 widely used deep learning tasks (18 datasets in total), including neural machine translation, abstractive summarization, language understanding, language modeling, and image classification, show that R-Drop is universally effective. In particular, it yields substantial improvements when applied to fine-tune large-scale pre-trained models, e.g., ViT, RoBERTa-large, and BART, and achieves state-of-the-art (SOTA) performances with the vanilla Transformer model on WMT14 English→German translation (30.91 BLEU) and WMT14 English→French translation (43.95 BLEU), even surpassing models trained with extra large-scale data and expert-designed advanced variants of Transformer models. Our code is available at GitHub{\url{this https URL}}.","Industry,Academia","China,Taiwan",SOTA improvement,"""In particular, it yields substantial
improvements when applied to fine-tune large-scale pre-trained models, e.g., ViT, RoBERTa-large, and BART, and achieves state-of-the-art (SOTA) performances with the vanilla Transformer model """,,79.4,""" The training is on 8 Tesla V100 GPU cards""
286k steps ~ [assumption] 286000 seconds = 79.4 hours",NVIDIA V100,8.0,,,,4853.736425906205,,,,,,Unreleased,Open source,Open source,"train and inference code for translation models, MIT license. no weights

https://github.com/dropreg/R-Drop/blob/main/fairseq_src/examples/translation_rdrop/README.md ",FP16,
EfficientNetV2-XL,"Google,Google Brain",2021-06-23,Vision,"Image classification,Neural Architecture Search - NAS",208000000.0,"208M for XL version (Table 7, page 7)",9.56e+19,"Table 7, page 7: 45 hours on 32 TPUv3 cores.

""Each v3 TPU chip contains two TensorCores.""
TPU performance per chip = 123e12 FLOP/s
32 cores = 16 chips

123e12 FLOP/s per chip * (32 cores / 2 cores per chip) * 45 hours * 3600 seconds/hour * 0.30 utilization = 9.56e19 FLOP

https://www.wolframalpha.com/input?i=123+terahertz+*+16+*+45+hours+*+0.3","ImageNet21k,ILSVRC 2012 subset of ImageNet",14180000.0,"""ImageNet21k (Russakovsky et al., 2015) contains about 13M training images with 21,841 classes. The original ImageNet21k doesn’t have train/eval split, so we reserve randomly picked 100,000 images as validation set and use the remaining as training set...
After pretrained on ImageNet21k, each model is finetuned on ILSVRC2012 for 15 epochs using cosine learning rate decay.""

12.9M + 1.28M ~= 14,180,000",Confident,https://arxiv.org/abs/2104.00298,EfficientNetV2: Smaller Models and Faster Training,2048.0,"Mingxing Tan, Quoc V. Le","This paper introduces EfficientNetV2, a new family of convolutional networks that have faster training speed and better parameter efficiency than previous models. To develop this family of models, we use a combination of training-aware neural architecture search and scaling, to jointly optimize training speed and parameter efficiency. The models were searched from the search space enriched with new ops such as Fused-MBConv. Our experiments show that EfficientNetV2 models train much faster than state-of-the-art models while being up to 6.8x smaller.
Our training can be further sped up by progressively increasing the image size during training, but it often causes a drop in accuracy. To compensate for this accuracy drop, we propose to adaptively adjust regularization (e.g., dropout and data augmentation) as well, such that we can achieve both fast training and good accuracy.
With progressive learning, our EfficientNetV2 significantly outperforms previous models on ImageNet and CIFAR/Cars/Flowers datasets. By pretraining on the same ImageNet21k, our EfficientNetV2 achieves 87.3% top-1 accuracy on ImageNet ILSVRC2012, outperforming the recent ViT by 2.0% accuracy while training 5x-11x faster using the same computing resources. Code will be available at this https URL.","Industry,Industry","United States of America,United States of America","Highly cited,SOTA improvement","""EfficientNetV2 achieves 87.3% top-1 accuracy on ImageNet ILSVRC2012, outperforming the recent ViT by 2.0% accuracy while 
 training 5x-11x faster using the same computing resources.""",30.0,45.0,Table 7,Google TPU v3,16.0,,104.34013401561587,,7119.606126290003,,,,4096.0,"""Each model is trained for 350 epochs with total batch size 4096""",Open weights (unrestricted),Open source,Open source,"code and weights: https://github.com/google/automl/tree/master/efficientnetv2

Apache-2.0 license",FP16,
Denoising Diffusion Probabilistic Models (LSUN Bedroom),University of California (UC) Berkeley,2021-06-11,Vision,Image generation,256000000.0,"Appendix B: 
"" Our CIFAR10 model has 35.7 million parameters, and our LSUN and
CelebA-HQ models have 114 million parameters. We also trained a larger variant of the LSUN Bedroom model with approximately 256 million parameters by increasing filter count.""",7.840125000000001e+19,"Numbers in Appendix B
""Our CelebA-HQ/LSUN (2562) models train at 2.2 steps per second at batch size 64, [...] The larger LSUN Bedroom model was trained for 1.15M steps.""
10.6h for the CIFAR model (batch size 128, 21 step/s)
2.2 step/s for the LSUN model, 1.15M steps so 702.8 hours

1 step takes 1/2.2 =0.4545 seconds
1.15M steps * 0.4545 seconds = 522675 seconds = 145 hours

This is for TPUv3-8's, which seems to mean 8 cores (standard chip is 125 teraflop/s for 2 cores) -> 4 chips
https://cloud.google.com/tpu/docs/regions-zones

1.25E14 FLOP/s * (4 chips) * 522675 seconds * 0.3 = 78401250000000010000",LSUN Bedroom,3033042.0,"""We trained on CelebA-HQ for 0.5M steps, LSUN Bedroom for 2.4M steps, LSUN Cat for 1.8M steps, and LSUN Church for 1.2M steps.""

""The CelebA-HQ dataset is a high-quality version of CelebA that consists of 30,000 images at 1024×1024 resolution.""
https://paperswithcode.com/dataset/celeba-hq

LSUN bedroom has 3,033,042 examples. LSUN cat has 1,657,266 examples. LSUN church has 126,227 examples.
https://www.tensorflow.org/datasets/catalog/lsun
",Confident,https://arxiv.org/abs/2006.11239,Denoising Diffusion Probabilistic Models,11839.0,"Jonathan Ho, Ajay Jain, Pieter Abbeel","We present high quality image synthesis results using diffusion probabilistic models, a class of latent variable models inspired by considerations from nonequilibrium thermodynamics. Our best results are obtained by training on a weighted variational bound designed according to a novel connection between diffusion probabilistic models and denoising score matching with Langevin dynamics, and our models naturally admit a progressive lossy decompression scheme that can be interpreted as a generalization of autoregressive decoding. On the unconditional CIFAR10 dataset, we obtain an Inception score of 9.46 and a state-of-the-art FID score of 3.17. On 256x256 LSUN, we obtain sample quality similar to ProgressiveGAN. Our implementation is available at this https URL",Academia,United States of America,"Highly cited,SOTA improvement","Novel approach to image synthesis that yields SOTA results on datasets like CIFAR-10

Abstract: 
""On the unconditional CIFAR10 dataset, we obtain an Inception score of 9.46 and a state-of-the-art FID score of 3.17. """,,,,Google TPU v3,,,436.308484475363,,,,,,,,Open weights (unrestricted),Open source,Open source,"https://github.com/hojonathanho/diffusion

everything is openly avaiable but no license or terms of use information

train code: https://github.com/hojonathanho/diffusion/blob/master/scripts/run_lsun.py ",,
ALIGN,Google Research,2021-06-11,"Multimodal,Vision,Language","Representation learning,Image classification",820000000.0,"From author communication

480M (image tower) + 340 M (text tower)",2.598670000001e+22,"From author communication
14.82K TPUv3 core-days
Precision: bfloat16

Estimation
TPUv3 at float16: 123 TFLOPS/chip

123*10^12 TFLOPS/chip * (1 chip / 2 cores) * 14820 TPU core-days * 86400 s/day * 33% utilization = 2.599*10^22 FLOP
https://www.wolframalpha.com/input?i=14820+days+*+123+teraFLOPS+%2F+2+*+0.33","Conceptual Captions (CC3M),FIT400M",1600000000.0,"Dataset contains 1.8B image-text pairs, then some duplicates are removed.",Confident,https://arxiv.org/abs/2102.05918,Scaling up visual and vision-language representation learning with noisy text supervision,3019.0,"Chao Jia, Yinfei Yang, Ye Xia, Yi-Ting Chen, Zarana Parekh, Hieu Pham, Quoc V. Le, Yunhsuan Sung, Zhen Li, Tom Duerig","Pre-trained representations are becoming crucial for many NLP and perception tasks. While representation learning in NLP has transitioned to training on raw text without human annotations, visual and vision-language representations still rely heavily on curated training datasets that are expensive or require expert knowledge. For vision applications, representations are mostly learned using datasets with explicit class labels such as ImageNet or OpenImages. For vision-language, popular datasets like Conceptual Captions, MSCOCO, or CLIP all involve a non-trivial data collection (and cleaning) process. This costly curation process limits the size of datasets and hence hinders the scaling of trained models. In this paper, we leverage a noisy dataset of over one billion image alt-text pairs, obtained without expensive filtering or post-processing steps in the Conceptual Captions dataset. A simple dual-encoder architecture learns to align visual and language representations of the image and text pairs using a contrastive loss. We show that the scale of our corpus can make up for its noise and leads to state-of-the-art representations even with such a simple learning scheme. Our visual representation achieves strong performance when transferred to classification tasks such as ImageNet and VTAB. The aligned visual and language representations enables zero-shot image classification and also set new state-of-the-art results on Flickr30K and MSCOCO image-text retrieval benchmarks, even when compared with more sophisticated cross-attention models. The representations also enable cross-modality search with complex text and text + image queries.",Industry,"Multinational,United States of America,Canada,Switzerland","Highly cited,SOTA improvement","""The aligned visual and language representations... set new state-of-the-art results on Flickr30K and MSCOCO image-text retrieval benchmarks""",,347.3,14820 TPU core-hours / 1024 TPU cores = 347.3 hours,Google TPU v3,512.0,,32852.91660437908,,227888.2870513745,,,,16384.0,,Unreleased,Unreleased,,,,
DeBERTa,Microsoft,2021-06-10,Language,"Language modeling/generation,Question answering",1500000000.0,"""...we scale up DeBERTa by training a larger version that consists of 48 Transform layers with 1.5 billion parameters""

Other versions are smaller and use a smaller pre-training dataset. These are distinguished in the paper (e.g. DeBERTa1.5B is the version of DeBERTa with 1.5 billion parameters).",2.588e+22,"Table 8: 16 DGX-2 nodes (x16 V100s each) for 30 days
16 * 16 * 1.3e14 * 30 * 24 * 3600 * 0.3 = 2.588e22","Wikipedia,CC-Stories,OPENWEBTEXT,BookCorpus (BooksCorpus, Toronto Book Corpus)",15600000000.0,""" DeBERTa is pretrained on 78G training data""

1GB ~ 200M words",Confident,https://arxiv.org/abs/2006.03654,DeBERTa: Decoding-enhanced BERT with Disentangled Attention,2229.0,"Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen","Recent progress in pre-trained neural language models has significantly improved the performance of many natural language processing (NLP) tasks. In this paper we propose a new model architecture DeBERTa (Decoding-enhanced BERT with disentangled attention) that improves the BERT and RoBERTa models using two novel techniques. The first is the disentangled attention mechanism, where each word is represented using two vectors that encode its content and position, respectively, and the attention weights among words are computed using disentangled matrices on their contents and relative positions, respectively. Second, an enhanced mask decoder is used to incorporate absolute positions in the decoding layer to predict the masked tokens in model pre-training. In addition, a new virtual adversarial training method is used for fine-tuning to improve models' generalization. We show that these techniques significantly improve the efficiency of model pre-training and the performance of both natural language understanding (NLU) and natural langauge generation (NLG) downstream tasks. Compared to RoBERTa-Large, a DeBERTa model trained on half of the training data performs consistently better on a wide range of NLP tasks, achieving improvements on MNLI by +0.9% (90.2% vs. 91.1%), on SQuAD v2.0 by +2.3% (88.4% vs. 90.7%) and RACE by +3.6% (83.2% vs. 86.8%). Notably, we scale up DeBERTa by training a larger version that consists of 48 Transform layers with 1.5 billion parameters. The significant performance boost makes the single DeBERTa model surpass the human performance on the SuperGLUE benchmark (Wang et al., 2019a) for the first time in terms of macro-average score (89.9 versus 89.8), and the ensemble DeBERTa model sits atop the SuperGLUE leaderboard as of January 6, 2021, out performing the human baseline by a decent margin (90.3 versus 89.8).",Industry,"United States of America,Multinational,India,Belgium","Highly cited,SOTA improvement","""DeBERTa significantly outperforms all existing PLMs of similar size on MNLI and creates a new state of the art""",49.2,720.0,30 days (Table 8),NVIDIA V100,256.0,,6682.2289986716,,155381.83775233384,,,,,,Open weights (unrestricted),Open source,Open source,"MIT

https://github.com/microsoft/DeBERTa

pretrain code: https://github.com/microsoft/DeBERTa/tree/master/experiments/language_model ",FP16,
EMDR,"Mila - Quebec AI (originally Montreal Institute for Learning Algorithms),McGill University,DeepMind",2021-06-09,Language,Question answering,440000000.0,Table 2,1.91e+21,"""We run all of our experiments on a machine with 96 CPUs, 1.3TB physical memory, and 16 A100 GPUs. We use PyTorch (Paszke et al., 2019) to implement our proposed model. With this hardware setup, our experiments on NQ and TriviaQA took approximately 25 hours to complete, while experiments on WebQ took roughly 8 hours to complete. Before supervised training, we also perform a one-time unsupervised MSS pre-training for 82,000 steps that took roughly 1 week.""

1 week + 25 hours * 16 A100s
= ~193 * 16 A100-hours
= 193 * 16 * 3600 * 312 trillion * 0.3 = 1.04e21

Additionally, the model uses BERT, ICT, and T5 models. These required:
- BERT: 6 * 110M parameters * (1M * 256 * 256) inputs = 4.33e19 FLOP
- ICT: 6 * 220M parameters * (100k * 4096 * 256) inputs = 1.38e20 FLOP
- T5: 6 * 220M parameters * (1M * 2048 * 256) inputs = 6.92e20 FLOP

Total: 1.04e21 + 4.33e19 + 1.38e20 + 6.92e20 = 1.91e21","Wikipedia,NQ (Natural Questions),TriviaQA",171600000000.0,"At the time of publication there were about 4B words (5.3B tokens) on English Wikipedia: https://en.wikipedia.org/wiki/Wikipedia:Size_of_Wikipedia#Yearly_statistics
BookCorpus has about 1B words (1.3B tokens), C4 has about 156B tokens, and OpenWebText has about 9B tokens.

From Table 6, it looks like all datasets were trained on for over one epoch.

BERT: 1M steps, batches of 256, sequence length 256 = 65.5B tokens vs 6.6B in Wikipedia + BookCorpus
ICT: 100k steps, batches of 4096, sequence length 256 = 104.9B tokens vs 5.3B in Wikipedia
T5: 1M steps, batches of 2048, sequence length 256 = 524.3B tokens vs 170.3B tokens in C4 + Wikipedia + OpenWebText

Total tokens: 171.6 billion

Some tokens were probably seen more times than others, but overall this corresponds to 4.05 epochs on the pre-training data. ",Confident,https://arxiv.org/abs/2106.05346v2,End-to-End Training of Multi-Document Reader and Retriever for Open-Domain Question Answering,147.0,"Devendra Singh Sachan, Siva Reddy, William Hamilton, Chris Dyer, Dani Yogatama","We present an end-to-end differentiable training method for retrieval-augmented open-domain question answering systems that combine information from multiple retrieved documents when generating answers. We model retrieval decisions as latent variables over sets of relevant documents. Since marginalizing over sets of retrieved documents is computationally hard, we approximate this using an expectation-maximization algorithm. We iteratively estimate the value of our latent variable (the set of relevant documents for a given question) and then use this estimate to update the retriever and reader parameters. We hypothesize that such end-to-end training allows training signals to flow to the reader and then to the retriever better than staged-wise training. This results in a retriever that is able to select more relevant documents for a question and a reader that is trained on more accurate documents to generate an answer. Experiments on three benchmark datasets demonstrate that our proposed method outperforms all existing approaches of comparable size by 2-3% absolute exact match points, achieving new state-of-the-art results. Our results also demonstrate the feasibility of learning to retrieve to improve answer generation without explicit supervision of retrieval decisions.","Academia,Academia,Industry","Canada,Canada,United Kingdom of Great Britain and Northern Ireland",SOTA improvement,"""Experiments on three benchmark datasets demonstrate that our proposed method outperforms all existing approaches of comparable size by 2-3% absolute exact match points, achieving new state-of-the-art results.""",4.05,355.0,"""We run all of our experiments on a machine with 96 CPUs, 1.3TB physical memory, and 16 A100 GPUs [...] our experiments on NQ and TriviaQA took approximately 25 hours to complete, while experiments on WebQ took roughly 8 hours to complete. Before supervised training, we also perform a one-time unsupervised MSS pre-training for 82,000 steps that took roughly 1 week""

Additionally, they pre-trained BERT, ICT, and T5 models, which took a combined 8.733e20 FLOPs. On 16 A100s at 0.3 utilization, that would have taken approximately 162 hours.

So total time for the largest experiment (NQ or TriviaQA) is around:
25 + 168 + 162 = 355",NVIDIA A100,,,2773.3124307816734,,,,,,,,Open weights (unrestricted),Open source,Open source,"https://github.com/DevSinghSachan/emdr2

training scripts: https://github.com/DevSinghSachan/emdr2/tree/main/examples ",FP16,
CoAtNet,"Google,Google Research,Google Brain",2021-06-09,Vision,Image classification,2440000000.0,,4.27e+22,"20.1K TPU-v3 core-days

TPUs have two cores per chip, and a chip is 123 teraflop/s 
https://cloud.google.com/tpu/docs/system-architecture-tpu-vm#tpu_v3

123 teraflop/s * 20100/2 * 24 * 3600 * 0.4 (utilization assumption for non-language models) = 4.27e22",JFT-3B,3000000000.0,"Used JFT-3B (3 billion images), but not stated for how many epochs. 

Based on GPU time, training took 4.27e+22 FLOPs. Table 5 indicates 2.586e12 FLOPs per image. Since training is roughly 3x the FLOP cost of inference, implies inference on full training set took 1.42e22 FLOP
Then # images trained over is around 1.42e22 / 2.586e12 = 5,491,105,955

So probably ~1.83 epochs on 3B images",Confident,https://arxiv.org/abs/2106.04803v2,"CoAtNet: Marrying Convolution and Attention
for All Data Sizes",997.0,"Zihang Dai, Hanxiao Liu, Quoc V. Le, Mingxing Tan","Transformers have attracted increasing interests in computer vision, but they still fall behind state-of-the-art convolutional networks. In this work, we show that while Transformers tend to have larger model capacity, their generalization can be worse than convolutional networks due to the lack of the right inductive bias. To effectively combine the strengths from both architectures, we present CoAtNets (pronounced “coat” nets), a family of hybrid models built from two key insights: (1) depthwise Convolution and self-Attention can be naturally unified via simple relative attention; (2) vertically stacking convolution layers and attention layers in a principled way is surprisingly effective in improving generalization, capacity and efficiency. Experiments show that our CoAtNets achieve state-of-the-art performance under different resource constraints across various datasets: Without extra data, CoAtNet achieves 86.0% ImageNet top-1 accuracy; When pre-trained with 13M images from ImageNet-21K, our CoAtNet achieves 88.56% top-1 accuracy, matching ViT-huge pre-trained with 300M images from JFT-300M while using 23x less data; Notably, when we further scale up CoAtNet with JFT-3B, it achieves 90.88% top-1 accuracy on ImageNet, establishing a new state-of-the-art result.","Industry,Industry,Industry","United States of America,Multinational,United States of America,Canada,Switzerland,United States of America",SOTA improvement,"""Notably, when we further scale up CoAtNet with JFT-3B, it achieves 90.88% top-1 accuracy on ImageNet, establishing a new state-of-the-art result.""",1.83,,,Google TPU v3,,,1887.1635925610951,,,,,,,,Unreleased,Unreleased,,,,
ViT-G/14,"Google Brain,Google Research",2021-06-08,Vision,Image classification,1843000000.0,Table 2 of paper,5.85e+22,"Digitizing Figure 9 indicates training used 27,200 TPUv3 core-days. TPUv3 is 123 teraflop/s per chip, 2 cores per chip.

1.23e14 * (1/2) * 27,200 * 24 * 3600 * 0.4 = 5.78e22

Alternatively, Table 2 indicates 965.3e9 FLOPs per forward pass on a 224^2 image. Table 4 indicates 5 million steps at a (normalized) batch size of 4096, and total flops including backward pass would be 3x the FLOPs from forward passes alone, so we get:
4096 * 5e6 * 965.3e9 * 3 = 5.93e22

(Note that actual batch size appears to have been 32,768)

Geometric mean: sqrt(5.78e22*5.93e22) = 5.85e22

However note that this leaderboard claims ViT-G/14 took 34 PF-days, or 2.94e21 FLOPs: https://web.archive.org/web/20211218185755/https://lair.lighton.ai/akronomicon/","JFT-3B,ImageNet",3000000000.0,"""For this study, we use the proprietary JFT-3B dataset, a larger version of the JFT-300M dataset used in many previous works on large-scale computer vision models [31, 18, 11]. This dataset consists of nearly 3 billion images, annotated with a class-hierarchy of around 30k labels via a semi-automatic
pipeline""

Epochs: 5M steps (Table 11) * 32768 (batch size) / 3B = 54.6 epochs",Confident,https://arxiv.org/abs/2106.04560,Scaling Vision Transformers,903.0,"X Zhai, A Kolesnikov, N Houlsby, L Beyer","Attention-based neural networks such as the Vision Transformer (ViT) have recently attained state-of-the-art results on many computer vision benchmarks. Scale is a primary ingredient in attaining excellent results, therefore, understanding a model's scaling properties is a key to designing future generations effectively. While the laws for scaling Transformer language models have been studied, it is unknown how Vision Transformers scale. To address this, we scale ViT models and data, both up and down, and characterize the relationships between error rate, data, and compute. Along the way, we refine the architecture and training of ViT, reducing memory consumption and increasing accuracy of the resulting models. As a result, we successfully train a ViT model with two billion parameters, which attains a new state-of-the-art on ImageNet of 90.45% top-1 accuracy. The model also performs well for few-shot transfer, for example, reaching 84.86% top-1 accuracy on ImageNet with only 10 examples per class.","Industry,Industry","United States of America,Multinational,United States of America,Canada,Switzerland",SOTA improvement,"""we successfully train a ViT model with two billion parameters, which attains a new state-of-the-art on ImageNet of 90.45% top-1 accuracy""",54.6,,,Google TPU v3,2048.0,,3847.8613922131217,,911614.0493863056,,,,32768.0,,Unreleased,Open source,Open source,"About the weights: https://twitter.com/giffmana/status/1402507421029916672

About the code: Apache 2.0
https://github.com/google-research/big_vision/blob/main/big_vision/configs/proj/scaling_laws/train_vit_g.py",BF16,
ByT5-XXL,"Google,Google Research",2021-05-28,Language,Language modeling,12900000000.0,"12.9B, from Table 1",8.1e+22,"""Like mT5, we set our sequence length to 1024 (bytes rather than tokens), and train for 1 million steps over batches of 2^20 tokens.""

12.9 billion * 1 million * 2^20 * 6 = ~8.1e22",mC4,,,Likely,https://arxiv.org/abs/2105.13626,ByT5: Towards a token-free future with pre-trained byte-to-byte models,392.0,"Linting Xue, Aditya Barua, Noah Constant, Rami Al-Rfou, Sharan Narang, Mihir Kale, Adam Roberts, Colin Raffel","Most widely-used pre-trained language models operate on sequences of tokens corresponding to word or subword units. By comparison, token-free models that operate directly on raw text (bytes or characters) have many benefits: they can process text in any language out of the box, they are more robust to noise, and they minimize technical debt by removing complex and error-prone text preprocessing pipelines. Since byte or character sequences are longer than token sequences, past work on token-free models has often introduced new model architectures designed to amortize the cost of operating directly on raw text. In this paper, we show that a standard Transformer architecture can be used with minimal modifications to process byte sequences. We characterize the trade-offs in terms of parameter count, training FLOPs, and inference speed, and show that byte-level models are competitive with their token-level counterparts. We also demonstrate that byte-level models are significantly more robust to noise and perform better on tasks that are sensitive to spelling and pronunciation. As part of our contribution, we release a new set of pre-trained byte-level Transformer models based on the T5 architecture, as well as all code and data used in our experiments.","Industry,Industry","United States of America,Multinational,United States of America,Canada,Switzerland",SOTA improvement,"""On the most realistic in-language setting, where some gold training data is available in all languages, ByT5 surpasses the previous state-of-art mT5 on all tasks and model sizes""",,,"Table 9 indicates pretraining completes 25 sequences per second on a TPUv3-64 device. 

""we set our sequence length to 1024 (bytes rather than tokens), and train for 1 million steps over batches of 2^20 tokens."" 

So 1024 sequences per step * 1M steps = 1.024 billion sequences
1.024 B / 25 = 40.96M seconds = 11378 hours or 474 days. This seems implausible, so probably they just used a bigger TPU slice for the full training, but this is not indicated.",Google TPU v3,,,92453.37635669748,,,,,,1048576.0,"""Like mT5, we set our sequence length to 1024 (bytes rather than tokens), and train for 1 million steps over batches of 2^20 tokens""",Open weights (unrestricted),Open source,Open source,"Apache:
https://github.com/google-research/byt5/blob/master/LICENSE

see mC4 notes for data accessibility

training script: https://github.com/google-research/byt5/blob/master/README.md ",,True
Transformer local-attention (NesT-B),"Google Cloud,Google Research",2021-05-26,Vision,"Image classification,Image generation",90100000.0,"Table A2, NesT-B is the largest size.",2.40576e+19,"17.9 GFLOPS per forward pass
300 epochs
1.28M training examples
3.5 f_to_b pass ratio
(From Imagenet paper-data, Besiroglu et al., forthcoming) 

17.9e9 FLOP *300 epoch *1.28M images *3.5 forward-backward-ratio = 24057600000000000000",ImageNet-1k,1280000.0,,Confident,https://arxiv.org/abs/2105.12723v4,"Nested Hierarchical Transformer: Towards Accurate, Data-Efficient and Interpretable Visual Understanding",5734.0,"Zizhao Zhang, Han Zhang, Long Zhao, Ting Chen, Sercan Arık, Tomas Pfister","Hierarchical structures are popular in recent vision transformers, however, they require sophisticated designs and massive datasets to work well. In this paper, we explore the idea of nesting basic local transformers on non-overlapping image blocks and aggregating them in a hierarchical way. We find that the block aggregation function plays a critical role in enabling cross-block non-local information communication. This observation leads us to design a simplified architecture that requires minor code changes upon the original vision transformer. The benefits of the proposed judiciously-selected design are threefold: (1) NesT converges faster and requires much less training data to achieve good generalization on both ImageNet and small datasets like CIFAR; (2) when extending our key ideas to image generation, NesT leads to a strong decoder that is 8× faster than previous transformer-based generators; and (3) we show that decoupling the feature learning and abstraction processes via this nested hierarchy in our design enables constructing a novel method (named GradCAT) for visually interpreting the learned model. Source code is available this https URL.","Industry,Industry","Multinational,United States of America,Multinational,United States of America,Canada,Switzerland",Highly cited,,,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"Apache-2.0 license, includes train code and evaluation
https://github.com/google-research/nested-transformer",,
CogView,"Tsinghua University,Alibaba DAMO Academy",2021-05-26,Image generation,Text-to-image,4000000000.0,"""We propose CogView, a 4-billion-parameter Transformer with VQ-VAE tokenizer to advance this problem.""",2.68e+22,"source: https://lair.lighton.ai/akronomicon/
archived: https://github.com/lightonai/akronomicon/tree/main/akrodb",WuDao Corpora,50000000000.0,"""We collected about 30 million text-image pairs from multiple channels, and built a 2.5TB new dataset (after tokenization, the size becomes about 250GB).""

250GB * (1 word / 5 bytes) = 50 billion words or 67 billion tokens

So 30M text-image pairs and 50 billion words",Likely,https://arxiv.org/abs/2105.13290,CogView: Mastering Text-to-Image Generation via Transformers,631.0,"M Ding, Z Yang, W Hong, W Zheng, C Zhou","Text-to-Image generation in the general domain has long been an open problem, which requires both a powerful generative model and cross-modal understanding. We propose CogView, a 4-billion-parameter Transformer with VQ-VAE tokenizer to advance this problem. We also demonstrate the finetuning strategies for various downstream tasks, e.g. style learning, super-resolution, text-image ranking and fashion design, and methods to stabilize pretraining, e.g. eliminating NaN losses. CogView achieves the state-of-the-art FID on the blurred MS COCO dataset, outperforming previous GAN-based models and a recent similar work DALL-E.","Academia,Industry","China,China",SOTA improvement,"""CogView achieves the state-of-the-art FID on the blurred MS COCO dataset, outperforming previous GAN-based models and a recent similar work DALL-E""",,,,NVIDIA Tesla V100 DGXS 16 GB,512.0,,60071.706664791694,,259056.25043301377,,,,,,Open weights (unrestricted),Open source,Open source,"Apache 2 license

https://github.com/THUDM/CogView

train script: https://github.com/THUDM/CogView/blob/main/scripts/pretrain_single_node.sh ",FP16,
MedBERT,"Peng Cheng Laboratory,University of Texas at Houston",2021-05-20,Medicine,"Medical diagnosis,Text classification,Prediction of hospital stay duration,Prediction of diabetic heart failure (DHF),Prediction of onset of pancreatic cancer (PaCa)",17000000.0,"17M from ""This is possibly due to the fact that the untrained Med-BERT is an over-parameterized model (around 17 million parameters) with a huge
number of configurations, so it might overfit to the training data""",9.47e+18,"flops = (1) * (3.13e13) * (24*7 * 3600) * (0.5) = 9.47e18
(num gpu) * (peak flops) * (time in seconds) * (assumed utilization rate)
I assume higher utilization rate, because only 1 GPU is used.
Citation from the text:
""We used a single Nvidia Tesla V100GPU of 32 GB graphics memory capacity, and we trained the model for a week for more than 45 million steps, for which each step consists of 32 patients (batch size)."" - page 11

Note that public code appears not to make use of the tensor core speed up, thus I use 3.13e13 FLOP/sec",Cerner Health Facts,,"data about 28M patients
""Our pretraining cohort for Med-BERT is consisting of 28 million
patients extracted from Cerner""",Likely,https://www.nature.com/articles/s41746-021-00455-y,Med-BERT: pretrained contextualized embeddings on large-scale structured electronic health records for disease prediction,517.0,"Laila Rasmy, Yang Xiang, Ziqian Xie, Cui Tao, Degui Zhi","Deep learning (DL)-based predictive models from electronic health records (EHRs) deliver impressive performance in many clinical tasks. Large training cohorts, however, are often required by these models to achieve high accuracy, hindering the adoption of DL-based models in scenarios with limited training data. Recently, bidirectional encoder representations from transformers (BERT) and related models have achieved tremendous successes in the natural language processing domain. The pretraining of BERT on a very large training corpus generates contextualized embeddings that can boost the performance of models trained on smaller datasets. Inspired by BERT, we propose Med-BERT, which adapts the BERT framework originally developed for the text domain to the structured EHR domain. Med-BERT is a contextualized embedding model pretrained on a structured EHR dataset of 28,490,650 patients. Fine-tuning experiments showed that Med-BERT substantially improves the prediction accuracy, boosting the area under the receiver operating characteristics curve (AUC) by 1.21–6.14% in two disease prediction tasks from two clinical databases. In particular, pretrained Med-BERT obtains promising performances on tasks with small fine-tuning training sets and can boost the AUC by more than 20% or obtain an AUC as high as a model trained on a training set ten times larger, compared with deep learning models without Med-BERT. We believe that Med-BERT will benefit disease prediction studies with small local training datasets, reduce data collection expenses, and accelerate the pace of artificial intelligence aided healthcare.","Academia,Academia","China,United States of America",SOTA improvement,"""This work is the first demonstration of significantly boosted
performance over state-of-the-art methods on multiple
clinical tasks with phenotyped cohorts.""",50.5,168.0,"""We used a single Nvidia Tesla V100GPU of 32 GB graphics memory capacity, and we trained the model for a week for more than 45 million steps, for which each step consists of 32 patients (batch size)."" - page 11",NVIDIA Tesla V100 DGXS 32 GB,1.0,,62.48645493610712,,278.0422249147422,,,,,,Unreleased,Open source,Open source,"Apache 2
https://github.com/ZhiGroup/Med-BERT
training guide: https://github.com/ZhiGroup/Med-BERT/tree/master/Pretraining%20Code 

""Initially we really hoped to share our models but unfortunately, the pre-trained models are no longer sharable. According to SBMI Data Service Office: ""Under the terms of our contracts with data vendors, we are not permitted to share any of the data utilized in our publications, as well as large models derived from those data.""",FP32,
ADM,OpenAI,2021-05-11,Image generation,"Image generation,Text-to-image",559000000.0,"Largest model is denoted ImageNet 512, has 559M parameters",6.2e+21,"Largest run with their architecture improvements is the ImageNet 512 variant. Table 7 suggests utilization is around 30% for largest models (though we only see 256 x 256 and 128 -> 512)

Table 10: ImageNet 512 variant took 1914 V100-days of training
125e12 FLOP/sec * 1914 days * 24 h/day * 3600 sec/h * 0.3 = 6.2e21","LSUN,ILSVRC 2012 subset of ImageNet",1281167.0,"Biggest models are trained on ImageNet 512x512. ImageNet ILSVRC has 1,281,167 images in the training set, but it is possible some were filtered due to size.

Note that a smaller model was trained on LSUN {bedroom, horse, cat}, which forms a larger dataset:
3,033,042 + 2,000,340 + 1,657,266 = 6,690,648 images

Epochs ≈ (1,940,000 * 256) / 1,300,000 ≈ 381 epochs",Confident,https://arxiv.org/abs/2105.05233,Diffusion Models Beat GANs on Image Synthesis,5567.0,"Prafulla Dhariwal, Alex Nichol","We show that diffusion models can achieve image sample quality superior to the current state-of-the-art generative models. We achieve this on unconditional image synthesis by finding a better architecture through a series of ablations. For conditional image synthesis, we further improve sample quality with classifier guidance: a simple, compute-efficient method for trading off diversity for fidelity using gradients from a classifier. We achieve an FID of 2.97 on ImageNet 128×128, 4.59 on ImageNet 256×256, and 7.72 on ImageNet 512×512, and we match BigGAN-deep even with as few as 25 forward passes per sample, all while maintaining better coverage of the distribution. Finally, we find that classifier guidance combines well with upsampling diffusion models, further improving FID to 3.94 on ImageNet 256×256 and 3.85 on ImageNet 512×512.",Industry,United States of America,"Highly cited,SOTA improvement","""We show that diffusion models can achieve image sample quality superior to the current state-of-the-art generative models""",381.0,,,NVIDIA V100,,,11274.484326547095,,,,,,,,Open weights (non-commercial),Open source,Open source,"These models are intended to be used for research purposes only. In particular, they can be used as a baseline for generative modeling research, or as a starting point to build off of for such research.
These models are not intended to be commercially deployed. Additionally, they are not intended to be used to create propaganda or offensive imagery.

repo is here with training code, MIT License
https://github.com/openai/guided-diffusion",FP16,
ProtT5-XXL-BFD,"Technical University of Munich,Med AI Technology,NVIDIA,Oak Ridge National Laboratory,Google,Seoul National University",2021-05-04,Biology,"Proteins,Protein or nucleotide language model (pLM/nLM)",11000000000.0,Table 2,3.7e+22,"FLOP = 11B*2*(920k*512*4096) +  11B*4*(920k*512*4096), 920k steps using seq length 512 batch size 4096, ",BFD (Big Fantastic Dataset),,"Table 1: 2122M proteins, 393B amino acids, 572 GB",Confident,"https://www.biorxiv.org/content/10.1101/2020.07.12.199554v3 or 
https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=9477085",ProtTrans:Towards Cracking the Language of Life's Code Through Self-Supervised Learning,,"Ahmed Elnaggar, Michael Heinzinger,  Christian Dallago, Ghalia Rehawi, Yu Wang, Llion Jones, Tom Gibbs, Tamas Feher, Christoph Angerer, Martin Steinegger, Debsindhu Bhowmik, Burkhard Rost","Computational biology and bioinformatics provide vast data gold-mines from protein sequences, ideal for Language Models taken from NLP. These LMs reach for new prediction frontiers at low inference costs. Here, we trained two auto-regressive models (Transformer-XL, XLNet) and four auto-encoder models (BERT, Albert, Electra, T5) on data from UniRef and BFD containing up to 393 billion amino acids. The LMs were trained on the Summit supercomputer using 5616 GPUs and TPU Pod up-to 1024 cores.

Dimensionality reduction revealed that the raw protein LM-embeddings from unlabeled data captured some biophysical features of protein sequences. We validated the advantage of using the embeddings as exclusive input for several subsequent tasks. The first was a per-residue prediction of protein secondary structure (3-state accuracy Q3=81%-87%); the second were per-protein predictions of protein sub-cellular localization (ten-state accuracy: Q10=81%) and membrane vs. water-soluble (2-state accuracy Q2=91%). For the per-residue predictions the transfer of the most informative embeddings (ProtT5) for the first time outperformed the state-of-the-art without using evolutionary information thereby bypassing expensive database searches. Taken together, the results implied that protein LMs learned some of the grammar of the language of life. To facilitate future work, we released our models at https://github.com/agemagician/ProtTrans.","Academia,Industry,Government,Industry,Academia","Germany,China,United States of America,United States of America,United States of America,Korea (Republic of)",SOTA improvement,"""For the per-residue predictions the transfer of the most informative embeddings (ProtT5) for the first time outperformed the state-of-the-art without using evolutionary information thereby bypassing expensive database searches.""",5.0,,,Google TPU v3,512.0,,43025.05718973151,,228081.21596876832,,,,,,Open weights (unrestricted),Unreleased,,"Licensed under the Academic Free License version 3.0

The ProtTrans project is a open source project supported by various partner companies and research institutions. We are committed to share all our pre-trained models and knowledge. 
https://github.com/agemagician/ProtTrans",FP32,
ProtT5-XXL,"Technical University of Munich,Med AI Technology,NVIDIA,Oak Ridge National Laboratory,Google,Seoul National University",2021-05-04,Biology,"Proteins,Protein or nucleotide language model (pLM/nLM)",11000000000.0,"source: https://lair.lighton.ai/akronomicon/

archived: https://github.com/lightonai/akronomicon/tree/main/akrodb",7.37e+22,"7.37e22 from:
source: https://lair.lighton.ai/akronomicon/
archived: https://github.com/lightonai/akronomicon/blob/main/akrodb/Technical%20University%20of%20Munich/ProtT5-XXL.json

3.7E+22 from Table 9 https://www.biorxiv.org/content/10.1101/2023.07.05.547496v1

Manual calculation: forward passes on 512 * (4096*920k + 2048*343k) = 2.3T tokens
Backward passes on 15% of those, 2.3T * 0.15 = 343B tokens.
Total FLOPs: (2 * 11B * 2.3T) + (4 * 11B * 343B) = 6.57e22","BFD (Big Fantastic Dataset),UniRef50",407000000000.0,"Table 2. ProtT5-XXL uses BFD100 and UniRef50, which sum to 407 billion amino acids.",Confident,"https://www.biorxiv.org/content/10.1101/2020.07.12.199554v3 or 
https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=9477085",ProtTrans: Towards Cracking the Language of Life’s Code Through Self-Supervised Learning,396.0,"A Elnaggar, M Heinzinger, C Dallago, G Rihawi","Computational biology and bioinformatics provide vast data gold-mines from protein sequences, ideal for Language Models taken from NLP. These LMs reach for new prediction frontiers at low inference costs. Here, we trained two auto-regressive models (Transformer-XL, XLNet) and four auto-encoder models (BERT, Albert, Electra, T5) on data from UniRef and BFD containing up to 393 billion amino acids. The LMs were trained on the Summit supercomputer using 5616 GPUs and TPU Pod up-to 1024 cores. Dimensionality reduction revealed that the raw protein LM-embeddings from unlabeled data captured some biophysical features of protein sequences. We validated the advantage of using the embeddings as exclusive input for several subsequent tasks. The first was a per-residue prediction of protein secondary structure (3-state accuracy Q3=81%-87%); the second were per-protein predictions of protein sub-cellular localization (ten-state accuracy: Q10=81%) and membrane vs. water-soluble (2-state accuracy Q2=91%). For the per-residue predictions the transfer of the most informative embeddings (ProtT5) for the first time outperformed the state-of-the-art without using evolutionary information thereby bypassing expensive database searches. Taken together, the results implied that protein LMs learned some of the grammar of the language of life. To facilitate future work, we released our models at https://github.com/agemagician/ProtTrans.","Academia,Industry,Government,Industry,Academia","Germany,China,United States of America,United States of America,United States of America,Korea (Republic of)",SOTA improvement,"""For the per-residue predictions the transfer of the most informative embeddings (ProtT5) for the first time outperformed the state-of-the-art
without using evolutionary information""",,,,Google TPU v3,512.0,,85701.26256441118,,228081.21596876832,,,,,,Open weights (unrestricted),Unreleased,,"Licensed under the Academic Free License version 3.0

The ProtTrans project is a open source project supported by various partner companies and research institutions. We are committed to share all our pre-trained models and knowledge. 
https://github.com/agemagician/ProtTrans",FP32,True
ProtT5-XL-U50,,2021-05-04,Biology,Proteins,3000000000.0,Table 2,1.8704498688e+22,"991K steps, 2048 batch, 512 sequence length (Table 2)

Total tokens: 991K*2048*512=1039138816000

FLOP: 6*1039138816000*3000000000=18704498688000000000000",UniRef50,1039138816000.0,,Confident,https://www.biorxiv.org/content/10.1101/2020.07.12.199554v3.full.pdf,,,"Ahmed Elnaggar, Michael Heinzinger, View ORCID ProfileChristian Dallago, Ghalia Rehawi, Yu Wang, Llion Jones, Tom Gibbs, Tamas Feher, Christoph Angerer, Martin Steinegger, View ORCID ProfileDebsindhu Bhowmik, Burkhard Rost",,,,Highly cited,,,,,,256.0,,,,,,,,,,Open weights (non-commercial),Unreleased,,"Academic Free License v3.0 License
https://huggingface.co/Rostlab/prot_t5_xl_uniref50

It seems that there is no training code here, only inference and fine-tuning
https://github.com/agemagician/ProtTrans",FP32,
ProtBERT-BFD,"Technical University of Munich,NVIDIA,Seoul National University,Google,Oak Ridge National Laboratory,Med AI Technology",2021-05-04,Biology,"Proteins,Protein or nucleotide language model (pLM/nLM)",420000000.0,Table 2,3.9e+22,"FLOP = 420M * 6 * (800k*512*32k + 200k*2048*6k) 
1M steps total split into two phases, (1) 800k steps, seq length 512 (batch size 32k) and (2) 200k steps, seq length 2048 (batch size 6k)
single TPU Pod V3-1024 (64 nodes and 1024 TPUs) info from paper and https://huggingface.co/Rostlab/prot_bert_bfd",BFD (Big Fantastic Dataset),8900000000000.0,"""ProtBERT-BFD (420M parameters) saw around 27B proteins during pre-training"" 

Table 1: BFD has 2122M proteins, 393B amino acids, 572 GB
Suggests average amino acid length of 185

Implies 27B * 185 = 5T amino acids seen in training

However, Table 2 suggests number of tokens (amino acids) seen in training was:
(512*32768*800k) + (2048*6144*200k) = 15.9T amino acids in training

Geometric mean = 8.9T",Confident,"https://www.biorxiv.org/content/10.1101/2020.07.12.199554v3 or 
https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=9477085",ProtTrans:Towards Cracking the Language of Life's Code Through Self-Supervised Learning,,"Ahmed Elnaggar, Michael Heinzinger,  Christian Dallago, Ghalia Rehawi, Yu Wang, Llion Jones, Tom Gibbs, Tamas Feher, Christoph Angerer, Martin Steinegger,  Debsindhu Bhowmik, Burkhard Rost","Computational biology and bioinformatics provide vast data gold-mines from protein sequences, ideal for Language Models taken from NLP. These LMs reach for new prediction frontiers at low inference costs. Here, we trained two auto-regressive models (Transformer-XL, XLNet) and four auto-encoder models (BERT, Albert, Electra, T5) on data from UniRef and BFD containing up to 393 billion amino acids. The LMs were trained on the Summit supercomputer using 5616 GPUs and TPU Pod up-to 1024 cores.

Dimensionality reduction revealed that the raw protein LM-embeddings from unlabeled data captured some biophysical features of protein sequences. We validated the advantage of using the embeddings as exclusive input for several subsequent tasks. The first was a per-residue prediction of protein secondary structure (3-state accuracy Q3=81%-87%); the second were per-protein predictions of protein sub-cellular localization (ten-state accuracy: Q10=81%) and membrane vs. water-soluble (2-state accuracy Q2=91%). For the per-residue predictions the transfer of the most informative embeddings (ProtT5) for the first time outperformed the state-of-the-art without using evolutionary information thereby bypassing expensive database searches. Taken together, the results implied that protein LMs learned some of the grammar of the language of life. To facilitate future work, we released our models at https://github.com/agemagician/ProtTrans.","Academia,Industry,Academia,Industry,Government","Germany,United States of America,Korea (Republic of),United States of America,United States of America,China",SOTA improvement,"""For the per-residue predictions the transfer of the most informative embeddings (ProtT5) for the first time outperformed the state-of-the-art without using evolutionary information thereby bypassing expensive database searches.""",,,"figure 3 shows 19 hours per epoch, though this was on a different GPU setup than the one used for training.",Google TPU v3,1024.0,,45350.73595674404,,456162.43193753663,,,,,,Open weights (unrestricted),Unreleased,,"Licensed under the Academic Free License version 3.0

The ProtTrans project is a open source project supported by various partner companies and research institutions. We are committed to share all our pre-trained models and knowledge. 
https://github.com/agemagician/ProtTrans",FP32,
ViT + DINO,"INRIA,Facebook AI Research",2021-04-29,Vision,Image classification,85000000.0,"85M, table 1",2.1e+20,"""Overall, training DINO with Vision Transformers
achieves 76.1 top-1 accuracy using two 8-GPU servers for 3
days""

GPU is V100

16 * 125 teraflops * 3 days * 0.4 utilization
= 2.1e20

However, this isn't the best result in the paper (which is 80.1% with ViT-B/8). 76.1% is the result from ViT-B/16 per Table 2, which may be 5x cheaper than ViT-B/8 based on Table 1?

upd:
 ""Table 8: Time and memory requirements. We show total running
time and peak memory per GPU (“mem.”) when running ViT-S/16
DINO models on two 8-GPU machines.""

2*8*125 teraflops*72.6h*3600*0.4=2.09088e+20",ImageNet,,,Confident,https://arxiv.org/abs/2104.14294,Emerging Properties in Self-Supervised Vision Transformers,4593.0,"Mathilde Caron, Hugo Touvron, Ishan Misra, Hervé Jégou, Julien Mairal, Piotr Bojanowski, Armand Joulin","In this paper, we question if self-supervised learning provides new properties to Vision Transformer (ViT) that stand out compared to convolutional networks (convnets). Beyond the fact that adapting self-supervised methods to this architecture works particularly well, we make the following observations: first, self-supervised ViT features contain explicit information about the semantic segmentation of an image, which does not emerge as clearly with supervised ViTs, nor with convnets. Second, these features are also excellent k-NN classifiers, reaching 78.3% top-1 on ImageNet with a small ViT. Our study also underlines the importance of momentum encoder, multi-crop training, and the use of small patches with ViTs. We implement our findings into a simple self-supervised method, called DINO, which we interpret as a form of self-distillation with no labels. We show the synergy between DINO and ViTs by achieving 80.1% top-1 on ImageNet in linear evaluation with ViT-Base.","Academia,Industry","France,United States of America",Highly cited,,300.0,,,NVIDIA V100,,,380.2849049080349,,,,,,,,Open weights (unrestricted),Open source,Open source,"models and code including training: https://github.com/facebookresearch/dino

Apache-2.0 license
",,
M6-T,Alibaba,2021-03-05,"Multimodal,Language,Vision","Chat,Image captioning",1002700000000.0,Table 5. Note model is sparse MoE with 960 experts; not all parameters are activated on the forward pass.,5.5e+21,Estimate taken from https://www.governance.ai/research-paper/recent-trends-chinas-llm-landscape,M6-Corpus,1900000000000.0,60.5B images and 111.8B tokens of text,Likely,https://arxiv.org/abs/2105.15082,M6-T: Exploring Sparse Expert Models and Beyond,76.0,"An Yang, Junyang Lin, Rui Men, Chang Zhou, Le Jiang, Xianyan Jia, Ang Wang, Jie Zhang, Jiamang Wang, Yong Li, Di Zhang, Wei Lin, Lin Qu, Jingren Zhou, Hongxia Yang","Mixture-of-Experts (MoE) models can achieve promising results with outrageous large amount of parameters but constant computation cost, and thus it has become a trend in model scaling. Still it is a mystery how MoE layers bring quality gains by leveraging the parameters with sparse activation. In this work, we investigate several key factors in sparse expert models. We observe that load imbalance may not be a significant problem affecting model quality, contrary to the perspectives of recent studies, while the number of sparsely activated experts k and expert capacity C in top-k routing can significantly make a difference in this context. Furthermore, we take a step forward to propose a simple method called expert prototyping that splits experts into different prototypes and applies k top-1 routing. This strategy improves the model quality but maintains constant computational costs, and our further exploration on extremely large-scale models reflects that it is more effective in training larger models. We push the model scale to over 1 trillion parameters and implement it on solely 480 NVIDIA V100-32GB GPUs, in comparison with the recent SOTAs on 2048 TPU cores. The proposed giant model achieves substantial speedup in convergence over the same-size baseline.",Industry,China,SOTA improvement,"Improves on hardware SOTA for similar problems

Abstract: 
""We push the model
scale to over 1 trillion parameters and implement it on solely 480 NVIDIA V100-32GB GPUs, in comparison with the recent SOTAs [11; 6] on 2048 TPU cores.""",,,,NVIDIA Tesla V100 DGXS 32 GB,480.0,,13156.86123531961,,243309.1333554511,,,,,,Unreleased,Unreleased,,,FP16,
Generative BST,Facebook AI Research,2021-03-05,Language,Language modeling/generation,9431810048.0,The largest model is a transformer with 9.4B parameters (Table 2),1.449e+22,"""Both our 2.7B and 9.4B parameter models were trained with batches of approximately 500k label BPE tokens per batch [...] The 9.4B parameter model was trained [...] for a total of 200k SGD steps.""

Also note that the full dataset contains 56.8B label BPE tokens and 88.8B context tokens, so for each batch of 500k label tokens, there are likely 500k * 88.8B / 56.8B = 780k context tokens.

6 * 9.4318B * 200k * (500k + 780k) = 1.449e22",,56800000000.0,"Section 6. Pre-training is done on Pushshift.io Reddit: ""Our final dataset contains 1.50B comments totaling 56.8B label BPE tokens and 88.8B context tokens.""
None of the fine-tuning datasets put a significant dent in the total dataset size.

Epochs: they do 200k steps, where each batch has 500k label tokens = 100B label tokens seen. 56.8B label tokens in pre-training dataset, so 1.76 epochs",Confident,https://arxiv.org/abs/2004.13637,Recipes for building an open-domain chatbot,932.0,"Stephen Roller, Emily Dinan, Naman Goyal, Da Ju, Mary Williamson, Yinhan Liu, Jing Xu, Myle Ott, Kurt Shuster, Eric M. Smith, Y-Lan Boureau, Jason Weston","Building open-domain chatbots is a challenging area for machine learning research. While prior work has shown that scaling neural models in the number of parameters and the size of the data they are trained on gives improved results, we show that other ingredients are important for a high-performing chatbot. Good conversation requires a number of skills that an expert conversationalist blends in a seamless way: providing engaging talking points and listening to their partners, and displaying knowledge, empathy and personality appropriately, while maintaining a consistent persona. We show that large scale models can learn these skills when given appropriate training data and choice of generation strategy. We build variants of these recipes with 90M, 2.7B and 9.4B parameter models, and make our models and code publicly available. Human evaluations show our best models are superior to existing approaches in multi-turn dialogue in terms of engagingness and humanness measurements. We then discuss the limitations of this work by analyzing failure cases of our models.",Industry,United States of America,SOTA improvement,"Abstract:
""Human evaluations show our best models are superior to existing approaches in multi-turn dialogue in terms of engagingness and humanness measurements. We then discuss the limitations of this work by analyzing failure cases of our models.""",1.7605633803,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"MIT license

https://github.com/facebookresearch/ParlAI
https://parl.ai/projects/recipes/",FP16,
Meta Pseudo Labels,"Google Brain,Google AI",2021-03-01,Vision,Image classification,480000000.0,"Table 4
 480M",4.79e+22,"From communication with author:

22671 TPU days on specific hardware.

Which hardware did you use and in which configuration?
2048 cores of TPU v3.

Precision: Mixed. bfloat16 for activations, float32 for weights and optimizer slots.

2048 TPUv3 cores means 1024 TPUv3 chips, and the spec is 123e12 FLOP/second per chip with bfloat16 precision (Source: https://cloud.google.com/tpu/docs/system-architecture-tpu-vm)

So the compute estimate is:
1024 chips * 123e12 FLOP/second * 0.4 utilization * 11 days * 24 * 60 * 60 = 4.788191232e+22 FLOP","ImageNet,JFT-300M",130000000.0,"Section 4
Datasets. For this experiment, we use the entire ImageNet
training set as labeled data, and use the JFT dataset as unlabeled data. The JFT dataset has 300 million images, and
then is filtered down to 130 million images by Noisy Student
using confidence thresholds and up-sampling [77]. We use
the same 130 million images as Noisy Student",Likely,https://arxiv.org/abs/2003.10580,Meta pseudo labels,597.0,"Hieu Pham, Zihang Dai, Qizhe Xie, Minh-Thang Luong, and Quoc V. Le","We present Meta Pseudo Labels, a semi-supervised learning method that achieves a new state-of-the-art top-1 accuracy of 90.2% on ImageNet, which is 1.6% better than the existing state-of-the-art. Like Pseudo Labels, Meta Pseudo Labels has a teacher network to generate pseudo labels on unlabeled data to teach a student network. However, unlike Pseudo Labels where the teacher is fixed, the teacher in Meta Pseudo Labels is constantly adapted by the feedback of the student's performance on the labeled dataset. As a result, the teacher generates better pseudo labels to teach the student. Our code will be available at this https URL.","Industry,Industry","United States of America,Multinational,United States of America",SOTA improvement,,,264.0,"11 days from section 4:
""We train the model for 1 million steps in total,
which takes about 11 days for EfficientNet-L2 and 10 days
for EfficientNet-B6-Wide. ""

""Specifically, our training process runs on a cluster of 2,048
TPUv3 cores. ""
",Google TPU v3,1024.0,,53844.28059190435,,456813.0362967626,,,,,,Unreleased,Open source,Open source,"Apache-2.0 license
https://github.com/google-research/google-research/blob/master/meta_pseudo_labels/README.md",,True
SRU++ Large,ASAPP,2021-02-24,Language,Language modeling,234000000.0,Table 5,2.1173704e+19,"6 FLOP / token / parameter * 234000000 parameters * 1024 tokens per sample * 8*8 samples per batch * 400000 steps = 3.6805018e+19 FLOP

31330000000000 FLOP / sec * 360 GPU-hours * 3600 sec / hour * 0.3 [assumed utilization] = 1.2181104e+19 FLOP

sqrt(3.6805018e+19*1.2181104e+19) = 2.1173704e+19 

",WikiText-103,103000000.0,"Table 12:
400K training steps
batch size: 8*8 = 64
sequence length = 1024

1024*8*8*400000/103000000 = 254.5 epochs",Confident,https://arxiv.org/abs/2102.12459,When Attention Meets Fast Recurrence: Training Language Models with Reduced Compute,43.0,Tao Lei,"Large language models have become increasingly difficult to train because of the growing computation time and cost. In this work, we present SRU++, a highly-efficient architecture that combines fast recurrence and attention for sequence modeling. SRU++ exhibits strong modeling capacity and training efficiency. On standard language modeling tasks such as Enwik8, Wiki-103 and Billion Word datasets, our model obtains better bits-per-character and perplexity while using 3x-10x less training cost compared to top-performing Transformer models. For instance, our model achieves a state-of-the-art result on the Enwik8 dataset using 1.6 days of training on an 8-GPU machine. We further demonstrate that SRU++ requires minimal attention for near state-of-the-art performance. Our results suggest jointly leveraging fast recurrence with little attention as a promising direction for accelerating model training and inference.",Industry,United States of America,SOTA improvement,"""our model achieves a state-of-the-art result on the ENWIK8 dataset using 1.6 days of training on an 8-GPU machine. """,254.5,, 15† GPU-days = 360 GPU-hours,NVIDIA V100,,,,,,,,,65536.0,1024*8*8,Open weights (unrestricted),Open source,Open source,"MIT license repo. says models available as package: https://github.com/asappresearch/sru

training: https://github.com/asappresearch/sru/blob/master/language_model/train_lm.py ",FP16,
Rational DQN Average,TU Darmstadt,2021-02-18,Games,Atari,1683456.0,See figure 7,,,,,,,https://openreview.net/forum?id=gnRmI8TatHV,Recurrent Rational Networks,8.0,"Q Delfosse, P Schramowski, A Molina","Latest insights from biology show that intelligence not only emerges from the connections between neurons but that individual neurons shoulder more computational responsibility than previously anticipated. This perspective should be critical in the context of constantly changing distinct reinforcement learning environments, yet current approaches still primarily employ static activation functions. In this work, we motivate why rationals are suitable for adaptable activation functions and why their inclusion into neural networks is crucial. Inspired by recurrence in residual networks, we derive a condition under which rational units are closed under residual connections and formulate a naturally regularised version: the recurrent-rational. We demonstrate that equipping popular algorithms with (recurrent-)rational activations leads to consistent improvements on Atari games, especially turning simple DQN into a solid approach, competitive to DDQN and Rainbow.
",Academia,Germany,SOTA improvement,,,,,,,,,,,,,,,,Unreleased,Open (non-commercial),,"""To get the trained agents, please contact Quentin Delfosse""

no clear license
https://github.com/ml-research/rational_rl/",,
MSA Transformer,"Facebook AI Research,University of California (UC) Berkeley,New York University (NYU)",2021-02-13,Biology,"Proteins,Protein or nucleotide language model (pLM/nLM)",100000000.0,"""We train an MSA Transformer model with 100M parameters..."" ",5.49e+21,"Based on: https://docs.google.com/spreadsheets/d/1enan21dFx03TkwufHgOwTVNBtuYlqNY9uurjIK6YS-8/edit#gid=0

Number of steps 4.5e5, batch size (tokens) 6.1e7, parameters 1e8

Calculation = 4e8 FLOP/bp * 4.5e5 bp + 2e8 FLOP/fp * 2.75e13 fp

Batch size: 512
Seq length: 100 * 1192 tokens
All models are trained on 32 V100 GPUs for 100k updates. The four models with best contact precision are then further trained to 150k updates. Finally, the best model at 150k updates is trained to 450k updates.

450k * 512 * 100 * 1192 * 100M * 6 = 1.65e22","UniRef50,UniRef30 (FKA UniClust30)",9297600000000.0,"""We train an MSA Transformer model with 100M parameters on a large dataset (4.3 TB) of 26 million MSAs, with an average of 1192 sequences per MSA.""
Average sequence is ~300 amino acids/tokens long.
26 million * 1192 * 300 = 9.3T tokens",Likely,https://proceedings.mlr.press/v139/rao21a/rao21a.pdf,MSA Transformer,433.0,"Roshan Rao, Jason Liu, Robert Verkuil, Joshua Meier, John F. Canny, Pieter Abbeel, Tom Sercu, Alexander Rives","Unsupervised protein language models trained across millions of diverse sequences learn structure and function of proteins. Protein language models studied to date have been trained to perform inference from individual sequences. The longstanding approach in computational biology has been to make inferences from a family of evolutionarily related sequences by fitting a model to each family independently. In this work we combine the two paradigms. We introduce a protein language model which takes as input a set of sequences in the form of a multiple sequence alignment. The model interleaves row and column attention across the input sequences and is trained with a variant of the masked language modeling objective across many protein families. The performance of the model surpasses current state-of-the-art unsupervised structure learning methods by a wide margin, with far greater parameter efficiency than prior state-of-the-art protein language models. ","Industry,Academia,Academia","United States of America,United States of America,United States of America",SOTA improvement,"""The performance of the model surpasses current state-of-the-art unsupervised structure learning methods by a wide margin, with far greater parameter efficiency than prior state-of-the-art protein language models""",,,,NVIDIA Tesla V100 DGXS 32 GB,32.0,,13256.937301517895,,16227.834954676886,,,,,,Open weights (unrestricted),Unreleased,Open source,"MIT: https://github.com/facebookresearch/esm

looks like no training code",,
top-down frozen classifier,"University of Edinburgh,Toshiba Cambridge Research Laboratory",2021-02-09,Speech,Speech recognition,,,,,WSJ,,,Unknown,https://arxiv.org/abs/2102.04697,Train your classifier first: Cascade Neural Networks Training from upper layers to lower layers,2.0,"Shucong Zhang, Cong-Thanh Do, Rama Doddipatla, Erfan Loweimi, Peter Bell, Steve Renals","Although the lower layers of a deep neural network learn features which are transferable across datasets, these layers are not transferable within the same dataset. That is, in general, freezing the trained feature extractor (the lower layers) and retraining the classifier (the upper layers) on the same dataset leads to worse performance. In this paper, for the first time, we show that the frozen classifier is transferable within the same dataset. We develop a novel top-down training method which can be viewed as an algorithm for searching for high-quality classifiers. We tested this method on automatic speech recognition (ASR) tasks and language modelling tasks. The proposed method consistently improves recurrent neural network ASR models on Wall Street Journal, self-attention ASR models on Switchboard, and AWD-LSTM language models on WikiText-2.","Academia,Industry","United Kingdom of Great Britain and Northern Ireland,United Kingdom of Great Britain and Northern Ireland",SOTA improvement,"""Table 2 demonstrates that, to the best of our knowledge, top-down training results in state-of-the art character error rates for LSTM-based endto-end models on WSJ""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
DeiT-B,"Meta AI,Sorbonne University",2021-01-15,Vision,Image classification,86000000.0,(DeiT-B),7.884e+19,"2*86000000 parameters*3*1280000 training examples*300 epochs=1.98144e+17 FLOPs

compute [FLOP] = training time [s] × # of GPUs/TPUs × peak FLOP/s × utilization rate

(53h+20h)*3600*8*125000000000000 peak FLOP/s*0.3=7.884e+19

",ImageNet,1280000.0,,Confident,https://arxiv.org/abs/2012.12877,Training data-efficient image transformers & distillation through attention,5607.0,"Hugo Touvron, Matthieu Cord, Matthijs Douze, Francisco Massa, Alexandre Sablayrolles, Hervé Jégou","Recently, neural networks purely based on attention were shown to address image understanding tasks such as image classification. However, these visual transformers are pre-trained with hundreds of millions of images using an expensive infrastructure, thereby limiting their adoption.
In this work, we produce a competitive convolution-free transformer by training on Imagenet only. We train them on a single computer in less than 3 days. Our reference vision transformer (86M parameters) achieves top-1 accuracy of 83.1% (single-crop evaluation) on ImageNet with no external data.
More importantly, we introduce a teacher-student strategy specific to transformers. It relies on a distillation token ensuring that the student learns from the teacher through attention. We show the interest of this token-based distillation, especially when using a convnet as a teacher. This leads us to report results competitive with convnets for both Imagenet (where we obtain up to 85.2% accuracy) and when transferring to other tasks. We share our code and models.","Industry,Academia","United States of America,France",Highly cited,,300.0,53.0,"A typical training of 300 epochs takes 37 hours with 2 nodes or 53 hours on a single node for the DeiT-B.
In this paper, we train a vision transformer on a single 8-GPU node in two
to three days (53 hours of pre-training, and optionally 20 hours of fine-tuning) that is competitive with convnets having a similar number of parameters and efficiency. It uses Imagenet as the sole training set.",NVIDIA V100,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"models, train, inference: https://github.com/facebookresearch/deit/blob/main/README_deit.md 

Apache-2.0 license",,
Switch,Google,2021-01-11,Language,Text autocompletion,1571000000000.0,"""Combining expert, model and data parallelism, we design two large Switch Transformer models, one with 395 billion and 1.6 trillion parameters""
Table 9 gives more precise count of 1571B parameters",8.22e+22,"Table 4
https://arxiv.org/ftp/arxiv/papers/2104/2104.10350.pdf",C4,576000000000.0,"""In our protocol we pre-train with 2^20 (1,048,576) tokens
per batch for 550k steps amounting to 576B total tokens.""

1 token ~ 0.75 words",Confident,https://arxiv.org/abs/2101.03961,Switch Transformers: Scaling to Trillion Parameter Models with Simple and Efficient Sparsity,1628.0,"William Fedus, Barret Zoph, Noam Shazeer","In deep learning, models typically reuse the same parameters for all inputs. Mixture of Experts (MoE) defies this and instead selects different parameters for each incoming example. The result is a sparsely-activated model -- with outrageous numbers of parameters -- but a constant computational cost. However, despite several notable successes of MoE, widespread adoption has been hindered by complexity, communication costs and training instability -- we address these with the Switch Transformer. We simplify the MoE routing algorithm and design intuitive improved models with reduced communication and computational costs. Our proposed training techniques help wrangle the instabilities and we show large sparse models may be trained, for the first time, with lower precision (bfloat16) formats. We design models based off T5-Base and T5-Large to obtain up to 7x increases in pre-training speed with the same computational resources. These improvements extend into multilingual settings where we measure gains over the mT5-Base version across all 101 languages. Finally, we advance the current scale of language models by pre-training up to trillion parameter models on the ""Colossal Clean Crawled Corpus"" and achieve a 4x speedup over the T5-XXL model.
",Industry,United States of America,"Highly cited,SOTA improvement",""" On ANLI (Nie et al., 2019), Switch XXL improves over the prior state-of-the-art to get a 65.7 accuracy versus the prior best of 49.4 (Yang et al., 2020)... Finally, we also conduct an early examination of the model’s knowledge with three closed-book knowledge-based tasks: Natural
Questions, WebQuestions and TriviaQA, without additional pre-training using Salient Span Masking (Guu et al., 2020). In all three cases, we observe improvements over the prior stateof-the-art T5-XXL model (without SSM)""",,648.0,"see table 4 in https://arxiv.org/ftp/arxiv/papers/2104/2104.10350.pdf
",Google TPU v3,1024.0,0.2796747967,139663.55942731188,,457311.78237926256,,,,,,Open weights (unrestricted),Unreleased,Open source,"Apache 2 for weights: https://huggingface.co/google/switch-c-2048 

paper links to this repo but not clear that the training hyperparams for Switch are here:
https://github.com/google-research/t5x

",BF16,True
BigSSL,"Google,Apple",2021-01-10,Speech,Speech recognition,8000000000.0,"""... we study the utility of large models, with the parameter count ranging from 600M to 8B...""",,,,42626880000.0,"Sum all values in Table VII, and add 34k for English VAD, and 926k for English Youtube = 3116k hours

Note this involves significant self-training: ""Noisy student training (NST) [23], [41] is a self-training
method where a teacher model generates pseudo-labels for a
large unlabeled dataset, which is in turn used to train a student
model with augmentation.""

1 hour ~ 13,680 words
13680 * 3116000 = 42626880000",,https://arxiv.org/abs/2109.13226,BigSSL: Exploring the Frontier of Large-Scale Semi-Supervised Learning for Automatic Speech Recognition,151.0,"Yu Zhang,  Daniel S. Park, Wei Han,James Qin, Anmol Gulati, Joel Shor, Aren Jansen, Yuanzhong Xu, Yanping Huang, Shibo Wang, Zongwei Zhou, Bo Li, Min Ma, William Chan, Jiahui Yu, Yongqiang Wang, Liangliang Cao, Khe Chai Sim, Bhuvana Ramabhadran, Tara N. Sainath, Françoise Beaufays, Zhifeng Chen, Quoc V. Le, Chung-Cheng Chiu, Ruoming Pang and Yonghui Wu","We summarize the results of a host of efforts using giant automatic speech recognition (ASR) models pre-trained using large, diverse unlabeled datasets containing approximately a million hours of audio. We find that the combination of pre-training, self-training and scaling up model size greatly increases data efficiency, even for extremely large tasks with tens of thousands of hours of labeled data. In particular, on an ASR task with 34k hours of labeled data, by fine-tuning an 8 billion parameter pre-trained Conformer model we can match state-of-the-art (SoTA) performance with only 3% of the training data and significantly improve SoTA with the full training set. We also report on the universal benefits gained from using big pre-trained and self-trained models for a large set of downstream tasks that cover a wide range of speech domains and span multiple orders of magnitudes of dataset sizes, including obtaining SoTA performance on many public benchmarks. In addition, we utilize the learned representation of pre-trained networks to achieve SoTA results on non-ASR tasks.","Industry,Industry","United States of America,United States of America",SOTA improvement,"""In particular, on an ASR task with 34k hours of labeled data, by fine-tuning an 8 billion parameter pre-trained Conformer model we can match state-of-the-art (SoTA) performance with only 3% of the training data and significantly improve SoTA with the full training set""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
DALL-E,OpenAI,2021-01-05,Image generation,"Text-to-image,Image generation",12000000000.0,DALL·E is a 12-billion parameter version of GPT-3 trained to generate images from text descriptions,4.7e+22,"source: https://lair.lighton.ai/akronomicon/

archived: https://github.com/lightonai/akronomicon/tree/main/akrodb

VAE training ""on 64 16 GB NVIDIA V100 GPUs, with a per-GPU batch size of 8, resulting in a total batch size of 512. It is trained for a total of 3,000,000 updates.""

Transformer training: ""We trained the model using 1024, 16 GB NVIDIA V100 GPUs and a total batch size of 1024, for a total of 430,000 updates.""; ""We concatenate up to 256 BPE-encoded text tokens with the 32 × 32 = 1024 image tokens""
Total tokens: 430000 steps * 1024 batch size * 1280 sequence length = 563609600000

Transformer FLOP: 6 * 12B parameter * 563609600000 tokens = 4.057989e+22

Estimating the VAE at ~15% seems reasonable",DALL-E,250000000.0,"""To scale up to 12-billion parameters, we created a dataset of a similar scale to JFT-300M (Sun et al., 2017) by collecting
250 million text-images pairs from the internet. ""

number of epochs: 
1024 batch size * 430,000 updates / 250,000,000 = 1.76",Likely,"https://openai.com/blog/dall-e/

https://arxiv.org/abs/2102.12092",Zero-Shot Text-to-Image Generation,4003.0,"Aditya Ramesh, Mikhail Pavlov, Gabriel Goh, Scott Gray, Chelsea Voss, Alec Radford, Mark Chen, Ilya Sutskever","Text-to-image generation has traditionally focused on finding better modeling assumptions for training on a fixed dataset. These assumptions might involve complex architectures, auxiliary losses, or side information such as object part labels or segmentation masks supplied during training. We describe a simple approach for this task based on a transformer that autoregressively models the text and image tokens as a single stream of data. With sufficient data and scale, our approach is competitive with previous domain-specific models when evaluated in a zero-shot fashion.",Industry,United States of America,"Significant use,Highly cited",,1.76,,"""We trained the model using 1024, 16 GB NVIDIA V100 GPUs and a total batch size of 1024, for a total of 430,000 updates.
At the start of training, we use a linear schedule to ramp up the step size to 4.5 · 10−4 over 5000 updates, and halved the
step size each time the training loss appeared to plateau. We did this a total of five times, ending training with a final step
size that was 32 times smaller than the initial one. """,NVIDIA Tesla V100 DGXS 16 GB,1024.0,,125818.6901,,519741.92129196384,,,,,,API access,Unreleased,,,FP16,True
CLIP (ViT L/14@336px),OpenAI,2021-01-05,"Multimodal,Vision,Language,Video","Zero-shot image classification,Character recognition,Video description",370000000.0,"Image encoder
Vision Transformer
Table 1 in https://arxiv.org/pdf/2010.11929.pdf
Authors fine-tuned ViT L/14 at additional 336px resolution, hence the @336 (See ViT)
307M params

Text encoder
~Transformer (from paper)
63M params",1.05e+22,"https://docs.google.com/document/d/156miAJkFN9DDX06C3s03UDsretCtymCKiGDddLBCgQE/edit?usp=sharing

",Unspecified unreleased,400000000.0,,Confident,"https://arxiv.org/abs/2103.00020
https://huggingface.co/openai/clip-vit-large-patch14-336",Learning Transferable Visual Models From Natural Language Supervision,20331.0,"Alec Radford, Jong Wook Kim, Chris Hallacy, Aditya Ramesh, Gabriel Goh, Sandhini Agarwal, Girish Sastry, Amanda Askell, Pamela Mishkin, Jack Clark, Gretchen Krueger, Ilya Sutskever","State-of-the-art computer vision systems are trained to predict a fixed set of predetermined object categories. This restricted form of supervision limits their generality and usability since additional labeled data is needed to specify any other visual concept. Learning directly from raw text about images is a promising alternative which leverages a much broader source of supervision. We demonstrate that the simple pre-training task of predicting which caption goes with which image is an efficient and scalable way to learn SOTA image representations from scratch on a dataset of 400 million (image, text) pairs collected from the internet. After pre-training, natural language is used to reference learned visual concepts (or describe new ones) enabling zero-shot transfer of the model to downstream tasks. We study the performance of this approach by benchmarking on over 30 different existing computer vision datasets, spanning tasks such as OCR, action recognition in videos, geo-localization, and many types of fine-grained object classification. The model transfers non-trivially to most tasks and is often competitive with a fully supervised baseline without the need for any dataset specific training. For instance, we match the accuracy of the original ResNet-50 on ImageNet zero-shot without needing to use any of the 1.28 million training examples it was trained on. We release our code and pre-trained model weights at this https URL.",Industry,United States of America,"Highly cited,SOTA improvement",,,288.0,"“The largest ResNet model, RN50x64, took 18 days to train on 592 V100 GPUs while the largest Vision Transformer took 12 days on 256 V100 GPUs”",NVIDIA V100,256.0,,24638.518413409514,"https://www.kdnuggets.com/2021/03/beginners-guide-clip-model.html
",155922.57638758916,,,,,,Open weights (unrestricted),Unreleased,Open source,"MIT License

https://github.com/OpenAI/CLIP",FP16,
CLIP (ResNet-50),OpenAI,2021-01-05,"Multimodal,Vision,Language,Video","Zero-shot image classification,Character recognition,Video description",88600000.0,"Image encoder
~ResNet-50 (from paper)
25.6M params

Text encoder
~Transformer (from paper)
63M params",,,,400000000.0,,,https://arxiv.org/abs/2103.00020,Learning Transferable Visual Models From Natural Language Supervision,20331.0,"Alec Radford, Jong Wook Kim, Chris Hallacy, Aditya Ramesh, Gabriel Goh, Sandhini Agarwal, Girish Sastry, Amanda Askell, Pamela Mishkin, Jack Clark, Gretchen Krueger, Ilya Sutskever","State-of-the-art computer vision systems are trained to predict a fixed set of predetermined object categories. This restricted form of supervision limits their generality and usability since additional labeled data is needed to specify any other visual concept. Learning directly from raw text about images is a promising alternative which leverages a much broader source of supervision. We demonstrate that the simple pre-training task of predicting which caption goes with which image is an efficient and scalable way to learn SOTA image representations from scratch on a dataset of 400 million (image, text) pairs collected from the internet. After pre-training, natural language is used to reference learned visual concepts (or describe new ones) enabling zero-shot transfer of the model to downstream tasks. We study the performance of this approach by benchmarking on over 30 different existing computer vision datasets, spanning tasks such as OCR, action recognition in videos, geo-localization, and many types of fine-grained object classification. The model transfers non-trivially to most tasks and is often competitive with a fully supervised baseline without the need for any dataset specific training. For instance, we match the accuracy of the original ResNet-50 on ImageNet zero-shot without needing to use any of the 1.28 million training examples it was trained on. We release our code and pre-trained model weights at this https URL.",Industry,United States of America,"Highly cited,SOTA improvement",,,,,,,,,,,,,,,,Open weights (unrestricted),Unreleased,,"MIT license
https://github.com/OpenAI/CLIP",FP16,
ERNIE-Doc (247M),Baidu,2020-12-31,Language,"Language modeling,Language modeling/generation",247000000.00000003,,3.0302798e+19,6 FLOP / parameter / token * 247000000 parameters * 416000 steps * 128 sequences per batch * 384 tokens per sequence = 3.0302798e+19 FLOP,WikiText-103,,"Table 11:
sequence length 384
batch size 128
training steps 16000 + 400000 = 416000 

416000*128*384/103000000 = 198.5  epochs",Confident,https://arxiv.org/abs/2012.15688,ERNIE-Doc: A Retrospective Long-Document Modeling Transformer,47.0,"Siyu Ding, Junyuan Shang, Shuohuan Wang, Yu Sun, Hao Tian, Hua Wu, Haifeng Wang","Transformers are not suited for processing long documents, due to their quadratically increasing memory and time consumption. Simply truncating a long document or applying the sparse attention mechanism will incur the context fragmentation problem or lead to an inferior modeling capability against comparable model sizes. In this paper, we propose ERNIE-Doc, a document-level language pretraining model based on Recurrence Transformers. Two well-designed techniques, namely the retrospective feed mechanism and the enhanced recurrence mechanism, enable ERNIE-Doc, which has a much longer effective context length, to capture the contextual information of a complete document. We pretrain ERNIE-Doc to explicitly learn the relationships among segments with an additional document-aware segment-reordering objective. Various experiments were conducted on both English and Chinese document-level tasks. ERNIE-Doc improved the state-of-the-art language modeling result of perplexity to 16.8 on WikiText-103. Moreover, it outperformed competitive pretraining models by a large margin on most language understanding tasks, such as text classification and question answering.",Industry,China,SOTA improvement,"""ERNIE-DOC improved the state-of-the-art language modeling result of perplexity to 16.8 on WikiText103""",198.5,,,,,,,,,,,,,,Open weights (unrestricted),Unreleased,,"weights available, not sure there's training code for WT-103: https://github.com/PaddlePaddle/ERNIE/tree/repro/ernie-doc",,
CT-MoS (WT2),"Google,National Tsing Hua University",2020-12-25,Language,Language modeling,45000000.0,"45M
Table 2",5.4e+17,6 FLOP / parameter / token * 45000000 parameters * 2000000 tokens * 1000 epochs = 5.4e+17 FLOP,WikiText-2,2000000.0,,Confident,https://arxiv.org/abs/2012.13575,Contextual Temperature for Language Modeling,17.0,"Pei-Hsin Wang, Sheng-Iou Hsieh, Shih-Chieh Chang, Yu-Ting Chen, Jia-Yu Pan, Wei Wei, Da-Chang Juan","Temperature scaling has been widely used as an effective approach to control the smoothness of a distribution, which helps the model performance in various tasks. Current practices to apply temperature scaling assume either a fixed, or a manually-crafted dynamically changing schedule. However, our studies indicate that the individual optimal trajectory for each class can change with the context. To this end, we propose contextual temperature, a generalized approach that learns an optimal temperature trajectory for each vocabulary over the context. Experimental results confirm that the proposed method significantly improves state-of-the-art language models, achieving a perplexity of 55.31 and 62.89 on the test set of Penn Treebank and WikiText-2, respectively. In-depth analyses show that the behaviour of the learned temperature schedules varies dramatically by vocabulary, and that the optimal schedules help in controlling the uncertainties. These evidences further justify the need for the proposed method and its advantages over fixed temperature schedules.","Industry,Academia","United States of America,Taiwan",SOTA improvement,"""Experimental results confirm that the
proposed method significantly improves state-of-the-art language models, achieving a perplexity of 55.31 and 62.89 on
the test set of Penn Treebank and WikiText-2""",1000.0,,,NVIDIA GeForce GTX 1080 Ti,4.0,,,,2030.739275278243,,,,,,Unreleased,Unreleased,,,,
DensePhrases,"Korea University,Princeton University",2020-12-23,Language,Question answering,,may be possible to estimate from batch size (8) and maximum memory of GPUs (96GB),2.09952e+18," flops = (8) * (1215 * 10**10) * (20 * 3600) * 3 // 10 = 2099520000000000000
(num gpu) * (peak flops) * (time in seconds) * (assumed utilization rate)

model of GPU from appendix B (Titan Xp)
number of GPUs from table in appendix A
flops from https://www.techpowerup.com/gpu-specs/titan-xp.c2948","SQuAD,NQ (Natural Questions)",58000000.0,"from appendix D ""The number of generated questions is 327,302 and 1,126,354 for SQuAD and Natural Questions, respectively.""
assuming 40 words per question we get around ~ 58M",Speculative,https://arxiv.org/abs/2012.12624v3,Learning Dense Representations of Phrases at Scale,108.0,"Jinhyuk Lee, Mujeen Sung, Jaewoo Kang, Danqi Chen","Open-domain question answering can be reformulated as a phrase retrieval problem, without the need for processing documents on-demand during inference (Seo et al., 2019). However, current phrase retrieval models heavily depend on sparse representations and still underperform retriever-reader approaches. In this work, we show for the first time that we can learn dense representations of phrases alone that achieve much stronger performance in open-domain QA. We present an effective method to learn phrase representations from the supervision of reading comprehension tasks, coupled with novel negative sampling methods. We also propose a query-side fine-tuning strategy, which can support transfer learning and reduce the discrepancy between training and inference. On five popular open-domain QA datasets, our model DensePhrases improves over previous phrase retrieval models by 15%-25% absolute accuracy and matches the performance of state-of-the-art retriever-reader models. Our model is easy to parallelize due to pure dense representations and processes more than 10 questions per second on CPUs. Finally, we directly use our pre-indexed dense phrase representations for two slot filling tasks, showing the promise of utilizing DensePhrases as a dense knowledge base for downstream tasks. ","Academia,Academia","Korea (Republic of),United States of America",SOTA improvement,"from abstract ""our model DensePhrases improves over previous phrase retrieval models by 15%-25% absolute accuracy and matches the performance of state-of-the-art retriever-reader models. """,4.0,20.0,appendix A row 3,NVIDIA TITAN Xp,8.0,,,,4061.6594477324606,,,,,,Open weights (unrestricted),Open source,Open source,Apache 2.0: https://github.com/princeton-nlp/DensePhrases,,
VQGAN + CLIP,Heidelberg University,2020-12-17,Image generation,Text-to-image,,,,,,,I'm confused - I guess they pretrained on several different datasets? I think the model is also able to do zero-shot learning,Unknown,https://arxiv.org/abs/2012.09841,Taming Transformers for High-Resolution Image Synthesis,2200.0,"Patrick Esser, Robin Rombach, Björn Ommer","Designed to learn long-range interactions on sequential data, transformers continue to show state-of-the-art results on a wide variety of tasks. In contrast to CNNs, they contain no inductive bias that prioritizes local interactions. This makes them expressive, but also computationally infeasible for long sequences, such as high-resolution images. We demonstrate how combining the effectiveness of the inductive bias of CNNs with the expressivity of transformers enables them to model and thereby synthesize high-resolution images. We show how to (i) use CNNs to learn a context-rich vocabulary of image constituents, and in turn (ii) utilize transformers to efficiently model their composition within high-resolution images. Our approach is readily applied to conditional synthesis tasks, where both non-spatial information, such as object classes, and spatial information, such as segmentations, can control the generated image. In particular, we present the first results on semantically-guided synthesis of megapixel images with transformers and obtain the state of the art among autoregressive models on class-conditional ImageNet. Code and pretrained models can be found at this https URL .",Academia,Germany,"Highly cited,SOTA improvement",,,,,,,,,,,,,,,,Open weights (unrestricted),Open source,,"MIT license
https://github.com/CompVis/taming-transformers",,
ESM1b,"Facebook AI Research,New York University (NYU)",2020-12-15,Biology,"Proteins,Protein or nucleotide language model (pLM/nLM)",652400000.0,See Table 9,5.1e+21,"Information: 
128 NVIDIA V100 GPUs [Pre-training details]
8.5 hours on 64 GPUs per epoch, 56 epochs of UR50/S [Appendix B, ESM-1b Hyperparameter optimization, Experimental set-up]
128 NVIDIA V100 GPU, assuming  V100 PCIe half precision 130 TFLOPS and 0.3 utilization rate

Estimate: (8.5*56*3600) s * 1.3e14 FLOP/s * 0.3 *64 = 4.277e21 FLOP

6NC method:
UR50/S has 27.1M sequences, which are capped at 1024 amino acids. 
27.1M * 1024 * 56 * 652.4M * 6 = 6.08e21 FLOP

Geometric mean: 5.1e21",UniRef50,,,Confident,https://www.pnas.org/doi/abs/10.1073/pnas.2016239118,Biological structure and function emerge from scaling unsupervised learning to 250 million protein sequences,1676.0,"Alexander Rives, Joshua Meier, Tom Sercu, Siddharth Goyal, Zeming Lin, Jason Liu, Demi Guo, Myle Ott, C. Lawrence Zitnick, Jerry Ma, and Rob Fergus","In the field of artificial intelligence, a combination of scale in data and model capacity enabled by unsupervised learning has led to major advances in representation learning and statistical generation. In the life sciences, the anticipated growth of sequencing promises unprecedented data on natural sequence diversity. Protein language modeling at the scale of evolution is a logical step toward predictive and generative artificial intelligence for biology. To this end, we use unsupervised learning to train a deep contextual language model on 86 billion amino acids across 250 million protein sequences spanning evolutionary diversity. The resulting model contains information about biological properties in its representations. The representations are learned from sequence data alone. The learned representation space has a multiscale organization
reflecting structure from the level of biochemical properties of amino acids to remote homology of proteins. Information about secondary and tertiary structure is encoded in the representations and can be identified by linear projections. Representation learning
produces features that generalize across a range of applications, enabling state-of-the-art supervised prediction of mutational effect and secondary structure and improving state-of-the-art features for long-range contact prediction.","Industry,Academia","United States of America,United States of America","Highly cited,SOTA improvement","""We apply the representations to a range of prediction tasks and find that they improve state-of-art features across the applications.""",56.0,,,NVIDIA V100,128.0,,924.3248891034536,,77997.75584661258,,,,,,Open weights (unrestricted),Unreleased,Open source,MIT: https://github.com/facebookresearch/esm,,
CPM-Large,"Tsinghua University,Beijing Academy of Artificial Intelligence / BAAI",2020-12-01,Language,Language modeling,2600000000.0,"""To the best of our knowledge, CPM, with 2.6 billion parameters and 100GB Chinese training data, is the largest Chinese pre-trained language mode""",2.6052e+20,"source: https://lair.lighton.ai/akronomicon/

archived: https://github.com/lightonai/akronomicon/tree/main/akrodb

6*2600000000 parameter *16700000000 tokens=2.605200e+20",Unspecified unreleased,16700000000.0,"""language model, with 2.6 billion parameters and 100GB Chinese training data.""

We use the conversion factor 1GB ~ 167M words

100GB ~ 16700000000 tokens / words

",Confident,https://arxiv.org/abs/2012.00413,CPM: A Large-scale Generative Chinese Pre-trained Language Model,105.0,"Z Zhang, X Han, H Zhou, P Ke, Y Gu, D Ye, Y Qin, Y Su","Pre-trained Language Models (PLMs) have proven to be beneficial for various downstream NLP tasks. Recently, GPT-3, with 175 billion parameters and 570GB training data, drew a lot of attention due to the capacity of few-shot (even zero-shot) learning. However, applying GPT-3 to address Chinese NLP tasks is still challenging, as the training corpus of GPT-3 is primarily English, and the parameters are not publicly available. In this technical report, we release the Chinese Pre-trained Language Model (CPM) with generative pre-training on large-scale Chinese training data. To the best of our knowledge, CPM, with 2.6 billion parameters and 100GB Chinese training data, is the largest Chinese pre-trained language model, which could facilitate several downstream Chinese NLP tasks, such as conversation, essay generation, cloze test, and language understanding. Extensive experiments demonstrate that CPM achieves strong performance on many NLP tasks in the settings of few-shot (even zero-shot) learning. The code and parameters are available at this https URL.","Academia,Academia","China,China",SOTA improvement,"""CPM outperforms CDial-GPT with a large margin in the few-shot experiment, showing the generalization ability of our model.""",,336.0,"""It takes two weeks to train our largest model using 64 NVIDIA V100.""",NVIDIA V100,64.0,,7340.099044719796,"https://towardsdatascience.com/the-future-of-ai-is-decentralized-848d4931a29a#:~:text=Training%20GPT%2D3%20reportedly%20cost,a%20single%20training%20run%C2%B9.",39011.038545758856,,,,,,Open weights (unrestricted),Unreleased,,"MIT license

https://github.com/TsinghuaAI/CPM-1-Generate",,
AlphaFold 2,DeepMind,2020-11-30,Biology,"Protein folding prediction,Proteins",93000000.0,"https://arxiv.org/abs/2207.05477 reimplements AlphaFold 2 in a more efficient way, and states there are 93M parameters in the original version (Table 1)",2.99e+21,"123 teraFLOPS / TPU v3 chip * 128 cores * (1 chip / 2 cores) * 11 days * 40% utilization = 2.99e21 FLOP
https://www.wolframalpha.com/input?i=123+teraFLOPS+*+128+*+11+days+*+0.4

""Training regimen"" section: 
""We train the model on Tensor Processing Unit (TPU) v3 with a batch size of 1 per TPU core, hence the model uses 128 TPU v3 cores. [...] The initial training stage takes approximately 1 week, and the fine-tuning stage takes approximately 4 additional days.""","PDB (Protein Data Bank),UniRef30 (FKA UniClust30),UniRef90,MGnify,BFD (Big Fantastic Dataset),UniProtKB",530000.0,"3 different types of input data to the network:
(1) Amino acid sequence
(2) Multiple sequence alignments (MSA) to sequences from evolutionarily related proteins
(3) Template structures (3D atom coordinates of homologous structures), where available

Training data is processed into the following two datasets that are sampled with different probabilities. 
Supplementary Material, Section 1.2.4. Training data:
""With 75% probability a training example comes from the self-distillation set (see subsection 1.3) and with 25% probability the training example is a known structure from the Protein Data Bank""

Supplementary Material, Section 1.3 Self-distillation dataset:
""This gives a final dataset of 355,993 sequences"". An initial model was used to predict structures for these sequences.

PDB dataset size in 2020: https://www.rcsb.org/stats/growth/growth-released-structures
172788

Therefore, estimate for number of protein structures available for training (for which amino acid sequence, MSA and homologue template info is also available as input to network): 528781 [~530k]",Likely,https://www.nature.com/articles/s41586-021-03819-2,Highly accurate protein structure prediction with AlphaFold,21186.0,"John Jumper, Richard Evans, Alexander Pritzel, Tim Green, Michael Figurnov, Kathryn Tunyasuvunakool, Olaf Ronneberger, Russ Bates, Augustin Žídek, Alex Bridgland, Clemens Meyer, Simon A A Kohl, Anna Potapenko, Andrew J Ballard, Andrew Cowie, Bernardino Romera-Paredes, Stanislav Nikolov, Rishub Jain, Jonas Adler, Trevor Back, Stig Petersen, David Reiman, Martin Steinegger, Michalina Pacholska, David Silver, Oriol Vinyals, Andrew W Senior, Koray Kavukcuoglu, Pushmeet Kohli, Demis Hassabis.","Proteins are essential to life, and understanding their structure can facilitate a mechanistic understanding of their function. Through an enormous experimental effort, the structures of around 100,000 unique proteins have been determined, but this represents a small fraction of the billions of known protein sequences. Structural coverage is bottlenecked by the months to years of painstaking effort required to determine a single protein structure. Accurate computational approaches are needed to address this gap and to enable large-scale structural bioinformatics. Predicting the three-dimensional structure that a protein will adopt based solely on its amino acid sequence—the structure prediction component of the ‘protein folding problem’—has been an important open research problem for more than 50 years. Despite recent progress, existing methods fall far short of atomic accuracy, especially when no homologous structure is available. Here we provide the first computational method that can regularly predict protein structures with atomic accuracy even in cases in which no similar structure is known. We validated an entirely redesigned version of our neural network-based model, AlphaFold, in the challenging 14th Critical Assessment of protein Structure Prediction (CASP14), demonstrating accuracy competitive with experimental structures in a majority of cases and greatly outperforming other methods. Underpinning the latest version of AlphaFold is a novel machine learning approach that incorporates physical and biological knowledge about protein structure, leveraging multi-sequence alignments, into the design of the deep learning algorithm.",Industry,United Kingdom of Great Britain and Northern Ireland,"Historical significance,Highly cited","""Here we provide the first computational method that can regularly predict protein structures with atomic accuracy even in cases in which no similar structure is known"" [Abstract]

>17790 citations",,264.0,7 days pretrain and 4 days finetune,Google TPU v3,,,3841.772612266474,,,,,,,,Open weights (unrestricted),Unreleased,Open source,"While the AlphaFold code is licensed under the Apache 2.0 License, the AlphaFold parameters and CASP15 prediction data are made available under the terms of the CC BY 4.0 license

code in this repo is inference code:
https://github.com/google-deepmind/alphafold",BF16,
KEPLER,"Tsinghua University,Mila - Quebec AI (originally Montreal Institute for Learning Algorithms),HEC,CIFAR AI Research,Princeton University,University of Montreal / Université de Montréal",2020-11-23,Language,Relation extraction,125000000.0,,1.66e+21,"From author communication

""About 128 GPU-days using Nvidia V100 (16GB). ""

precision: float16

V100 GPU for float16: 28000000000000 (2.8E+13)

0.4 * 28TFLOP/s * 128 GPU-days * 24h/day * 3600s/h
= 1.24E+20

""and use the released roberta.base parameters for
initialization, which is a common practice to save
pre-training time""

Roberta base FLOP: 1.536e+21
Total:1.660000e+21
","Wikipedia,BookCorpus (BooksCorpus, Toronto Book Corpus),Wikidata5M",3300000000.0,"For BookCorpus + English Wikipedia: 800M + 2500M

For Wikidata5M: 20614279
See table 1. Contains ""entities"", ""relations"", and ""triplets""",Confident,https://arxiv.org/abs/1911.06136,KEPLER: A Unified Model for Knowledge Embedding and Pre- trained Language Representation.,568.0,"Xiaozhi Wang, Tianyu Gao, Zhaocheng Zhu, Zhiyuan Liu, Juanzi Li, and Jian Tang.","Pre-trained language representation models (PLMs) cannot well capture factual knowledge from text. In contrast, knowledge embedding (KE) methods can effectively represent the relational facts in knowledge graphs (KGs) with informative entity embeddings, but conventional KE models cannot take full advantage of the abundant textual information. In this paper, we propose a unified model for Knowledge Embedding and Pre-trained LanguagE Representation (KEPLER), which can not only better integrate factual knowledge into PLMs but also produce effective text-enhanced KE with the strong PLMs. In KEPLER, we encode textual entity descriptions with a PLM as their embeddings, and then jointly optimize the KE and language modeling objectives. Experimental results show that KEPLER achieves state-of-the-art performances on various NLP tasks, and also works remarkably well as an inductive KE model on KG link prediction. Furthermore, for pre-training and evaluating KEPLER, we construct Wikidata5M, a large-scale KG dataset with aligned entity descriptions, and benchmark state-of-the-art KE methods on it. It shall serve as a new KE benchmark and facilitate the research on large KG, inductive KE, and KG with text. The source code can be obtained from this https URL.","Academia,Academia,Academia,Research collective,Academia,Academia","China,Canada,France,Canada,United States of America,Canada",SOTA improvement,"""Experimental results show that KEPLER achieves state-of-the-art performances
on various NLP tasks""",,,,,,,,,,RoBERTa Base,,,,,Unreleased,Open source,Open source,"MIT License, includes train code https://github.com/THU-KEG/KEPLER",FP16,
SimCLRv2,Google Brain,2020-10-26,Vision,Image classification,795000000.0,"From author communication

We trained different model sizes (from 24M to 795M), and they're summarized in Table 1 of the paper (https://arxiv.org/pdf/2006.10029.pdf).",,,,1280000.0,,,https://arxiv.org/abs/2006.10029,Big self- supervised models are strong semi-supervised learners.,2043.0,"Ting Chen, Simon Kornblith, Kevin Swersky, Mohammad Norouzi, and Geoffrey Hinton","One paradigm for learning from few labeled examples while making best use of a large amount of unlabeled data is unsupervised pretraining followed by supervised fine-tuning. Although this paradigm uses unlabeled data in a task-agnostic way, in contrast to common approaches to semi-supervised learning for computer vision, we show that it is surprisingly effective for semi-supervised learning on ImageNet. A key ingredient of our approach is the use of big (deep and wide) networks during pretraining and fine-tuning. We find that, the fewer the labels, the more this approach (task-agnostic use of unlabeled data) benefits from a bigger network. After fine-tuning, the big network can be further improved and distilled into a much smaller one with little loss in classification accuracy by using the unlabeled examples for a second time, but in a task-specific way. The proposed semi-supervised learning algorithm can be summarized in three steps: unsupervised pretraining of a big ResNet model using SimCLRv2, supervised fine-tuning on a few labeled examples, and distillation with unlabeled examples for refining and transferring the task-specific knowledge. This procedure achieves 73.9% ImageNet top-1 accuracy with just 1% of the labels (≤13 labeled images per class) using ResNet-50, a 10× improvement in label efficiency over the previous state-of-the-art. With 10% of labels, ResNet-50 trained with our method achieves 77.5% top-1 accuracy, outperforming standard supervised training with all of the labels.",Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,Open weights (unrestricted),Open source,,Apache 2.0: https://github.com/google-research/simclr,,
wave2vec 2.0 LARGE,Facebook,2020-10-22,Speech,Speech completion,317000000.0,"Section 5.1:
""We consider two model sizes: BASE (95m parameters) and LARGE (317m parameters)
",3.87072e+21,"From surveying the authors:

We trained the base model on 64 V100 GPUs for 400k updates. This takes about 3 days to complete. The large model is trained on 128 V100 GPUs for 1 million updates, and this takes about 7 days to complete.

V100 GPU peak: 125TFLOP/s (https://www.nvidia.com/en-gb/data-center/tesla-v100/)
Assume 40% utilization based on default for non-Language domain (https://epoch.ai/blog/estimating-training-compute)

128 GPUs * 40% * 125TFLOP/s * 7 days * 24h/day * 3600s/h
~= 3.870720e+21","LibriSpeech,LibriLight",727776000.0,"pg 4, section 4.1

""As unlabeled data we consider the Librispeech corpus [40] without transcriptions containing 960 hours of audio (LS-960) or the audio data from LibriVox (LV-60k). For the latter we follow the preprocessing of [27] resulting in 53.2k hours of audio.""

53.2k h * 13,680 words/h = 727776000 words",Confident,https://arxiv.org/abs/2006.11477,wav2vec 2.0: A Framework for Self-Supervised Learning of Speech Representations,4623.0,"Alexei Baevski, Henry Zhou, Abdelrahman Mohamed, Michael Auli","We show for the first time that learning powerful representations from speech audio alone followed by fine-tuning on transcribed speech can outperform the best semi-supervised methods while being conceptually simpler. wav2vec 2.0 masks the speech input in the latent space and solves a contrastive task defined over a quantization of the latent representations which are jointly learned. Experiments using all labeled data of Librispeech achieve 1.8/3.3 WER on the clean/other test sets. When lowering the amount of labeled data to one hour, wav2vec 2.0 outperforms the previous state of the art on the 100 hour subset while using 100 times less labeled data. Using just ten minutes of labeled data and pre-training on 53k hours of unlabeled data still achieves 4.8/8.2 WER. This demonstrates the feasibility of speech recognition with limited amounts of labeled data.",Industry,United States of America,"Highly cited,SOTA improvement","Arguably an ""important"" paper? 

Abstract: 
""We show for the first time that learning powerful representations from speech audio alone followed by fine-tuning on transcribed speech can outperform the best semi-supervised methods while being conceptually simpler.""",,,,NVIDIA Tesla V100 DGXS 32 GB,,,5021.241075362514,,,,,,,,Open weights (unrestricted),Open source,Open source,"https://github.com/facebookresearch/fairseq/blob/1bba712622b8ae4efb3eb793a8a40da386fe11d0/examples/wav2vec/README.md

fairseq(-py) is MIT-licensed. The license applies to the pre-trained models as well. Repo contains weights and pretrain and finetune code",,
ViT-Huge/14,"Google Brain,Google Research",2020-10-22,Vision,Image representation,632000000.0,Table 1 https://arxiv.org/pdf/2010.11929.pdf,4.262e+21,"Table 6: 4.262e21 FLOPs

Agrees with Table 2 (2.5k TPUv3-core days), if MFU is around 0.32. 

2500 * 24 * 3600 * (0.5 * 1.23e14) * 0.32 = 4.25e21","ImageNet-1k,ImageNet21k,JFT-300M",1280000.0,,Confident,https://arxiv.org/abs/2010.11929,An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale,30079.0,"Alexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, Jakob Uszkoreit, Neil Houlsby","While the Transformer architecture has become the de-facto standard for natural language processing tasks, its applications to computer vision remain limited. In vision, attention is either applied in conjunction with convolutional networks, or used to replace certain components of convolutional networks while keeping their overall structure in place. We show that this reliance on CNNs is not necessary and a pure transformer applied directly to sequences of image patches can perform very well on image classification tasks. When pre-trained on large amounts of data and transferred to multiple mid-sized or small image recognition benchmarks (ImageNet, CIFAR-100, VTAB, etc.), Vision Transformer (ViT) attains excellent results compared to state-of-the-art convolutional networks while requiring substantially fewer computational resources to train.","Industry,Industry","United States of America,Multinational,United States of America,Canada,Switzerland",Highly cited,,14.0,,,Google TPU v3,,0.32,6724.023241261178,,,,,,,,Open weights (unrestricted),Open source,Open source,"Apache-2.0 license
https://github.com/google-research/vision_transformer",,
ViT-Base/32,Google Brain,2020-10-22,Vision,Image representation,86000000.0,Table 1 https://arxiv.org/pdf/2010.11929.pdf,,,JFT-300M,,,,https://arxiv.org/abs/2010.11929,An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale,30079.0,"Alexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, Jakob Uszkoreit, Neil Houlsby","While the Transformer architecture has become the de-facto standard for natural language processing tasks, its applications to computer vision remain limited. In vision, attention is either applied in conjunction with convolutional networks, or used to replace certain components of convolutional networks while keeping their overall structure in place. We show that this reliance on CNNs is not necessary and a pure transformer applied directly to sequences of image patches can perform very well on image classification tasks. When pre-trained on large amounts of data and transferred to multiple mid-sized or small image recognition benchmarks (ImageNet, CIFAR-100, VTAB, etc.), Vision Transformer (ViT) attains excellent results compared to state-of-the-art convolutional networks while requiring substantially fewer computational resources to train.",Industry,United States of America,Highly cited,,7.0,,,,,,,,,,,,,,Open weights (unrestricted),Open source,,"Apache 2.0 

https://huggingface.co/google/vit-base-patch16-224

https://github.com/google-research/vision_transformer
https://github.com/google-research/big_vision",,
German ELECTRA Large,"deepset,Bayerische Staatsbibliothek Muenchen",2020-10-21,Language,"Document classification,Named entity recognition",335000000.0,335M from Table 5,1.42829568e+21,"flops = (64) * (123* 10**12) * (7 * 24 * 3600) * (0.3) = 1.4e21
(num gpu) * (peak flops) * (time in seconds) * (assumed utilization rate)

'large models were trained on pods of 16 TPUs v3 (128 cores).' - from section 4.1 it was trained for 7 days from Table 2

Agrees with 6CN:
Tokens seen: 512 (seq len) * 1024 (batch size) * 1 million (steps) = 5.24e11
FLOPs: 6 * 335M * 5.24e11 = 1.05e21","Wikipedia,OPUS,OSCAR,OpenLegalData",36383733333.333336,"163.4GB from Table 1 in the paper
assuming 167M words per GB (German Language) we have 163.4 * 167M * 4/3 tokens per word = 36,383,733,333",Confident,https://arxiv.org/abs/2010.10906,German's Next Language Model,244.0,"Branden Chan, Stefan Schweter, Timo Möller","In this work we present the experiments which lead to the creation of our BERT and ELECTRA based German language models, GBERT and GELECTRA. By varying the input training data, model size, and the presence of Whole Word Masking (WWM) we were able to attain SoTA performance across a set of document classification and named entity recognition (NER) tasks for both models of base and large size. We adopt an evaluation driven approach in training these models and our results indicate that both adding more data and utilizing WWM improve model performance. By benchmarking against existing German models, we show that these models are the best German models to date. Our trained models will be made publicly available to the research community. ","Industry,Government","Germany,Germany",SOTA improvement,'we were able to attain SoTA performance across a set of document classification and named entity recognition (NER) tasks for both models of base and large size.',,168.0,7 days from Table 2,Google TPU v3,64.0,,2392.2883349806307,,28634.227317541987,,,,,,Open weights (unrestricted),Unreleased,,MIT: https://huggingface.co/deepset/gelectra-large,,
GBERT-Large,"deepset,Bayerische Staatsbibliothek Muenchen",2020-10-21,Language,"Document classification,Named entity recognition",335000000.0,335M from Table 5,2.2444646e+21,"flops = (64) * (123* 10**12) * (11 * 24 * 3600) * (0.3) = 2.24e21
(num gpu) * (peak flops) * (time in seconds) * (assumed utilization rate)

'large models were trained on pods of 16 TPUs v3 (128 cores).' - from section 4.1it was trained for 11 days from Table 2","Wikipedia,OPUS,OSCAR,OpenLegalData",27287800000.0,"163.4GB from Table 1 in the paper
assuming 167M words per GB (German Language) we have 163.4 * 167M = 27287800000.0",Likely,https://arxiv.org/abs/2010.10906,German's Next Language Model,244.0,"Branden Chan, Stefan Schweter, Timo Möller","In this work we present the experiments which lead to the creation of our BERT and ELECTRA based German language models, GBERT and GELECTRA. By varying the input training data, model size, and the presence of Whole Word Masking (WWM) we were able to attain SoTA performance across a set of document classification and named entity recognition (NER) tasks for both models of base and large size. We adopt an evaluation driven approach in training these models and our results indicate that both adding more data and utilizing WWM improve model performance. By benchmarking against existing German models, we show that these models are the best German models to date. Our trained models will be made publicly available to the research community. ","Industry,Government","Germany,Germany",SOTA improvement,'we were able to attain SoTA performance across a set of document classification and named entity recognition (NER) tasks for both models of base and large size.',,264.0,11 days from Table 2,Google TPU v3,64.0,,3771.13338489269,,28634.227317541987,,,,2048.0,,Open weights (unrestricted),Unreleased,,MIT: https://huggingface.co/deepset/gbert-large,,
mT5-XXL,"Google,Google Research",2020-10-20,Language,"Language modeling,Translation",13000000000.0,13 billion,8.2e+22,"""We pre-train our mT5 model variants for 1 million steps on batches of 1024 length-1024 input sequences, corresponding to roughly 1 trillion input tokens total.""

1 million steps * 1024 batchsize * 1024 length * 13 billion params * 6 = 8.2e22

Ignores fine-tuning compute; this is likely a small fraction of pre-training compute.",mC4,1000000000000.0,"The model was trained on a subset of 1 trillion tokens.
Full mC4 corpus has data ""totaling 6.6B pages and 6.3T tokens""
Distribution by language is in Appendix A.",Confident,https://aclanthology.org/2021.naacl-main.41/,mT5: A Massively Multilingual Pre-trained Text-to-Text Transformer,2122.0,"Linting Xue, Noah Constant, Adam Roberts, Mihir Kale, Rami Al-Rfou, Aditya Siddhant, Aditya Barua, Colin Raffel","The recent “Text-to-Text Transfer Transformer” (T5) leveraged a unified text-to-text format and scale to attain state-of-the-art results on a wide variety of English-language NLP tasks. In this paper, we introduce mT5, a multilingual variant of T5 that was pre-trained on a new Common Crawl-based dataset covering 101 languages. We detail the design and modified training of mT5 and demonstrate its state-of-the-art performance on many multilingual benchmarks. We also describe a simple technique to prevent “accidental translation” in the zero-shot setting, where a generative model chooses to (partially) translate its prediction into the wrong language. All of the code and model checkpoints used in this work are publicly available.","Industry,Industry","United States of America,Multinational,United States of America,Canada,Switzerland","Highly cited,SOTA improvement","""Table 2 presents our main results, with perlanguage breakdowns for each task given in Appendix B. Our largest model mT5-XXL exceeds state-of-the-art on all classification and QA tasks and is near SOTA on NER (69.2 vs. 70.1).""",1.0,,,,,,,,,,,,1048576.0,"""We pre-train our mT5 model variants for 1 million steps on batches of 1024 length-1024 input sequences, corresponding to roughly 1 trillion input tokens total.""",Open weights (unrestricted),Open source,Open source," Apache 2.0 license
training code: https://github.com/google-research/multilingual-t5",,True
Conformer + Wav2vec 2.0 + Noisy Student,"Google,Google Research,Google Brain",2020-10-20,Speech,Speech recognition,1000000000.0,1B for XXL model,7.6e+21,"""We train with global batch size 2048 on 256/512 Google TPU V3 cores for 3-4 days for the XL/XXL models respectively...
We fine-tune the pre-trained checkpoints (400k steps) with global batch
size 1024/512 on 256/512 Google TPU v3 cores for 1-3 days for the XL/XXL models""

TPU v3 chips are 123 teraflop/s. 2 chips per core

512 cores * 7 days * 24 * 3600 * 123 tflops * (1 chip/2 cores) * 0.4 (assumed utilization) = 7.6e21",LibriLight,,,Confident,https://arxiv.org/abs/2010.10504v2,Pushing the Limits of Semi-Supervised Learning for Automatic Speech Recognition,294.0,"Yu Zhang, James Qin, Daniel S. Park, Wei Han, Chung-Cheng Chiu, Ruoming Pang, Quoc V. Le, Yonghui Wu","We employ a combination of recent developments in semi-supervised learning for automatic speech recognition to obtain state-of-the-art results on LibriSpeech utilizing the unlabeled audio of the Libri-Light dataset. More precisely, we carry out noisy student training with SpecAugment using giant Conformer models pre-trained using wav2vec 2.0 pre-training. By doing so, we are able to achieve word-error-rates (WERs) 1.4%/2.6% on the LibriSpeech test/test-other sets against the current state-of-the-art WERs 1.7%/3.3%.","Industry,Industry,Industry","United States of America,Multinational,United States of America,Canada,Switzerland,United States of America",SOTA improvement,"""By doing so, we are able to achieve
word-error-rates (WERs) 1.4%/2.6% on the LibriSpeech test/test-other sets against
the current state-of-the-art WERs 1.7%/3.3%.""",,168.0,7 days,Google TPU v3,256.0,,9449.541661137231,,114539.4599635263,,,,,,Unreleased,Unreleased,,,,
LUKE,"University of Washington,National Institute of Informatics",2020-10-02,Language,Question answering,483000000.0,"""The total number of parameters is approximately 483 M, consisting of 355 M in RoBERTa and 128 M in our entity embeddings""",1.8144e+22,"Uses RoBERTa Large as a base model, which used 1.66e22 FLOPs in training.

LUKE's additional training was:
(16) * (1.25e14) * (30 * 24 * 3600) * (0.3) = 1.5552e21
(num gpu) * (peak flops) * (time in seconds) * (assumed utilization rate)

from appendix A: ""Werun the pretraining on NVIDIA’s PyTorch Docker
container 19.02 hosted on a server with two Intel Xeon Platinum 8168 CPUs and 16 NVIDIA Tesla V100 GPUs. The training takes approximately 30 days.""

Assuming 16 bit tensor core computations, 1.25e14 FLOP/s per V100

Total: 1.65888e22 + 1.5552e21 = 1.8144e22",Wikipedia,3500000000.0,"""As input corpus for pretraining, we use the December 2018 version of Wikipedia, comprising approximately 3.5 billion words and 11 million entity annotations. """,Likely,https://arxiv.org/abs/2010.01057v1,LUKE: Deep Contextualized Entity Representations with Entity-aware Self-attention,611.0,"Ikuya Yamada, Akari Asai, Hiroyuki Shindo, Hideaki Takeda, Yuji Matsumoto","Entity representations are useful in natural language tasks involving entities. In this paper, we propose new pretrained contextualized representations of words and entities based on the bidirectional transformer. The proposed model treats words and entities in a given text as independent tokens, and outputs contextualized representations of them. Our model is trained using a new pretraining task based on the masked language model of BERT. The task involves predicting randomly masked words and entities in a large entity-annotated corpus retrieved from Wikipedia. We also propose an entity-aware self-attention mechanism that is an extension of the self-attention mechanism of the transformer, and considers the types of tokens (words or entities) when computing attention scores. The proposed model achieves impressive empirical performance on a wide range of entity-related tasks. In particular, it obtains state-of-the-art results on five well-known datasets: Open Entity (entity typing), TACRED (relation classification), CoNLL-2003 (named entity recognition), ReCoRD (cloze-style question answering), and SQuAD 1.1 (extractive question answering). Our source code and pretrained representations are available at this https://github.com/studio-ousia/luke",Academia,"United States of America,Japan",SOTA improvement,"from abstract ""In particular, it obtains state-of-the-art results on five well-known datasets: Open Entity (entity typing), TACRED (relation classification), CoNLL-2003 (named entity recognition), ReCoRD (cloze-style question answering), and SQuAD 1.1 (extractive question answering).""",119.46,720.0,see compute notes,NVIDIA V100,16.0,,4186.383565732907,,9765.799615782104,RoBERTa Large,,"LUKE's additional training was:
(16) * (1.25e14) * (30 * 24 * 3600) * (0.3) = 1.5552e21
(num gpu) * (peak flops) * (time in seconds) * (assumed utilization rate)

from appendix A: ""Werun the pretraining on NVIDIA’s PyTorch Docker
container 19.02 hosted on a server with two Intel Xeon Platinum 8168 CPUs and 16 NVIDIA Tesla V100 GPUs. The training takes approximately 30 days.""

Assuming 16 bit tensor core computations, 1.25e14 FLOP/s per V100LUKE's additional training was:LUKE's additional training was:
(16) * (1.25e14) * (30 * 24 * 3600) * (0.3) = 1.5552e21(16) * (1.25e14) * (30 * 24 * 3600) * (0.3) = 1.5552e21
(num gpu) * (peak flops) * (time in seconds) * (assumed utilization rate)(num gpu) * (peak flops) * (time in seconds) * (assumed utilization rate)

from appendix A: ""Werun the pretraining on NVIDIA’s PyTorch Dockerfrom appendix A: ""Werun the pretraining on NVIDIA’s PyTorch Docker
container 19.02 hosted on a server with two Intel Xeon Platinum 8168 CPUs and 16 NVIDIA Tesla V100 GPUs. The training takes approximately 30 days.""container 19.02 hosted on a server with two Intel Xeon Platinum 8168 CPUs and 16 NVIDIA Tesla V100 GPUs. The training takes approximately 30 days.""

Assuming 16 bit tensor core computations, 1.25e14 FLOP/s per V100Assuming 16 bit tensor core computations, 1.25e14 FLOP/s per V100",2048.0,table in appendix A,Open weights (unrestricted),Open source,Open source,"apache 2.0: https://github.com/studio-ousia/luke?tab=readme-ov-file

data is wikimedia, which has a commercial license: https://dumps.wikimedia.org/legal.html

pretraining: https://github.com/studio-ousia/luke/blob/master/pretraining.md ",FP16,
ProBERTa,"University of Illinois Urbana-Champaign (UIUC),Reed College",2020-09-01,Biology,"Proteins,Protein representation learning",44000000.0,"""In total, our model has approximately 44M trainable parameters.""",9.72e+18,"""we pre-train PRoBERTa on 4 NVIDIA V100 GPUs in 18 hours""
4 * 125 tFLOP/s * 18 * 3600 * 0.3 (assumed utilization) = 9.72e18",UniProtKB/Swiss-Prot,58320000.0,"450k sequences * 129.6 tokens per sequence = 58,320,000 tokens",Confident,https://dl.acm.org/doi/10.1145/3388440.3412467,Transforming the Language of Life: Transformer Neural Networks for Protein Prediction Tasks,97.0,"Ananthan Nambiar, Maeve Heflin, Simon Liu, Sergei Maslov, Mark Hopkins, Anna Ritz","The scientific community is rapidly generating protein sequence information, but only a fraction of these proteins can be experimentally characterized. While promising deep learning approaches for protein prediction tasks have emerged, they have computational limitations or are designed to solve a specific task. We present a Transformer neural network that pre-trains task-agnostic sequence representations. This model is fine-tuned to solve two different protein prediction tasks: protein family classification and protein interaction prediction. Our method is comparable to existing state-of-the-art approaches for protein family classification while being much more general than other architectures. Further, our method outperforms all other approaches for protein interaction prediction. These results offer a promising framework for fine-tuning the pre-trained sequence representations for other protein prediction tasks.","Academia,Academia","United States of America,United States of America",SOTA improvement,"""Furthermore, we used embeddings from PRoBERTa for a fundamentally different problem, PPI prediction, using two different
datasets generated from the HIPPIE database and found that with
sufficient data, it substantially outperforms the current state-of-theart method in the conservative scenario.""",,18.0,,NVIDIA V100,4.0,,26.206992435694065,,2443.1359420423914,,,,,,Open weights (non-commercial),Open (non-commercial),,"no clear license
https://github.com/annambiar/PRoBERTa",FP16,
ERNIE-GEN (large),Baidu,2020-08-06,Language,"Language modeling,Language modeling/generation",340000000.0,"""We train a base model ERNIEGENBASE (L=12, H=768, A=12, Total Parameters=110M)1
and a large model ERNIE-GENLARGE (L=24, H=1024,
A=16, Total Parameters=340M) with parameters initialized
by BERTBASE and BERTLARGE respectively""",2e+20,"430GB text for 1 epoch

approx 430 * 200 million words = 86B words, or 100B tokens per https://docs.google.com/document/d/1G3vvQkn4x_W71MKg0GmHVtzfd9m0y3_Ofcoew0v902Q/edit#heading=h.ieihc08p8dn0

6 * 340 million params * 100 billion tokens ~= 2e20","CC-News,BookCorpus (BooksCorpus, Toronto Book Corpus),WebText2,Wikipedia,C4",86000000000.0,"approx 430 * 200 million words = ~86B words, per https://docs.google.com/document/d/1G3vvQkn4x_W71MKg0GmHVtzfd9m0y3_Ofcoew0v902Q/edit#heading=h.ieihc08p8dn0",Speculative,https://arxiv.org/abs/2001.11314,ERNIE-GEN: An Enhanced Multi-Flow Pre-training and Fine-tuning Framework for Natural Language Generation,118.0,"Dongling Xiao, Han Zhang, Yukun Li, Yu Sun, Hao Tian, Hua Wu, Haifeng Wang",,Industry,China,SOTA improvement,"""Empirically, ERNIE-GEN is particularly effective and
achieves state-of-the-art results on a range of NLG tasks
including abstractive summarization (Gigaword and CNN/DailyMail), question generation (SQuAD), dialogue response generation (Persona-Chat) and generative question answering (CoQA)""",,,,,,,,,,,,,,,Open weights (non-commercial),Open (non-commercial),Open access (non-commercial),"https://github.com/PaddlePaddle/ERNIE/tree/repro/ernie-gen

code/weights with unclear license",FP16,
DeLighT,"University of Washington,Allen Institute for AI,Facebook AI Research",2020-08-03,Language,Language modeling,99000000.0,99M (Table 4b),3.8016e+18,"6 FLOP / parameter / token * 99 * 10^6 parameters * 100000 steps * 64000 tokens per batch = 3.8016e+18 FLOP

31330000000000 FLOP / second / GPU * 8 GPUs * 30 hours [assumed based on smaller models reported training time] * 3600 sec / hour * 0.3 [assumed utilization] = 8.120736e+18 FLOP

Operation counting method uses less assumptions",WikiText-103,103000000.0,"""100K iterations with a context length of 512 and an effective
batch size of 64K tokens.""

100000*64000/103000000 = 62.14 epochs",Likely,https://arxiv.org/abs/2008.00623,DeLighT: Deep and Light-weight Transformer,98.0,"Sachin Mehta, Marjan Ghazvininejad, Srinivasan Iyer, Luke Zettlemoyer, Hannaneh Hajishirzi","We introduce a deep and light-weight transformer, DeLighT, that delivers similar or better performance than standard transformer-based models with significantly fewer parameters. DeLighT more efficiently allocates parameters both (1) within each Transformer block using the DeLighT transformation, a deep and light-weight transformation, and (2) across blocks using block-wise scaling, which allows for shallower and narrower DeLighT blocks near the input and wider and deeper DeLighT blocks near the output. Overall, DeLighT networks are 2.5 to 4 times deeper than standard transformer models and yet have fewer parameters and operations. Experiments on benchmark machine translation and language modeling tasks show that DeLighT matches or improves the performance of baseline Transformers with 2 to 3 times fewer parameters on average. Our source code is available at: \url{this https URL}","Academia,Research collective,Industry","United States of America,United States of America,United States of America",SOTA improvement,"""Comparison with state-of-the-art methods on machine translation corpora. DeLighT delivers
similar or better performance than state-of-the-art models with fewer parameters.""",62.14,30.0,"Table 5 reports training time for 54M translation model (23h)
it should be more for the 99M language modeling model.",NVIDIA V100,8.0,,,,4889.428515149248,,,,64000.0,"""effective batch size of 64K tokens.""",Unreleased,Open source,Open source,"MIT, training and evaluation for WT103: https://github.com/sacmehta/delight/blob/master/readme_files/lm/wikitext103.md ",,
EfficientDet,Google Brain,2020-07-27,Vision,Object detection,77000000.0,"""EfficientDet-D7 achieves stateof-the-art 55.1 AP on COCO test-dev with 77M parameters and 410B FLOPs""",,,COCO 2017,,,,https://arxiv.org/abs/1911.09070,EfficientDet: Scalable and Efficient Object Detection,4701.0,"Mingxing Tan, Ruoming Pang, Quoc V. Le","Model efficiency has become increasingly important in computer vision. In this paper, we systematically study neural network architecture design choices for object detection and propose several key optimizations to improve efficiency. First, we propose a weighted bi-directional feature pyramid network (BiFPN), which allows easy and fast multiscale feature fusion; Second, we propose a compound scaling method that uniformly scales the resolution, depth, and width for all backbone, feature network, and box/class prediction networks at the same time. Based on these optimizations and better backbones, we have developed a new family of object detectors, called EfficientDet, which consistently achieve much better efficiency than prior art across a wide spectrum of resource constraints. In particular, with single model and single-scale, our EfficientDet-D7 achieves state-of-the-art 55.1 AP on COCO test-dev with 77M parameters and 410B FLOPs, being 4x - 9x smaller and using 13x - 42x fewer FLOPs than previous detectors. Code is available at this https URL.",Industry,United States of America,"Highly cited,SOTA improvement","""EfficientDet-D7 achieves stateof-the-art 55.1 AP on COCO test-dev with 77M parameters and 410B FLOPs""",600.0,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"Repo is Apache 2.0:
https://github.com/google/automl/tree/master/efficientdet",FP16,
Hopfield Networks (2020),"Johannes Kepler University Linz,Institute of Advanced Research in Artificial Intelligence,University of Oslo",2020-07-16,"Biology,Vision,Language,Medicine","Drug discovery,Language modeling,Object recognition",,,,,"BACE,SIDER",,,Unknown,https://arxiv.org/abs/2008.02217,Hopfield Networks is All You Need,345.0,"Hubert Ramsauer, Bernhard Schäfl, Johannes Lehner, Philipp Seidl, Michael Widrich, Thomas Adler, Lukas Gruber, Markus Holzleitner, Milena Pavlović, Geir Kjetil Sandve, Victor Greiff, David Kreil, Michael Kopp, Günter Klambauer, Johannes Brandstetter, Sepp Hochreiter","We introduce a modern Hopfield network with continuous states and a corresponding update rule. The new Hopfield network can store exponentially (with the dimension of the associative space) many patterns, retrieves the pattern with one update, and has exponentially small retrieval errors. It has three types of energy minima (fixed points of the update): (1) global fixed point averaging over all patterns, (2) metastable states averaging over a subset of patterns, and (3) fixed points which store a single pattern. The new update rule is equivalent to the attention mechanism used in transformers. This equivalence enables a characterization of the heads of transformer models. These heads perform in the first layers preferably global averaging and in higher layers partial averaging via metastable states. The new modern Hopfield network can be integrated into deep learning architectures as layers to allow the storage of and access to raw input data, intermediate results, or learned prototypes. These Hopfield layers enable new ways of deep learning, beyond fully-connected, convolutional, or recurrent networks, and provide pooling, memory, association, and attention mechanisms. We demonstrate the broad applicability of the Hopfield layers across various domains. Hopfield layers improved state-of-the-art on three out of four considered multiple instance learning problems as well as on immune repertoire classification with several hundreds of thousands of instances. On the UCI benchmark collections of small classification tasks, where deep learning methods typically struggle, Hopfield layers yielded a new state-of-the-art when compared to different machine learning methods. Finally, Hopfield layers achieved state-of-the-art on two drug design datasets. The implementation is available at: this https URL","Academia,Academia,Academia","Austria,Austria,Norway",SOTA improvement,"""Hopfield layers yielded a new state-ofthe-art when compared to different machine learning methods. Finally, Hopfield
layers achieved state-of-the-art on two drug design datasets""",,,,,,,,,,,,,,,Open weights (unrestricted),Unreleased,Open source,"copyleft-like license, derivative works must retain this license. code here:
https://github.com/ml-jku/hopfield-layers/blob/master/LICENSE",,
SemExp,"Carnegie Mellon University (CMU),Facebook AI Research",2020-07-02,Robotics,Object detection,,,,,"Gibson,Matterport3D (MP3D)",,"""Our training and test set consists of a total of 86 scenes (25 Gibson tiny and 61 MP3D) and 16 scenes (5 Gibson tiny and 11 MP3D), respectively""",Unknown,"https://proceedings.neurips.cc/paper/2020/file/2c75cf2681788adaca63aa95ae028b22-Paper.pdf
https://arxiv.org/abs/2007.00643",Object Goal Navigation using Goal-Oriented Semantic Exploration,428.0,"Devendra Singh Chaplot, Dhiraj Gandhi, Abhinav Gupta, Ruslan Salakhutdinov","This work studies the problem of object goal navigation which involves navigating to an instance of the given object category in unseen environments. End-to-end learning-based navigation methods struggle at this task as they are ineffective at exploration and long-term planning. We propose a modular system called, ‘GoalOriented Semantic Exploration’ which builds an episodic semantic map and uses it to explore the environment efficiently based on the goal object category. Empirical results in visually realistic simulation environments show that the proposed model outperforms a wide range of baselines including end-to-end learning-based methods as well as modular map-based methods and led to the winning entry of the CVPR2020 Habitat ObjectNav Challenge. Ablation analysis indicates that the proposed model learns semantic priors of the relative arrangement of objects in a scene, and uses them to explore efficiently. Domain-agnostic module design allows us to transfer our model to a mobile robot platform and achieve similar performance for object goal navigation in the real-world.","Academia,Industry","United States of America,United States of America",SOTA improvement,"""Our method achieves state-of-the-art performance on the object goal navigation task and won the CVPR2020 Habitat ObjectNav challenge""",,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,MIT code/weights: https://github.com/devendrachaplot/Object-Goal-Navigation,,
GShard (dense),Google,2020-06-30,Language,Translation,2300000000.0,"""Our best quality dense single Transformer model (2.3B parameters) achieving ∆BLEU of 6.1, was trained with GPipe [15] on 2048 TPU v3 cores for 6 weeks or total of 235.5 TPU v3 core-years.""",4.765e+22,"Trained for a total of 235.5 TPU v3 core-years.
Hardware estimate: 235.5 * 365.25 * 24 * 3600 * (1.23e14 / 2) * 0.3 = 1.371e23

Footnote 10 indicates 300k steps and 4M tokens/step -> 1.2T tokens
Arithmetic estimate: 6 * 2.3B * 1.2T = 1.656e22 FLOPs

Geometric mean: sqrt(1.371e23 * 1.656e22) = 4.765e22",,346666666666.6667,"""We focus on improving the translation quality (measured in terms of BLEU score [48]) from all 100 languages to English. This resulted in approximately 13 billion training examples to be used for model training""

Each example is a sentence pair. Assuming 20 words per sentence and 4/3 tokens per word, that is 13*20*4/3 billion tokens",Confident,https://arxiv.org/abs/2006.16668,GShard: Scaling Giant Models with Conditional Computation and Automatic Sharding,881.0,"Dmitry Lepikhin, HyoukJoong Lee, Yuanzhong Xu, Dehao Chen, Orhan Firat, Yanping Huang, Maxim Krikun, Noam Shazeer, Zhifeng Chen","Neural network scaling has been critical for improving the model quality in many real-world machine learning applications with vast amounts of training data and compute. Although this trend of scaling is affirmed to be a sure-fire approach for better model quality, there are challenges on the path such as the computation cost, ease of programming, and efficient implementation on parallel devices. GShard is a module composed of a set of lightweight annotation APIs and an extension to the XLA compiler. It provides an elegant way to express a wide range of parallel computation patterns with minimal changes to the existing model code. GShard enabled us to scale up multilingual neural machine translation Transformer model with Sparsely-Gated Mixture-of-Experts beyond 600 billion parameters using automatic sharding. We demonstrate that such a giant model can efficiently be trained on 2048 TPU v3 accelerators in 4 days to achieve far superior quality for translation from 100 languages to English compared to the prior art.",Industry,United States of America,SOTA improvement,"""such a giant model can efficiently be trained on 2048 TPU v3 accelerators in 4 days to achieve far superior quality for translation from 100 languages to English compared to the prior art""",,1008.0,6 weeks = 1008 hours,Google TPU v3,1024.0,,256224.76861369325,,459301.9894608488,,,,4000000.0,"Table 3, bolded row is best model",Unreleased,Open source,Unreleased,"training code is open, Apache: https://github.com/tensorflow/lingvo/tree/master/lingvo/tasks/lm",FP32,True
iGPT-XL,OpenAI,2020-06-17,"Vision,Image generation",Image completion,6801000000.0,source: https://openai.com/blog/image-gpt/#rfref53,3.3e+22,"Taken from here
https://www.lesswrong.com/posts/wfpdejMWog4vEDLDg/ai-and-compute-trend-isn-t-predictive-of-what-is-happening (""There's no compute data for the largest model, iGPT-XL. But based on the FLOP/s increase from GPT-3 XL (same num of params as iGPT-L) to GPT-3 6.7B (same num of params as iGPT-XL), I think it required 5 times more compute: 3.3 * 10^22 FLOP."")",ILSVRC 2012 subset of ImageNet,1229920.32,"""We use the ImageNet ILSVRC 2012 training dataset, splitting off 4% as our experimental validation set and report results on the ILSVRC 2012 validation set as our test set.""

https://image-net.org/challenges/LSVRC/2012/

""The goal of this competition is to estimate the content of photographs for the purpose of retrieval and automatic annotation using a subset of the large hand-labeled ImageNet dataset (10,000,000 labeled images depicting 10,000+ object categories) as training.""
",Likely,https://openai.com/research/image-gpt,Generative Pretraining from Pixels,1339.0,"Mark Chen, Alec Radford, Rewon Child, Jeff Wu, Heewoo Jun, Prafulla Dhariwal, David Luan, Ilya Sutskever","Inspired by progress in unsupervised representation learning for natural language, we examine whether similar models can learn useful representations for images. We train a sequence Transformer to auto-regressively predict pixels, without incorporating knowledge of the 2D input structure. Despite training on low-resolution ImageNet without labels, we find that a GPT-2 scale model learns strong image representations as measured by linear probing, fine-tuning, and low-data classification. On CIFAR-10, we achieve 96.3% accuracy with a linear probe, outperforming a supervised Wide ResNet, and 99.0% accuracy with full finetuning, matching the top supervised pre-trained models. An even larger model trained on a mixture of ImageNet and web images is competitive with self-supervised benchmarks on ImageNet, achieving 72.0% top-1 accuracy on a linear probe of our features.",Industry,United States of America,Highly cited,,,,,NVIDIA Tesla V100 DGXS 32 GB,,,104609.5126,,,,,,,,Open weights (unrestricted),Open source,Open source,"Modified MIT, code and weights:

https://github.com/openai/image-gpt?tab=License-1-ov-file#readme

train code: https://github.com/openai/image-gpt/blob/master/src/run.py ",,True
iGPT-L,OpenAI,2020-06-17,"Image generation,Vision",Image completion,1362000000.0,source: https://openai.com/blog/image-gpt/#rfref53,8.91e+21,"We have that ""iGPT-L was trained for roughly 2500 V100-days"" [1]

I assume this is the NVIDIA Tesla V100 GPU. In the specifications, the NVIDIA Tesla V100 has 7 to 8.2 TFLOPS of peak double precision performance and 14 to 16.4 TFLOPS of peak single precision performance and 112 to 130 TFLOPS of peak tensor performance [2].

I suppose the one that makes sense using if peak tensor performance, for ~125 TFLOPS peak tensor performance more or less.
Following OpenAIs AI and compute we apply a 0.33 utitilization factor [3].

In total we get 2500 V100-days * (24*60*60) seconds/day * 125 TFLOPS * 0.33 = 8.91e+21 FLOPS = 89.1 PF-days.

[1] https://openai.com/blog/image-gpt/
[2] https://images.nvidia.com/content/technologies/volta/pdf/volta-v100-datasheet-update-us-1165301-r5.pdf
[3] https://openai.com/blog/ai-and-compute/",ILSVRC 2012 subset of ImageNet,1229920.32,"""We use the ImageNet ILSVRC 2012 training dataset, splitting off 4% as our experimental validation set and report results on the ILSVRC 2012 validation set as our test set.""

https://image-net.org/challenges/LSVRC/2012/

""The goal of this competition is to estimate the content of photographs for the purpose of retrieval and automatic annotation using a subset of the large hand-labeled ImageNet dataset (10,000,000 labeled images depicting 10,000+ object categories) as training.""
",Confident,https://openai.com/blog/image-gpt/,Generative Pretraining from Pixels,1339.0,"Mark Chen, Alec Radford, Rewon Child, Jeff Wu, Heewoo Jun, Prafulla Dhariwal, David Luan, Ilya Sutskever","Inspired by progress in unsupervised representation learning for natural language, we examine whether similar models can learn useful representations for images. We train a sequence Transformer to auto-regressively predict pixels, without incorporating knowledge of the 2D input structure. Despite training on low-resolution ImageNet without labels, we find that a GPT-2 scale model learns strong image representations as measured by linear probing, fine-tuning, and low-data classification. On CIFAR-10, we achieve 96.3% accuracy with a linear probe, outperforming a supervised Wide ResNet, and 99.0% accuracy with full finetuning, matching the top supervised pre-trained models. An even larger model trained on a mixture of ImageNet and web images is competitive with self-supervised benchmarks on ImageNet, achieving 72.0% top-1 accuracy on a linear probe of our features.",Industry,United States of America,Highly cited,,,,,NVIDIA Tesla V100 DGXS 32 GB,,,30093.444683107013,,,,,,,,Open weights (unrestricted),Open source,Open source,modified MIT: https://github.com/openai/image-gpt?tab=License-1-ov-file#readme,,
GPT-3 175B (davinci),OpenAI,2020-05-28,Language,"Text autocompletion,Language modeling/generation",175000000000.0,"""we train GPT-3, an autoregressive language model with 175 billion parameters""",3.14e+23,"Table D.1
https://arxiv.org/abs/2005.14165","Common Crawl,WebText2,Wikipedia,Books1,Books2",374000000000.0,"From table 2.2, we determine that there are 410 + 19 + 12 + 55 + 3 = 499 billion tokens. 

We multiply this by 0.75 to give 374B words. 

3.74e11

========================
[Anson: I think the calculation below doesn't look at all the data, the CommonCrawl data only constitutes 60% of the data. Multiplying by 5/3 gives 4.75e11]

""The CommonCrawl data was downloaded from 41 shards of monthly CommonCrawl covering 2016 to 2019, constituting 45TB of compressed plaintext before filtering and 570GB after filtering, roughly equivalent to 400 billion byte-pair-encoded tokens. ""

Converted to words using 
http://extraconversion.com/data-storage/gigabits/gigabits-to-words.html

2.85e11",Confident,https://arxiv.org/abs/2005.14165,Language Models are Few-Shot Learners,32643.0,"Tom B. Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, Sandhini Agarwal, Ariel Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon Child, Aditya Ramesh, Daniel M. Ziegler, Jeffrey Wu, Clemens Winter, Christopher Hesse, Mark Chen, Eric Sigler, Mateusz Litwin, Scott Gray, Benjamin Chess, Jack Clark, Christopher Berner, Sam McCandlish, Alec Radford, Ilya Sutskever, Dario Amodei","Recent work has demonstrated substantial gains on many NLP tasks and benchmarks by pre-training on a large corpus of text followed by fine-tuning on a specific task. While typically task-agnostic in architecture, this method still requires task-specific fine-tuning datasets of thousands or tens of thousands of examples. By contrast, humans can generally perform a new language task from only a few examples or from simple instructions - something which current NLP systems still largely struggle to do. Here we show that scaling up language models greatly improves task-agnostic, few-shot performance, sometimes even reaching competitiveness with prior state-of-the-art fine-tuning approaches. Specifically, we train GPT-3, an autoregressive language model with 175 billion parameters, 10x more than any previous non-sparse language model, and test its performance in the few-shot setting. For all tasks, GPT-3 is applied without any gradient updates or fine-tuning, with tasks and few-shot demonstrations specified purely via text interaction with the model. GPT-3 achieves strong performance on many NLP datasets, including translation, question-answering, and cloze tasks, as well as several tasks that require on-the-fly reasoning or domain adaptation, such as unscrambling words, using a novel word in a sentence, or performing 3-digit arithmetic. At the same time, we also identify some datasets where GPT-3's few-shot learning still struggles, as well as some datasets where GPT-3 faces methodological issues related to training on large web corpora. Finally, we find that GPT-3 can generate samples of news articles which human evaluators have difficulty distinguishing from articles written by humans. We discuss broader societal impacts of this finding and of GPT-3 in general.",Industry,United States of America,"Highly cited,Training cost",,0.6,355.2,14.8 days according to https://arxiv.org/ftp/arxiv/papers/2104/2104.10350.pdf,NVIDIA Tesla V100 DGXS 32 GB,10000.0,0.1968,2198104.565,,5100759.605963441,,,,3200000.0,"3.2M, per table 2.1",API access,Unreleased,,"https://openai.com/blog/openai-api
",,True
DETR,Facebook,2020-05-26,Vision,Object detection,60000000.0,60M per Table 1,4e+20,"""Training the baseline model for 300 epochs on 16 V100 GPUs takes 3 days, with 4 images per GPU (hence a total batch size of 64). For the longer schedule used to compare with Faster R-CNN we train for 500 epochs with learning rate drop after 400 epochs. This schedule adds 1.5 AP compared to the shorter schedule.""

48 V100-days for baseline DETR model. Larger model had 1.5x the params and 5/3 as many epochs, so required ~2.5x as much training compute.

125 teraflop/s * 2.5 * 48 * 24 * 3600 * 0.3 (assumed utilization) ~ 4e20",COCO 2017,123000.0,,Confident,https://arxiv.org/abs/2005.12872,End-to-End Object Detection with Transformers,10594.0,"Nicolas Carion, Francisco Massa, Gabriel Synnaeve, Nicolas Usunier, Alexander Kirillov, Sergey Zagoruyko","Abstract. We present a new method that views object detection as a
direct set prediction problem. Our approach streamlines the detection
pipeline, effectively removing the need for many hand-designed components like a non-maximum suppression procedure or anchor generation
that explicitly encode our prior knowledge about the task. The main
ingredients of the new framework, called DEtection TRansformer or
DETR, are a set-based global loss that forces unique predictions via bipartite matching, and a transformer encoder-decoder architecture. Given
a fixed small set of learned object queries, DETR reasons about the relations of the objects and the global image context to directly output
the final set of predictions in parallel. The new model is conceptually
simple and does not require a specialized library, unlike many other
modern detectors. DETR demonstrates accuracy and run-time performance on par with the well-established and highly-optimized Faster RCNN baseline on the challenging COCO object detection dataset. Moreover, DETR can be easily generalized to produce panoptic segmentation
in a unified manner. We show that it significantly outperforms competitive baselines. Training code and pretrained models are available at
https://github.com/facebookresearch/detr.",Industry,United States of America,Highly cited,,500.0,,,NVIDIA V100,,,959.9097627206426,,,,,,64.0,,Open weights (unrestricted),Open source,Open source,Apache 2.0: https://github.com/facebookresearch/detr,,
Retrieval-Augmented Generator,"Facebook,New York University (NYU),University College London (UCL)",2020-05-22,Language,Question answering,626000000.0,"""Our RAG models contain the trainable parameters for the BERT-base query and document encoder of DPR, with 110M parameters each (although we do not train the document encoder ourselves) and 406M trainable parameters from BART-large, 406M parameters, making a total of 626M trainable parameters""",,"not enough info, e.g. no training time reported:

""We train with mixed precision floating point arithmetic [40], distributing training across 8, 32GB NVIDIA V100 GPUs, though training and inference can be run on one GPU""","Wikipedia,NQ (Natural Questions)",,,Confident,https://arxiv.org/abs/2005.11401v4,Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks,3572.0,"Patrick Lewis, Ethan Perez, Aleksandra Piktus, Fabio Petroni, Vladimir Karpukhin, Naman Goyal, Heinrich Küttler, Mike Lewis, Wen-tau Yih, Tim Rocktäschel, Sebastian Riedel, Douwe Kiela","Large pre-trained language models have been shown to store factual knowledge in their parameters, and achieve state-of-the-art results when fine-tuned on downstream NLP tasks. However, their ability to access and precisely manipulate knowledge is still limited, and hence on knowledge-intensive tasks, their performance lags behind task-specific architectures. Additionally, providing provenance for their decisions and updating their world knowledge remain open research problems. Pre-trained models with a differentiable access mechanism to explicit non-parametric memory can overcome this issue, but have so far been only investigated for extractive downstream tasks. We explore a general-purpose fine-tuning recipe for retrieval-augmented generation (RAG) -- models which combine pre-trained parametric and non-parametric memory for language generation. We introduce RAG models where the parametric memory is a pre-trained seq2seq model and the non-parametric memory is a dense vector index of Wikipedia, accessed with a pre-trained neural retriever. We compare two RAG formulations, one which conditions on the same retrieved passages across the whole generated sequence, the other can use different passages per token. We fine-tune and evaluate our models on a wide range of knowledge-intensive NLP tasks and set the state-of-the-art on three open domain QA tasks, outperforming parametric seq2seq models and task-specific retrieve-and-extract architectures. For language generation tasks, we find that RAG models generate more specific, diverse and factual language than a state-of-the-art parametric-only seq2seq baseline.","Industry,Academia,Academia","United States of America,United States of America,United Kingdom of Great Britain and Northern Ireland","Highly cited,SOTA improvement","""Our RAG models achieve state-of-the-art results on open Natural Questions [29], WebQuestions [3] and CuratedTrec [2] """,,,,NVIDIA Tesla V100 PCIe 32 GB,,,,,,,,,,,Open weights (unrestricted),Unreleased,,"It's in HF transformers library:
https://huggingface.co/docs/transformers/en/model_doc/rag

this library has an apache license: https://github.com/huggingface/transformers/blob/main/LICENSE",FP16,
Conformer,Google,2020-05-16,Speech,Speech recognition,118800000.0,118.8M for Conformer(L),,,LibriSpeech,,,Confident,https://arxiv.org/abs/2005.08100v1,Conformer: Convolution-augmented Transformer for Speech Recognition,2655.0,"Anmol Gulati, James Qin, Chung-Cheng Chiu, Niki Parmar, Yu Zhang, Jiahui Yu, Wei Han, Shibo Wang, Zhengdong Zhang, Yonghui Wu, Ruoming Pang","Recently Transformer and Convolution neural network (CNN) based models have shown promising results in Automatic Speech Recognition (ASR), outperforming Recurrent neural networks (RNNs). Transformer models are good at capturing content-based global interactions, while CNNs exploit local features effectively. In this work, we achieve the best of both worlds by studying how to combine convolution neural networks and transformers to model both local and global dependencies of an audio sequence in a parameter-efficient way. To this regard, we propose the convolution-augmented transformer for speech recognition, named Conformer. Conformer significantly outperforms the previous Transformer and CNN based models achieving state-of-the-art accuracies. On the widely used LibriSpeech benchmark, our model achieves WER of 2.1%/4.3% without using a language model and 1.9%/3.9% with an external language model on test/testother. We also observe competitive performance of 2.7%/6.3% with a small model of only 10M parameters.",Industry,United States of America,"Highly cited,SOTA improvement","""Conformer significantly outperforms the previous Transformer and CNN based models achieving state-of-the-art accuracies. On the widely used LibriSpeech benchmark, our model achieves WER of 2.1%/4.3% without using a language model and 1.9%/3.9% with an external language model on test/testother""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
ContextNet,Google,2020-05-07,Speech,Speech recognition,112700000.0,Table 5,,"Uses pre-trained joint network from https://arxiv.org/pdf/1811.06621, so total training compute should factor this in.",LibriSpeech,1710000000.0,"970 hours of speech in the LibreSpeech experiments. There is mention of a ""large scale experiment"" which trained on audio from YouTube videos. Tracing the references, it appears to be similar to the dataset used in https://arxiv.org/abs/1610.09975, which has 125,000 hours of transcribed audio for training. However, they mention in footnote 2 that the training and evaluation set have changed from previous experiments.
125k hours at 13,680 words per hour = 1.71B words",Likely,https://arxiv.org/abs/2005.03191v3,ContextNet: Improving Convolutional Neural Networks for Automatic Speech Recognition with Global Context,237.0,"Wei Han, Zhengdong Zhang, Yu Zhang, Jiahui Yu, Chung-Cheng Chiu, James Qin, Anmol Gulati, Ruoming Pang, Yonghui Wu","Convolutional neural networks (CNN) have shown promising results for end-to-end speech recognition, albeit still behind other state-of-the-art methods in performance. In this paper, we study how to bridge this gap and go beyond with a novel CNN-RNN-transducer architecture, which we call ContextNet. ContextNet features a fully convolutional encoder that incorporates global context information into convolution layers by adding squeeze-and-excitation modules. In addition, we propose a simple scaling method that scales the widths of ContextNet that achieves good trade-off between computation and accuracy. We demonstrate that on the widely used LibriSpeech benchmark, ContextNet achieves a word error rate (WER) of 2.1%/4.6% without external language model (LM), 1.9%/4.1% with LM and 2.9%/7.0% with only 10M parameters on the clean/noisy LibriSpeech test sets. This compares to the previous best published system of 2.0%/4.6% with LM and 3.9%/11.3% with 20M parameters. The superiority of the proposed ContextNet model is also verified on a much larger internal dataset.",Industry,United States of America,SOTA improvement,"""We demonstrate that on the widely used Librispeech
benchmark, ContextNet achieves a word error rate (WER) of
2.1%/4.6% without external language model (LM), 1.9%/4.1%
with LM and 2.9%/7.0% with only 10M parameters on the
clean/noisy LibriSpeech test sets. This compares to the
best previously published model of 2.0%/4.6% with LM and
3.9%/11.3% with 20M parameters""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
NAS+ESS (156M),"Northeastern University (China),Chinese Academy of Sciences,NiuTrans Research,Kingsoft",2020-05-06,Language,"Neural Architecture Search - NAS,Language modeling",156000000.0,156M (Table 2),2.89e+18,6 FLOP / token / parameter * 156 * 10^6 parameters * 103000000 tokens * 30 epochs = 2.89224e+18 FLOP,WikiText-103,103000000.0,"""The batch size was 128 and the number of hidden units was
300""",Confident,https://arxiv.org/abs/2005.02593,Learning Architectures from an Extended Search Space for Language Modeling,12.0,"Yinqiao Li, Chi Hu, Yuhao Zhang, Nuo Xu, Yufan Jiang, Tong Xiao, Jingbo Zhu, Tongran Liu, Changliang Li","Neural architecture search (NAS) has advanced significantly in recent years but most NAS systems restrict search to learning architectures of a recurrent or convolutional cell. In this paper, we extend the search space of NAS. In particular, we present a general approach to learn both intra-cell and inter-cell architectures (call it ESS). For a better search result, we design a joint learning method to perform intra-cell and inter-cell NAS simultaneously. We implement our model in a differentiable architecture search system. For recurrent neural language modeling, it outperforms a strong baseline significantly on the PTB and WikiText data, with a new state-of-the-art on PTB. Moreover, the learned architectures show good transferability to other systems. E.g., they improve state-of-the-art systems on the CoNLL and WNUT named entity recognition (NER) tasks and CoNLL chunking task, indicating a promising line of research on large-scale pre-learned architectures.","Academia,Academia,Industry","China,China,China,China",SOTA improvement,"""Our ESS method
achieves state-of-the-art result on the PTB task""",30.0,,2890000000000000000 FLOP / (11340000000000 FLOP / sec [fp32] * 1 GPU * 3600 sec / hour * 0.3 [assumed utilization]) = 235 hours,NVIDIA GeForce GTX 1080 Ti,1.0,,,,280.3988579029138,,,,,,Unreleased,Unreleased,,,,
UnifiedQA,"Allen Institute for AI,University of Washington",2020-05-02,Language,Question answering,11000000000.0,11B (based on T5-11B),1.65e+19,"A.2: ""In the experiments, we use v3-8 TPUs for T5 models... pretraining UNIFIEDQA approximately takes about 36 hours on T5(11B)""

4 * 1.23e14 * 36 * 3600 * 0.3 = 1.91e19

Alternatively, input (ouput) size of 512 (100) tokens, batch size of 8, trained for 100k steps. Input tokens only need the forward pass.
((2 * 11B * 512 * 8) + (6 * 11B * 100 * 8)) * 100k = 1.43e19

Took geometric mean of these estimates:
sqrt(1.91e19*1.43e19) = 1.65e19",,97309860.0,"Table 2:
SQuAD 1.1: 87k examples, avg total length of 136.2 + 3.0
SQuAD 2.0: 130k examples, avg total length of 139.9 + 2.6
NarrativeQA: 65k examples, avg total length of 563.6 + 6.2
RACE: 87k examples, avg total length of 317.9 + 6.9
ARC (easy): 2k examples, avg total length of 39.4 + 3.7
ARC (hard): 1k examples, avg total length of  47.4 + 5.0
OBQA: 4k examples, avg total length of 28.7 + 3.6
MCTest: 1.4k examples, avg total length of 245.4 + 4.0
BoolQ: 9k examples, avg total length of 105.1 + 1.0

Total tokens: 97,309,860",Confident,https://arxiv.org/abs/2005.00700v3,UnifiedQA: Crossing Format Boundaries With a Single QA System,674.0,"Daniel Khashabi, Sewon Min, Tushar Khot, Ashish Sabharwal, Oyvind Tafjord, Peter Clark, Hannaneh Hajishirzi","Question answering (QA) tasks have been posed using a variety of formats, such as extractive span selection, multiple choice, etc. This has led to format-specialized models, and even to an implicit division in the QA community. We argue that such boundaries are artificial and perhaps unnecessary, given the reasoning abilities we seek to teach are not governed by the format. As evidence, we use the latest advances in language modeling to build a single pre-trained QA model, UnifiedQA, that performs surprisingly well across 17 QA datasets spanning 4 diverse formats. UnifiedQA performs on par with 9 different models that were trained on individual datasets themselves. Even when faced with 12 unseen datasets of observed formats, UnifiedQA performs surprisingly well, showing strong generalization from its out-of-format training data. Finally, simply fine-tuning this pre-trained QA model into specialized models results in a new state of the art on 6 datasets, establishing UnifiedQA as a strong starting point for building QA systems.","Research collective,Academia","United States of America,United States of America",SOTA improvement,"""We then introduce UNIFIEDQA (§3.2) that is a QA system
trained on datasets in multiple formats, indicating
new state-of-the-art results on 10 datasets and generalization to unseen datasets.""",1.88,36.0,"""pretraining UNIFIEDQA approximately takes about 36 and 55 hours, on T5(11B) and BART models, respectively.""",Google TPU v3,8.0,,,,3593.01452898213,T5-11B,3.8e+19,"""• Infrastructure: In the experiments, we use v3-8 TPUs for T5 models, and eight 32GB GPUs for
BART models.
• Time spent to build UNIFIEDQA: pretraining UNIFIEDQA approximately takes about 36 and 55
hours, on T5(11B) and BART models, respectively.""

8 * 123 TFLOPS * 36 * 3600 * 0.3 (utilization assumption) = 3.8e19",27.0,,Open weights (unrestricted),Open source,,"Apache 2.0 
https://github.com/allenai/unifiedqa

no clear license but it is safe to assume that github repo Apache 2.0 license governs the model weights as well since they are interlinked
https://huggingface.co/allenai/unifiedqa-v2-t5-11b-1363200",,
ATLAS,"Allen Institute for AI,University of Washington",2020-05-02,Language,Question answering,11000000000.0,"11B from appendix A.2 : Model sizes: ""Most of the experiments are done on T5(11B) which has 11 billion parameters. We also report experiments with BART (large) with 440 million parameters.""",3.825792e+19,"flops = (8) * (123 * 10**12) * (36 * 3600) * (0.3)
(num gpu) * (peak flops) * (time in seconds) * (assumed utilization rate)

from Appendix A.2: ""Time spent to build UNIFIEDQA: pretraining UNIFIEDQA approximately takes about 36 and 55 hours, on T5(11B) and BART models, respectively.""
so 36h for T5

""Infrastructure: In the experiments, we use v3-8 TPUs for T5 models, and eight 32GB GPUs for BART models.""

from https://cloud.google.com/tpu/docs/system-architecture-tpu-vm#tpu_chip
tpu chip have peak flops 123 teraflops
so 8 chips have peak flops 123 * 8`",SQuAD 1.1,,"from appendix A.1 - multiple QA datasets - it may be possible to estimate by summing sizes of all datasets
I am not sure if all data is used as system is trained for 100K steps (from appendix A.2)
with batch size 8 (appendix A.1)",Confident,https://arxiv.org/abs/2005.00700,UnifiedQA: Crossing Format Boundaries With a Single QA System,674.0,"Daniel Khashabi, Sewon Min, Tushar Khot, Ashish Sabharwal, Oyvind Tafjord, Peter Clark, Hannaneh Hajishirzi","Question answering (QA) tasks have been posed using a variety of formats, such as extractive span selection, multiple choice, etc. This has led to format-specialized models, and even to an implicit division in the QA community. We argue that such boundaries are artificial and perhaps unnecessary, given the reasoning abilities we seek to teach are not governed by the format. As evidence, we use the latest advances in language modeling to build a single pre-trained QA model, UnifiedQA, that performs surprisingly well across 17 QA datasets spanning 4 diverse formats. UnifiedQA performs on par with 9 different models that were trained on individual datasets themselves. Even when faced with 12 unseen datasets of observed formats, UnifiedQA performs surprisingly well, showing strong generalization from its out-of-format training data. Finally, simply fine-tuning this pre-trained QA model into specialized models results in a new state of the art on 6 datasets, establishing UnifiedQA as a strong starting point for building QA systems.","Research collective,Academia","United States of America,United States of America",SOTA improvement,"from abstract: ""Finally, simply fine-tuning this pre-trained QA model into specialized models results in a new state of the art on 6 datasets""",,36.0,"Appendix A.2: Time spent to build UNIFIEDQA: pretraining UNIFIEDQA approximately takes about 36 and 55 hours, on T5(11B) and BART models, respectively.",Google TPU v3,,,59.12208690735248,,,,,,,,Open weights (unrestricted),Open source,Open source,"Apache 2.0 license, includes models and training code: https://github.com/allenai/unifiedqa",,
Once for All,"MIT-IBM Watson AI Lab,Massachusetts Institute of Technology (MIT),IBM",2020-04-29,Vision,Image classification,7700000.0,"""Since
all of these sub-networks share the same weights (i.e., Wo) (Cheung et al., 2019), we only require
7.7M parameters to store all of them. Without sharing, the total model size will be prohibitive""",6.237e+20,"4.2k V100-hours (table 1)
0.33 utilization rate
V100 FP16 Tensor FLOPs: 125000000000000

4200 hours*60*60* 125000000000000 FLOP/s *0.33 utilization =623700000000000000000
",ImageNet,,,Confident,https://arxiv.org/abs/1908.09791,Once for all: Train one network and specialize it for efficient deployment.,1157.0,"Han Cai, Chuang Gan, Tianzhe Wang, Zhekai Zhang, and Song Han","We address the challenging problem of efficient inference across many devices and resource constraints, especially on edge devices. Conventional approaches either manually design or use neural architecture search (NAS) to find a specialized neural network and train it from scratch for each case, which is computationally prohibitive (causing CO2 emission as much as 5 cars' lifetime) thus unscalable. In this work, we propose to train a once-for-all (OFA) network that supports diverse architectural settings by decoupling training and search, to reduce the cost. We can quickly get a specialized sub-network by selecting from the OFA network without additional training. To efficiently train OFA networks, we also propose a novel progressive shrinking algorithm, a generalized pruning method that reduces the model size across many more dimensions than pruning (depth, width, kernel size, and resolution). It can obtain a surprisingly large number of sub-networks (>1019) that can fit different hardware platforms and latency constraints while maintaining the same level of accuracy as training independently. On diverse edge devices, OFA consistently outperforms state-of-the-art (SOTA) NAS methods (up to 4.0% ImageNet top1 accuracy improvement over MobileNetV3, or same accuracy but 1.5x faster than MobileNetV3, 2.6x faster than EfficientNet w.r.t measured latency) while reducing many orders of magnitude GPU hours and CO2 emission. In particular, OFA achieves a new SOTA 80.0% ImageNet top-1 accuracy under the mobile setting (<600M MACs). OFA is the winning solution for the 3rd Low Power Computer Vision Challenge (LPCVC), DSP classification track and the 4th LPCVC, both classification track and detection track. Code and 50 pre-trained models (for many devices & many latency constraints) are released at this https URL.","Academia,Industry,Academia,Industry","United States of America,United States of America,United States of America",SOTA improvement,"""In particular, OFA achieves a new SOTA 80.0% ImageNet top-1 accuracy under the mobile setting""",180.0,,,NVIDIA V100,,,1753.9255676777682,from Table 1,,,,,,,Open weights (unrestricted),Open source,Open source,"MIT license: https://github.com/mit-han-lab/once-for-all

repo contains inference and training code. models available via library",FP32,
Go-explore,"Uber AI,OpenAI",2020-04-27,Games,Atari,,,,,,,,Unknown,https://arxiv.org/abs/2004.12919,"First return, then explore",314.0,"Adrien Ecoffet, Joost Huizinga, Joel Lehman, Kenneth O. Stanley, Jeff Clune","The promise of reinforcement learning is to solve complex sequential decision problems autonomously by specifying a high-level reward function only. However, reinforcement learning algorithms struggle when, as is often the case, simple and intuitive rewards provide sparse and deceptive feedback. Avoiding these pitfalls requires thoroughly exploring the environment, but creating algorithms that can do so remains one of the central challenges of the field. We hypothesise that the main impediment to effective exploration originates from algorithms forgetting how to reach previously visited states (""detachment"") and from failing to first return to a state before exploring from it (""derailment""). We introduce Go-Explore, a family of algorithms that addresses these two challenges directly through the simple principles of explicitly remembering promising states and first returning to such states before intentionally exploring. Go-Explore solves all heretofore unsolved Atari games and surpasses the state of the art on all hard-exploration games, with orders of magnitude improvements on the grand challenges Montezuma's Revenge and Pitfall. We also demonstrate the practical potential of Go-Explore on a sparse-reward pick-and-place robotics task. Additionally, we show that adding a goal-conditioned policy can further improve Go-Explore's exploration efficiency and enable it to handle stochasticity throughout training. The substantial performance gains from Go-Explore suggest that the simple principles of remembering states, returning to them, and exploring from them are a powerful and general approach to exploration, an insight that may prove critical to the creation of truly intelligent learning agents.","Industry,Industry","United States of America,United States of America",SOTA improvement,"""GoExplore solves all heretofore unsolved Atari games (meaning those for which algorithms could not previously
outperform humans when evaluated following current community standards for Atari3) and surpasses the state
of the art on all hard-exploration games""",,,,,,,,,,,,,,,Unreleased,Open (non-commercial),Open access (non-commercial),non-commercial code: https://github.com/uber-research/go-explore/blob/master/LICENSE,,
CURL,University of California (UC) Berkeley,2020-04-08,Games,Atari,907264.0,,,,,,,,https://arxiv.org/abs/2004.04136v4,CURL: Contrastive Unsupervised Representations for Reinforcement Learning,978.0,"A Srinivas, M Laskin, P Abbeel",,Academia,United States of America,SOTA improvement,,,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"MIT: https://github.com/MishaLaskin/curl

",,
Agent57,DeepMind,2020-03-30,Games,Atari,,,,,,,,Unknown,https://arxiv.org/abs/2003.13350,Agent57: Outperforming the Atari Human Benchmark,485.0,"AP Badia, B Piot, S Kapturowski",,Industry,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,"""We propose Agent57, the first deep RL agent that outperforms the standard human benchmark on all 57 Atari games""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
MetNet,Google,2020-03-24,Earth science,Weather forecasting,,,,,,,,Unknown,https://arxiv.org/abs/2003.12140,MetNet: A Neural Weather Model for Precipitation Forecasting,250.0,"Casper Kaae Sønderby, Lasse Espeholt, Jonathan Heek, Mostafa Dehghani, Avital Oliver, Tim Salimans, Shreya Agrawal, Jason Hickey, Nal Kalchbrenner",,Industry,United States of America,SOTA improvement,"""MetNet improves upon the current operational NWP system HRRR for up to 8 hours of lead time""
... 
""Numerical Weather Prediction is the most successful framework to perform medium- and longrange (up to 6 days with high confidence) forecast to date (Bauer et al., 2015).""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
ELECTRA,"Stanford University,Google,Google Brain",2020-03-23,Language,Text autocompletion,335000000.0,https://github.com/google-research/electra,3.1e+21,"Table 8: ""ELECTRA-1.75M"" used 3.1e21 train FLOPs. Note that the actual parameter count is 335M. The 1.75M refers to the number of training steps.

This doesn't quite line up with a 6ND estimate, 
6 * 335M * (1.75M * 2048 * 128) = 9.22e20 FLOPs
I'm inferring 128 sequence length, possibly this is 256 or 512?","BookCorpus (BooksCorpus, Toronto Book Corpus),Wikipedia,ClueWeb,Gigaword",25000000000.0,"33B tokens or ~25B words

""For most experiments we pre-train on the same data as BERT, which consists
of 3.3 Billion tokens from Wikipedia and BooksCorpus (Zhu et al., 2015). However, for our Large
model we pre-trained on the data used for XLNet (Yang et al., 2019), which extends the BERT
dataset to 33B tokens by including data from ClueWeb (Callan et al., 2009), CommonCrawl, and
Gigaword (Parker et al., 2011).""",Likely,https://arxiv.org/abs/2003.10555v1,ELECTRA: Pre-training Text Encoders as Discriminators Rather Than Generators,2968.0,"Kevin Clark, Minh-Thang Luong, Quoc V. Le, Christopher D. Manning","Masked language modeling (MLM) pre-training methods such as BERT corrupt the input by replacing some tokens with [MASK] and then train a model to reconstruct the original tokens. While they produce good results when transferred to downstream NLP tasks, they generally require large amounts of compute to be effective. As an alternative, we propose a more sample-efficient pre-training task called replaced token detection. Instead of masking the input, our approach corrupts it by replacing some tokens with plausible alternatives sampled from a small generator network. Then, instead of training a model that predicts the original identities of the corrupted tokens, we train a discriminative model that predicts whether each token in the corrupted input was replaced by a generator sample or not. Thorough experiments demonstrate this new pre-training task is more efficient than MLM because the task is defined over all input tokens rather than just the small subset that was masked out. As a result, the contextual representations learned by our approach substantially outperform the ones learned by BERT given the same model size, data, and compute. The gains are particularly strong for small models; for example, we train a model on one GPU for 4 days that outperforms GPT (trained using 30x more compute) on the GLUE natural language understanding benchmark. Our approach also works well at scale, where it performs comparably to RoBERTa and XLNet while using less than 1/4 of their compute and outperforms them when using the same amount of compute.","Academia,Industry,Industry","United States of America,United States of America,United States of America",Highly cited,,,,table 1,,,,,,,,,,262144.0,,Open weights (unrestricted),Open source,Open source,"models and training code, Apache 2.0: https://github.com/google-research/electra",FP32,
Tensor-Transformer(1core)+PN (WT103),University of California (UC) Berkeley,2020-03-17,Language,Language modeling,85300000.0,"six layers tensorized transformer core-1 for Wikitext-103, following (Ma et al., 2019).

https://arxiv.org/abs/1906.09777",1.58e+18,6 FLOP / parameter / token * 85300000 parameters * 103000000 tokens * 30 epochs = 1.581462e+18 FLOP,WikiText-103,103000000.0,,Confident,https://arxiv.org/abs/2003.07845,PowerNorm: Rethinking Batch Normalization in Transformers,60.0,"Sheng Shen, Zhewei Yao, Amir Gholami, Michael W. Mahoney, Kurt Keutzer","The standard normalization method for neural network (NN) models used in Natural Language Processing (NLP) is layer normalization (LN). This is different than batch normalization (BN), which is widely-adopted in Computer Vision. The preferred use of LN in NLP is principally due to the empirical observation that a (naive/vanilla) use of BN leads to significant performance degradation for NLP tasks; however, a thorough understanding of the underlying reasons for this is not always evident. In this paper, we perform a systematic study of NLP transformer models to understand why BN has a poor performance, as compared to LN. We find that the statistics of NLP data across the batch dimension exhibit large fluctuations throughout training. This results in instability, if BN is naively implemented. To address this, we propose Power Normalization (PN), a novel normalization scheme that resolves this issue by (i) relaxing zero-mean normalization in BN, (ii) incorporating a running quadratic mean instead of per batch statistics to stabilize fluctuations, and (iii) using an approximate backpropagation for incorporating the running statistics in the forward pass. We show theoretically, under mild assumptions, that PN leads to a smaller Lipschitz constant for the loss, compared with BN. Furthermore, we prove that the approximate backpropagation scheme leads to bounded gradients. We extensively test PN for transformers on a range of NLP tasks, and we show that it significantly outperforms both LN and BN. In particular, PN outperforms LN by 0.4/0.6 BLEU on IWSLT14/WMT14 and 5.6/3.0 PPL on PTB/WikiText-103. We make our code publicly available at \url{this https URL}.",Academia,United States of America,SOTA improvement,"""The results are reported in Table 1. In the first section of
rows, we report state-of-the-art results for these two tasks with comparable model sizes""",30.0,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,copyleft license: https://github.com/sIncerass/powernorm/blob/master/LICENSE,FP32,
Routing Transformer (WT-103),Google Research,2020-03-12,Language,Language modeling,79500000.0,,,,WikiText-103,,,,https://arxiv.org/abs/2003.05997,Efficient Content-Based Sparse Attention with Routing Transformers,519.0,"Aurko Roy, Mohammad Saffar, Ashish Vaswani, David Grangier","Self-attention has recently been adopted for a wide range of sequence modeling problems. Despite its effectiveness, self-attention suffers from quadratic compute and memory requirements with respect to sequence length. Successful approaches to reduce this complexity focused on attending to local sliding windows or a small set of locations independent of content. Our work proposes to learn dynamic sparse attention patterns that avoid allocating computation and memory to attend to content unrelated to the query of interest. This work builds upon two lines of research: it combines the modeling flexibility of prior work on content-based sparse attention with the efficiency gains from approaches based on local, temporal sparse attention. Our model, the Routing Transformer, endows self-attention with a sparse routing module based on online k-means while reducing the overall complexity of attention to O(n1.5d) from O(n2d) for sequence length n and hidden dimension d. We show that our model outperforms comparable sparse attention models on language modeling on Wikitext-103 (15.8 vs 18.3 perplexity) as well as on image generation on ImageNet-64 (3.43 vs 3.44 bits/dim) while using fewer self-attention layers. Additionally, we set a new state-of-the-art on the newly released PG-19 data-set, obtaining a test perplexity of 33.2 with a 22 layer Routing Transformer model trained on sequences of length 8192.",Industry,"Multinational,United States of America,Canada,Switzerland",SOTA improvement,"""Additionally, we set a new state-of-the-art on the newly released PG-19 data-set, obtaining a test perplexity of 33.2 with a 22 layer Routing Transformer model trained on sequences of length 8192""",,,,,,,,,,,,,,,Open weights (unrestricted),Unreleased,Open source,"code/weights: https://github.com/google-research/google-research/tree/master/routing_transformer

repo is Apache 2.0: https://github.com/google-research/google-research/blob/master/LICENSE",,
TransformerXL + spectrum control,"University of California Los Angeles (UCLA),JD.com",2020-03-11,Language,Language modeling,151000000.0,"151M (Table 2)

"" On the large WikiText-103 dataset, we implement our method based on the state-of-the-art Transformer-XL based models (Dai et al., 2019). We follow the same settings reported in (Dai et al., 2019), and our implementation is based on the
official code for Transformer-XL.""",2.6289761e+19,"6 FLOP / parameter / token *  151000000 parameters * 103000000 tokens * 250 epochs = 2.33295e+19 FLOP

31330000000000 FLOP / sec / GPU [fp16] * 4 GPUs * 3152 sec per epoch * 250 epochs * 0.3 [assumed precision] = 2.9625648e+19 FLOP

sqrt(2.33295e+19*2.9625648e+19) = 2.6289761e+19 FLOP

'speculative' confidence due to the assumption of the amount of epochs",WikiText-103,103000000.0,"""For WikiText-103 dataset, we use four NVIDIA Tesla V100
GPU and set the batch size to be 40."" 
unknown amount of epochs and training steps but they say they follow original Transformer-XL setup (400K steps + 16K warmup steps, 128 batch size, 384 sequence length) 

400000*4*40*384 / 103000000 = 248 epochs  ",Speculative,https://openreview.net/forum?id=ByxY8CNtvr,Improving Neural Language Generation with Spectrum Control,80.0,"Lingxiao Wang, Jing Huang, Kevin Huang, Ziniu Hu, Guangtao Wang, Quanquan Gu","Recent Transformer-based models such as Transformer-XL and BERT have achieved huge success on various natural language processing tasks. However, contextualized embeddings at the output layer of these powerful models tend to degenerate and occupy an anisotropic cone in the vector space, which is called the representation degeneration problem. In this paper, we propose a novel spectrum control approach to address this degeneration problem. The core idea of our method is to directly guide the spectra training of the output embedding matrix with a slow-decaying singular value prior distribution through a reparameterization framework. We show that our proposed method encourages isotropy of the learned word representations while maintains the modeling power of these contextual neural models. We further provide a theoretical analysis and insight on the benefit of modeling singular value distribution. We demonstrate that our spectrum control method outperforms the state-of-the-art Transformer-XL modeling for language model, and various Transformer-based models for machine translation, on common benchmark datasets for these tasks.","Academia,Industry","United States of America,China",SOTA improvement,"""We demonstrate that our spectrum control method outperforms the state-of-the-art Transformer-XL modeling for language model""",250.0,219.0,3152 sec per epoch (Table 7) * 250 epochs / 3600 sec/hour = 219 hours,NVIDIA V100,4.0,,,,2452.621142775376,,,,61440.0,4*40*384,Unreleased,Unreleased,,,,
TCAN (WT2),"Nanjing University,Ant Group",2020-02-28,Language,Language modeling,33000000.0,,,,WikiText-2,,,,https://arxiv.org/abs/2002.12530,Temporal Convolutional Attention-based Network For Sequence Modeling,36.0,"Hongyan Hao, Yan Wang, Yudi Xia, Jian Zhao, Furao Shen","With the development of feed-forward models, the default model for sequence modeling has gradually evolved to replace recurrent networks. Many powerful feed-forward models based on convolutional networks and attention mechanism were proposed and show more potential to handle sequence modeling tasks. We wonder that is there an architecture that can not only achieve an approximate substitution of recurrent network, but also absorb the advantages of feed-forward models. So we propose an exploratory architecture referred to Temporal Convolutional Attention-based Network (TCAN) which combines temporal convolutional network and attention mechanism. TCAN includes two parts, one is Temporal Attention (TA) which captures relevant features inside the sequence, the other is Enhanced Residual (ER) which extracts shallow layer's important information and transfers to deep layers. We improve the state-of-the-art results of bpc/perplexity to 30.28 on word-level PTB, 1.092 on character-level PTB, and 9.20 on WikiText-2.","Academia,Industry","China,China",SOTA improvement,"""We improve the state-of-theart results of ... 9.20 on WikiText-2""",,,,,,,,,,,,,,,Unreleased,Open source,Open source,MIT license for code: https://github.com/haohy/TCAN,,
Feedback Transformer,"LORIA,University of Lorraine,Facebook AI Research",2020-02-21,Language,Language modeling,126000000.0,"Table 3 shows 126M.

There is another instance of the Feedback Transformer mentioned in Table 9 with 139M parameters.",7.690547e+18,"6 FLOP / token / parameter * 126*10^6 parameters * 256 tokens per sequences * 512 sequences per batch * 210000 steps = 2.0808991e+19 FLOP

assuming V100 GPU fp16:

31330000000000 FLOP/sec/GPU * 1 GPU * 84 hours * 3600 sec / hour * 0.3 [assumed utilization] = 2.8422576e+18 FLOP

sqrt(2.0808991e+19*2.8422576e+18) = 7.690547e+18 FLOP

___________
in the Algorithmic progress paper they used estimation of 4.41e+19 FLOP also with low confidence",WikiText-103,103000000.0,"""The models are trained for 200k steps and the finetuned for additional 10k steps.""

from Table 9 (describes 139M model)
batch size 512
sequence length 256

256*512*210000 / 103000000 = 267 epochs

""speculative"" confidence since there is no clear description of the 126M model and numbers are assumed based on 139M model description",Speculative,https://arxiv.org/abs/2002.09402,Addressing Some Limitations of Transformers with Feedback Memory,41.0,"Angela Fan, Thibaut Lavril, Edouard Grave, Armand Joulin, Sainbayar Sukhbaatar","Transformers have been successfully applied to sequential, auto-regressive tasks despite being feedforward networks. Unlike recurrent neural networks, Transformers use attention to capture temporal relations while processing input tokens in parallel. While this parallelization makes them computationally efficient, it restricts the model from fully exploiting the sequential nature of the input. The representation at a given layer can only access representations from lower layers, rather than the higher level representations already available. In this work, we propose the Feedback Transformer architecture that exposes all previous representations to all future representations, meaning the lowest representation of the current timestep is formed from the highest-level abstract representation of the past. We demonstrate on a variety of benchmarks in language modeling, machine translation, and reinforcement learning that the increased representation capacity can create small, shallow models with much stronger performance than comparable Transformers.","Academia,Academia,Industry","France,France,United States of America",SOTA improvement,"""As shown in Table 4, the Feedback
Transformer model achieves a new SOTA performance (on Enwiki8) of 0.96 bit-per-byte despite its small size.""",267.23,84.0,""" Our Feedback architecture takes 3.5 days to train""
3.5*24 = 84 hours",,,,,,,,,,131072.0,256*512,Unreleased,Unreleased,,,,
Turing-NLG,Microsoft,2020-02-13,Language,"Text autocompletion,Language generation",17000000000.0,,1.57e+22,"source: https://lair.lighton.ai/akronomicon/
157 PF-days * 3600 * 24 * 10^15  = 1.35648e+22

archived: https://github.com/lightonai/akronomicon/tree/main/akrodb

6ND=6*17000000000*46400000000=4.7328e+21 (confidence regarding dataset size - likely)

Authors of ""AI and Memory Wall"" (https://github.com/amirgholami/ai_and_memory_wall) estimated model's training compute as 28,000,000 PFLOP = 2.8*10^22 FLOP",,46400000000.0,"Authors say they pretrain on the same data as for Megatron-LM. 

From the Megatron-LM paper: https://arxiv.org/pdf/1909.08053.pdf

""The resulting aggregate corpus contains 174 GB of deduplicated text.""

174GB * 2e8words/GB = 3.48e10 words
3.48e10 words (if english) *4/3 = 46400000000 tokens

confidence - likely",Likely,https://www.microsoft.com/en-us/research/blog/turing-nlg-a-17-billion-parameter-language-model-by-microsoft/,Turing-NLG: A 17-billion-parameter language model by Microsoft,114.0,Corby Rosset,"Turing Natural Language Generation (T-NLG) is a 17 billion parameter language model by Microsoft that outperforms the state of the art on many downstream NLP tasks. We present a demo of the model, including its freeform generation, question answering, and summarization capabilities, to academics for feedback and research purposes. <|endoftext|>",Industry,"United States of America,Multinational,India,Belgium",SOTA improvement,"from paper: ""Turing Natural Language Generation (T-NLG) is a 17 billion parameter language model by Microsoft that outperforms the state of the art on many downstream NLP tasks""",3.39,,,NVIDIA Tesla V100 DGXS 32 GB,256.0,,51659.713290894986,,130885.13499433055,,,,524288.0,,Unreleased,Unreleased,,,,
SimCLR,Google Brain,2020-02-13,Vision,Image completion,375000000.0,source: https://openai.com/blog/image-gpt/,,,ILSVRC 2012 subset of ImageNet,,,,https://arxiv.org/abs/2002.05709,A Simple Framework for Contrastive Learning of Visual Representations,16017.0,"Ting Chen, Simon Kornblith, Mohammad Norouzi, Geoffrey Hinton","This paper presents SimCLR: a simple framework for contrastive learning of visual representations. We simplify recently proposed contrastive self-supervised learning algorithms without requiring specialized architectures or a memory bank. In order to understand what enables the contrastive prediction tasks to learn useful representations, we systematically study the major components of our framework. We show that (1) composition of data augmentations plays a critical role in defining effective predictive tasks, (2) introducing a learnable nonlinear transformation between the representation and the contrastive loss substantially improves the quality of the learned representations, and (3) contrastive learning benefits from larger batch sizes and more training steps compared to supervised learning. By combining these findings, we are able to considerably outperform previous methods for self-supervised and semi-supervised learning on ImageNet. A linear classifier trained on self-supervised representations learned by SimCLR achieves 76.5% top-1 accuracy, which is a 7% relative improvement over previous state-of-the-art, matching the performance of a supervised ResNet-50. When fine-tuned on only 1% of the labels, we achieve 85.8% top-5 accuracy, outperforming AlexNet with 100X fewer labels.",Industry,United States of America,Highly cited,,1000.0,,,Google TPU v3,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,Apache 2.0: https://github.com/google-research/simclr,,
ALBERT-xxlarge,"Toyota Technological Institute at Chicago,Google",2020-02-09,Language,"Language modeling/generation,Question answering",235000000.0,,2.39e+21,"32 hours of training
512 TPU V3s
0.33 utilization rate

123000000000000 FLOP / chip / sec * 512 TPUs * 32 hours * 3600 sec / hour * 0.33 [assumed utilization] = 2.3940956e+21 FLOP

""We train all models for 125,000 steps unless otherwise specified""
""All the model updates use a batch size of 4096 ""
""We always limit the maximum input length to 512, and randomly generate input sequences shorter than 512 with a probability of 10%.""

6 FLOP / parameter / token * 235000000 parameters * 512 tokens per sequence * 4096 sequences per batch * 125000 steps =  3.6962304e+20 FLOP

Authors of ""AI and Memory Wall"" (https://github.com/amirgholami/ai_and_memory_wall) estimated model's training compute as 31,000,000 PFLOP = 3.1*10^22 FLOP","Wikipedia,BookCorpus (BooksCorpus, Toronto Book Corpus)",3300000000.0,"Pretraining same as for BERT - Wikipedia and BookCorpus

""For the pre-training corpus we use the BooksCorpus (800M words) (Zhu et al., 2015) and English Wikipedia (2,500M words)""",Speculative,https://arxiv.org/abs/1909.11942,ALBERT: A Lite BERT for Self-supervised Learning of Language Representations.,5901.0,"Zhenzhong Lan, Mingda Chen, Sebastian Goodman, Kevin Gimpel, Piyush Sharma, and Radu Soricut","Increasing model size when pretraining natural language representations often results in improved performance on downstream tasks. However, at some point further model increases become harder due to GPU/TPU memory limitations and longer training times. To address these problems, we present two parameter-reduction techniques to lower memory consumption and increase the training speed of BERT. Comprehensive empirical evidence shows that our proposed methods lead to models that scale much better compared to the original BERT. We also use a self-supervised loss that focuses on modeling inter-sentence coherence, and show it consistently helps downstream tasks with multi-sentence inputs. As a result, our best model establishes new state-of-the-art results on the GLUE, RACE, and \squad benchmarks while having fewer parameters compared to BERT-large. The code and the pretrained models are available at this https URL.","Academia,Industry","United States of America,United States of America",Highly cited,,79.4,32.0,,Google TPU v3,512.0,,4439.921298510215,,230378.35820081632,,,,2097152.0,"Sequences are capped at 512 tokens; 10% of the time they'll use an input less than 512 long. Batches are over 4096 sequences. Tokens per batch: 2,097,152",Open weights (unrestricted),Open source,Open source,Apache 2.0 code/weights. repo includes training code: https://github.com/google-research/ALBERT,,
TaLK Convolution,Carleton University,2020-02-08,Language,Language modeling,240000000.0,"Table 5

""For the language model, we followed the same configuration
as Baevski & Auli (2019). We used 17 decoding layers, each
layer with a 1024 hidden size, a 4096 feed-forward hidden
size and 8 heads. The adaptive input factor was set to 4.""",2.6990346e+19,6 FLOP / parameter / token * 240000000 parameters * 286000 steps * 65536 tokens per batch = 2.6990346e+19 FLOP,WikiText-103,103000000.0,""" We replicated their setup and partition the training data into blocks of 512 contiguous tokens""

"" same setup as in Baevski & Auli (2019)""  https://arxiv.org/abs/1809.10853
in that paper they trained for 286k steps in batches of 65,536 tokens.

286000*65536 / 103000000= 182 epochs (same as in as in Baevski & Auli (2019))",Likely,https://arxiv.org/abs/2002.03184,Time-aware Large Kernel Convolutions,28.0,"Vasileios Lioutas, Yuhong Guo","To date, most state-of-the-art sequence modeling architectures use attention to build generative models for language based tasks. Some of these models use all the available sequence tokens to generate an attention distribution which results in time complexity of O(n2). Alternatively, they utilize depthwise convolutions with softmax normalized kernels of size k acting as a limited-window self-attention, resulting in time complexity of O(k⋅n). In this paper, we introduce Time-aware Large Kernel (TaLK) Convolutions, a novel adaptive convolution operation that learns to predict the size of a summation kernel instead of using a fixed-sized kernel matrix. This method yields a time complexity of O(n), effectively making the sequence encoding process linear to the number of tokens. We evaluate the proposed method on large-scale standard machine translation, abstractive summarization and language modeling datasets and show that TaLK Convolutions constitute an efficient improvement over other attention/convolution based approaches.",Academia,Canada,SOTA improvement,"""[We] set a new state-of-the-art result on the
IWSLT De-En and CNN-DailyMail datasets""",182.0,,,NVIDIA GeForce RTX 2080 Ti 11GB,8.0,,,,4090.615920439178,,,,65536.0,same setup as in Baevski & Auli (2019),Unreleased,Unreleased,Unreleased,"MIT, code and weights (though this repo is for translation not WT-103):

https://github.com/lioutasb/TaLKConvolutions?tab=readme-ov-file",FP16,
Perceiver IO (optical flow),DeepMind,2020-02-08,"Multimodal,Language,Vision","Language modeling/generation,Image captioning",27900000.0,"Optical flow model (SOTA) was 27.9M params. There are other, larger models described in this paper, e.g. for language.

""For the pixel- and patch-based models, total computational
complexity for a forward pass on a 368 × 496 image is roughly 987 billion FLOPs, and there are
roughly 27.9 million parameters.""",,,AutoFlow,,,,https://arxiv.org/abs/2107.14795,Perceiver IO: A General Architecture for Structured Inputs & Outputs,505.0,"Andrew Jaegle, Sebastian Borgeaud, Jean-Baptiste Alayrac, Carl Doersch, Catalin Ionescu, David Ding, Skanda Koppula, Daniel Zoran, Andrew Brock, Evan Shelhamer, Olivier Hénaff,
Matthew M. Botvinick, Andrew Zisserman, Oriol Vinyals, João Carreira","A central goal of machine learning is the development of systems that can solve many problems in as many data domains as possible. Current architectures, however, cannot be applied beyond a small set of stereotyped settings, as they bake in domain & task assumptions or scale poorly to large inputs or outputs. In this work, we propose Perceiver IO, a general-purpose architecture that handles data from arbitrary settings while scaling linearly with the size of inputs and outputs. Our model augments the Perceiver with a flexible querying mechanism that enables outputs of various sizes and semantics, doing away with the need for task-specific architecture engineering. The same architecture achieves strong results on tasks spanning natural language and visual understanding, multi-task and multi-modal reasoning, and StarCraft II. As highlights, Perceiver IO outperforms a Transformer-based BERT baseline on the GLUE language benchmark despite removing input tokenization and achieves state-of-the-art performance on Sintel optical flow estimation with no explicit mechanisms for multiscale correspondence.",Industry,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,"""Perceiver IO... achieves state-of-the-art performance on Sintel optical flow estimation""",480.0,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
Theseus 6/768,"University of California San Diego,Beihang University,Microsoft",2020-02-07,Language,Text autocompletion,66000000.0,"66M, Table 1",,,GLUE,,,,https://arxiv.org/abs/2002.02925,BERT-of-Theseus: Compressing BERT by Progressive Module Replacing,188.0,"Canwen Xu, Wangchunshu Zhou, Tao Ge, Furu Wei, Ming Zhou",,"Academia,Academia,Industry","United States of America,China,United States of America,Multinational,India,Belgium",SOTA improvement,"""Our approach outperforms existing knowledge distillation approaches on GLUE benchmark""",,,,NVIDIA V100,,,,,,BERT-Large,2.7e+18,"Actually BERT-base, 110M params. Up to 20 V100-hours depending on task. 

125 trillion * 20 * 3600 * 0.3 (utilization assumption) = 2.7e18",,,Open weights (unrestricted),Open source,Open source,Apache 2.0: https://github.com/JetRunner/BERT-of-Theseus,,
Meena,Google Brain,2020-01-28,Language,Text autocompletion,2600000000.0,"""We present Meena, a multi-turn open-domain chatbot trained end-to-end on data mined and filtered from public domain social media conversations. This 2.6B parameter neural network is simply trained to minimize perplexity of the next token.""",1.12e+23,"https://arxiv.org/ftp/arxiv/papers/2104/2104.10350.pdf
Table 4

In the paper: ""We trained our best model for 30 days on a TPUv3 Pod (2,048 TPU cores) on the Meena dataset containing 40B words (or 61B BPE tokens) [...] by the end of training, the model had traversed the full
training set 164 times (or epochs) and observed a total of about 10T tokens""

Hardware: 30 * 24 * 3600 * (2048/2) * 1.23e14 * 0.3 = 9.794e22
Ops counting: 6 * 10T * 2.6B = 1.56E23
Geometric mean: sqrt(9.79e22*1.56E23) = 1.24e23, very close to the figure in the link above.",,40000000000.0,"""The final Meena dataset contains 341GB of text
(40B words)""

Converting from GB to words yields 6.8e10, which is in the same OOM",Confident,https://arxiv.org/abs/2001.09977,Towards a Human-like Open-Domain Chatbot,879.0,"Dongling Xiao, Han Zhang, Yukun Li, Yu Sun, Hao Tian, Hua Wu, Haifeng Wang","We present Meena, a multi-turn open-domain chatbot trained end-to-end on data mined and filtered from public domain social media conversations. This 2.6B parameter neural network is simply trained to minimize perplexity of the next token. We also propose a human evaluation metric called Sensibleness and Specificity Average (SSA), which captures key elements of a human-like multi-turn conversation. Our experiments show strong correlation between perplexity and SSA. The fact that the best perplexity end-to-end trained Meena scores high on SSA (72% on multi-turn evaluation) suggests that a human-level SSA of 86% is potentially within reach if we can better optimize perplexity. Additionally, the full version of Meena (with a filtering mechanism and tuned decoding) scores 79% SSA, 23% higher in absolute SSA than the existing chatbots we evaluated.",Industry,United States of America,SOTA improvement,"""We also propose a human evaluation metric called Sensibleness and
Specificity Average (SSA)... the full version of Meena (with a filtering mechanism and tuned decoding) scores 79% SSA, 23% higher in absolute SSA than the existing chatbots we evaluated""",164.0,720.0,"We trained our best model for 30 days on a TPUv3 Pod (2,048 TPU cores)",Google TPU v3,1024.0,0.34306622,206760.3812904988,,460879.8620037727,,,,82655.0,"61B tokens over 738k training steps, or 82655 tokens per batch on average. Not certain about warmup, etc",Unreleased,Unreleased,,,,True
ContextNet + Noisy Student,Google,2020-01-19,Speech,Speech recognition,,,8.16e+21,"""We train 6 generations of models numbered 0 to 5, where
we count the baseline model trained with the supervised set
as the zeroth generation. Each generation is trained ... on 32 Google
Cloud TPU chips for 10 days.""

The TPU version is likely v3 given this is a 2020 paper.

we get 6 * 10 * 24 * 3600 * 32 * 123 tflops * 0.4  (assumed utilization) = 8.16e21","LibriSpeech,LibriLight",,,Confident,https://arxiv.org/abs/2005.09629v2,Improved Noisy Student Training for Automatic Speech Recognition,225.0,"Daniel S. Park, Yu Zhang, Ye Jia, Wei Han, Chung-Cheng Chiu, Bo Li, Yonghui Wu, Quoc V. Le","Recently, a semi-supervised learning method known as ""noisy student training"" has been shown to improve image classification performance of deep networks significantly. Noisy student training is an iterative self-training method that leverages augmentation to improve network performance. In this work, we adapt and improve noisy student training for automatic speech recognition, employing (adaptive) SpecAugment as the augmentation method. We find effective methods to filter, balance and augment the data generated in between self-training iterations. By doing so, we are able to obtain word error rates (WERs) 4.2%/8.6% on the clean/noisy LibriSpeech test sets by only using the clean 100h subset of LibriSpeech as the supervised set and the rest (860h) as the unlabeled set. Furthermore, we are able to achieve WERs 1.7%/3.4% on the clean/noisy LibriSpeech test sets by using the unlab-60k subset of LibriLight as the unlabeled set for LibriSpeech 960h. We are thus able to improve upon the previous state-of-the-art clean/noisy test WERs achieved on LibriSpeech 100h (4.74%/12.20%) and LibriSpeech (1.9%/4.1%).",Industry,United States of America,SOTA improvement,"""We are thus able to improve upon the previous state-of-the-art clean/noisy test WERs achieved on LibriSpeech 100h (4.74%/12.20%) and LibriSpeech (1.9%/4.1%)""",,1440.0,roughly 10 days,Google TPU v3,,,14226.054462994534,,,,,,,,Unreleased,Unreleased,,,,
AlphaFold,DeepMind,2020-01-15,Biology,"Protein folding prediction,Proteins",16340840.0,"""Neural network hyperparameters"" section of https://www.nature.com/articles/s41586-019-1923-7:
“7 × 4 Blocks with 256 channels, cycling through dilations 1, 2, 4, 8”
“48 × 4 Blocks with 128 channels, cycling through dilations 1, 2, 4, 8”

""Distogram prediction"" section:
""For the final layer, a position-specific bias was used""

Extended Data Fig.1 (b): 
Shows that each block consists of 9 layers:
(1) Batch norm
(2) Elu
(3) Project down (halves number of dimensions)
(4) Batch norm
(5) Elu
(6) 3x3 kernel with dilation
(7) Batch norm
(8) Elu
(9) Project up (doubles number of dimensions)

Dilations don't change the number of parameters in each filter
Assuming that projection layers are convolutional layers with 1x1 kernels

Parameter estimate for each layer in a 256 channel block:
(1) 256*2            = 512
(2) 0
(3) 1*1*256*128 = 32768
(4) 128*2            = 256 
(5) 0
(6) 3*3*128*128 = 147456
(7) 128*2            = 256 
(8) 0
(9) 1*1*128*256 + 256 = 33024
Total                             = 214272

Parameter estimate for each layer in a 128 channel block:
(1) 128*2            = 256
(2) 0
(3) 1*1*128*64   = 8192
(4) 64*2              = 128
(5) 0
(6) 3*3*64*64     = 36864
(7) 64*2              = 128
(8) 0
(9) 1*1*64*128 + 128 = 8320
Total                   = 53897

Estimate total network = 7*4*214272 + 48*4*53897 = 5992616 + 10348224
                                     = 16340840
                                     ~ 16e6

Within a factor of 2 of the estimate of 21M parameters stated in: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7305407/

[Previous approximation: 7 * 4 * 256 * 3 * 3 * 256 + 48 * 4 * 128 * 3 * 3 * 128 = 44826624]",1e+20,"Estimated in the blogpost below

https://www.lesswrong.com/posts/wfpdejMWog4vEDLDg/ai-and-compute-trend-isn-t-predictive-of-what-is-happening

""AlphaFold: they say they trained on GPU and not TPU. Assuming V100 GPU, it's 5 days * 24 hours/day * 3600 sec/hour * 8 V100 GPU * 100*10^12 FLOP/s * 33% actual GPU utilization = 10^20 FLOP.""","PDB (Protein Data Bank),UniRef30 (FKA UniClust30)",300000000.99999946,"Training Domains: 29,427
Average Residues per Domain: 100
Data Points per Domain: 100 × 100 = 10,000
Total Data Points = 29,427 × 10,000 = 294,270,000 ≈ 3.0 × 10⁸",Speculative,https://www.nature.com/articles/s41586-019-1923-7,Improved protein structure prediction using potentials from deep learning,2773.0,"Andrew W. Senior, Richard Evans, John Jumper, James Kirkpatrick, Laurent Sifre, Tim Green, Chongli Qin, Augustin Žídek, Alexander W. R. Nelson, Alex Bridgland, Hugo Penedones, Stig Petersen, Karen Simonyan, Steve Crossan, Pushmeet Kohli, David T. Jones, David Silver, Koray Kavukcuoglu, Demis Hassabis","Protein structure prediction can be used to determine the three-dimensional shape of a protein from its amino acid sequence. This problem is of fundamental importance as the structure of a protein largely determines its function; however, protein structures can be difficult to determine experimentally. Considerable progress has recently been made by leveraging genetic information. It is possible to infer which amino acid residues are in contact by analysing covariation in homologous sequences, which aids in the prediction of protein structures. Here we show that we can train a neural network to make accurate predictions of the distances between pairs of residues, which convey more information about the structure than contact predictions. Using this information, we construct a potential of mean force that can accurately describe the shape of a protein. We find that the resulting potential can be optimized by a simple gradient descent algorithm to generate structures without complex sampling procedures. The resulting system, named AlphaFold, achieves high accuracy, even for sequences with fewer homologous sequences. In the recent Critical Assessment of Protein Structure Prediction (CASP13)—a blind assessment of the state of the field—AlphaFold created high-accuracy structures (with template modelling (TM) scores of 0.7 or higher) for 24 out of 43 free modelling domains, whereas the next best method, which used sampling and contact information, achieved such accuracy for only 14 out of 43 domains. AlphaFold represents a considerable advance in protein-structure prediction. We expect this increased accuracy to enable insights into the function and malfunction of proteins, especially in cases for which no structures for homologous proteins have been experimentally determined.",Industry,United Kingdom of Great Britain and Northern Ireland,"SOTA improvement,Highly cited","""AlphaFold represents a considerable advance
in protein-structure prediction."" [Abstract]",,120.0,"""Training time: about 5 days for 600,000 steps""",,,,,,,,,,,,Unreleased,Unreleased,,,,
Big Transfer (BiT-L),Google Brain,2019-12-24,Vision,Image classification,928000000.0,,,,JFT-300M,,"""For BiT-L, we train for 40 epochs""",,https://arxiv.org/abs/1912.11370,Big Transfer (BiT): General Visual Representation Learning,1098.0,"Alexander Kolesnikov, Lucas Beyer, Xiaohua Zhai, Joan Puigcerver, Jessica Yung, Sylvain Gelly, Neil Houlsby","Transfer of pre-trained representations improves sample efficiency and simplifies hyperparameter tuning when training deep neural networks for vision. We revisit the paradigm of pre-training on large supervised datasets and fine-tuning the model on a target task. We scale up pre-training, and propose a simple recipe that we call Big Transfer (BiT). By combining a few carefully selected components, and transferring using a simple heuristic, we achieve strong performance on over 20 datasets. BiT performs well across a surprisingly wide range of data regimes -- from 1 example per class to 1M total examples. BiT achieves 87.5% top-1 accuracy on ILSVRC-2012, 99.4% on CIFAR-10, and 76.3% on the 19 task Visual Task Adaptation Benchmark (VTAB). On small datasets, BiT attains 76.8% on ILSVRC-2012 with 10 examples per class, and 97.0% on CIFAR-10 with 10 examples per class. We conduct detailed analysis of the main components that lead to high transfer performance.",Industry,United States of America,SOTA improvement,"""We transfer BiT to many diverse tasks... These tasks include ImageNet’s ILSVRC-2012 [10], CIFAR-10/100 [27], Oxford-IIIT Pet [41], Oxford
Flowers-102 [39] (including few-shot variants), and the 1000-sample VTAB-1k benchmark [66], which consists of 19 diverse datasets. BiT-L attains state-ofthe-art performance on many of these tasks",40.0,,,Google TPU v3,,,,,,,,,,,Unreleased,Unreleased,,,FP32,
DD-PPO,"Georgia Institute of Technology,Facebook AI Research,Oregon State University,Simon Fraser University",2019-12-19,Robotics,Object detection,,"no parameter count but some architecture details: ""The policy is parameterized by a 2-layer LSTM with a 512-dimensional hidden state. It takes three inputs: the previous action, the target relative to the current state, and the output of the visual encoder. The LSTM’s output is used to produce a softmax distribution over the action space and an estimate of the value function. See Appendix C for full details.""",7.8e+20,"""Using DD-PPO, we train agents for 2.5 Billion steps of experience with 64 Tesla V100 GPUs in 2.75 days – 180 GPU-days of training""

125 teraFLOP/s (exact V100 model not specified) * 180 * 24 * 3600 * 0.4 (assumed utilization) = 7.8e20",,,,Likely,"https://openreview.net/forum?id=H1gX8C4YPr
https://arxiv.org/abs/1911.00357",DD-PPO: Learning Near-Perfect PointGoal Navigators from 2.5 Billion Frames,411.0,"Erik Wijmans, Abhishek Kadian, Ari Morcos, Stefan Lee, Irfan Essa, Devi Parikh, Manolis Savva, Dhruv Batra","We present Decentralized Distributed Proximal Policy Optimization (DD-PPO), a method for distributed reinforcement learning in resource-intensive simulated environments. DD-PPO is distributed (uses multiple machines), decentralized (lacks a centralized server), and synchronous (no computation is ever ""stale""), making it conceptually simple and easy to implement. In our experiments on training virtual robots to navigate in Habitat-Sim, DD-PPO exhibits near-linear scaling -- achieving a speedup of 107x on 128 GPUs over a serial implementation. We leverage this scaling to train an agent for 2.5 Billion steps of experience (the equivalent of 80 years of human experience) -- over 6 months of GPU-time training in under 3 days of wall-clock time with 64 GPUs. ","Academia,Industry,Academia,Academia","United States of America,United States of America,United States of America,Canada",SOTA improvement,"""This agent achieves state-of-art on the Habitat Challenge 2019 RGB track (rank 2 entry has 0.89 SPL).""",,66.0,2.75 days,NVIDIA V100,64.0,,1926.8992900057376,,39314.53850266432,,,,,,Unreleased,Unreleased,,MIT license for environment used to train. doesn't seem like it has training code for this model. https://github.com/facebookresearch/habitat-lab,FP32,
OpenAI Five Rerun,OpenAI,2019-12-13,Games,Dota 2,159000000.0,"""We define a policy (π) as a function from the history of observations to a probability distribution
over actions, which we parameterize as a recurrent neural network with approximately 159 million
parameters (θ)."" pg. 3 of paper

source: https://docs.google.com/spreadsheets/d/1Kj4Q5WADcDXtUJLIOfGTCE3tGvxNczEMwyy8QtgSkHk/edit#gid=54587040&fvid=1361937389",1.3e+22,"THIS CALCULATION IS FOR RERUN

""Rerun took 2 months and 150 ± 5 PFlops/s·days of compute (see Figure 4)""



source: https://docs.google.com/spreadsheets/d/1Kj4Q5WADcDXtUJLIOfGTCE3tGvxNczEMwyy8QtgSkHk/edit#gid=54587040&fvid=1361937389",,53084160000.0,"54k iterations (Fig 7)
with a batch size of 983040 (Table 2)",Confident,https://cdn.openai.com/dota-2.pdf,Dota 2 with Large Scale Deep Reinforcement Learning,1629.0,"Christopher Berner, Greg Brockman, Brooke Chan, Vicki Cheung,
Przemysław “Psyho"" Dębiak, Christy Dennison, David Farhi, Quirin Fischer, Shariq Hashme, Chris Hesse, Rafal Józefowicz, Scott Gray, Catherine Olsson, Jakub Pachocki, Michael Petrov, Henrique Pondé de Oliveira Pinto, Jonathan Raiman, Tim Salimans, Jeremy Schlatter, Jonas Schneider, Szymon Sidor, Ilya Sutskever, Jie Tang, Filip Wolski, Susan Zhang","On April 13th, 2019, OpenAI Five became the first AI system to defeat the world champions at an esports game. The game of Dota 2 presents novel challenges for AI systems such as long time horizons, imperfect information, and complex, continuous state-action spaces, all challenges which will become increasingly central to more capable AI systems. OpenAI Five leveraged existing reinforcement learning techniques, scaled to learn from batches of approximately 2 million frames every 2 seconds. We developed a distributed training system and tools for continual training which allowed us to train OpenAI Five for 10 months. By defeating the Dota 2 world champion (Team OG), OpenAI Five demonstrates that self-play reinforcement learning can achieve superhuman performance on a difficult task.",Industry,United States of America,"Highly cited,SOTA improvement","""On April 13th, 2019, OpenAI Five became the first AI system to defeat the world champions at an esports game.""",,,,NVIDIA P100,512.0,,321105.9055,,262131.94609302413,,,,,,Unreleased,Unreleased,,,,True
OpenAI Five,OpenAI,2019-12-13,Games,Dota 2,159000000.0,"""We define a policy (π) as a function from the history of observations to a probability distribution over actions, which we parameterize as a recurrent neural network with approximately 159 million parameters (θ)."" pg. 3 of paper

source: https://docs.google.com/spreadsheets/d/1Kj4Q5WADcDXtUJLIOfGTCE3tGvxNczEMwyy8QtgSkHk/edit#gid=54587040&fvid=1361937389",6.7e+22,"""770±50 PFlops/s·days of compute"" for the model that played against world champions. They did a single training run that took 10 months.

While the model was playing against world champions, they continued training for a few days, so that the resulting model used even more training compute: 820±50 PFlops/s·days.

Finally, they also trained a Rerun model with 150±5 PFlops/s·days of compute.

Source: Dota 2 with Large Scale Deep Reinforcement Learning
https://arxiv.org/abs/1912.06680

You cannot multiply the hardware quantity by training time to get the quantity of GPU-hours! Page 5: "" the number of GPUs (up to 1536 at the peak)""

From this NVIDIA blogpost, it appears they were using P100s:
https://developer.nvidia.com/blog/ai-learns-to-play-dota-2-with-human-precision/#:~:text=AI%20Learns%20to%20Play%20Dota,The%20neural",,454321373184.0,"""Although the Dota 2 engine runs at 30 frames per second, OpenAI Five only acts on every 4th
frame which we call a timestep""
--> 7.5 timesteps/s

""OpenAI Five is a single training run that ran from June 30th, 2018 to April 22nd, 2019. "" --> 296 days

296 * 24*3600 * 7.5 = 1.92e8

This number seems a little low? The DQN paper had 1e7 timesteps. Might be to do with sample efficiency?

EDIT 14/06/2022
Multiple copies of OpenAI Five were trained in parallel, so the total training time is much higher than 296 days.
Table 1 shows 220,000 GPU iterations, each iteration has a batch size of between 1M and 3M timesteps (Table 2), so the total number of episodes is on the order of 2e11",Confident,https://arxiv.org/abs/1912.06680,Dota 2 with Large Scale Deep Reinforcement Learning,1629.0,"Christopher Berner, Greg Brockman, Brooke Chan, Vicki Cheung, Przemysław Dębiak, Christy Dennison, David Farhi, Quirin Fischer, Shariq Hashme, Chris Hesse, Rafal Józefowicz, Scott Gray, Catherine Olsson, Jakub Pachocki, Michael Petrov, Henrique P. d.O. Pinto, Jonathan Raiman, Tim Salimans, Jeremy Schlatter, Jonas Schneider, Szymon Sidor, Ilya Sutskever, Jie Tang, Filip Wolski, Susan Zhang","On April 13th, 2019, OpenAI Five became the first AI system to defeat the world champions at an esports game. The game of Dota 2 presents novel challenges for AI systems such as long time horizons, imperfect information, and complex, continuous state-action spaces, all challenges which will become increasingly central to more capable AI systems. OpenAI Five leveraged existing reinforcement learning techniques, scaled to learn from batches of approximately 2 million frames every 2 seconds. We developed a distributed training system and tools for continual training which allowed us to train OpenAI Five for 10 months. By defeating the Dota 2 world champion (Team OG), OpenAI Five demonstrates that self-play reinforcement learning can achieve superhuman performance on a difficult task.
",Industry,United States of America,"Highly cited,SOTA improvement","""On April 13th, 2019, OpenAI Five became the first AI system to defeat the world champions at an esports game.""",,7104.0,"""OpenAI Five is a single training run that ran from June 30th, 2018 to April 22nd, 2019. "" --> 296 days",NVIDIA P100,1536.0,,4177317.756,"Cannot multiply the hardware quantity by training time to get the quantity of GPU-hours! Page 5: "" the number of GPUs (up to 1536 at the peak)""",786395.8382790724,,,,,,Unreleased,Unreleased,,,,True
MMLSTM,"Beijing University of Posts and Telecommunications,University of West London",2019-12-05,Language,Language modeling,75000000.0,Table VII,2.3175e+18,6 FLOP / token / parameter * 75000000 parameters * 103000000 tokens * 50 epochs [assumption] = 2.3175e+18 FLOP,WikiText-103,103000000.0,,Likely,http://repository.uwl.ac.uk/id/eprint/6490/1/Loo_etal_IEEE_TNNLS_2019_Major-minor_long_short-term_memory_for_word-level_language_model.pdf,Major–Minor Long Short-Term Memory for Word-Level Language Model,17.0,"Kai Shuang, Rui Li, Mengyu Gu, Jonathan Loo, Sen Su","Abstract—Language model plays an important role in natural
language processing (NLP) systems like machine translation,
speech recognition, learning token embeddings, natural language generation and text classification. Recently, the multi-layer Long Short-Term Memory (LSTM) models have been demonstrated to achieve promising performance on word-level language modeling.
For each LSTM layer, larger hidden size usually means more
diverse semantic features, which enables the language model to
perform better. However, we have observed that when a certain
LSTM layer reaches a sufficiently large scale, the promotion
of overall effect will slow down as its hidden size increases. In
this paper, we analyze that an important factor leading to this
phenomenon is the high correlation between the newly extended hidden states and original hidden states, which hinders diverse feature expression of the LSTM. As a result, when the scale is large enough, simply lengthening the LSTM hidden states will cost tremendous extra parameters but has little effect. We propose a simple yet effective improvement on each LSTM layer consisting of a large-scale Major LSTM and a smallscale Minor LSTM to break the high correlation between the two parts of hidden states, which we call Major-Minor LSTMs (MMLSTMs). In experiments, we demonstrate the language model with MMLSTMs surpasses the existing state-of-the-art model on Penn Treebank (PTB) and WikiText-2 (WT2) datasets, and outperforms the baseline by 3.3 points in perplexity on WikiText-103 dataset without increasing model parameter counts.","Academia,Academia","China,United Kingdom of Great Britain and Northern Ireland",SOTA improvement,"""In experiments, we demonstrate the language model with MMLSTMs surpasses the existing state-of-the-art model on Penn Treebank (PTB) and WikiText-2 (WT2) datasets""",50.0,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
StarGAN v2,"NAVER,Yonsei University,Swiss Federal Institute of Technology",2019-12-04,"Vision,Image generation",Image generation,,,,,"CelebA,AFHQ",,,Unknown,https://arxiv.org/abs/1912.01865,StarGAN v2: Diverse Image Synthesis for Multiple Domains,1560.0,"Yunjey Choi, Youngjung Uh, Jaejun Yoo, Jung-Woo Ha","A good image-to-image translation model should learn a mapping between different visual domains while satisfying the following properties: 1) diversity of generated images and 2) scalability over multiple domains. Existing methods address either of the issues, having limited diversity or multiple models for all domains. We propose StarGAN v2, a single framework that tackles both and shows significantly improved results over the baselines. Experiments on CelebA-HQ and a new animal faces dataset (AFHQ) validate our superiority in terms of visual quality, diversity, and scalability. To better assess image-to-image translation models, we release AFHQ, high-quality animal faces with large inter- and intra-domain differences. The code, pretrained models, and dataset can be found at this https URL.","Industry,Academia,Academia","Korea (Republic of),Korea (Republic of),Switzerland","Highly cited,SOTA improvement","""Votes from AMT workers for the most preferred method
regarding visual quality and style reflection (%). StarGAN v2 outperforms the baselines with remarkable margins in all aspects.""",,,,,,,,,,,,,,,Open weights (non-commercial),Open (non-commercial),Open access (non-commercial),https://github.com/clovaai/stargan-v2?tab=readme-ov-file non-commercial,,
Transformer-XL DeFINE (141M),"University of Washington,Allen Institute for AI",2019-11-27,Language,Language modeling,141000000.0,Table 2b,1.74276e+18,"6 FLOP / token / parameter * 141000000 parameters * 103000000 tokens * 20 epochs [assumption based on number of epochs for LSTMs] =  1.74276e+18 FLOP

_______________
older estimation:  6.2 × 10^18 (no explantion how it was calculated)",WikiText-103,103000000.0,,Speculative,https://arxiv.org/abs/1911.12385,DeFINE: DEep Factorized INput Token Embeddings for Neural Sequence Modeling,22.0,"Sachin Mehta, Rik Koncel-Kedziorski, Mohammad Rastegari, Hannaneh Hajishirzi","For sequence models with large vocabularies, a majority of network parameters lie in the input and output layers. In this work, we describe a new method, DeFINE, for learning deep token representations efficiently. Our architecture uses a hierarchical structure with novel skip-connections which allows for the use of low dimensional input and output layers, reducing total parameters and training time while delivering similar or better performance versus existing methods. DeFINE can be incorporated easily in new or existing sequence models. Compared to state-of-the-art methods including adaptive input representations, this technique results in a 6% to 20% drop in perplexity. On WikiText-103, DeFINE reduces the total parameters of Transformer-XL by half with minimal impact on performance. On the Penn Treebank, DeFINE improves AWD-LSTM by 4 points with a 17% reduction in parameters, achieving comparable performance to state-of-the-art methods with fewer parameters. For machine translation, DeFINE improves the efficiency of the Transformer model by about 1.4 times while delivering similar performance.","Academia,Research collective","United States of America,United States of America",SOTA improvement,"""Compared to state-of-the-art methods including adaptive input representations,
this technique results in a 6% to 20% drop in perplexity""",20.0,,,,,,,,,,,,,,Unreleased,Unreleased,,,FP32,
Photo-Geometric Autoencoder,University of Oxford,2019-11-25,"3D modeling,Vision",3D reconstruction,,,,,"CelebA,3DFAW,BFM",,,Unknown,https://arxiv.org/abs/1911.11130,Unsupervised Learning of Probably Symmetric Deformable 3D Objects From Images in the Wild,292.0,"Shangzhe Wu, Christian Rupprecht, Andrea Vedaldi
","We propose a method to learn 3D deformable object categories from raw single-view images, without external supervision. The method is based on an autoencoder that factors each input image into depth, albedo, viewpoint and illumination. In order to disentangle these components without supervision, we use the fact that many object categories have, at least in principle, a symmetric structure. We show that reasoning about illumination allows us to exploit the underlying object symmetry even if the appearance is not symmetric due to shading. Furthermore, we model objects that are probably, but not certainly, symmetric by predicting a symmetry probability map, learned end-to-end with the other components of the model. Our experiments show that this method can recover very accurately the 3D shape of human faces, cat faces and cars from single-view images, without any supervision or a prior shape model. On benchmarks, we demonstrate superior accuracy compared to another method that uses supervision at the level of 2D image correspondences.",Academia,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,"""Our model outperforms a
current state-of-the-art 3D reconstruction method that uses 2D keypoint supervision""",30.0,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,MIT license: https://github.com/elliottwu/unsup3d,,
Transformer - LibriVox + Decoding/Rescoring,Facebook,2019-11-19,Speech,Speech recognition,296000000.0,Table 2,,"""Models are trained on 64 GPUs each with an overall batch size of 256 for ResNet and TDS and 320 for Transformer. With only LIBRISPEECH, all models converged in under a week; with pseudo-labels from LIBRIVOX, training required 2-3 weeks""

GPU not specified","LibriSpeech,LibriVox",,"""the resulting audio corpus contains 53.8K hours of read speech""",Confident,https://arxiv.org/abs/1911.08460v3,End-to-end ASR: from Supervised to Semi-Supervised Learning with Modern Architectures,238.0,"Gabriel Synnaeve, Qiantong Xu, Jacob Kahn, Tatiana Likhomanenko, Edouard Grave, Vineel Pratap, Anuroop Sriram, Vitaliy Liptchinsky, Ronan Collobert","We study pseudo-labeling for the semi-supervised training of ResNet, Time-Depth Separable ConvNets, and Transformers for speech recognition, with either CTC or Seq2Seq loss functions. We perform experiments on the standard LibriSpeech dataset, and leverage additional unlabeled data from LibriVox through pseudo-labeling. We show that while Transformer-based acoustic models have superior performance with the supervised dataset alone, semi-supervision improves all models across architectures and loss functions and bridges much of the performance gaps between them. In doing so, we reach a new state-of-the-art for end-to-end acoustic models decoded with an external language model in the standard supervised learning setting, and a new absolute state-of-the-art with semi-supervised training. Finally, we study the effect of leveraging different amounts of unlabeled audio, propose several ways of evaluating the characteristics of unlabeled audio which improve acoustic modeling, and show that acoustic models trained with more audio rely less on external language models.",Industry,United States of America,SOTA improvement,"""Results with decoding/rescoring are shown in Table 2, where we reach 2.09% and 4.11% on test-clean and test-other , respectively, and are further improvements on the state-of-the-art.""",,,,,,,,,,,,,,,Open weights (unrestricted),,,BSD license: https://github.com/jakeju/wav2letter?tab=License-1-ov-file#readme,,
MuZero,DeepMind,2019-11-19,Games,Atari,36864000.0,"Both the representation and dynamics function use the same architecture asAlphaZero, but with 16 instead of20 residual blocks [15]. We use 3x3 kernels and 256 hidden planes for each convolution.

Previous downsampling:
•  1 convolution with stride 2 and 128 output planes, output resolution 48x48.•  2 residual blocks with 128 planes•  1 convolution with stride 2 and 256 output planes, output resolution 24x24.•  3 residual blocks with 256 planes.•  Average pooling with stride 2, output resolution 12x12.•  3 residual blocks with 256 planes.•  Average pooling with stride 2, output resolution 6x6.",4.8e+19,"third-generation Google Cloud TPU
(For each board game, we used 16 TPUs for training and 1000 TPUs for self-play)
For each game in Atari, we used 8 TPUs for training and 32 TPUs for self-play
Training for 12 hours (for Atari)
Data from Parameter, Compute and Data Trends in Machine Learning
Google v3 TPU: 1.23E+14 FLOP/s (although with the caveat that it might be not applicable)
Utilization rate 
In LaMDA: Language Models for Dialog Applications, they report for TPU V3: 56.5%
Calculations for Atari:
12 hours → 43200 seconds
(8 TPUs for training) * (1.23*10^14 FLOP/s) * (43.2 *10^3 s) * (0.565 utilization rate) = 2.4017472 * 10^19 FLOP
Training time missing for boardgames
Assumption also 12 hours 
Also: 2.4017472 * 10^19 FLOP
Total cost ≈ 4.8 * 10^19 FLOP",,20000000000.0,"Table 1
https://arxiv.org/pdf/1911.08265.pdf",Speculative,https://arxiv.org/abs/1911.08265v2,Mastering Atari Go Chess and Shogi by Planning with a Learned Model,1768.0,"J Schrittwieser, I Antonoglou, T Hubert, K Simonyan","Constructing agents with planning capabilities has long been one of the main challenges in the pursuit of artificial intelligence. Tree-based planning methods have enjoyed huge success in challenging domains, such as chess and Go, where a perfect simulator is available. However, in real-world problems the dynamics governing the environment are often complex and unknown. In this work we present the MuZero algorithm which, by combining a tree-based search with a learned model, achieves superhuman performance in a range of challenging and visually complex domains, without any knowledge of their underlying dynamics. MuZero learns a model that, when applied iteratively, predicts the quantities most directly relevant to planning: the reward, the action-selection policy, and the value function. When evaluated on 57 different Atari games - the canonical video game environment for testing AI techniques, in which model-based planning approaches have historically struggled - our new algorithm achieved a new state of the art. When evaluated on Go, chess and shogi, without any knowledge of the game rules, MuZero matched the superhuman performance of the AlphaZero algorithm that was supplied with the game rules.",Industry,United Kingdom of Great Britain and Northern Ireland,"Highly cited,SOTA improvement",,,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
MoCo,Facebook AI,2019-11-13,"Vision,Image generation",Image completion,375000000.0,https://openai.com/blog/image-gpt/#rfref53,,,"ImageNet,Instagram-1B",,,,https://arxiv.org/abs/1911.05722,Momentum Contrast for Unsupervised Visual Representation Learning,10711.0,"Kaiming He, Haoqi Fan, Yuxin Wu, Saining Xe, Ross Girshick","We present Momentum Contrast (MoCo) for unsupervised visual representation learning. From a perspective on contrastive learning as dictionary look-up, we build a dynamic dictionary with a queue and a moving-averaged encoder. This enables building a large and consistent dictionary on-the-fly that facilitates contrastive unsupervised learning. MoCo provides competitive results under the common linear protocol on ImageNet classification. More importantly, the representations learned by MoCo transfer well to downstream tasks. MoCo can outperform its supervised pre-training counterpart in 7 detection/segmentation tasks on PASCAL VOC, COCO, and other datasets, sometimes surpassing it by large margins. This suggests that the gap between unsupervised and supervised representation learning has been largely closed in many vision tasks.
",Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,Open weights (non-commercial),Open (non-commercial),Open access (non-commercial),"non-commercial. the released models seem to be trained on ImageNet, not Instagram
https://github.com/facebookresearch/moco",,
Noisy Student (L2),"Carnegie Mellon University (CMU),Google",2019-11-11,Vision,Image classification,480000000.0,,2.612e+22,"""Our largest model, EfficientNet-L2, needs to be trained for 6 days on a Cloud TPU v3 Pod, which has 2048 cores, if the unlabeled batch size is 14x the labeled batch size""
TPU v3 gets 1.23e14 FLOP/s per chip, with 2 cores per chip

1024 * 1.23e14 * 6 * 24 * 3600 * 0.4 = 2.612e22","ImageNet,JFT",81000000.0,"""Due to duplications, there are only 81M unique images among these 130M images.""",Confident,https://arxiv.org/abs/1911.04252v4,Self-training with Noisy Student improves ImageNet classification,2217.0,"Q Xie, MT Luong, E Hovy, QV Lee","We present Noisy Student Training, a semi-supervised learning approach that works well even when labeled data is abundant. Noisy Student Training achieves 88.4% top-1 accuracy on ImageNet, which is 2.0% better than the state-of-the-art model that requires 3.5B weakly labeled Instagram images. On robustness test sets, it improves ImageNet-A top-1 accuracy from 61.0% to 83.7%, reduces ImageNet-C mean corruption error from 45.7 to 28.3, and reduces ImageNet-P mean flip rate from 27.8 to 12.2.
Noisy Student Training extends the idea of self-training and distillation with the use of equal-or-larger student models and noise added to the student during learning. On ImageNet, we first train an EfficientNet model on labeled images and use it as a teacher to generate pseudo labels for 300M unlabeled images. We then train a larger EfficientNet as a student model on the combination of labeled and pseudo labeled images. We iterate this process by putting back the student as the teacher. During the learning of the student, we inject noise such as dropout, stochastic depth, and data augmentation via RandAugment to the student so that the student generalizes better than the teacher. Models are available at this https URL. Code is available at this https URL.","Academia,Industry","United States of America,United States of America","Highly cited,SOTA improvement","""Noisy Student Training achieves 88.4% top-1 accuracy on ImageNet, which is 2.0% better than the state-of-the-art model""",,144.0,6 days,Google TPU v3,1024.0,,43900.60644295845,,461681.1110628138,,,,,,Unreleased,Open source,Open source,apache 2.0 license: https://github.com/google-research/noisystudent train script: https://github.com/google-research/noisystudent/blob/master/local_scripts/imagenet/train.sh ,FP32,True
Sandwich Transformer,"Allen Institute for AI,Facebook AI Research",2019-11-10,Language,Language modeling,209000000.0,"209M
""All of our experiments use the same hyperparameters as Baevski and Auli’s original model.""",2.3504093e+19,"6 FLOP / token / parameter * 209000000 parameters * 286000 steps * 65536 tokens per batch [same as Baevski and Auli (2019) = 2.3504093e+19 FLOP

__________

in the Algorithmic progress paper they assumed 180 epochs (same as Baevski and Auli 2019 Transformer, but that one was trained on WT 103 not the book corpus) -> training compute was estimated to be 1.58E+20 FLOP","BookCorpus (BooksCorpus, Toronto Book Corpus)",700000000.0,"""while retaining the other architectural aspects and hyperparameter settings from Baevski and Auli (2019)""

Baevski and Auli (2019): 286k steps in batches of 65,536 tokens.

286000*65536/700000000 = 27 epochs",Speculative,https://arxiv.org/abs/1911.03864,Improving Transformer Models by Reordering their Sublayers,82.0,"Ofir Press, Noah A. Smith, Omer Levy","Multilayer transformer networks consist of interleaved self-attention and feedforward sublayers. Could ordering the sublayers in a different pattern lead to better performance? We generate randomly ordered transformers and train them with the language modeling objective. We observe that some of these models are able to achieve better performance than the interleaved baseline, and that those successful variants tend to have more self-attention at the bottom and more feedforward sublayers at the top. We propose a new transformer pattern that adheres to this property, the sandwich transformer, and show that it improves perplexity on multiple word-level and character-level language modeling benchmarks, at no cost in parameters, memory, or training time. However, the sandwich reordering pattern does not guarantee performance gains across every task, as we demonstrate on machine translation models. Instead, we suggest that further exploration of task-specific sublayer reorderings is needed in order to unlock additional gains.","Research collective,Industry","United States of America,United States of America",SOTA improvement,"""Sandwich transformers achieve state-of-the-art results on the enwik8 character-level language modeling dataset and on an additional word-level corpus,
but have no significant effect on machine translation""",27.0,,,,,,,,,,,,65536.0,,Unreleased,Open (non-commercial),Open access (non-commercial),non-commercial training and inference code: https://github.com/ofirpress/sandwich_transformer,,
CamemBERT,"Facebook,INRIA,Sorbonne University",2019-11-10,Language,Language modeling/generation,335000000.0,"CamemBERT Large, Table 4",8.3e+20,"""Unless otherwise specified, our models use the BASE architecture, and are pretrained for 100k backpropagation steps on 256 Nvidia V100 GPUs (32GB each) for a day""

256 V100-days

256 * 125 teraflops * 24 * 3600 * 0.3 (assumed utilization)
= 8.3e20


""Following (Liu et al., 2019), we optimize the model using Adam (Kingma and Ba, 2014) (β1 = 0.9, β2 = 0.98) for 100k steps with large batch sizes of 8192 sequences, each sequence containing at most 512 tokens""

Using compute = 6*N*D, that's 6 * (100k * 8192 * 512) * 335M= 8.43e20",CCNet,31900000000.0," 31.9B tokens, Table 6.",Confident,https://arxiv.org/abs/1911.03894,CamemBERT: a Tasty French Language Model,990.0,"Louis Martin, Benjamin Muller, Pedro Javier Ortiz Suárez, Yoann Dupont, Laurent Romary, Éric Villemonte de la Clergerie, Djamé Seddah, Benoît Sagot","Pretrained language models are now ubiquitous in Natural Language Processing. Despite their success, most available models have either been trained on English data or on the concatenation of data in multiple languages. This makes practical use of such models --in all languages except English-- very limited. In this paper, we investigate the feasibility of training monolingual Transformer-based language models for other languages, taking French as an example and evaluating our language models on part-of-speech tagging, dependency parsing, named entity recognition and natural language inference tasks. We show that the use of web crawled data is preferable to the use of Wikipedia data. More surprisingly, we show that a relatively small web crawled dataset (4GB) leads to results that are as good as those obtained using larger datasets (130+GB). Our best performing model CamemBERT reaches or improves the state of the art in all four downstream tasks.","Industry,Academia,Academia","United States of America,France,France",SOTA improvement,"""Our best performing model CamemBERT reaches or improves the state of the art in all four downstream tasks."" (part-of-speech tagging, dependency parsing, named entity recognition and natural language inference tasks)",13.0,24.0,1 day for each model (may not have been a full 24 hours),NVIDIA V100,,,2319.5419478533995,,,,,,,,Open weights (unrestricted),Unreleased,,"MIT: 
https://camembert-model.fr/",,
XLM-RoBERTa,Facebook AI,2019-11-05,Language,"Named entity recognition,Question answering,Text classification",550000000.0,"The number of parameters in the model is specified as ""550M params"" for XLM-R.",2.076e+22,"""We use the multilingual MLM loss and train our XLM-R model for
1.5 Million updates on five-hundred 32GB Nvidia
V100 GPUs with a batch size of 8192. ""

6ND:
Sequence length was probably 512, based on follow up paper (XLM-R XXL)
6 * 550e6 * 1.5e6 * 8192 * 512 = 2.076e22
",CC100,125250000000.0,size of CC100 - copied from other rows,Confident,https://arxiv.org/abs/1911.02116,Unsupervised Cross-lingual Representation Learning at Scale,5668.0,"Alexis Conneau, Kartikay Khandelwal, Naman Goyal, Vishrav Chaudhary, Guillaume Wenzek, Francisco Guzmán, Edouard Grave, Myle Ott, Luke Zettlemoyer, Veselin Stoyanov
","This paper shows that pretraining multilingual language models at scale leads to significant performance gains for a wide range of cross-lingual transfer tasks. We train a Transformer-based masked language model on one hundred languages, using more than two terabytes of filtered CommonCrawl data. Our model, dubbed XLM-R, significantly outperforms multilingual BERT (mBERT) on a variety of cross-lingual benchmarks, including +14.6% average accuracy on XNLI, +13% average F1 score on MLQA, and +2.4% F1 score on NER. XLM-R performs particularly well on low-resource languages, improving 15.7% in XNLI accuracy for Swahili and 11.4% for Urdu over previous XLM models. We also present a detailed empirical analysis of the key factors that are required to achieve these gains, including the trade-offs between (1) positive transfer and capacity dilution and (2) the performance of high and low resource languages at scale. Finally, we show, for the first time, the possibility of multilingual modeling without sacrificing per-language performance; XLM-R is very competitive with strong monolingual models on the GLUE and XNLI benchmarks. We will make our code, data and models publicly available.",Industry,United States of America,"Highly cited,SOTA improvement","citation ""which obtains state-of-the-art perfor-
mance on cross-lingual classification, sequence la-
beling and question answering""",,,,NVIDIA Tesla V100 DGXS 32 GB,500.0,,80889.66935,,256204.94677329363,,,,,,Open weights (non-commercial),Open (non-commercial),Open access (non-commercial),"non-commercial: https://github.com/facebookresearch/XLM?tab=License-1-ov-file#readme

data is wikipedia",,True
Base LM + kNN LM + Continuous Cache,"Stanford University,Facebook AI Research",2019-11-01,Language,Language modeling,247000000.00000003,"""we take the exact architecture and optimization described by Baevski & Auli (2019) and use it to create a kNN-LM for inference. This model consists of 16 layers, each with 16 self-attention heads, 1024 dimensional hidden states, and 4096 dimensional feedforward layers, amounting to 247M trainable parameters.""",3.05292e+19,"6 FLOP / parameter / token * 247*10^6 parameters * 103000000 tokens * 200 epochs = 3.05292e+19 FLOP


__________
for the Algorithmic progress paper 7.3 × 10^18 FLOP was estimated similar to supposedly base model (transformer) ",WikiText-103,103000000.0,""" During this forward pass, each target token is provided a minimum of 1536 tokens of prior context for WIKITEXT-103""

200 epochs - figure 8",Likely,https://arxiv.org/abs/1911.00172,Generalization through Memorization: Nearest Neighbor Language Models,721.0,"Urvashi Khandelwal, Omer Levy, Dan Jurafsky, Luke Zettlemoyer, Mike Lewis","We introduce kNN-LMs, which extend a pre-trained neural language model (LM) by linearly interpolating it with a k-nearest neighbors (kNN) model. The nearest neighbors are computed according to distance in the pre-trained LM embedding space, and can be drawn from any text collection, including the original LM training data. Applying this augmentation to a strong Wikitext-103 LM, with neighbors drawn from the original training set, our kNN-LM achieves a new state-of-the-art perplexity of 15.79 - a 2.9 point improvement with no additional training. We also show that this approach has implications for efficiently scaling up to larger training sets and allows for effective domain adaptation, by simply varying the nearest neighbor datastore, again without further training. Qualitatively, the model is particularly helpful in predicting rare patterns, such as factual knowledge. Together, these results strongly suggest that learning similarity between sequences of text is easier than predicting the next word, and that nearest neighbor search is an effective approach for language modeling in the long tail.","Academia,Industry","United States of America,United States of America",SOTA improvement,"""GNN-LM achieves a new state-of-the-art perplexity of 14.8 on WikiText-103""",200.0,,,,,,,,,,,,,,Unreleased,Open source,Open source,"Training code, MIT: https://github.com/urvashik/knnlm",,
AlphaStar,DeepMind,2019-10-30,Games,StarCraft,139000000.0,"AlphaStar has 139 million weights, but only 55 million weights are required during inference.",5.9250000000001e+22,"384 TPUv3 chips for 44 days. Assume 33% utilization.
https://www.wolframalpha.com/input?i=123+teraFLOPS+*+384+*+0.33+*+44+days

""Each agent was trained using 32 third-generation tensor processing units (TPUs23) over 44 days.""

12 agents * 34 chips = 384 chicks
",,,"Multiple data types. First supervised learning, then other stuff",Confident,https://www.deepmind.com/blog/alphastar-grandmaster-level-in-starcraft-ii-using-multi-agent-reinforcement-learning,Grandmaster level in StarCraft II using multi-agent reinforcement learning,3296.0,"Oriol Vinyals,Igor Babuschkin,Wojciech M. Czarnecki,Michaël Mathieu,Andrew Dudzik,Junyoung Chung,David H. Choi,Richard Powell,Timo Ewalds,Petko Georgiev,Junhyuk Oh,Dan Horgan,Manuel Kroiss,Ivo Danihelka,Aja Huang,Laurent Sifre,Trevor Cai,John P. Agapiou,Max Jaderberg,Alexander S. Vezhnevets,Rémi Leblond,Tobias Pohlen,Valentin Dalibard,David Budden,Yury Sulsky,James Molloy,Tom L. Paine,Caglar Gulcehre,Ziyu Wang,Tobias Pfaff,Yuhuai Wu,Roman Ring,Dani Yogatama,Dario Wünsch,Katrina McKinney,Oliver Smith,Tom Schaul,Timothy Lillicrap,Koray Kavukcuoglu,Demis Hassabis,Chris Apps,David Silver","Many real-world applications require artificial agents to compete and coordinate with other agents in complex environments. As a stepping stone to this goal, the domain of StarCraft has emerged as an important challenge for artificial intelligence research, owing to its iconic and enduring status among the most difficult professional esports and its relevance to the real world in terms of its raw complexity and multi-agent challenges. Over the course of a decade and numerous competitions1–3, the strongest agents have simplified important aspects of the game, utilized superhuman capabilities, or employed hand-crafted sub-systems4. Despite these advantages, no previous agent has come close to matching the overall skill of top StarCraft players. We chose to address the challenge of StarCraft using generalpurpose learning methods that are in principle applicable to other complex domains: a multi-agent reinforcement learning algorithm that uses data from both human and agent games within a diverse league of continually adapting strategies and counter-strategies, each represented by deep neural networks5,6. We evaluated our agent, AlphaStar, in the full game of StarCraft II, through a series of online games against human players. AlphaStar was rated at Grandmaster level for all three StarCraft races and above 99.8% of officially ranked human players.",Industry,United Kingdom of Great Britain and Northern Ireland,Highly cited,,,1056.0,"""Each agent was trained using 32 third-generation tensor
processing units (TPUs) over 44 days""",Google TPU v3,384.0,,125758.09814850632,,173176.688897332,,,,,,Unreleased,Open source,Open source,"Apache 2.0, training tools: https://github.com/google-deepmind/alphastar

training instructions here: https://github.com/google-deepmind/alphastar/blob/main/alphastar/unplugged/README.md ",,True
BART-large,Facebook AI,2019-10-29,Language,"Language modeling/generation,Question answering",406291456.0,"""In total, BART contains roughly 10% more parameters than the equivalently sized BERT model.""

I counted the parameters in the huggingface model
https://huggingface.co/facebook/bart-large/tree/main

from transformers import AutoTokenizer, AutoModel
tokenizer = AutoTokenizer.from_pretrained(""facebook/bart-large"")
model = AutoModel.from_pretrained(""facebook/bart-large"")
sum(p.numel() for p in model.parameters() if p.requires_grad)",,,Wikipedia,,,,https://arxiv.org/abs/1910.13461,"BART: Denoising Sequence-to-Sequence Pre-training for Natural Language Generation, Translation, and Comprehension",9464.0,"Mike Lewis, Yinhan Liu, Naman Goyal, Marjan Ghazvininejad, Abdelrahman Mohamed, Omer Levy, Ves Stoyanov, Luke Zettlemoyer","We present BART, a denoising autoencoder for pretraining sequence-to-sequence models. BART is trained by (1) corrupting text with an arbitrary noising function, and (2) learning a model to reconstruct the original text. It uses a standard Tranformer-based neural machine translation architecture which, despite its simplicity, can be seen as generalizing BERT (due to the bidirectional encoder), GPT (with the left-to-right decoder), and many other more recent pretraining schemes. We evaluate a number of noising approaches, finding the best performance by both randomly shuffling the order of the original sentences and using a novel in-filling scheme, where spans of text are replaced with a single mask token. BART is particularly effective when fine tuned for text generation but also works well for comprehension tasks. It matches the performance of RoBERTa with comparable training resources on GLUE and SQuAD, achieves new state-of-the-art results on a range of abstractive dialogue, question answering, and summarization tasks, with gains of up to 6 ROUGE. BART also provides a 1.1 BLEU increase over a back-translation system for machine translation, with only target language pretraining. We also report ablation experiments that replicate other pretraining schemes within the BART framework, to better measure which factors most influence end-task performance.",Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"Models:
https://github.com/facebookresearch/fairseq/blob/main/examples/bart/README.md

MIT license:
https://github.com/facebookresearch/fairseq/blob/main/LICENSE",,
T5-11B,Google,2019-10-23,Language,"Text autocompletion,Language modeling/generation",11000000000.0,The full 11-billion parameter model,3.3e+22,"https://arxiv.org/ftp/arxiv/papers/2104/2104.10350.pdf
Table 4, 4.05e22

update: 3.3e22 per FLAN paper from Google 
https://arxiv.org/pdf/2210.11416.pdf

6ND rule suggests somewhat more FLOPs:
6 * 1T * 11B = 6.6e22",C4,200000000000.0,"""This produces a collection of text that is not only
orders of magnitude larger than most data sets used for pre-training (about 750 GB) but also comprises reasonably clean and natural English text. We dub this data set the “Colossal Clean Crawled Corpus” (or C4 for short) and release it as part of TensorFlow Datasets""

750GB * 200M word/GB * 4/3 tokens per word = 2e11.

Total tokens seen is about 1T:  ""We therefore pre-train our models for 1 million steps on a batch size of 2^11 sequences of length 512, corresponding to a total of about 1 trillion pre-training tokens""",Confident,https://arxiv.org/abs/1910.10683,Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer,16685.0,"Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, Peter J. Liu","Transfer learning, where a model is first pre-trained on a data-rich task before being fine-tuned on a downstream task, has emerged as a powerful technique in natural language processing (NLP). The effectiveness of transfer learning has given rise to a diversity of approaches, methodology, and practice. In this paper, we explore the landscape of transfer learning techniques for NLP by introducing a unified framework that converts all text-based language problems into a text-to-text format. Our systematic study compares pre-training objectives, architectures, unlabeled data sets, transfer approaches, and other factors on dozens of language understanding tasks. By combining the insights from our exploration with scale and our new ``Colossal Clean Crawled Corpus'', we achieve state-of-the-art results on many benchmarks covering summarization, question answering, text classification, and more. To facilitate future work on transfer learning for NLP, we release our data set, pre-trained models, and code.",Industry,United States of America,Highly cited,,,481.9,"4.05*10^22 FLOP at 37.073% utilization on 512 TPU v3 chips (123 TFLOPS) -> 482 hours
https://www.wolframalpha.com/input?i=4.05*10%5E22+seconds+%2F+%28512*123*10%5E12%29+*%28123%2F45.6%29",Google TPU v3,512.0,0.3707,75524.39074218823,,230938.24900457988,,,,65536.0,"""We use a maximum sequence length of 512 and a batch size of 128 sequences. Whenever possible, we “pack” multiple sequences into each entry of the batch10 so that our batches contain roughly 2^16 = 65,536 tokens""",Open weights (unrestricted),Open source,Open source,"Apache for code and weights:
https://github.com/google-research/text-to-text-transfer-transformer

Data is C4 which is open",,True
T5-3B,Google,2019-10-23,Language,Text autocompletion,2800000000.0,"page 37, 3B and 11B. ""To further explore what kind of performance is possible when using larger models, we consider two additional variants. In both cases, we use d_model = 1024, a 24 layer encoder and decoder, and dkv = 128. For the “3B” variant, we use dff = 16,384 with 32-headed attention, which results in around 2.8 billion parameters; for “11B” we use dff = 65,536 with 128-headed attention producing a model with about 11 billion parameters""",9.0000000001e+21,"Akronomicon states 1.04e+22 FLOP. Archived source: https://github.com/lightonai/akronomicon/tree/main/akrodb
However, this seems dubiously high.

""We pre-train each model for 2^19 = 524,288 steps on C4 before fine-tuning.""
""In total, this batch size and number of steps corresponds to pre-training on 2^35 ≈ 34B tokens.""
""To compare these mixing strategies on equal footing with our baseline pre-train-then-fine-tune results, we train multi-task models for the same total number of steps: 2^19 + 2^18 = 786,432""
Using the 6DN approximation gives: 6 FLOP/token/param * 2^35 pretrain tokens * (1+1/2 finetune tokens per pretrain token) * 1 iteration of training data* 2.8 billion parameters = 8.659e20 FLOP
https://www.wolframalpha.com/input?i=6+*+2%5E35+*+2.8+billion+*+1.5

update: 9.0E+21 per FLAN paper from Google 
https://arxiv.org/pdf/2210.11416.pdf",C4,25500000000.0,"""This produces a collection of text that is not only orders of magnitude larger than most data sets used for pre-training (about 750 GB) but also
comprises reasonably clean and natural English text. We dub this data set the “Colossal Clean Crawled Corpus” (or C4 for short) and release it as part of TensorFlow Datasets""
750GB * 200M word/GB = 1.5e11

""In total, this batch size and number of steps corresponds to pre-training on 2^35 ≈ 34B tokens.""
""Note that 2^35 tokens only covers a fraction of the entire C4 data set, so we never repeat any data during pre-training.""
The fraction is 25.5 billion / 150 billion = 0.17 epochs.",Confident,https://arxiv.org/abs/1910.10683,Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer,16685.0,"Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, Peter J. Liu","Transfer learning, where a model is first pre-trained on a data-rich task before being fine-tuned on a downstream task, has emerged as a powerful technique in natural language processing (NLP). The effectiveness of transfer learning has given rise to a diversity of approaches, methodology, and practice. In this paper, we explore the landscape of transfer learning techniques for NLP by introducing a unified framework that converts all text-based language problems into a text-to-text format. Our systematic study compares pre-training objectives, architectures, unlabeled data sets, transfer approaches, and other factors on dozens of language understanding tasks. By combining the insights from our exploration with scale and our new ``Colossal Clean Crawled Corpus'', we achieve state-of-the-art results on many benchmarks covering summarization, question answering, text classification, and more. To facilitate future work on transfer learning for NLP, we release our data set, pre-trained models, and code.",Industry,United States of America,Highly cited,,0.17,,,Google TPU v3,,,16182.2859,,,,,,,,Open weights (unrestricted),Open source,Open source,"Apache for code and weights:
https://github.com/google-research/text-to-text-transfer-transformer

Data is C4 which is open
training script: https://github.com/google-research/text-to-text-transfer-transformer?tab=readme-ov-file#training ",,True
M4-50B,Google,2019-10-11,Language,Translation,50000000000.0,"(sparse architecture)

""By modifying the Transformer architecture through the substitution of the vanilla feed-forward layers with sparsely-gated mixture of experts, we drastically scale up the model capacity, allowing us to successfully train and pass 50 billion parameters, which further improved translation quality across the board.""",,"Sparse architecture, so training compute is uncertain",,,25+ billion sentence pairs,Confident,https://blog.research.google/2019/10/exploring-massively-multilingual.html,"Exploring Massively Multilingual, Massive Neural Machine Translation",,"Ankur Bapna, Orhan Firat","Over the last few years there has been enormous progress in the quality of machine translation (MT) systems, breaking language barriers around the world thanks to the developments in neural machine translation (NMT). The success of NMT however, owes largely to the great amounts of supervised training data. But what about languages where data is scarce, or even absent? Multilingual NMT, with the inductive bias that “the learning signal from one language should benefit the quality of translation to other languages”, is a potential remedy.",Industry,United States of America,SOTA improvement,,,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
DistilBERT,Hugging Face,2019-10-02,Language,Text autocompletion,66000000.0,Table 3,1.24416e+19,"Section 3: DistilBERT was trained on 8 16GB V100 GPUs for approximately 90 hours.

1.6e13*8*60**2*90*0.3 = 1.2e19","Wikipedia,BookCorpus (BooksCorpus, Toronto Book Corpus)",,,Confident,https://arxiv.org/abs/1910.01108,"DistilBERT, a distilled version of BERT: smaller, faster, cheaper and lighter",6345.0,"Victor Sanh, Lysandre Debut, Julien Chaumond, Thomas Wolf",,Industry,"Multinational,United States of America",Highly cited,,,,,NVIDIA Tesla V100 DGXS 16 GB,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"code, including train: https://github.com/huggingface/transformers/tree/main/examples/research_projects/distillation

weights: https://huggingface.co/distilbert/distilbert-base-uncased

repo license is apache: https://github.com/huggingface/transformers/blob/main/LICENSE

Wikipedia is open, BookCorpus is not",,
AlphaX-1,"Facebook AI Research,Brown University",2019-10-02,Vision,"Neural architecture search for computer vision,Image classification,Object detection,Image captioning",5400000.0,"Table 3: multiadds for AlphaX-1 579M, parameters 5.4M",8.89344e+17,""" Our models for ImageNet use polynomial learning rate
schedule, starting with 0.05 and decay through 200 epochs.""

1280000 images * 200 epochs *3 forward-backward adjustment * 1158000000 forward FLOP =889344000000000000","ImageNet,COCO",1280000.0,"Standard image net training size, not otherwise specified",Confident,https://arxiv.org/abs/1903.11059,AlphaX: eXploring Neural Architectures with Deep Neural Networks and Monte Carlo Tree Search,92.0,"Linnan Wang, Yiyang Zhao, Yuu Jinnai, Yuandong Tian, Rodrigo Fonseca1","Neural Architecture Search (NAS) has shown great success in automating the design of neural networks, but the prohibitive amount of computations behind current NAS methods requires further investigations in improving the sample efficiency and the network evaluation cost to get better results in a shorter time. In this paper, we present a novel scalable Monte Carlo Tree Search (MCTS) based NAS agent, named AlphaX, to tackle these two aspects. AlphaX improves the search efficiency by adaptively balancing the exploration and exploitation at the state level, and by a Meta-Deep Neural Network (DNN) to predict network accuracies for biasing the search toward a promising region. To amortize the network evaluation cost, AlphaX accelerates MCTS rollouts with a distributed design and reduces the number of epochs in evaluating a network by transfer learning guided with the tree structure in MCTS. In 12 GPU days and 1000 samples, AlphaX found an architecture that reaches 97.84\% top-1 accuracy on CIFAR-10, and 75.5\% top-1 accuracy on ImageNet, exceeding SOTA NAS methods in both the accuracy and sampling efficiency. Particularly, we also evaluate AlphaX on NASBench-101, a large scale NAS dataset; AlphaX is 3x and 2.8x more sample efficient than Random Search and Regularized Evolution in finding the global optimum. Finally, we show the searched architecture improves a variety of vision applications from Neural Style Transfer, to Image Captioning and Object Detection.","Industry,Academia","United States of America,United States of America",SOTA improvement,"""In 12 GPU days and 1000 samples, AlphaX found an architecture that reaches 97.84\% top-1 accuracy on CIFAR-10, and 75.5\% top-1 accuracy on ImageNet, exceeding SOTA NAS methods in both the accuracy and sampling efficiency""",,,,NVIDIA GeForce GTX 1080 Ti,,,,,,,,,,,Unreleased,Open (non-commercial),Open access (non-commercial),"code, no license specified: https://github.com/linnanwang/AlphaX-NASBench101
training: https://github.com/linnanwang/AlphaX-NASBench101/blob/master/net_training.py ",,
ALBERT,"Toyota Technological Institute at Chicago,Google Research",2019-09-26,Language,"Language modeling/generation,Question answering",18000000.0,Section 3.2 of paper,,,"BookCorpus (BooksCorpus, Toronto Book Corpus),Wikipedia",3300000000.0,"Pretraining same as for BERT - Wikipedia and BookCorpus

""For the pre-training corpus we
use the BooksCorpus (800M words) (Zhu et al., 2015) and English Wikipedia (2,500M words)""",,https://arxiv.org/abs/1909.11942,ALBERT: A Lite BERT for Self-supervised Learning of Language Representations,5901.0,"Z Lan, M Chen, S Goodman, K Gimpel","Increasing model size when pretraining natural language representations often results in improved performance on downstream tasks. However, at some point further model increases become harder due to GPU/TPU memory limitations and longer training times. To address these problems, we present two parameter-reduction techniques to lower memory consumption and increase the training speed of BERT. Comprehensive empirical evidence shows that our proposed methods lead to models that scale much better compared to the original BERT. We also use a self-supervised loss that focuses on modeling inter-sentence coherence, and show it consistently helps downstream tasks with multi-sentence inputs. As a result, our best model establishes new state-of-the-art results on the GLUE, RACE, and \squad benchmarks while having fewer parameters compared to BERT-large. The code and the pretrained models are available at this https URL.","Academia,Industry","United States of America,Multinational,United States of America,Canada,Switzerland",Highly cited,,79.4,,,Google TPU v3,,,,,,,,,2097152.0,,Open weights (unrestricted),Open source,Open source,Apache 2.0: https://github.com/google-research/ALBERT,,
Adaptive Inputs + LayerDrop,"Facebook AI Research,LORIA",2019-09-25,Language,"Language modeling/generation,Translation,Question answering,Text summarization",423000000.00000006,,,,WikiText-103,,,,https://arxiv.org/abs/1909.11556,Reducing Transformer Depth on Demand with Structured Dropout,547.0,"Angela Fan, Edouard Grave, Armand Joulin","Overparameterized transformer networks have obtained state of the art results in various natural language processing tasks, such as machine translation, language modeling, and question answering. These models contain hundreds of millions of parameters, necessitating a large amount of computation and making them prone to overfitting. In this work, we explore LayerDrop, a form of structured dropout, which has a regularization effect during training and allows for efficient pruning at inference time. In particular, we show that it is possible to select sub-networks of any depth from one large network without having to finetune them and with limited impact on performance. We demonstrate the effectiveness of our approach by improving the state of the art on machine translation, language modeling, summarization, question answering, and language understanding benchmarks. Moreover, we show that our approach leads to small BERT-like models of higher quality compared to training from scratch or using distillation.","Industry,Academia","United States of America,France",SOTA improvement,"""In neural machine translation on newstest2014, our 12 encoder layer Transformer model with LayerDrop further improves the state of the art, reaching 30.2 BLEU""",,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"https://github.com/facebookresearch/fairseq/blob/main/examples/layerdrop/README.md
Repo has MIT license
WT training: https://github.com/facebookresearch/fairseq/tree/main/examples/language_model ",,
Megatron-LM (8.3B),NVIDIA,2019-09-17,Language,Language modeling/generation,8300000000.0,"Source: https://lair.lighton.ai/akronomicon/

Archived source: https://web.archive.org/web/20211220142906/https://lair.lighton.ai/akronomicon/

Data also available on GitHub: https://github.com/lightonai/akronomicon/blob/main/akrodb/NVIDIA/Megatron-LM.json",9.1e+21,"source: https://lair.lighton.ai/akronomicon/

archived: https://github.com/lightonai/akronomicon/tree/main/akrodb

other estimates:

8.3B is a GPT-2-based model (Table 2). ""For GPT-2 models, all training is performed with sequences of 1024 subword units at a batch size of 512 for 300k iterations"" 

I interpret the above as 1024*512*300k = 157B training tokens 

6 * 157 billion * 8.3 billion  = 7.8e21

Also, their training setup achieved 15.1 petaFLOPS or 1.5e16 FLOPS.
(512 V100s is 512 * 125 teraflops = 64 petaFLOPS so they had ~25% utilization)
2.1 days per epoch, ~4.4 epochs
2.1 * 4.4 * 24 * 3600 * 1.5e16 = 1.197e22

These are both close to the akronomicon estimate

Authors of ""AI and Memory Wall"" (https://github.com/amirgholami/ai_and_memory_wall) estimated model's training compute as 8,100,000 PFLOP = 8.1*10^21 FLOP",,34800000000.0,"""The resulting aggregate
corpus contains 174 GB of deduplicated text.""",Likely,https://arxiv.org/abs/1909.08053,Megatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism,1501.0,"Mohammad Shoeybi, Mostofa Patwary, Raul Puri, Patrick LeGresley, Jared Casper, Bryan Catanzaro","Recent work in language modeling demonstrates that training large transformer models advances the state of the art in Natural Language Processing applications. However, very large models can be quite difficult to train due to memory constraints. In this work, we present our techniques for training very large transformer models and implement a simple, efficient intra-layer model parallel approach that enables training transformer models with billions of parameters. Our approach does not require a new compiler or library changes, is orthogonal and complimentary to pipeline model parallelism, and can be fully implemented with the insertion of a few communication operations in native PyTorch. We illustrate this approach by converging transformer based models up to 8.3 billion parameters using 512 GPUs. We sustain 15.1 PetaFLOPs across the entire application with 76% scaling efficiency when compared to a strong single GPU baseline that sustains 39 TeraFLOPs, which is 30% of peak FLOPs. To demonstrate that large language models can further advance the state of the art (SOTA), we train an 8.3 billion parameter transformer language model similar to GPT-2 and a 3.9 billion parameter model similar to BERT. We show that careful attention to the placement of layer normalization in BERT-like models is critical to achieving increased performance as the model size grows. Using the GPT-2 model we achieve SOTA results on the WikiText103 (10.8 compared to SOTA perplexity of 15.8) and LAMBADA (66.5% compared to SOTA accuracy of 63.2%) datasets. Our BERT model achieves SOTA results on the RACE dataset (90.9% compared to SOTA accuracy of 89.4%).",Industry,United States of America,"Highly cited,SOTA improvement","""Using the GPT-2 model we achieve SOTA results on the WikiText103 (10.8 compared to SOTA perplexity of 15.8) and LAMBADA"" 

GPT-2 model here meaning model similar to GPT-2",4.4,327.0,"Reported throughput is 15.1 teraFLOPS per GPU on 512 GPUs
Assume total compute is 9.1e21 FLOP.
Then training time is 327 hours.
https://www.wolframalpha.com/input?i=9.1*10%5E21+FLOP+%2F+%28512*15.1+teraFLOPS%29",NVIDIA Tesla V100 DGXS 32 GB,512.0,0.2269,113502.8196,"327 hours * 512 GPUs * $0.55/V100 GPU-hour = $92,083
Convert to 2020 dollars: $78,689",262640.30207328824,,,,,,Unreleased,Open source,Unreleased,"code (2.5B model is a GPT model): https://github.com/NVIDIA/Megatron-LM?tab=readme-ov-file#megatron-overview  
open license: https://github.com/NVIDIA/Megatron-LM?tab=License-1-ov-file#readme ",FP16,True
Megatron-BERT,NVIDIA,2019-09-17,Language,Language modeling/generation,3900000000.0,"2.1Source: https://lair.lighton.ai/akronomicon/

Archive on GitHub: https://github.com/lightonai/akronomicon/tree/main/akrodb",2.2e+22,"A third-party source: https://lair.lighton.ai/akronomicon/ claims 5.7e22

The authors report experimenting on 1 V100 GPU and achieving throughput of 39 TFLOPS which is 30% of the peak throughput. Therefore the GPU has a peak throughput of 130 TFLOPS so it is specifically the NVIDIA V100S PCIe.
https://images.nvidia.com/content/technologies/volta/pdf/volta-v100-datasheet-update-us-1165301-r5.pdf

Param-based calculation:
6ND = 6*3.9e9*(2e6+1e4)*1024*512 = 2.5e22 FLOP

1024 is the batch size, 512 is the sequence length (not explicitly stated but they say non-specified hyperparameters follow cited papers).

Time-based calculation:
The 8.3B GPT-like arch took 2.1 days per epoch on 512 GPUs, batch size 512. An epoch was 68.5k iterations with sequence length 1024.

Halving the model size should ~halve the iteration time.
Doubling the batch size should ~double the iteration time.
Halving the sequence length should ~quarter the iteration time (quadratic scaling).

Hence 3.1e-5 days/iteration * 2 * 1/2 * 1/4 = 7.8e-6 days/iteration.

2e6 iterations => seems like 15.6 days training.

On 512 GPUs they achieve a peak throughput of 15.1 PFLOPS.
C=15.1 PFLOPS * 58 days = 2.0e22 FLOP.

If we disregard the Akronomicon estimate and aggregate our two, geometric mean is 2.2e22 FLOP",,46400000000.0,"""The resulting aggregate corpus contains 174 GB of deduplicated text.""
174e9 bytes * (1 word / 5 bytes) * (4 tokens / 3 words) = 4.64e10 tokens",Confident,https://arxiv.org/abs/1909.08053,Megatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism,1501.0,"Mohammad Shoeybi, Mostofa Patwary, Raul Puri, Patrick LeGresley, Jared Casper, Bryan Catanzaro","Recent work in language modeling demonstrates that training large transformer models advances the state of the art in Natural Language Processing applications. However, very large models can be quite difficult to train due to memory constraints. In this work, we present our techniques for training very large transformer models and implement a simple, efficient intra-layer model parallel approach that enables training transformer models with billions of parameters. Our approach does not require a new compiler or library changes, is orthogonal and complimentary to pipeline model parallelism, and can be fully implemented with the insertion of a few communication operations in native PyTorch. We illustrate this approach by converging transformer based models up to 8.3 billion parameters using 512 GPUs. We sustain 15.1 PetaFLOPs across the entire application with 76% scaling efficiency when compared to a strong single GPU baseline that sustains 39 TeraFLOPs, which is 30% of peak FLOPs. To demonstrate that large language models can further advance the state of the art (SOTA), we train an 8.3 billion parameter transformer language model similar to GPT-2 and a 3.9 billion parameter model similar to BERT. We show that careful attention to the placement of layer normalization in BERT-like models is critical to achieving increased performance as the model size grows. Using the GPT-2 model we achieve SOTA results on the WikiText103 (10.8 compared to SOTA perplexity of 15.8) and LAMBADA (66.5% compared to SOTA accuracy of 63.2%) datasets. Our BERT model achieves SOTA results on the RACE dataset (90.9% compared to SOTA accuracy of 89.4%).",Industry,United States of America,"Highly cited,SOTA improvement","""Our BERT model achieves SOTA results on the RACE dataset""",,374.0,"The 8.3B GPT-like arch took 2.1 days per epoch on 512 GPUs, batch size 512, sequence length 1024. An epoch was 68.5k iterations.

BERT: batch size 1024, sequence length 512, 2e6 iterations total.

Halving the model size should ~halve the iteration time.
Doubling the batch size should ~double the iteration time.
Halving the sequence length should ~quarter the iteration time (quadratic scaling).

Hence 3.1e-5 days/iteration * 2 * 1/2 * 1/4 = 7.8e-6 days/iteration.

2e6 iterations => seems like 15.6 days training.",NVIDIA Tesla V100S PCIe 32 GB,512.0,0.2269,178608.4119,,262640.30207328824,,,,524288.0,"""we set the batch size to 1024 and use a learning rate of 1.0e4 warmed up over 10,000 iterations and decayed linearly
over 2 million iterations. Other training parameters are kept
the same as (Devlin et al., 2018).""

in Devlin et al (BERT), sequences are 512 tokens",Unreleased,Open source,Unreleased,"training code 

https://github.com/NVIDIA/Megatron-LM/blob/main/pretrain_bert.py 

MIT-like license:
https://github.com/NVIDIA/Megatron-LM/blob/main/LICENSE ",FP16,True
UDSMProt,Fraunhofer Heinrich Hertz Institute,2019-09-04,Biology,"Proteins,Protein or nucleotide language model (pLM/nLM)",28303800.0,"Python code:  
# Given LSTM parameters
emb_sz = 400  # embedding size, typically equal to the input size for the first layer
nh = 1150     # number of hidden units
nl = 3        # number of layers

# The formula for a single LSTM layer parameters is:
# P = 4 * ((input_dim + hidden_dim) * hidden_dim + hidden_dim)

# First layer parameters (input_dim is the embedding size)
first_layer_params = 4 * ((emb_sz + nh) * nh + nh)

# For subsequent layers, input_dim is equal to hidden_dim (nh)
subsequent_layer_params = 4 * ((nh + nh) * nh + nh)

# Total parameters for all layers
total_params = first_layer_params + (nl - 1) * subsequent_layer_params

print(total_params)",6.37e+17,"Pretraining:
Table 7 gives max of 499k sequences each at (seemingly) L=1024:
499k * 1024 * 28.3M * 6 = 8.7e16

Finetuning:
Largest downstream task has 104940 sequences (Table 5), each sequence has L=1024 residues, 28.3M parameters, and 30 epochs.
105k * 1024 * 30 * 28.3 * 6 = 5.5e17.","SwissProt,a subset of UniProtKB",,560K proteins,Likely,https://www.biorxiv.org/content/10.1101/704874v2.full.pdf,UDSMProt: Universal Deep Sequence Models for Protein Classification,,"Nils Strodthoff, Patrick Wagner, Markus Wenzel, and Wojciech Samek","Motivation: Inferring the properties of a protein from its amino acid sequence is one of the key problems in bioinformatics. Most state-of-the-art approaches for protein classification tasks are tailored to single classi- fication tasks and rely on handcrafted features such as position-specific-scoring matrices from expensive database searches. We argue that this level of performance can be reached or even be surpassed by learning a task-agnostic representation once, using self-supervised language modeling, and transferring it to specific tasks by a simple finetuning step.
Results: We put forward a universal deep sequence model that is pretrained on unlabeled protein se- quences from Swiss-Prot and finetuned on protein classification tasks. We apply it to three prototypical tasks, namely enzyme class prediction, gene ontology prediction and remote homology and fold detection. The proposed method performs on par with state-of-the-art algorithms that were tailored to these specific tasks or, for two out of three tasks, even outperforms them. These results stress the possibility of inferring protein properties from the sequence alone and, on more general grounds, the prospects of modern natural language processing methods in omics.",Research collective,Germany,SOTA improvement,"""The proposed method performs on par with state-of-the-art algorithms that were tailored to these specific tasks or, for two out of three tasks, even outperforms them.""",30.0,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"BSD license, models and code
https://github.com/nstrodt/UDSMProt ",,
"Mogrifier (d2, MoS2, MC) + dynamic eval","DeepMind,University of Oxford",2019-09-04,Language,Language modeling,35000000.0,,,,WikiText-2,,,,https://arxiv.org/abs/1909.01792,Mogrifier LSTM,109.0,"Gábor Melis, Tomáš Kočiský, Phil Blunsom","Many advances in Natural Language Processing have been based upon more expressive models for how inputs interact with the context in which they occur. Recurrent networks, which have enjoyed a modicum of success, still lack the generalization and systematicity ultimately required for modelling language. In this work, we propose an extension to the venerable Long Short-Term Memory in the form of mutual gating of the current input and the previous output. This mechanism affords the modelling of a richer space of interactions between inputs and their context. Equivalently, our model can be viewed as making the transition function given by the LSTM context-dependent. Experiments demonstrate markedly improved generalization on language modelling in the range of 3-4 perplexity points on Penn Treebank and Wikitext-2, and 0.01-0.05 bpc on four character-based datasets. We establish a new state of the art on all datasets with the exception of Enwik8, where we close a large gap between the LSTM and Transformer models.","Industry,Academia","United Kingdom of Great Britain and Northern Ireland,United Kingdom of Great Britain and Northern Ireland",SOTA improvement,"""We establish a new state of the art on all datasets with the exception of Enwik8""",145.0,,,,,,,,,,,,,,Unreleased,Unreleased,,Github has dead link: https://github.com/google-deepmind/lamb/blob/master/experiment/mogrifier/README.md,,
EN^2AS with performance reward,"Beijing Institute of Technology,University of Technology Sydney,Monash University",2019-07-22,Language,"Neural Architecture Search - NAS,Language modeling",23000000.0,,,,,,,,https://arxiv.org/abs/1907.09109,Efficient Novelty-Driven Neural Architecture Search,1.0,"Miao Zhang, Huiqi Li, Shirui Pan, Taoping Liu, Steven Su","One-Shot Neural architecture search (NAS) attracts broad attention recently due to its capacity to reduce the computational hours through weight sharing. However, extensive experiments on several recent works show that there is no positive correlation between the validation accuracy with inherited weights from the supernet and the test accuracy after re-training for One-Shot NAS. Different from devising a controller to find the best performing architecture with inherited weights, this paper focuses on how to sample architectures to train the supernet to make it more predictive. A single-path supernet is adopted, where only a small part of weights are optimized in each step, to reduce the memory demand greatly. Furthermore, we abandon devising complicated reward based architecture sampling controller, and sample architectures to train supernet based on novelty search. An efficient novelty search method for NAS is devised in this paper, and extensive experiments demonstrate the effectiveness and efficiency of our novelty search based architecture sampling method. The best architecture obtained by our algorithm with the same search space achieves the state-of-the-art test error rate of 2.51\% on CIFAR-10 with only 7.5 hours search time in a single GPU, and a validation perplexity of 60.02 and a test perplexity of 57.36 on PTB. We also transfer these search cell structures to larger datasets ImageNet and WikiText-2, respectively.","Academia,Academia,Academia","China,Australia,Australia",SOTA improvement,"""The best architecture obtained by our algorithm with
the same search space achieves the state-of-the-art test error rate of 2.51% on CIFAR-10""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
Pluribus,Facebook AI Research,2019-07-11,Games,Poker,,,6.6e+16,"Trained in 8 days on a 64 core CPU
https://ai.facebook.com/blog/pluribus-first-ai-to-beat-pros-in-6-player-poker/

""We trained the blueprint strategy for Pluribus in eight days on a 64-core server and required less than 512 GB of RAM. No GPUs were used. At typical cloud computing instance rates, it would cost less than $150 to train.""

Guess: trained on i7 Intel CPU, approx 5e9 FLOP/s for each core.

 https://epoch.ai/blog/estimating-training-compute
8 days, 64 cores, 5e9 FLOP/s, 30% utilization",,,,Likely,https://www.science.org/cms/asset/910714a7-ee2a-486e-9970-42fb893b08d9/pap.pdf,Superhuman AI for multiplayer poker,651.0,"Noam Brown, Tuomas Sandholm",,Industry,United States of America,SOTA improvement,"first to beat humans at multiplayer poker: ""Developing a superhuman AI for multiplayer poker was the widely,recognized main remaining milestone. In this paper we describe Pluribus, an AI capable of defeating elite human professionals in six-player no-limit Texas hold’em poker, the most commonly played poker format in the world.""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
BigBiGAN,Google,2019-07-04,"Vision,Image generation",Image completion,86000000.0,https://openai.com/blog/image-gpt/#rfref53,,,ImageNet,,,,https://arxiv.org/abs/1907.02544,Large Scale Adversarial Representation Learning,525.0,"Jeff Donahue, Karen Simonyan","Adversarially trained generative models (GANs) have recently achieved compelling image synthesis results. But despite early successes in using GANs for unsupervised representation learning, they have since been superseded by approaches based on self-supervision. In this work we show that progress in image generation quality translates to substantially improved representation learning performance. Our approach, BigBiGAN, builds upon the state-of-the-art BigGAN model, extending it to representation learning by adding an encoder and modifying the discriminator. We extensively evaluate the representation learning and generation capabilities of these BigBiGAN models, demonstrating that these generation-based models achieve the state of the art in unsupervised representation learning on ImageNet, as well as in unconditional image generation. Pretrained BigBiGAN models -- including image generators and encoders -- are available on TensorFlow Hub (this https URL).",Industry,United States of America,SOTA improvement,"""BigBiGAN, an unsupervised learning approach based purely on generative models, achieves state-of-the-art results in image representation learning on ImageNet""",,,,,,,,,,,,,,,Open weights (unrestricted),Unreleased,,"model (Apache 2.0 license): https://www.kaggle.com/models/deepmind/bigbigan

they share a notebook but with a broken link",,
RoBERTa Large,"Facebook,University of Washington",2019-07-01,Language,"Question answering,Language modeling/generation",355000000.0,"355M 
https://github.com/facebookresearch/fairseq/blob/main/examples/roberta/README.md",8.5067e+21,"Section 5: We pretrain our model using 1024 V100 GPUs for approximately one day.

Note this is the base pretraining comparable to BERT, 100k steps. Subsequently they do more: ""increasing the number of pretraining steps
from 100K to 300K, and then further to 500K"".

So assume 5x the 1024 V100 GPUs for 1d estimate. Mixed precision tensor cores get 1.25e14 FLOP/s.

1024 * 1.25e14 * 5 * 24 * 3600 * 0.3 = 1.65888e22

6ND estimate: batches are 8k sequences of 512 tokens; 500k updates means the model saw 500k * 8k * 512 = 2.048T tokens
6 * 2.048T * 355M = 4.36224e21

geometric mean: sqrt(1.65888e22 * 4.36224e21) = 8.5067e21

Authors of ""AI and Memory Wall"" estimated model's training compute as 4,300,000 PFLOP = 4.3*10^21 FLOP
(https://github.com/amirgholami/ai_and_memory_wall)","CC-News,BookCorpus (BooksCorpus, Toronto Book Corpus),WebText2,Wikipedia",32000000000.0,"160GB*200M words/GB * (4 tokens / 3 words) = 3.2e10 tokens

max steps 500k
batch size  8k
""We pretrain with sequences of at most T = 512 tokens.""

500000*8000*512 = 2.048e+12 tokens",Confident,https://arxiv.org/abs/1907.11692,RoBERTa: A Robustly Optimized BERT Pretraining Approach,21512.0,"Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke Zettlemoyer, Veselin Stoyanov","Language model pretraining has led to significant performance gains but careful comparison between different approaches is challenging. Training is computationally expensive, often done on private datasets of different sizes, and, as we will show, hyperparameter choices have significant impact on the final results. We present a replication study of BERT pretraining (Devlin et al., 2019) that carefully measures the impact of many key hyperparameters and training data size. We find that BERT was significantly undertrained, and can match or exceed the performance of every model published after it. Our best model achieves state-of-the-art results on GLUE, RACE and SQuAD. These results highlight the importance of previously overlooked design choices, and raise questions about the source of recently reported improvements. We release our models and code.","Industry,Academia","United States of America,United States of America",Highly cited,,,120.0,"First the model is pretrained for 100k steps on 1024 GPUs for 1 day, then pretraining is increased to 500k steps, so assuming they used the same number of GPUs, this would have taken 5 days.",NVIDIA Tesla V100 DGXS 32 GB,1024.0,,88691.29948,,526193.8152119832,,,,,,Open weights (unrestricted),Open source,Open source,"code and weights: https://github.com/facebookresearch/fairseq/blob/main/examples/roberta/README.md
pretrain code: https://github.com/facebookresearch/fairseq/blob/main/examples/roberta/README.pretraining.md 

repo is MIT license

",FP16,True
Tensorized Transformer (257M),"Tianjin University,Microsoft Research Asia,Beijing Institute of Technology",2019-06-24,Language,Language modeling/generation,257000000.0,257M (Table 5) ,4.76e+18,"6 FLOP / parameter / token * 257000000 parameters * 103000000 tokens * 30 epochs = 4.76478e+18 FLOP
",WikiText-103,103000000.0,,Confident,https://arxiv.org/abs/1906.09777,A Tensorized Transformer for Language Modeling,154.0,"Xindian Ma, Peng Zhang, Shuai Zhang, Nan Duan, Yuexian Hou, Ming Zhou, Dawei Song","Latest development of neural models has connected the encoder and decoder through a self-attention mechanism. In particular, Transformer, which is solely based on self-attention, has led to breakthroughs in Natural Language Processing (NLP) tasks. However, the multi-head attention mechanism, as a key component of Transformer, limits the effective deployment of the model to a resource-limited setting. In this paper, based on the ideas of tensor decomposition and parameters sharing, we propose a novel self-attention model (namely Multi-linear attention) with Block-Term Tensor Decomposition (BTD). We test and verify the proposed attention method on three language modeling tasks (i.e., PTB, WikiText-103 and One-billion) and a neural machine translation task (i.e., WMT-2016 English-German). Multi-linear attention can not only largely compress the model parameters but also obtain performance improvements, compared with a number of language modeling approaches, such as Transformer, Transformer-XL, and Transformer with tensor train decomposition.","Academia,Industry,Academia","China,China,China",SOTA improvement,"""Table 2: Results and compression with state-of-the-art results on PTB and WikiText-103""",30.0,,,NVIDIA P40,2.0,,,,1027.8825149290835,,,,,,Unreleased,Open (non-commercial),Open access (non-commercial),"code, no license: https://github.com/szhangtju/The-compression-of-Transformer",,
Walking Minotaur robot,"University of California (UC) Berkeley,Google Brain",2019-06-19,Robotics,Animal (human/non-human) imitation,,,,,,,,Unknown,https://arxiv.org/abs/1812.11103,Learning to Walk via Deep Reinforcement Learning,404.0,"Tuomas Haarnoja, Sehoon Ha, Aurick Zhou, Jie Tan, George Tucker, Sergey Levine","Deep reinforcement learning (deep RL) holds the promise of automating the acquisition of complex controllers that can map sensory inputs directly to low-level actions. In the domain of robotic locomotion, deep RL could enable learning locomotion skills with minimal engineering and without an explicit model of the robot dynamics. Unfortunately, applying deep RL to real-world robotic tasks is exceptionally difficult, primarily due to poor sample complexity and sensitivity to hyperparameters. While hyperparameters can be easily tuned in simulated domains, tuning may be prohibitively expensive on physical systems, such as legged robots, that can be damaged through extensive trial-and-error learning. In this paper, we propose a sample-efficient deep RL algorithm based on maximum entropy RL that requires minimal per-task tuning and only a modest number of trials to learn neural network policies. We apply this method to learning walking gaits on a real-world Minitaur robot. Our method can acquire a stable gait from scratch directly in the real world in about two hours, without relying on any model or simulation, and the resulting policy is robust to moderate variations in the environment. We further show that our algorithm achieves state-of-the-art performance on simulated benchmarks with a single set of hyperparameters. Videos of training and the learned policy can be found on the project website.","Academia,Industry","United States of America,United States of America",SOTA improvement,,,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
LaNet-L (CIFAR-10),"Brown University,Facebook",2019-06-17,Vision,"Image classification,Neural Architecture Search - NAS",44100000.0,44.1M,,"LaNet-L was trained on 150 GPU-days, however the GPU was not specified",CIFAR-10,60000.0,,Confident,https://arxiv.org/abs/1906.06832,Sample-Efficient Neural Architecture Search by Learning Action Space,44.0,"Linnan Wang, Saining Xie, Teng Li, Rodrigo Fonseca, Yuandong Tian","Neural Architecture Search (NAS) has emerged as a promising technique for automatic neural network design. However, existing MCTS based NAS approaches often utilize manually designed action space, which is not directly related to the performance metric to be optimized (e.g., accuracy), leading to sample-inefficient explorations of architectures. To improve the sample efficiency, this paper proposes Latent Action Neural Architecture Search (LaNAS), which learns actions to recursively partition the search space into good or bad regions that contain networks with similar performance metrics. During the search phase, as different action sequences lead to regions with different performance, the search efficiency can be significantly improved by biasing towards the good regions. On three NAS tasks, empirical results demonstrate that LaNAS is at least an order more sample efficient than baseline methods including evolutionary algorithms, Bayesian optimizations, and random search. When applied in practice, both one-shot and regular LaNAS consistently outperform existing results. Particularly, LaNAS achieves 99.0% accuracy on CIFAR-10 and 80.8% top1 accuracy at 600 MFLOPS on ImageNet in only 800 samples, significantly outperforming AmoebaNet with 33x fewer samples. Our code is publicly available at this https URL.","Academia,Industry","United States of America,United States of America",SOTA improvement,"""In practice, LaNAS finds a network that achieves SOTA 99.0% accuracy on CIFAR-10""",600.0,,,,,,,,,,,,,,Open weights (non-commercial),Open (non-commercial),Open access (non-commercial),"code and weights here, non-commercial license: https://github.com/facebookresearch/LaMCTS/tree/main/LaNAS/LaNet/CIFAR10",FP16,
PG-SWGAN,ETH Zurich,2019-06-15,Image generation,Image generation,,,,,"CIFAR-10,LSUN,CelebA",,,Unknown,https://openaccess.thecvf.com/content_CVPR_2019/html/Wu_Sliced_Wasserstein_Generative_Models_CVPR_2019_paper.html,Sliced Wasserstein Generative Models,115.0,"Jiqing Wu, Zhiwu Huang, Dinesh Acharya, Wen Li, Janine Thoma, Danda Pani Paudel, Luc Van Gool","In generative modeling, the Wasserstein distance (WD) has emerged as a useful metric to measure the discrepancy between generated and real data distributions. Unfortunately, it is challenging to approximate the WD of high-dimensional distributions. In contrast, the sliced Wasserstein distance (SWD) factorizes high-dimensional distributions into their multiple one-dimensional marginal distributions and is thus easier to approximate. In this paper, we introduce novel approximations of the primal and dual SWD. Instead of using a large number of random projections, as it is done by conventional SWD approximation methods, we propose to approximate SWDs with a small number of parameterized orthogonal projections in an end-to-end deep learning fashion. As concrete applications of our SWD approximations, we design two types of differentiable SWD blocks to equip modern generative frameworks---Auto-Encoders (AE) and Generative Adversarial Networks (GAN). In the experiments, we not only show the superiority of the proposed generative models on standard image synthesis benchmarks, but also demonstrate the state-of-the-art performance on challenging high resolution image and video generation in an unsupervised manner.",Academia,Switzerland,SOTA improvement,"""For fair comparison, we equip the same progressive growing architecture with our proposed SWGAN objective and its dual
SWD blocks (PG-SWGAN). As shown in Fig. 3 (Right)
and Fig. 5, our PG-SWGAN can outperform PG-WGAN in
terms of both qualitative and quantitative comparison on the
CelebA-HQ and LSUN datasets""",,,,,,,,,,,,,,,Unreleased,Open (non-commercial),Open access (non-commercial),"looks like code but no weights, no license specified: https://github.com/musikisomorphie/swd",FP32,
FixRes ResNeXt-101 WSL,Facebook AI,2019-06-14,Vision,Image classification,829000000.0,,,,ImageNet,940000000.0,"""Conversely, when training a ResNeXt-101 32x48d pre-trained in weakly-supervised fashion on 940 million public images at resolution 224x224 and further optimizing for test resolution 320x320, we obtain a test top-1 accuracy of 86.4% (top-5: 98.0%) (single-crop)""",,https://arxiv.org/abs/1906.06423,Fixing the train-test resolution discrepancy,405.0,"Hugo Touvron, Andrea Vedaldi, Matthijs Douze, Hervé Jégou","Data-augmentation is key to the training of neural networks for image classification. This paper first shows that existing augmentations induce a significant discrepancy between the typical size of the objects seen by the classifier at train and test time. We experimentally validate that, for a target test resolution, using a lower train resolution offers better classification at test time.
We then propose a simple yet effective and efficient strategy to optimize the classifier performance when the train and test resolutions differ. It involves only a computationally cheap fine-tuning of the network at the test resolution. This enables training strong classifiers using small training images. For instance, we obtain 77.1% top-1 accuracy on ImageNet with a ResNet-50 trained on 128x128 images, and 79.8% with one trained on 224x224 image. In addition, if we use extra training data we get 82.5% with the ResNet-50 train with 224x224 images.
Conversely, when training a ResNeXt-101 32x48d pre-trained in weakly-supervised fashion on 940 million public images at resolution 224x224 and further optimizing for test resolution 320x320, we obtain a test top-1 accuracy of 86.4% (top-5: 98.0%) (single-crop). To the best of our knowledge this is the highest ImageNet single-crop, top-1 and top-5 accuracy to date.",Industry,United States of America,SOTA improvement,"""To the best of our knowledge our ResNeXt-101 32x48d surpasses all other models available in the literature""",,,,,,,,"https://medium.com/swlh/deepmind-achieved-starcraft-ii-grandmaster-level-but-at-what-cost-32891dd990e4#:~:text=According%20to%20the%20analysis%20by,Source%3A%20DeepMind.",,,,,,,Open weights (non-commercial),Open (non-commercial),Open access (non-commercial),code/weights with non-commercial license: https://github.com/facebookresearch/FixRes?tab=License-1-ov-file#readme,,
Char-CNN-BiLSTM,Capital One,2019-06-13,Language,Language modeling,,,,,,,,Unknown,https://arxiv.org/abs/1906.05678,Telephonetic: Making Neural Language Models Robust to ASR and Semantic Noise,2.0,"Chris Larson, Tarek Lahlou, Diana Mingels, Zachary Kulis, Erik Mueller","Speech processing systems rely on robust feature extraction to handle phonetic and semantic variations found in natural language. While techniques exist for desensitizing features to common noise patterns produced by Speech-to-Text (STT) and Text-to-Speech (TTS) systems, the question remains how to best leverage state-of-the-art language models (which capture rich semantic features, but are trained on only written text) on inputs with ASR errors. In this paper, we present Telephonetic, a data augmentation framework that helps robustify language model features to ASR corrupted inputs. To capture phonetic alterations, we employ a character-level language model trained using probabilistic masking. Phonetic augmentations are generated in two stages: a TTS encoder (Tacotron 2, WaveGlow) and a STT decoder (DeepSpeech). Similarly, semantic perturbations are produced by sampling from nearby words in an embedding space, which is computed using the BERT language model. Words are selected for augmentation according to a hierarchical grammar sampling strategy. Telephonetic is evaluated on the Penn Treebank (PTB) corpus, and demonstrates its effectiveness as a bootstrapping technique for transferring neural language models to the speech domain. Notably, our language model achieves a test perplexity of 37.49 on PTB, which to our knowledge is state-of-the-art among models trained only on PTB.",Industry,United States of America,SOTA improvement,"""Notably, our language model achieves a test perplexity of 37.49 on PTB, which to our knowledge is state-of-the-art among models trained only on PTB.""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
AWD-LSTM + MoS + Partial Shuffled,University of Texas at Austin,2019-06-10,Language,Language modeling,35000000.0,35M (Table 2),3.15e+17,6 FLOP / parameter / token * 35000000 parameters * 2000000 tokens * 750 epochs = 3.15e+17 FLOP,WikiText-2,2000000.0,750 epochs (figure 1c),Confident,https://arxiv.org/abs/1906.03805,Improving Neural Language Modeling via Adversarial Training,112.0,"Dilin Wang, Chengyue Gong, Qiang Liu","Recently, substantial progress has been made in language modeling by using deep neural networks. However, in practice, large scale neural language models have been shown to be prone to overfitting. In this paper, we present a simple yet highly effective adversarial training mechanism for regularizing neural language models. The idea is to introduce adversarial noise to the output embedding layer while training the models. We show that the optimal adversarial noise yields a simple closed-form solution, thus allowing us to develop a simple and time efficient algorithm. Theoretically, we show that our adversarial mechanism effectively encourages the diversity of the embedding vectors, helping to increase the robustness of models. Empirically, we show that our method improves on the single model state-of-the-art results for language modeling on Penn Treebank (PTB) and Wikitext-2, achieving test perplexity scores of 46.01 and 38.07, respectively. When applied to machine translation, our method improves over various transformer-based translation baselines in BLEU scores on the WMT14 English-German and IWSLT14 German-English tasks.",Academia,United States of America,SOTA improvement,"""our method improves on the single model state-of-the-art results for language modeling on Penn Treebank (PTB) and Wikitext-2, achieving test perplexity scores of 46.01 and 38.07, respectively""",750.0,,,,,,,,,,,,,,Open weights (non-commercial),Open (non-commercial),Open access (non-commercial),"code and weights. no license provided:
https://github.com/ChengyueGongR/advsoft",,
Transformer-XL Large + Phrase Induction,"Massachusetts Institute of Technology (MIT),University of Illinois Urbana-Champaign (UIUC)",2019-06-04,Language,Language modeling/generation,257000000.0,,3.7848651e+20,"Fine-tuned from pre-trained Transformer-XL Large (upd 3.7832771e+20 FLOP, old estimation 1.09e19 FLOP). 

Total: 3.7832771e20 + 1.588e17 = 3.7848651e+20 FLOP (Speculative confidence same as Transformer XL)",WikiText-103,,,Speculative,https://arxiv.org/abs/1906.01702,"Improving Neural Language Models by Segmenting, Attending, and Predicting the Future",12.0,"Hongyin Luo, Lan Jiang, Yonatan Belinkov, James Glass","Common language models typically predict the next word given the context. In this work, we propose a method that improves language modeling by learning to align the given context and the following phrase. The model does not require any linguistic annotation of phrase segmentation. Instead, we define syntactic heights and phrase segmentation rules, enabling the model to automatically induce phrases, recognize their task-specific heads, and generate phrase embeddings in an unsupervised learning manner. Our method can easily be applied to language models with different network architectures since an independent module is used for phrase induction and context-phrase alignment, and no change is required in the underlying language modeling network. Experiments have shown that our model outperformed several strong baseline models on different data sets. We achieved a new state-of-the-art performance of 17.4 perplexity on the Wikitext-103 dataset. Additionally, visualizing the outputs of the phrase induction module showed that our model is able to learn approximate phrase-level structural knowledge without any annotation.","Academia,Academia","United States of America,United States of America",SOTA improvement,"""We achieved a new state-of-the-art performance of 17.4 perplexity on the Wikitext-103 dataset""",1.0,,,,,,,,,Transformer-XL (257M),1.588e+17,"Additional 1.6e17 FLOP of fine-tuning from one epoch on WikiText-103:
6 * 257M * 103M = 1.588e17 FLOP.",,,Unreleased,Open source,Open source,"code license, BSD-3: https://github.com/luohongyin/PILM?tab=BSD-3-Clause-1-ov-file#readme

training: https://github.com/luohongyin/PILM/blob/master/train_span_wt103.sh ",,
AMDIM,Microsoft Research,2019-06-03,"Vision,Image generation",Image completion,626000000.0,source: https://openai.com/blog/image-gpt/#rfref13e,,,"ImageNet,CIFAR-10",,,,https://arxiv.org/abs/1906.00910,Learning Representations by Maximizing Mutual Information Across Views,1371.0,"Philip Bachman, R Devon Hjelm, William Buchwalter","We propose an approach to self-supervised representation learning based on maximizing mutual information between features extracted from multiple views of a shared context. For example, one could produce multiple views of a local spatio-temporal context by observing it from different locations (e.g., camera positions within a scene), and via different modalities (e.g., tactile, auditory, or visual). Or, an ImageNet image could provide a context from which one produces multiple views by repeatedly applying data augmentation. Maximizing mutual information between features extracted from these views requires capturing information about high-level factors whose influence spans multiple views -- e.g., presence of certain objects or occurrence of certain events.
Following our proposed approach, we develop a model which learns image representations that significantly outperform prior methods on the tasks we consider. Most notably, using self-supervised learning, our model learns representations which achieve 68.1% accuracy on ImageNet using standard linear evaluation. This beats prior results by over 12% and concurrent results by 7%. When we extend our model to use mixture-based representations, segmentation behaviour emerges as a natural side-effect. Our code is available online: this https URL.
",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational",Highly cited,,,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,MIT: https://github.com/Philip-Bachman/amdim-public,FP16,
XLNet,"Carnegie Mellon University (CMU),Google Brain",2019-06-01,Language,"Language modeling/generation,Question answering,Sentiment classification",340000000.0,"Same size as BERT-Large, which was 340M",6.19e+21,"""Specifically, we train on 512 TPU v3 chips for 500K steps with an Adam weight decay optimizer, linear learning rate decay, and a batch size of 8192, which takes about 5.5 days.""

123 teraflops * 5.5 days * 24 * 3600 * 512 * 0.3 utilization (assumption) ~= 8977858560*10^12=8.9*10^21

Alternatively, 500k steps * batch size 8192 * sequence length 512 = 2.1T training passes. 340 million * 6 * 2 trillion = 4.3e21 FLOP. 

Geometric mean: sqrt(8.9e21 * 4.3e21) = 6.19e21","Wikipedia,BookCorpus (BooksCorpus, Toronto Book Corpus)",,,Confident,https://arxiv.org/abs/1906.08237,XLNet: Generalized Autoregressive Pretraining for Language Understanding,7785.0,"Zhilin Yang, Zihang Dai, Yiming Yang, Jaime Carbonell, Ruslan Salakhutdinov, Quoc V. Le","With the capability of modeling bidirectional contexts, denoising autoencoding based pretraining like BERT achieves better performance than pretraining approaches based on autoregressive language modeling. However, relying on corrupting the input with masks, BERT neglects dependency between the masked positions and suffers from a pretrain-finetune discrepancy. In light of these pros and cons, we propose XLNet, a generalized autoregressive pretraining method that (1) enables learning bidirectional contexts by maximizing the expected likelihood over all permutations of the factorization order and (2) overcomes the limitations of BERT thanks to its autoregressive formulation. Furthermore, XLNet integrates ideas from Transformer-XL, the state-of-the-art autoregressive model, into pretraining. Empirically, under comparable experiment settings, XLNet outperforms BERT on 20 tasks, often by a large margin, including question answering, natural language inference, sentiment analysis, and document ranking.","Academia,Industry","United States of America,United States of America",Highly cited,,63.7626026148,,,Google TPU v3,,,12730.06373,,,,,,8192.0,,Open weights (unrestricted),Open source,Open source,Apache 2.0 for code and weights: https://github.com/zihangdai/xlnet,FP32,True
XLM,Facebook,2019-06-01,Language,"Translation,Language modeling",665000000.0,,,,,,,,https://arxiv.org/abs/1901.07291,Cross-lingual Language Model Pretraining,2588.0,"Guillaume Lample, Alexis Conneau","Recent studies have demonstrated the efficiency of generative pretraining for English natural language understanding. In this work, we extend this approach to multiple languages and show the effectiveness of cross-lingual pretraining. We propose two methods to learn cross-lingual language models (XLMs): one unsupervised that only relies on monolingual data, and one supervised that leverages parallel data with a new cross-lingual language model objective. We obtain state-of-the-art results on cross-lingual classification, unsupervised and supervised machine translation. On XNLI, our approach pushes the state of the art by an absolute gain of 4.9% accuracy. On unsupervised machine translation, we obtain 34.3 BLEU on WMT'16 German-English, improving the previous state of the art by more than 9 BLEU. On supervised machine translation, we obtain a new state of the art of 38.5 BLEU on WMT'16 Romanian-English, outperforming the previous best approach by more than 4 BLEU. Our code and pretrained models will be made publicly available.",Industry,United States of America,"Highly cited,SOTA improvement","""On supervised machine translation, we obtain a new state of the art of 38.5 BLEU on WMT’16 Romanian-English, outperforming the previous best approach by more
than 4 BLEU""",,,,,,,,,,,,,,,Open weights (non-commercial),Open (non-commercial),Open source,weights/code non-commercial: https://github.com/facebookresearch/XLM?tab=License-1-ov-file#readme,FP16,
DLRM-2020,Facebook AI,2019-05-31,Recommendation,Recommender system,100000000000.0,"Figure 1

https://arxiv.org/abs/2104.05158",4e+18,"Figure 1

https://arxiv.org/abs/2104.05158",,,,Confident,https://arxiv.org/abs/1906.00091,Deep Learning Recommendation Model for Personalization and Recommendation Systems,644.0,"Maxim Naumov, Dheevatsa Mudigere, Hao-Jun Michael Shi, Jianyu Huang, Narayanan Sundaraman, Jongsoo Park, Xiaodong Wang, Udit Gupta, Carole-Jean Wu, Alisson G. Azzolini, Dmytro Dzhulgakov, Andrey Mallevich, Ilia Cherniavskii, Yinghai Lu, Raghuraman Krishnamoorthi, Ansha Yu, Volodymyr Kondratenko, Stephanie Pereira, Xianjie Chen, Wenlin Chen, Vijay Rao, Bill Jia, Liang Xiong, Misha Smelyanskiy","With the advent of deep learning, neural network-based recommendation models have emerged as an important tool for tackling personalization and recommendation tasks. These networks differ significantly from other deep learning networks due to their need to handle categorical features and are not well studied or understood. In this paper, we develop a state-of-the-art deep learning recommendation model (DLRM) and provide its implementation in both PyTorch and Caffe2 frameworks. In addition, we design a specialized parallelization scheme utilizing model parallelism on the embedding tables to mitigate memory constraints while exploiting data parallelism to scale-out compute from the fully-connected layers. We compare DLRM against existing recommendation models and characterize its performance on the Big Basin AI platform, demonstrating its usefulness as a benchmark for future algorithmic experimentation and system co-design.",Industry,United States of America,SOTA improvement,"""In this paper, we develop a state-of-the-art deep learning recommendation model
(DLRM)""",,,,,,,,,,,,,,,Unreleased,Open source,Open source,"MIT, training/inference code: https://github.com/facebookresearch/dlrm",FP32,
MnasNet-A3,Google,2019-05-29,Vision,"Image classification,Object detection",5200000.0,From https://arxiv.org/pdf/1807.11626.pdf,1.5e+21,"""each architecture search takes 4.5 days on 64 TPUv2 devices""
This seems to be referring to a TPUv2 pod, consisting of 64 four-chip modules. The total performance is 11.5 petaFLOPS.
https://en.wikipedia.org/wiki/Tensor_Processing_Unit#Second_generation_TPU
Assuming a 33% utilization rate:

4.5 days * 64 * 180 teraFLOPS * 0.33 = 1.48*10^21 FLOP

However, it is unclear if ""64 TPUv2 devices"" refers to chips or modules, so the true compute might be 1/4 of this amount.",ImageNet,1280000.0,"""In this paper, we directly perform our architecture search on the ImageNet training set but with fewer training steps (5 epochs). As a common practice, we reserve randomly selected 50K images from the training set as the fixed validation set. """,Speculative,https://arxiv.org/abs/1807.11626,MnasNet: Platform-Aware Neural Architecture Search for Mobile,2788.0,"Mingxing Tan, Bo Chen, Ruoming Pang, Vijay Vasudevan, Mark Sandler, Andrew Howard, Quoc V. Le","Designing convolutional neural networks (CNN) for mobile devices is challenging because mobile models need to be small and fast, yet still accurate. Although significant efforts have been dedicated to design and improve mobile CNNs on all dimensions, it is very difficult to manually balance these trade-offs when there are so many architectural possibilities to consider. In this paper, we propose an automated mobile neural architecture search (MNAS) approach, which explicitly incorporate model latency into the main objective so that the search can identify a model that achieves a good trade-off between accuracy and latency. Unlike previous work, where latency is considered via another, often inaccurate proxy (e.g., FLOPS), our approach directly measures real-world inference latency by executing the model on mobile phones. To further strike the right balance between flexibility and search space size, we propose a novel factorized hierarchical search space that encourages layer diversity throughout the network. Experimental results show that our approach consistently outperforms state-of-the-art mobile CNN models across multiple vision tasks. On the ImageNet classification task, our MnasNet achieves 75.2% top-1 accuracy with 78ms latency on a Pixel phone, which is 1.8x faster than MobileNetV2 [29] with 0.5% higher accuracy and 2.3x faster than NASNet [36] with 1.2% higher accuracy. Our MnasNet also achieves better mAP quality than MobileNets for COCO object detection. Code is at this https URL",Industry,United States of America,Highly cited,,,108.0,,Google TPU v3,256.0,,9551.591619865148,,115847.74333325788,,,,,,Open weights (unrestricted),Open source,Open source,"Apache license: https://github.com/tensorflow/tpu/blob/master/LICENSE
model repo is here, includes training code: https://github.com/tensorflow/tpu/tree/master/models/official/mnasnet 

",FP32,
MnasNet-A1 + SSDLite,Google,2019-05-29,Vision,"Image classification,Object detection,Neural Architecture Search - NAS",4900000.0,From https://arxiv.org/pdf/1807.11626.pdf,1.5e+21,"""each architecture search takes 4.5 days on 64 TPUv2 devices""
This seems to be referring to a TPUv2 pod, consisting of 64 four-chip modules. The total performance is 11.5 petaFLOPS.
https://en.wikipedia.org/wiki/Tensor_Processing_Unit#Second_generation_TPU
Assuming a 33% utilization rate:

4.5 days * 64 * 180 teraFLOPS * 0.33 = 1.48*10^21 FLOP

However, it is unclear if ""64 TPUv2 devices"" refers to chips or modules, so the true compute might be 1/4 of this amount.",COCO,118000.0,,Speculative,https://arxiv.org/abs/1807.11626,MnasNet: Platform-Aware Neural Architecture Search for Mobile,2788.0,"Mingxing Tan, Bo Chen, Ruoming Pang, Vijay Vasudevan, Mark Sandler, Andrew Howard, Quoc V. Le","Designing convolutional neural networks (CNN) for mobile devices is challenging because mobile models need to be small and fast, yet still accurate. Although significant efforts have been dedicated to design and improve mobile CNNs on all dimensions, it is very difficult to manually balance these trade-offs when there are so many architectural possibilities to consider. In this paper, we propose an automated mobile neural architecture search (MNAS) approach, which explicitly incorporate model latency into the main objective so that the search can identify a model that achieves a good trade-off between accuracy and latency. Unlike previous work, where latency is considered via another, often inaccurate proxy (e.g., FLOPS), our approach directly measures real-world inference latency by executing the model on mobile phones. To further strike the right balance between flexibility and search space size, we propose a novel factorized hierarchical search space that encourages layer diversity throughout the network. Experimental results show that our approach consistently outperforms state-of-the-art mobile CNN models across multiple vision tasks. On the ImageNet classification task, our MnasNet achieves 75.2% top-1 accuracy with 78ms latency on a Pixel phone, which is 1.8x faster than MobileNetV2 [29] with 0.5% higher accuracy and 2.3x faster than NASNet [36] with 1.2% higher accuracy. Our MnasNet also achieves better mAP quality than MobileNets for COCO object detection. Code is at this https URL",Industry,United States of America,Highly cited,,,108.0,,Google TPU v3,256.0,,9551.591619865148,,115847.74333325788,,,,,,Open weights (unrestricted),Open source,Open source,"Apache license: https://github.com/tensorflow/tpu/blob/master/LICENSE
model repo is here, includes training code: https://github.com/tensorflow/tpu/tree/master/models/official/mnasnet 

",FP32,
EfficientNet-L2,Google,2019-05-28,Vision,Image classification,480000000.0,,,,ImageNet,,,,https://arxiv.org/abs/1905.11946,EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks,15327.0,"Mingxing Tan, Quoc V. Le","Convolutional Neural Networks (ConvNets) are commonly developed at a fixed resource budget, and then scaled up for better accuracy if more resources are available. In this paper, we systematically study model scaling and identify that carefully balancing network depth, width, and resolution can lead to better performance. Based on this observation, we propose a new scaling method that uniformly scales all dimensions of depth/width/resolution using a simple yet highly effective compound coefficient. We demonstrate the effectiveness of this method on scaling up MobileNets and ResNet.
To go even further, we use neural architecture search to design a new baseline network and scale it up to obtain a family of models, called EfficientNets, which achieve much better accuracy and efficiency than previous ConvNets. In particular, our EfficientNet-B7 achieves state-of-the-art 84.3% top-1 accuracy on ImageNet, while being 8.4x smaller and 6.1x faster on inference than the best existing ConvNet. Our EfficientNets also transfer well and achieve state-of-the-art accuracy on CIFAR-100 (91.7%), Flowers (98.8%), and 3 other transfer learning datasets, with an order of magnitude fewer parameters. Source code is at this https URL.",Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,Apache license: https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet,,
CPC v2,"DeepMind,University of California (UC) Berkeley",2019-05-22,"Vision,Image generation",Image completion,303000000.0,source: https://openai.com/blog/image-gpt/#rfref25d,,,ImageNet,,,,https://arxiv.org/abs/1905.09272,Data-Efficient Image Recognition with Contrastive Predictive Coding,491.0,"Olivier J. Hénaff, Aravind Srinivas, Jeffrey De Fauw, Ali Razavi, Carl Doersch, S. M. Ali Eslami, Aaron van den Oord","Human observers can learn to recognize new categories of images from a handful of examples, yet doing so with artificial ones remains an open challenge. We hypothesize that data-efficient recognition is enabled by representations which make the variability in natural signals more predictable. We therefore revisit and improve Contrastive Predictive Coding, an unsupervised objective for learning such representations. This new implementation produces features which support state-of-the-art linear classification accuracy on the ImageNet dataset. When used as input for non-linear classification with deep neural networks, this representation allows us to use 2-5x less labels than classifiers trained directly on image pixels. Finally, this unsupervised representation substantially improves transfer learning to object detection on the PASCAL VOC dataset, surpassing fully supervised pre-trained ImageNet classifiers.","Industry,Academia","United Kingdom of Great Britain and Northern Ireland,United States of America",SOTA improvement,"""this unsupervised representation substantially improves transfer learning to object detection on the
PASCAL VOC dataset, surpassing fully supervised pre-trained ImageNet classifiers""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
AWD-LSTM-DRILL + dynamic evaluation† (WT2),IDIAP,2019-05-14,Language,Language modeling,34000000.0,"34M, Table 2",4.08e+17,6 FLOP / parameter / token * 34000000 parameters * 2000000 tokens * 1000 epochs = 4.08e+17 FLOP,WikiText-2,,max epochs - 1000 (from http://github.com/idiap/drill),Likely,https://arxiv.org/abs/1905.05513,Deep Residual Output Layers for Neural Language Generation,7.0,"Nikolaos Pappas, James Henderson","Many tasks, including language generation, benefit from learning the structure of the output space, particularly when the space of output labels is large and the data is sparse. State-of-the-art neural language models indirectly capture the output space structure in their classifier weights since they lack parameter sharing across output labels. Learning shared output label mappings helps, but existing methods have limited expressivity and are prone to overfitting. In this paper, we investigate the usefulness of more powerful shared mappings for output labels, and propose a deep residual output mapping with dropout between layers to better capture the structure of the output space and avoid overfitting. Evaluations on three language generation tasks show that our output label mapping can match or improve state-of-the-art recurrent and self-attention architectures, and suggest that the classifier does not necessarily need to be high-rank to better model natural language if it is better at capturing the structure of the output space.",Academia,Switzerland,SOTA improvement,"""our models improve over the state-of-the-art by +1.6 perplexity on PennTreebank and by +3.9 perplexity on
Wikitext-2""",1000.0,29.0,106 sec per epoch (Table 3) -> 106000 seconds = 29 hours,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"copyleft license (restricts derivative works to be open)
https://github.com/idiap/drill?tab=GPL-3.0-1-ov-file#readme

train/eval script: https://github.com/idiap/drill/blob/master/main.py ",FP32,
ResNeXt-101 Billion-scale,Facebook AI,2019-05-02,Vision,Image classification,193000000.0,,,,YFCC-100M,,,,https://arxiv.org/abs/1905.00546,Billion-scale semi-supervised learning for image classification,436.0,"I. Zeki Yalniz, Hervé Jégou, Kan Chen, Manohar Paluri, Dhruv Mahajan","This paper presents a study of semi-supervised learning with large convolutional networks. We propose a pipeline, based on a teacher/student paradigm, that leverages a large collection of unlabelled images (up to 1 billion). Our main goal is to improve the performance for a given target architecture, like ResNet-50 or ResNext. We provide an extensive analysis of the success factors of our approach, which leads us to formulate some recommendations to produce high-accuracy models for image classification with semi-supervised learning. As a result, our approach brings important gains to standard architectures for image, video and fine-grained classification. For instance, by leveraging one billion unlabelled images, our learned vanilla ResNet-50 achieves 81.2% top-1 accuracy on the ImageNet benchmark.",Industry,United States of America,SOTA improvement,"""We demonstrate the performance of our method on popular classification benchmarks for both images and videos and significantly outperforms the state of the art.""",,,,,,,,,,,,,,,Open weights (non-commercial),Unreleased,,"non-commercial for weights: 
https://github.com/facebookresearch/semi-supervised-ImageNet1K-models",,
ResNet-50 Billion-scale,Facebook AI,2019-05-02,Vision,Image classification,25000000.0,25M parameters vanilla ResNet50,,,"YFCC-100M,IG-1B-Targeted",1090000000.0,"1 billion + 90 million, per above",,https://arxiv.org/abs/1905.00546,Billion-scale semi-supervised learning for image classification,436.0,"I. Zeki Yalniz, Hervé Jégou, Kan Chen, Manohar Paluri, Dhruv Mahajan",,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,Open weights (non-commercial),Unreleased,,non-commercial for weights: https://github.com/facebookresearch/semi-supervised-ImageNet1K-models,,
Neuro-Symbolic Concept Learner,"Massachusetts Institute of Technology (MIT),Tsinghua University,MIT-IBM Watson AI Lab,DeepMind",2019-04-26,"Vision,Language",Visual question answering,,,,,"CLEVR,VQS,ImageNet",,"CLEVR, ImageNet, VQS
5000 in CLEVR
64509 in VQS
and whole ImageNet for pretraining
""We train NS-CL on 5K images (<10% of CLEVR’s 70K training images). We generate 20 questions for each image for the entire curriculum learning process""

section 4.3 ""All models use a pre-trained semantic parser on the full CLEVR dataset""

""The only extra supervision of the visual perception module comes from the pre-training of the perception modules on ImageNet (Deng et al., 2009). To quantify the influence of this pre-training""

In appendix G.2 (VQS Dataset):
""All models are trained on the first 63,509 images of the training set, and tested on the test split. For hyper-parameter tuning and model selection, the rest 5,000 images from the training set are used for validation.",Unknown,https://arxiv.org/abs/1904.12584,"The Neuro-Symbolic Concept Learner: Interpreting Scenes, Words, and Sentences From Natural Supervision",695.0,"Jiayuan Mao, Chuang Gan, Pushmeet Kohli, Joshua B. Tenenbaum, Jiajun Wu","We propose the Neuro-Symbolic Concept Learner (NS-CL), a model that learns visual concepts, words, and semantic parsing of sentences without explicit supervision on any of them; instead, our model learns by simply looking at images and reading paired questions and answers. Our model builds an object-based scene representation and translates sentences into executable, symbolic programs. To bridge the learning of two modules, we use a neuro-symbolic reasoning module that executes these programs on the latent scene representation. Analogical to human concept learning, the perception module learns visual concepts based on the language description of the object being referred to. Meanwhile, the learned visual concepts facilitate learning new words and parsing new sentences. We use curriculum learning to guide the searching over the large compositional space of images and language. Extensive experiments demonstrate the accuracy and efficiency of our model on learning visual concepts, word representations, and semantic parsing of sentences. Further, our method allows easy generalization to new object attributes, compositions, language concepts, scenes and questions, and even new program domains. It also empowers applications including visual question answering and bidirectional image-text retrieval.","Academia,Academia,Academia,Industry,Industry","United States of America,China,United States of America,United Kingdom of Great Britain and Northern Ireland",SOTA improvement,"""NS-CL’s modularized design enables interpretable, robust, and accurate visual reasoning: it achieves state-of-the-art performance on the CLEVR datase""",,,,,,,,,,,,,,,Unreleased,Open source,Open source,MIT code: https://github.com/vacancy/NSCL-PyTorch-Release,,
DANet,Chinese Academy of Sciences,2019-04-21,Vision,Semantic segmentation,,,,,"Cityscapes,COCO-Stuff,PASCAL-Context",,,Unknown,https://openaccess.thecvf.com/content_CVPR_2019/html/Fu_Dual_Attention_Network_for_Scene_Segmentation_CVPR_2019_paper.html,Dual Attention Network for Scene Segmentation,4620.0,"Jun Fu, Jing Liu, Haijie Tian, Yong Li, Yongjun Bao, Zhiwei Fang, Hanqing Lu","In this paper, we address the scene segmentation task by capturing rich contextual dependencies based on the self-attention mechanism. Unlike previous works that capture contexts by multi-scale features fusion, we propose a Dual Attention Networks (DANet) to adaptively integrate local features with their global dependencies. Specifically, we append two types of attention modules on top of traditional dilated FCN, which model the semantic interdependencies in spatial and channel dimensions respectively. The position attention module selectively aggregates the features at each position by a weighted sum of the features at all positions. Similar features would be related to each other regardless of their distances. Meanwhile, the channel attention module selectively emphasizes interdependent channel maps by integrating associated features among all channel maps. We sum the outputs of the two attention modules to further improve feature representation which contributes to more precise segmentation results. We achieve new state-of-the-art segmentation performance on three challenging scene segmentation datasets, i.e., Cityscapes, PASCAL Context and COCO Stuff dataset. In particular, a Mean IoU score of 81.5% on Cityscapes test set is achieved without using coarse data.
",Academia,China,Highly cited,,,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"MIT for code and weights: https://github.com/junfu1115/DANet/
train code: https://github.com/junfu1115/DANet/tree/master/experiments/recognition ",,
BERT-Large-CAS (PTB+WT2+WT103),Amazon,2019-04-20,Language,"Neural Architecture Search - NAS,Language modeling/generation",395000000.0,395M (Table 6),1.5405e+20,"6 FLOP / token / parameter * 395000000 parameters * 1300000000 parameters * 50 epochs = 1.5405e+20 FLOP

________
in the Algorithmic progress paper, the estimation was 5.21E+20 FLOP","Penn TreeBank (PTB),WikiText-2,WikiText-103",1300000000.0,"Table 7:
0.1B (PTB)+ 0.2B (WT-2) + 1.0B (WT-103) = 1.3B

We pick 128 as sequence length and 16 as minibatch size

""We use NT-ASGD (Merity et al., 2017) to train 50 epochs on training datasets""",Likely,https://arxiv.org/abs/1904.09408,Language Models with Transformers,110.0,"Chenguang Wang, Mu Li, Alexander J. Smola","The Transformer architecture is superior to RNN-based models in computational efficiency. Recently, GPT and BERT demonstrate the efficacy of Transformer models on various NLP tasks using pre-trained language models on large-scale corpora. Surprisingly, these Transformer architectures are suboptimal for language model itself. Neither self-attention nor the positional encoding in the Transformer is able to efficiently incorporate the word-level sequential context crucial to language modeling.
In this paper, we explore effective Transformer architectures for language model, including adding additional LSTM layers to better capture the sequential context while still keeping the computation efficient. We propose Coordinate Architecture Search (CAS) to find an effective architecture through iterative refinement of the model. Experimental results on the PTB, WikiText-2, and WikiText-103 show that CAS achieves perplexities between 20.42 and 34.11 on all problems, i.e. on average an improvement of 12.0 perplexity units compared to state-of-the-art LSTMs. The source code is publicly available.",Industry,United States of America,SOTA improvement,"""CAS achieves perplexities between 20.42 and 34.11 on all problems, i.e. on average an improvement of 12.0 perplexity units compared to state-of-the-art LSTMs""",50.0,,,,,,,,,,,,,,Unreleased,Open source,Open source,Apache 2.0 license: https://github.com/cgraywang/gluon-nlp-1/blob/lmtransformer/scripts/language_model/train/transformer_lm.py,FP32,
SpecAugment,Google Brain,2019-04-18,Language,Speech recognition,,,,,"LibriSpeech,Switchboard,Fisher",,,Unknown,https://arxiv.org/abs/1904.08779,SpecAugment: A Simple Data Augmentation Method for Automatic Speech Recognition,3207.0," Daniel S. Park, William Chan, Yu Zhang, Chung-Cheng Chiu, Barret Zoph, Ekin D. Cubuk, Quoc V. Le",,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,Unreleased,Unreleased,,LibriSpeech is open source,,
Transformer-XL + RMS dynamic eval,University of Edinburgh,2019-04-17,Language,Language modeling/generation,257000000.0,,,,WikiText-103,,,,https://arxiv.org/abs/1904.08378,Dynamic Evaluation of Transformer Language Models,40.0,"Ben Krause, Emmanuel Kahembwe, Iain Murray, Steve Renals","This research note combines two methods that have recently improved the state of the art in language modeling: Transformers and dynamic evaluation. Transformers use stacked layers of self-attention that allow them to capture long range dependencies in sequential data. Dynamic evaluation fits models to the recent sequence history, allowing them to assign higher probabilities to re-occurring sequential patterns. By applying dynamic evaluation to Transformer-XL models, we improve the state of the art on enwik8 from 0.99 to 0.94 bits/char, text8 from 1.08 to 1.04 bits/char, and WikiText-103 from 18.3 to 16.4 perplexity points.",Academia,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,"""By applying dynamic evaluation to Transformer-XL models, we improve the state of the art on enwik8 from 0.99 to 0.94 bits/char, text8 from 1.08 to 1.04 bits/char, and WikiText-103 from 18.3 to 16.4 perplexity points.""",,,,,,,,,,,,,,,Unreleased,Open source,Open source,"Apache for code: https://github.com/benkrause/dynamiceval-transformer
wt103 train script: https://github.com/benkrause/dynamiceval-transformer/blob/master/tf/sota/wt103.sh ",,
MEGNet (molecule model),University of California San Diego,2019-04-10,Materials science,Molecular property prediction,8720.0,Calculations here: https://docs.google.com/document/d/1BTmyZ9KVTIwkp9z9tRRFsWM5A0QcXiufXrIhujffyso/edit?tab=t.0#heading=h.dcux1bvmijlm,4.536e+17,"Calculations here: 
https://docs.google.com/document/d/1BTmyZ9KVTIwkp9z9tRRFsWM5A0QcXiufXrIhujffyso/edit?tab=t.0#heading=h.c0h2t2icf5xr

Assuming a single GPU (the model is quite small):
1.0e+3*100*1.1e+13*0.4=4.5e+17",,130462.0,,Speculative,https://arxiv.org/abs/1812.05055,Graph Networks as a Universal Machine Learning Framework for Molecules and Crystals,1297.0,"Chi Chen, Weike Ye, Yunxing Zuo, Chen Zheng, Shyue Ping Ong","Graph networks are a new machine learning (ML) paradigm that supports both relational reasoning and combinatorial generalization. Here, we develop universal MatErials Graph Network (MEGNet) models for accurate property prediction in both molecules and crystals. We demonstrate that the MEGNet models outperform prior ML models such as the SchNet in 11 out of 13 properties of the QM9 molecule data set. Similarly, we show that MEGNet models trained on ∼60,000 crystals in the Materials Project substantially outperform prior ML models in the prediction of the formation energies, band gaps and elastic moduli of crystals, achieving better than DFT accuracy over a much larger data set. We present two new strategies to address data limitations common in materials science and chemistry. First, we demonstrate a physically-intuitive approach to unify four separate molecular MEGNet models for the internal energy at 0 K and room temperature, enthalpy and Gibbs free energy into a single free energy MEGNet model by incorporating the temperature, pressure and entropy as global state inputs. Second, we show that the learned element embeddings in MEGNet models encode periodic chemical trends and can be transfer-learned from a property model trained on a larger data set (formation energies) to improve property models with smaller amounts of data (band gaps and elastic moduli).",Academia,United States of America,Highly cited,"Citation count: 1297 as of April 8, 2025 (source: https://pubs.acs.org/doi/10.1021/acs.chemmater.9b01294)",1000.0,28.0,,NVIDIA GeForce GTX 1080 Ti,1.0,,,,282.85734112857654,,,,,,,,,,,
MEGNet (crystal formation energy model),University of California San Diego,2019-04-10,Materials science,Molecular property prediction,26128.0,Calculations here: https://docs.google.com/document/d/1BTmyZ9KVTIwkp9z9tRRFsWM5A0QcXiufXrIhujffyso/edit?tab=t.0#heading=h.913mrln2g0cv ,4.536e+17,"Calculations here: https://docs.google.com/document/d/1BTmyZ9KVTIwkp9z9tRRFsWM5A0QcXiufXrIhujffyso/edit?tab=t.0#heading=h.obxgi47b0fxe

Updated calculation assuming 100s per epoch and a single GPU.
1000*100*11340000000000*0.4=453600000000000000",Materials Project,69239.0,,Likely,https://arxiv.org/abs/1812.05055,Graph Networks as a Universal Machine Learning Framework for Molecules and Crystals,1297.0,"Chi Chen, Weike Ye, Yunxing Zuo, Chen Zheng, Shyue Ping Ong","Graph networks are a new machine learning (ML) paradigm that supports both relational reasoning and combinatorial generalization. Here, we develop universal MatErials Graph Network (MEGNet) models for accurate property prediction in both molecules and crystals. We demonstrate that the MEGNet models outperform prior ML models such as the SchNet in 11 out of 13 properties of the QM9 molecule data set. Similarly, we show that MEGNet models trained on ∼60,000 crystals in the Materials Project substantially outperform prior ML models in the prediction of the formation energies, band gaps and elastic moduli of crystals, achieving better than DFT accuracy over a much larger data set. We present two new strategies to address data limitations common in materials science and chemistry. First, we demonstrate a physically-intuitive approach to unify four separate molecular MEGNet models for the internal energy at 0 K and room temperature, enthalpy and Gibbs free energy into a single free energy MEGNet model by incorporating the temperature, pressure and entropy as global state inputs. Second, we show that the learned element embeddings in MEGNet models encode periodic chemical trends and can be transfer-learned from a property model trained on a larger data set (formation energies) to improve property models with smaller amounts of data (band gaps and elastic moduli).",Academia,United States of America,Highly cited,Source: https://pubs.acs.org/doi/10.1021/acs.chemmater.9b01294,1000.0,28.0,,NVIDIA GeForce GTX 1080 Ti,,,,,,,,,,,,,,,FP32,
MEGNet (crystal elasticity model),University of California San Diego,2019-04-10,Materials science,Molecular property prediction,26128.0,"Calculations here:
https://docs.google.com/document/d/1BTmyZ9KVTIwkp9z9tRRFsWM5A0QcXiufXrIhujffyso/edit?tab=t.0#heading=h.913mrln2g0cv
",4.536e+17,"Calculations here:
https://docs.google.com/document/d/1BTmyZ9KVTIwkp9z9tRRFsWM5A0QcXiufXrIhujffyso/edit?tab=t.0#heading=h.3ria9ya1ty1o


Updated calculation assuming 100s per epoch and a single GPU.
1000*100*11340000000000*0.4=453600000000000000
",Materials Project,,,Likely,https://arxiv.org/abs/1812.05055,Graph Networks as a Universal Machine Learning Framework for Molecules and Crystals,1297.0,"Chi Chen, Weike Ye, Yunxing Zuo, Chen Zheng, Shyue Ping Ong","Graph networks are a new machine learning (ML) paradigm that supports both relational reasoning and combinatorial generalization. Here, we develop universal MatErials Graph Network (MEGNet) models for accurate property prediction in both molecules and crystals. We demonstrate that the MEGNet models outperform prior ML models such as the SchNet in 11 out of 13 properties of the QM9 molecule data set. Similarly, we show that MEGNet models trained on ∼60,000 crystals in the Materials Project substantially outperform prior ML models in the prediction of the formation energies, band gaps and elastic moduli of crystals, achieving better than DFT accuracy over a much larger data set. We present two new strategies to address data limitations common in materials science and chemistry. First, we demonstrate a physically-intuitive approach to unify four separate molecular MEGNet models for the internal energy at 0 K and room temperature, enthalpy and Gibbs free energy into a single free energy MEGNet model by incorporating the temperature, pressure and entropy as global state inputs. Second, we show that the learned element embeddings in MEGNet models encode periodic chemical trends and can be transfer-learned from a property model trained on a larger data set (formation energies) to improve property models with smaller amounts of data (band gaps and elastic moduli).",Academia,United States of America,Highly cited,Source: https://pubs.acs.org/doi/10.1021/acs.chemmater.9b01294,1000.0,28.0,,NVIDIA GeForce GTX 1080 Ti,,,,,,,,,,,,,,,FP32,
MEGNet (crystal band gap model),University of California San Diego,2019-04-10,Materials science,Molecular property prediction,26128.0,"Calculations here:
https://docs.google.com/document/d/1BTmyZ9KVTIwkp9z9tRRFsWM5A0QcXiufXrIhujffyso/edit?tab=t.0#heading=h.913mrln2g0cv",4.536e+17,"Calculations here:
https://docs.google.com/document/d/1BTmyZ9KVTIwkp9z9tRRFsWM5A0QcXiufXrIhujffyso/edit?tab=t.0#heading=h.lk6l1te7vrkv


Updated calculation assuming 100s per epoch and a single GPU.
1000*100*11340000000000*0.4=453600000000000000",Materials Project,45901.0,,Likely,https://arxiv.org/abs/1812.05055,Graph Networks as a Universal Machine Learning Framework for Molecules and Crystals,1297.0,"Chi Chen, Weike Ye, Yunxing Zuo, Chen Zheng, Shyue Ping Ong","Graph networks are a new machine learning (ML) paradigm that supports both relational reasoning and combinatorial generalization. Here, we develop universal MatErials Graph Network (MEGNet) models for accurate property prediction in both molecules and crystals. We demonstrate that the MEGNet models outperform prior ML models such as the SchNet in 11 out of 13 properties of the QM9 molecule data set. Similarly, we show that MEGNet models trained on ∼60,000 crystals in the Materials Project substantially outperform prior ML models in the prediction of the formation energies, band gaps and elastic moduli of crystals, achieving better than DFT accuracy over a much larger data set. We present two new strategies to address data limitations common in materials science and chemistry. First, we demonstrate a physically-intuitive approach to unify four separate molecular MEGNet models for the internal energy at 0 K and room temperature, enthalpy and Gibbs free energy into a single free energy MEGNet model by incorporating the temperature, pressure and entropy as global state inputs. Second, we show that the learned element embeddings in MEGNet models encode periodic chemical trends and can be transfer-learned from a property model trained on a larger data set (formation energies) to improve property models with smaller amounts of data (band gaps and elastic moduli).",Academia,United States of America,Highly cited,Source: https://pubs.acs.org/doi/10.1021/acs.chemmater.9b01294,1000.0,28.0,,NVIDIA GeForce GTX 1080 Ti,1.0,,,,282.85734112857654,,,,,,,,,,,
WeNet (Penn Treebank),Amazon,2019-04-08,Language,"Neural Architecture Search - NAS,Language modeling",23000000.0,Table 1,7.30000001e+17,"PTB has 912344 tokens. The model has 23M parameters and was trained for 6k epochs. If the model was dense, 6 FLOP/token/param/epoch * 6k epochs * 23M params * 912k tokens = 1.05e18 FLOP.

Alternatively, the model was trained on 1 V100 GPU and ""In terms of efficiency, the overall cost... is within 1 GPU day"" so the training time was around or below 24 hours. Half precision and 30% utilization would be a pretty good match for the arithmetic estimate: 24 hours * 30% * 28 TFLOPS = 7.3e17 FLOP.",Penn TreeBank (PTB),,,Likely,https://arxiv.org/abs/1904.03819,WeNet: Weighted Networks for Recurrent Network Architecture Search,5.0,"Zhiheng Huang, Bing Xiang",,Industry,United States of America,SOTA improvement,"""We show that an architecture found by WeNets arXiv:1904.03819v1 [cs.NE] 8 Apr 2019 WeNet: Weighted Networks for Recurrent Network Architecture Search achieves state-of-the-art results on the Penn Treebank language dataset""",6000.0,24.0,,NVIDIA V100,1.0,,,,339.4439274233134,,,,70000.0,"They use BPTT with length 35. During architecture search data batch size is 20 and network batch size is 100. While training the architecture they end up finding, batch size is 64. So effective batch size is 35 * 20 * 100 = 70,000 during architecture search, and 35 * 64 = 2,240 during final training. ",Unreleased,Unreleased,,PTB dataset,FP16,
True-Regularization+Finetune+Dynamic-Eval,"Mobvoi,Williams College",2019-04-08,Language,Language modeling,7000000.0,,,,Penn TreeBank (PTB),,,,https://arxiv.org/abs/1904.04163,Knowledge Distillation For Recurrent Neural Network Language Modeling With Trust Regularization,24.0,"Yangyang Shi, Mei-Yuh Hwang, Xin Lei, Haoyu Sheng","Recurrent Neural Networks (RNNs) have dominated language modeling because of their superior performance over traditional N-gram based models. In many applications, a large Recurrent Neural Network language model (RNNLM) or an ensemble of several RNNLMs is used. These models have large memory footprints and require heavy computation. In this paper, we examine the effect of applying knowledge distillation in reducing the model size for RNNLMs. In addition, we propose a trust regularization method to improve the knowledge distillation training for RNNLMs. Using knowledge distillation with trust regularization, we reduce the parameter size to a third of that of the previously published best model while maintaining the state-of-the-art perplexity result on Penn Treebank data. In a speech recognition N-bestrescoring task, we reduce the RNNLM model size to 18.5% of the baseline system, with no degradation in word error rate(WER) performance on Wall Street Journal data set.","Industry,Academia","China,United States of America",SOTA improvement,"""In the first experiment, the student model achieves state-of-the-art perplexity results on the Penn Treebank dataset [1] with a model size one third of that of the
previously published best model""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
Cross-lingual alignment,"Tel Aviv University,Massachusetts Institute of Technology (MIT)",2019-04-04,Language,Translation,,,2.56e+18,"From author communication:

Precision: float32

Hardware: 4 GPU  NVIDIA 1080Ti

NVIDIA 1080Ti: 1.06E+13

Compute: 7 GPU-days

0.4 * 1.06E+13 FLOP/s * 7 days * 24h/day * 3600s/h
= 2.56E+18","Wikipedia,CoNLL2017",,,Speculative,https://arxiv.org/abs/1902.09492,"Cross-lingual alignment of contextual word embeddings, with applications to zero- shot dependency parsing.",201.0,"Tal Schuster, Ori Ram, Regina Barzilay, and Amir Globerson.",,"Academia,Academia","Israel,United States of America",SOTA improvement,"""our method consistently outperforms the previous state-of-the-art on 6 tested languages""",,,,NVIDIA GeForce GTX 1080 Ti,,,,,,ELMo,,,,,Open weights (unrestricted),Open source,Open source,"MIT license
https://github.com/TalSchuster/CrossLingualContextualEmb",,
FAIRSEQ Adaptive Inputs,"Facebook AI Research,Google Brain",2019-04-01,Language,Language modeling/generation,247000000.00000003,"""The first model has 16 blocks, inner dimension 4K and embedding dimension 1K""

247M as in Baevski and Auli (2019) Transformer",3.1804274e+19,"6 FLOP / parameter / token * 247000000 parameters * 103000000 tokens * 180 epochs = 2.747628e+19 FLOP 

for translation model, Table 2:

31330000000000 FLOP / second / GPU * 128 GPUs * 8.5 hours * 3600 seconds / hour * 0.3 [assumed precision] = 3.6814003e+19 FLOP

sqrt(2.747628e+19*3.6814003e+19) = 3.1804274e+19 FLOP

Speculative confidence since amount of parameters and epochs are assumed as well as hardware estimation is given for another model in the paper

__________
In the Algorithmic progress paper the estimation was 7.30E+18 FLOP",WikiText-103,103000000.0,assuming same number of epochs as in Baevski and Auli (2019) Transformer - 180,Speculative,https://arxiv.org/abs/1904.01038,"fairseq: A Fast, Extensible Toolkit for Sequence Modeling",2991.0,"Myle Ott, Sergey Edunov, Alexei Baevski, Angela Fan, Sam Gross, Nathan Ng, David Grangier, Michael Auli","fairseq is an open-source sequence modeling toolkit that allows researchers and developers to train custom models for translation, summarization, language modeling, and other text generation tasks. The toolkit is based on PyTorch and supports distributed training across multiple GPUs and machines. We also support fast mixed-precision training and inference on modern GPUs. A demo video can be found at this https URL","Industry,Industry","United States of America,United States of America",Highly cited,,180.0,,,NVIDIA V100,,,,,,,,,,,Unreleased,Open source,Open source,"weights and training, Repo is MIT-licensed
https://github.com/facebookresearch/fairseq/blob/main/examples/language_model/README.adaptive_inputs.md ",,
SciBERT,Allen Institute for AI,2019-03-26,Language,"Relation extraction,Sentiment classification,Text classification",110000000.0,"110M
size of bert base from https://huggingface.co/google-bert/bert-base-uncased
relevant citation: 
""We use the original BERT code to
train SCIBERT on our corpus with the same con-
figuration and size as BERT-Base. We train 4
different versions of SCIBERT: (i) cased or un-
cased and (ii) BASEVOCAB or SCIVOCAB. The
two models that use BASEVOCAB are finetuned
from the corresponding BERT-Base models. The
other two models that use the new SCIVOCAB are
trained from scratch.""",8.926848e+19,"4*123e12*0.3*(7*24*3600) = 8.926848e+19
(num gpu) * (peak compute) * (assumed utilization rate) * (time in seconds)
We have:
 4 TPUv3 chips.123teraFLOPS per chip.
7 days of training
""We use a single TPU v3 with 8 cores. Training the SCIVOCAB models from scratch on our corpus takes 1 week (5 days with max length 128, then 2 days with max length 512). ""

If this compute estimate is accurate and BERT is approximately dense, then C=6eND -> e=C/6ND ~= 40 epochs.",,3300000000.0,"""The average paper length is 154 sentences (2,769 tokens) resulting in a corpus size of 3.17B tokens, similar to the 3.3B tokens on which BERT was trained.""",Confident,https://arxiv.org/abs/1903.10676,SciBERT: A Pretrained Language Model for Scientific Text,2808.0,"Iz Beltagy, Kyle Lo, Arman Cohan","Obtaining large-scale annotated data for NLP tasks in the scientific domain is challenging and expensive. We release SciBERT, a pretrained language model based on BERT (Devlin et al., 2018) to address the lack of high-quality, large-scale labeled scientific data. SciBERT leverages unsupervised pretraining on a large multi-domain corpus of scientific publications to improve performance on downstream scientific NLP tasks. We evaluate on a suite of tasks including sequence tagging, sentence classification and dependency parsing, with datasets from a variety of scientific domains. We demonstrate statistically significant improvements over BERT and achieve new state-of-the-art results on several of these tasks. The code and pretrained models are available at this https://github.com/allenai/scibert/",Research collective,United States of America,"Highly cited,SOTA improvement","""We demon-
strate statistically significant improvements
over BERT and achieve new state-of-the-
art results on several of these tasks""",,168.0,1 week,Google TPU v3,4.0,,247.26289010271603,,1812.702685320548,,,,,,Open weights (unrestricted),Open source,Open source,"apache 2.0, code and weights: https://github.com/allenai/scibert/",,
NMT Transformer 437M,"Google,Bar-Ilan University",2019-02-28,Language,Translation,437700000.0,"""Regarding the model, for these experiments we
use a larger Transformer model with 6 layers in
both the encoder and the decoder, model dimension set to 1024, hidden dimension size of 8192,
and 16 attention heads. This results in a model
with approximately 473.7M parameters.""",,,,,"96M total examples, per Table 4. One sentence per example?",Confident,https://arxiv.org/abs/1903.00089,Massively Multilingual Neural Machine Translation,520.0,"Roee Aharoni, Melvin Johnson, Orhan Firat","Multilingual neural machine translation (NMT) enables training a single model that supports translation from multiple source languages into multiple target languages. In this paper, we push the limits of multilingual NMT in terms of number of languages being used. We perform extensive experiments in training massively multilingual NMT models, translating up to 102 languages to and from English within a single model. We explore different setups for training such models and analyze the trade-offs between translation quality and various modeling decisions. We report results on the publicly available TED talks multilingual corpus where we show that massively multilingual many-to-many models are effective in low resource settings, outperforming the previous state-of-the-art while supporting up to 59 languages. Our experiments on a large-scale dataset with 102 languages to and from English and up to one million examples per direction also show promising results, surpassing strong bilingual baselines and encouraging future work on massively multilingual NMT.","Industry,Academia","United States of America,Israel",SOTA improvement,"""We report results on the publicly available TED talks multilingual corpus where we show that massively multilingual many-to-many models are effective in low resource settings, outperforming the previous state-of-the-art while supporting up to 59 languages.""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
KataGo,Jane Street,2019-02-27,Games,Go,2500000.0,https://arxiv.org/abs/2210.00849 gives parameter count for AlphaZero in Fig 1b.,2.32e+19,"""[KataGo] surpasses the strength of ELF OpenGo after training on about 27 V100 GPUs for 19 days""
14.13 teraFLOP/s * 19 days = 2.32e+19 FLOP",,241000000.0,241 million training samples across 4.2 million games,Speculative,https://arxiv.org/abs/1902.10565,Accelerating Self-Play Learning in Go,85.0,David J. Wu,"By introducing several improvements to the AlphaZero process and architecture, we greatly accelerate self-play learning in Go, achieving a 50x reduction in computation over comparable methods. Like AlphaZero and replications such as ELF OpenGo and Leela Zero, our bot KataGo only learns from neural-net-guided Monte Carlo tree search self-play. But whereas AlphaZero required thousands of TPUs over several days and ELF required thousands of GPUs over two weeks, KataGo surpasses ELF's final model after only 19 days on fewer than 30 GPUs. Much of the speedup involves non-domain-specific improvements that might directly transfer to other problems. Further gains from domain-specific techniques reveal the remaining efficiency gap between the best methods and purely general methods such as AlphaZero. Our work is a step towards making learning in state spaces as large as Go possible without large-scale computational resources.",Industry,"Multinational,United States of America",SOTA improvement,Better than ELF OpenGo while using 1/50th the compute.,,456.0,27 processors for 19 days,NVIDIA Tesla V100 DGXS 16 GB,,,104.91425851608678,,,,,,,,Open weights (unrestricted),Open source,Open source,"permissive license https://github.com/lightvector/KataGo/blob/master/LICENSE

training here: https://github.com/lightvector/KataGo/blob/master/SelfplayTraining.md ",FP16,
ProxylessNAS,Massachusetts Institute of Technology (MIT),2019-02-23,Vision,"Image classification,Neural Architecture Search - NAS",,,3.723192e+18,"For their searched Imagenet models, they used 200 GPU hours on a V100 GPU.

At FP32, a V100 GPU has a peak performance of 1.56E+13 FLOPS.

Utilization rate of 0.33.

200 h * 3600 second / hour* 1.6e+13 flop /second * 0.33 = 3.7e+18 flop",ImageNet,1280000.0,,Confident,https://arxiv.org/abs/1812.00332,ProxylessNAS: Direct neural architecture search on target task and hardware,1806.0,"Han Cai, Ligeng Zhu, and Song Han","Neural architecture search (NAS) has a great impact by automatically designing effective neural network architectures. However, the prohibitive computational demand of conventional NAS algorithms (e.g. 104 GPU hours) makes it difficult to \emph{directly} search the architectures on large-scale tasks (e.g. ImageNet). Differentiable NAS can reduce the cost of GPU hours via a continuous representation of network architecture but suffers from the high GPU memory consumption issue (grow linearly w.r.t. candidate set size). As a result, they need to utilize~\emph{proxy} tasks, such as training on a smaller dataset, or learning with only a few blocks, or training just for a few epochs. These architectures optimized on proxy tasks are not guaranteed to be optimal on the target task. In this paper, we present \emph{ProxylessNAS} that can \emph{directly} learn the architectures for large-scale target tasks and target hardware platforms. We address the high memory consumption issue of differentiable NAS and reduce the computational cost (GPU hours and GPU memory) to the same level of regular training while still allowing a large candidate set. Experiments on CIFAR-10 and ImageNet demonstrate the effectiveness of directness and specialization. On CIFAR-10, our model achieves 2.08\% test error with only 5.7M parameters, better than the previous state-of-the-art architecture AmoebaNet-B, while using 6× fewer parameters. On ImageNet, our model achieves 3.1\% better top-1 accuracy than MobileNetV2, while being 1.2× faster with measured GPU latency. We also apply ProxylessNAS to specialize neural architectures for hardware with direct hardware metrics (e.g. latency) and provide insights for efficient CNN architecture design.",Academia,United States of America,Highly cited,,,,,NVIDIA V100,,,122.74110657965193,,,,,,,,Open weights (unrestricted),Open source,Open source,MIT for code+weights https://github.com/MIT-HAN-LAB/ProxylessNAS,FP32,
GPT-2 (1.5B),OpenAI,2019-02-14,Language,Language modeling/generation,1500000000.0,"""GPT-2 is a large transformer-based language model with 1.5 billion parameters""",1.920000000001e+21,"Estimating based on compute = 6 FLOP/token/param * epochs * parameters * tokens.

40GB dataset is approximately 8B words, or 1/0.75 * 8B = 10.66B tokens.

The number of epochs is not reported, but another paper [1] claims in table 1 that it is 20 or 100 epochs, and another paper [2] claims 12 epochs based on communication with the GPT-2 authors (page 4).

12 epochs is the modal, most credible value. Mean of probability mass is probably around 20 epochs, so calculating from that value:

6 * (40 * 200 million * 1/0.75 * 20) * 1.5 billion parameters = 1.92e21
https://www.wolframalpha.com/input?i=6+FLOP+*+20+*+%2840+billion+%2F+5+*+%284%2F3%29%29+*+1.5+billion

[1] https://arxiv.org/abs/1906.06669 One Epoch Is All You Need
[2] https://www.usenix.org/system/files/sec21-carlini-extracting.pdf Extracting Data From Large Language Models

It also appears the model was trained on TPU v3 chips:
https://huggingface.co/openai-community/gpt2",WebText,10666666666.666666,"“All results presented in this paper use a preliminary version of WebText which does not include links created after Dec 2017 and which after de-duplication and some heuristic based cleaning contains slightly over 8 million documents for a total of 40 GB of text.”
40GB is approximately 8e9 words.
",Speculative,https://cdn.openai.com/better-language-models/language_models_are_unsupervised_multitask_learners.pdf,Language Models are Unsupervised Multitask Learners,19228.0,"Alec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, Ilya Sutskever","Natural language processing tasks, such as question answering, machine translation, reading comprehension, and summarization, are typically approached with supervised learning on taskspecific datasets. We demonstrate that language models begin to learn these tasks without any explicit supervision when trained on a new dataset of millions of webpages called WebText. When conditioned on a document plus questions, the answers generated by the language model reach 55 F1 on the CoQA dataset - matching or exceeding the performance of 3 out of 4 baseline systems without using the 127,000+ training examples. The capacity of the language model is essential to the success of zero-shot task transfer and increasing it improves performance in a log-linear fashion across tasks. Our largest model, GPT-2, is a 1.5B parameter Transformer that achieves state of the art results on 7 out of 8 tested language modeling datasets in a zero-shot setting but still underfits WebText. Samples from the model reflect these improvements and contain coherent paragraphs of text. These findings suggest a promising path towards building language processing systems which learn to perform tasks from their naturally occurring demonstrations.",Industry,United States of America,Highly cited,,20.0,,,Google TPU v3,,,4348.443645,,,,,,,,Open weights (unrestricted),Unreleased,,"modified MIT
https://github.com/openai/gpt-2?tab=License-1-ov-file#readme",,True
Hanabi 4 player,"DeepMind,University of Oxford,Carnegie Mellon University (CMU),Google Brain",2019-02-01,Games,Hanabi,764000.0,source: https://docs.google.com/spreadsheets/d/1Kj4Q5WADcDXtUJLIOfGTCE3tGvxNczEMwyy8QtgSkHk/edit#gid=54587040&fvid=1361937389,4.3e+18,14.13e+12 FLOP/s * 7 days * 86400 s/day * 0.50 utilization = 4.3e+18 FLOP,,,,Confident,https://arxiv.org/abs/1902.00506,The Hanabi Challenge: A New Frontier for AI Research,229.0,,,"Industry,Academia,Academia,Industry","United Kingdom of Great Britain and Northern Ireland,United Kingdom of Great Britain and Northern Ireland,United States of America,United States of America",Historical significance,Adapted some SOTA RL algorithms to a new task that posed research challenges,,,,NVIDIA V100,,,,"7 days on V100 –> 7 * 24 * $0.55 = $92.40
Adjust to 2020 dollars: $78.32",,,,,,,Unreleased,Unreleased,,,,
MT-DNN,Microsoft,2019-01-31,Language,Language modeling,330000000.0,,,,"GLUE,SciTail",,,,https://arxiv.org/abs/1901.11504,Multi-Task Deep Neural Networks for Natural Language Understanding,1217.0,"X Liu, P He, W Chen, J Gao","In this paper, we present a Multi-Task Deep Neural Network (MT-DNN) for learning representations across multiple natural language understanding (NLU) tasks. MT-DNN not only leverages large amounts of cross-task data, but also benefits from a regularization effect that leads to more general representations in order to adapt to new tasks and domains. MT-DNN extends the model proposed in Liu et al. (2015) by incorporating a pre-trained bidirectional transformer language model, known as BERT (Devlin et al., 2018). MT-DNN obtains new state-of-the-art results on ten NLU tasks, including SNLI, SciTail, and eight out of nine GLUE tasks, pushing the GLUE benchmark to 82.7% (2.2% absolute improvement). We also demonstrate using the SNLI and SciTail datasets that the representations learned by MT-DNN allow domain adaptation with substantially fewer in-domain labels than the pre-trained BERT representations. The code and pre-trained models are publicly available at this https URL.",Industry,"United States of America,Multinational,India,Belgium","Highly cited,SOTA improvement","""MT-DNN extends the model proposed in Liu et al. (2015) by incorporating a pre-trained bidirectional transformer language model, known as BERT (Devlin et al., 2018). MT-DNN obtains new state-of-the-art results on ten NLU tasks, including SNLI, SciTail, and eight out of nine GLUE tasks, pushing the GLUE benchmark to 82.7% (2.2% absolute improvement)""",,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,MIT for code/weights: https://github.com/namisan/mt-dnn,FP16,
Transformer-XL (257M),"Carnegie Mellon University (CMU),Google Brain",2019-01-09,Language,Language modeling/generation,257000000.0,"Transformer-XL Large, Table 1",3.7832771e+20,"6 FLOP / token / parameter * 257000000 parameters * 103000000 tokens * 1908 epochs [see dataset size notes] = 3.0304001e+20 FLOP

from training code (https://github.com/kimiyoung/transformer-xl/blob/master/tf/scripts/wt103_large_tpu.sh) they used 64 tpv3 cores 

123000000000000 FLOP/s/chip* (64 cores / 2 cores per chip) * 4000000 steps *  0.1 sec / step [assumption] * 0.3 [assumed utilization] = 4.7232e+20 FLOP

geometric mean
sqrt(3.0304001e+20 * 4.7232e+20) = 3.7832771e+20

speculative confidence given assumptions used
_________
previous estimation in the algorithmic progress paper was 1.09 × 10^19 FLOP without explanation 
",WikiText-103,103000000.0,"from the training code (https://github.com/kimiyoung/transformer-xl/blob/master/pytorch/run_wt103_large.sh):

--tgt_len 384
--batch_size 128
--max_step 4000000 

384*128*4000000 / 103000000 = 1908 epochs",Speculative,https://arxiv.org/abs/1901.02860,Transformer-XL: Attentive Language Models Beyond a Fixed-Length Context,3430.0,"Zihang Dai, Zhilin Yang, Yiming Yang, Jaime Carbonell, Quoc V. Le, Ruslan Salakhutdinov","Transformers have a potential of learning longer-term dependency, but are limited by a fixed-length context in the setting of language modeling. We propose a novel neural architecture Transformer-XL that enables learning dependency beyond a fixed length without disrupting temporal coherence. It consists of a segment-level recurrence mechanism and a novel positional encoding scheme. Our method not only enables capturing longer-term dependency, but also resolves the context fragmentation problem. As a result, Transformer-XL learns dependency that is 80% longer than RNNs and 450% longer than vanilla Transformers, achieves better performance on both short and long sequences, and is up to 1,800+ times faster than vanilla Transformers during evaluation. Notably, we improve the state-of-the-art results of bpc/perplexity to 0.99 on enwiki8, 1.08 on text8, 18.3 on WikiText-103, 21.8 on One Billion Word, and 54.5 on Penn Treebank (without finetuning). When trained only on WikiText-103, Transformer-XL manages to generate reasonably coherent, novel text articles with thousands of tokens. Our code, pretrained models, and hyperparameters are available in both Tensorflow and PyTorch.","Academia,Industry","United States of America,United States of America",Highly cited,,1908.0,,,Google TPU v3,32.0,,,,14526.185855419688,,,,49152.0,"384*128 --tgt_len 384
--batch_size 128",Open weights (unrestricted),Open source,Open source,"Apache 2.0, includes train code
https://github.com/kimiyoung/transformer-xl?tab=Apache-2.0-1-ov-file#readme",FP32,
Decoupled weight decay regularization,University of Freiburg,2019-01-04,Vision,Image classification,36500000.0,"From author communication

WideResNet 28-10 models with 36.5 million parameters (3.65E+07)",4.716e+17,"From author communication

Per image: 5.24 billion FLOPs (5.24E+09)  Per training run: 50k times 5.24E+09 times 1800 epochs

5240000000*50000*1800=471600000000000000=4.72e17",CIFAR-10,50000.0,,Confident,https://arxiv.org/abs/1711.05101,Decoupled weight decay regularization.,2061.0,Ilya Loshchilov and Frank Hutter,"L2 regularization and weight decay regularization are equivalent for standard stochastic gradient descent (when rescaled by the learning rate), but as we demonstrate this is \emph{not} the case for adaptive gradient algorithms, such as Adam. While common implementations of these algorithms employ L2 regularization (often calling it ""weight decay"" in what may be misleading due to the inequivalence we expose), we propose a simple modification to recover the original formulation of weight decay regularization by \emph{decoupling} the weight decay from the optimization steps taken w.r.t. the loss function. We provide empirical evidence that our proposed modification (i) decouples the optimal choice of weight decay factor from the setting of the learning rate for both standard SGD and Adam and (ii) substantially improves Adam's generalization performance, allowing it to compete with SGD with momentum on image classification datasets (on which it was previously typically outperformed by the latter). Our proposed decoupled weight decay has already been adopted by many researchers, and the community has implemented it in TensorFlow and PyTorch; the complete source code for our experiments is available at this https URL",Academia,Germany,Highly cited,,,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"license: https://github.com/loshchil/AdamW-and-SGDW/blob/master/LICENSE

code, including checkpoints: https://github.com/loshchil/AdamW-and-SGDW/blob/master/README.md ",,
Transformer ELMo,"Allen Institute for AI,University of Washington",2019-01-01,Language,Language modeling,56000000.0,,,,,,,,https://www.semanticscholar.org/paper/Dissecting-Contextual-Word-Embeddings%3A-Architecture-Peters-Neumann/ac11062f1f368d97f4c826c317bf50dcc13fdb59,Dissecting Contextual Word Embeddings: Architecture and Representation,406.0,"ME Peters, M Neumann, L Zettlemoyer, W Yih",,"Research collective,Academia","United States of America,United States of America",SOTA improvement,"""Our model is the Reconciled Span Parser (RSP; Joshi et al., 2018), which, using ELMo representations, achieved state of the art performance for this
task. As shown in Table 2, the LSTM based models demonstrate the best performance with a 0.2% and 1.0% improvement over the Transformer and CNN models, respectively""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
GPipe (Transformer),Google,2018-11-16,Language,Translation,6000000000.0,Section 5: ,,,,20000000000.0,"[WORDS]

Section 5: ""We use a
corpus of parallel documents over 102 languages and English, containing a total of 25 billion training examples, ranging from 10^4 to 10^9 per language""

10^9 sentences * 20 words per sentence",,https://arxiv.org/abs/1811.06965,GPipe: Efficient Training of Giant Neural Networks using Pipeline Parallelism,1218.0,"Y Huang, Y Cheng, A Bapna, O Firat",,Industry,United States of America,"Highly cited,SOTA improvement","""We train a single 6-billion-parameter,
128-layer Transformer model on a corpus spanning over 100 languages and achieve better quality than all bilingual models.""",,,,,,,,,,,,,,,,,,,,
GPipe (Amoeba),Google,2018-11-16,Vision,Image classification,557000000.0,Section 4,,,ImageNet,1281167.0,Table 4,,https://arxiv.org/abs/1811.06965,GPipe: Efficient Training of Giant Neural Networks using Pipeline Parallelism,1218.0,"Yanping Huang, Youlong Cheng, Ankur Bapna, Orhan Firat, Mia Xu Chen, Dehao Chen, HyoukJoong Lee, Jiquan Ngiam, Quoc V. Le, Yonghui Wu, Zhifeng Chen",,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Multi-cell LSTM,University of Hyderabad,2018-11-15,Language,Language modeling,7200000.0,"Based on the details in the paper, the number of parameters in the Multi-cell LSTM model can be calculated as follows:

The model has 2 hidden LSTM layers, each with 1500 hidden units

Each LSTM unit is a multi-cell LSTM with 10 memory cells per unit

For a standard LSTM layer with n hidden units:

W matrix: n x input_size
U matrix: n x n
4 bias vectors of size n (for input, forget, cell, output gates)
So for each multi-cell LSTM layer with 1500 units and 10 cells per unit:

W matrix: 1500 x input_size
U matrix: 1500 x 1500
4 bias vectors of size 1500
Number of parameters is same as standard LSTM layer

For the 2 hidden layers:

Input size for Layer 1: embedding dimension (estimated 300 in paper)

Input size for Layer 2: 1500 (output of layer 1)

Total params =
Layer 1: 1500 x (300 + 1500 + 4) = 2,706,000
Layer 2: 1500 x (1500 + 1500 + 4) = 4,506,000

Total Parameters = 2,706,000 + 4,506,000 = 7,212,000

So the total number of parameters for the Multi-cell LSTM model with 2 layers of 1500 units and 10 cells per unit is approximately 7.2 million.",2006640000000000.0,6 FLOP / parameter / token * 7200000 parameters * 929000 tokens * 50 epochs = 2.00664e+15 FLOP,Penn TreeBank (PTB),929000.0,50 epochs (from Figure 4),Likely,https://arxiv.org/abs/1811.06477,Multi-cell LSTM Based Neural Language Model,6.0,"Thomas Cherian, Akshay Badola, Vineet Padmanabhan","Language models, being at the heart of many NLP problems, are always of great interest to researchers. Neural language models come with the advantage of distributed representations and long range contexts. With its particular dynamics that allow the cycling of information within the network, `Recurrent neural network' (RNN) becomes an ideal paradigm for neural language modeling. Long Short-Term Memory (LSTM) architecture solves the inadequacies of the standard RNN in modeling long-range contexts. In spite of a plethora of RNN variants, possibility to add multiple memory cells in LSTM nodes was seldom explored. Here we propose a multi-cell node architecture for LSTMs and study its applicability for neural language modeling. The proposed multi-cell LSTM language models outperform the state-of-the-art results on well-known Penn Treebank (PTB) setup.",Academia,India,SOTA improvement,"""The proposed multi-cell LSTM language models outperform the state-of-the-art results on well-known Penn Treebank (PTB) setup""",50.0,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
Fine-tuned-AWD-LSTM-DOC (fin),Samsung R&D Institute Russia,2018-11-12,Language,Language modeling,46000000.0,"This is the model trained on Penn Treebank, which uses as a base model the 23M model from Table 7 in https://aclanthology.org/D18-1489.pdf

They additionally train a discriminator with the same architecture, so total parameters is 2*23M = 46M",5.188e+16,"Base model uses 4.323e16 FLOPs.
They then train a discriminator using the same architecture for 30 epochs, and then use the discriminator to fine-tune the base model for another 15 epochs. Both of these latter training steps require running forward passes on both the discriminator and the language model, but only doing a backward pass on one of them.

Discriminator training: 
2*23M*30*1044112 + 6*23M*30*1044112 = 5.763e15

LM fine-tuning:
2*23M*15*1044112 + 6*23M*15*1044112 = 2.882e15

Total:
4.323e16 + 5.763e15 + 2.882e15 = 5.188e16",Penn TreeBank (PTB),1044112.0,"Per https://arxiv.org/pdf/1904.04733:
""The most common split of this corpus, where sections from 0 to 18 are used for training (38 219 sentences, 912 344 tokens), sections from 19 to 21 are used for validation (5 527 sentences, 131 768 tokens), and sections from 22 to 24 are used for testing (5 462 sentences, 129 654 tokens).""

So dev set is 912,344 + 131768 = 1,044,112",Confident,https://arxiv.org/abs/1811.04623,Fine-tuning of Language Models with Discriminator,2.0,"Vadim Popov, Mikhail Kudinov","Cross-entropy loss is a common choice when it comes to multiclass classification tasks and language modeling in particular. Minimizing this loss results in language models of very good quality. We show that it is possible to fine-tune these models and make them perform even better if they are fine-tuned with sum of cross-entropy loss and reverse Kullback-Leibler divergence. The latter is estimated using discriminator network that we train in advance. During fine-tuning probabilities of rare words that are usually underestimated by language models become bigger. The novel approach that we propose allows us to reach state-of-the-art quality on Penn Treebank: perplexity decreases from 52.4 to 52.1. Our fine-tuning algorithm is rather fast, scales well to different architectures and datasets and requires almost no hyperparameter tuning: the only hyperparameter that needs to be tuned is learning rate.",Industry,Russia,SOTA improvement,"""The novel approach that we propose allows us to reach state-of-theart quality on Penn Treebank: perplexity decreases from 52.4 to 52.1.""",15.0,,,,,,,,,AWD-LSTM-DOC (fin) (23M),,,,,Unreleased,Unreleased,,,,
Mesh-TensorFlow Transformer 4.9B (language),Google Brain,2018-11-05,Language,"Language modeling/generation,Translation",4900000000.0,4.9B from section 9.1 : ''The largest model (4.9B parameters) took 13 hours to train on a 512-core TPUv2 cluster.',1.617408e+20,"flops = (256) * ( 45 * 10**12) * (13 * 3600) * (0.3) = 1.6e20
(num gpu) * (peak flops) * (time in seconds) * (assumed utilization rate)

from section 9.1 : ''The largest model (4.9B parameters) took 13 hours to train on a 512-core TPUv2 cluster.'
from https://en.wikipedia.org/wiki/Tensor_Processing_Unit 
45TFLOPs per chips","Wikipedia,One Billion Word benchmark",6333333333.333333,"from section 9.1. Experiments done on a ""billion word benchmark"" and a 5B token wikipedia dataset. At 4/3 tokens per word, 1.3B tokens in the first.",Confident,https://arxiv.org/abs/1811.02084,Mesh-TensorFlow: Deep Learning for Supercomputers,357.0,"Noam Shazeer, Youlong Cheng, Niki Parmar, Dustin Tran, Ashish Vaswani, Penporn Koanantakool, Peter Hawkins, Hyoukjoong Mingsheng Lee, Cliff Hong, Ryan Young, Blake Sepassi,  Hechtman","Batch-splitting (data-parallelism) is the dominant distributed Deep Neural Network (DNN) training strategy, due to its universal applicability and its amenability to Single-Program-Multiple-Data (SPMD) programming. However, batch-splitting suffers from problems including the inability to train very large models (due to memory constraints), high latency, and inefficiency at small batch sizes. All of these can be solved by more general distribution strategies (model-parallelism). Unfortunately, efficient model-parallel algorithms tend to be complicated to discover, describe, and to implement, particularly on large clusters. We introduce Mesh-TensorFlow, a language for specifying a general class of distributed tensor computations. Where data-parallelism can be viewed as splitting tensors and operations along the ""batch"" dimension, in Mesh-TensorFlow, the user can specify any tensor-dimensions to be split across any dimensions of a multi-dimensional mesh of processors. A Mesh-TensorFlow graph compiles into a SPMD program consisting of parallel operations coupled with collective communication primitives such as Allreduce. We use Mesh-TensorFlow to implement an efficient data-parallel, model-parallel version of the Transformer sequence-to-sequence model. Using TPU meshes of up to 512 cores, we train Transformer models with up to 5 billion parameters, surpassing state of the art results on WMT'14 English-to-French translation task and the one-billion-word language modeling benchmark. Mesh-Tensorflow is available at this https URL .",Industry,United States of America,SOTA improvement,"'Using TPU meshes of up to 512 cores, we train Transformer models with up to 5 billion parameters, surpassing state of the art results on WMT'14 English-to-French translation task and the one-billion-word language modeling benchmark.'",10.0,13.0,"from section 9.1 ""For the billion-word language modeling benchmark, we trained the models for 10 epochs. The largest model (4.9B parameters) took 13 hours to train on a 512-core TPUv2 cluster.""",Google TPU v2,256.0,,935.3300509163912,,148117.2291982981,,,,,,Unreleased,Open source,Open source,"code here, apache license: https://github.com/tensorflow/mesh/tree/master/mesh_tensorflow/transformer 

https://github.com/tensorflow/mesh/blob/master/mesh_tensorflow/transformer/transformer.py ",,
Mesh-TensorFlow Transformer 2.9B (translation),Google Brain,2018-11-05,Language,"Language modeling/generation,Translation",2900000000.0,"2.9B from section 9.1 : ""On the WMT14 En-Fr translation tasks (3), we trained the models for 3 epochs. The largest model
(2.9B parameters) was trained for 22 hours on a 128-core TPUv2 cluster.""",6.84288e+19,"flops = (64) * ( 45 * 10**12) * (22 * 3600) * (0.3) = 6.8e19
(num gpu) * (peak flops) * (time in seconds) * (assumed utilization rate)

from section 9.1 : ""On the WMT14 En-Fr translation tasks (3), we trained the models for 3 epochs. The largest model
(2.9B parameters) was trained for 22 hours on a 128-core TPUv2 cluster.""
from https://en.wikipedia.org/wiki/Tensor_Processing_Unit 
45TFLOPs per chips",WMT14,1800000000.0,"Per Attention is All You Need, WMT 2014 En-Fr is ~36 million sentence pairs. If the average sentence is ~25 tokens (ballpark), dataset size is 
36M * 25 * 2 = 1.8B tokens",Likely,https://arxiv.org/abs/1811.02084,Mesh-TensorFlow: Deep Learning for Supercomputers,357.0,"Noam Shazeer, Youlong Cheng, Niki Parmar, Dustin Tran, Ashish Vaswani, Penporn Koanantakool, Peter Hawkins, Hyoukjoong Mingsheng Lee, Cliff Hong, Ryan Young, Blake Sepassi,  Hechtman","Batch-splitting (data-parallelism) is the dominant distributed Deep Neural Network (DNN) training strategy, due to its universal applicability and its amenability to Single-Program-Multiple-Data (SPMD) programming. However, batch-splitting suffers from problems including the inability to train very large models (due to memory constraints), high latency, and inefficiency at small batch sizes. All of these can be solved by more general distribution strategies (model-parallelism). Unfortunately, efficient model-parallel algorithms tend to be complicated to discover, describe, and to implement, particularly on large clusters. We introduce Mesh-TensorFlow, a language for specifying a general class of distributed tensor computations. Where data-parallelism can be viewed as splitting tensors and operations along the ""batch"" dimension, in Mesh-TensorFlow, the user can specify any tensor-dimensions to be split across any dimensions of a multi-dimensional mesh of processors. A Mesh-TensorFlow graph compiles into a SPMD program consisting of parallel operations coupled with collective communication primitives such as Allreduce. We use Mesh-TensorFlow to implement an efficient data-parallel, model-parallel version of the Transformer sequence-to-sequence model. Using TPU meshes of up to 512 cores, we train Transformer models with up to 5 billion parameters, surpassing state of the art results on WMT'14 English-to-French translation task and the one-billion-word language modeling benchmark. Mesh-Tensorflow is available at this https URL .",Industry,United States of America,SOTA improvement,"'Using TPU meshes of up to 512 cores, we train Transformer models with up to 5 billion parameters, surpassing state of the art results on WMT'14 English-to-French translation task and the one-billion-word language modeling benchmark.'",10.0,22.0,"from section 9.1 ""On the WMT14 En-Fr translation tasks (3), we trained the models for 3 epochs. The largest model
(2.9B parameters) was trained for 22 hours on a 128-core TPUv2 cluster.""",Google TPU v2,64.0,,395.71656000308855,,37029.30729957453,,,,,,Unreleased,Open source,Open source,"code here, apache license https://github.com/tensorflow/mesh/tree/master/mesh_tensorflow/transformer 

https://github.com/tensorflow/mesh/blob/master/mesh_tensorflow/transformer/transformer.py  ",,
MemoReader,"Samsung,Korea University",2018-10-31,Language,Question answering,,,,"""Our model does require more memory than existing methods, but a single GPU (e.g., M40 with 12GB memory) was enough to train model within a reasonable amount of time""

""Reasonable"" could mean anything, maybe hours to a few days.",TriviaQA,,,Unknown,https://aclanthology.org/D18-1237/,"MemoReader: Large-Scale Reading Comprehension through Neural Memory Controller
",17.0,"Seohyun Back, Seunghak Yu, Sathish Indurthi, Jihie Kim, Jaegul Choo","Machine reading comprehension helps machines learn to utilize most of the human
knowledge written in the form of text. Existing approaches made a significant progress comparable to human-level performance, but they
are still limited in understanding, up to a few paragraphs, failing to properly comprehend
lengthy document. In this paper, we propose a novel deep neural network architecture to handle a long-range dependency in RC tasks. In
detail, our method has two novel aspects: (1) an advanced memory-augmented architecture
and (2) an expanded gated recurrent unit with dense connections that mitigate potential information distortion occurring in the memory.
Our proposed architecture is widely applicable
to other models. We have performed extensive experiments with well-known benchmark
datasets such as TriviaQA, QUASAR-T, and
SQuAD. The experimental results demonstrate
that the proposed method outperforms existing
methods, especially for lengthy documents.","Industry,Academia","Korea (Republic of),Korea (Republic of)",SOTA improvement,"""TriviaQA. As shown in Table 2, our model,
even without DEBS, outperforms the existing
state-of-the-art method such as ‘BiDAF + SA +
SN’ by a large margin in all the cases""",,,"""reasonable amount of time"" with a single GPU",NVIDIA M40,,,,,,,,,,,Unreleased,,,,,
TrellisNet,"Carnegie Mellon University (CMU),Bosch Center for Artificial Intelligence,Intel Labs",2018-10-15,Language,Language modeling,180000000.0,"180M, Table 2",2.78e+18,6 FLOP / parameter / token * 180000000 parameters * 103000000 tokens * 25 epochs = 2.781e+18 FLOP,WikiText-103,103000000.0,,Confident,https://arxiv.org/abs/1810.06682,Trellis Networks for Sequence Modeling,138.0,"Shaojie Bai, J. Zico Kolter, Vladlen Koltun","We present trellis networks, a new architecture for sequence modeling. On the one hand, a trellis network is a temporal convolutional network with special structure, characterized by weight tying across depth and direct injection of the input into deep layers. On the other hand, we show that truncated recurrent networks are equivalent to trellis networks with special sparsity structure in their weight matrices. Thus trellis networks with general weight matrices generalize truncated recurrent networks. We leverage these connections to design high-performing trellis networks that absorb structural and algorithmic elements from both recurrent and convolutional models. Experiments demonstrate that trellis networks outperform the current state of the art methods on a variety of challenging benchmarks, including word-level language modeling and character-level language modeling tasks, and stress tests designed to evaluate long-term memory retention. The code is available at this https URL .","Academia,Industry,Industry","United States of America,Germany,Multinational,United States of America",SOTA improvement,"""Experiments demonstrate that trellis networks outperform the current state of the art methods on a variety of challenging benchmarks, including word-level language modeling and character-level language modeling
tasks""",25.0,,,,,,,,,,,,,,Unreleased,Open source,Open source,MIT license for code: https://github.com/locuslab/trellisnet/tree/master/TrellisNet/word_WT103 ,,
MetaMimic,Google,2018-10-11,Robotics,Robotic manipulation,22000000.0,"""This representational demand motivates the introduction of high-capacity deep neural networks. We found the architecture, shown in Figure 3, with residual connections, 20 convolution layers with 512 channels
for a total of 22 million parameters, and instance normalization to drastically improve performance, as shown in Figure 6 of the Experiments section.""",,,,,,,https://arxiv.org/abs/1810.05017,One-Shot High-Fidelity Imitation: Training Large-Scale Deep Nets with RL,26.0,"Tom Le Paine, Sergio Gomez","Humans are experts at high-fidelity imitation -- closely mimicking a demonstration, often in one attempt. Humans use this ability to quickly solve a task instance, and to bootstrap learning of new tasks. Achieving these abilities in autonomous agents is an open problem. In this paper, we introduce an off-policy RL algorithm (MetaMimic) to narrow this gap. MetaMimic can learn both (i) policies for high-fidelity one-shot imitation of diverse novel skills, and (ii) policies that enable the agent to solve tasks more efficiently than the demonstrators. MetaMimic relies on the principle of storing all experiences in a memory and replaying these to learn massive deep neural network policies by off-policy RL. This paper introduces, to the best of our knowledge, the largest existing neural networks for deep RL and shows that larger networks with normalization are needed to achieve one-shot high-fidelity imitation on a challenging manipulation task. The results also show that both types of policy can be learned from vision, in spite of the task rewards being sparse, and without access to demonstrator actions.",Industry,United States of America,SOTA improvement,"""By retaining and taking advantage of all its experiences,
MetaMimic also substantially outperforms the state-of-the-art D4PG RL agent, when D4PG
uses only the current task experiences.""",,,,,,,,,,,,,,,,,,,,
BERT-Large,Google,2018-10-11,Language,"Question answering,Text autocompletion",340000000.0,340M,2.85e+20,"more info here https://docs.google.com/document/d/1B8x6XYcmB1u6Tmq3VcbAtj5bzhDaj2TcIPyK6Wpupx4/edit?usp=sharing
285000000000000000000 = 2.85 × 10^20

""AI and Memory Wall"" paper (https://github.com/amirgholami/ai_and_memory_wall) made an estimation of 250,000 PFLOPS = 2.5*10^20 FLOP","BookCorpus (BooksCorpus, Toronto Book Corpus),English Wikipedia",3300000000.0,"""For the pre-training corpus we
use the BooksCorpus (800M words) (Zhu et al., 2015) and English Wikipedia (2,500M words)""",Confident,https://arxiv.org/abs/1810.04805,BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding,83567.0,"J Devlin, MW Chang, K Lee, K Toutanova","We introduce a new language representation model called BERT, which stands for Bidirectional Encoder Representations from Transformers. Unlike recent language representation models, BERT is designed to pre-train deep bidirectional representations from unlabeled text by jointly conditioning on both left and right context in all layers. As a result, the pre-trained BERT model can be fine-tuned with just one additional output layer to create state-of-the-art models for a wide range of tasks, such as question answering and language inference, without substantial task-specific architecture modifications. BERT is conceptually simple and empirically powerful. It obtains new state-of-the-art results on eleven natural language processing tasks, including pushing the GLUE score to 80.5% (7.7% point absolute improvement), MultiNLI accuracy to 86.7% (4.6% absolute improvement), SQuAD v1.1 question answering Test F1 to 93.2 (1.5 point absolute improvement) and SQuAD v2.0 Test F1 to 83.1 (5.1 point absolute improvement).",Industry,United States of America,Highly cited,,40.0,96.0,"from appendix A.2: ""Training of BERTLARGE was performed
on 16 Cloud TPUs (64 TPU chips total). Each pre-
training took 4 days to complete.""",Google TPU v2,64.0,0.2801,1751.4770087736404,,37049.92852412132,,,,128000.0,,Open weights (unrestricted),Open source,Open source,"apache 2.0
train+inference code and models here: https://github.com/google-research/bert ",,
Transformer (Adaptive Input Embeddings) WT103,Facebook AI Research,2018-09-28,Language,Language modeling,247000000.0,Table 2,4.47e+19,"8 V100s * 67 hours per Table 2.
125e12 FLOP/sec * 8 * 67 * 3600 * 0.3 (utilization assumption) = 7.2e19 FLOP

They also say they trained for 286k steps in batches of 65,536 tokens.
6 * 247M * (286k * 65536) = 2.78e19

geometric mean: sqrt(7.2e19 * 2.78e19) = 4.47e19",WikiText-103,100000000.0,"""The training data of WIKITEXT-103 comprises about 100M tokens""
Datasets are not combined but used to train separate models",Confident,https://arxiv.org/abs/1809.10853,Adaptive Input Representations for Neural Language Modeling,366.0,"Alexei Baevski, Michael Auli","We introduce adaptive input representations for neural language modeling which extend the adaptive softmax of Grave et al. (2017) to input representations of variable capacity. There are several choices on how to factorize the input and output layers, and whether to model words, characters or sub-word units. We perform a systematic comparison of popular choices for a self-attentional architecture. Our experiments show that models equipped with adaptive embeddings are more than twice as fast to train than the popular character input CNN while having a lower number of parameters. On the WIKITEXT-103 benchmark we achieve 18.7 perplexity, an improvement of 10.5 perplexity compared to the previously best published result and on the BILLION WORD benchmark, we achieve 23.02 perplexity.",Industry,United States of America,SOTA improvement,"""On the WikiText-103 benchmark we achieve 18.7 perplexity, an improvement of 10.5 perplexity compared to the previously best published result""",180.0,67.0,,NVIDIA V100,8.0,,2880.917278699733,,4963.480727525225,,,,,,Open weights (unrestricted),Open source,Open source,"MIT for code and weights: https://github.com/facebookresearch/fairseq/blob/main/examples/language_model/README.adaptive_inputs.md 

inference in other readme: https://github.com/facebookresearch/fairseq/blob/main/examples/language_model/README.md ",FP16,
BigGAN-deep 512x512,"Heriot-Watt University,DeepMind",2018-09-28,Image generation,Image generation,112694781.0,"I used the publicly available implementation available at [1]

There I loaded the biggan-deep512/1 model, and ran script [2] to compute the number of parameters

[1] https://colab.research.google.com/github/tensorflow/hub/blob/master/examples/colab/biggan_generation_with_tf_hub.ipynb

[2]
n_params = 0
for var in module.variables:
  n_params += np.prod(var.shape.as_list())
  pass

print(n_params)",1.8e+21,"3e21, estimate taken from:

https://www.lesswrong.com/posts/wfpdejMWog4vEDLDg/ai-and-compute-trend-isn-t-predictive-of-what-is-happening",JFT-300M,292000000.0,"""To confirm that our design choices are effective for even larger and more complex and diverse datasets, we also present results of our system on a subset of JFT-300M (Sun et al., 2017). The full JFT-300M dataset contains 300M real-world images labeled with 18K categories. Since the category distribution is heavily long-tailed, we subsample the dataset to keep only images with the 8.5K most common labels. The resulting dataset contains 292M images – two orders of magnitude larger than ImageNet. """,Likely,https://arxiv.org/abs/1809.11096,Large Scale GAN Training for High Fidelity Natural Image Synthesis,4925.0,"Andrew Brock, Jeff Donahue, Karen Simonyan","Despite recent progress in generative image modeling, successfully generating high-resolution, diverse samples from complex datasets such as ImageNet remains an elusive goal. To this end, we train Generative Adversarial Networks at the largest scale yet attempted, and study the instabilities specific to such scale. We find that applying orthogonal regularization to the generator renders it amenable to a simple ""truncation trick,"" allowing fine control over the trade-off between sample fidelity and variety by reducing the variance of the Generator's input. Our modifications lead to models which set the new state of the art in class-conditional image synthesis. When trained on ImageNet at 128x128 resolution, our models (BigGANs) achieve an Inception Score (IS) of 166.5 and Frechet Inception Distance (FID) of 7.4, improving over the previous best IS of 52.52 and FID of 18.6.","Academia,Industry","United Kingdom of Great Britain and Northern Ireland,United Kingdom of Great Britain and Northern Ireland",Highly cited,,,48.0,"""We train on a Google TPU v3 Pod, with the number of cores proportional to the resolution: 128 for 128×128, 256 for 256×256, and 512 for 512×512. Training takes between 24 and 48 hours for most models""",Google TPU v3,256.0,,5170.456705747183,,116476.34773925862,,,,,,Open weights (unrestricted),Unreleased,,"repo license is Apache:

https://github.com/tensorflow/tfhub.dev/blob/master/assets/docs/deepmind/models/biggan-deep-512/1.md",FP32,True
LSTM+NeuralCache,"KU Leuven,ESAT - PSI,Apple",2018-09-24,Language,Language modeling,2100000.0,"Given:

Hidden size (H) = 512
Number of hidden layers (L) = 1
Input size (I) is not mentioned, so let's denote it as I
The total number of parameters P in an LSTM can be calculated as follows:

P = 4 * ((I * H) + (H * H) + H)

This is for one layer of LSTM cells. Since the LSTM model described has only one layer, we don't need to multiply by the number of layers.

To calculate the exact number of parameters, we would need to know the input size I. However, if you are looking for the number of parameters just within a single LSTM cell (assuming I is equal to H), then you can substitute I with H in the above formula:

P = 4 * ((H * H) + (H * H) + H)
= 4 * (2 * (H^2) + H)

For H = 512, this becomes:

P = 4 * (2 * (512^2) + 512)
= 4 * (2 * 262144 + 512)
= 4 * (524288 + 512)
= 4 * 524800
≈ 2,099,200",982800000000000.0,6 FLOP / parameter / token * 2100000 parameters * 2000000 tokens * 39 epochs = 9.828e+14 FLOP,WikiText-2,2000000.0,""" we stop training anyway after 39 epochs""",Likely,https://arxiv.org/abs/1809.08826,Information-Weighted Neural Cache Language Models for ASR,3.0,"Lyan Verwimp, Joris Pelemans, Hugo Van hamme, Patrick Wambacq","Neural cache language models (LMs) extend the idea of regular cache language models by making the cache probability dependent on the similarity between the current context and the context of the words in the cache. We make an extensive comparison of 'regular' cache models with neural cache models, both in terms of perplexity and WER after rescoring first-pass ASR results. Furthermore, we propose two extensions to this neural cache model that make use of the content value/information weight of the word: firstly, combining the cache probability and LM probability with an information-weighted interpolation and secondly, selectively adding only content words to the cache. We obtain a 29.9%/32.1% (validation/test set) relative improvement in perplexity with respect to a baseline LSTM LM on the WikiText-2 dataset, outperforming previous work on neural cache LMs. Additionally, we observe significant WER reductions with respect to the baseline model on the WSJ ASR task.","Academia,Academia,Industry","Belgium,Belgium,United States of America",SOTA improvement,"""We obtain a 29.9%/32.1% (validation/test set) relative improvement in perplexity with respect to a baseline LSTM LM on the WikiText-2 dataset, outperforming previous work on neural cache LMs"" 
... 

""we observe that neural cache models
consistently outperform regular cache models on this dataset.""",39.0,,,,,,,,,,,,,,Unreleased,Unreleased,,,FP32,
"AWD-LSTM-MoS + dynamic evaluation (WT2, 2018)","Peking University,Microsoft Research Asia",2018-09-18,Language,"Language modeling,Translation,Text classification",35000000.0,,,,WikiText-2,,,,https://arxiv.org/abs/1809.06858,FRAGE: Frequency-Agnostic Word Representation,152.0,"Chengyue Gong, Di He, Xu Tan, Tao Qin, Liwei Wang, Tie-Yan Liu","Continuous word representation (aka word embedding) is a basic building block in many neural network-based models used in natural language processing tasks. Although it is widely accepted that words with similar semantics should be close to each other in the embedding space, we find that word embeddings learned in several tasks are biased towards word frequency: the embeddings of high-frequency and low-frequency words lie in different subregions of the embedding space, and the embedding of a rare word and a popular word can be far from each other even if they are semantically similar. This makes learned word embeddings ineffective, especially for rare words, and consequently limits the performance of these neural network models. In this paper, we develop a neat, simple yet effective way to learn \emph{FRequency-AGnostic word Embedding} (FRAGE) using adversarial training. We conducted comprehensive studies on ten datasets across four natural language processing tasks, including word similarity, language modeling, machine translation and text classification. Results show that with FRAGE, we achieve higher performance than the baselines in all tasks.","Academia,Industry","China,China",SOTA improvement,"""Specifically, in language modeling and machine translation, we achieve better performance than the state-of-the-art results on PTB, WT2
and WMT14 English-German datasets.""",,,,,,,,,,,,,,,Unreleased,Open (non-commercial),Open source,"code, no license: https://github.com/ChengyueGongR/Frequency-Agnostic ",,
Transformer + Simple Recurrent Unit,"ASAPP,Cornell University,Google,Princeton University",2018-09-17,Language,Translation,90000000.0,"5-layer model, Table 3",1.1e+19,"""We use a single NVIDIA Tesla V100 GPU for each model. The published results were obtained
using 8 GPUs in parallel, which provide a large effective batch size during training. To approximate
the setup, we update the model parameters every 5×5120 tokens and use 16,000 warm-up steps
following OpenNMT suggestions. We train each
model for 40 epochs (250,000 steps), and perform
3 independent trials for each model configuration.
A single run takes about 3.5 days with a Tesla V100 GPU.""

125 trillion * 3.5 * 24 * 3600 * 0.3 = 1.1e19",WMT English-German,,,Confident,https://arxiv.org/abs/1709.02755v5,Simple Recurrent Units for Highly Parallelizable Recurrence,293.0,"Tao Lei, Yu Zhang, Sida I. Wang, Hui Dai, Yoav Artzi","Common recurrent neural architectures scale poorly due to the intrinsic difficulty in parallelizing their state computations. In this work, we propose the Simple Recurrent Unit (SRU), a light recurrent unit that balances model capacity and scalability. SRU is designed to provide expressive recurrence, enable highly parallelized implementation, and comes with careful initialization to facilitate training of deep models. We demonstrate the effectiveness of SRU on multiple NLP tasks. SRU achieves 5--9x speed-up over cuDNN-optimized LSTM on classification and question answering datasets, and delivers stronger results than LSTM and convolutional models. We also obtain an average of 0.7 BLEU improvement over the Transformer model on translation by incorporating SRU into the architecture.","Industry,Academia,Industry,Academia","United States of America,United States of America,United States of America,United States of America",SOTA improvement,"""We use the state-of-the-art Transformer
model of Vaswani et al. (2017) as our base architecture... When SRU is incorporated into the architecture,
both the 4-layer and 5-layer model outperform the
Transformer base model""",40.0,,,NVIDIA V100,8.0,,45.37321924485877,,4964.696746005496,,,,,,Unreleased,Unreleased,,"repo, but no training code for translation: https://github.com/taolei87/sru ",,
ESRGAN,"Chinese University of Hong Kong (CUHK),Chinese Academy of Sciences,Nanyang Technological University",2018-09-01,"Vision,Image generation",Image super-resolution,,,,,"DIV2K,Flickr2K,OutdoorSceneTraining (OST)",,,Unknown,https://arxiv.org/abs/1809.00219,ESRGAN: Enhanced Super-Resolution Generative Adversarial Networks,3266.0,"Xintao Wang, Ke Yu, Shixiang Wu, Jinjin Gu, Yihao Liu, Chao Dong, Chen Change Loy, Yu Qiao, Xiaoou Tang","The Super-Resolution Generative Adversarial Network (SRGAN) is a seminal work that is capable of generating realistic textures during single image super-resolution. However, the hallucinated details are often accompanied with unpleasant artifacts. To further enhance the visual quality, we thoroughly study three key components of SRGAN - network architecture, adversarial loss and perceptual loss, and improve each of them to derive an Enhanced SRGAN (ESRGAN). In particular, we introduce the Residual-in-Residual Dense Block (RRDB) without batch normalization as the basic network building unit. Moreover, we borrow the idea from relativistic GAN to let the discriminator predict relative realness instead of the absolute value. Finally, we improve the perceptual loss by using the features before activation, which could provide stronger supervision for brightness consistency and texture recovery. Benefiting from these improvements, the proposed ESRGAN achieves consistently better visual quality with more realistic and natural textures than SRGAN and won the first place in the PIRM2018-SR Challenge. The code is available at this https URL .","Academia,Academia,Academia","Hong Kong,China,China,Singapore",Highly cited,,,,,,,,,,,,,,,,,,,,,
(ensemble): AWD-LSTM-DOC (fin) × 5 (WT2),"NTT Communication Science Laboratories,Tohoku University",2018-08-30,Language,Language modeling,185000000.0,185M (table 8),6.66e+17,6 FLOP / parameter / token * 185000000 parameters * 2000000 tokens * 300 epochs = 6.66e+17 FLOP,WikiText-2,2000000.0,"batch size 15
300 epochs (figure 2)",Confident,https://arxiv.org/abs/1808.10143,Direct Output Connection for a High-Rank Language Model,36.0,"Sho Takase, Jun Suzuki, Masaaki Nagata","This paper proposes a state-of-the-art recurrent neural network (RNN) language model that combines probability distributions computed not only from a final RNN layer but also from middle layers. Our proposed method raises the expressive power of a language model based on the matrix factorization interpretation of language modeling introduced by Yang et al. (2018). The proposed method improves the current state-of-the-art language model and achieves the best score on the Penn Treebank and WikiText-2, which are the standard benchmark datasets. Moreover, we indicate our proposed method contributes to two application tasks: machine translation and headline generation. Our code is publicly available at: this https URL.","Industry,Academia","Japan,Japan",SOTA improvement,"""The proposed method improves the current state-of-the-art language model and achieves the best score on the Penn Treebank and WikiText-2, which are the standard benchmark datasets""",300.0,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"code and weights, MIT: https://github.com/nttcslab-nlp/doc_lm?tab=readme-ov-file ",,
Big Transformer for Back-Translation,"Facebook AI Research,Google Brain",2018-08-28,Language,Translation,,"""We re-implemented the Transformer model in py-
torch using the fairseq toolkit.1 All experiments
are based on the Big Transformer architecture with
6 blocks in the encoder and decoder. We use the
same hyper-parameters for all experiments, i.e.,
word representations of size 1024, feed-forward
layers with inner dimension 4096. ""

I am not sure what authors mean by 'Big Transformer architecture'",4.7808e+20,"(128) * (1.25e14) * (27*3600 + 40*60) * (0.3)  = 4.7808e20
(number of gpus) * (peak flops) * (seconds) * (assumed utilization rate)  

""We run experiments on DGX-1 machines with 8Nvidia V100 GPUs and machines are interconnected by Infiniband. Experiments are run on 16
machines and we perform 30K synchronous updates.""
""We also use the NCCL2 library [...] with 16-bit floating point
operations""

NCCL2 supported tensor core operations at 1.25e14 FLOP/s on a V100 for FP16 

in section 5.6 we have

""train this system we perform 300K training up-
dates in 27h 40min on 128 GPUs;""",WMT English-German,3390000000.0,"""Finally, for WMT English-German we train on all 226M available monolingual training sentences and perform 250K updates in 22.5 hours on 128 GPUs.""

We assume that 1 sentence have 15 words",Likely,https://arxiv.org/abs/1808.09381,Understanding Back-Translation at Scale,1155.0,"Sergey Edunov, Myle Ott, Michael Auli, David Grangier","An effective method to improve neural machine translation with monolingual data is to augment the parallel training corpus with back-translations of target language sentences. This work broadens the understanding of back-translation and investigates a number of methods to generate synthetic source sentences. We find that in all but resource poor settings back-translations obtained via sampling or noised beam outputs are most effective. Our analysis shows that sampling or noisy synthetic data gives a much stronger training signal than data generated by beam or greedy search. We also compare how synthetic data compares to genuine bitext and study various domain effects. Finally, we scale to hundreds of millions of monolingual sentences and achieve a new state of the art of 35 BLEU on the WMT'14 English-German test set. ","Industry,Industry","United States of America,United States of America","Highly cited,SOTA improvement","""Finally, we scale to hundreds of millions of monolingual sentences and achieve a new state of the art of 35 BLEU on the WMT'14 English-German test set. """,,27.666,"""training updates in 27h 40min on 128 GPUs""",NVIDIA Tesla V100 DGXS 16 GB,128.0,,2442.1618775733145,,66225.44602672113,,,,,,Open weights (unrestricted),Open source,Open source,"Code and weights, MIT license: https://github.com/facebookresearch/fairseq/blob/main/examples/backtranslation/README.md ",FP16,
AWD-LSTM-MoS+PDR + dynamic evaluation (WT2),IBM,2018-08-14,Language,Language modeling,35000000.0,,,,WikiText-2,,,,https://arxiv.org/abs/1808.05908,Improved Language Modeling by Decoding the Past,6.0,Siddhartha Brahma,"Highly regularized LSTMs achieve impressive results on several benchmark datasets in language modeling. We propose a new regularization method based on decoding the last token in the context using the predicted distribution of the next token. This biases the model towards retaining more contextual information, in turn improving its ability to predict the next token. With negligible overhead in the number of parameters and training time, our Past Decode Regularization (PDR) method achieves a word level perplexity of 55.6 on the Penn Treebank and 63.5 on the WikiText-2 datasets using a single softmax. We also show gains by using PDR in combination with a mixture-of-softmaxes, achieving a word level perplexity of 53.8 and 60.5 on these datasets. In addition, our method achieves 1.169 bits-per-character on the Penn Treebank Character dataset for character level language modeling. These results constitute a new state-of-the-art in their respective settings.",Industry,United States of America,SOTA improvement,"""our Past Decode Regularization (PDR) method achieves a word level perplexity of 55.6 on the Penn Treebank and 63.5 on the WikiText-2 datasets using a single softmax. We also show gains by using PDR in combination with a mixture-of-softmaxes, achieving a word level perplexity of 53.8 and 60.5 on these datasets. In addition, our method achieves 1.169 bits-per-character on the Penn Treebank Character dataset for character level language modeling. These results constitute a new state-of-the-art in their respective settings.""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
Big-Little Net (speech),IBM,2018-07-10,Speech,Speech recognition,3320000.0,table 3,4.290048e+17,980000000 (number of FLOPs from table 3) * 27360000 (dataset size) * 16 (number of epochs from appendix B.1) = 429004800000000000,"Switchboard,Fisher",27360000.0,"""We train ResNet style acoustic models in the hybrid framework on Switchboard+Fisher (2000h) and provide results on Hub5 (Switchboard and Call Home portions). Switchboard is a large dataset with 2000 hours of transcribed speech from 28, 000 speakers""

2000h * 13680 words per hour = 27360000

https://docs.google.com/document/d/1G3vvQkn4x_W71MKg0GmHVtzfd9m0y3_Ofcoew0v902Q/edit#heading=h.3pbt0hfgv7pq",Speculative,https://arxiv.org/abs/1807.03848,Big-Little Net: An Efficient Multi-Scale Feature Representation for Visual and Speech Recognition,92.0,"Chun-Fu (Richard) Chen, Quanfu Fan, Neil Mallinar, Tom Sercu, Rogerio Feris","In this paper, we propose a novel Convolutional Neural Network (CNN) architecture for learning multi-scale feature representations with good tradeoffs between speed and accuracy. This is achieved by using a multi-branch network, which has different computational complexity at different branches. Through frequent merging of features from branches at distinct scales, our model obtains multi-scale features while using less computation. The proposed approach demonstrates improvement of model efficiency and performance on both object recognition and speech recognition tasks,using popular architectures including ResNet and ResNeXt. For object recognition, our approach reduces computation by 33% on object recognition while improving accuracy with 0.9%. Furthermore, our model surpasses state-of-the-art CNN acceleration approaches by a large margin in accuracy and FLOPs reduction. On the task of speech recognition, our proposed multi-scale CNNs save 30% FLOPs with slightly better word error rates, showing good generalization across domains. The codes are available at https://github.com/IBM/BigLittleNet.",Industry,United States of America,SOTA improvement,"""Furthermore, our model surpasses state-of-the-art CNN acceleration approaches by a large margin in accuracy and FLOPs reduction. On the task of speech recognition, our proposed multi-scale CNNs save 30% FLOPs with slightly better word error rates, showing good generalization across domains.""",16.0,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"apache for code/weights: 
https://github.com/IBM/BigLittleNet",,
Big-Little Net,IBM,2018-07-10,Vision,Image classification,77360000.0,Table 2,2.46048e+17,"Using the 6ND formula: 
6×number of tokens×number of parameters×number of epochs
6×1.28×10^6×77360000×110=6.5353728e+16 FLOPs

9.32*10^9 (flops per inference)*1.28×10^6(dataset size)/16 (batch size) * 110 epochs * 3 (to account for backpropagation)= 2.46048e+17 FLOPs",ImageNet,1280000.0,,Likely,https://arxiv.org/abs/1807.03848,Big-Little Net: An Efficient Multi-Scale Feature Representation for Visual and Speech Recognition,92.0,"Chun-Fu Chen, Quanfu Fan, Neil Mallinar, Tom Sercu, and Rogerio Feris","In this paper, we propose a novel Convolutional Neural Network (CNN) architecture for learning multi-scale feature representations with good tradeoffs between speed and accuracy. This is achieved by using a multi-branch network, which has different computational complexity at different branches. Through frequent merging of features from branches at distinct scales, our model obtains multi-scale features while using less computation. The proposed approach demonstrates improvement of model efficiency and performance on both object recognition and speech recognition tasks,using popular architectures including ResNet and ResNeXt. For object recognition, our approach reduces computation by 33% on object recognition while improving accuracy with 0.9%. Furthermore, our model surpasses state-of-the-art CNN acceleration approaches by a large margin in accuracy and FLOPs reduction. On the task of speech recognition, our proposed multi-scale CNNs save 30% FLOPs with slightly better word error rates, showing good generalization across domains.",Industry,United States of America,SOTA improvement,"""On object recognition task, we demonstrated that our approach provides approximately 2× speedup over baselines while
improving accuracy, and the result significantly outperforms the state-of-the-art networks by a large margin in terms of accuracy and FLOPs reduction""",110.0,,,NVIDIA Tesla K80,,,,,,,,,256.0,"""All the models were trained with 110 epochs, batch size 256""",Open weights (unrestricted),Open source,Open source,"Apache 2 license
https://github.com/IBM/BigLittleNet",,
RCAN,Northeastern University,2018-07-08,"Image generation,Vision",Image super-resolution,16000000.0,"""EDSR has much larger number of parameters (43 M) than ours
(16 M), but our RCAN obtains much better performance.""",,,DIV2K,,,Unknown,https://openaccess.thecvf.com/content_ECCV_2018/html/Yulun_Zhang_Image_Super-Resolution_Using_ECCV_2018_paper.html,Image Super-Resolution Using Very Deep Residual Channel Attention Networks,3889.0," Yulun Zhang, Kunpeng Li, Kai Li, Lichen Wang, Bineng Zhong, Yun Fu","Convolutional neural network (CNN) depth is of crucial importance for image super-resolution (SR). However, we observe that deeper networks for image SR are more difficult to train. The low-resolution (LR) inputs and features contain abundant low-frequency information, which is treated equally across channels, hence hindering the representational ability of CNNs. To solve these problems, we propose the very deep residual channel attention networks (RCAN). Specifically, we propose residual in residual (RIR) structure to form very deep network, which consists of several residual groups with long skip connections. Each residual group contains some residual blocks with short skip connections. Meanwhile, RIR allows abundant low-frequency information to be bypassed through multiple skip connections, making the main network focus on learning high-frequency information. Furthermore, we propose channel attention mechanism to adaptively rescale channel-wise features by considering interdependencies among channels. Extensive experiments show that our RCAN achieves better accuracy and visual improvements against state-of-the-art methods.",Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
ShuffleNet v2,"Tsinghua University,Megvii Inc",2018-06-30,Vision,"Image classification,Object detection",2280000.0,,,,,,,,https://arxiv.org/abs/1807.11164,ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design,4380.0,"Ningning Ma, Xiangyu Zhang, Hai-Tao Zheng, Jian Sun","Currently, the neural network architecture design is mostly guided by the \emph{indirect} metric of computation complexity, i.e., FLOPs. However, the \emph{direct} metric, e.g., speed, also depends on the other factors such as memory access cost and platform characterics. Thus, this work proposes to evaluate the direct metric on the target platform, beyond only considering FLOPs. Based on a series of controlled experiments, this work derives several practical \emph{guidelines} for efficient network design. Accordingly, a new architecture is presented, called \emph{ShuffleNet V2}. Comprehensive ablation experiments verify that our model is the state-of-the-art in terms of speed and accuracy tradeoff.","Academia,Industry","China,China",Highly cited,,,,,,,,,,,,,,,,,,,,,
QT-Opt,"Google Brain,University of California (UC) Berkeley",2018-06-27,"Robotics,Vision",Robotic manipulation,1200000.0,"""The Q-function Qθ(s, a) is represented in our system by a large convolutional neural network with 1.2M parameters""",3.4875e+19,"""We distribute training across 10 GPUs, using asynchronous SGD with momentum... This system allows us to train the Q-function at 40 steps per second with a batch size of 32 across 10 NVIDIA P100 GPUs.""

""We found empirically that a large number of gradient steps (up to 15M) were needed to train an effective Q-function...""

15M steps * 0.025 seconds/step *  9.30E+12 FLOP/sec/GPU * 10 GPU = 3.4875E+19",,5984870.0,"Observations take up 4TB of disk space, and the input space is a 472x472 RGB image.

Assuming 24 bit depth color (8 bits per channel), that suggests 472 * 472 * 3 * 8 bits = 668.352 kB per image (this could be off by a factor of 2 depending on actual bit depth)

4 TB / 668.352 kB = 5,984,870 images; around 10 per grasp attempt.

15M gradient steps with batchsize 32 implies:
15M steps * 32 images/step * 1/5984870 images ~= each image seen 80 times",Likely,https://arxiv.org/abs/1806.10293,QT-Opt: Scalable Deep Reinforcement Learning for Vision-Based Robotic Manipulation,1442.0,"Dmitry Kalashnikov, Alex Irpan, Peter Pastor, Julian Ibarz, Alexander Herzog, Eric Jang, Deirdre Quillen, Ethan Holly, Mrinal Kalakrishnan, Vincent Vanhoucke, Sergey Levine","In this paper, we study the problem of learning vision-based dynamic manipulation skills using a scalable reinforcement learning approach. We study this problem in the context of grasping, a longstanding challenge in robotic manipulation. In contrast to static learning behaviors that choose a grasp point and then execute the desired grasp, our method enables closed-loop vision-based control, whereby the robot continuously updates its grasp strategy based on the most recent observations to optimize long-horizon grasp success. To that end, we introduce QT-Opt, a scalable self-supervised vision-based reinforcement learning framework that can leverage over 580k real-world grasp attempts to train a deep neural network Q-function with over 1.2M parameters to perform closed-loop, real-world grasping that generalizes to 96% grasp success on unseen objects. Aside from attaining a very high success rate, our method exhibits behaviors that are quite distinct from more standard grasping systems: using only RGB vision-based perception from an over-the-shoulder camera, our method automatically learns regrasping strategies, probes objects to find the most effective grasps, learns to reposition objects and perform other non-prehensile pre-grasp manipulations, and responds dynamically to disturbances and perturbations.","Industry,Academia","United States of America,United States of America",Highly cited,,80.0,104.2,"""We distribute training across 10 GPUs, using asynchronous SGD with momentum... This system allows us to train the Q-function at 40 steps per second with a batch size of 32 across 10 NVIDIA P100 GPUs.""

""We found empirically that a large number of gradient steps (up to 15M) were needed to train an effective Q-function...""

15M steps * 0.025 seconds/step *  1/3600 hours/second = 104.2 hours",NVIDIA P100,,,1317.8035861002786,"Using cost from ML Hardware Data spreadsheet,
$0.919/hr/GPU * 104.2 hours * 10 GPUs = $957.60

Likely an underestimate, as the cloud pricing comes from 2023 and incorporates 5 additional years of depreciation on the P100.",,,,,,,Unreleased,,,There is a public implementation of the architecture at https://github.com/quantumiracle/QT_Opt (not from any of the paper's co-authors),,
DARTS,"DeepMind,Carnegie Mellon University (CMU)",2018-06-24,Language,"Language modeling,Neural Architecture Search - NAS",33000000.0,"33M (Table 4) - parameters reported for PTB, but they say it is the same for WT-2

"" WIKITEXT-2
We use embedding and hidden sizes 700, weight decay 5×10−7, and hidden-node variational dropout 0.15. Other hyperparameters remain the same as in our PTB experiments.""",3.2366286e+17,"6 FLOP / parameter / token * 33000000 parameters * 2000000 tokens * 300 epochs = 1.188e+17 FLOP

11340000000000 FLOP / second / GPU * 1 GPU * 72 hours * 3600 sec / hour * 0.3 [assumed utilization] = 8.817984e+17 FLOP

sqrt(1.188e+17*8.817984e+17) = 3.2366286e+17 FLOP

'Speculative' confidence since many variables are assumed based on PTB model training",WikiText-2,2000000.0,300 epochs for PTB (supposedly the same for WT-2,Speculative,https://arxiv.org/abs/1806.09055,DARTS: Differentiable Architecture Search,4045.0,"Hanxiao Liu, Karen Simonyan, Yiming Yang","This paper addresses the scalability challenge of architecture search by formulating the task in a differentiable manner. Unlike conventional approaches of applying evolution or reinforcement learning over a discrete and non-differentiable search space, our method is based on the continuous relaxation of the architecture representation, allowing efficient search of the architecture using gradient descent. Extensive experiments on CIFAR-10, ImageNet, Penn Treebank and WikiText-2 show that our algorithm excels in discovering high-performance convolutional architectures for image classification and recurrent architectures for language modeling, while being orders of magnitude faster than state-of-the-art non-differentiable techniques. Our implementation has been made publicly available to facilitate further research on efficient architecture search algorithms.","Industry,Academia","United Kingdom of Great Britain and Northern Ireland,United States of America",Highly cited,,300.0,72.0,"for PTB (they say WT-2 training is similar): The training takes 3 days on a single 1080Ti GPU with our PyTorch implementation

3*24 = 72 hours",NVIDIA GeForce GTX 1080 Ti,1.0,,,,284.6899784455654,,,,,,Unreleased,Open source,Open source,"apache 2, training/test for wikitext: https://github.com/quark0/darts/tree/master/rnn ",,
MobileNetV2,Google,2018-06-18,Vision,"Object detection,Image classification,Image segmentation",3400000.0,Rados,,,,,,,https://ieeexplore.ieee.org/document/8578572,MobileNetV2: Inverted Residuals and Linear Bottlenecks,16899.0,"M Sandler, A Howard, M Zhu","In this paper we describe a new mobile architecture, MobileNetV2, that improves the state of the art performance of mobile models on multiple tasks and benchmarks as well as across a spectrum of different model sizes. We also describe efficient ways of applying these mobile models to object detection in a novel framework we call SSDLite. Additionally, we demonstrate how to build mobile semantic segmentation models through a reduced form of DeepLabv3 which we call Mobile DeepLabv3. is based on an inverted residual structure where the shortcut connections are between the thin bottleneck layers. The intermediate expansion layer uses lightweight depthwise convolutions to filter features as a source of non-linearity. Additionally, we find that it is important to remove non-linearities in the narrow layers in order to maintain representational power. We demonstrate that this improves performance and provide an intuition that led to this design. Finally, our approach allows decoupling of the input/output domains from the expressiveness of the transformation, which provides a convenient framework for further analysis. We measure our performance on ImageNet [1] classification, COCO object detection [2], VOC image segmentation [3]. We evaluate the trade-offs between accuracy, and number of operations measured by multiply-adds (MAdd), as well as actual latency, and the number of parameters.",Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Relational Memory Core,"DeepMind,University College London (UCL)",2018-06-05,Language,Language modeling,,,,,WikiText-103,,,Unknown,https://arxiv.org/abs/1806.01822,Relational recurrent neural networks,235.0,"Adam Santoro, Ryan Faulkner, David Raposo, Jack Rae, Mike Chrzanowski, Theophane Weber, Daan Wierstra, Oriol Vinyals, Razvan Pascanu, Timothy Lillicrap","Memory-based neural networks model temporal data by leveraging an ability to remember information for long periods. It is unclear, however, whether they also have an ability to perform complex relational reasoning with the information they remember. Here, we first confirm our intuitions that standard memory architectures may struggle at tasks that heavily involve an understanding of the ways in which entities are connected -- i.e., tasks involving relational reasoning. We then improve upon these deficits by using a new memory module -- a \textit{Relational Memory Core} (RMC) -- which employs multi-head dot product attention to allow memories to interact. Finally, we test the RMC on a suite of tasks that may profit from more capable relational reasoning across sequential information, and show large gains in RL domains (e.g. Mini PacMan), program evaluation, and language modeling, achieving state-of-the-art results on the WikiText-103, Project Gutenberg, and GigaWord datasets.","Industry,Academia","United Kingdom of Great Britain and Northern Ireland,United Kingdom of Great Britain and Northern Ireland",SOTA improvement,"""Finally, we test the RMC on a suite of tasks that may profit from more capable relational reasoning across sequential information, and show large gains in RL domains (e.g. Mini PacMan), program evaluation, and language modeling, achieving state-of-the-art results on the WikiText-103, Project Gutenberg, and GigaWord datasets.""",,,,,,,,,,,,,,,Unreleased,Unreleased,,"looks like code for the architecture, but not experiment code: https://github.com/google-deepmind/sonnet/blob/v1/sonnet/python/modules/relational_memory.py ",,
GPT-1,OpenAI,2018-06-01,Language,"Question answering,Text classification,Language modeling",117000000.0,"""The model had 117M parameters in total.""

source: https://medium.com/walmartglobaltech/the-journey-of-open-ai-gpt-models-32d95b7b7fb2",1.7578125e+19,"COMPUTE = FORWARD COMPUTE PER TOKEN * 3 BACKWARD FORWARD ADJUSTMENT * EPOCHS * DATASET SIZE

""We train for 100 epochs on minibatches of 64 randomly sampled, contiguous sequences of 512 tokens.""

Authors of ""AI and Memory Wall"" estimated model's training compute as 57,000 PFLOPS = 5.7*10^19 FLOP
(https://github.com/amirgholami/ai_and_memory_wall)","BookCorpus (BooksCorpus, Toronto Book Corpus)",1000000000.0,"""BookCorpus is a large collection of free novel books written by unpublished authors, which contains 11,038 books (around 74M sentences and 1G words) of 16 different sub-genres (e.g., Romance, Historical, Adventure, etc.).""
https://paperswithcode.com/dataset/bookcorpus

BookCorpus seems to have about 5000MB of content
source: https://huggingface.co/datasets/bookcorpusopen

Assuming a byte-pair encoder similar to GPT-2, there are 8 bytes / token.

So approximately 5000MB / 8 bytes / token = 5e9 / 8 tokens",Likely,https://openai.com/blog/language-unsupervised/,Improving Language Understanding by Generative Pre-Training,10079.0,"A Radford, K Narasimhan, T Salimans, I Sutskever","Natural language understanding comprises a wide range of diverse tasks such as textual entailment, question answering, semantic similarity assessment, and document classification. Although large unlabeled text corpora are abundant, labeled data for learning these specific tasks is scarce, making it challenging for discriminatively trained models to perform adequately. We demonstrate that large gains on these tasks can be realized by generative pre-training of a language model on a diverse corpus of unlabeled text, followed by discriminative fine-tuning on each specific task. In contrast to previous approaches, we make use of task-aware input transformations during fine-tuning to achieve effective transfer while requiring minimal changes to the model architecture. We demonstrate the effectiveness of our approach on a wide range of benchmarks for natural language understanding. Our general task-agnostic model outperforms discriminatively trained models that use architectures specifically crafted for each task, significantly improving upon the state of the art in 9 out of the 12 tasks studied. For instance, we achieve absolute improvements of 8.9% on commonsense reasoning (Stories Cloze Test), 5.7% on question answering (RACE), and 1.5% on textual entailment (MultiNLI).",Industry,United States of America,Highly cited,,,720.0,"""1 month on 8 GPUs."" from the reference link",NVIDIA Quadro P600,8.0,,,,663.5535559333689,,,,,,Open weights (unrestricted),Open source,Open source,"MIT, code and weights
https://github.com/openai/finetune-transformer-lm/blob/master/LICENSE",,
aLSTM(depth-2)+RecurrentPolicy (WT2),"University of Manchester,Alan Turing Institute",2018-05-22,Language,Language modeling,32000000.0,32M (Table 3),7.296e+16,6 FLOP / token / parameter * 32000000 parameters * 2000000 tokens * 190 epochs = 7.296e+16 FLOP,WikiText-2,2000000.0,"""Both models are trained for 10 000 steps with a batch size of
50 and a learning rate of 0.003.""

""Without tuning for WT2, both outperform previously published results in 150 epochs (table 3) and converge to new state of the art performance in 190 epochs""",Confident,https://arxiv.org/abs/1805.08574,Breaking the Activation Function Bottleneck through Adaptive Parameterization,12.0,"Sebastian Flennerhag, Hujun Yin, John Keane, Mark Elliot","Standard neural network architectures are non-linear only by virtue of a simple element-wise activation function, making them both brittle and excessively large. In this paper, we consider methods for making the feed-forward layer more flexible while preserving its basic structure. We develop simple drop-in replacements that learn to adapt their parameterization conditional on the input, thereby increasing statistical efficiency significantly. We present an adaptive LSTM that advances the state of the art for the Penn Treebank and WikiText-2 word-modeling tasks while using fewer parameters and converging in less than half as many iterations.","Academia,Government","United Kingdom of Great Britain and Northern Ireland,United Kingdom of Great Britain and Northern Ireland",SOTA improvement,"""Without tuning for WT2, both outperform previously published results in 150 epochs (table 3) and converge to new state of the art performance in 190 epochs""",190.0,,,,,,,,,,,,,,Unreleased,Open source,Open source,BSD-3 license: https://github.com/flennerhag/alstm/tree/master/examples ,,
Dropout-LSTM+Noise(Bernoulli) (WT2),"Columbia University,New York University (NYU),Princeton University",2018-05-03,Language,Language modeling,51000000.0,"""The large network has 2 layers with 1500 hidden units each. This leads to a model complexity of 51 million parameters.""",1.27e+17,"6 FLOP / parameter / token * 51000000 parameters * 2000000 tokens * 200 epochs = 1.224e+17 FLOP

'Likely' confidence because I am not very sure that 51M paramters and 200 epochs relate to WT-2 model, but it is very likely",WikiText-2,2000000.0,"""We train the models using truncated backpropagation through time with average stochastic gradient descent (Polyak & Juditsky, 1992) for a maximum of 200 epochs""",Likely,https://arxiv.org/abs/1805.01500,Noisin: Unbiased Regularization for Recurrent Neural Networks,26.0,"Adji B. Dieng, Rajesh Ranganath, Jaan Altosaar, David M. Blei","Recurrent neural networks (RNNs) are powerful models of sequential data. They have been successfully used in domains such as text and speech. However, RNNs are susceptible to overfitting; regularization is important. In this paper we develop Noisin, a new method for regularizing RNNs. Noisin injects random noise into the hidden states of the RNN and then maximizes the corresponding marginal likelihood of the data. We show how Noisin applies to any RNN and we study many different types of noise. Noisin is unbiased--it preserves the underlying RNN on average. We characterize how Noisin regularizes its RNN both theoretically and empirically. On language modeling benchmarks, Noisin improves over dropout by as much as 12.2% on the Penn Treebank and 9.4% on the Wikitext-2 dataset. We also compared the state-of-the-art language model of Yang et al. 2017, both with and without Noisin. On the Penn Treebank, the method with Noisin more quickly reaches state-of-the-art performance.","Academia,Academia,Academia","United States of America,United States of America,United States of America",SOTA improvement,"this is the best model in this paper per Table 4
""On language modeling benchmarks, Noisin improves over dropout by as much as 12.2% on the Penn Treebank and 9.4% on the Wikitext-2 dataset""",200.0,,,,,,,,,,,,,,Unreleased,Unreleased,,"""The source code is available upon request.""",FP32,
ResNeXt-101 32x48d,Facebook,2018-05-02,Vision,Image classification,829000000.0,"Table 6
",8.74395e+21,"Table 6: 153e9 mult-adds.
Section 2.4: ""minibatches of 8,064 images"".

Compute = 2 * 3 * mult-adds * dataset size = 2 * 3 * 153e9 * 9525e6 = 8.74e21 FLOP

Likely trained on V100s, since Facebook had just upgraded their Big Basin GPU cluster to V100s as of March 2018. The previous iteration of Big Basin had 32 clusters of 8xP100s, while Big Basin v2 had 42 clusters of 8xV100s, which matches the 336 GPUs used in this paper.","ImageNet,Instagram",9525000000.0,Table 3: (300+1925+300+7000) million images,Confident,https://arxiv.org/abs/1805.00932,Exploring the Limits of Weakly Supervised Pretraining,1300.0,"Dhruv Mahajan, Ross Girshick, Vignesh Ramanathan, Kaiming He, Manohar Paluri, Yixuan Li, Ashwin Bharambe, Laurens van der Maaten",,Industry,United States of America,"Highly cited,SOTA improvement","""We show improvements on several image classification and object detection tasks, and report the highest ImageNet-1k single-crop, top-1 accuracy to date: 85.4%",,496.0,"""Mahajan et al. (2018) required 19 GPU years to train their ResNeXt101-32x48d"" https://arxiv.org/abs/2103.00020
Models were trained on 336 GPUs, so that suggests 20.65 days or 496 hours",NVIDIA V100,336.0,,139304.6861,,209159.05867416784,,,,,,Open weights (non-commercial),Unreleased,Open source,"models, non-commercial: https://github.com/facebookresearch/WSL-Images ",,True
Diffractive Deep Neural Network,University of California Los Angeles (UCLA),2018-04-14,Vision,Digit recognition,8000000000.0,"""For example, using five 3D-printed transmission layers, containing a total of 0.2 million neurons and ~8.0 billion connections that are trained using deep learning, we experimentally demonstrated the function of a handwritten digit classifier.""

My understanding is that every connection correspond to the parameter to learn.",,,MNIST,55000.0,"size of MNIST
""For this task, phase-only transmission masks were designed by training a 5-layer D2NN with ~55,000 images from MNIST handwritten digit database (14). """,Likely,https://arxiv.org/abs/1804.08711,All-Optical Machine Learning Using Diffractive Deep Neural Networks,1464.0,"Xing Lin, Yair Rivenson, Nezih T Yardimci, Muhammed Veli, Yi Luo, Mona Jarrahi, and Aydogan Ozcan","We introduce an all-optical Diffractive Deep Neural Network (D2NN) architecture that can learn to implement various functions after deep learning-based design of passive diffractive layers that work collectively. We experimentally demonstrated the success of this framework by creating 3D-printed D2NNs that learned to implement handwritten digit classification and the function of an imaging lens at terahertz spectrum. With the existing plethora of 3D-printing and other lithographic fabrication methods as well as spatial-light-modulators, this all-optical deep learning framework can perform, at the speed of light, various complex functions that computer-based neural networks can implement, and will find applications in all-optical image analysis, feature detection and object classification, also enabling new camera designs and optical components that can learn to perform unique tasks using D2NNs.",Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
YOLOv3,University of Washington,2018-04-08,Vision,Object detection,56933216.0,"Feature extractor (ignoring biases)
32*3*3*3 +
64*3*3*32 +
32*1*1*64 +
64*3*3*32 +
128*3*3*64 +
2*(64*1*1*128 +
128*3*3*64) +
256*3*3*128 +
8*(128*1*1*256 +
256*3*3*128) +
512*3*3*256 + 
8*(256*1*1*512 + 
512*3*3*256) + 
1024*3*3*512 + 
4*(512*1*1*1024 +
1024*3*3*512) +
4*4*1024*1000

source: table 1
This is assuming the average pooling step changes the output size from 8x8 to 4x4.

The weights file is 237MB. If the weights are saved as float32, 4 bytes per weight, then there are approximately 237M/4=59M parameters, consistent with the calculation above.",1.3416380824e+19,"We use the formula training_compute = ops_per_forward_pass * 3.5 * n_epochs * n_examples

Assuming 160 epochs of training as in https://arxiv.org/pdf/1612.08242.pdf

Table 2: 18700000000 operations 

18700000000 ops * 3.5 *160 epochs * 1281167 images",ImageNet,1281167.0,Source: https://image-net.org/download.php,Likely,https://arxiv.org/abs/1804.02767,YOLOv3: An Incremental Improvement,19207.0,"Joseph Redmon, Ali Farhadi","We present some updates to YOLO! We made a bunch of little design changes to make it better. We also trained this new network that's pretty swell. It's a little bigger than last time but more accurate. It's still fast though, don't worry. At 320x320 YOLOv3 runs in 22 ms at 28.2 mAP, as accurate as SSD but three times faster. When we look at the old .5 IOU mAP detection metric YOLOv3 is quite good. It achieves 57.9 mAP@50 in 51 ms on a Titan X, compared to 57.5 mAP@50 in 198 ms by RetinaNet, similar performance but 3.8x faster. As always, all the code is online at this https URL",Academia,United States of America,Highly cited,,,,,"NVIDIA M40,NVIDIA GeForce GTX TITAN X",,,,,,,,,,,Unreleased,Unreleased,,"code and weights, unclear license: https://pjreddie.com/darknet/yolo/ ",,
"LSTM (Hebbian, Cache, MbPA)","DeepMind,University College London (UCL)",2018-03-27,Language,Language modeling,530442240.0,"Single layer LSTM with hidden dimension of 2048. Vocabulary for Gutenberg is 242,621; input and output embeddings are tied.

Embedding layer (tied): 242,621 * 2048 = 496,887,808
LSTM layer: 4 * (2048 + 2048) * 2048 = 33,554,432

Total: 496,887,808 + 33,554,432 = 530,442,240",3.33e+19,"They do training runs on a vision task and three language datasets. The largest dataset by size is GigaWord, but the largest training run is on the Gutenberg dataset, at 15B tokens. 

I assume the input embedding is done with an embedding lookup for efficiency rather than a dense matrix multiplication, so we only count FLOPs on the de-embedding.

Ops counting:
6 * 15B * 530,442,240 = 4.774e19

Hardware:
(8 * 1.87e13) * (6 * 24 * 3600) * 0.3 = 2.327e19

Geometric mean: sqrt(4.774e19 * 2.327e19) = 3.33e19

(Note they say 15B steps, but they also say it is 80 epochs on a 175M token dataset, and that it took 6 days on 8 P100s, both of which would agree with 15B tokens, not 15B steps)",Project Gutenberg,175181505.0,"Omniglot: 32k images
Wikitext-103: ""Over 100 million tokens""
Gutenberg: 175,181,505 tokens
GigaWord v5: 4B tokens

Gigaword is the largest dataset, but the largest training run uses Project Gutenberg.",Confident,https://arxiv.org/abs/1803.10049,Fast Parametric Learning with Activation Memorization,46.0,"Jack W Rae, Chris Dyer, Peter Dayan, Timothy P Lillicrap","Neural networks trained with backpropagation often struggle to identify classes that have been observed a small number of times. In applications where most class labels are rare, such as language modelling, this can become a performance bottleneck. One potential remedy is to augment the network with a fast-learning non-parametric model which stores recent activations and class labels into an external memory. We explore a simplified architecture where we treat a subset of the model parameters as fast memory stores. This can help retain information over longer time intervals than a traditional memory, and does not require additional space or compute. In the case of image classification, we display faster binding of novel classes on an Omniglot image curriculum task. We also show improved performance for word-based language models on news reports (GigaWord), books (Project Gutenberg) and Wikipedia articles (WikiText-103) --- the latter achieving a state-of-the-art perplexity of 29.2.","Industry,Academia","United Kingdom of Great Britain and Northern Ireland,United Kingdom of Great Britain and Northern Ireland",SOTA improvement,"""We also show improved performance for word-based language models on news reports (GigaWord), books (Project Gutenberg) and Wikipedia articles (WikiText-103) --- the latter achieving a state-of-the-art perplexity of 29.2.""",80.0,144.0,6 days,NVIDIA P100,8.0,,590.5320553042133,,4153.309685987008,,,,51200.0,"Sequence length of 100, total of 512 batches. Batches are split between 8 GPUs.",Unreleased,Unreleased,,,,
4 layer QRNN (h=2500),Salesforce Research,2018-03-22,Language,Language modeling,151000000.0,Table 6,5.9158815e+17,"20670000000000 FLOP / sec / GPU [fp16 assumed] * 1 GPU * 12 hours * 3600 sec / hour * 0.3 [assumed utilization] = 2.678832e+17FLOP

6 FLOP / token / parameter * 151000000 parameters * 103000000 tokens * 14 epochs = 1.306452e+18 FLOP

sqrt(2.678832e+17*1.306452e+18) = 5.9158815e+17 FLOP
__________________
in the algorithmic progress paper the estimation was 2.4 × 10^17 FLOP under assumption of 26M parameters",WikiText-103,103000000.0,"""The model was trained for 12 hours (14 epochs)""",Likely,https://arxiv.org/abs/1803.08240,An Analysis of Neural Language Modeling at Multiple Scales,183.0,"Stephen Merity, Nitish Shirish Keskar, Richard Socher","Many of the leading approaches in language modeling introduce novel, complex and specialized architectures. We take existing state-of-the-art word level language models based on LSTMs and QRNNs and extend them to both larger vocabularies as well as character-level granularity. When properly tuned, LSTMs and QRNNs achieve state-of-the-art results on character-level (Penn Treebank, enwik8) and word-level (WikiText-103) datasets, respectively. Results are obtained in only 12 hours (WikiText-103) to 2 days (enwik8) using a single modern GPU.",Industry,United States of America,SOTA improvement,"""QRNNs achieve stateof-the-art results on character-level (Penn Treebank, enwik8) and word-level (WikiText-103)
datasets, respectively""",14.0,12.0,"""Results are obtained in only 12 hours (WikiText-103) to 2 days (enwik8) using a single modern GPU""",NVIDIA Quadro GP100,1.0,,,,268.1693571105067,,,,,,Unreleased,Open source,Open source,BSD-3 license: https://github.com/salesforce/awd-lstm-lm ,FP32,
Rotation,École des Ponts ParisTech,2018-03-21,"Image generation,Vision",Image completion,86000000.0,https://openai.com/blog/image-gpt/#rfref53,,,CIFAR-10,,,,https://arxiv.org/abs/1803.07728,Unsupervised Representation Learning by Predicting Image Rotations,3080.0,"Spyros Gidaris, Praveer Singh, Nikos Komodakis","Over the last years, deep convolutional neural networks (ConvNets) have transformed the field of computer vision thanks to their unparalleled capacity to learn high level semantic image features. However, in order to successfully learn those features, they usually require massive amounts of manually labeled data, which is both expensive and impractical to scale. Therefore, unsupervised semantic feature learning, i.e., learning without requiring manual annotation effort, is of crucial importance in order to successfully harvest the vast amount of visual data that are available today. In our work we propose to learn image features by training ConvNets to recognize the 2d rotation that is applied to the image that it gets as input. We demonstrate both qualitatively and quantitatively that this apparently simple task actually provides a very powerful supervisory signal for semantic feature learning. We exhaustively evaluate our method in various unsupervised feature learning benchmarks and we exhibit in all of them state-of-the-art performance. Specifically, our results on those benchmarks demonstrate dramatic improvements w.r.t. prior state-of-the-art approaches in unsupervised representation learning and thus significantly close the gap with supervised feature learning. For instance, in PASCAL VOC 2007 detection task our unsupervised pre-trained AlexNet model achieves the state-of-the-art (among unsupervised methods) mAP of 54.4% that is only 2.4 points lower from the supervised case. We get similarly striking results when we transfer our unsupervised learned features on various other tasks, such as ImageNet classification, PASCAL classification, PASCAL segmentation, and CIFAR-10 classification. The code and models of our paper will be published on: this https URL .",Academia,France,Highly cited,,,,,,,,,,,,,,,,,,,,,
LSTM (2018),"Intel Labs,Carnegie Mellon University (CMU)",2018-03-04,Language,Language modeling,13000000.0,,,,Penn TreeBank (PTB),,,,https://arxiv.org/abs/1803.01271,An Empirical Evaluation of Generic Convolutional and Recurrent Networks for Sequence Modeling,4110.0,"Shaojie Bai, J. Zico Kolter, Vladlen Koltun","For most deep learning practitioners, sequence modeling is synonymous with recurrent networks. Yet recent results indicate that convolutional architectures can outperform recurrent networks on tasks such as audio synthesis and machine translation. Given a new sequence modeling task or dataset, which architecture should one use? We conduct a systematic evaluation of generic convolutional and recurrent architectures for sequence modeling. The models are evaluated across a broad range of standard tasks that are commonly used to benchmark recurrent networks. Our results indicate that a simple convolutional architecture outperforms canonical recurrent networks such as LSTMs across a diverse range of tasks and datasets, while demonstrating longer effective memory. We conclude that the common association between sequence modeling and recurrent networks should be reconsidered, and convolutional networks should be regarded as a natural starting point for sequence modeling tasks. To assist related work, we have made code available at this http URL .","Industry,Academia","Multinational,United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"code, MIT: https://github.com/locuslab/TCN/blob/master/TCN/word_cnn/README.md 
train script: https://github.com/locuslab/TCN/blob/master/TCN/word_cnn/word_cnn_test.py ",,
Chinese - English translation,Microsoft,2018-03-01,Language,Translation,,,,,,,,Unknown,https://www.microsoft.com/en-us/research/publication/achieving-human-parity-on-automatic-chinese-to-english-news-translation/,Achieving Human Parity on Automatic Chinese to English News Translation,593.0,"H Hassan, A Aue, C Chen, V Chowdhary",,Industry,"United States of America,Multinational,India,Belgium",SOTA improvement,"""We find that our latest neural machine translation system has reached a new state-of-the-art, and that the translation quality is at human parity when compared to professional human translations""",,,,,,,,,,,,,,,,,,,FP32,
Residual Dense Network,"Northeastern University,University of Rochester",2018-02-24,"Vision,Image generation",Image super-resolution,,,,,DIV2K,,,Unknown,https://arxiv.org/abs/1802.08797v2,Residual Dense Network for Image Super-Resolution,3046.0," Yulun Zhang, Yapeng Tian, Yu Kong, Bineng Zhong, Yun Fu","A very deep convolutional neural network (CNN) has recently achieved great success for image super-resolution (SR) and offered hierarchical features as well. However, most deep CNN based SR models do not make full use of the hierarchical features from the original low-resolution (LR) images, thereby achieving relatively-low performance. In this paper, we propose a novel residual dense network (RDN) to address this problem in image SR. We fully exploit the hierarchical features from all the convolutional layers. Specifically, we propose residual dense block (RDB) to extract abundant local features via dense connected convolutional layers. RDB further allows direct connections from the state of preceding RDB to all the layers of current RDB, leading to a contiguous memory (CM) mechanism. Local feature fusion in RDB is then used to adaptively learn more effective features from preceding and current local features and stabilizes the training of wider network. After fully obtaining dense local features, we use global feature fusion to jointly and adaptively learn global hierarchical features in a holistic way. Extensive experiments on benchmark datasets with different degradation models show that our RDN achieves favorable performance against state-of-the-art methods.","Academia,Academia","United States of America,United States of America",Highly cited,,200.0,,,,,,,,,,,,,,,,,,FP32,
Spectrally Normalized GAN,"Preferred Networks Inc,Ritsumeikan University,National Institute of Informatics",2018-02-16,Image generation,Image generation,,,,,CIFAR-10,,,Unknown,https://arxiv.org/abs/1802.05957,Spectral Normalization for Generative Adversarial Networks,4162.0,"Takeru Miyato, Toshiki Kataoka, Masanori Koyama, Yuichi Yoshida","One of the challenges in the study of generative adversarial networks is the instability of its training. In this paper, we propose a novel weight normalization technique called spectral normalization to stabilize the training of the discriminator. Our new normalization technique is computationally light and easy to incorporate into existing implementations. We tested the efficacy of spectral normalization on CIFAR10, STL-10, and ILSVRC2012 dataset, and we experimentally confirmed that spectrally normalized GANs (SN-GANs) is capable of generating images of better or equal quality relative to the previous training stabilization techniques.","Industry,Academia","Japan,Japan,Japan",Highly cited,,,,,,,,,,,,,,,,,,,,,
TCN (P-MNIST),"Carnegie Mellon University (CMU),Intel Labs",2018-02-15,Language,Image classification,42000.0,,,,P-MNIST,,,Confident,https://openreview.net/forum?id=rk8wKk-R-,Convolutional Sequence Modeling Revisited,64.0,"Shaojie Bai, J. Zico Kolter, Vladlen Koltun",,"Academia,Industry","United States of America,Multinational,United States of America",SOTA improvement,"""For the permuted sequential MNIST, TCNs outperform state of the art results using recurrent nets (95.9%) with Zoneout+Recurrent BatchNorm (Cooijmans et al., 2016; Krueger et al., 2017), a highly optimized method for regularizing RNNs""",,,,,,,,,,,,,,,,,,,,
ENAS,"Google Brain,Carnegie Mellon University (CMU),Stanford University",2018-02-09,Language,"Language modeling,Neural Architecture Search - NAS",24000000.0,"24M
Table 1",2.00664e+16,"Training on PTB:
6 FLOP / token / parameter * 24000000 parameters * 929000 tokens * 150 epochs = 2.00664e+16 FLOP",Penn TreeBank (PTB),929000.0,,Confident,https://arxiv.org/abs/1802.03268,Efficient Neural Architecture Search via Parameter Sharing,2760.0,"Hieu Pham, Melody Y. Guan, Barret Zoph, Quoc V. Le, Jeff Dean","We propose Efficient Neural Architecture Search (ENAS), a fast and inexpensive approach for automatic model design. In ENAS, a controller learns to discover neural network architectures by searching for an optimal subgraph within a large computational graph. The controller is trained with policy gradient to select a subgraph that maximizes the expected reward on the validation set. Meanwhile the model corresponding to the selected subgraph is trained to minimize a canonical cross entropy loss. Thanks to parameter sharing between child models, ENAS is fast: it delivers strong empirical performances using much fewer GPU-hours than all existing automatic model design approaches, and notably, 1000x less expensive than standard Neural Architecture Search. On the Penn Treebank dataset, ENAS discovers a novel architecture that achieves a test perplexity of 55.8, establishing a new state-of-the-art among all methods without post-training processing. On the CIFAR-10 dataset, ENAS designs novel architectures that achieve a test error of 2.89%, which is on par with NASNet (Zoph et al., 2018), whose test error is 2.65%.","Industry,Academia,Academia","United States of America,United States of America,United States of America",Highly cited,,150.0,,,NVIDIA GeForce GTX 1080 Ti,,,,,,,,,,,Unreleased,Open source,Open source,code for PTB. Apache license: https://github.com/google-research/google-research/tree/master/enas_lm ,,
DeepLabV3+,Google,2018-02-07,Vision,Semantic segmentation,,,,,"ImageNet-1k,COCO,JFT-300M",,,Unknown,https://arxiv.org/abs/1802.02611v3,Encoder-Decoder with Atrous Separable Convolution for Semantic Image Segmentation,11558.0,"Liang-Chieh Chen, Yukun Zhu, George Papandreou, Florian Schroff, Hartwig Adam","Spatial pyramid pooling module or encode-decoder structure are used in deep neural networks for semantic segmentation task. The former networks are able to encode multi-scale contextual information by probing the incoming features with filters or pooling operations at multiple rates and multiple effective fields-of-view, while the latter networks can capture sharper object boundaries by gradually recovering the spatial information. In this work, we propose to combine the advantages from both methods. Specifically, our proposed model, DeepLabv3+, extends DeepLabv3 by adding a simple yet effective decoder module to refine the segmentation results especially along object boundaries. We further explore the Xception model and apply the depthwise separable convolution to both Atrous Spatial Pyramid Pooling and decoder modules, resulting in a faster and stronger encoder-decoder network. We demonstrate the effectiveness of the proposed model on PASCAL VOC 2012 and Cityscapes datasets, achieving the test set performance of 89.0\% and 82.1\% without any post-processing. Our paper is accompanied with a publicly available reference implementation of the proposed models in Tensorflow at \url{this https URL}.",Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
AmoebaNet-A (F=448),Google Brain,2018-02-05,Vision,Image classification,469000000.0,Table 2,3.85296912e+20,"450 K40 GPUs for 20k models (approx. 7 days).
(From Imagenet paper-data, Besiroglu et al., forthcoming) ",ImageNet-1k,1280000.0,,Confident,https://arxiv.org/abs/1802.01548,Regularized Evolution for Image Classifier Architecture Search,2823.0,"Esteban Real, Alok Aggarwal, Yanping Huang, Quoc V Le","The effort devoted to hand-crafting neural network image classifiers has motivated the use of architecture search to discover them automatically. Although evolutionary algorithms have been repeatedly applied to neural network topologies, the image classifiers thus discovered have remained inferior to human-crafted ones. Here, we evolve an image classifier---AmoebaNet-A---that surpasses hand-designs for the first time. To do this, we modify the tournament selection evolutionary algorithm by introducing an age property to favor the younger genotypes. Matching size, AmoebaNet-A has comparable accuracy to current state-of-the-art ImageNet models discovered with more complex architecture-search methods. Scaled to larger size, AmoebaNet-A sets a new state-of-the-art 83.9% / 96.6% top-5 ImageNet accuracy. In a controlled comparison against a well known reinforcement learning algorithm, we give evidence that evolution can obtain results faster with the same hardware, especially at the earlier stages of the search. This is relevant when fewer compute resources are available. Evolution is, thus, a simple method to effectively discover high-quality architectures.",Industry,United States of America,Highly cited,,,168.0,"""Each experiment ran on 450 K40 GPUs for 20k models (approx. 7 days).""",NVIDIA Tesla K40s,450.0,,11766.339677271537,,229206.26838084744,,,,,,Unreleased,Unreleased,,"has code, but looks like just a toy model: https://colab.research.google.com/github/google-research/google-research/blob/master/evolution/regularized_evolution_algorithm/regularized_evolution.ipynb ",FP32,
AmoebaNet-A (F=190),Google Brain,2018-02-05,Vision,Image classification,87000000.0,Table 2,,,,,,,https://arxiv.org/abs/1802.01548,Regularized Evolution for Image Classifier Architecture Search,2823.0,"E Real, A Aggarwal, Y Huang, QV Le",,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
QRNN,Salesforce Research,2018-02-01,Language,Language modeling,135000000.0,"Based on the details provided in the paper, the number of parameters in the QRNN model can be calculated as follows:

Embedding layer size: 400
Number of QRNN layers: 4
Number of nodes per QRNN layer: 2500
Vocabulary size: 267,735 (for WikiText-103 dataset)
Adaptive softmax layer
Parameters:

Embedding layer: 400 x 267,735 = 107,094,000
QRNN layers:
Input to hidden weights per layer: 400 x 2500 = 1,000,000
Hidden to hidden weights per layer: 2500 x 2500 = 6,250,000
Biases per layer: 2500 = 2,500
Total QRNN layers parameters: 4 x (1,000,000 + 6,250,000 + 2,500) = 28,000,000
Adaptive softmax layer: No extra parameters due to weight tying
Total Parameters = Embedding + QRNN layers
= 107,094,000 + 28,000,000
= 135,094,000

So the total number of parameters in the QRNN model is approximately 135 million.

The majority of parameters are in the embedding layer, while the 4 QRNN layers contribute 28 million parameters. The adaptive softmax does not add any extra parameters due to weight tying.",6.8866472e+17,"6 FLOP / parameter / token * 135000000 parameters ['Likely' confidence] * 103000000 tokens * 14 epochs = 1.16802e+18 FLOP

31330000000000 FLOP / sec / GPU [fp16 assumed] * 1 GPU * 12 hours * 3600 sec / hour * 0.3 [assumed utilization] = 4.060368e+17 FLOP 

sqrt(4.060368e+17*1.16802e+18) = 6.8866472e+17 FLOP 
",WikiText-103,103000000.0,"""We train with a batch size of 60 and a sequence length of 140.""

""""Using this approach we reduce our per-epoch time substantially and achieve a new state-of-the-art on WikiText-103 despite training for 14 epochs, a total time of only 12 hours.""",Likely,https://mlsys.org/Conferences/doc/2018/50.pdf,Scalable Language Modeling: WikiText-103 on a Single GPU in 12 hours,4.0,"Stephen Merity, Nitish Shirish Keskar, James Bradbury, Richard Socher","Word-level language modeling (WLM) is one the foundational tasks of unsupervised natural language processing. Most modern architectures for WLM use several LSTM layers, followed by a softmax layer. Even with larger batch sizes and a multi-GPU setup, training of these networks on large-vocabulary corpora is slow due to increased computation involving the softmax and the high cost of recurrence computation. We propose a model architecture and training strategy that enables us to achieve state-of-the-art performance on the WikiText-103 data set using a single GPU while being substantially faster than an NVIDIA cuDNN LSTM-based model by utilizing the Quasi-Recurrent Neural Network (QRNN), an adaptive softmax with weight tying, and longer sequences within batches.",Industry,United States of America,SOTA improvement,"""we reduce our per-epoch time substantially and achieve a new state-of-the-art on WikiText-103 despite training for 14 epochs""",14.0,12.0,"""The model trains at 2980 seconds per epoch on the NVIDIA V100
and 5460 seconds per epoch on the NVIDIA P100.""

""Using this approach we reduce our per-epoch time substantially and achieve a new state-of-the-art on WikiText-103 despite training for 14 epochs, a total time of only 12 hours.""",NVIDIA V100,,,,,,,,,8400.0,60*140,Unreleased,Unreleased,,,FP32,
ELMo,"University of Washington,Allen Institute for AI",2018-02-01,Language,"Question answering,Sentiment classification,Language modeling",94000000.0,,3300100000000010.0,3300e12 - https://github.com/amirgholami/ai_and_memory_wall,,,,Speculative,https://arxiv.org/abs/1802.05365,Deep contextualized word representations,11108.0,"Matthew E. Peters, Mark Neumann, Mohit Iyyer, Matt Gardner, Christopher Clark, Kenton Lee, Luke Zettlemoyer","We introduce a new type of deep contextualized word representation that models both (1) complex characteristics of word use (e.g., syntax and semantics), and (2) how these uses vary across linguistic contexts (i.e., to model polysemy). Our word vectors are learned functions of the internal states of a deep bidirectional language model (biLM), which is pre-trained on a large text corpus. We show that these representations can be easily added to existing models and significantly improve the state of the art across six challenging NLP problems, including question answering, textual entailment and sentiment analysis. We also present an analysis showing that exposing the deep internals of the pre-trained network is crucial, allowing downstream models to mix different types of semi-supervision signals.","Academia,Research collective","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
ULM-FiT,"University of San Francisco,Insight Centre NUI Galway,Fast.ai",2018-01-18,Language,Text classification,441000000.0,https://files.fast.ai/models/wt103/?C=S;O=D,2.72538e+17,=103000000*441000000*6=2.72538e+17,"IMDb,Yelp,Trec-6,DBpedia,AG news,WikiText-103",103000000.0,"We pretrain the language model on Wikitext-103
(Merity et al., 2017b) consisting of 28,595 preprocessed Wikipedia articles and 103 million words.

Fine-tuning datasets:
TREC-6 Question 5.5k
IMDb Sentiment 25k
Yelp-bi Sentiment 560k
Yelp-full Sentiment 650k
AG Topic 120k
DBpedia Topic 560k

560+120+650+560+25+5.5=1920.5k = 1920500",Speculative,https://arxiv.org/abs/1801.06146,Universal Language Model Fine-tuning for Text Classification,1940.0,"Jeremy Howard, Sebastian Ruder","Inductive transfer learning has greatly impacted computer vision, but existing approaches in NLP still require task-specific modifications and training from scratch. We propose Universal Language Model Fine-tuning (ULMFiT), an effective transfer learning method that can be applied to any task in NLP, and introduce techniques that are key for fine-tuning a language model. Our method significantly outperforms the state-of-the-art on six text classification tasks, reducing the error by 18-24% on the majority of datasets. Furthermore, with only 100 labeled examples, it matches the performance of training from scratch on 100x more data. We open-source our pretrained models and code.","Academia,Academia","United States of America,Ireland",Highly cited,,,,,,,,,,,AWD-LSTM,,,,,Open weights (unrestricted),Unreleased,Unreleased,https://nlp.fast.ai/category/classification.html,,
Refined Part Pooling,"Tsinghua University,University of Technology Sydney,University of Texas at San Antonio",2018-01-09,Vision,Person retrieval,,,2.6244e+16,12150000000000*3600*2*0.3=2.6244e+16 FLOP,"ImageNet-1k,Market-1501",,,Confident,https://arxiv.org/abs/1711.09349,Beyond Part Models: Person Retrieval with Refined Part Pooling (and a Strong Convolutional Baseline),2046.0,"Yifan Sun, Liang Zheng, Yi Yang, Qi Tian, Shengjin Wang","Employing part-level features for pedestrian image description offers fine-grained information and has been verified as beneficial for person retrieval in very recent literature. A prerequisite of part discovery is that each part should be well located. Instead of using external cues, e.g., pose estimation, to directly locate parts, this paper lays emphasis on the content consistency within each part.
Specifically, we target at learning discriminative part-informed features for person retrieval and make two contributions. (i) A network named Part-based Convolutional Baseline (PCB). Given an image input, it outputs a convolutional descriptor consisting of several part-level features. With a uniform partition strategy, PCB achieves competitive results with the state-of-the-art methods, proving itself as a strong convolutional baseline for person retrieval.
(ii) A refined part pooling (RPP) method. Uniform partition inevitably incurs outliers in each part, which are in fact more similar to other parts. RPP re-assigns these outliers to the parts they are closest to, resulting in refined parts with enhanced within-part consistency. Experiment confirms that RPP allows PCB to gain another round of performance boost. For instance, on the Market-1501 dataset, we achieve (77.4+4.2)% mAP and (92.3+1.5)% rank-1 accuracy, surpassing the state of the art by a large margin.","Academia,Academia,Academia","China,Australia,United States of America",Highly cited,,,1.0,"""With two NVIDIA TITAN XP GPUs and Pytorch as the platform, training an IDE model and a standard
PCB on Market-1501 (12,936 training images) consumes
about 40 and 50 minutes, respectively""",NVIDIA TITAN Xp,2.0,,,,1040.1094120986245,,,,,,,,,,,
Tacotron 2,"Google,University of California (UC) Berkeley",2017-12-19,Speech,Speech synthesis,,"some architecture details:

""Input characters are represented using a learned 512-dimensional
character embedding, which are passed through a stack of 3 convolutional layers each containing 512 filters with shape 5 × 1, i.e., where
each filter spans 5 characters, followed by batch normalization [18]
and ReLU activations. As in Tacotron, these convolutional layers
model longer-term context (e.g., N-grams) in the input character
sequence. The output of the final convolutional layer is passed into a
single bi-directional [19] LSTM [20] layer containing 512 units (256
in each direction) to generate the encoded features.""",,,,340000.0,"""We train all models on an internal US English dataset[12], which contains 24.6 hours of speech from a single professional female speaker.""

13,680 words/hour * 24.6 = 336528 words",Confident,https://arxiv.org/abs/1712.05884,Natural TTS Synthesis by Conditioning WaveNet on Mel Spectrogram Prediction,2886.0,"Jonathan Shen, Ruoming Pang, Ron J. Weiss, Mike Schuster, Navdeep Jaitly, Zongheng Yang, Zhifeng Chen, Yu Zhang, Yuxuan Wang, RJ Skerry-Ryan, Rif A. Saurous, Yannis Agiomyrgiannakis, Yonghui Wu","This paper describes Tacotron 2, a neural network architecture for speech synthesis directly from text. The system is composed of a recurrent sequence-to-sequence feature prediction network that maps character embeddings to mel-scale spectrograms, followed by a modified WaveNet model acting as a vocoder to synthesize timedomain waveforms from those spectrograms. Our model achieves a mean opinion score (MOS) of 4.53 comparable to a MOS of 4.58 for professionally recorded speech. To validate our design choices, we present ablation studies of key components of our system and evaluate the impact of using mel spectrograms as the input to WaveNet instead of linguistic, duration, and F0 features. We further demonstrate that using a compact acoustic intermediate representation enables significant simplification of the WaveNet architecture.","Industry,Academia","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
AlphaZero,DeepMind,2017-12-05,Games,"Chess,Shogi,Go",,,3.667927300468287e+22,Extracted from AI and Compute (https://openai.com/blog/ai-and-compute/) charts by using https://automeris.io/WebPlotDigitizer/.,,700000.0,"""We trained a separate instance of AlphaZero for each game. Training proceeded for 700,000 steps""",Likely,https://arxiv.org/abs/1712.01815,Mastering Chess and Shogi by Self-Play with a General Reinforcement Learning Algorithm,1594.0,"David Silver, Thomas Hubert, Julian Schrittwieser, Ioannis Antonoglou, Matthew Lai, Arthur Guez, Marc Lanctot, Laurent Sifre, Dharshan Kumaran, Thore Graepel, Timothy Lillicrap, Karen Simonyan, Demis Hassabis","The game of chess is the most widely-studied domain in the history of artificial intelligence. The strongest programs are based on a combination of sophisticated search techniques, domain-specific adaptations, and handcrafted evaluation functions that have been refined by human experts over several decades. In contrast, the AlphaGo Zero program recently achieved superhuman performance in the game of Go, by tabula rasa reinforcement learning from games of self-play. In this paper, we generalise this approach into a single AlphaZero algorithm that can achieve, tabula rasa, superhuman performance in many challenging domains. Starting from random play, and given no domain knowledge except the game rules, AlphaZero achieved within 24 hours a superhuman level of play in the games of chess and shogi (Japanese chess) as well as Go, and convincingly defeated a world-champion program in each case.",Industry,United Kingdom of Great Britain and Northern Ireland,Highly cited,,,24.0,,"Google TPU v2,Google TPU v1",5064.0,,229918.6146969874,,,,,,,,Unreleased,Unreleased,,,,True
2-layer-LSTM+Deep-Gradient-Compression,"Tsinghua University,Stanford University,NVIDIA",2017-12-05,Language,Language modeling,6020000.0,"Here is a summary of the calculations to determine the number of parameters in the 2-layer LSTM model with Deep Gradient Compression described in the paper:

Model has 2 LSTM layers with 1500 hidden units each

For an LSTM layer:

W matrix: number of hidden units * input dimension
U matrix: number of hidden units * number of hidden units
4 bias vectors with size = number of hidden units
So params per LSTM layer = hidden_units * (input_dim + hidden_units + 4)

For layer 1:

Input dim is word embedding size (estimated 300)
Params = 1500 * (300 + 1500 + 4) = 1,512,000
For layer 2:

Input is previous layer output (1500)
Params = 1500 * (1500 + 1500 + 4) = 4,506,000
Total Params = Layer 1 + Layer 2
= 1,512,000 + 4,506,000
= 6,018,000

The Deep Gradient Compression technique does not change number of parameters.

So total parameters for the model is approximately 6 million.",1340000000000000.0,6 FLOP / parameter / token * 6020000 parameters ['Likely' confidence] * 929000 tokens * 40 epochs = 1.3422192e+15 FLOP,Penn TreeBank (PTB),929000.0,""" The warm-up period is 1 epoch out of 40 epochs""",Likely,https://arxiv.org/abs/1712.01887,Deep Gradient Compression: Reducing the Communication Bandwidth for Distributed Training,1298.0,"Yujun Lin, Song Han, Huizi Mao, Yu Wang, William J. Dally","Large-scale distributed training requires significant communication bandwidth for gradient exchange that limits the scalability of multi-node training, and requires expensive high-bandwidth network infrastructure. The situation gets even worse with distributed training on mobile devices (federated learning), which suffers from higher latency, lower throughput, and intermittent poor connections. In this paper, we find 99.9% of the gradient exchange in distributed SGD is redundant, and propose Deep Gradient Compression (DGC) to greatly reduce the communication bandwidth. To preserve accuracy during compression, DGC employs four methods: momentum correction, local gradient clipping, momentum factor masking, and warm-up training. We have applied Deep Gradient Compression to image classification, speech recognition, and language modeling with multiple datasets including Cifar10, ImageNet, Penn Treebank, and Librispeech Corpus. On these scenarios, Deep Gradient Compression achieves a gradient compression ratio from 270x to 600x without losing accuracy, cutting the gradient size of ResNet-50 from 97MB to 0.35MB, and for DeepSpeech from 488MB to 0.74MB. Deep gradient compression enables large-scale distributed training on inexpensive commodity 1Gbps Ethernet and facilitates distributed training on mobile. Code is available at: this https URL.","Academia,Academia,Industry","China,United States of America,United States of America",Highly cited,,40.0,,,,,,,,,,,,,,Unreleased,Unreleased,,"repo, but no code for language modeling: https://github.com/synxlin/deep-gradient-compression ",FP32,
PNASNet-5,"Johns Hopkins University,Google AI,Stanford University",2017-12-02,Vision,Image classification,86100000.0,Table 5,6.62904e+19,"8 times less compute than Zoph (2018), which used 500 p100s for 4 days.
(From Imagenet paper-data, Besiroglu et al., forthcoming) ",ImageNet-1k,1280000.0,,Likely,https://arxiv.org/abs/1712.00559,Progressive Neural Architecture Search,1911.0,"C Liu, B Zoph, M Neumann, J Shlens","We propose a new method for learning the structure of convolutional neural networks (CNNs) that is more efficient than recent state-of-the-art methods based on reinforcement learning and evolutionary algorithms. Our approach uses a sequential model-based optimization (SMBO) strategy, in which we search for structures in order of increasing complexity, while simultaneously learning a surrogate model to guide the search through structure space. Direct comparison under the same search space shows that our method is up to 5 times more efficient than the RL method of Zoph et al. (2018) in terms of number of models evaluated, and 8 times faster in terms of total compute. The structures we discover in this way achieve state of the art classification accuracies on CIFAR-10 and ImageNet.","Academia,Industry,Academia","United States of America,Multinational,United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
PNAS-net,"Johns Hopkins University,Google AI,Stanford University",2017-12-02,Vision,Image classification,86000000.0,,,,,,,,https://arxiv.org/abs/1712.00559,Progressive Neural Architecture Search,1911.0,"C Liu, B Zoph, M Neumann, J Shlens",,"Academia,Industry,Academia","United States of America,Multinational,United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
TriNet,"Visual Computing Institute,RWTH Aachen University",2017-11-21,Video,Person re-identification,,,,,,,,Unknown,https://arxiv.org/abs/1703.07737,In Defense of the Triplet Loss for Person Re-Identification,3038.0,"Alexander Hermans, Lucas Beyer, Bastian Leibe",,Academia,"Germany,Germany",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
"AWD-LSTM-MoS + dynamic evaluation (WT2, 2017)",Carnegie Mellon University (CMU),2017-11-10,Language,Language modeling,35000000.0,35M (Table 2),3.36e+18,"6 FLOP / parameter / token * 35000000 parameters * 2000000 tokens * 8000 epochs = 3.36e+18 FLOP 

_____________
in the algorithmic progress paper the estimation was 4.37 × 10^17 FLOP based on 1000 epochs assumption",WikiText-2,2000000.0,"max sequence length from https://github.com/zihangdai/mos/blob/master/main.py 
is 110 tokens 
batch size 15 (table 8)
epochs: 8000 (from https://github.com/zihangdai/mos/blob/master/main.py)

",Likely,https://arxiv.org/abs/1711.03953,Breaking the Softmax Bottleneck: A High-Rank RNN Language Model,358.0,"Zhilin Yang, Zihang Dai, Ruslan Salakhutdinov, William W. Cohen","We formulate language modeling as a matrix factorization problem, and show that the expressiveness of Softmax-based models (including the majority of neural language models) is limited by a Softmax bottleneck. Given that natural language is highly context-dependent, this further implies that in practice Softmax with distributed word embeddings does not have enough capacity to model natural language. We propose a simple and effective method to address this issue, and improve the state-of-the-art perplexities on Penn Treebank and WikiText-2 to 47.69 and 40.68 respectively. The proposed method also excels on the large-scale 1B Word dataset, outperforming the baseline by over 5.6 points in perplexity.",Academia,United States of America,SOTA improvement,"""Experimental results confirm that the
proposed method significantly improves state-of-the-art language models, achieving a perplexity of 55.31 and 62.89 on
the test set of Penn Treebank and WikiText-2""",8000.0,,,,,,,,,,,,,,Unreleased,Open source,Open source,MIT code: https://github.com/zihangdai/mos ,,
Fraternal dropout + AWD-LSTM 3-layer (WT2),"Jagiellonian University,Mila - Quebec AI (originally Montreal Institute for Learning Algorithms),University of Montreal / Université de Montréal",2017-10-31,Language,Language modeling,34000000.0,34M (Table 2),3.06e+17,"6 FLOP / token / parameter * 34000000 parameters * 2000000 tokens * 750 epochs = 3.06e+17 FLOP

_________________
In the Algorithmic Progress paper, the compute was estimated to be 9.85 × 10¹⁶ FLOP, assuming 520 epochs reported for the PTB dataset.",WikiText-2,2000000.0,"code suggests 750 epochs
https://github.com/kondiz/fraternal-dropout/blob/WT2/main.py",Likely,https://arxiv.org/abs/1711.00066,Fraternal Dropout,55.0,"Konrad Zolna, Devansh Arpit, Dendi Suhubdy, Yoshua Bengio","Recurrent neural networks (RNNs) are important class of architectures among neural networks useful for language modeling and sequential prediction. However, optimizing RNNs is known to be harder compared to feed-forward neural networks. A number of techniques have been proposed in literature to address this problem. In this paper we propose a simple technique called fraternal dropout that takes advantage of dropout to achieve this goal. Specifically, we propose to train two identical copies of an RNN (that share parameters) with different dropout masks while minimizing the difference between their (pre-softmax) predictions. In this way our regularization encourages the representations of RNNs to be invariant to dropout mask, thus being robust. We show that our regularization term is upper bounded by the expectation-linear dropout objective which has been shown to address the gap due to the difference between the train and inference phases of dropout. We evaluate our model and achieve state-of-the-art results in sequence modeling tasks on two benchmark datasets - Penn Treebank and Wikitext-2. We also show that our approach leads to performance improvement by a significant margin in image captioning (Microsoft COCO) and semi-supervised (CIFAR-10) tasks.","Academia,Academia,Academia","Poland,Canada,Canada",SOTA improvement,"""We evaluate our model and achieve state-of-the-art results in sequence
modeling tasks on two benchmark datasets – Penn Treebank and Wikitext-2""",750.0,,,,,,,,,,,,,,Unreleased,Open source,Open source,BSD-3 license: https://github.com/kondiz/fraternal-dropout ,,
DCN+,Salesforce Research,2017-10-31,Language,Question answering,,"Not directly repoted - It may be possible to extract number from:
https://github.com/lmn-extracts/dcn_plus/tree/master/question_answering",,"in Figure 4 we see that network was trained on 140k iterations
from https://github.com/lmn-extracts/dcn_plus/tree/master we see that batch size is 64
It should be possible to compute inference FLOPs from repository and estimate training compute",SQuAD,107785.0,"from https://paperswithcode.com/dataset/squad SQuAD have 107,785 question-answer pairs
download-ed dataset from: https://www.kaggle.com/datasets/stanfordu/stanford-question-answering-dataset?resource=download
wc -w on train-v.1.1 returns 4017471 words so around 5.4M tokens

Looks like they probably trained on each token in SQuAD rather than QA pairs, but uncertain.",Confident,https://arxiv.org/abs/1711.00106v2,DCN+: Mixed Objective and Deep Residual Coattention for Question Answering,121.0,"Caiming Xiong, Victor Zhong, Richard Socher","Traditional models for question answering optimize using cross entropy loss, which encourages exact answers at the cost of penalizing nearby or overlapping answers that are sometimes equally accurate. We propose a mixed objective that combines cross entropy loss with self-critical policy learning. The objective uses rewards derived from word overlap to solve the misalignment between evaluation metric and optimization objective. In addition to the mixed objective, we improve dynamic coattention networks (DCN) with a deep residual coattention encoder that is inspired by recent work in deep self-attention and residual networks. Our proposals improve model performance across question types and input lengths, especially for long questions that requires the ability to capture long-term dependencies. On the Stanford Question Answering Dataset, our model achieves state-of-the-art results with 75.1% exact match accuracy and 83.1% F1, while the ensemble obtains 78.9% exact match accuracy and 86.0% F1. ",Industry,United States of America,SOTA improvement,"""On the Stanford Question Answering Dataset, our model achieves state-of-the-art results with 75.1% exact match accuracy and 83.1% F1, while the ensemble obtains 78.9% exact match accuracy and 86.0% F1. ""
https://paperswithcode.com/paper/dcn-mixed-objective-and-deep-residual
",,,,,,,,,,,,,,,Unreleased,,,,,
S-Norm,"University of Washington,Allen Institute for AI",2017-10-29,Language,Question answering,,Not stated. Probably obtainable from github: https://github.com/allenai/document-qa/tree/master,,,TriviaQA,2000000000.0,"""530k question-document training pairs""

average question length of 14 words and document length of 2895 words, per
 https://www.cs.utexas.edu/~eunsol/files/papers/acl17jcwz.pdf

530,000 * 2895 words on average * 1.33 tokens/word = ~2,000,000,000",Confident,https://arxiv.org/abs/1710.10723v2,Simple and Effective Multi-Paragraph Reading Comprehension,453.0,"Christopher Clark, Matt Gardner","We consider the problem of adapting neural paragraph-level question answering models to the case where entire documents are given as input. Our proposed solution trains models to produce well calibrated confidence scores for their results on individual paragraphs. We sample multiple paragraphs from the documents during training, and use a shared-normalization training objective that encourages the model to produce globally correct output. We combine this method with a state-of-the-art pipeline for training models on document QA data. Experiments demonstrate strong performance on several document QA datasets. Overall, we are able to achieve a score of 71.3 F1 on the web portion of TriviaQA, a large improvement from the 56.7 F1 of the previous best system.","Academia,Research collective","United States of America,United States of America",SOTA improvement,"""Overall, we are able to achieve a score of 71.3 F1 on the web portion of TriviaQA, a large improvement from the 56.7 F1 of the previous best system.""",1.0,,,,,,,,,,,,,,,,,,,
PhraseCond,"Carnegie Mellon University (CMU),University of Pittsburgh",2017-10-28,Language,Question answering,,Unclear how many layers they use for self-attention (N) and fusion (L and K). Could calculate if these were known.,,,SQuAD 1.1,90000.0,"10% held out for test, so 100k * 0.9 = 90k",Confident,https://arxiv.org/abs/1710.10504v2,Phase Conductor on Multi-layered Attentions for Machine Comprehension,22.0,"Rui Liu, Wei Wei, Weiguang Mao, Maria Chikina","Attention models have been intensively studied to improve NLP tasks such as machine comprehension via both question-aware passage attention model and self-matching attention model. Our research proposes phase conductor (PhaseCond) for attention models in two meaningful ways. First, PhaseCond, an architecture of multi-layered attention models, consists of multiple phases each implementing a stack of attention layers producing passage representations and a stack of inner or outer fusion layers regulating the information flow. Second, we extend and improve the dot-product attention function for PhaseCond by simultaneously encoding multiple question and passage embedding layers from different perspectives. We demonstrate the effectiveness of our proposed model PhaseCond on the SQuAD dataset, showing that our model significantly outperforms both state-of-the-art single-layered and multiple-layered attention models. We deepen our results with new findings via both detailed qualitative analysis and visualized examples showing the dynamic changes through multi-layered attention models.","Academia,Academia","United States of America,United States of America",SOTA improvement,"""We demonstrate the effectiveness of our proposed model PhaseCond on the SQuAD dataset, showing that our model significantly outperforms both state-of-the-art single-layered and multiple-layered attention models.""",,,,,,,,,,,,,,,,,,,,
ProgressiveGAN,NVIDIA,2017-10-27,Vision,Image generation,,,,,,,,Unknown,https://arxiv.org/abs/1710.10196,"Progressive Growing of GANs for Improved Quality, Stability, and Variation",6778.0,"Tero Karras, Timo Aila, Samuli Laine, Jaakko Lehtinen",,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
CapsNet (MultiMNIST),Google Brain,2017-10-26,Vision,Character recognition,11360000.0,"""This model has 24.56M parameters which is 2 times more parameters
than CapsNet with 11.36M parameters.""",,,,,,,https://arxiv.org/abs/1710.09829,Dynamic Routing Between Capsules,4316.0,"S Sabour, N Frosst, GE Hinton",,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
CapsNet (MNIST),Google Brain,2017-10-26,Vision,Character recognition,8200000.0,"""In terms of number of parameters the baseline has 35.4M while CapsNet
has 8.2M parameters and 6.8M parameters without the reconstruction subnetwork""",,"It should be feasible to estimate this from the information in the paper, but it would require carefully checking the FLOP involved for capsules.",MNIST,60000.0,Section 5: The dataset has 60K and 10K images for training and testing respectively.,,https://arxiv.org/abs/1710.09829,Dynamic Routing Between Capsules,4316.0,"S Sabour, N Frosst, GE Hinton",,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
LRSO-GAN,University of Technology Sydney,2017-10-22,Vision,Person re-identification,,,,,,,,Unknown,https://arxiv.org/abs/1701.07717,Unlabeled Samples Generated by GAN Improve the Person Re-identification Baseline in vitro,1809.0,"Zhedong Zheng, Liang Zheng, Yi Yang",,Academia,Australia,Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
AlphaGo Master,DeepMind,2017-10-19,Games,Go,,,2.00010000000001e+23,"This is a guess. There was no single journal publication that accompanied this model, that gave information about architecture/model training time etc. All I could find was that it has the same architecture as AlphaGo Zero, and that it had roughly the same power consumption as AGZ. See for instance: 
https://deepmind.com/blog/article/alphago-zero-starting-scratch

Since AGZ reaches the ELO of AlphaGo Master in about 25-30 days (60-75% of the total training time), I estimate the compute to be around 60-75% that of AGZ. I round this to 2e23, and I expect this to only be accurate within an OOM.",,,,Likely,https://www.nature.com/articles/nature24270,Mastering the game of Go without human knowledge,8795.0,"D Silver, J Schrittwieser, K Simonyan, I Antonoglou","A long-standing goal of artificial intelligence is an algorithm that learns, tabula rasa, superhuman proficiency in challenging domains. Recently, AlphaGo became the first program to defeat a world champion in the game of Go. The tree search in AlphaGo evaluated positions and selected moves using deep neural networks. These neural networks were trained by supervised learning from human expert moves, and by reinforcement learning from self-play. Here we introduce an algorithm based solely on reinforcement learning, without human data, guidance or domain knowledge beyond game rules. AlphaGo becomes its own teacher: a neural network is trained to predict AlphaGo's own move selections and also the winner of AlphaGo's games. This neural network improves the strength of the tree search, resulting in higher quality move selection and stronger self-play in the next iteration. Starting tabula rasa, our new program AlphaGo Zero achieved superhuman performance, winning 100-0 against the previously published, champion-defeating AlphaGo. © 2017 Macmillan Publishers Limited, part of Springer Nature. All rights reserved.",Industry,United Kingdom of Great Britain and Northern Ireland,Highly cited,,,72.0,"""Training started from completely random behaviour and continued without human intervention for approximately three days.""",Google TPU v1,,,471445.3247973037,,,,,,,,Unreleased,Unreleased,,,,True
AlphaGo Zero,DeepMind,2017-10-18,Games,Go,46400244.0,"Input size: 19*19*17=6137, internal dimension 19*19
1 conv block
17*3*3*256=39168
39 residual blocks
2*3*3*256*256=1179648
Policy head
256*2+2*19*19*(19*19+2)=262598
Value head
256*1+1*19*19*256+256*1=92928
Total: 39168+39*1179648+262598+92928=46400966",3.41e+23,"source: https://docs.google.com/spreadsheets/d/1Kj4Q5WADcDXtUJLIOfGTCE3tGvxNczEMwyy8QtgSkHk/edit#gid=54587040&fvid=1361937389


AGZ had two models, one of which was small and another of which was large. The compute for AGZ is for the large model, which has 40 residual blocks instead of 20.

A second way of looking at this... we believe multiple TPUs were used for training. 29 million games * 211 moves per game on average * 0.8 seconds per move = 4.8952E+09 seconds of player-time across all TPUs.

4.8952E+09 seconds of player-time / (40 days * 24 * 60 * 60 seconds of real time) ~= 1,416 players

4 TPUs per player => 4.8952E+09 * 4 = 1.95808E+10 TPU-seconds
Total compute = 1.95808E+10 TPU-seconds * 92E+12 FLOP/(TPU-second) * 0.4 = 7.2e23 FLOP

So similar to the Cotra and Davidson estimate (within a factor of 2).

Alternative operation counting estimate: 
Number of connections (to calculate forward FLOP)
Input size: 19*19*17, Assuming internal dimension stays at 19*19
1 conv block
19*19*17*3*3*256=14139648
40 residual blocks
19*19*2*3*3*256*256=425852928
Policy head
19*19*256*2+2*19*19*(19*19+2)=446918
Value head
19*19*256*1+1*19*19*256+256*1=185088
Total: 14139648+40*425852928+446918+185088=17048888774
Forward FLOP: 2*17048888774=34097777548
Parameter updates “Parameters were updated from 3.1 million mini-batches of 2,048 positions each.”
Total updates: 3100000*2048=6348800000
Paramter update FLOP: 3*6348800000*34097777548=649439910290227200000
MCTS move generation FLOP
“Over the course of training, 29 million games of selfplay were generated.”
From the main training details (not 40 block specific): “using 1,600 simulations for each MCTS”
Assuming each MCTS simulation requires 1 forward pass
Assuming 200 moves on average per game
MCTS FLOP: 34097777548*29000000*200*1600=3.1642737564544e+23
Total: 3.1642737564544e+23+649439910290227200000=3.170768e+23
",,5800000000.0,"""Over the course of training, 29 million games of self-play were generated""

Approx 200 moves per Go game on average

https://homepages.cwi.nl/~aeb/go/misc/gostat.html

Thus 200 * 29e6 = 5.8e9",Confident,https://www.nature.com/articles/nature24270,Mastering the game of Go without human knowledge,8795.0,"D Silver, J Schrittwieser, K Simonyan, I Antonoglou","A long-standing goal of artificial intelligence is an algorithm that learns, tabula rasa, superhuman proficiency in challenging domains. Recently, AlphaGo became the first program to defeat a world champion in the game of Go. The tree search in AlphaGo evaluated positions and selected moves using deep neural networks. These neural networks were trained by supervised learning from human expert moves, and by reinforcement learning from self-play. Here we introduce an algorithm based solely on reinforcement learning, without human data, guidance or domain knowledge beyond game rules. AlphaGo becomes its own teacher: a neural network is trained to predict AlphaGo's own move selections and also the winner of AlphaGo's games. This neural network improves the strength of the tree search, resulting in higher quality move selection and stronger self-play in the next iteration. Starting tabula rasa, our new program AlphaGo Zero achieved superhuman performance, winning 100-0 against the previously published, champion-defeating AlphaGo. © 2017 Macmillan Publishers Limited, part of Springer Nature. All rights reserved.",Industry,United Kingdom of Great Britain and Northern Ireland,Highly cited,,,480.0,,Google TPU v1,,,613480.6258010615,,,,,,,,Unreleased,Unreleased,,,,True
AWD-LSTM+WT+Cache+IOG (WT2),NTT Communication Science Laboratories,2017-09-26,Language,Language modeling,53000000.0,53M (Table 3),3180000000000000.0,6 FLOP / parameter / token * 53000000 parameters * 2000000 tokens * 5 epochs = 3.18e+15 FLOP,WikiText-2,2000000.0,5 epochs (Table 1),Confident,https://arxiv.org/abs/1709.08907,Input-to-Output Gate to Improve RNN Language Models,7.0,"Sho Takase, Jun Suzuki, Masaaki Nagata","This paper proposes a reinforcing method that refines the output layers of existing Recurrent Neural Network (RNN) language models. We refer to our proposed method as Input-to-Output Gate (IOG). IOG has an extremely simple structure, and thus, can be easily combined with any RNN language models. Our experiments on the Penn Treebank and WikiText-2 datasets demonstrate that IOG consistently boosts the performance of several different types of current topline RNN language models.",Industry,Japan,SOTA improvement,"""IOG achieves comparable scores to the state-of-the-art on the Penn Treebank
dataset and outperforms the WikiText-2 dataset""",5.0,,,,,,,,,,,,,,Unreleased,Open (non-commercial),Open source,"license, looks non-commercial: https://github.com/nttcslab-nlp/iog?tab=License-1-ov-file#readme 

https://github.com/nttcslab-nlp/iog ",,
LSTM + dynamic eval,University of Edinburgh,2017-09-21,Language,Language modeling,50000000.0,table 2,,,WikiText-2,,,,https://arxiv.org/abs/1709.07432,Dynamic Evaluation of Neural Sequence Models,131.0,"Ben Krause, Emmanuel Kahembwe, Iain Murray, Steve Renals","We present methodology for using dynamic evaluation to improve neural sequence models. Models are adapted to recent history via a gradient descent based mechanism, causing them to assign higher probabilities to re-occurring sequential patterns. Dynamic evaluation outperforms existing adaptation approaches in our comparisons. Dynamic evaluation improves the state-of-the-art word-level perplexities on the Penn Treebank and WikiText-2 datasets to 51.1 and 44.3 respectively, and the state-of-the-art character-level cross-entropies on the text8 and Hutter Prize datasets to 1.19 bits/char and 1.08 bits/char respectively.",Academia,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,"""Dynamic evaluation outperforms existing adaptation approaches in our comparisons. Dynamic evaluation improves the state-of-the-art word-level perplexities on the Penn Treebank and WikiText-2 datasets to 51.1 and 44.3 respectively""",,,,,,,,,,,,,,,Unreleased,Open source,Open source,BSD-2: https://github.com/benkrause/dynamic-evaluation ,,
ISS,"Duke University,Microsoft",2017-09-15,Language,Language modeling,11100000.000000002,11.1M (Table 2),3400000000000000.0,6 FLOP / parameter / token * 11100000 parameters * 929000 tokens * 55 epochs = 3.402927e+15 FLOP,Penn TreeBank (PTB),929000.0,"""All models are trained from scratch for 55 epochs.""",Confident,https://arxiv.org/abs/1709.05027,Learning Intrinsic Sparse Structures within Long Short-Term Memory,146.0,"Wei Wen, Yuxiong He, Samyam Rajbhandari, Minjia Zhang, Wenhan Wang, Fang Liu, Bin Hu, Yiran Chen, Hai Li","Model compression is significant for the wide adoption of Recurrent Neural Networks (RNNs) in both user devices possessing limited resources and business clusters requiring quick responses to large-scale service requests. This work aims to learn structurally-sparse Long Short-Term Memory (LSTM) by reducing the sizes of basic structures within LSTM units, including input updates, gates, hidden states, cell states and outputs. Independently reducing the sizes of basic structures can result in inconsistent dimensions among them, and consequently, end up with invalid LSTM units. To overcome the problem, we propose Intrinsic Sparse Structures (ISS) in LSTMs. Removing a component of ISS will simultaneously decrease the sizes of all basic structures by one and thereby always maintain the dimension consistency. By learning ISS within LSTM units, the obtained LSTMs remain regular while having much smaller basic structures. Based on group Lasso regularization, our method achieves 10.59x speedup without losing any perplexity of a language modeling of Penn TreeBank dataset. It is also successfully evaluated through a compact model with only 2.69M weights for machine Question Answering of SQuAD dataset. Our approach is successfully extended to non- LSTM RNNs, like Recurrent Highway Networks (RHNs). Our source code is publicly available at this https URL","Academia,Industry","United States of America,United States of America,Multinational,India,Belgium",SOTA improvement,"""Moreover, ISS learning can find a
smaller RHN model with width 726, meanwhile improve the state-of-the-art perplexity as shown by the second entry in Table 2.""",55.0,,,,,,,,,,,,,,Unreleased,Open source,Open source,code (apache): https://github.com/wenwei202/iss-rnns/tree/master/ptb ,FP32,
PyramidNet,Korea Advanced Institute of Science and Technology (KAIST),2017-09-06,Vision,Image classification,26000000.0,best model had 26M params,2340000000000000.0,6ND=6*26000000*50000*300=2.34e+15,"CIFAR-10,CIFAR-100",50000.0,,Likely,https://arxiv.org/abs/1610.02915v4,Deep Pyramidal Residual Networks,718.0,"Dongyoon Han, Jiwhan Kim, Junmo Kim","Deep convolutional neural networks (DCNNs) have shown remarkable performance in image classification tasks in recent years. Generally, deep neural network architectures are stacks consisting of a large number of convolutional layers, and they perform downsampling along the spatial dimension via pooling to reduce memory usage. Concurrently, the feature map dimension (i.e., the number of channels) is sharply increased at downsampling locations, which is essential to ensure effective performance because it increases the diversity of high-level attributes. This also applies to residual networks and is very closely related to their performance. In this research, instead of sharply increasing the feature map dimension at units that perform downsampling, we gradually increase the feature map dimension at all units to involve as many locations as possible. This design, which is discussed in depth together with our new insights, has proven to be an effective means of improving generalization ability. Furthermore, we propose a novel residual unit capable of further improving the classification accuracy with our new network architecture. Experiments on benchmark CIFAR-10, CIFAR-100, and ImageNet datasets have shown that our network architecture has superior generalization ability compared to the original residual networks. Code is available at this https URL}",Academia,Korea (Republic of),SOTA improvement,"""In tests using CIFAR-10, CIFAR-100, and ImageNet1k datasets, our PyramidNets outperform all previous state-of-the-art deep network architectures.""",300.0,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,https://github.com/jhkim89/PyramidNet,FP32,
SENet (ImageNet),"Chinese Academy of Sciences,University of Oxford",2017-09-05,Vision,Image classification,28100000.0,Table 16,,,ImageNet,,,,https://arxiv.org/abs/1709.01507,Squeeze-and-Excitation Networks,23150.0,"Jie Hu, Li Shen, Samuel Albanie, Gang Sun, Enhua Wu",,"Academia,Academia","China,United Kingdom of Great Britain and Northern Ireland",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
GL-LWGC-AWD-MoS-LSTM + dynamic evaluation (WT2),Ben-Gurion University of the Negev,2017-08-29,Language,Language modeling,38000000.0,38M (Table 2),4.56e+17,6 FLOP / parameter / token * 38000000 parameters * 2000000 tokens * 1000 epochs = 4.56e+17 FLOP,WikiText-2,2000000.0,""" The model was trained for 1000 epochs until the validation score stopped improving.""",Confident,https://arxiv.org/abs/1708.08863,Gradual Learning of Recurrent Neural Networks,4.0,"Ziv Aharoni, Gal Rattner, Haim Permuter","Recurrent Neural Networks (RNNs) achieve state-of-the-art results in many sequence-to-sequence modeling tasks. However, RNNs are difficult to train and tend to suffer from overfitting. Motivated by the Data Processing Inequality (DPI), we formulate the multi-layered network as a Markov chain, introducing a training method that comprises training the network gradually and using layer-wise gradient clipping. We found that applying our methods, combined with previously introduced regularization and optimization methods, resulted in improvements in state-of-the-art architectures operating in language modeling tasks.",Academia,Israel,SOTA improvement,"""Our GL-LSTM model
overcame the state-of-the-art results with only two layers and 19M parameters, and further improved
the state-of-the-art results with the third layer phase""",1000.0,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
Libratus,Carnegie Mellon University (CMU),2017-08-19,Games,Poker,,,5.51e+20,"""In total, Libratus used about 25 million core hours. Of those, about 13 million core hours were used for exploratory experiments and evaluation. About 6 million core hours were spent on the initial abstraction and equilibrium finding component, another 3 million were used for nested subgame solving, and about 3 million were used on the self-improvement algorithm.""

""Like many data-centric supercomputers, Bridges offers a relatively a modest number of FLOPS, but lots of memory: 895 teraflops and 130 TB, respectively.""

I just used the first bullet point (as those are usually independent systems and you only benchmark one of them).
The first system has 752 nodes a 2CPUs a 14cores each.

source: https://www.top500.org/news/bridges-supercomputer-boots-up-at-pittsburgh/



1. 12M core hours for 196 cores
2. We have  895 TFLOPS for 752 nodes a 2 CPUs a 14 cores
2.1 That's 42.5 GFLOPS per core.
3. Running this for 12M h
3.1 12 * 10^6 * 60 * 60 * 42.5 * 10^9 FLOP/S = 1.823e21 FLOPs
4. Assuming 30% utilization
 1.823e21 * 0.3
→ 5.51e20 FLOPs",,,,Likely,https://www.ijcai.org/proceedings/2017/0772.pdf,Libratus: The Superhuman AI for No-Limit Poker,97.0,"N Brown, T Sandholm, S Machine","No-limit Texas Hold’em is the most popular variant of poker in the world. Heads-up no-limit Texas Hold’em is the main benchmark challenge for AI in imperfect-information games. We present Libratus, the first—and so far only—AI to defeat top human professionals in that game. Libratus’s architecture features three main modules, each of which has new algorithms: pre-computing a solution to an abstraction of the game which provides a high-level blueprint for the strategy of the AI, a new nested subgame-solving algorithm which repeatedly calculates a more detailed strategy as play progresses, and a self-improving module which augments the pre-computed blueprint over time.",Academia,United States of America,SOTA improvement,Claims to be first ML system to reach superhuman level at No Limit Poker Texas Hold Em,,,"""In total, Libratus used about 25 million core hours. Of those, about 13 million core hours were used for exploratory experiments and evaluation. About 6 million core hours were spent on the initial abstraction and equilibrium finding component, another 3 million were used for nested subgame solving, and about 3 million were used on the self-improvement algorithm.""",,,,,,,,,,,,Unreleased,Unreleased,,,,True
Adversarial Joint Adaptation Network (ResNet),"Tsinghua University,University of California (UC) Berkeley",2017-08-17,Vision,Image classification,60000000.0,"Model is based on ResNet (60m params), might have more parameters though

""We implement all deep methods based on the Caffe framework, and fine-tune from Caffe-provided models of AlexNet (Krizhevsky et al., 2012) and ResNet (He et al., 2016), both are pre-trained on the ImageNet 2012 dataset.""",,,"Office-31,ILSVRC 2012 subset of ImageNet",4652.0,,Speculative,https://arxiv.org/abs/1605.06636,Deep Transfer Learning with Joint Adaptation Networks,2482.0,"Mingsheng Long, Han Zhu, Jianmin Wang, Michael I. Jordan","Deep networks have been successfully applied to learn transferable features for adapting models from a source domain to a different target domain. In this paper, we present joint adaptation networks (JAN), which learn a transfer network by aligning the joint distributions of multiple domain-specific layers across domains based on a joint maximum mean discrepancy (JMMD) criterion. Adversarial training strategy is adopted to maximize JMMD such that the distributions of the source and target domains are made more distinguishable. Learning can be performed by stochastic gradient descent with the gradients computed by back-propagation in linear-time. Experiments testify that our model yields state of the art results on standard datasets.","Academia,Academia","China,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
NeuMF (Pinterest),"Shandong University,Texas A&M,National University of Singapore,Columbia University",2017-08-16,Recommendation,Collaborative filtering,,,,,,,,Unknown,https://arxiv.org/abs/1708.05031,Neural Collaborative Filtering,5427.0,"X He, L Liao, H Zhang, L Nie, X Hu",,"Academia,Academia,Academia,Academia","China,United States of America,Singapore,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
Cutout-regularized net,"University of Guelph,Vector Institute,CIFAR AI Research",2017-08-15,Vision,Image classification,,,,,,,,Unknown,https://arxiv.org/abs/1708.04552,Improved Regularization of Convolutional Neural Networks with Cutout,3446.0," Terrance DeVries, Graham W. Taylor",,"Academia,Academia,Research collective","Canada,Canada,Canada",Highly cited,,,,,,,,,https://www.yuzeh.com/data/agz-cost.html,,,,,,,,,,,,
EI-REHN-1000D,Korea Advanced Institute of Science and Technology (KAIST),2017-08-14,Language,Language modeling,19000000.0,19M (Table 4),1.06e+16,6 FLOP / parameter / token * 19000000 parameters * 929000 tokens * 100 epochs = 1.05906e+16 FLOP,Penn TreeBank (PTB),929000.0,"""For all the experiments in this paper, Tensorflow toolkit [15] was used. For training the network, Adam optimizer [16] was adopted with 20 mini-batch size, 100 epochs, and 0.01 learning rate""",Confident,https://arxiv.org/abs/1708.04116,Early Improving Recurrent Elastic Highway Network,6.0,"Hyunsin Park, Chang D. Yoo","To model time-varying nonlinear temporal dynamics in sequential data, a recurrent network capable of varying and adjusting the recurrence depth between input intervals is examined. The recurrence depth is extended by several intermediate hidden state units, and the weight parameters involved in determining these units are dynamically calculated. The motivation behind the paper lies on overcoming a deficiency in Recurrent Highway Networks and improving their performances which are currently at the forefront of RNNs: 1) Determining the appropriate number of recurrent depth in RHN for different tasks is a huge burden and just setting it to a large number is computationally wasteful with possible repercussion in terms of performance degradation and high latency. Expanding on the idea of adaptive computation time (ACT), with the use of an elastic gate in the form of a rectified exponentially decreasing function taking on as arguments as previous hidden state and input, the proposed model is able to evaluate the appropriate recurrent depth for each input. The rectified gating function enables the most significant intermediate hidden state updates to come early such that significant performance gain is achieved early. 2) Updating the weights from that of previous intermediate layer offers a richer representation than the use of shared weights across all intermediate recurrence layers. The weight update procedure is just an expansion of the idea underlying hypernetworks. To substantiate the effectiveness of the proposed network, we conducted three experiments: regression on synthetic data, human activity recognition, and language modeling on the Penn Treebank dataset. The proposed networks showed better performance than other state-of-the-art recurrent networks in all three experiments.",Academia,Korea (Republic of),SOTA improvement,"""The proposed networks showed better performance than other state-of-the-art recurrent networks in all three experiments.""",100.0,,,,,,,,,,,,,,Unreleased,Unreleased,,,FP32,
OpenAI TI7 DOTA 1v1,OpenAI,2017-08-11,Games,DOTA,,"Section 4 states: ""we used a model with over 150 million parameters"" but this is for the 5v5 agent, not the 1v1.",6.046095222592002e+20,Extracted from AI and Compute (https://openai.com/blog/ai-and-compute/) charts by using https://automeris.io/WebPlotDigitizer/.,,,,Confident,https://openai.com/research/dota-2,Dota 2,,,"We’ve created a bot which beats the world’s top professionals at 1v1 matches of Dota 2 under standard tournament rules. The bot learned the game from scratch by self-play, and does not use imitation learning or tree search. This is a step towards building AI systems which accomplish well-defined goals in messy, complicated situations involving real humans.",Industry,United States of America,"Historical significance,SOTA improvement",,,,,,,,,,,,,,,,,,,,,True
RetinaNet-R101,Facebook AI Research,2017-08-07,Vision,Object detection,53000000.0,source: table 2 in https://arxiv.org/pdf/1911.09070.pdf,2.065392e+18,"""We use synchronized SGD over 8 GPUs with a total of 16 images per minibatch (2 images per GPU). Unless otherwise specified, all models are trained for 90k iterations with an initial learning rate of 0.01, which is then divided by 10 at 60k and again at 80k iterations. We use horizontal image flipping as the only form of data augmentation unless otherwise noted. Weight decay of 0.0001 and momentum of 0.9 are used. The training loss is the sum the focal loss and the standard smooth L1 loss used for box regression [10]. Training time ranges between 10 and 35 hours for the models in Table 1e.""

NVIDIA M40 GPU

35*60**2*0.3*8*6.83E+12 = 2.07e18",COCO,135000.0,trainval135k split,Confident,https://arxiv.org/abs/1708.02002,Focal loss for dense object detection,16437.0,"TY Lin, P Goyal, R Girshick, K He, P Dollar",,Industry,United States of America,Highly cited,,,35.0,"""We use synchronized SGD over 8 GPUs with a total of 16 images per minibatch (2 images per GPU). Unless otherwise specified, all models are trained for 90k iterations with an initial learning rate of 0.01, which is then divided by 10 at 60k and again at 80k iterations. We use horizontal image flipping as the only form of data augmentation unless otherwise noted. Weight decay of 0.0001 and momentum of 0.9 are used. The training loss is the sum the focal loss and the standard smooth L1 loss used for box regression [10]. Training time ranges between 10 and 35 hours for the models in Table 1e.""

NVIDIA M40 GPU

35*60**2*0.3*8*6.83E+12 = 2.07e18",NVIDIA M40,8.0,,,,4174.823263154792,,,,,,,,,,FP32,
RetinaNet-R50,Facebook AI Research,2017-08-07,Vision,Object detection,34000000.0,source: table 2 in https://arxiv.org/pdf/1911.09070.pdf,,,,,,,https://arxiv.org/abs/1708.02002,Focal loss for dense object detection,16437.0,"TY Lin, P Goyal, R Girshick, K He",,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,"likely code and weights here, would need to sort through whether this specific model is here: https://github.com/facebookresearch/Detectron ",,
AWD-LSTM - 3-layer LSTM (tied) + continuous cache pointer (WT2),Salesforce Research,2017-08-07,Language,Language modeling,33000000.0,33M (Table 2),2.97e+17,6 FLOP / parameter / token * 33000000 parameters * 2000000 tokens * 750 epochs = 2.97e+17 FLOP,WikiText-2,2000000.0,"""For training the models, we use the NT-ASGD algorithm discussed in the previous section for 750 epochs""",Confident,https://arxiv.org/abs/1708.02182,Regularizing and Optimizing LSTM Language Models,1176.0,"Stephen Merity, Nitish Shirish Keskar, Richard Socher","Recurrent neural networks (RNNs), such as long short-term memory networks (LSTMs), serve as a fundamental building block for many sequence learning tasks, including machine translation, language modeling, and question answering. In this paper, we consider the specific problem of word-level language modeling and investigate strategies for regularizing and optimizing LSTM-based models. We propose the weight-dropped LSTM which uses DropConnect on hidden-to-hidden weights as a form of recurrent regularization. Further, we introduce NT-ASGD, a variant of the averaged stochastic gradient method, wherein the averaging trigger is determined using a non-monotonic condition as opposed to being tuned by the user. Using these and other regularization strategies, we achieve state-of-the-art word level perplexities on two data sets: 57.3 on Penn Treebank and 65.8 on WikiText-2. In exploring the effectiveness of a neural cache in conjunction with our proposed model, we achieve an even lower state-of-the-art perplexity of 52.8 on Penn Treebank and 52.0 on WikiText-2.",Industry,United States of America,"Highly cited,SOTA improvement","""we achieve an even lower state-of-the-art perplexity of 52.8 on Penn Treebank and 52.0 on WikiText-2.""",750.0,,,,,,,,,,,,,,Unreleased,Open source,Open source,"bsd-3 license: https://github.com/salesforce/awd-lstm-lm 
train/eval code: https://github.com/salesforce/awd-lstm-lm/blob/master/main.py ",,
GSM,"Peking University,Microsoft Research",2017-07-30,Language,Question answering,,It could be possible to estimate it from section 3.,,,SQuAD,4000000.0,"from https://paperswithcode.com/dataset/squad SQuAD have 107,785 question-answer pairs
download-ed dataset from: https://www.kaggle.com/datasets/stanfordu/stanford-question-answering-dataset?resource=download
wc -w on train-v.1.1 returns 4017471 words so around 4M words",Likely,https://aclanthology.org/P17-1018/,Gated Self-Matching Networks for Reading Comprehension and Question Answering,806.0,"Wenhui Wang, Nan Yang, Furu Wei, Baobao Chang, Ming Zhou","In this paper, we present the gated self-matching networks for reading comprehension style question answering, which aims to answer questions from a given passage. We first match the question and passage with gated attention-based recurrent networks to obtain the question-aware passage representation. Then we propose a self-matching attention mechanism to refine the representation by matching the passage against itself, which effectively encodes information from the whole passage. We finally employ the pointer networks to locate the positions of answers from the passages. We conduct extensive experiments on the SQuAD dataset. The single model achieves 71.3% on the evaluation metrics of exact match on the hidden test set, while the ensemble model further boosts the results to 75.9%. At the time of submission of the paper, our model holds the first place on the SQuAD leaderboard for both single and ensemble model.","Academia,Industry","China,United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational",SOTA improvement,"""At the time of submission of the paper, our model holds the first place on the SQuAD leaderboard for both single and ensemble model.""",,,,,,,,,,,,,,,,,,,,
ConvS2S (ensemble of 8 models),Meta AI,2017-07-25,Language,Translation,,,5.64e+19,"All models are implemented in Torch (Collobert et al., 2011) and trained on a single Nvidia M40 GPU except for WMT’14 English-French for which we use a multi-GPU setup on a single
machine. We train on up to eight GPUs synchronously by
maintaining copies of the model on each card and split the
batch so that each worker computes 1/8-th of the gradients;
at the end we sum the gradients via Nvidia NCCL.

1. English-Romanian: ""Training took between 6 and 7.5 days on a single GPU.""
7 days * 24 * 3600 * 6.8e12 FLOP/s (Nvidia M40, fp32) * 0.3 = 1.2e18 FLOP

2. English-German: "" We trained this model on a single GPU over a
period of 18.5 days with a batch size of 48"".
18.5 days * 24 * 3600 * 6.8e12 FLOP/s (Nvidia M40, fp32) * 0.3 = 3.3e18 FLOP

3. English-French: ""Our results are based on training
with 8 GPUs for about 37 days and batch size 32 on each
worker.6 ""
37 days * 24 * 3600 * 8 * 6.8e12 FLOP/s (Nvidia M40, fp32) * 0.3 = 5.2e19 FLOP

the minimum compute needed to train ensemble model: 1.2e18 FLOP + 3.3e18 FLOP + 5.2e19 FLOP = 5.65e19 FLOP

I am not sure how much to add more (they say ensemble model consists of 8 models), probably summarization training takes at least 1.2e18 FLOP more. 

","WMT English-German,WMT14,Gigaword",46600000.0," 2.8M + 4.5M + 35.5M + 3.8M = 46.6M

We consider three major WMT translation tasks as well as
a text summarization task.

WMT’16 English-Romanian. We use the same data and pre-processing as Sennrich et al. (2016b) but remove sentences with more than 175 words. This results in 2.8M sentence pairs for training and we evaluate on newstest2016.2

WMT’14 English-German. We use the same setup as Luong et al. (2015) which comprises 4.5M sentence pairs for training and we test on newstest2014.

WMT’14 English-French. We use the full training set of
36M sentence pairs, and remove sentences longer than 175
words as well as pairs with a source/target length ratio exceeding 1.5. This results in 35.5M sentence-pairs for training.

Abstractive summarization. We train on the Gigaword
corpus (Graff et al., 2003) and pre-process it identically
to Rush et al. (2015) resulting in 3.8M training examples
and 190K for validation.",Likely,https://arxiv.org/abs/1705.03122,Convolutional Sequence to Sequence Learning,,"Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, Yann N. Dauphin","The prevalent approach to sequence to sequence learning maps an input sequence to a variable length output sequence via recurrent neural networks. We introduce an architecture based entirely on convolutional neural networks. Compared to recurrent models, computations over all elements can be fully parallelized during training and optimization is easier since the number of non-linearities is fixed and independent of the input length. Our use of gated linear units eases gradient propagation and we equip each decoder layer with a separate attention module. We outperform the accuracy of the deep LSTM setup of Wu et al. (2016) on both WMT'14 English-German and WMT'14 English-French translation at an order of magnitude faster speed, both on GPU and CPU.",Industry,United States of America,"Highly cited,SOTA improvement","""We achieve a new state of the art on several public translation benchmark data sets. On the WMT’16 EnglishRomanian task we outperform the previous best result by 1.9 BLEU, on WMT’14 English-French translation we improve over the LSTM model of Wu et al. (2016) by 1.6 BLEU in a comparable setting, and on WMT’14 EnglishGerman translation we ouperform the same model by 0.5
BLEU""",,,,NVIDIA M40,,,,,,,,,,,,,,,,
PSPNet,Chinese University of Hong Kong (CUHK),2017-07-21,Vision,Image segmentation,,,,,,,,Unknown,https://ieeexplore.ieee.org/document/8100143,Pyramid Scene Parsing Network,10876.0,"Hengshuang Zhao, Jianping Shi, Xiaojuan Qi, Xiaogang Wang, Jiaya Jia",,Academia,"Hong Kong,China",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
NASNet-A,Google Brain,2017-07-21,Vision,Image classification,89000000.0,,,,,,,,https://arxiv.org/abs/1707.07012,Learning Transferable Architectures for Scalable Image Recognition,5306.0,"B Zoph, V Vasudevan, J Shlens",,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
AWD-LSTM,"DeepMind,University of Oxford",2017-07-18,Language,Language modeling,24000000.0,,,,WikiText-2,,,,https://arxiv.org/abs/1707.05589,On the State of the Art of Evaluation in Neural Language Models,555.0,"Gábor Melis, Chris Dyer, Phil Blunsom","Ongoing innovations in recurrent neural network architectures have provided a steady influx of apparently state-of-the-art results on language modelling benchmarks. However, these have been evaluated using differing code bases and limited computational resources, which represent uncontrolled sources of experimental variation. We reevaluate several popular architectures and regularisation methods with large-scale automatic black-box hyperparameter tuning and arrive at the somewhat surprising conclusion that standard LSTM architectures, when properly regularised, outperform more recent models. We establish a new state of the art on the Penn Treebank and Wikitext-2 corpora, as well as strong baselines on the Hutter Prize dataset.","Industry,Academia","United Kingdom of Great Britain and Northern Ireland,United Kingdom of Great Britain and Northern Ireland",SOTA improvement,"""We establish a new state of the art on the Penn Treebank and Wikitext-2 corpora""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,FP32,
JFT,"Google Research,Carnegie Mellon University (CMU)",2017-07-10,Vision,"Image classification,Object detection,Semantic segmentation,Pose estimation",44654504.0,"Uses ResNet-101 architecture, which has 44,654,504 parameters:
https://resources.wolframcloud.com/NeuralNetRepository/resources/ResNet-101-Trained-on-ImageNet-Competition-Data/",8.43e+20,"Tesla K80 performance: 8.13 TFLOP/s

Assume 40% utilization

60 days * 50 GPUs * 40% utilization * 8.13 TFLOP/s/GPU = 8.43*10^20 FLOP",JFT-300M,300000000.0,,Confident,https://arxiv.org/abs/1707.02968,Revisiting Unreasonable Effectiveness of Data in Deep Learning Era.,2194.0,"Chen Sun, Abhinav Shrivastava, Saurabh Singh, Abhinav Gupta","The success of deep learning in vision can be attributed to: (a) models with high capacity; (b) increased computational power; and (c) availability of large-scale labeled data. Since 2012, there have been significant advances in representation capabilities of the models and computational capabilities of GPUs. But the size of the biggest dataset has surprisingly remained constant. What will happen if we increase the dataset size by 10x or 100x? This paper takes a step towards clearing the clouds of mystery surrounding the relationship between `enormous data' and visual deep learning. By exploiting the JFT-300M dataset which has more than 375M noisy labels for 300M images, we investigate how the performance of current vision tasks would change if this data was used for representation learning. Our paper delivers some surprising (and some expected) findings. First, we find that the performance on vision tasks increases logarithmically based on volume of training data size. Second, we show that representation learning (or pre-training) still holds a lot of promise. One can improve performance on many vision tasks by just training a better base model. Finally, as expected, we present new state-of-the-art results for different vision tasks including image classification, object detection, semantic segmentation and human pose estimation. Our sincere hope is that this inspires vision community to not undervalue the data and develop collective efforts in building larger datasets.","Industry,Academia","Multinational,United States of America,Canada,Switzerland,United States of America",Highly cited,,4.0,1440.0,,NVIDIA Tesla K80,50.0,,17239.593034773116,,31330.704406642573,,,,32.0,,,,,,FP32,True
ShuffleNet v1,Megvii Inc,2017-07-03,Vision,"Object detection,Image classification",2430000.0,,,,,,,,https://arxiv.org/abs/1707.01083,ShuffleNet: An Extremely Efficient Convolutional Neural Network for Mobile Devices,6137.0,"X Zhang, X Zhou, M Lin, J Sun",,Industry,China,Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
NoisyNet-Dueling,DeepMind,2017-06-30,Games,Atari,,,,,,,,Unknown,https://arxiv.org/abs/1706.10295v3,Noisy Networks for Exploration,851.0,"M Fortunato, MG Azar, B Piot, J Menick",,Industry,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,,,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
DeepLabV3,Google,2017-06-17,Vision,Semantic segmentation,,,,,,,,Unknown,https://arxiv.org/abs/1706.05587,Rethinking Atrous Convolution for Semantic Image Segmentation,7689.0,"Liang-Chieh Chen, Yukun Zhu, George Papandreou, Florian Schroff, Hartwig Adam",,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
HRA,"Maluuba,Microsoft",2017-06-13,Games,Ms. Pac-Man,,,,,,,,Unknown,https://arxiv.org/abs/1706.04208,Hybrid Reward Architecture for Reinforcement Learning,243.0,"H Van Seijen, M Fatemi, J Romoff, R Laroche",,"Industry,Industry","Canada,United States of America,Multinational,India,Belgium",SOTA improvement,"""With the best combination, HRA not only outperforms the state-of-the-art on both metrics, it
also significantly outperforms the human score, convincingly demonstrating the strength of HRA.""",,,,,,,,,,,,,,,,,,,FP32,
Transformer,"Google Research,Google Brain",2017-06-12,Language,Translation,213000000.0,"This page suggests the transformer has 213M parameters.

""Although there are others architectures that make use of attention layers, none achieves so good results so fast. Not only that, but the only model that can compite against Transformer is the Slicenet22, proposed just fifteen days before. It takes much longer to train, due to the huge amount of parameters it requires (348 million against the 213 millions of Transformer), and the BLEU scores it achieves are slightly worse on average. In short, up to date it offers no profit over Transformer.""

https://ricardokleinklein.github.io/2017/11/16/Attention-is-all-you-need.html",7.4245248e+18,"""The model was trained during 300000 steps, roughly 3.5 days, using 8 NVIDIA P100 GPUs.""

source: https://ricardokleinklein.github.io/2017/11/16/Attention-is-all-you-need.html

NVIDIA Tesla P100 has 9.3 teraFLOPS single-precision performance

source: https://www.nvidia.com/en-gb/data-center/tesla-p100/

We assume 0.33 utilization performance, in line with OpenAI's ""AI and compute"" article

source: https://openai.com/blog/ai-and-compute/

9.3*10^12 FLOP / GPU / sec * 8 GPUs * 3.5 days * 24 hour / day * 3600 sec / hour * 0.33 [assumed utilization] = 7.4245248e+18 FLOP

In the ""AI and Memory Wall"" paper (https://github.com/amirgholami/ai_and_memory_wall) the estimation is 23,000 PFLOPS = 2.3*10^19 FLOPs. They estimate number of parameters as 65M

Note that Table 2 provides a training compute estimate, but appears not to account for utilization.","WMT English-German,WMT14",1866666666.6666667,"""We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs. Sentences were encoded using byte-pair encoding [3], which has a shared source-target vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary ""

In total, this is 40.5 million sentence-pairs. Assuming each sentence pair is 15-20 words in each language, this is 1.2-1.6 billion words.

Convert to tokens: 1.4B * 4/3 = 1.87B tokens",Confident,https://proceedings.neurips.cc/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf,Attention Is All You Need,108604.0,"Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, Illia Polosukhin","The dominant sequence transduction models are based on complex recurrent or convolutional neural networks that include an encoder and a decoder. The best performing models also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely. Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train. Our model achieves 28.4 BLEU on the WMT 2014 English-to-German translation task, improving over the existing best results, including ensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of 41.0 after training for 3.5 days on eight GPUs, a small fraction of the training costs of the best models from the literature","Industry,Industry","Multinational,United States of America,Canada,Switzerland,United States of America","Highly cited,Historical significance",The original transformer,3.0,84.0,"We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using
the hyperparameters described throughout the paper, each training step took about 0.4 seconds. We trained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the
bottom line of table 3), step time was 1.0 seconds. The big models were trained for 300,000 steps
(3.5 days).",NVIDIA P100,8.0,,438.0356518424336,,4180.032869488383,,,,,,Unreleased,Unreleased,,,FP32,
EDSR,Seoul National University,2017-06-10,"Vision,Image generation",Image super-resolution,,,,,,,,Unknown,https://arxiv.org/abs/1707.02921,Enhanced Deep Residual Networks for Single Image Super-Resolution,5348.0,"Bee Lim, Sanghyun Son, Heewon Kim, Seungjun Nah, Kyoung Mu Lee",,Academia,Korea (Republic of),Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
Reading Twice for NLU,DeepMind,2017-06-08,Language,Question answering,,,,,"TriviaQA,SQuAD",,"both datasets have around 100k training examples.
SQuAD have around 4M words. TriviaQA is larger
""We use 2 recent DQAbenchmark training and evaluation datasets,
SQuAD (Rajpurkar et al., 2016) and TriviaQA
(Joshi et al., 2017). """,Unknown,https://arxiv.org/abs/1706.02596v3,Dynamic Integration of Background Knowledge in Neural NLU Systems,62.0,"Dirk Weissenborn, Tomáš Kočiský, Chris Dyer","Common-sense and background knowledge is required to understand natural language, but in most neural natural language understanding (NLU) systems, this knowledge must be acquired from training corpora during learning, and then it is static at test time. We introduce a new architecture for the dynamic integration of explicit background knowledge in NLU models. A general-purpose reading module reads background knowledge in the form of free-text statements (together with task-specific text inputs) and yields refined word representations to a task-specific NLU architecture that reprocesses the task inputs with these representations. Experiments on document question answering (DQA) and recognizing textual entailment (RTE) demonstrate the effectiveness and flexibility of the approach. Analysis shows that our model learns to exploit knowledge in a semantically appropriate way. ",Industry,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,"""Our results are competi-
tive with the best systems, achieving a new state
of the art on the recent TriviaQA benchmarks.""",,,,,,,,,,,,,,,,,,,,
PointNet++,Stanford University,2017-06-07,3D modeling,3D segmentation,,,,,,,,Unknown,https://arxiv.org/abs/1706.02413,PointNet++: Deep Hierarchical Feature Learning on Point Sets in a Metric Space,9565.0,"Charles R. Qi, Li Yi, Hao Su, Leonidas J. Guibas",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
Inflated 3D ConvNet,"DeepMind,University of Oxford",2017-06-01,3D modeling,Action recognition,,,,,,,,Unknown,https://arxiv.org/abs/1705.07750,"Quo Vadis, Action Recognition? A New Model and the Kinetics Dataset",7325.0,"Joao Carreira, Andrew Zisserman",,"Industry,Academia","United Kingdom of Great Britain and Northern Ireland,United Kingdom of Great Britain and Northern Ireland",Highly cited,,,,,,,,,,,,,,,,,,,,,
SRGAN,Twitter,2017-05-25,"Vision,Image generation",Image super-resolution,,,,,,,,Unknown,https://openaccess.thecvf.com/content_cvpr_2017/html/Ledig_Photo-Realistic_Single_Image_CVPR_2017_paper.html,Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network,11032.0,"Christian Ledig, Lucas Theis, Ferenc Huszar, Jose Caballero, Andrew Cunningham, Alejandro Acosta, Andrew Aitken, Alykhan Tejani, Johannes Totz, Zehan Wang, Wenzhe Shi",,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
Mnemonic Reader,"Fudan University,Microsoft Research",2017-05-08,Language,Question answering,,may be possible to estimate architecture description,,may be possible to estimate from architecture description,SQuAD,107785.0,size of SQuAD,Confident,https://arxiv.org/abs/1705.02798v6,Reinforced Mnemonic Reader for Machine Reading Comprehension,217.0,"Minghao Hu, Yuxing Peng, Zhen Huang, Xipeng Qiu, Furu Wei, Ming Zhou","In this paper, we introduce the Reinforced Mnemonic Reader for machine reading comprehension tasks, which enhances previous attentive readers in two aspects. First, a reattention mechanism is proposed to refine current attentions by directly accessing to past attentions that are temporally memorized in a multi-round alignment architecture, so as to avoid the problems of attention redundancy and attention deficiency. Second, a new optimization approach, called dynamic-critical reinforcement learning, is introduced to extend the standard supervised method. It always encourages to predict a more acceptable answer so as to address the convergence suppression problem occurred in traditional reinforcement learning algorithms. Extensive experiments on the Stanford Question Answering Dataset (SQuAD) show that our model achieves state-of-the-art results. Meanwhile, our model outperforms previous systems by over 6% in terms of both Exact Match and F1 metrics on two adversarial SQuAD datasets. ","Academia,Industry","China,United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational",SOTA improvement,"from the abstract "" Extensive experiments on the Stanford Question Answering Dataset (SQuAD) show that our model achieves state-of-the-art results. Meanwhile, our model outperforms previous systems by over 6% in terms of both Exact Match and F1 metrics on two adversarial SQuAD datasets. """,,,,,,,,,,,,,,,,,,,,
DeepLab (2017),"Johns Hopkins University,Google,University College London (UCL)",2017-04-27,Vision,Image segmentation,,,,,,,,Unknown,https://ieeexplore.ieee.org/abstract/document/7913730,"DeepLab: Semantic Image Segmentation with Deep Convolutional Nets, Atrous Convolution, and Fully Connected CRFs",16537.0,"Liang-Chieh Chen, George Papandreou, Iasonas Kokkinos, Kevin Murphy, Alan L. Yuille",,"Academia,Industry,Academia","United States of America,United States of America,United Kingdom of Great Britain and Northern Ireland",Highly cited,,,,,,,,,,,,,,,,,,,,,
MobileNet,Google,2017-04-17,Vision,"Object detection,Image classification,Face detection",4200000.0,,,,,,,,https://arxiv.org/abs/1704.04861,MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications,18770.0,"AG Howard, M Zhu, B Chen, D Kalenichenko","We present a class of efficient models called MobileNets for mobile and embedded vision applications. MobileNets are based on a streamlined architecture that uses depth-wise separable convolutions to build light weight deep neural networks. We introduce two simple global hyper-parameters that efficiently trade off between latency and accuracy. These hyper-parameters allow the model builder to choose the right sized model for their application based on the constraints of the problem. We present extensive experiments on resource and accuracy tradeoffs and show strong performance compared to other popular models on ImageNet classification. We then demonstrate the effectiveness of MobileNets across a wide range of applications and use cases including object detection, finegrain classification, face attributes and large scale geo-localization.",Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
WGAN-GP,"Courant Institute of Mathematical Sciences,Mila - Quebec AI (originally Montreal Institute for Learning Algorithms)",2017-03-31,Image generation,Image generation,,,,,,,,Unknown,https://arxiv.org/abs/1704.00028,Improved Training of Wasserstein GANs,8859.0,"Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, Aaron Courville",,"Academia,Academia","United States of America,Canada",Highly cited,,,,,,,,,,,,,,,,,,,,,
Mask R-CNN,Facebook AI Research,2017-03-30,Vision,Image segmentation,,,,,COCO,,,Unknown,https://arxiv.org/abs/1703.06870,Mask R-CNN,24562.0,"Kaiming He, Georgia Gkioxari, Piotr Dollár, Ross Girshick",,Industry,United States of America,Highly cited,,,,"Training with
ResNet-50-FPN on COCO trainval35k takes 32 hours
in our synchronized 8-GPU implementation (0.72s per 16-
image mini-batch), and 44 hours with ResNet-101-FPN",,,,,,,,,,,,,,,,,
Prototypical networks,"University of Toronto,Twitter",2017-03-15,Vision,Image classification,,,,,,,,Unknown,https://arxiv.org/abs/1703.05175,Prototypical Networks for Few-shot Learning,7282.0," Jake Snell, Kevin Swersky, Richard S. Zemel",,"Academia,Industry","Canada,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
DnCNN,"Harbin Institute of Technology,Hong Kong Polytechnic University,ULSee Inc.,Xi’an Jiaotong University",2017-02-01,"Vision,Image generation",Image super-resolution,,,,,,,,Unknown,https://ieeexplore.ieee.org/abstract/document/7839189,Beyond a Gaussian Denoiser: Residual Learning of Deep CNN for Image Denoising,6381.0,"Kai Zhang, Wangmeng Zuo, Yunjin Chen, Deyu Meng, Lei Zhang",,"Academia,Academia,Industry,Academia","China,Hong Kong,China,China,China",Highly cited,,,,,,,,,,,,,,,,,,,,,
MoE-Multi,"Jagiellonian University,Google Brain",2017-01-23,Language,"Language modeling,Translation",8700000000.0,"Table 5

https://arxiv.org/abs/1701.06538",9.393905664e+19,"12 days 
64 NVIDIA K40 GPUs (see hardware data sheet for performance)
0.33 util rate
 ",,133000000000.0,"""We constructed a similar training set consisting of shuffled unique sentences from Google’s internal news corpus, totalling roughly 100 billion words""
Assuming 100 words = 133 tokens",Confident,https://arxiv.org/abs/1701.06538,Outrageously Large Neural Networks: The Sparsely-Gated Mixture-of-Experts Layer,2037.0,"N Shazeer, A Mirhoseini, K Maziarz, A Davis","The capacity of a neural network to absorb information is limited by its number of parameters. Conditional computation, where parts of the network are active on a per-example basis, has been proposed in theory as a way of dramatically increasing model capacity without a proportional increase in computation. In practice, however, there are significant algorithmic and performance challenges. In this work, we address these challenges and finally realize the promise of conditional computation, achieving greater than 1000x improvements in model capacity with only minor losses in computational efficiency on modern GPU clusters. We introduce a Sparsely-Gated Mixture-of-Experts layer (MoE), consisting of up to thousands of feed-forward sub-networks. A trainable gating network determines a sparse combination of these experts to use for each example. We apply the MoE to the tasks of language modeling and machine translation, where model capacity is critical for absorbing the vast quantities of knowledge available in the training corpora. We present model architectures in which a MoE with up to 137 billion parameters is applied convolutionally between stacked LSTM layers. On large language modeling and machine translation benchmarks, these models achieve significantly better results than state-of-the-art at lower computational cost.","Academia,Industry","Poland,United States of America","Highly cited,SOTA improvement","""On large language modeling and machine translation benchmarks, these models achieve significantly better results than state-of-the-art at lower computational cost""",,288.0,12 days,NVIDIA Tesla K40t,64.0,,3874.12265,,32873.78910003616,,,,1365333.3333333333,"""Training was done synchronously on a cluster of up to 64 GPUs as described in section 3. Each training batch consisted of a set of sentence pairs containing roughly 16000 words per GPU."" Although they appear to use word-level tokenization in other experiments, here they use subword tokens: ""Similar to GNMT, to effectively deal with rare words, we used subword units (also known as “wordpieces"") (Schuster & Nakajima, 2012) for inputs and outputs in our system."" In total 64 GPUs * 16k words/GPU * 4/3 tokens/word = 1,365,333",Unreleased,,,,FP32,True
OR-WideResNet,"Duke University,University of Chinese Academy of Sciences",2017-01-07,Vision,Image classification,18200000.0,18.2M for largest OR-WideResNet model.,,,CIFAR-10,50000.0,,Confident,https://arxiv.org/abs/1701.01833v2,Oriented Response Networks,285.0,"Yanzhao Zhou, Qixiang Ye, Qiang Qiu and Jianbin Jiao","Deep Convolution Neural Networks (DCNNs) are capable of learning unprecedentedly effective image representations. However, their ability in handling significant local and global image rotations remains limited. In this paper, we propose Active Rotating Filters (ARFs) that actively rotate during convolution and produce feature maps with location and orientation explicitly encoded. An ARF acts as a virtual filter bank containing the filter itself and its multiple unmaterialised rotated versions. During back-propagation, an ARF is collectively updated using errors from all its rotated versions. DCNNs using ARFs, referred to as Oriented Response Networks (ORNs), can produce within-class rotation-invariant deep features while maintaining inter-class discrimination for classification tasks. The oriented response produced by ORNs can also be used for image and object orientation estimation tasks. Over multiple state-of-the-art DCNN architectures, such as VGG, ResNet, and STN, we consistently observe that replacing regular filters with the proposed ARFs leads to significant reduction in the number of network parameters and improvement in classification performance. We report the best results on several commonly used benchmarks.","Academia,Academia","United States of America,China",SOTA improvement,"""In Sec. 4.3, we upgrade the VGG [38], ResNet [18], and the
WideResNet [45] to ORNs, and train them on CIFAR10 and
CIFAR100 [22], showing the state-of-the-art performance
on the natural image classification task.""",,,,NVIDIA Tesla K80,,,,,,,,,,,,,,,,
DeepStack,"University of Alberta,Charles University,Czech Technical University",2017-01-06,Games,Poker,2500000.0,"Figure 3, p.9

source: https://docs.google.com/spreadsheets/d/1Kj4Q5WADcDXtUJLIOfGTCE3tGvxNczEMwyy8QtgSkHk/edit#gid=54587040&fvid=1361937389",1.446336e+19,"The largest source of compute necessary for training seems to be the data generation job on 20 GPUs. We count this towards the training compute because it requires simulation using the network. This is analogous to the AlphaGo systems simulating Go games.

From p.26: ""For the flop network, one million poker flop situations (from after the flop cards are dealt) were generated and solved. These situations were solved using DeepStack’s depth limited solver with the turn network used for the counterfactual values at public states immediately after the turn card. We used a cluster of 20 GPUS and one-half of a GPU year of computation time.""

Assume they used P100 GPUs because they were common at the time (P100 was released in 2016 and this paper was published in 2017).

But assume low utilization of 10% to hedge on (a) lower-performing GPUs being used, (b) non-FLOP computations taking up a lot of the data generation job.

Calculation:
6 months * 30 days * 24 hours * 3600 seconds * 9.3e12 FLOP/s * 0.1 utilization = 1.446336e+19 FLOP.",,10000000.0,"""The turn network was trained by solving 10 million randomly generated poker turn
games. These turn games used randomly generated ranges, public cards, and a random pot
size (10).""",Speculative,https://arxiv.org/abs/1701.01724,DeepStack: Expert-Level Artificial Intelligence in No-Limit Poker,855.0,"Matej Moravčík, Martin Schmid, Neil Burch, Viliam Lisý, Dustin Morrill, Nolan Bard, Trevor Davis, Kevin Waugh, Michael Johanson, Michael Bowling",,"Academia,Academia,Academia","Canada,Czechia,Czechia",SOTA improvement,"first human-competitive poker AI, confirmed by website: https://www.deepstack.ai/",,218.0,from compute notes - around 9 days  - half a year of GPU compute using 20 GPUs,,20.0,,,,,,,,,,,,,,FP32,
YOLOv2,"University of Washington,Allen Institute for AI",2016-12-25,Vision,Object detection,51000000.0,Source: https://resources.wolframcloud.com/NeuralNetRepository/resources/YOLO-V2-Trained-on-MS-COCO-Data_1,,,,,,,https://arxiv.org/abs/1612.08242,"YOLO9000: Better, Faster, Stronger",14397.0,"Joseph Redmon, Ali Farhadi","We introduce YOLO9000, a state-of-the-art, real-time object detection system that can detect over 9000 object categories. First we propose various improvements to the YOLO detection method, both novel and drawn from prior work. The improved model, YOLOv2, is state-of-the-art on standard detection tasks like PASCAL VOC and COCO. At 67 FPS, YOLOv2 gets 76.8 mAP on VOC 2007. At 40 FPS, YOLOv2 gets 78.6 mAP, outperforming state-of-the-art methods like Faster RCNN with ResNet and SSD while still running significantly faster. Finally we propose a method to jointly train on object detection and classification. Using this method we train YOLO9000 simultaneously on the COCO detection dataset and the ImageNet classification dataset. Our joint training allows YOLO9000 to predict detections for object classes that don't have labelled detection data. We validate our approach on the ImageNet detection task. YOLO9000 gets 19.7 mAP on the ImageNet detection validation set despite only having detection data for 44 of the 200 classes. On the 156 classes not in COCO, YOLO9000 gets 16.0 mAP. But YOLO can detect more than just 200 classes; it predicts detections for more than 9000 different object categories. And it still runs in real-time.","Academia,Research collective","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,Open weights (non-commercial),Unreleased,,"weights here, no license specified: https://pjreddie.com/darknet/yolo/ ",FP32,
GCNN-14,Facebook AI Research,2016-12-23,Language,Language modeling,,,,,WikiText-103,,,Unknown,https://arxiv.org/abs/1612.08083,"Language Modeling with Gated Convolutional Networks, Language Modeling with Gated Convolutional Networks",2179.0,"Yann N. Dauphin, Angela Fan, Michael Auli, David Grangier, Yann N. Dauphin, Angela Fan, Michael Auli, David Grangier","The pre-dominant approach to language modeling to date is based on recurrent neural networks. Their success on this task is often linked to their ability to capture unbounded context. In this paper we develop a finite context approach through stacked convolutions, which can be more efficient since they allow parallelization over sequential tokens. We propose a novel simplified gating mechanism that outperforms Oord et al (2016) and investigate the impact of key architectural decisions. The proposed approach achieves state-of-the-art on the WikiText-103 benchmark, even though it features long-term dependencies, as well as competitive results on the Google Billion Words benchmark. Our model reduces the latency to score a sentence by an order of magnitude compared to a recurrent baseline. To our knowledge, this is the first time a non-recurrent approach is competitive with strong recurrent models on these large scale language tasks.",Industry,United States of America,Highly cited,,35.0,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
Diabetic Retinopathy Detection Net,"UT Austin,University of California (UC) Berkeley,Google",2016-12-13,Vision,Image classification,,,,,,,,Unknown,https://jamanetwork.com/journals/jama/article-abstract/2588763,Development and Validation of a Deep Learning Algorithm for Detection of Diabetic Retinopathy in Retinal Fundus Photographs,3540.0,"V Gulshan, L Peng, M Coram, MC Stumpe, D Wu",,"Academia,Academia,Industry","United States of America,United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
GAN-Advancer,OpenAI,2016-12-05,Vision,Image classification,,,,,,,,Unknown,https://dl.acm.org/doi/10.5555/3157096.3157346,Improved Techniques for Training GANs,8353.0,"Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, Xi Chen","We present a variety of new architectural features and training procedures that we apply to the generative adversarial networks (GANs) framework. Using our new techniques, we achieve state-of-the-art results in semi-supervised classification on MNIST, CIFAR-10 and SVHN. The generated images are of high quality as confirmed by a visual Turing test: our model generates MNIST samples that humans cannot distinguish from real data, and CIFAR-10 samples that yield a human error rate of 21.3%. We also present ImageNet samples with unprecedented resolution and show that our methods enable the model to learn recognizable features of ImageNet classes.",Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,Unreleased,Open (non-commercial),Open access (non-commercial),"code, no weights, unclear license:
https://github.com/openai/improved-gan 
experiment code: https://github.com/openai/improved-gan/tree/master/mnist_svhn_cifar10 ",FP32,
PointNet,Stanford University,2016-12-02,3D modeling,3D segmentation,,,,,,,,Unknown,https://arxiv.org/abs/1612.00593,PointNet: Deep Learning on Point Sets for 3D Classification and Segmentation,12651.0,"CR Qi, H Su, K Mo, LJ Guibas",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Elastic weight consolidation,DeepMind,2016-12-02,"Vision,Games","Image classification,Atari",,,,,,,,Unknown,https://arxiv.org/abs/1612.00796,Overcoming catastrophic forgetting in neural networks,6340.0,"James Kirkpatrick, Razvan Pascanu, Neil Rabinowitz, Joel Veness, Guillaume Desjardins, Andrei A. Rusu, Kieran Milan, John Quan, Tiago Ramalho, Agnieszka Grabska-Barwinska, Demis Hassabis, Claudia Clopath, Dharshan Kumaran, Raia Hadsell","The ability to learn tasks in a sequential fashion is crucial to the development of artificial intelligence. Neural networks are not, in general, capable of this and it has been widely thought that catastrophic forgetting is an inevitable feature of connectionist models. We show that it is possible to overcome this limitation and train networks that can maintain expertise on tasks which they have not experienced for a long time. Our approach remembers old tasks by selectively slowing down learning on the weights important for those tasks. We demonstrate our approach is scalable and effective by solving a set of classification tasks based on the MNIST hand written digit dataset and by learning several Atari 2600 games sequentially.",Industry,United Kingdom of Great Britain and Northern Ireland,Highly cited,,,,,,,,,,,,,,,,,,,,,
Image-to-image cGAN,University of California (UC) Berkeley,2016-11-21,"Vision,Image generation",Image generation,,,,,,,,Unknown,https://arxiv.org/abs/1611.07004,Image-to-Image Translation with Conditional Adversarial Networks,18207.0,"Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, Alexei A. Efros","We investigate conditional adversarial networks as a general-purpose solution to image-to-image translation problems. These networks not only learn the mapping from input image to output image, but also learn a loss function to train this mapping. This makes it possible to apply the same generic approach to problems that traditionally would require very different loss formulations. We demonstrate that this approach is effective at synthesizing photos from label maps, reconstructing objects from edge maps, and colorizing images, among other tasks. Indeed, since the release of the pix2pix software associated with this paper, a large number of internet users (many of them artists) have posted their own experiments with our system, further demonstrating its wide applicability and ease of adoption without the need for parameter tweaking. As a community, we no longer hand-engineer our mapping functions, and this work suggests we can achieve reasonable results without hand-engineering our loss functions either.",Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
RefineNet,"University of Adelaide,Australian Centre for Robotic Vision",2016-11-20,Vision,Object detection,,,,,,,,Unknown,https://arxiv.org/abs/1611.06612v3,RefineNet: Multi-Path Refinement Networks for High-Resolution Semantic Segmentation,2736.0,"Guosheng Lin, Anton Milan, Chunhua Shen, Ian Reid",,Academia,"Australia,Australia",Highly cited,,,,,,,,,,,,,,,,,,,,,
PolyNet,Chinese University of Hong Kong (CUHK),2016-11-17,Vision,Image classification,92000000.0,,6.4e+19,"Section 5: ""ResNet-500 [has] similar computation
costs to our Very Deep PolyNet"".

ResNet-152 has 11.3e9 FLOP per forward pass (https://arxiv.org/abs/1512.03385, Table 1). Hence ResNet-500 has approx 3.7e10 = 11.3e9*500/152 FLOP per forward pass.

560k iterations, batch size 512:
Train compute = 3.7e10*3*2*560e3 * 512 = 6.4e19",ImageNet,1280000.0,,Likely,https://arxiv.org/abs/1611.05725,PolyNet: A Pursuit of Structural Diversity in Very Deep Networks,282.0,"X Zhang, Z Li, C Change Loy",,Academia,"Hong Kong,China",SOTA improvement,"""The Very Deep PolyNet, designed following this direction, demonstrates substantial improvements over the state-of-the-art on the ILSVRC 2012 benchmark. Compared to Inception-ResNet-v2, it reduces the top-5 validation error on single crops from 4.9% to 4.25%, and that on multi-crops from 3.7% to 3.45%.""",,,,NVIDIA GeForce GTX TITAN X,32.0,,617.1106542,,16797.38519252759,,,,,,,,,,FP32,True
ResNeXt-50,"University of California San Diego,Facebook",2016-11-16,Vision,Image classification,25000000.0,"""If you’re thinking about ResNets, yes, they are related. ResNeXt-50 has 25M parameters (ResNet-50 has 25.5M).""

https://towardsdatascience.com/illustrated-10-cnn-architectures-95d78ace614d",,,,,,,https://arxiv.org/abs/1611.05431,Aggregated Residual Transformations for Deep Neural Networks,9583.0,"Saining Xie, Ross Girshick, Piotr Dollár, Zhuowen Tu, Kaiming He",,"Academia,Industry","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
Deeply-recursive ConvNet,Seoul National University,2016-11-11,"Vision,Image generation",Image super-resolution,,,,,,,,Unknown,https://arxiv.org/abs/1511.04491,Deeply-Recursive Convolutional Network for Image Super-Resolution,2395.0,"Jiwon Kim, Jung Kwon Lee, Kyoung Mu Lee",,Academia,Korea (Republic of),Highly cited,,,,,,,,,,,,,,,,,,,,,
NASv3 (CIFAR-10),Google Brain,2016-11-05,Vision,"Image classification,Neural Architecture Search - NAS",37400000.0,Table 1,2.2e+21,"50 epochs * 50,000 images * 10.0 GFLOPSs * 12800 networks * 2 add-multiply * 3 backward pass 
= 1.9e6 PF = 22 pfs-days

source: https://openai.com/blog/ai-and-compute/",,50000.0,CIFAR-10 (does not factor in augmentation procedures),Likely,https://arxiv.org/abs/1611.01578,Neural Architecture Search with Reinforcement Learning,5098.0,"Barret Zoph, Quoc V. Le","Neural networks are powerful and flexible models that work well for many difficult learning tasks in image, speech and natural language understanding. Despite their success, neural networks are still hard to design. In this paper, we use a recurrent network to generate the model descriptions of neural networks and train this RNN with reinforcement learning to maximize the expected accuracy of the generated architectures on a validation set. On the CIFAR-10 dataset, our method, starting from scratch, can design a novel network architecture that rivals the best human-invented architecture in terms of test set accuracy. Our CIFAR-10 model achieves a test error rate of 3.65, which is 0.09 percent better and 1.05x faster than the previous state-of-the-art model that used a similar architectural scheme. On the Penn Treebank dataset, our model can compose a novel recurrent cell that outperforms the widely-used LSTM cell, and other state-of-the-art baselines. Our cell achieves a test set perplexity of 62.4 on the Penn Treebank, which is 3.6 perplexity better than the previous state-of-the-art model. The cell can also be transferred to the character language modeling task on PTB and achieves a state-of-the-art perplexity of 1.214.",Industry,United States of America,Highly cited,,,,,,800.0,,,,,,,,,,,,,,,True
NAS with base 8 and shared embeddings,Google Brain,2016-11-05,Language,"Language modeling,Neural Architecture Search - NAS",54000000.0,54M (Table 2),1.05e+16,6 FLOP / parameter / token * 54000000 parameters * 929000 tokens * 35 epochs = 1.053486e+16 FLOP,Penn TreeBank (PTB),929000.0,"""every child model is constructed and trained for 35 epochs""",Confident,https://arxiv.org/abs/1611.01578,Neural Architecture Search with Reinforcement Learning,5098.0,"Barret Zoph, Quoc V. Le","Neural networks are powerful and flexible models that work well for many difficult learning tasks in image, speech and natural language understanding. Despite their success, neural networks are still hard to design. In this paper, we use a recurrent network to generate the model descriptions of neural networks and train this RNN with reinforcement learning to maximize the expected accuracy of the generated architectures on a validation set. On the CIFAR-10 dataset, our method, starting from scratch, can design a novel network architecture that rivals the best human-invented architecture in terms of test set accuracy. Our CIFAR-10 model achieves a test error rate of 3.65, which is 0.09 percent better and 1.05x faster than the previous state-of-the-art model that used a similar architectural scheme. On the Penn Treebank dataset, our model can compose a novel recurrent cell that outperforms the widely-used LSTM cell, and other state-of-the-art baselines. Our cell achieves a test set perplexity of 62.4 on the Penn Treebank, which is 3.6 perplexity better than the previous state-of-the-art model. The cell can also be transferred to the character language modeling task on PTB and achieves a state-of-the-art perplexity of 1.214.",Industry,United States of America,Highly cited,,35.0,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
BIDAF,"University of Washington,Allen Institute for AI",2016-11-05,Language,Question answering,2600000.0,"There are two similar models described in sections ""Models details""
citation from the paper about model for SQuAD ""The model has about 2.6 million parameters""
citation about model for cloze test
""The model architecture used for this task is very similar to that for SQuAD (Section 4) with only a few small changes to adapt it to the cloze test. ""
",3.4686144e+18,"flops = (8) * (6691 * 10**9) * (60 * 3600) * 3 // 10
(num gpu) * (peak flops) * (time in seconds) * (assumed utilization rate) =

citation from the section about cloze test experiments ""The entire training process takes roughly 60 hours on eight Titan X GPUs. The other hyper-parameters are identical to the model described in Section 4"" (section 4 is about SQuAD experiments and cloze test experiments require more compute and data).
flops  6.691 TFLOPS from https://www.techpowerup.com/gpu-specs/geforce-gtx-titan-x.c2632","SQuAD,DMQA,GloVe",47160000.0,"""In a cloze test, the reader is asked to fill in words that have been removed from a passage, for measuring one’s ability to comprehend text. Hermann et al. (2015) have recently compiled a massive Cloze-style comprehension dataset, consisting of 300k/4k/3k and 879k/65k/53k (train/dev/test)
examples from CNN and DailyMail news articles, respectively. ""
assuming 40 words per example we get around 47160000 words (SQuAD have around 40 words per example - so I think it should be similar case for this dataset)",Confident,https://arxiv.org/abs/1611.01603v6,Bidirectional Attention Flow for Machine Comprehension,2246.0,"Minjoon Seo, Aniruddha Kembhavi, Ali Farhadi, Hannaneh Hajishirzi","Machine comprehension (MC), answering a query about a given context paragraph, requires modeling complex interactions between the context and the query. Recently, attention mechanisms have been successfully extended to MC. Typically these methods use attention to focus on a small portion of the context and summarize it with a fixed-size vector, couple attentions temporally, and/or often form a uni-directional attention. In this paper we introduce the Bi-Directional Attention Flow (BIDAF) network, a multi-stage hierarchical process that represents the context at different levels of granularity and uses bi-directional attention flow mechanism to obtain a query-aware context representation without early summarization. Our experimental evaluations show that our model achieves the state-of-the-art results in Stanford Question Answering Dataset (SQuAD) and CNN/DailyMail cloze test. ","Academia,Research collective","United States of America,United States of America","Highly cited,SOTA improvement","""Our experimental evaluations show that our model achieves the state-of-the-art results in Stanford Question Answering Dataset (SQuAD) and CNN/DailyMail cloze test. """,8.0,60.0,see compute notes,NVIDIA GeForce GTX TITAN X,8.0,,41.25014556779628,,4200.468649711526,,,,,,Open weights (unrestricted),Open source,Open source,"apache 2.0, code + weights: https://github.com/allenai/bi-att-flow",,
VD-LSTM+REAL Large,"Salesforce Research,Stanford University",2016-11-04,Language,Language modeling,51000000.0,51M (Table 3),2.13e+16,6 FLOP / parameter / token * 51000000 parameters * 929000 tokens * 75 epochs = 2.132055e+16 FLOP,Penn TreeBank (PTB),929000.0,75 epochs (Figure 2b),Confident,https://arxiv.org/abs/1611.01462,Tying Word Vectors and Word Classifiers: A Loss Framework for Language Modeling,397.0,"Hakan Inan, Khashayar Khosravi, Richard Socher","Recurrent neural networks have been very successful at predicting sequences of words in tasks such as language modeling. However, all such models are based on the conventional classification framework, where the model is trained against one-hot targets, and each word is represented both as an input and as an output in isolation. This causes inefficiencies in learning both in terms of utilizing all of the information and in terms of the number of parameters needed to train. We introduce a novel theoretical framework that facilitates better learning in language modeling, and show that our framework leads to tying together the input embedding and the output projection matrices, greatly reducing the number of trainable variables. Our framework leads to state of the art performance on the Penn Treebank with a variety of network models.","Industry,Academia","United States of America,United States of America",SOTA improvement,"""Our framework leads to state of the art performance on the Penn Treebank""",75.0,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
SPIDER2,"Griffith University,University of Iowa,Dezhou University",2016-10-28,Biology,"Protein folding prediction,Proteins",409536.0,"Three networks, each three layers. First takes in 459 inputs and outputs 12, second and third take in 459 + (12*17) = 663 inputs.

Network 1: (459 * 150 + 150) + (150 * 150 + 150) + (150 * 150 + 150) + (150 * 12 + 12) = 116,112
Networks 2 and 3: (663 * 150 + 150) + (150 * 150 + 150) + (150 * 150 + 150) + (150 * 12 + 12) = 146,712
Total: 116,112 + (2 * 146,712) = 409,536",1.822e+16,"120 epochs, dataset 5789 proteins. There are about 300 residues per protein (115,479 residues / 418 proteins) according to https://www.ncbi.nlm.nih.gov/pmc/articles/PMC22960/. 
First network gets 27 features per residue, second and third get 39.
FLOPs from first: 6 * 116112 * (27 * 300 * 5789 * 120) = 3.92e15
FLOPs from 2nd and 3rd: 2 *6 * 146712 * (39 * 300 * 5789 * 120) = 1.43e16
Total: 1.822E16",Unspecified,13893600.0,"5,789 nonredundant, high resolution structure.
Assuming ~200 residues per protein, 5,789 * 200 = 1,157,800 residues. Each residue has 12 associated features being predicted on.
1,157,800 * 12 = 13,893,600",Likely,https://link.springer.com/protocol/10.1007/978-1-4939-6406-2_6,"SPIDER2: A Package to Predict Secondary Structure, Accessible Surface Area, and Main-Chain Torsional Angles by Deep Neural Networks",,"Yuedong Yang, Rhys Heffernan, Kuldip Paliwal, James Lyons, Abdollah Dehzangi, Alok Sharma, Jihua Wang, Abdul Sattar, and Yaoqi Zhou","Predicting one-dimensional structure properties has played an important role to improve prediction of protein three-dimensional structures and functions. The most commonly predicted properties are secondary structure and accessible surface area (ASA) representing local and nonlocal structural characteristics, respectively. Secondary structure prediction is further complemented by prediction of continuous main-chain torsional angles. Here we describe a newly developed method SPIDER2 that utilizes three iterations of deep learning neural networks to improve the prediction accuracy of several structural properties simultaneously. For an independent test set of 1199 proteins SPIDER2 achieves 82 % accuracy for secondary structure prediction, 0.76 for the correlation coefficient between predicted and actual solvent accessible surface area, 19° and 30° for mean absolute errors of backbone φ and ψ angles, respectively, and 8° and 32° for mean absolute errors of Cα-based θ and τ angles, respectively. The method provides state-of-the-art, all-in-one accurate prediction of local structure and solvent accessible surface area. The method is implemented, as a webserver along with a standalone package that are available in our website: http://sparks-lab.org.","Academia,Academia,Academia","Australia,United States of America,China",SOTA improvement,"The method provides state-of-the-art, all-in-one accurate prediction of local structure and solvent accessible surface area. ",120.0,,"The authors had a website where sequences could be submitted for processing through the model: ""Each prediction is usually completed within 10 min, but may take up to a few hours depending on how busy the server is and how long the protein chain is [...] Using an external PSSM file can skip the most time consuming step of generating the evolution profile by PSIBLAST, and the executive time reduce to a few seconds"" 

Rough estimate:
It looks like the PSIBLAST step only needs doing once per input, and this takes the majority of the time. If the inference server uses the same hardware that was used for training, 10 mins * 5789 sequences =  965 hours for PSIBLAST calculation. Then assume training on a sequence takes 3x as long as inference (forward + backward pass uses 6 FLOPs per parameter, vs 2 for forward only), so 120 epochs would take:
3 seconds * 3 * 5789 * 120 = 1,737 hours
Total: around 2,702 hours
(This seems on the long side – probably they had better hardware for training, or else there's an incorrect assumption here)",,,,,,,,,,,,Open weights (non-commercial),,,"some kind of download, unclear license

http://zhouyq-lab.szbl.ac.cn/download/",,
Differentiable neural computer,Google DeepMind,2016-10-12,Language,Question answering,,,,,,,,Unknown,https://www.nature.com/articles/nature20101,Hybrid computing using a neural network with dynamic external memory,1521.0,"Alex Graves, Greg Wayne, Malcolm Reynolds, Tim Harley, Ivo Danihelka, Agnieszka Grabska-Barwińska, Sergio Gómez Colmenarejo, Edward Grefenstette, Tiago Ramalho, John Agapiou, Adrià Puigdomènech Badia, Karl Moritz Hermann, Yori Zwols, Georg Ostrovski, Adam Cain, Helen King, Christopher Summerfield, Phil Blunsom, Koray Kavukcuoglu & Demis Hassabis","Artificial neural networks are remarkably adept at sensory processing, sequence learning and reinforcement learning, but are limited in their ability to represent variables and data structures and to store data over long timescales, owing to the lack of an external memory. Here we introduce a machine learning model called a differentiable neural computer (DNC), which consists of a neural network that can read from and write to an external memory matrix, analogous to the random-access memory in a conventional computer. Like a conventional computer, it can use its memory to represent and manipulate complex data structures, but, like a neural network, it can learn to do so from data. When trained with supervised learning, we demonstrate that a DNC can successfully answer synthetic questions designed to emulate reasoning and inference problems in natural language. We show that it can learn tasks such as finding the shortest path between specified points and inferring the missing links in randomly generated graphs, and then generalize these tasks to specific graphs such as transport networks and family trees. When trained with reinforcement learning, a DNC can complete a moving blocks puzzle in which changing goals are specified by sequences of symbols. Taken together, our results demonstrate that DNCs have the capacity to solve complex, structured tasks that are inaccessible to neural networks without external read–write memory.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",Highly cited,,,,,,,,,,,,,,,,,,,,,
Xception,Google,2016-10-07,Vision,Image classification,22855952.0,Table 3,4.36e+20,"60 K80 GPUs * 30 days * 8.5 TFLOPS/GPU * 0.33 utilization  = 4.36e20

Authors of ""AI and Memory Wall"" (https://github.com/amirgholami/ai_and_memory_wall) estimated model's training compute as 450,000 PFLOP = 4.5*10^20 FLOP",JFT,350000000.0,"""JFT is an internal Google dataset for large-scale image classification dataset, first introduced by Hinton et al. in [5], which comprises over 350 million high-resolution images annotated with labels from a set of 17,000 classes. To evaluate the performance of a model trained on JFT, we use an auxiliary dataset, FastEval14k""",Confident,https://arxiv.org/abs/1610.02357,Xception: Deep Learning with Depthwise Separable Convolutions,13038.0,François Chollet,"We present an interpretation of Inception modules in convolutional neural networks as being an intermediate step in-between regular convolution and the depthwise separable convolution operation (a depthwise convolution followed by a pointwise convolution). In this light, a depthwise separable convolution can be understood as an Inception module with a maximally large number of towers. This observation leads us to propose a novel deep convolutional neural network architecture inspired by Inception, where Inception modules have been replaced with depthwise separable convolutions. We show that this architecture, dubbed Xception, slightly outperforms Inception V3 on the ImageNet dataset (which Inception V3 was designed for), and significantly outperforms Inception V3 on a larger image classification dataset comprising 350 million images and 17,000 classes. Since the Xception architecture has the same number of parameters as Inception V3, the performance gains are not due to increased capacity but rather to a more efficient use of model parameters.",Industry,United States of America,Highly cited,,,720.0,"""while the JFT experiments took over one month each.""",NVIDIA Tesla K80,60.0,,12651.54832,,37828.64014138488,,,,,,,,,,,True
Zoneout + Variational LSTM (WT2),"MetaMind Inc,Salesforce",2016-09-26,Language,Language modeling,21000000.0,21M (Table 3),1.6128e+16,6 FLOP / parameter / token * 21000000 parameters * 2000000 tokens * 64 epochs = 1.6128e+16 FLOP,WikiText-2,2000000.0,"""We also halve the learning rate when validation perplexity is worse than the previous iteration, stopping training when validation perplexity fails to improve for three epochs or when 64 epochs are reached""",Confident,https://arxiv.org/abs/1609.07843,Pointer Sentinel Mixture Models,2307.0,"Stephen Merity, Caiming Xiong, James Bradbury, Richard Socher",Recent neural network sequence models with softmax classifiers have achieved their best language modeling performance only with very large hidden states and large vocabularies. Even then they struggle to predict rare or unseen words even if the context makes the prediction unambiguous. We introduce the pointer sentinel mixture architecture for neural sequence models which has the ability to either reproduce a word from the recent context or produce a word from a standard softmax classifier. Our pointer sentinel-LSTM model achieves state of the art language modeling performance on the Penn Treebank (70.9 perplexity) while using far fewer parameters than a standard softmax LSTM. In order to evaluate how well language models can exploit longer contexts and deal with more realistic vocabularies and larger corpora we also introduce the freely available WikiText corpus.,"Industry,Industry","United States of America,United States of America",Highly cited,,64.0,,,NVIDIA Tesla K80,,,,,,,,,,,Unreleased,Unreleased,,,,
Pointer Sentinel-LSTM (medium),"MetaMind Inc,Salesforce",2016-09-26,Language,Language modeling,21000000.0,,7490000000000000.0,6 FLOP / parameter / token * 21000000 parameters * 929000 tokens * 64 epochs = 7.491456e+15 FLOP,Penn TreeBank (PTB),929000.0,"""We also halve the learning rate when validation perplexity is worse than the previous iteration, stopping training when validation perplexity fails to improve for three epochs or when 64 epochs are reached""",Confident,https://arxiv.org/abs/1609.07843,Pointer Sentinel Mixture Models,2307.0,"Stephen Merity, Caiming Xiong, James Bradbury, Richard Socher",Recent neural network sequence models with softmax classifiers have achieved their best language modeling performance only with very large hidden states and large vocabularies. Even then they struggle to predict rare or unseen words even if the context makes the prediction unambiguous. We introduce the pointer sentinel mixture architecture for neural sequence models which has the ability to either reproduce a word from the recent context or produce a word from a standard softmax classifier. Our pointer sentinel-LSTM model achieves state of the art language modeling performance on the Penn Treebank (70.9 perplexity) while using far fewer parameters than a standard softmax LSTM. In order to evaluate how well language models can exploit longer contexts and deal with more realistic vocabularies and larger corpora we also introduce the freely available WikiText corpus.,"Industry,Industry","United States of America,United States of America","Highly cited,SOTA improvement","""Our pointer sentinel-LSTM model achieves state of the art language modeling performance on the Penn Treebank (70.9 perplexity) while using far fewer parameters than a standard softmax LSTM""",64.0,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
GNMT,Google,2016-09-26,Language,Translation,278000000.0,"Table 5 in 'Outrageously Large Neural Networks: The Sparsely-Gated Mixture-of-Experts Layer'

https://arxiv.org/abs/1701.06538",6.620000000001e+21,"From AI and Compute:
""sqrt(10 * 100) factor added because production model used 2-3 orders of magnitude more data, but only 1 epoch rather than 10.
96 K80 GPU’s * 9 days * 8.5 TFLOPS * 0.33 utilization * sqrt(10 * 100)  
= 6.9e6 PF = 79 pfs-days""
source: https://openai.com/blog/ai-and-compute/

https://www.wolframalpha.com/input?i=96+*+9+days+*+8.5+TFLOPS+*+0.33+*+sqrt%281000%29
",,388960152200.7108,"[WORDS]
"" On WMT En→Fr, the training set contains 36M sentence pairs. On WMT En→De, the training set contains 5M sentence pairs.""
""we also test GNMT on Google’s translation production corpora, which are two to three decimal orders of magnitudes bigger than the WMT corpora for a given language pair.""

41M sentence pairs * 2 sentences per pair * 15 words/sentence * 10^2.5",Likely,https://arxiv.org/abs/1609.08144,Google's Neural Machine Translation System: Bridging the Gap between Human and Machine Translation,6483.0,"Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V. Le, Mohammad Norouzi, Wolfgang Macherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, Jeff Klingner, Apurva Shah, Melvin Johnson, Xiaobing Liu, Łukasz Kaiser, Stephan Gouws, Yoshikiyo Kato, Taku Kudo, Hideto Kazawa, Keith Stevens, George Kurian, Nishant Patil, Wei Wang, Cliff Young, Jason Smith, Jason Riesa, Alex Rudnick, Oriol Vinyals, Greg Corrado, Macduff Hughes, Jeffrey Dean","Neural Machine Translation (NMT) is an end-to-end learning approach for automated translation, with the potential to overcome many of the weaknesses of conventional phrase-based translation systems. Unfortunately, NMT systems are known to be computationally expensive both in training and in translation inference. Also, most NMT systems have difficulty with rare words. These issues have hindered NMT's use in practical deployments and services, where both accuracy and speed are essential. In this work, we present GNMT, Google's Neural Machine Translation system, which attempts to address many of these issues. Our model consists of a deep LSTM network with 8 encoder and 8 decoder layers using attention and residual connections. To improve parallelism and therefore decrease training time, our attention mechanism connects the bottom layer of the decoder to the top layer of the encoder. To accelerate the final translation speed, we employ low-precision arithmetic during inference computations. To improve handling of rare words, we divide words into a limited set of common sub-word units (""wordpieces"") for both input and output. This method provides a good balance between the flexibility of ""character""-delimited models and the efficiency of ""word""-delimited models, naturally handles translation of rare words, and ultimately improves the overall accuracy of the system. Our beam search technique employs a length-normalization procedure and uses a coverage penalty, which encourages generation of an output sentence that is most likely to cover all the words in the source sentence. On the WMT'14 English-to-French and English-to-German benchmarks, GNMT achieves competitive results to state-of-the-art. Using a human side-by-side evaluation on a set of isolated simple sentences, it reduces translation errors by an average of 60% compared to Google's phrase-based production system.",Industry,United States of America,Highly cited,,1.0,,"Test model used 96 K80 for 9 days, then this was scaled up by 31x for the production model, but unclear how many GPUs were used or how long it was trained for. The production run used 96 * 9 days * sqrt(1000) ~= 655730 chip-hours.",NVIDIA Tesla K80,,,194308.0917,,,,,,,,Hosted access (no API),Unreleased,,presumably deployed via Google translate,FP32,True
Wide Residual Network,Université Paris-Est,2016-09-19,Vision,Image classification,,,,,,,,Unknown,https://arxiv.org/abs/1605.07146,Wide Residual Networks,7455.0,"Sergey Zagoruyko, Nikos Komodakis",,Academia,France,Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
TSN,"ETH Zurich,Shenzhen Institute of Advanced Technology,Chinese University of Hong Kong (CUHK)",2016-09-17,Video,Action recognition,,,,,,,,Unknown,https://link.springer.com/chapter/10.1007/978-3-319-46484-8_2,Temporal Segment Networks: Towards Good Practices for Deep Action Recognition,3621.0,"Limin Wang, Yuanjun Xiong, Zhe Wang, Yu Qiao, Dahua Lin, Xiaoou Tang, Luc Van Gool",,"Academia,Academia","Switzerland,China,Hong Kong,China",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
Stacked hourglass network,University of Michigan,2016-09-17,Vision,Pose estimation,,,,,,,,Unknown,https://link.springer.com/chapter/10.1007/978-3-319-46484-8_29,Stacked Hourglass Networks for Human Pose Estimation,4808.0,"Alejandro Newell, Kaiyu Yang, Jia Deng",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
ResNet-1001,Microsoft,2016-09-17,Vision,Image classification,10200000.0,,,"""On CIFAR, ResNet-1001 takes about 27 h to train on 2 GPUs""","CIFAR-10,CIFAR-100",,,,https://link.springer.com/chapter/10.1007/978-3-319-46493-0_38,Identity Mappings in Deep Residual Networks,9621.0,"Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun",,Industry,"United States of America,Multinational,India,Belgium",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
ResNet-200,Microsoft Research Asia,2016-09-17,Vision,Image classification,,,2.9741645e+19,"""ResNet-200 takes about 3 weeks to train on 8 GPUs"". didn't specify which GPU
upd: 
common GPU performance for 2016 is 6.83E+12 FLOPs/s (https://epoch.ai/blog/estimating-training-compute#forward-pass-compute-and-parameter-counts-of-common-layers) 
then 6.83E+12*3*7*24*3600*8*0.3=2.9741645e+19 (Speculative)",ImageNet,1281167.0,,Speculative,https://link.springer.com/chapter/10.1007/978-3-319-46493-0_38,Identity Mappings in Deep Residual Networks,9621.0,"Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun","Deep residual networks have emerged as a family of extremely deep architectures showing compelling accuracy and nice convergence behaviors. In this paper, we analyze the propagation formulations behind the residual building blocks, which suggest that the forward and backward signals can be directly propagated from one block to any other block, when using identity mappings as the skip connections and after-addition activation. A series of ablation experiments support the importance of these identity mappings. This motivates us to propose a new residual unit, which makes training easier and improves generalization. We report improved results using a 1001-layer ResNet on CIFAR10 (4.62 % error) and CIFAR-100, and a 200-layer ResNet on ImageNet.",Industry,China,Highly cited,,,500.0,"""about 3 weeks""",,,,,,,,,,,,Unreleased,Open (non-commercial),Open access (non-commercial)," https://github.com/KaimingHe/resnet-1k-layers
no definite license",,True
MS-CNN,"IBM,University of California San Diego",2016-09-17,Vision,Object detection,,,,,,,,Unknown,https://link.springer.com/chapter/10.1007/978-3-319-46493-0_22,A Unified Multi-scale Deep Convolutional Neural Network for Fast Object Detection,1458.0,"Zhaowei Cai, Quanfu Fan, Rogerio S. Feris, Nuno Vasconcelos",,"Industry,Academia","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
Youtube recommendation model,Google,2016-09-15,Recommendation,Recommender system,,,,,,,,Unknown,https://research.google/pubs/pub45530/,Deep Neural Networks for YouTube Recommendations,2914.0,"Paul Covington, Jay Adams, and Emre Sargin","YouTube represents one of the largest scale and most sophisticated industrial recommendation systems in existence. In this paper, we describe the system at a high level and focus on the dramatic performance improvements brought by deep learning. The paper is split according to the classic two-stage information retrieval dichotomy: first, we detail a deep candidate generation model and then describe a separate deep ranking model. We also provide practical lessons and insights derived from designing, iterating and maintaining a massive recommendation system with enormous user-facing impact.",Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
WaveNet,Google DeepMind,2016-09-12,Speech,"Text-to-speech,Speech synthesis,Audio generation",,,,,,,,Unknown,https://arxiv.org/abs/1609.03499,WaveNet: A Generative Model for Raw Audio,6929.0,"A Oord, S Dieleman, H Zen, K Simonyan","This paper introduces WaveNet, a deep neural network for generating raw audio waveforms. The model is fully probabilistic and autoregressive, with the predictive distribution for each audio sample conditioned on all previous ones; nonetheless we show that it can be efficiently trained on data with tens of thousands of samples per second of audio. When applied to text-to-speech, it yields state-of-the-art performance, with human listeners rating it as significantly more natural sounding than the best parametric and concatenative systems for both English and Mandarin. A single WaveNet can capture the characteristics of many different speakers with equal fidelity, and can switch between them by conditioning on the speaker identity. When trained to model music, we find that it generates novel and often highly realistic musical fragments. We also show that it can be employed as a discriminative model, returning promising results for phoneme recognition.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",Highly cited,,,,,,,,,,,,,,,,,,,,,
Multi-task Cascaded CNN,"Chinese Academy of Sciences,Chinese University of Hong Kong (CUHK)",2016-08-26,Vision,Face detection,,,,,,,,Unknown,https://arxiv.org/abs/1604.02878,Joint Face Detection and Alignment using Multitask cascaded convolutional networks,4605.0,"Kaipeng Zhang, Zhanpeng Zhang, Zhifeng Li, Yu Qiao",,"Academia,Academia","China,Hong Kong,China",Highly cited,,,,,,,,,,,,,,,,,,,,,
DenseNet-264,"Tsinghua University,Facebook AI Research,Cornell University",2016-08-25,Vision,Image classification,34000000.0,,,,,,,,https://arxiv.org/abs/1608.06993,Densely Connected Convolutional Networks,33650.0,"G Huang, Z Liu, L Van Der Maaten","Recent work has shown that convolutional networks can be substantially deeper, more accurate, and efficient to train if they contain shorter connections between layers close to the input and those close to the output. In this paper, we embrace this observation and introduce the Dense Convolutional Network (DenseNet), which connects each layer to every other layer in a feed-forward fashion. Whereas traditional convolutional networks with L layers have L connections - one between each layer and its subsequent layer - our network has L(L+1)/2 direct connections. For each layer, the feature-maps of all preceding layers are used as inputs, and its own feature-maps are used as inputs into all subsequent layers. DenseNets have several compelling advantages: they alleviate the vanishing-gradient problem, strengthen feature propagation, encourage feature reuse, and substantially reduce the number of parameters. We evaluate our proposed architecture on four highly competitive object recognition benchmark tasks (CIFAR-10, CIFAR-100, SVHN, and ImageNet). DenseNets obtain significant improvements over the state-of-the-art on most of them, whilst requiring less computation to achieve high performance. Code and pre-trained models are available at this https URL .","Academia,Industry,Academia","China,United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
SimpleNet,"Sensifai,Islamic Azad University,Technicolor R&I,Institute for Research in Fundamental Sciences (IPM)",2016-08-22,Vision,Image classification,5480000.0,SOTA CIFAR-10 model was 5.48m params,,,"CIFAR-10,ImageNet",,,Confident,https://arxiv.org/abs/1608.06037,"Lets keep it simple, Using simple architectures to outperform deeper and more complex architectures",117.0,"Seyyed Hossein Hasanpour, Mohammad Rouhani, Mohsen Fayyaz, Mohammad Sabokrou","Major winning Convolutional Neural Networks (CNNs), such as AlexNet, VGGNet, ResNet, GoogleNet, include tens to hundreds of millions of parameters, which impose considerable computation and memory overhead. This limits their practical use for training, optimization and memory efficiency. On the contrary, light-weight architectures, being proposed to address this issue, mainly suffer from low accuracy. These inefficiencies mostly stem from following an ad hoc procedure. We propose a simple architecture, called SimpleNet, based on a set of designing principles, with which we empirically show, a well-crafted yet simple and reasonably deep architecture can perform on par with deeper and more complex architectures. SimpleNet provides a good tradeoff between the computation/memory efficiency and the accuracy. Our simple 13-layer architecture outperforms most of the deeper and complex architectures to date such as VGGNet, ResNet, and GoogleNet on several well-known benchmarks while having 2 to 25 times fewer number of parameters and operations. This makes it very handy for embedded systems or systems with computational and memory limitations. We achieved state-of-theart result on CIFAR10 outperforming several heavier architectures, near state of the art on MNIST and highly competitive results on CIFAR100 and SVHN. We also outperformed the much larger and deeper architectures such as VGGNet and popular variants of ResNets among others on the ImageNet dataset. Models are made available at: https://github.com/Coderx7/SimpleNet","Industry,Academia","Belgium,Iran (Islamic Republic of),France,Iran (Islamic Republic of)",SOTA improvement,"""We achieved state-of-theart result on CIFAR10 outperforming several heavier architectures""",,,,NVIDIA GeForce GTX 980,,,,,,,,,,,,,,,FP32,
Character-enriched word2vec,Facebook AI Research,2016-07-15,Language,Language modeling,,,,,,,,Unknown,https://arxiv.org/abs/1607.04606,Enriching Word Vectors with Subword Information,9415.0,"Piotr Bojanowski, Edouard Grave, Armand Joulin, Tomas Mikolov","Continuous word representations, trained on large unlabeled corpora are useful for many natural language processing tasks. Popular models that learn such representations ignore the morphology of words, by assigning a distinct vector to each word. This is a limitation, especially for languages with large vocabularies and many rare words. In this paper, we propose a new approach based on the skipgram model, where each word is represented as a bag of character n-grams. A vector representation is associated to each character n-gram; words being represented as the sum of these representations. Our method is fast, allowing to train models on large corpora quickly and allows us to compute word representations for words that did not appear in the training data. We evaluate our word representations on nine different languages, both on word similarity and analogy tasks. By comparing to recently proposed morphological word representations, we show that our vectors achieve state-of-the-art performance on these tasks.",Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,"repo here, unclear how it corresponds to models in this paper:
https://github.com/facebookresearch/fastText ",,
VD-RHN,"ETH Zurich,IDSIA",2016-07-12,Language,Language modeling,32000000.0,"""To examine the effect of recurrence depth we train RHNs with fixed total parameters (32 M)""",3570000000000000.0,6 FLOP / parameter / token * 32000000 parameters * 929000 tokens * 20 epochs = 3.56736e+15 FLOP,Penn TreeBank (PTB),929000.0,"""Batch size was fixed to 20, sequence length for truncated backpropagation to 35, learning rate to 0.2, learning rate decay to 1.02 starting at 20 epochs, weight decay to 1e-7 and maximum gradient norm to 10.""",Confident,https://arxiv.org/abs/1607.03474,Recurrent Highway Networks,493.0,"Julian Georg Zilly, Rupesh Kumar Srivastava, Jan Koutník, Jürgen Schmidhuber","Many sequential processing tasks require complex nonlinear transition functions from one step to the next. However, recurrent neural networks with 'deep' transition functions remain difficult to train, even when using Long Short-Term Memory (LSTM) networks. We introduce a novel theoretical analysis of recurrent networks based on Gersgorin's circle theorem that illuminates several modeling and optimization issues and improves our understanding of the LSTM cell. Based on this analysis we propose Recurrent Highway Networks, which extend the LSTM architecture to allow step-to-step transition depths larger than one. Several language modeling experiments demonstrate that the proposed architecture results in powerful and efficient models. On the Penn Treebank corpus, solely increasing the transition depth from 1 to 10 improves word-level perplexity from 90.6 to 65.4 using the same number of parameters. On the larger Wikipedia datasets for character prediction (text8 and enwik8), RHNs outperform all previous results and achieve an entropy of 1.27 bits per character.","Academia,Academia","Switzerland,Switzerland",SOTA improvement,"""On the larger Wikipedia datasets for character prediction (text8 and enwik8), RHNs outperform all previous results and achieve an entropy of 1.27 bits per character.""",20.0,,,,,,,,,,,,,,Unreleased,Open source,Open source,MIT for code: https://github.com/jzilly/RecurrentHighwayNetworks ,,
fastText,Facebook AI Research,2016-07-06,Language,Text classification,,,,,,,,Unknown,https://arxiv.org/abs/1607.01759,Bag of Tricks for Efficient Text Classification,4362.0,"A Joulin, E Grave, P Bojanowski, T Mikolov","This paper explores a simple and efficient baseline for text classification. Our experiments show that our fast text classifier fastText is often on par with deep learning classifiers in terms of accuracy, and many orders of magnitude faster for training and evaluation. We can train fastText on more than one billion words in less than ten minutes using a standard multicore~CPU, and classify half a million sentences among~312K classes in less than a minute.",Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Wide & Deep,Google,2016-06-24,Recommendation,Recommender system,,,,,,,,Unknown,https://arxiv.org/abs/1606.07792,Wide & Deep Learning for Recommender Systems,3378.0,"HT Cheng, L Koc, J Harmsen, T Shaked","Generalized linear models with nonlinear feature transformations are widely used for large-scale regression and classification problems with sparse inputs. Memorization of feature interactions through a wide set of cross-product feature transformations are effective and interpretable, while generalization requires more feature engineering effort. With less feature engineering, deep neural networks can generalize better to unseen feature combinations through low-dimensional dense embeddings learned for the sparse features. However, deep neural networks with embeddings can over-generalize and recommend less relevant items when the user-item interactions are sparse and high-rank. In this paper, we present Wide & Deep learning---jointly trained wide linear models and deep neural networks---to combine the benefits of memorization and generalization for recommender systems. We productionized and evaluated the system on Google Play, a commercial mobile app store with over one billion active users and over one million apps. Online experiment results show that Wide & Deep significantly increased app acquisitions compared with wide-only and deep-only models. We have also open-sourced our implementation in TensorFlow.",Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
R-FCN,"Tsinghua University,Microsoft Research",2016-06-21,Vision,Object detection,,,7.1935776e+17,"1,464  images in 2012 VOC (https://paperswithcode.com/dataset/pascal-voc)/
9,963 images in 2007 VOC (https://www.tensorflow.org/datasets/catalog/voc)
83K training images in MS COCO  (https://paperswithcode.com/dataset/coco)

They used a Nvidia K40 GPU and report training time/image in seconds (table 3)

Assumed a 0.33 util rate

Section 4.2 (MS COCO):
""Next we evaluate on the MS COCO dataset [ 13 ] that has 80 object categories. Our experiments involve the 80k train set, 40k val set, and 20k test-dev set. We set the learning rate as 0.001 for 90k iterations and 0.0001 for next 30k iterations, with an effective mini-batch size of 8.""
0.45s K40 training time per image (table 3)
K40 has 5046000000000 FLOP/s

Total examples: 120000*8=960000 (12 epochs)
5046000000000 FLOP/s * 960000 images * 0.45 s/image * 0.33 utilization = 719357760000000000 FLOP","PASCAL VOC 2007,PASCAL VOC 2012,COCO",94427.0,,Confident,https://arxiv.org/abs/1605.06409,R-fcn: Object detection via region-based fully convolutional networks.,5411.0,"Jifeng Dai, Y. Li, Kaiming He, and Jian Sun",,"Academia,Industry","China,United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
DMN,Salesforce,2016-06-20,Language,"Question answering,Text classification,Language modeling",,,,,,,,Unknown,https://arxiv.org/abs/1506.07285,Ask Me Anything: Dynamic Memory Networks for Natural Language Processing,1187.0,"Ankit Kumar, Ozan Irsoy, Peter Ondruska, Mohit Iyyer, James Bradbury, Ishaan Gulrajani, Victor Zhong, Romain Paulus, Richard Socher","Most tasks in natural language processing can be cast into question answering (QA) problems over language input. We introduce the dynamic memory network (DMN), a neural network architecture which processes input sequences and questions, forms episodic memories, and generates relevant answers. Questions trigger an iterative attention process which allows the model to condition its attention on the inputs and the result of previous iterations. These results are then reasoned over in a hierarchical recurrent sequence model to generate answers. The DMN can be trained end-to-end and obtains state-of-the-art results on several types of tasks and datasets: question answering (Facebook's bAbI dataset), text classification for sentiment analysis (Stanford Sentiment Treebank) and sequence modeling for part-of-speech tagging (WSJ-PTB). The training for these different tasks relies exclusively on trained word vector representations and input-question-answer triplets.",Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
PixelCNN,Google DeepMind,2016-06-16,Vision,Image generation,,,,,ImageNet,,,Unknown,https://arxiv.org/abs/1606.05328,"Conditional Image Generation with PixelCNN Decoders
",3079.0,"Aaron van den Oord, Nal Kalchbrenner, Oriol Vinyals, Lasse Espeholt, Alex Graves, Koray Kavukcuoglu","This work explores conditional image generation with a new image density model based on the PixelCNN architecture. The model can be conditioned on any vector, including descriptive labels or tags, or latent embeddings created by other networks. When conditioned on class labels from the ImageNet database, the model is able to generate diverse, realistic scenes representing distinct animals, objects, landscapes and structures. When conditioned on an embedding produced by a convolutional network given a single image of an unseen face, it generates a variety of new portraits of the same person with different facial expressions, poses and lighting conditions. We also show that conditional PixelCNN can serve as a powerful decoder in an image autoencoder. Additionally, the gated convolutional layers in the proposed model improve the log-likelihood of PixelCNN to match the state-ofthe-art performance of PixelRNN on ImageNet, with greatly reduced computational cost.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France","Highly cited,SOTA improvement",Best performance on NLL test.,,60.0,We were able to achieve similar performance to the PixelRNN (Row LSTM [30]) in less than half the training time (60 hours using 32 GPUs).,,32.0,,,,,,,,,,,,,,,
Spatiotemporal fusion ConvNet,"Graz University of Technology,University of Oxford",2016-06-01,Video,"Video,Action recognition",,,,,UCF101,97200.0,"[SECONDS OF VIDEO]

They use UCF101, whose paper says
""We introduce UCF101 which is currently the largest dataset of human actions. It consists of 101 action classes, over 13k clips and 27 hours of video data""",,https://openaccess.thecvf.com/content_cvpr_2016/html/Feichtenhofer_Convolutional_Two-Stream_Network_CVPR_2016_paper.html,Convolutional Two-Stream Network Fusion for Video Action Recognition,2538.0,"Christoph Feichtenhofer, Axel Pinz, Andrew Zisserman",,"Academia,Academia","Austria,United Kingdom of Great Britain and Northern Ireland",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
Part-of-sentence tagging model,Carnegie Mellon University (CMU),2016-05-29,Language,Part-of-speech tagging,,Architecture described in Table 1,1.454112e+17,"12 hours of training for POS tagging
GeForce GTX TITAN X GPU
0.33 utilization rate
","WSJ,Penn TreeBank (PTB)",912344.0,Table 2,Confident,https://arxiv.org/abs/1603.01354,End-to-end Sequence Labeling via Bi-directional LSTM-CNNs-CRF,3193.0,"Xuehe Ma, Eduard Hovy","State-of-the-art sequence labeling systems traditionally require large amounts of task-specific knowledge in the form of handcrafted features and data pre-processing. In this paper, we introduce a novel neutral network architecture that benefits from both word- and character-level representations automatically, by using combination of bidirectional LSTM, CNN and CRF. Our system is truly end-to-end, requiring no feature engineering or data preprocessing, thus making it applicable to a wide range of sequence labeling tasks. We evaluate our system on two data sets or two sequence labeling tasks — Penn Treebank WSJ corpus for part-of-speech (POS) tagging and CoNLL 2003 corpus for named entity recognition (NER). We obtain state-of-the-art performance on both datasets — 97.55% accuracy for POS tagging and 91.21% F1 for NER.
",Academia,United States of America,Highly cited,,50.0,12.0,"""the model training requires about 12 hours for POS tagging and 8
hours for NER""",NVIDIA GeForce GTX TITAN X,1.0,,,,289.523491253324,,,,,,,,,,FP32,
Named Entity Recognition model,Carnegie Mellon University (CMU),2016-05-29,Language,"Named entity recognition,Language modeling",,Architecture in Table 1,9.69408e+16,"8 hours of training for NER
GeForce GTX TITAN X GPU
0.33 utilization rate
",CoNLL2003,204567.0,Table 2. 204567 tokens,Confident,https://arxiv.org/abs/1603.01354,Layer Normalization,3100.0,"Xuezhe Ma, Eduard Hovy","State-of-the-art sequence labeling systems traditionally require large amounts of task-specific knowledge in the form of handcrafted features and data pre-processing. In this paper, we introduce a novel neutral network architecture that benefits from both word- and character-level representations automatically, by using combination of bidirectional LSTM, CNN and CRF. Our system is truly end-to-end, requiring no feature engineering or data preprocessing, thus making it applicable to a wide range of sequence labeling tasks. We evaluate our system on two data sets or two sequence labeling tasks — Penn Treebank WSJ corpus for part-of-speech (POS) tagging and CoNLL 2003 corpus for named entity recognition (NER). We obtain state-of-the-art performance on both datasets — 97.55% accuracy for POS tagging and 91.21% F1 for NER.
",Academia,United States of America,Highly cited,,50.0,8.0,"""the model training requires about 12 hours for POS tagging and 8
hours for NER""",NVIDIA GeForce GTX TITAN X,1.0,,,,289.523491253324,,,,,,,,,,FP32,
Gated HORNN (3rd order),York University,2016-04-30,Language,Language modeling,8970000.0,,,,Penn TreeBank (PTB),,,,https://arxiv.org/abs/1605.00064,Higher Order Recurrent Neural Networks,77.0,"Rohollah Soltani, Hui Jiang","In this paper, we study novel neural network structures to better model long term dependency in sequential data. We propose to use more memory units to keep track of more preceding states in recurrent neural networks (RNNs), which are all recurrently fed to the hidden layers as feedback through different weighted paths. By extending the popular recurrent structure in RNNs, we provide the models with better short-term memory mechanism to learn long term dependency in sequences. Analogous to digital filters in signal processing, we call these structures as higher order RNNs (HORNNs). Similar to RNNs, HORNNs can also be learned using the back-propagation through time method. HORNNs are generally applicable to a variety of sequence modelling tasks. In this work, we have examined HORNNs for the language modeling task using two popular data sets, namely the Penn Treebank (PTB) and English text8 data sets. Experimental results have shown that the proposed HORNNs yield the state-of-the-art performance on both data sets, significantly outperforming the regular RNNs as well as the popular LSTMs.",Academia,Canada,SOTA improvement,"""Both FOFEbased pooling and gated HORNNs have achieved the stateof-the-art performance, i.e., 100 in perplexity on this task.
To the best of our knowledge, this is the best reported performance on PTB under the same training condition.""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
Symmetric Residual Encoder-Decoder Net,"Nanjing University,University of Adelaide",2016-03-30,"Vision,Image generation",Image super-resolution,,,,,,,,Unknown,https://arxiv.org/abs/1603.09056v2,Image Restoration Using Very Deep Convolutional Encoder-Decoder Networks with Symmetric Skip Connections,1184.0,"Xiao-Jiao Mao, Chunhua Shen, Yu-Bin Yang",,"Academia,Academia","China,Australia",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
Binarized Neural Network (MNIST),"Technion - Israel Institute of Technology,Columbia University,University of Montreal / Université de Montréal",2016-03-17,Vision,Image classification,37000000.0,"Parameter count is not explicitly stated, but they give details:

""The MLP we train on MNIST consists of 3 hidden layers of 4096 binary units (see Section 1) and a L2-SVM output layer""

Approximately 37m, based on 784 pixels * 4096 + 2 * 4096^2",,,MNIST,60000.0,"60k training images, 10k test in MNIST",Speculative,https://arxiv.org/abs/1602.02830,Binarized Neural Networks: Training Neural Networks with Weights and Activations Constrained to +1 or −1,3299.0,"Matthieu Courbariaux, Itay Hubara, Daniel Soudry, Ran El-Yaniv, Yoshua Bengio","We introduce a method to train Binarized Neural Networks (BNNs) - neural networks with binary weights and activations at run-time. At training-time the binary weights and activations are used for computing the parameters gradients. During the forward pass, BNNs drastically reduce memory size and accesses, and replace most arithmetic operations with bit-wise operations, which is expected to substantially improve power-efficiency. To validate the effectiveness of BNNs we conduct two sets of experiments on the Torch7 and Theano frameworks. On both, BNNs achieved nearly state-of-the-art results over the MNIST, CIFAR-10 and SVHN datasets. Last but not least, we wrote a binary matrix multiplication GPU kernel with which it is possible to run our MNIST BNN 7 times faster than with an unoptimized GPU kernel, without suffering any loss in classification accuracy. The code for training and running our BNNs is available on-line.","Academia,Academia,Academia","Israel,United States of America,Canada",Highly cited,,1000.0,,,,,,,,,,,,,,,,,,,
SqueezeNet,"DeepScale,University of California (UC) Berkeley,Stanford University",2016-02-24,Vision,Image classification,1200000.0,"The paper says ""SqueezeNet achieves AlexNet-level accuracy on ImageNet with 50x fewer parameters.""

AlexNet has 60 million parameters.",,,,,,,https://arxiv.org/abs/1602.07360,SqueezeNet: AlexNet-level accuracy with 50x fewer parameters and <0.5MB model size,6976.0,"Forrest N. Iandola, Song Han, Matthew W. Moskewicz, Khalid Ashraf, William J. Dally, Kurt Keutzer",,"Academia,Academia","United States of America,United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
Inceptionv4,Google,2016-02-23,Vision,Image classification,43000000.0,"""The folks from Google strike again with Inception-v4, 43M parameters.""

https://towardsdatascience.com/illustrated-10-cnn-architectures-95d78ace614d",,,,,,,https://arxiv.org/abs/1602.07261,"Inception-v4, Inception-ResNet and the Impact of Residual Connections on Learning",13208.0,"Christian Szegedy, Sergey Ioffe, Vincent Vanhoucke, Alex Alemi",,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Inception-ResNet-V2,Google,2016-02-23,Vision,Image classification,56000000.0,,,,,,,,https://arxiv.org/abs/1602.07261,"Inception-v4, Inception-ResNet and the Impact of Residual Connections on Learning",13208.0,"Christian Szegedy, Sergey Ioffe, Vincent Vanhoucke, Alex Alemi",,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
A3C FF hs,"Google,University of Montreal / Université de Montréal",2016-02-04,Games,Atari,,,,,,,,Unknown,http://arxiv.org/abs/1602.01783v2,Asynchronous Methods for Deep Reinforcement Learning,8277.0,"V Mnih, AP Badia, M Mirza, A Graves",,"Industry,Academia","United States of America,Canada","Highly cited,SOTA improvement",,,,,,,,,,,,,,,,,,,,FP32,
Convolutional Pose Machines,Carnegie Mellon University (CMU),2016-01-30,Vision,Pose estimation,,,,,,,,Unknown,https://arxiv.org/abs/1602.00134,Convolutional Pose Machines,2658.0,"Shih-En Wei, Varun Ramakrishna, Takeo Kanade, Yaser Sheikh",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
AlphaGo Lee,DeepMind,2016-01-27,Games,Go,,,1.9e+21,"This number is pretty uncertain. I expect it to be right to around a factor of 3, at least compared to AlphaGo Fan.

The architecture used was pretty much the same as AlphaGo Fan, but it was ""trained for longer"" and had around 5.33x the number of convolutional layers of AlphaGo Fan (256/48 = 5.33). 

The convolutional layers are the major contributor to the training compute, so I somewhat arbitrarily just multiply the compute for AlphaGo Fan by 5. Thus 3.8e20 * 5 = 1.9e21

Otherwise there has been little said about this model specifically - I've mainly relied on the source for AlphaGo Zero and AlphaGo Fan, linked below

AlphaGo Fan: https://www.nature.com/articles/nature16961

AlphaGo Zero: https://www.nature.com/articles/nature24270.epdf?author_access_token=VJXbVjaSHxFoctQQ4p2k4tRgN0jAjWel9jnR3ZoTv0PVW4gB86EEpGqTRDtpIz-2rmo8-KG06gqVobU5NSCFeHILHcVFUeMsbvwS-lxjqQGg98faovwjxeTUgZAUMnRQ",,29400000.0,"We trained the policy network pσ to classify positions according to expert moves played in the KGS data set. This data set contains 29.4 million positions from 160,000 games played by KGS 6 to 9 dan human players; 35.4% of the games are handicap games.",Speculative,https://www.nature.com/articles/nature16961,Mastering the game of Go with deep neural networks and tree search,16057.0,"David Silver, Aja Huang, Chris J. Maddison, Arthur Guez, Laurent Sifre, George van den Driessche, Julian Schrittwieser, Ioannis Antonoglou, Veda Panneershelvam, Marc Lanctot, Sander Dieleman, Dominik Grewe, John Nham, Nal Kalchbrenner, Ilya Sutskever, Timothy Lillicrap, Madeleine Leach, Koray Kavukcuoglu, Thore Graepel, Demis Hassabis","The game of Go has long been viewed as the most challenging of classic games for artificial intelligence owing to its enormous search space and the difficulty of evaluating board positions and moves. Here we introduce a new approach to computer Go that uses ‘value networks’ to evaluate board positions and ‘policy networks’ to select moves. These deep neural networks are trained by a novel combination of supervised learning from human expert games, and reinforcement learning from games of self-play. Without any lookahead search, the neural networks play Go at the level of state-of-the-art Monte Carlo tree search programs that simulate thousands of random games of self-play. We also introduce a new search algorithm that combines Monte Carlo simulation with value and policy networks. Using this search algorithm, our program AlphaGo achieved a 99.8% winning rate against other Go programs, and defeated the human European Go champion by 5 games to 0. This is the first time that a computer program has defeated a human professional player in the full-sized game of Go, a feat previously thought to be at least a decade away.",Industry,United Kingdom of Great Britain and Northern Ireland,Highly cited,,,696.0,"Training times are given for several components:
- Policy network classifier: 3 weeks
- Policy network RL: 1 day
- Value network regression: 1 week
- Rollout policy: ""Similar to the policy network, the weights π of the rollout policy are trained from 8 million positions from human games on the Tygem server to maximize log likelihood by stochastic gradient descent. Rollouts execute at approximately 1,000 simulations per second per CPU thread on an empty board."" could suggest (8M sims / 1000 sims/sec) / 3600 sec/hr = 2.2 hours, if each position corresponds to only one simulation (unclear)

Total: 29 days or 696 hours",,,,,,,,,,,,Unreleased,Unreleased,,,,True
"Variational (untied weights, MC) LSTM (Large)",University of Cambridge,2015-12-16,Language,Language modeling,66000000.0,66M according to https://arxiv.org/pdf/1611.01462,5886144000000000.0,6 FLOP / parameter / token * 66000000 parameters * 929000 tokens * 16 epochs = 5.886144e+15 FLOP,Penn TreeBank (PTB),929000.0,"""We had to use early stopping for the large model with [20]’s variant as the model starts overfitting after 16 epochs.""",Confident,https://arxiv.org/abs/1512.05287,A Theoretically Grounded Application of Dropout in Recurrent Neural Networks,1838.0,"Yarin Gal, Zoubin Ghahramani","Recurrent neural networks (RNNs) stand at the forefront of many recent developments in deep learning. Yet a major difficulty with these models is their tendency to overfit, with dropout shown to fail when applied to recurrent layers. Recent results at the intersection of Bayesian modelling and deep learning offer a Bayesian interpretation of common deep learning techniques such as dropout. This grounding of dropout in approximate Bayesian inference suggests an extension of the theoretical results, offering insights into the use of dropout with RNN models. We apply this new variational inference based dropout technique in LSTM and GRU models, assessing it on language modelling and sentiment analysis tasks. The new approach outperforms existing techniques, and to the best of our knowledge improves on the single model state-of-the-art in language modelling with the Penn Treebank (73.4 test perplexity). This extends our arsenal of variational tools in deep learning.",Academia,United Kingdom of Great Britain and Northern Ireland,"Highly cited,SOTA improvement","""The new approach outperforms existing techniques, and to the best of our knowledge improves on the single model state-of-the-art in language modelling with the Penn Treebank (73.4 test perplexity)""",16.0,,,,,,,,,,,,,,Unreleased,Unreleased,,,FP32,
Advantage Learning,Google DeepMind,2015-12-15,Games,Atari,,,,,,,,Unknown,http://arxiv.org/abs/1512.04860v1,Increasing the Action Gap: New Operators for Reinforcement Learning,151.0,"MG Bellemare, G Ostrovski, A Guez","This paper introduces new optimality-preserving operators on Q-functions. We first describe an operator for tabular representations, the consistent Bellman operator, which incorporates a notion of local policy consistency. We show that this local consistency leads to an increase in the action gap at each state; increasing this gap, we argue, mitigates the undesirable effects of approximation and estimation errors on the induced greedy policies. This operator can also be applied to discretized continuous space and time problems, and we provide empirical results evidencing superior performance in this context. Extending the idea of a locally consistent operator, we then derive sufficient conditions for an operator to preserve optimality, leading to a family of operators which includes our consistent Bellman operator. As corollaries we provide a proof of optimality for Baird's advantage learning algorithm and derive other gap-increasing operators with interesting properties. We conclude with an empirical study on 60 Atari 2600 games illustrating the strong potential of these new operators.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",SOTA improvement,,,,,,,,,,,,,,,,,,,,,
BPL,"University of Toronto,New York University (NYU),Massachusetts Institute of Technology (MIT)",2015-12-11,Image generation,Image generation,,,,,,,,Unknown,https://science.sciencemag.org/content/350/6266/1332/,Human-level concept learning through probabilistic program induction,2885.0,"BM Lake, R Salakhutdinov, JB Tenenbaum",,"Academia,Academia,Academia","Canada,United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
ResNet-152 (ImageNet),Microsoft,2015-12-10,Vision,Image classification,60200000.0,Taken from https://arxiv.org/abs/1605.07146,1.041408e+19,"11.3 *10^9 mult-adds per forward pass (Table 1)
2 FLOPS/ mult-add
3 for forward & backward pass
1.2 * 10^6 examples in dataset
128 epochs

-> 1.041408 × 10^19 FLOP

Authors of ""AI and Memory Wall"" (https://github.com/amirgholami/ai_and_memory_wall) estimated model's training compute as 11,000 PFLOP = 1.1*10^19 FLOP",ILSVRC 2012 subset of ImageNet,1280000.0,"""We evaluate our method on the ImageNet 2012 classification dataset [36] that consists of 1000 classes. The models are trained on the 1.28 million training images""",Confident,https://arxiv.org/abs/1512.03385,Deep Residual Learning for Image Recognition,175697.0,"Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun","Deeper neural networks are more difficult to train. We present a residual learning framework to ease the training of networks that are substantially deeper than those used previously. We explicitly reformulate the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We provide comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets with a depth of up to 152 layers---8x deeper than VGG nets but still having lower complexity. An ensemble of these residual nets achieves 3.57% error on the ImageNet test set. This result won the 1st place on the ILSVRC 2015 classification task. We also present analysis on CIFAR-10 with 100 and 1000 layers. The depth of representations is of central importance for many visual recognition tasks. Solely due to our extremely deep representations, we obtain a 28% relative improvement on the COCO object detection dataset. Deep residual nets are foundations of our submissions to ILSVRC & COCO 2015 competitions, where we also won the 1st places on the tasks of ImageNet detection, ImageNet localization, COCO detection, and COCO segmentation.",Industry,"United States of America,Multinational,India,Belgium",Highly cited,,120.0,,,,,,,,,,,,256.0,,,,,,FP32,True
ResNet-110 (CIFAR-10),Microsoft,2015-12-10,Vision,Image classification,1700000.0,Table 6,,,,,,,https://arxiv.org/abs/1512.03385,Deep Residual Learning for Image Recognition,175697.0,"Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun",,Industry,"United States of America,Multinational,India,Belgium",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
SSD,,2015-12-08,Vision,Object detection,,Can be calculated from the VGG-16 paper and Figure 2,,,COCO,115000.0,"Multiple datasets were used (PASCAL VOC, ILSVRC, COCO) but afaict COCO is the largest. Per this paper https://arxiv.org/abs/1703.06870v1, final paragraph before section 4.1, ""As in previous work [3, 21], we train using the union of 80k train images and a 35k subset of val images (trainval35k), and report ablations on the remaining 5k subset of val images (minival)"". So trainval35k is 80k + 35k = 115k",Confident,https://arxiv.org/pdf/1512.02325,SSD: Single Shot MultiBox Detector,39468.0,"Wei Liu, Dragomir Anguelov, Dumitru Erhan, Christian Szegedy, Scott Reed, Cheng-Yang Fu, Alexander C. Berg","We present a method for detecting objects in images using a single deep neural network. Our approach, named SSD, discretizes the output space of bounding boxes into a set of default boxes over different aspect ratios and scales per feature map location. At prediction time, the network generates scores for the presence of each object category in each default box and produces adjustments to the box to better match the object shape. Additionally, the network combines predictions from multiple feature maps with different resolutions to naturally handle objects of various sizes. Our SSD model is simple relative to methods that require object proposals because it completely eliminates proposal generation and subsequent pixel or feature resampling stage and encapsulates all computation in a single network. This makes SSD easy to train and straightforward to integrate into systems that require a detection component. Experimental results on the PASCAL VOC, MS COCO, and ILSVRC datasets confirm that SSD has comparable accuracy to methods that utilize an additional object proposal step and is much faster, while providing a unified framework for both training and inference. Compared to other single stage methods, SSD has much better accuracy, even with a smaller input image size. For 300×300 input, SSD achieves 72.1% mAP on VOC2007 test at 58 FPS on a Nvidia Titan X and for 500×500 input, SSD achieves 75.1% mAP, outperforming a comparable state of the art Faster R-CNN model. Code is available at this https URL",,,Highly cited,Also listed in Denis Panjuta's List of 100+ AI Algorithms,,,"Note on training hardware below: unclear if the Titan X was for testing or training. ""We measure the speed with batch size 8 using Titan X and cuDNN v4 with Intel Xeon E5-2667v3@3.20GHz."" I don't know if it's common to use the same hardware for both testing and training.

",NVIDIA GeForce GTX TITAN X,,,,,,VGG16,,,,,Open weights (unrestricted),,,,FP32,
DeepSpeech2 (English),Baidu Research - Silicon Valley AI Lab,2015-12-08,Speech,Speech recognition,38000000.0,All networks have 38 million parameters.,2.6e+19,"1 timestep = (1280 hidden units)^2 * (7 RNN layers * 4 matrices for bidirectional + 2 DNN layers) * (2 for doubling parameters from 36M to 72M) = 98 MFLOP
20 epochs * 12,000 hours * 3600 seconds/hour * 50 samples/sec * 98 MFLOP * 3 add-multiply * 2 backprop 
= 26,000 PF = 0.30 pfs-days

See also AI and Compute by Dario Amodei and OpenAI https://openai.com/research/ai-and-compute",,163339200.0,"""Our English speech system is trained on 11,940 hours of speech, while the Mandarin system is trained on 9,400 hours.""

11,940 * 13,680 = 163339200",Confident,https://arxiv.org/abs/1512.02595,Deep Speech 2: End-to-End Speech Recognition in English and Mandarin,2853.0,"Dario Amodei, Rishita Anubhai, Eric Battenberg, Carl Case, Jared Casper, Bryan Catanzaro, Jingdong Chen, Mike Chrzanowski, Adam Coates, Greg Diamos, Erich Elsen, Jesse Engel, Linxi Fan, Christopher Fougner, Tony Han, Awni Hannun, Billy Jun, Patrick LeGresley, Libby Lin, Sharan Narang, Andrew Ng, Sherjil Ozair, Ryan Prenger, Jonathan Raiman, Sanjeev Satheesh, David Seetapun, Shubho Sengupta, Yi Wang, Zhiqian Wang, Chong Wang, Bo Xiao, Dani Yogatama, Jun Zhan, Zhenyao Zhu","We show that an end-to-end deep learning approach can be used to recognize either English or Mandarin Chinese speech--two vastly different languages. Because it replaces entire pipelines of hand-engineered components with neural networks, end-to-end learning allows us to handle a diverse variety of speech including noisy environments, accents and different languages. Key to our approach is our application of HPC techniques, resulting in a 7x speedup over our previous system. Because of this efficiency, experiments that previously took weeks now run in days. This enables us to iterate more quickly to identify superior architectures and algorithms. As a result, in several cases, our system is competitive with the transcription of human workers when benchmarked on standard datasets. Finally, using a technique called Batch Dispatch with GPUs in the data center, we show that our system can be inexpensively deployed in an online setting, delivering low latency when serving users at scale.",Industry,United States of America,Highly cited,,,120.0,"""5 days"" from AI and Compute https://openai.com/index/ai-and-compute/",NVIDIA GeForce GTX TITAN X,16.0,0.4484,206.8604146,,8463.467702301677,,,,,,,,,,FP32,True
Inception v3,"Google,University College London (UCL)",2015-12-02,Vision,Image classification,23626728.0,Table 3 from Xception paper,1e+20,"Authors of ""AI and Memory Wall"" (https://github.com/amirgholami/ai_and_memory_wall) estimated model's training compute as 100,000 PFLOP = 1*10^20 FLOP",ILSVRC 2012 subset of ImageNet,1200000.0,"The full dataset is a lot larger and has far more categories. When people say ""ImageNet"" they're usually referring to the subset of the full dataset with 1000 categories and 1.2million images, found here: https://image-net.org/challenges/LSVRC/2012/",Likely,https://arxiv.org/abs/1512.00567,Rethinking the inception architecture for computer vision.,25401.0,"Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, Zbigniew Wojna","Convolutional networks are at the core of most state-of-the-art computer vision solutions for a wide variety of tasks. Since 2014 very deep convolutional networks started to become mainstream, yielding substantial gains in various benchmarks. Although increased model size and computational cost tend to translate to immediate quality gains for most tasks (as long as enough labeled data is provided for training), computational efficiency and low parameter count are still enabling factors for various use cases such as mobile vision and big-data scenarios. Here we explore ways to scale up networks in ways that aim at utilizing the added computation as efficiently as possible by suitably factorized convolutions and aggressive regularization. We benchmark our methods on the ILSVRC 2012 classification challenge validation set demonstrate substantial gains over the state of the art: 21.2% top-1 and 5.6% top-5 error for single frame evaluation using a network with a computational cost of 5 billion multiply-adds per inference and with using less than 25 million parameters. With an ensemble of 4 models and multi-crop evaluation, we report 3.5% top-5 error on the validation set (3.6% error on the test set) and 17.3% top-1 error on the validation set.","Industry,Academia","United States of America,United Kingdom of Great Britain and Northern Ireland",Highly cited,,,,,,,,,,,,,,,,,,,,,True
Netflix Recommender System,Netflix,2015-12-01,Recommendation,Recommender system,,,,,,,,Unknown,https://dl.acm.org/doi/pdf/10.1145/2843948,"The Netflix Recommender System: Algorithms, Business Value, and Innovation",1092.0,"CA Gomez-Uribe, N Hunt","This article discusses the various algorithms that make up the Netflix recommender system, and describes its business purpose. We also describe the role of search and related algorithms, which for us turns into a
recommendations problem as well. We explain the motivations behind and review the approach that we use to improve the recommendation algorithms, combining A/B testing focused on improving member retention and medium term engagement, as well as offline experimentation using historical member engagement data. We discuss some of the issues in designing and interpreting A/B tests. Finally, we describe some current areas of focused innovation, which include making our recommender system global and language aware.",Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Multi-scale Dilated CNN,"Princeton University,Intel Labs",2015-11-23,Vision,Image segmentation,,,,,,,,Unknown,https://arxiv.org/abs/1511.07122,Multi-Scale Context Aggregation by Dilated Convolutions,7976.0,"Fisher Yu, Vladlen Koltun",,"Academia,Industry","United States of America,Multinational,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
AlphaGo Fan,DeepMind,2015-10-01,Games,Go,8209984.0,"The input to the policy network is a 19 × 19 × 48 image stack consisting of 48 feature planes. The first hidden layer zero pads the input into a 23 × 23 image, then convolves k filters of kernel size 5 × 5 with stride 1 with the input image and applies a rectifier nonlinearity. Each of the subsequent hidden layers 2 to 12 zero pads the respective previous hidden layer into a 21 × 21 image, then convolves k filters of kernel size 3 × 3 with stride 1, again followed by a rectifier nonlinearity. The final layer convolves 1 filter of kernel size 1 × 1 with stride 1, with a different bias for each position, and applies a softmax function. The match version of AlphaGo used k = 192 filters; Fig. 2b and Extended Data Table 3 additionally show the results of training with k = 128, 256 and 384 filters.

The input to the value network is also a 19 × 19 × 48 image stack, with an additional binary feature plane describing the current colour to play. Hidden layers 2 to 11 are identical to the policy network, hidden layer 12 is an additional convolution layer, hidden layer 13 convolves 1 filter of kernel size 1 × 1 with stride 1, and hidden layer 14 is a fully connected linear layer with 256 rectifier units. The output layer is a fully connected linear layer with a single tanh unit.",3.8e+20,"Assume 0.3 utilisation rate, 1e13 GPU FLOP/s [single precision]. Trained in three stages using 50 GPUs over 3 weeks + 1 day + 1 week

Training compute = (50 GPUs)(29 days)(86400s/day)(0.3 utilisation rate)(1e13 FLOP/s) = 3.8e20 FLOPs
",,,Supervised learning + self-play,Likely,https://www.nature.com/articles/nature16961,Mastering the game of Go with deep neural networks and tree search,16057.0,"David Silver, Aja Huang, Chris J. Maddison, Arthur Guez, Laurent Sifre, George van den Driessche, Julian Schrittwieser, Ioannis Antonoglou, Veda Panneershelvam, Marc Lanctot, Sander Dieleman, Dominik Grewe, John Nham, Nal Kalchbrenner, Ilya Sutskever, Timothy Lillicrap, Madeleine Leach, Koray Kavukcuoglu, Thore Graepel, Demis Hassabis","A long-standing goal of artificial intelligence is an algorithm that learns, tabula rasa, superhuman proficiency in challenging domains. Recently, AlphaGo became the first program to defeat a world champion in the game of Go. The tree search in AlphaGo evaluated positions and selected moves using deep neural networks. These neural networks were trained by supervised learning from human expert moves, and by reinforcement learning from self-play. Here we introduce an algorithm based solely on reinforcement learning, without human data, guidance or domain knowledge beyond game rules. AlphaGo becomes its own teacher: a neural network is trained to predict AlphaGo’s own move selections and also the winner of AlphaGo’s games. This neural network improves the strength of the tree search, resulting in higher quality move selection and stronger self-play in the next iteration. Starting tabula rasa, our new program AlphaGo Zero achieved superhuman performance, winning 100–0 against the previously published, champion-defeating AlphaGo.",Industry,United Kingdom of Great Britain and Northern Ireland,"Highly cited,SOTA improvement",,,,,,,,,,,,,,,,Unreleased,Unreleased,,,,True
Deep Deterministic Policy Gradients,Google DeepMind,2015-09-09,Robotics,"Robotic manipulation,Self-driving car",,,,,,,,Unknown,https://arxiv.org/abs/1509.02971,Continuous control with deep reinforcement learning,12124.0,"TP Lillicrap, JJ Hunt, A Pritzel, N Heess, T Erez","We adapt the ideas underlying the success of Deep Q-Learning to the continuous action domain. We present an actor-critic, model-free algorithm based on the deterministic policy gradient that can operate over continuous action spaces. Using the same learning algorithm, network architecture and hyper-parameters, our algorithm robustly solves more than 20 simulated physics tasks, including classic problems such as cartpole swing-up, dexterous manipulation, legged locomotion and car driving. Our algorithm is able to find policies whose performance is competitive with those found by a planning algorithm with full access to the dynamics of the domain and its derivatives. We further demonstrate that for many of the tasks the algorithm can learn policies end-to-end: directly from raw pixel inputs.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",Highly cited,,,,,,,,,,,,,,,,,,,,,
BPE,University of Edinburgh,2015-08-31,Language,Translation,,,,,WMT'15,37500000.0,"[WORDS]
""We perform experiments on data from the shared translation task of WMT 2015. For English→German, our training set consists of 4.2 million sentence pairs, or approximately 100 million tokens. For English→Russian, the training set consists of 2.6 million sentence pairs, or approximately 50 million tokens""

100M tokens, around half will be in English, 0.75 words per token

",,https://arxiv.org/abs/1508.07909,Neural Machine Translation of Rare Words with Subword Units,7232.0,"R Sennrich, B Haddow, A Birch",,Academia,United Kingdom of Great Britain and Northern Ireland,Highly cited,,,,,,,,,,,,,,,,,,,,,
LSTM-Char-Large,"Harvard University,New York University (NYU)",2015-08-26,Language,Language modeling,19000000.0,19M (Table 3),2650000000000000.0,6 FLOP / parameter / token * 19000000 parameters * 929000 tokens * 25 epochs = 2.64765e+15 FLOP,Penn TreeBank (PTB),929000.0,"25 epochs based on code (https://github.com/yoonkim/lstm-char-cnn/blob/master/main.lua) and ""We train for 25 epochs on non-Arabic and 30 epochs on Arabic data (which was sufficient for convergence)""",Confident,https://arxiv.org/abs/1508.06615,Character-Aware Neural Language Models,2033.0,"Yoon Kim, Yacine Jernite, David Sontag, Alexander M. Rush","We describe a simple neural language model that relies only on character-level inputs. Predictions are still made at the word-level. Our model employs a convolutional neural network (CNN) and a highway network over characters, whose output is given to a long short-term memory (LSTM) recurrent neural network language model (RNN-LM). On the English Penn Treebank the model is on par with the existing state-of-the-art despite having 60% fewer parameters. On languages with rich morphology (Arabic, Czech, French, German, Spanish, Russian), the model outperforms word-level/morpheme-level LSTM baselines, again with fewer parameters. The results suggest that on many languages, character inputs are sufficient for language modeling. Analysis of word representations obtained from the character composition part of the model reveals that the model is able to encode, from characters only, both semantic and orthographic information.","Academia,Academia","United States of America,United States of America",Highly cited,,25.0,,,,,,,,,,,,,,Unreleased,Open source,Open source,"code, MIT license: https://github.com/yoonkim/lstm-char-cnn ",,
"Listen, Attend and Spell","Google,Carnegie Mellon University (CMU)",2015-08-20,Speech,Speech recognition,,,,,,,,Unknown,https://ieeexplore.ieee.org/document/7472621,"Listen, attend and spell: A neural network for large vocabulary conversational speech recognition",2175.0,"William Chan, Navdeep Jaitly, Quoc Le, Oriol Vinyals","We present Listen, Attend and Spell (LAS), a neural speech recognizer that transcribes speech utterances directly to characters without pronunciation models, HMMs or other components of traditional speech recognizers. In LAS, the neural network architecture subsumes the acoustic, pronunciation and language models making it not only an end-to-end trained system but an end-to-end model. In contrast to DNN-HMM, CTC and most other models, LAS makes no independence assumptions about the probability distribution of the output character sequences given the acoustic sequence. Our system has two components: a listener and a speller. The listener is a pyramidal recurrent network encoder that accepts filter bank spectra as inputs. The speller is an attention-based recurrent network decoder that emits each character conditioned on all previous characters, and the entire acoustic sequence. On a Google voice search task, LAS achieves a WER of 14.1% without a dictionary or an external language model and 10.3% with language model rescoring over the top 32 beams. In comparison, the state-of-the-art CLDNN-HMM model achieves a WER of 8.0% on the same set.","Industry,Academia","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
Search-Proven Best LSTM,Google,2015-07-06,Language,"Language modeling,Neural Architecture Search - NAS",20000000.0,20M (Table 3),3340000000000000.0,6 FLOP / parameter / token * 20000000 parameters * 929000 tokens * 30 epochs = 3.3444e+15 FLOP,Penn TreeBank (PTB),929000.0,""" After training for this number of epochs, we begin to lower the learning rate by a factor of decay each epoch for a total of 30 training epochs in total.""",Confident,https://proceedings.mlr.press/v37/jozefowicz15.pdf,An Empirical Exploration of Recurrent Network Architectures,2207.0,"R. Józefowicz, Wojciech Zaremba, Ilya Sutskever","The Recurrent Neural Network (RNN) is an extremely powerful sequence model that is often difficult to train. The Long Short-Term Memory (LSTM) is a specific RNN architecture whose design makes it much easier to train. While wildly successful in practice, the LSTM’s architecture appears to be ad-hoc so it is not clear if it is optimal, and the significance of its individual components is unclear. In this work, we aim to determine whether the LSTM architecture is optimal or whether much better architectures exist. We conducted a thorough architecture search where we evaluated over ten thousand different RNN architectures, and identified an architecture that outperforms both the LSTM and the recently-introduced Gated Recurrent Unit (GRU) on some but not all tasks. We found that adding a bias of 1 to the LSTM’s forget gate closes the gap between the LSTM and the GRU.",Industry,United States of America,Highly cited,,30.0,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
BatchNorm,Google,2015-06-15,Vision,Image classification,13600000.0,"""The network contains 13.6 · 106 parameters""",,,ImageNet,,,Confident,https://arxiv.org/abs/1502.03167,Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift,41272.0,"Sergey Ioffe, Christian Szegedy","Training Deep Neural Networks is complicated by the fact that the distribution of each layer's inputs changes during training, as the parameters of the previous layers change. This slows down the training by requiring lower learning rates and careful parameter initialization, and makes it notoriously hard to train models with saturating nonlinearities. We refer to this phenomenon as internal covariate shift, and address the problem by normalizing layer inputs. Our method draws its strength from making normalization a part of the model architecture and performing the normalization for each training mini-batch. Batch Normalization allows us to use much higher learning rates and be less careful about initialization. It also acts as a regularizer, in some cases eliminating the need for Dropout. Applied to a state-of-the-art image classification model, Batch Normalization achieves the same accuracy with 14 times fewer training steps, and beats the original model by a significant margin. Using an ensemble of batch-normalized networks, we improve upon the best published result on ImageNet classification: reaching 4.9% top-5 validation error (and 4.8% test error), exceeding the accuracy of human raters.",Industry,United States of America,Highly cited,,72.0,,,,,,,,,GoogLeNet / InceptionV1,,,,,,,,,,
YOLO,"University of Washington,Allen Institute for AI,Facebook AI Research",2015-06-08,Vision,Object detection,271684800.0,"Calculation based on figure 3 of the paper:
7 * 7 * 3 * 64 + 3 * 3 * 64 * 192 + 1 * 1 * 192 * 128 + 3 * 3 * 128 * 256 + 1 * 1 * 256 * 256 + 3 * 3 * 256 * 512 + 4 * (1 * 1 * 512 * 256 + 3 * 3 * 256 * 512) + 1 * 1 * 512 * 512 + 3 * 3 * 512 * 1024 + 2 * (1 * 1 * 1024 * 512 + 3 * 3 * 512 * 1024) + 4 * (3 * 3 * 1024 * 1024) + 7 * 7 * 1024 * 4096 + 4096 * 7 * 7 * 30",,,,,,,https://arxiv.org/abs/1506.02640,"You Only Look Once: Unified, Real-Time Object Detection",32413.0,"Joseph Redmon, Santosh Divvala, Ross Girshick, Ali Farhadi",,"Academia,Research collective,Industry","United States of America,United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
Faster R-CNN,Microsoft Research,2015-06-04,Vision,Object detection,,,,,,,,Unknown,https://arxiv.org/abs/1506.01497,Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks,56472.0,"S Ren, K He, R Girshick, J Sun",,Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational",Highly cited,,,,,,,,,,,,,,,,Open weights (unrestricted),Open source,Open source,"MIT license for repo:
https://github.com/ShaoqingRen/faster_rcnn 

contains weights and training scripts",FP32,
Trajectory-pooled conv nets,"Chinese University of Hong Kong (CUHK),Chinese Academy of Sciences",2015-05-19,Video,Action recognition,9106245.0,"The input layer takes either a single RGB frame (224x224x3) for the spatial stream or a stack of 10 optical flow frames (224x224x20) for the temporal stream.
The first convolutional layer has 96 filters of size 7x7 with stride 2.
This is followed by max pooling with size 3x3 and stride 2.
The second convolutional layer has 256 filters of size 5x5 with stride 2.
After that is another max pooling layer (3x3, stride 2).
The third convolutional layer has 512 filters of size 3x3 with stride 1.
The fourth convolutional layer has 512 filters of size 3x3 with stride 1.
The fifth convolutional layer has 512 filters of size 3x3 with stride 1.
Next is a max pooling layer (3x3, stride 2).
The fully-connected layers have 4096, 2048, and 101 neurons respectively.

(7*7*20+1)*96 + (5*5*20+1)*256 + (3*3*20+1)*512 + (3*3*20+1)*512 + (3*3*20+1)*512 + 2*4096 + (4096+1)*2048 + (2048+1)*101 = 9106245",,,"ImageNet,UCF101",,"They pretrain on ImageNet, and use UCF101 for actions. Its paper says ""We introduce UCF101 which is currently the largest dataset of human actions. It consists of 101 action classes, over 13k clips and 27 hours of video data"".",,https://www.cv-foundation.org/openaccess/content_cvpr_2015/html/Wang_Action_Recognition_With_2015_CVPR_paper.html,Action Recognition with Trajectory-Pooled Deep-Convolutional Descriptors,3786.0,"Limin Wang, Yu Qiao, Xiaoou Tang",,"Academia,Academia","Hong Kong,China,China",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
Deep LSTM video classifier,"University of Texas at Austin,Google",2015-05-01,Video,Video,,,,,,,,Unknown,https://www.cv-foundation.org/openaccess/content_cvpr_2015/html/Ng_Beyond_Short_Snippets_2015_CVPR_paper.html,Beyond Short Snippets: Deep Networks for Video Classification,2290.0,"Joe Yue-Hei Ng, Matthew Hausknecht, Sudheendra Vijayanarasimhan, Oriol Vinyals, Rajat Monga, George Toderici",,"Academia,Industry","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
Fast R-CNN,Microsoft Research,2015-04-30,Vision,Object detection,,,,,,,,Unknown,https://arxiv.org/abs/1504.08083,Fast R-CNN,23178.0,R Girshick,,Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
genCNN + dyn eval,"Chinese Academy of Sciences,Huawei Noah's Ark Lab,Dublin City University",2015-03-17,Language,Language modeling,8000000.0,8M according to https://arxiv.org/pdf/1508.06615,3.4153451e+16,"5046000000000 FLOP / sec/ GPU * 1 GPU * 48 hours [""Likely"" confidence since 2 days of training refer to another dataset] * 3600 sec / hour * 0.3 [assumed utilization] = 2.6158464e+17 FLOP

Assuming (!) 100 epochs (-> ""Speculative"" confidence""):

6 FLOP / parameter / token * 8000000 parameters * 929000 tokens * 100 epochs = 4.4592e+15 FLOP

sqrt(2.6158464e+17*4.4592e+15 ) = 3.4153451e+16 FLOP

________
in the algorithmic progress report paper the estimation was 7.3 × 10^16 FLOP (hardware-based estimation assuming another Tesla K40 chip)
",Penn TreeBank (PTB),929000.0,,Speculative,https://aclanthology.org/P15-1151/,genCNN: A Convolutional Architecture for Word Sequence Prediction,33.0,"Mingxuan Wang, Zhengdong Lu, Hang Li, Wenbin Jiang, Qun Liu","We propose a convolutional neural network, named genCNN, for word sequence prediction. Different from previous work on neural networkbased language modeling and generation (e.g., RNN or LSTM), we choose
not to greedily summarize the history of words as a fixed length vector. Instead, we use a convolutional neural network to predict the next word with
the history of words of variable length. Also different from the existing feedforward networks for language modeling, our model can effectively fuse
the local correlation and global correlation in the word sequence, with
a convolution-gating strategy specifically designed for the task. We argue
that our model can give adequate representation of the history, and therefore can naturally exploit both the short and long range dependencies. Our
model is fast, easy to train, and readily parallelized. Our extensive experiments on text generation and n-best re-ranking in machine translation show
that genCNN outperforms the state-ofthe-arts with big margins.","Academia,Industry,Academia","China,China,Ireland",SOTA improvement,"""genCNN outperforms the state-ofthe-arts with big margins.""",,48.0,""" The optimization is done mainly on a Tesla K40 GPU, which takes about 2 days for the training on a dataset containing 1M sentences.""
this training doesn't refer to the PTB dataset but to wiki dataset so it is likely an upper bound",NVIDIA Tesla K40s,,,,,,,,,,,Unreleased,Unreleased,,,,
Constituency-Tree LSTM,"MetaMind Inc,Stanford University",2015-02-28,Language,Semantic embedding,205190.0,"Table 1

https://arxiv.org/abs/1503.00075",,,,,,,https://arxiv.org/abs/1503.00075,Improved Semantic Representations From Tree-Structured Long Short-Term Memory Networks,3052.0,"KS Tai, R Socher, CD Manning",,"Industry,Academia","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
DQN-2015,Google,2015-02-25,Games,Atari,1693362.0,"""The input to the neural network consists of an 84x84x4 image produced by the preprocess-ing mapw. The first hidden layer convolves 32 filters of 8x8 with stride 4 with theinput image and applies a rectifier nonlinearity. The second hidden layer con-volves 64 filters of 4x4 with stride 2, again followed by a rectifier nonlinearity.This is followedby a thirdconvolutional layer thatconvolves 64 filtersof 3x3 withstride 1 followed by a rectifier. The final hidden layer is fully-connected and con-sists of 512 rectifier units. The output layer is a fully-connected linear layer with asingle output for each valid action. The number of valid actions varied between 4 and 18 on the games we considered.""

Example num params here: https://colab.research.google.com/drive/1Ty6SFYWd7EcKoxJohucL2OdiLR_3oXnI?usp=sharing",,"This should be calculatable, just needs careful reasoning about compute per frame.",,50000000.0,"Methods: ""we trained for a total of 50 million frames""",,https://www.nature.com/articles/nature14236,Human-level control through deep reinforcement learning,25403.0,"Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Andrei A. Rusu, Joel Veness, Marc G. Bellemare, Alex Graves, Martin Riedmiller, Andreas K. Fidjeland, Georg Ostrovski, Stig Petersen, Charles Beattie, Amir Sadik, Ioannis Antonoglou, Helen King, Dharshan Kumaran, Daan Wierstra, Shane Legg, Demis Hassabis ",,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
TRPO,University of California (UC) Berkeley,2015-02-19,Games,Atari,33500.0,,,,,,,Confident,https://arxiv.org/pdf/1502.05477,Trust Region Policy Optimization,8305.0,"John Schulman, Sergey Levine, Philipp Moritz, Michael I. Jordan, Pieter Abbeel","We describe an iterative procedure for optimizing policies, with guaranteed monotonic improvement. By making several approximations to the theoretically-justified procedure, we develop a practical algorithm, called Trust Region Policy Optimization (TRPO). This algorithm is similar to natural policy gradient methods and is effective for optimizing large nonlinear policies such as neural networks. Our experiments demonstrate its robust performance on a wide variety of tasks: learning simulated robotic swimming, hopping, and walking gaits; and playing Atari games using images of the screen as input. Despite its approximations that deviate from the theory, TRPO tends to give monotonic improvement, with little tuning of hyperparameters.",Academia,United States of America,Highly cited,Also listed in Denis Panjuta's List of 100+ AI Algorithms,,30.0,"""The 500 iterations of our algorithm took about 30 hours (with slight variation between games) on a 16-core computer.""",,,,,,,,,,,,Unreleased,,,,,
CRF-RNN,"University of Oxford,Stanford University,Baidu",2015-02-11,Vision,Image segmentation,,,,,,,,Unknown,https://arxiv.org/abs/1502.03240,Conditional Random Fields as Recurrent Neural Networks,2661.0,"Shuai Zheng, Sadeep Jayasumana, Bernardino Romera-Paredes, Vibhav Vineet, Zhizhong Su, Dalong Du, Chang Huang, Philip H. S. Torr",,"Academia,Academia,Industry","United Kingdom of Great Britain and Northern Ireland,United States of America,China",Highly cited,,,,,,,,,,,,,,,,,,,,,
"MSRA (C, PReLU)",Microsoft Research,2015-02-06,Vision,Image classification,87048800.0,"I used the architecture in table 3
I ignored biases, and assumed a SPP bin size of 256

3*7*7*96+96*3*3*384+384*3*3*384*5+384*3*3*768+768*3*3*768*5+768*3*3*896+896*3*3*896*5+896*(7*7+3*3+2*2+1)*4096+4096*4096+4096*1000=330581792



",2.397403008e+19,"""training C on eight K40 GPUs, takes about 3-4 weeks""
0.33 util rate
(From Imagenet paper-data, Besiroglu et al., forthcoming) ",,1280000.0,"""We perform the experiments on the 1000-class ImageNet 2012 dataset"", paper; ImageNet 2012 train set size from https://huggingface.co/datasets/imagenet-1k",Confident,https://arxiv.org/abs/1502.01852,Delving Deep into Rectifiers: Surpassing Human-Level Performance on ImageNet Classification,20078.0,"Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun","Rectified activation units (rectifiers) are essential for state-of-the-art neural networks. In this work, we study rectifier neural networks for image classification from two aspects. First, we propose a Parametric Rectified Linear Unit (PReLU) that generalizes the traditional rectified unit. PReLU improves model fitting with nearly zero extra computational cost and little overfitting risk. Second, we derive a robust initialization method that particularly considers the rectifier nonlinearities. This method enables us to train extremely deep rectified models directly from scratch and to investigate deeper or wider network architectures. Based on our PReLU networks (PReLU-nets), we achieve 4.94% top-5 test error on the ImageNet 2012 classification dataset. This is a 26% relative improvement over the ILSVRC 2014 winner (GoogLeNet, 6.66%). To our knowledge, our result is the first to surpass human-level performance (5.1%, Russakovsky et al.) on this visual recognition challenge.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational",Highly cited,,,588.0,,NVIDIA Tesla K40t,,,,,,,,,,,,,,,FP32,True
DeepLab,"Google,University of California Los Angeles (UCLA)",2014-12-22,Vision,Image segmentation,,,,,,,,Unknown,https://arxiv.org/abs/1412.7062,Semantic Image Segmentation with Deep Convolutional Nets and Fully Connected CRFs,4657.0,"Liang-Chieh Chen, George Papandreou, Iasonas Kokkinos, Kevin Murphy, Alan L. Yuille",,"Industry,Academia","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
Fractional Max-Pooling,University of Warwick,2014-12-18,Vision,Image classification,27000000.0,27M weights in largest CIFAR-100 model,1e+17,"For the 12M param model, training required ""18 hours on a GeForce GTX 780"". So would be somewhat larger for 27M.

4 TFLOPS * 18 * 3600 * 0.4 = 1e17",CIFAR-100,,,Likely,https://arxiv.org/abs/1412.6071v4,Fractional Max-Pooling,672.0,Benjamin Graham,"Convolutional networks almost always incorporate some form of spatial pooling, and very often it is alpha times alpha max-pooling with alpha=2. Max-pooling act on the hidden layers of the network, reducing their size by an integer multiplicative factor alpha. The amazing by-product of discarding 75% of your data is that you build into the network a degree of invariance with respect to translations and elastic distortions. However, if you simply alternate convolutional layers with max-pooling layers, performance is limited due to the rapid reduction in spatial size, and the disjoint nature of the pooling regions. We have formulated a fractional version of max-pooling where alpha is allowed to take non-integer values. Our version of max-pooling is stochastic as there are lots of different ways of constructing suitable pooling regions. We find that our form of fractional max-pooling reduces overfitting on a variety of datasets: for instance, we improve on the state-of-the art for CIFAR-100 without even using dropout.",Academia,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,"""for instance, we improve on the state-of-the art for CIFAR-100 without even using dropout.""",250.0,18.0,,NVIDIA GeForce GTX 780,,,,,,,,,,,,,,,,
NTM,Google DeepMind,2014-12-10,"Other,Language",Sequence memorization,,,,,,,,Unknown,https://arxiv.org/abs/1410.5401,Neural Turing Machines,2242.0,"Alex Graves, Greg Wayne, Ivo Danihelka","We extend the capabilities of neural networks by coupling them to external memory resources, which they can interact with by attentional processes. The combined system is analogous to a Turing Machine or Von Neumann architecture but is differentiable end-to-end, allowing it to be efficiently trained with gradient descent. Preliminary results demonstrate that Neural Turing Machines can infer simple algorithms such as copying, sorting, and associative recall from input and output examples.",Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Canada,France",Highly cited,,,,,,,,,,,,,,,,,,,,,
SNM-skip,Google,2014-12-03,Language,Language modeling,62000000000.0,62B from Table 2,2.97600000001e+20,https://www.wolframalpha.com/input?i=0.8+billion+*+62+billion+*+6+FLOP,One Billion Word benchmark,1000000000.0,1B from 'Our experimental setup used the One Billion Word Benchmark corpus' from section 4.1 - 'Total number of training tokens is about 0.8 billion',Speculative,https://arxiv.org/abs/1412.1454,Skip-gram Language Modeling Using Sparse Non-negative Matrix Probability Estimation,14.0,"Noam Shazeer, Joris Pelemans, Ciprian Chelba","We present a novel family of language model (LM) estimation techniques named Sparse Non-negative Matrix (SNM) estimation. A first set of experiments empirically evaluating it on the One Billion Word Benchmark shows that SNM n-gram LMs perform almost as well as the well-established Kneser-Ney (KN) models. When using skip-gram features the models are able to match the state-of-the-art recurrent neural network (RNN) LMs; combining the two modeling techniques yields the best known result on the benchmark. The computational advantages of SNM over both maximum entropy and RNN LM estimation are probably its main strength, promising an approach that has the same flexibility in combining arbitrary features effectively and yet should scale to very large amounts of data as gracefully as n-gram LMs do. ",Industry,United States of America,SOTA improvement,'When using skip-gram features the models are able to match the state-of-the-art recurrent neural network (RNN) LMs; combining the two modeling techniques yields the best known result on the benchmark. ' - from abstract,,,,,,,,,,,,,,,,,,,,True
Cascaded LNet-ANet,Chinese University of Hong Kong (CUHK),2014-11-28,Vision,Face detection,,,,,"ILSVRC 2012 subset of ImageNet,CelebA",,,Unknown,https://arxiv.org/abs/1411.7766,Deep Learning Face Attributes in the Wild,7710.0,"Ziwei Liu, Ping Luo, Xiaogang Wang, Xiaoou Tang","Predicting face attributes in the wild is challenging due to complex face variations. We propose a novel deep learning framework for attribute prediction in the wild. It cascades two CNNs, LNet and ANet, which are fine-tuned jointly with attribute tags, but pre-trained differently. LNet is pre-trained by massive general object categories for face localization, while ANet is pre-trained by massive face identities for attribute prediction. This framework not only outperforms the state-of-the-art with a large margin, but also reveals valuable facts on learning face representation.
(1) It shows how the performances of face localization (LNet) and attribute prediction (ANet) can be improved by different pre-training strategies.
(2) It reveals that although the filters of LNet are fine-tuned only with image-level attribute tags, their response maps over entire images have strong indication of face locations. This fact enables training LNet for face localization with only image-level annotations, but without face bounding boxes or landmarks, which are required by all attribute recognition works.
(3) It also demonstrates that the high-level hidden neurons of ANet automatically discover semantic concepts after pre-training with massive face identities, and such concepts are significantly enriched after fine-tuning with attribute tags. Each attribute can be well explained with a sparse linear combination of these concepts.",Academia,"Hong Kong,China",Highly cited,,,,,,,,,,,,,,,,,,,,,
Fully Convolutional Networks,University of California (UC) Berkeley,2014-11-14,Vision,Image segmentation,,,,,,,,Unknown,https://arxiv.org/abs/1411.4038,Fully Convolutional Networks for Semantic Segmentation,35588.0,"J Long, E Shelhamer, T Darrell",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
SC-NLM,University of Toronto,2014-11-10,"Multimodal,Vision,Language",Image captioning,,,,,"COCO,Flickr30K Entities",600000.0,"Our LSTM encoder and SC-NLM decoder were trained by concatenating the Flickr30K dataset with the recently released Microsoft COCO dataset [46], which combined give us over 100,000 images and over 500,000 descriptions for training",Confident,https://www.semanticscholar.org/paper/Unifying-Visual-Semantic-Embeddings-with-Multimodal-Kiros-Salakhutdinov/2e36ea91a3c8fbff92be2989325531b4002e2afc,Unifying Visual-Semantic Embeddings with Multimodal Neural Language Models,,"Ryan Kiros, R. Salakhutdinov, R. Zemel","Inspired by recent advances in multimodal learning and machine translation, we introduce an encoder-decoder pipeline that learns (a): a multimodal joint embedding space with images and text and (b): a novel language model for decoding distributed representations from our space. Our pipeline effectively unifies joint image-text embedding models with multimodal neural language models. We introduce the structure-content neural language model that disentangles the structure of a sentence to its content, conditioned on representations produced by the encoder. The encoder allows one to rank images and sentences while the decoder can generate novel descriptions from scratch. Using LSTM to encode sentences, we match the state-of-the-art performance on Flickr8K and Flickr30K without using object detections. We also set new best results when using the 19-layer Oxford convolutional network. Furthermore we show that with linear encoders, the learned embedding space captures multimodal regularities in terms of vector space arithmetic e.g. *image of a blue car* - ""blue"" + ""red"" is near images of red cars. Sample captions generated for 800 images are made available for comparison.",Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,,
LRCN,"UT Austin,University of Massachusetts Lowell,University of California (UC) Berkeley",2014-11-07,Video,Video description,142552000.0,"1st model: CaffeNet fc6 feature extractor (4096-length vectors) -> LSTM with 1024 hidden units

2nd model: CaffeNet fc6 feature extractor (4096-length vectors) -> 2 layer LSTM with 1000 hidden units

3rd mode: Like the second, but has encoder and decoder LSTMs (both with 2 layers)

AlexNet (close relative to CaffeNet) has 61M params.

LSTM RNN number of parameters is given by L*(n*m + n^2 + n) where L:= Number of layers, n:= hidden units, m:= input vector length
",,,TaCoS,40000.0,,,https://arxiv.org/abs/1411.4389,Long-term Recurrent Convolutional Networks for Visual Recognition and Description,5868.0,"Jeff Donahue, Lisa Anne Hendricks, Marcus Rohrbach, Subhashini Venugopalan, Sergio Guadarrama, Kate Saenko, Trevor Darrell",,"Academia,Academia,Academia","United States of America,United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
Spatially-Sparse CNN,University of Warwick,2014-09-23,Vision,Image classification,,Parameter count not stated but is probably derivable from the paper.,,,CIFAR-10,,,Unknown,https://arxiv.org/abs/1409.6070v1,Spatially-sparse convolutional neural networks,260.0,Benjamin Graham,"Convolutional neural networks (CNNs) perform well on problems such as handwriting recognition and image classification. However, the performance of the networks is often limited by budget and time constraints, particularly when trying to train deep networks.
Motivated by the problem of online handwriting recognition, we developed a CNN for processing spatially-sparse inputs; a character drawn with a one-pixel wide pen on a high resolution grid looks like a sparse matrix. Taking advantage of the sparsity allowed us more efficiently to train and test large, deep CNNs. On the CASIA-OLHWDB1.1 dataset containing 3755 character classes we get a test error of 3.82%.
Although pictures are not sparse, they can be thought of as sparse by adding padding. Applying a deep convolutional network using sparsity has resulted in a substantial reduction in test error on the CIFAR small picture datasets: 6.28% on CIFAR-10 and 24.30% for CIFAR-100.",Academia,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,SOTA per https://paperswithcode.com/sota/image-classification-on-cifar-10,,,,,,,,,,,,,,,,,,,,
Deeply-supervised nets,Microsoft Research,2014-09-18,Vision,Image classification,,,,,"MNIST,CIFAR-10,CIFAR-100,SVHN (Street View House Numbers)",870000.0,60000+50000+60000+600000,,https://arxiv.org/abs/1409.5185,Deeply-Supervised Nets,2509.0,"Chen-Yu Lee, Saining Xie, Patrick Gallagher, Zhengyou Zhang, Zhuowen Tu",,Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational","Highly cited,SOTA improvement",,,,,,,,,,,,,,,,,,,,,
GoogLeNet / InceptionV1,"Google,University of Michigan,University of North Carolina",2014-09-17,Vision,Image classification,6797700.0,Computed summing the parameters on table 1 of section 5,1.51e+18,"AI and Compute  (https://openai.com/blog/ai-and-compute/) charts imply a value of 1.51e18 (value extracted using WebPlotDigitizer  https://automeris.io/WebPlotDigitizer/ ).

Based on the paper, there are 1.5B multiply-adds per inference, and 1.2M images in the training set, but an unknown number of epochs. They decrease the learning rate by 4% every 8 epochs, so there are likely many. If the figure from AI and Compute is taken as true, there were likely 140 epochs","ILSVRC 2014 subset of ImageNet,ImageNet",1200000.0,"""The ILSVRC 2014 classification challenge involves the
task of classifying the image into one of 1000 leaf-node categories in the Imagenet hierarchy. There are about 1.2 million images for training, 50,000 for validation and 100,000 images for testing""
...
""We participated in the challenge with no external data used for training.""",Confident,https://arxiv.org/abs/1409.4842,Going deeper with convolutions,41425.0,"Christian Szegedy, Wei Liu, Yangqing Jia, Pierre Sermanet, Scott Reed, Dragomir Anguelov, Dumitru Erhan, Vincent Vanhoucke, Andrew Rabinovich","We propose a deep convolutional neural network architecture codenamed ""Inception"", which was responsible for setting the new state of the art for classification and detection in the ImageNet Large-Scale Visual Recognition Challenge 2014 (ILSVRC 2014). The main hallmark of this architecture is the improved utilization of the computing resources inside the network. This was achieved by a carefully crafted design that allows for increasing the depth and width of the network while keeping the computational budget constant. To optimize quality, the architectural decisions were based on the Hebbian principle and the intuition of multi-scale processing. One particular incarnation used in our submission for ILSVRC 2014 is called GoogLeNet, a 22 layers deep network, the quality of which is assessed in the context of classification and detection.","Industry,Academia,Academia","United States of America,United States of America,United States of America",Highly cited,,827.0,,"""Although we used CPU based implementation only, a rough estimate suggests that the GoogLeNet network could be trained to convergence using few high-end GPUs within a week""",,,,,,,,,,,,,,,,,True
SPN-4+KN5,"Singapore University of Technology & Design,DSO National Laboratories",2014-09-14,Language,Language modeling,5000000.0,"Estimate from table 2 of https://arxiv.org/abs/1609.07843

The authors of the linked paper draw on estimates from table 3 of https://arxiv.org/pdf/1508.06615.pdf",4.4e+16,"40h, 1 GPU, 1028e9 Peak FLOP/s, 30%

1028000000000 FLOP/s/GPU * 1GPU * 40 hours * 3600 s/hour * 0.3 [assumed utilization] = 4.44096e+16 FLOP",Penn TreeBank (PTB),,"seems like the authors use a non-standard split for the dataset

""We performed our experiments on the commonly used Penn
Treebank corpus [15], and adhered to the experimental setup
used in previous work [6, 9]. We used sections 0-20, sections
21-22, and sections 23-24 respectively as training, validation
and test sets""

apparently the most common split is ""In the most common split of this corpus, sections from 0 to 18 are used for training (38 219 sentences, 912 344 tokens), sections from 19 to 21 are used for validation (5 527 sentences, 131 768 tokens), and sections from 22 to 24 are used for testing (5 462 sentences, 129 654 tokens)""

unknown amount of epochs
batch size = 100, context length = 5? (because we look at N=4 previous words). training iterations unknown

""We used a learning rate of η= 0.1, a mini-batch size of 100,
randomly initialized the weights to a value between 0 and 1, and
imposed an L2 penalty of 10−5 on all weights. With reference
to Figure 2, We used K = 10000, feature vectors with D = 100
dimensions, and N = 3 and N = 4 previous words.""",Likely,https://www.comp.nus.edu.sg/~skok/papers/is14.pdf,Language modeling with sum-product networks,102.0,"W. Cheng, Stanley Kok, Hoai Vu Pham, Hai Leong Chieu, K. M. A. Chai","Sum product networks (SPNs) are a new class of deep probabilistic models. They can contain multiple hidden layers while keeping their inference and training times tractable. An SPN consists of interleaving layers of sum nodes and product nodes. A sum node can be interpreted as a hidden variable, and a product node can be viewed as a feature capturing rich interactions among an SPN’s inputs. We show that the ability of SPN to use hidden layers to model complex dependencies among words, and its tractable inference and learning times, make it a suitable framework for a language model. Even though SPNs have been applied to a variety of vision problems [1, 2], we are the first to use it for language modeling. Our empirical comparisons with
six previous language models indicate that our SPN has superior performance.","Academia,Government","Singapore,Singapore",SOTA improvement,"""Our empirical comparisons with
six previous language models indicate that our SPN has superior
performance""",,40.0,"""""e stopped training our SPN when its performance on the validation set
stops improving at two consecutive evaluation points, or when it has run for 40 hours, whichever occurred first. (It turned out that both SPN-3 and SPN-4 ran for the maximum of 40 hours.)
We parallelized our SPN code2 to run on a GPU, and ran our experiments on a machine with a 2.4 GHz CPU and an NVIDIA Tesla C2075 GPU (448 CUDA cores, 5GB of device memory).""",NVIDIA Tesla C2075,1.0,,,,290.04546165358084,,,,,,Unreleased,Open (non-commercial),Open access (non-commercial),"code, no license specified: https://github.com/stakok/lmspn/tree/master/SPNLM 
training code: https://github.com/stakok/lmspn/blob/master/SPNLM/README.doc ",,
Seq2Seq LSTM,Google,2014-09-10,Language,Translation,1920000000.0,"The resulting LSTM has 384M parameters of which 64M are pure recurrent connections (32M for the “encoder” LSTM and 32M
for the “decoder” LSTM).
The paper uses an ensemble of 5 LSTMs.",5.6e+19,"384E+6 parameters * 2 FLOP/parameter * (348E+6 + 304E+6 points per epoch) * 7.5 epochs * 3 FLOP/point ~= 1.126656e+19 FLOP
Times 5 independent models in ensemble => 5.6E+19 FLOP

If we assume NVIDIA K40 (in use at the time): 10 days * 24 * 60 * 60 seconds/day * 8 GPUs * 33% * 5e12 FLOP/s * 5 models in ensemble ~= 5.7E+19 FLOP

Authors of ""AI and Memory Wall"" estimated model's training compute as 11,000 PFLOPS = 1.1*10^19 FLOPS
(https://github.com/amirgholami/ai_and_memory_wall)",WMT14,652000000.0,"[WORDS]
""We used the WMT’14 English to French dataset. We trained our models on a subset of 12M sentences consisting of 348M French words and 304M English words, which is a clean “selected”
subset from [29].""",Confident,https://arxiv.org/abs/1409.3215,Sequence to Sequence Learning with Neural Networks,19578.0,"Ilya Sutskever, Oriol Vinyals, Quoc V. Le","Deep Neural Networks (DNNs) are powerful models that have achieved excellent performance on difficult learning tasks. Although DNNs work well whenever large labeled training sets are available, they cannot be used to map sequences to sequences. In this paper, we present a general end-to-end approach to sequence learning that makes minimal assumptions on the sequence structure. Our method uses a multilayered Long Short-Term Memory (LSTM) to map the input sequence to a vector of a fixed dimensionality, and then another deep LSTM to decode the target sequence from the vector. Our main result is that on an English to French translation task from the WMT'14 dataset, the translations produced by the LSTM achieve a BLEU score of 34.8 on the entire test set, where the LSTM's BLEU score was penalized on out-of-vocabulary words. Additionally, the LSTM did not have difficulty on long sentences. For comparison, a phrase-based SMT system achieves a BLEU score of 33.3 on the same dataset. When we used the LSTM to rerank the 1000 hypotheses produced by the aforementioned SMT system, its BLEU score increases to 36.5, which is close to the previous best result on this task. The LSTM also learned sensible phrase and sentence representations that are sensitive to word order and are relatively invariant to the active and the passive voice. Finally, we found that reversing the order of the words in all source sentences (but not target sentences) improved the LSTM's performance markedly, because doing so introduced many short term dependencies between the source and the target sentence which made the optimization problem easier.",Industry,United States of America,Highly cited,,7.5,240.0,Training took about 10 days,,,,,,,,,,,,,,,,,True
Large regularized LSTM,"New York University (NYU),Google Brain",2014-09-08,Language,Language modeling,66000000.0,"""The large LSTM has 1500 units per layer and its parameters are initialized uniformly in [−0.04, 0.04]""

66M according to Table 3 of https://arxiv.org/pdf/1611.01462",4.2966069e+16,"3520000000000 FLOP / s/ GPU [tesla k20c assumed, the paper says just ""Nvidia k20""] * 1 GPU * 24 hours [could be less, they report ""the entire day""] * 3600 s / hour * 0.3 [assumed utilization] = 9.12384e+16 FLOP 

6 FLOP / parameter / token * 66000000 parameters * 929000 tokens * 55 epochs = 2.023362e+16 FLOP

sqrt(2.023362e+16*9.12384e+16) = 4.2966069e+16 ",Penn TreeBank (PTB),929000.0,""" We train the model for 55 epochs with a learning rate of 1""",Confident,https://arxiv.org/abs/1409.2329,Recurrent Neural Network Regularization,3224.0,"Wojciech Zaremba, Ilya Sutskever, Oriol Vinyals","We present a simple regularization technique for Recurrent Neural Networks (RNNs) with Long Short-Term Memory (LSTM) units. Dropout, the most successful technique for regularizing neural networks, does not work well with RNNs and LSTMs. In this paper, we show how to correctly apply dropout to LSTMs, and show that it substantially reduces overfitting on a variety of tasks. These tasks include language modeling, speech recognition, image caption generation, and machine translation.","Academia,Industry","United States of America,United States of America",Highly cited,,55.0,24.0,"""Training this network takes an entire day on an NVIDIA K20 GPU.""",NVIDIA Tesla K20c,1.0,,,,264.24675821957226,,,,,,Unreleased,Open source,Open source,"Apache: https://github.com/wojzaremba/lstm 
train: https://github.com/wojzaremba/lstm/blob/master/main.lua ",,
VGG19,University of Oxford,2014-09-04,Vision,Image classification,144000000.0,"Source: Table 2
https://arxiv.org/abs/1409.1556",1.1e+19,"Authors of ""AI and Memory Wall"" (https://github.com/amirgholami/ai_and_memory_wall) estimated model's training compute as 11,000 PFLOP = 1.1*10^19 FLOP",ILSVRC 2012 subset of ImageNet,1300000.0,"""In this section, we present the image classification results achieved by the described
ConvNet architectures on the ILSVRC-2012 dataset (which was used for ILSVRC 2012–2014 challenges). The dataset includes images of 1000 classes, and is split into three sets: training (1.3M images), validation (50K images), and testing (100K images with held-out class labels).""",Likely,https://arxiv.org/abs/1409.1556,Very Deep Convolutional Networks for Large-Scale Image Recognition,94013.0,"Karen Simonyan, Andrew Zisserman","In this work we investigate the effect of the convolutional network depth on its accuracy in the large-scale image recognition setting. Our main contribution is a thorough evaluation of networks of increasing depth using an architecture with very small (3x3) convolution filters, which shows that a significant improvement on the prior-art configurations can be achieved by pushing the depth to 16-19 weight layers. These findings were the basis of our ImageNet Challenge 2014 submission, where our team secured the first and the second places in the localisation and classification tracks respectively. We also show that our representations generalise well to other datasets, where they achieve state-of-the-art results. We have made our two best-performing ConvNet models publicly available to facilitate further research on the use of deep visual representations in computer vision.",Academia,United Kingdom of Great Britain and Northern Ireland,Highly cited,,,,,,,,,,,,,,,,,,,,FP32,True
VGG16,University of Oxford,2014-09-04,Vision,Image classification,138000000.0,"Source: Table 2
https://arxiv.org/abs/1409.1556",1.2291e+19,"3 weeks * 4 Titan Black GPUs * 0.30 utilization

Section 3.3: ""On a system equipped with four NVIDIA Titan Black GPUs, training a single net took 2–3 weeks depending on the architecture.""

Titan Black performance: 5.645 TFLOPS (assuming FP32)

https://www.wolframalpha.com/input?i=5.645+TFLOPS+*+3+weeks+*+4+*+0.3


",ILSVRC 2012 subset of ImageNet,1300000.0,"""In this section, we present the image classification results achieved by the described ConvNet architectures on the ILSVRC-2012 dataset (which was used for ILSVRC 2012–2014 challenges). The dataset includes images of 1000 classes, and is split into three sets: training (1.3M images), validation (50K images), and testing (100K images with held-out class labels).""

This is confirmed by section 3.1 Training:
""The batch size was set to 256""
""In total, the learning rate was decreased 3 times, and the learning was stopped after 370K iterations (74 epochs)""
256 * 370k/74 = 1.3M",Confident,https://arxiv.org/abs/1409.1556,Very Deep Convolutional Networks for Large-Scale Image Recognition,94013.0,Karen Simonyan; Andrew Zisserman,,Academia,United Kingdom of Great Britain and Northern Ireland,Highly cited,,74.0,504.0,,NVIDIA GTX Titan Black,4.0,,,,2137.653074766455,,,,256.0,,,,,,FP32,True
RNNsearch-50*,"Jacobs University Bremen,University of Montreal / Université de Montréal",2014-09-01,Language,Translation,,,1.5552e+18,"From https://openai.com/blog/ai-and-compute/ Appendix.

0.018 pfs-days
(86400*10^15*0.018)

252 hours in a Quadro K-6000 GPU (assumed utilization: 0.33)

5196000000000 FLOP/s *252 hours * 3600 second/hour * 0.33 utilization = 1555200000000000000 FLOP",WMT'14 + selection,348000000.0,"[WORDS]
""WMT ’14 contains the following English-French parallel corpora: Europarl (61M words), news
commentary (5.5M), UN (421M) and two crawled corpora of 90M and 272.5M words respectively,
totaling 850M words. Following the procedure described in Cho et al. (2014a), we reduce the size of
the combined corpus to have 348M words using the data selection method by Axelrod et al. (2011).""",Confident,https://arxiv.org/abs/1409.0473,Neural Machine Translation by Jointly Learning to Align and Translate,26073.0,"D Bahdanau, K Cho, Y Bengio",,"Academia,Academia","Germany,Canada",Highly cited,,,,,NVIDIA Quadro K6000,,,,,,,,,,,,,,,,True
SmooCT,University College London (UCL),2014-07-01,Games,Poker,,,6.9e+16,"""Each three-player agent was trained for about 12 billion episodes, requiring about 48 hours of training time [...] on a modern computer without using parallelization""

Assume an Intel i7 so 400e9 FLOP/s.
6.9e16 = 400e9*60*60*48",,12000000000.0,"""Each three-player agentwas trained for about 12 billion episodes""

An episode seems to be a round of betting.",Likely,https://www.semanticscholar.org/paper/Self-play-Monte-Carlo-tree-search-in-computer-poker-Heinrich-Silver/7b687599b4425aa959036071030e1212a3b359c7,Self-Play Monte-Carlo Tree Search in Computer Poker,16.0,"Johannes Heinrich, David Silver","Self-play reinforcement learning has proved to be successful in many perfect information two-player games.
However, research carrying over its theoretical guarantees and practical success to games of imperfect information has been lacking. In this paper, we evaluate selfplay Monte-Carlo Tree Search (MCTS) in limit Texas Hold’em and Kuhn poker. We introduce a variant of the established UCB algorithm and provide first empirical results demonstrating its ability to find approximate Nash equilibria.",Academia,United Kingdom of Great Britain and Northern Ireland,SOTA improvement,First RL system to achieve superhuman level at Poker Limit Texas Hold Em,,48.0,,,,,,,,,,,,,,,,,,
Multiresolution CNN,"Google,Stanford University",2014-06-23,Video,Video classification,126125568.0,"""Using shorthand notation, the full [single frame] architecture is C(96, 11, 3)-N-P-C(256, 5, 1)-N-P-C(384, 3, 1)-C(384, 3, 1)-C(256, 3, 1)-P-FC(4096)-FC(4096), where C(d, f, s) indicates a convolutional layer with d filters of spatial size f ×f, applied to the input with stride s""

Two such single-frame architectures are concatenated as shown in figure 2

""Since the input is only of half the
spatial size as the full-frame models, we take out the last
pooling layer to ensure that both streams still terminate in a
layer of size 7×7×256. ""

We assume the input are T=10 frames with C=3 color channels each

2*(256*(10*3*5*5+1) + 384*(256*3*3+1) + 384*(384*3*3+1) + 256*(384*3*3+1)) + (2*7*7*256 + 1)*4096 + (4096+1)*4096



",,,,50000000.0,"""We further estimate the size of our dataset of sampled frames to be on the order of 50 million examples and that our networks have each seen approximately 500 million examples throughout the training period in total.""

So 5e+7 datapoints and 10 epochs.",,https://ieeexplore.ieee.org/document/6909619,Large-Scale Video Classification with Convolutional Neural Networks,6254.0,"A Karpathy, G Toderici, S Shetty, T Leung",,"Industry,Academia","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
DeepFace,"Tel Aviv University,Facebook",2014-06-23,Vision,Face verification,,,,,,,,Unknown,https://ieeexplore.ieee.org/document/6909616,DeepFace: Closing the Gap to Human-Level Performance in Face Verification,5998.0,"Y Taigman, M Yang, MA Ranzato",,"Academia,Industry","Israel,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
RNN-WER,"DeepMind,University of Toronto",2014-06-22,Speech,Speech recognition,26500000.0,"""The network had five levels of bidirectional LSTM hidden layers, with 500 cells in each layer, giving a total of ∼ 26.5M weights.""",,,WSJ,1100000.0,"dataset is 81 hours

At 228 wpm (https://docs.google.com/document/d/1G3vvQkn4x_W71MKg0GmHVtzfd9m0y3_Ofcoew0v902Q/edit)
that's 81*228*60 = 1,108,080

another source says WSJ contains 37k sentences, so this would be ~30 words per sentence which seems high but roughly right: https://www.arxiv-vanity.com/papers/1903.00216/",Likely,https://proceedings.mlr.press/v32/graves14.html,Towards End-To-End Speech Recognition with Recurrent Neural Networks,2805.0,"Alex Graves, Navdeep Jaitly","This paper presents a speech recognition system that directly transcribes audio data with text, without requiring an intermediate phonetic representation. The system is based on a combination of the deep bidirectional LSTM recurrent neural network architecture and the Connectionist Temporal Classification objective function. A modification to the objective function is introduced that trains the network to minimise the expectation of an arbitrary transcription loss function. This allows a direct optimisation of the word error rate, even in the absence of a lexicon or language model. The system achieves a word error rate of 27.3% on the Wall Street Journal corpus with no prior linguistic information, 21.9% with only a lexicon of allowed words, and 8.2% with a trigram language model. Combining the network with a baseline system further reduces the error rate to 6.7%.","Industry,Academia","United Kingdom of Great Britain and Northern Ireland,Canada","Highly cited,SOTA improvement","""Finally, by combining the new model with a baseline, we
have achieved state-of-the-art accuracy on the Wall Street
Journal corpus for speaker independent recognition.""",,,,,,,,,,,,,,,,,,,,
Fragment embedding,Stanford University,2014-06-21,Multimodal,Entity embedding,144496000.0,"Model contains a word embedding. a matrix combining two word embeddings, and image embedding (built upon a pretrained RCNN image model.
Word embedding: 400000 * 200 =80000000 (""Here, We is a d × 400, 000 matrix that encodes a 1-of-k vector into a d-dimensional word vector representation (we use d = 200).""
Embedding dimension: 1000 (""The size of the embedded space is cross-validated, and we found that values of approximately 1000 generally work well.""
Word combination matrix: 400* 1000=400000
Image embedding: 4096*1000=4096000 (""We use the Caffe [41] implementation of the ImageNet Detection RCNN model [27] to detect objects in all images. On our machine with a Tesla K40 GPU, the RCNN processes one image in approximately 25 seconds. We discard the predictions for 200 ImageNet detection classes and only keep the 4096-D activations"")
CNN: 60,000,000 ""The CNN architecture is identical to the one described in Girhsick et al. [26]. It contains approximately 60 million parameters""
Total parameters: 4096000+80000000+400000+60000000=144,496,000",,,Flickr30K Entities,150000.0,"Largest experiment uses 30000 training images, 30000 * 5 = 150,000 sentences",Likely,https://www.semanticscholar.org/paper/Deep-Fragment-Embeddings-for-Bidirectional-Image-Karpathy-Joulin/7f1b111f0bb703b0bd97aba505728a9b0d9b2a54,Deep Fragment Embeddings for Bidirectional Image Sentence Mapping,,"A. Karpathy, Armand Joulin, Li Fei-Fei","We introduce a model for bidirectional retrieval of images and sentences through a deep, multi-modal embedding of visual and natural language data. Unlike previous models that directly map images or sentences into a common embedding space, our model works on a finer level and embeds fragments of images (objects) and fragments of sentences (typed dependency tree relations) into a common space. We then introduce a structured max-margin objective that allows our model to explicitly associate these fragments across modalities. Extensive experimental evaluation shows that reasoning on both the global level of images and sentences and the finer level of their respective fragments improves performance on image-sentence retrieval tasks. Additionally, our model provides interpretable predictions for the image-sentence retrieval task since the inferred inter-modal alignment of fragments is explicit.",Academia,United States of America,SOTA improvement,"""Extensive experimental evaluation shows that reasoning on both the global level of images and sentences and the finer level of their respective fragments significantly improves performance on image-sentence retrieval tasks.""",20.0,,,,,,,,,,,,,,,,,,,
SPPNet,"Microsoft,Xi’an Jiaotong University,University of Science and Technology of China (USTC)",2014-06-18,Vision,Image classification,,,3.411072e+18,"""All networks in this paper can be
trained on a single GeForce GTX Titan GPU (6 GB memory) within two to four weeks.""
4.7e12 FLOP/s * 4* 7*24*60*60 seconds * 0.3 utilisation",ImageNet-1k,1280000.0,"Section 3.1: ""We train the networks on the 1000-category training
set of ImageNet 2012.""",Confident,https://arxiv.org/abs/1406.4729,Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition,10365.0,"Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun",,"Industry,Academia,Academia","United States of America,Multinational,India,Belgium,China,China",Highly cited,,,672.0,"""All networks in this paper can be trained on a single GeForce GTX Titan GPU (6 GB memory) within two to four weeks.""",NVIDIA GeForce GTX TITAN,,,,,,,,,,,,,,,FP32,True
GANs,University of Montreal / Université de Montréal,2014-06-10,Image generation,Image generation,,The paper outlines the G-D framework but doesn't provide information about the structures of their generator and discriminator.,5.184e+17,"From https://openai.com/blog/ai-and-compute/ Appendix

""Less than 0.006 pfs-days""
(86400*10^15*0.006)

Seems extremely speculative, unless someone at OpenAI privately corresponded with the authors. There is no information about compute or training in the GANs paper.",CIFAR-10,60000.0,"""We trained adversarial nets an a range of datasets including MNIST[23], the Toronto Face Database (TFD) [28], and CIFAR-10 [21].""

MNIST has 60k images 
https://en.wikipedia.org/wiki/MNIST_database

TFD seems to have 2925 examples (?)
https://www.cs.toronto.edu/~urtasun/courses/CSC411/hw3-411.pdf

CIFAR-10 has 60k images
https://www.cs.toronto.edu/~kriz/cifar.html

",Speculative,https://arxiv.org/abs/1406.2661,Generative Adversarial Networks,36870.0,"Ian J. Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, Yoshua Bengio","We propose a new framework for estimating generative models via an adversarial process, in which we simultaneously train two models: a generative model G that captures the data distribution, and a discriminative model D that estimates the probability that a sample came from the training data rather than G. The training procedure for G is to maximize the probability of D making a mistake. This framework corresponds to a minimax two-player game. In the space of arbitrary functions G and D, a unique solution exists, with G recovering the training data distribution and D equal to 1/2 everywhere. In the case where G and D are defined by multilayer perceptrons, the entire system can be trained with backpropagation. There is no need for any Markov chains or unrolled approximate inference networks during either training or generation of samples. Experiments demonstrate the potential of the framework through qualitative and quantitative evaluation of the generated samples.",Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,,True
Two-stream ConvNets for action recognition,University of Oxford,2014-06-09,Video,Video classification,,,,,,,,Unknown,https://arxiv.org/abs/1406.2199,Two-Stream Convolutional Networks for Action Recognition in Videos,7231.0,"Karen Simonyan, Andrew Zisserman",,Academia,United Kingdom of Great Britain and Northern Ireland,Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
GRUs,"University of Montreal / Université de Montréal,Jacobs University,University of Maine",2014-06-03,Language,"Language modeling,Translation",,,,,,,,Unknown,https://arxiv.org/abs/1406.1078,Learning Phrase Representations using RNN Encoder-Decoder for Statistical Machine Translation,21840.0,"Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Dzmitry Bahdanau, Fethi Bougares, Holger Schwenk, Yoshua Bengio","In this paper, we propose a novel neural network model called RNN Encoder-Decoder that consists of two recurrent neural networks (RNN). One RNN encodes a sequence of symbols into a fixed-length vector representation, and the other decodes the representation into another sequence of symbols. The encoder and decoder of the proposed model are jointly trained to maximize the conditional probability of a target sequence given a source sequence. The performance of a statistical machine translation system is empirically found to improve by using the conditional probabilities of phrase pairs computed by the RNN Encoder-Decoder as an additional feature in the existing log-linear model. Qualitatively, we show that the proposed model learns a semantically and syntactically meaningful representation of linguistic phrases.","Academia,Academia,Academia","Canada,Germany,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
AdaRNN,Beihang University,2014-06-01,Language,Sentiment classification,13040.0,"D=25 ""For recursive neural models, the dimension of word vector is set to 25, and f = tanh is used as the nonlinearity function. We employ 10 composition matrices in AdaRNN.""
Composition matrices: ""W ∈ R D×2D is the composition matrix, and b is the bias vector.""
C=10 ""We employ 10 composition matrices in AdaRNN.""
Combination matrix: ""S ∈ R C×(2D+|e|) is the matrix used to determine which composition function we use, vl , vr are the left and right child vectors, and e are external feature vector. In this work, e is a one-hot binary feature vector which indicates what the dependency type is.""
|e| > 4: (see Figure 2)
Weights: 10 * 25 * 50 + 10 * (50+4) =13040 (ignoring embedding to the 25 dimension embedding space)",,,,6248.0,"""Training data consists of 6,248 tweets,""",Confident,https://www.semanticscholar.org/paper/Adaptive-Recursive-Neural-Network-for-Twitter-Dong-Wei/06e122f475a21d92dba137609c40f35690217475,Adaptive Recursive Neural Network for Target-dependent Twitter Sentiment Classification,,"Li Dong, Furu Wei, Chuanqi Tan, Duyu Tang, M. Zhou, Ke Xu","We propose Adaptive Recursive Neural Network (AdaRNN) for target-dependent Twitter sentiment classification. AdaRNN adaptively propagates the sentiments of words to target depending on the context and syntactic relationships between them. It consists of more than one composition functions, and we model the adaptive sentiment propagations as distributions over these composition functions. The experimental studies illustrate that AdaRNN improves the baseline methods. Furthermore, we introduce a manually annotated dataset for target-dependent Twitter sentiment analysis.",Academia,China,Highly cited,,,,,,,,,,,,,,,,,,,,,
Paragraph Vector,Google,2014-05-14,Language,Language modeling,32000000.0," 75000*400+5000*400=32000000
""We learn the word vectors and paragraph vectors using 75,000 training documents""
""In PV-DM, the learned vector representations have 400 dimensions for both words and documents""
Paragraph embedding of dimension number of paragraphs * embedding size
Word embedding of dimension |V|*embedding size
Assuming vocabulary of 5000 since results are compared directly to Maas et. al., 2011",,,IMDb,75000.0,"""25,000 labeled training instances, 25,000 labeled test in-
stances and 50,000 unlabeled training instances.""",Confident,https://www.semanticscholar.org/paper/Distributed-Representations-of-Sentences-and-Le-Mikolov/f3de86aeb442216a8391befcacb49e58b478f512,Distributed Representations of Sentences and Documents,,"Quoc V. Le, Tomas Mikolov","Many machine learning algorithms require the input to be represented as a fixed-length feature vector. When it comes to texts, one of the most common fixed-length features is bag-of-words. Despite their popularity, bag-of-words features have two major weaknesses: they lose the ordering of the words and they also ignore semantics of the words. For example, ""powerful,"" ""strong"" and ""Paris"" are equally distant. In this paper, we propose Paragraph Vector, an unsupervised algorithm that learns fixed-length feature representations from variable-length pieces of texts, such as sentences, paragraphs, and documents. Our algorithm represents each document by a dense vector which is trained to predict words in the document. Its construction gives our algorithm the potential to overcome the weaknesses of bag-of-words models. Empirical results show that Paragraph Vectors outperforms bag-of-words models as well as other techniques for text representations. Finally, we achieve new state-of-the-art results on several text classification and sentiment analysis tasks.",Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
HyperNEAT,University of Texas at Austin,2014-03-05,Games,Atari,239712.0,"""The ANN consists of three layers (Fig. 3): a substrate layer inwhich information from the game screen (raw pixels, objects, ornoise) is given as input to the network; a processing layer whichadds a nonlinear internal representation; and a nonlinear outputlayer from which actions are read and conveyed to the Atari em-ulator. Both the input and output layers are fully connected tothe processing layer. The substrate dimensionality of the inputand processinglayers is 810 in the case of the object repre-sentation and 1621 for the pixel and noise representations.3The output layer consists of a 33 substrate mirroring the ninepossible directions of the Atari 2600 joystick and a single noderepresenting thefire button""",,,,,,,https://ieeexplore.ieee.org/abstract/document/6756960,A Neuroevolution Approach to General Atari Game Playing,195.0,"M Hausknecht, J Lehman",,Academia,United States of America,SOTA improvement,"""Neuroevolution ameliorates these problems and evolved policies achieve state-of-the-art results, even surpassing human high scores on three games""",,,,,,,,,,,,,,,,,,,,
GloVe (32B),Stanford University,2014-01-01,Language,Semantic embedding,120000000.0,400k vocab * 300 vector dimensions,,"""The total run-time is split between populating X
and training the model. The former depends on
many factors, including window size, vocabulary
size, and corpus size. Though we did not do so,
this step could easily be parallelized across multiple machines (see, e.g., Lebret and Collobert
(2014) for some benchmarks). Using a single
thread of a dual 2.1GHz Intel Xeon E5-2658 machine, populating X with a 10 word symmetric
context window, a 400,000 word vocabulary, and
a 6 billion token corpus takes about 85 minutes.
Given X, the time it takes to train the model depends on the vector size and the number of iterations. For 300-dimensional vectors with the above settings (and using all 32 cores of the above machine), a single iteration takes 14 minutes. See Fig. 4 for a plot of the learning curve""

""We run 50 iterations for vectors smaller than
300 dimensions, and 100 iterations otherwise (see
Section 4.6 for more details about the convergence
rate).""

But we are interested in the 42B token model",Common Crawl,42000000000.0,"""We trained our model on five corpora of varying sizes: a 2010 Wikipedia dump with 1 billion tokens; a 2014 Wikipedia dump with 1.6 billion tokens; Gigaword 5 which has 4.3 billion tokens; the combination Gigaword5 + Wikipedia2014, which has 6 billion tokens; and on 42 billion tokens of web data, from Common Crawl

[To demonstrate the scalability of the model, we also trained it on a much larger sixth corpus, containing 840 billion tokens of web data, but in this case we did not lowercase the vocabulary, so the results are not directly comparable.]""",,https://nlp.stanford.edu/projects/glove/,GloVe: Global Vectors for Word Representation,30643.0,"J Pennington, R Socher, CD Manning",,Academia,United States of America,Highly cited,,,,"Section 4.6 in original paper (https://nlp.stanford.edu/pubs/glove.pdf)

85 min to populate coocurrence matrix
+ 25 training iterations

Each iteration takes 14 minutes on 32 cores ",,,,,,,,,,,,,,,,,
GloVe (6B),Stanford University,2014-01-01,Language,Semantic embedding,120000000.0,400k vocab * 300 vector dimensions,,"""The total run-time is split between populating X
and training the model. The former depends on
many factors, including window size, vocabulary
size, and corpus size. Though we did not do so,
this step could easily be parallelized across multiple machines (see, e.g., Lebret and Collobert
(2014) for some benchmarks). Using a single
thread of a dual 2.1GHz Intel Xeon E5-2658 machine, populating X with a 10 word symmetric
context window, a 400,000 word vocabulary, and
a 6 billion token corpus takes about 85 minutes.
Given X, the time it takes to train the model depends on the vector size and the number of iterations. For 300-dimensional vectors with the above settings (and using all 32 cores of the above machine), a single iteration takes 14 minutes. See Fig. 4 for a plot of the learning curve""

""We run 50 iterations for vectors smaller than
300 dimensions, and 100 iterations otherwise (see
Section 4.6 for more details about the convergence
rate).""

Details of dual 2.1GHz Intel Xeon E5-2658 machine:
https://www.intel.com/content/www/us/en/products/sku/61428/intel-xeon-processor-e52658-20m-2-10-ghz-8-0-gts-intel-qpi/specifications.html",Gigaword5 + Wikipedia2014,6000000000.0,"""We trained our model on five corpora of varying sizes: a 2010 Wikipedia dump with 1 billion tokens; a 2014 Wikipedia dump with 1.6 billion tokens; Gigaword 5 which has 4.3 billion tokens; the combination Gigaword5 + Wikipedia2014, which has 6 billion tokens; and on 42 billion tokens of web data, from Common Crawl

[To demonstrate the scalability of the model, we also trained it on a much larger sixth corpus, containing 840 billion tokens of web data, but in this case we did not lowercase the vocabulary, so the results are not directly comparable.]""",,https://nlp.stanford.edu/projects/glove/,GloVe: Global Vectors for Word Representation,30643.0,"J Pennington, R Socher, CD Manning",,Academia,United States of America,Highly cited,,,,"Section 4.6 in original paper (https://nlp.stanford.edu/pubs/glove.pdf)

85 min to populate coocurrence matrix
+ 25 training iterations

Each iteration takes 14 minutes on 32 cores ",,,,,,,,,,,,,,,,,
OverFeat,New York University (NYU),2013-12-21,Vision,Image classification,144000000.0,144M (Table 4),,,ImageNet-1k,,"""We then extract 5 random crops (and their horizontal flips) of size 221x221 pixels and present these to the network in mini-batches of
size 128.""",Confident,https://arxiv.org/abs/1312.6229,"OverFeat: Integrated Recognition, Localization and Detection using Convolutional Networks",5148.0,"Pierre Sermanet, David Eigen, Xiang Zhang, Michael Mathieu, Rob Fergus, Yann LeCun","We present an integrated framework for using Convolutional Networks for classification, localization and detection. We show how a multiscale and sliding window approach can be efficiently implemented within a ConvNet. We also introduce a novel deep learning approach to localization by learning to predict object boundaries. Bounding boxes are then accumulated rather than suppressed in order to increase detection confidence. We show that different tasks can be learned simultaneously using a single shared network. This integrated framework is the winner of the localization task of the ImageNet Large Scale Visual Recognition Challenge 2013 (ILSVRC2013) and obtained very competitive results for the detection and classifications tasks. In post-competition work, we establish a new state of the art for the detection task. Finally, we release a feature extractor from our best model called OverFeat.",Academia,United States of America,Highly cited,,80.0,,,NVIDIA Tesla K20X,,,,,,,,,,,,,,,,
Image generation,University of Amsterdam,2013-12-20,Vision,Image clustering,784000.0,"""We trained generative models (decoders) and corresponding encoders
(a.k.a. recognition models) having 500 hidden units in case of MNIST""

784*500*2=784000 (Ignoring latent dimension)",475200000000000.0,"From https://openai.com/blog/ai-and-compute/ Appendix

""less than 0.0000055 pfs-days""
(86400*10^15*0.0000055)

Figure 2 shows evaluations with 10^8 training samples

6*784000*100000000=470400000000000",MNIST,60000.0,"""We trained generative models of images from the MNIST and Frey Face datasets""

MNIST has 60k images
https://en.wikipedia.org/wiki/MNIST_database

Frey Face has 2k images
https://cs.nyu.edu/~roweis/data.html

",Confident,https://arxiv.org/abs/1312.6114,Auto-Encoding Variational Bayes,21760.0,"DP Kingma, M Welling",,Academia,Netherlands,Highly cited,,,,,,,,,,,,,,,,,,,,,
DOT(S)-RNN,"Aalto University,University of Montreal / Université de Montréal",2013-12-20,Language,Language modeling,6160000.0,,,,,,,,https://arxiv.org/abs/1312.6026,How to Construct Deep Recurrent Neural Networks,1255.0,"Razvan Pascanu, Caglar Gulcehre, Kyunghyun Cho, Yoshua Bengio",,"Academia,Academia","Finland,Canada",Highly cited,,,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
DQN,DeepMind,2013-12-19,Games,Atari,836096.0,"""The input to the neural network consists is an 84 × 84 × 4 image produced by φ. The first hidden layer convolves 16 8 × 8 filters with stride 4 with the input image and applies a rectifier nonlinearity [10, 18]. The second hidden layer convolves 32 4 × 4 filters with stride 2, again followed by a rectifier nonlinearity. The final hidden layer is fully-connected and consists of 256 rectifier units. The output layer is a fully connected linear layer with a single output for each valid action. The number of valid actions varied between 4 and 18 on the games we considered.""

Parameter: 4*16*8*8+16*32*4*4+10*10*32*256+18*256=836096",2846883840000000.0,"Network is 84x84x4 input, 16, 8x8, stride 4, 32 4x4 stride 2, 256 fully connected
First layer: 20*20*4*16*8*8 = 1638400
Second layer: 9*9*16*32*4*4 = 663552
Third layer: 9*9*32*256 = 663552
Total ~ 2965504
2965504 * 5M updates * 32 batch size * 2 multiply-add * 3 backward pass
= 2965504*50000*100*32*6 = 2846883840000000

",,,,Confident,https://arxiv.org/abs/1312.5602,Playing Atari with Deep Reinforcement Learning,11277.0,"V Mnih, K Kavukcuoglu, D Silver, A Graves",,Industry,United Kingdom of Great Britain and Northern Ireland,Highly cited,,,,,,,,,,,,,,,,,,,,,
Network in Network,National University of Singapore,2013-12-16,Vision,Image classification,,,,,,,,Unknown,https://arxiv.org/abs/1312.4400,Network In Network,6052.0,"M Lin, Q Chen, S Yan",,Academia,Singapore,Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
RNN for 1B words,Google,2013-12-11,Language,Language modeling,20000000000.0,20B from Table 1,,"240 hours on 24 CPUs from Table 1. CPU model is not given, but there is mention of using SIMD instructions. 1 SIMD operation is around 4 FLOP. CPU can have around 3e9 operations per second. so around 12e9*24 * 240*3600 = 2.4e17 operations. This estimation doesn't include use of multiple threads. Including use of threads we would probably have around 10 times more operations  so around 2.4e18 FLOPs. This estimation is speculative.",One Billion Word benchmark,1000000000.0,"from abstract: 'With almost one billion words of training data, '",Speculative,https://arxiv.org/abs/1312.3005,One Billion Word Benchmark for Measuring Progress in Statistical Language Modeling,1205.0,"Ciprian Chelba, Tomas Mikolov, Mike Schuster, Qi Ge, Thorsten Brants, Phillipp Koehn, Tony Robinson","We propose a new benchmark corpus to be used for measuring progress in statistical language modeling. With almost one billion words of training data, we hope this benchmark will be useful to quickly evaluate novel language modeling techniques, and to compare their contribution when combined with other advanced techniques. We show performance of several well-known types of language models, with the best results achieved with a recurrent neural network based language model. The baseline unpruned Kneser-Ney 5-gram model achieves perplexity 67.6; a combination of techniques leads to 35% reduction in perplexity, or 10% reduction in cross-entropy (bits), over that baseline.
The benchmark is available as a this http URL project; besides the scripts needed to rebuild the training/held-out data, it also makes available log-probability values for each word in each of ten held-out data sets, for each of the baseline n-gram models. ",Industry,United States of America,"Highly cited,SOTA improvement","from abstract: 'We show performance of several well-known types of language models, with the best results achieved with a recurrent neural network based language model. The baseline unpruned Kneser-Ney 5-gram model achieves perplexity 67.6; a combination of techniques leads to 35% reduction in perplexity, or 10% reduction in cross-entropy (bits), over that baseline. '",,240.0,"from Table 1,240 hours on 24 CPUs",,24.0,,,,,,,,,,,,,,,
DBLSTM,University of Toronto,2013-12-08,Speech,Speech recognition,29900000.0,"""The DBLSTM network had five bidirectional hidden levels, with 500 LSTM cells in each of the forward and backward
layers, and a size 3385 softmax output layer, giving a total of
29.9M weights.""",,,,,,,https://ieeexplore.ieee.org/document/6707742,Hybrid speech recognition with Deep Bidirectional LSTM,1597.0,"A Graves, N Jaitly, A Mohamed",,Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,,
TransE,"Universite de Technologie de Compiègne – CNRS,Google",2013-12-05,Language,Entity embedding,942000000.0,"Based on the TransE architecture, the authors give a formula for how the model size scales with the dimensionality of the dataset. The model scale is proportional to: k*(n_e+n_r) where k is the embeddings dimension, n_e is the number of entities, and n_r is the number of relationships.

They studied using the TransE model for two datasets: FB15k and FB1M. The FB15k model has 810000 parameters.

FB15k has 14951 entities and 1345 relationships. FB1M has 1000000 entities and 23382 relationships. Therefore, the FB1M model will be bigger than the FB15k model by a factor of (23382e6)/(14951*1345) => N = 8.1e5 * (23382e6)/(14951*1345) = 942e6.",1.340928e+18,"8 GPUs (they don't specify which, so I used the average for FP32 for 2017 from the write-up table)
8 hours 
0.33 util rate",,17000000.0,"""it can be successfully trained on a large scale data set with 1M
entities, 25k relationships and more than 17M training samples""",Speculative,https://papers.nips.cc/paper/2013/hash/1cecc7a77928ca8133fa24680a88d2f9-Abstract.html,Translating Embeddings for Modeling Multi- relational Data,7039.0,"Antoine Bordes, Nicolas Usunier, Alberto Garcia- Duran, Jason Weston, and Oksana Yakhnenko",,"Academia,Industry","France,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,True
DeViSE,Google,2013-12-05,Vision,Semantic embedding,,,,,,5400000000.0,"""We trained a skip-gram text model on a corpus of 5.7 million documents (5.4 billion words) ""
Additionally, an image model component is trained on ImageNet (1.2M images)",Confident,https://www.semanticscholar.org/paper/DeViSE%3A-A-Deep-Visual-Semantic-Embedding-Model-Frome-Corrado/4aa4069693bee00d1b0759ca3df35e59284e9845,DeViSE: A Deep Visual-Semantic Embedding Model,,"Andrea Frome, G. Corrado, Jonathon Shlens, Samy Bengio, J. Dean, Marc'Aurelio Ranzato, Tomas Mikolov","Modern visual recognition systems are often limited in their ability to scale to large numbers of object categories. This limitation is in part due to the increasing difficulty of acquiring sufficient training data in the form of labeled images as the number of object categories grows. One remedy is to leverage data from other sources - such as text data - both to train visual models and to constrain their predictions. In this paper we present a new deep visual-semantic embedding model trained to identify visual objects using both labeled image data as well as semantic information gleaned from unannotated text. We demonstrate that this model matches state-of-the-art performance on the 1000-class ImageNet object recognition challenge while making more semantically reasonable errors, and also show that the semantic information can be exploited to make predictions about tens of thousands of image labels not observed during training. Semantic knowledge improves such zero-shot predictions achieving hit rates of up to 18% across thousands of novel labels never seen by the visual model.",Industry,United States of America,"Highly cited,SOTA improvement",,,,,,,,,,,,,,,,,,,,,
TensorReasoner,Stanford University,2013-12-01,Language,Language modeling,,,,,,,,Unknown,https://papers.nips.cc/paper/2013/hash/b337e84de8752b27eda3a12363109e80-Abstract.html,Reasoning With Neural Tensor Networks for Knowledge Base Completion,1923.0,"R Socher, D Chen, CD Manning, A Ng",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Visualizing CNNs,New York University (NYU),2013-11-12,Vision,Image classification,,,5.32e+17,"1 GPU * 12 days * 1.54 TFLOPS/GTX 580 * 0.33 utilization 
= 532 PF = 0.0062 pfs-days

Source: https://openai.com/blog/ai-and-compute

""We stopped training after 70 epochs,
which took around 12 days on a single GTX580 GPU""",,,,Confident,https://arxiv.org/abs/1311.2901,Visualizing and Understanding Convolutional Networks,15232.0,"MD Zeiler, R Fergus",,Academia,United States of America,Highly cited,,,,,NVIDIA GeForce GTX 580,,,,,,,,,,,,,,,FP32,True
R-CNN (T-net),University of California (UC) Berkeley,2013-11-11,Vision,Object detection,69003872.0,"Computed from architecture description in Caffee

https://nbviewer.jupyter.org/github/BVLC/caffe/blob/master/examples/detection.ipynb",,,,,,,https://arxiv.org/abs/1311.2524,Rich feature hierarchies for accurate object detection and semantic segmentation,24626.0,"Ross Girshick, Jeff Donahue, Trevor Darrell, Jitendra Malik",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
Word2Vec (small),Google,2013-10-16,Language,Semantic embedding,207600000.0,"""We discarded from the vocabulary all words that occurred less than 5 times in the training data, which resulted in a vocabulary of size 692K [...] Starting with the same news data as in the previous experiments, we first constructed the phrase based training corpus and then we trained several Skip-gram models using different hyperparameters. As before, we used vector dimensionality 300 and context size 5.""",,,,692000.0,"""For training the Skip-gram models, we have used a large dataset consisting of various news articles (an internal Google dataset with one billion words). We discarded from the vocabulary all words that occurred less than 5 times in the training data, which resulted in a vocabulary of size 692K""",,https://arxiv.org/abs/1310.4546,Distributed Representations of Words and Phrases and their Compositionality,32374.0,"T Mikolov, I Sutskever, K Chen, GS Corrado",,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
RNTN,Stanford University,2013-10-01,Language,Sentiment classification,,,1.422e+16,"""The RNTN would usually achieve its best performance on the dev set after training for 3 - 5 hours.""
",,155063.0,"""The sentences in the treebank were split into a train (8544), dev (1101) and test splits (2210)""
Training data: 215154*(8544/11855)=155063
",Likely,https://www.semanticscholar.org/paper/Recursive-Deep-Models-for-Semantic-Compositionality-Socher-Perelygin/687bac2d3320083eb4530bf18bb8f8f721477600,Recursive Deep Models for Semantic Compositionality Over a Sentiment Treebank,,"R. Socher, Alex Perelygin, Jean Wu, Jason Chuang, Christopher D. Manning, A. Ng, Christopher Potts","Semantic word spaces have been very useful but cannot express the meaning of longer phrases in a principled way. Further progress towards understanding compositionality in tasks such as sentiment detection requires richer supervised training and evaluation resources and more powerful models of composition. To remedy this, we introduce a Sentiment Treebank. It includes fine grained sentiment labels for 215,154 phrases in the parse trees of 11,855 sentences and presents new challenges for sentiment compositionality. To address them, we introduce the Recursive Neural Tensor Network. When trained on the new treebank, this model outperforms all previous methods on several metrics. It pushes the state of the art in single sentence positive/negative classification from 80% up to 85.4%. The accuracy of predicting fine-grained sentiment labels for all phrases reaches 80.7%, an improvement of 9.7% over bag of features baselines. Lastly, it is the only model that can accurately capture the effects of negation and its scope at various tree levels for both positive and negative phrases.",Academia,United States of America,Highly cited,,,5.0,The RNTN would usually achieve its best performance on the dev set after training for 3 - 5 hours.,,,,,,,,,,,,Unreleased,Unreleased,,,,
RCTM,University of Oxford,2013-10-01,Language,Translation,,,9331200000000000.0,"""The training of an RCTM takes about 15 hours on 3 multicore CPUs""
Given the publication year, a rough estimate for the CPU performance is 16 FP32 per cycle, 4 cores, clock speed 4GHz, utilization of 0.3.
15*60*60*3*4*12*4000000000*0.3=9331200000000000=9.33e15",,4100000.0,"""The English sentences contain about 4.1M words""",Likely,https://www.semanticscholar.org/paper/Recurrent-Continuous-Translation-Models-Kalchbrenner-Blunsom/944a1cfd79dbfb6fef460360a0765ba790f4027a,Recurrent Continuous Translation Models,,"Nal Kalchbrenner, Phil Blunsom","We introduce a class of probabilistic continuous translation models called Recurrent Continuous Translation Models that are purely based on continuous representations for words, phrases and sentences and do not rely on alignments or phrasal translation units. The models have a generation and a conditioning aspect. The generation of the translation is modelled with a target Recurrent Language Model, whereas the conditioning on the source sentence is modelled with a Convolutional Sentence Model. Through various experiments, we show first that our models obtain a perplexity with respect to gold translations that is > 43% lower than that of stateof-the-art alignment-based translation models. Secondly, we show that they are remarkably sensitive to the word order, syntax, and meaning of the source sentence despite lacking alignments. Finally we show that they match a state-of-the-art system when rescoring n-best lists of translations.",Academia,United Kingdom of Great Britain and Northern Ireland,Highly cited,,,15.0,The training of an RCTM takes about 15 hours on 3 multicore CPUs.,,3.0,,,,,,,,,,,,,,,
Mitosis,IDSIA,2013-09-22,"Vision,Medicine",Object detection,37230.0,Sum numbers of weights in Table 1.b,1.37e+17,"""Training each network requires one day of computation with an optimized GPU implementation""

Assuming 1.58E+12 FLOP/second on FP32 (from the table in the Estimating compute post), we get

3600*24*1.58E+12 = 1.37E+17 FLOP",,1000000.0,"The dataset is built in two stages. First a classifier is trained on small sample, and used to curate a more representative larger dataset.

The final dataset has 1M instances

""We build the actual training set, composed by 1 million instances, which includes
all mitosis pixels (6.6% of the training instances). The remaining 95.4% is sampled
from non-mitosis pixels by assigning to each pixel p a weight D(p).""",Likely,https://link.springer.com/chapter/10.1007/978-3-642-40763-5_51,Mitosis Detection in Breast Cancer Histology Images with Deep Neural Networks,1478.0,"Dan C. Cireşan, Alessandro Giusti, Luca M. Gambardella, Jürgen Schmidhuber",,Academia,Switzerland,Highly cited,ICPR 2012 mitosis detection competition winner,,24.0,"""Training each network requires one day of computation with an optimized GPU implementation""",,,,,,,,,,,,,,,,,True
RNN+weight noise+dynamic eval,University of Toronto,2013-08-04,Language,Language modeling,54000000.0,"""the word-level network had 10,000 inputs and outputs and around
54M weights""",4210000000000000.0,6 FLOP / parameter / token * 54000000 parameters * 929000 tokens * 14 epochs = 4.213944e+15 FLOP,Penn TreeBank (PTB),929000.0,14 epochs (Table 1),Confident,https://arxiv.org/abs/1308.0850,Generating Sequences With Recurrent Neural Networks,4734.0,Alex Graves,"This paper shows how Long Short-term Memory recurrent neural networks can be used to generate complex sequences with long-range structure, simply by predicting one data point at a time. The approach is demonstrated for text (where the data are discrete) and online handwriting (where the data are real-valued). It is then extended to handwriting synthesis by allowing the network to condition its predictions on a text sequence. The resulting system is able to generate highly realistic cursive handwriting in a wide variety of styles.",Academia,Canada,Highly cited,,14.0,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
Fisher Vector image classifier,"Universidad Nacional de Cordoba,Inteligent Systems Lab Amsterdam,University of Amsterdam,LEAR Team,INRIA,Xerox Research Centre Europe (XRCE)",2013-06-12,Vision,Image classification,,,90842400000000.0,"They use a Intel Xeon E5-2470 Processor for 2 hours. This can do 12,617 MOps/Sec (average test results, assuming they achieved a similar utilization)
https://www.cpubenchmark.net/cpu.php?cpu=Intel+Xeon+E5-2470+%40+2.30GHz&id=2003

12617000000*2*60*60=90842400000000",ImageNet,,,Confident,https://hal.inria.fr/hal-00830491v2/document,Image Classification with the Fisher Vector: Theory and Practice,1707.0,"orge Sanchez, Florent Perronnin, Thomas Mensink, Jakob Verbeek",,"Academia,Academia,Academia,Academia,Industry","Argentina,Netherlands,Netherlands,France,France,France",Highly cited,,,2.0,,,,,,,,,,,,,,,,,FP32,
SemVec,Microsoft Research,2013-06-09,Language,Language Structure Modeling,,,,,,,,Unknown,https://www.aclweb.org/anthology/N13-1090/,Linguistic Regularities in Continuous Space Word Representations,3625.0,"T Mikolov, W Yih, G Zweig",,Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational",Highly cited,,,,,,,,,,,,,,,,,,,,,
ReLU-Speech,"Google,University of Toronto,New York University (NYU)",2013-05-26,Speech,Speech recognition,101706240.0,"""The overall input dimensionality is 1040,""
""All layers of our networks have 2560 hidden units ""
""used to generate 7969 context-dependent tied acoustic states""
Largest model: 12 hidden layers (Fig 4)
Parameters: 1040*2560+12*2560*2560+2560*7969=101706240
",1.2773376e+17,"""across 4 machines using up to 4 CPUs each""
CPU model not specified, I assumed a Sandy Bridge with 16 FLOP/cycle and 3.3GhZ based on the publication year (4*16*3300000000=211200000000 FLOP/s per machine)
Compute: 4*211200000000*168*60*60*0.3 = 1.53e17

Alternatively, the training set is ""several hundred hours of speech"", with inputs consisting of 26 frames, each frame is 10ms apart.
If we assume 400h of training data, 400h/10ms/26= 5,538,461 inputs
6 * 101706240 * 5,538,461 = 3.38e15 FLOPs per epoch. Number of epochs unstated.",,,,Likely,https://www.semanticscholar.org/paper/On-rectified-linear-units-for-speech-processing-Zeiler-Ranzato/64da1980714cfc130632c5b92b9d98c2f6763de6,On rectified linear units for speech processing,,"Matthew D. Zeiler, Marc'Aurelio Ranzato, R. Monga, Mark Z. Mao, K. Yang, Quoc V. Le, Patrick Nguyen, A. Senior, Vincent Vanhoucke, J. Dean, Geoffrey E. Hinton","Deep neural networks have recently become the gold standard for acoustic modeling in speech recognition systems. The key computational unit of a deep network is a linear projection followed by a point-wise non-linearity, which is typically a logistic function. In this work, we show that we can improve generalization and make training of deep networks faster and simpler by substituting the logistic units with rectified linear units. These units are linear when their input is positive and zero otherwise. In a supervised setting, we can successfully train very deep nets from random initialization on a large vocabulary speech recognition task achieving lower word error rates than using a logistic network with the same topology. Similarly in an unsupervised setting, we show how we can learn sparse features that can be useful for discriminative tasks. All our experiments are executed in a distributed environment using several hundred machines and several hundred hours of speech data.","Industry,Academia,Academia","United States of America,Canada,United States of America","Training cost,SOTA improvement",,,168.0,"""The results we report are obtained by training for one week.""",,,,,,,,,,,,,,,,,True
Multilingual DNN,Google,2013-05-26,Speech,Speech recognition,206899200.0,"""The input for the DNN is eleven contiguous frames of 40-dimensional log-filterbank features. The DNN consists of four hidden layers each with 2560 nodes""
Network structure: 3 multilingual shared layers, 1 language specific hidden layer + output layer (Figure 2)
Language specific layer output sizes: 1600, 3300, 2900, 5700, 3500, 5500, 6200, 4700, 5100, 4900, 3700 (Table 1)
Shared: 11*40*2560+2560*2560+2560*2560=14233600
Language heads: 11*2560*2560+2560*1600+2560*3300+2560*2900+2560*5700+2560*3500+2560*5500+2560*6200+2560*4700+2560*5100+2560*4900+2560*3700=192665600
Total: 14233600+192665600=206899200=2e8",,Could be estimated if we knew framerate of input filterbanks.,,77580000.0,"Trained on 80+100+220+270+920+1140+1450+1460+1490+1490=8620h of speech data (Table 1)
Conversion to words using an estimate of 150 wpm: 8620*60*150=77580000 words
",Confident,https://www.semanticscholar.org/paper/Multilingual-acoustic-models-using-distributed-deep-Heigold-Vanhoucke/a41b826d23957d6ad4e9e794d20a583a9b567c5d,Multilingual acoustic models using distributed deep neural networks,,"G. Heigold, Vincent Vanhoucke, A. Senior, Patrick Nguyen, Marc'Aurelio Ranzato, M. Devin, J. Dean","Today's speech recognition technology is mature enough to be useful for many practical applications. In this context, it is of paramount importance to train accurate acoustic models for many languages within given resource constraints such as data, processing power, and time. Multilingual training has the potential to solve the data issue and close the performance gap between resource-rich and resource-scarce languages. Neural networks lend themselves naturally to parameter sharing across languages, and distributed implementations have made it feasible to train large networks. In this paper, we present experimental results for cross- and multi-lingual network training of eleven Romance languages on 10k hours of data in total. The average relative gains over the monolingual baselines are 4%/2% (data-scarce/data-rich languages) for cross- and 7%/2% for multi-lingual training. However, the additional gain from jointly training the languages on all data comes at an increased training time of roughly four weeks, compared to two weeks (monolingual) and one week (crosslingual).",Industry,United States of America,"SOTA improvement,Training cost",,,672.0,"""increased training time of roughly four weeks""
4*7*24=672 hours of training",,,,,,,,,,,,,,,,FP32,
Selective Search,"University of Trento,University of Amsterdam",2013-04-02,Vision,"Object detection,Image segmentation",,,,,,,,Unknown,https://link.springer.com/article/10.1007/s11263-013-0620-5,Selective search for object recognition,5642.0,"JRR Uijlings, KEA Van De Sande, T Gevers",,"Academia,Academia","Italy,Netherlands",Highly cited,,,,,,,,,,,,,,,,,,,,,
PreTrans-3L-250H,University of Toronto,2013-03-22,Speech,Speech recognition,43000000.0,Table 1,,,,,,,https://arxiv.org/abs/1303.5778,Speech Recognition with Deep Recurrent Neural Networks,8259.0,"Alex Graves, Abdel-rahman Mohamed, Geoffrey Hinton",,Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,,
Maxout Networks,University of Montreal / Université de Montréal,2013-02-18,Vision,Image classification,,,,,,,,Unknown,https://arxiv.org/abs/1302.4389,Maxout Networks ,2576.0," Ian J. Goodfellow, David Warde-Farley, Mehdi Mirza, Aaron Courville, Yoshua Bengio",,Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,,
Textual Imager,Stanford University,2013-01-16,Vision,Object recognition,,,,,,,,Unknown,https://arxiv.org/abs/1301.3666,Zero-Shot Learning Through Cross-Modal Transfer,1422.0,"R Socher, M Ganjoo, H Sridhar, O Bastani",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
DistBelief NNLM,Google,2013-01-16,Language,Semantic embedding,,,2.612736e+18,"Trained for 14 days on 180 CPU cores (Table 6)
Roughly estimating the performance of CPUs in a HPC around 2013: 16 FP32 operations per cycle, 2.5GHz, 0.3 utilization
Time: 14*24*60*60=1209600s
FLOPs: 0.3*180*16*2500000000=2160000000000
Training compute: 1209600s * 2160000000000 = 2612736000000000000 = 2.61e18
https://www.wolframalpha.com/input?i=16+FLOP+*+2.5+GHz+*+180+*+14+days+*+0.3",,6000000000.0,Largest system is trained on 6B words (Table 6),Likely,https://arxiv.org/abs/1301.3781,Efficient Estimation of Word Representations in Vector Space,41000.0,"Tomas Mikolov, Kai Chen, G. Corrado, J. Dean","We propose two novel model architectures for computing continuous vector representations of words from very large data sets. The quality of these representations is measured in a word similarity task, and the results are compared to the previously best performing techniques based on different types of neural networks. We observe large improvements in accuracy at much lower computational cost, i.e. it takes less than a day to learn high quality word vectors from a 1.6 billion words data set. Furthermore, we show that these vectors provide state-of-the-art performance on our test set for measuring syntactic and semantic word similarities.",Industry,United States of America,"Highly cited,SOTA improvement",,,336.0,Trained for 14 days (Table 6),,180.0,,,,,,,,,,,,,,,True
DistBelief Vision,Google,2012-12-03,Vision,Image classification,1700000000.0,"""we used Downpour SGD to train the 1.7 billion parameter image model""",,,ImageNet,16000000.0,For visual object recognition we trained a larger neural network with locally-connected receptive fields on the ImageNet data set of 16 million images,Likely,https://www.semanticscholar.org/paper/Large-Scale-Distributed-Deep-Networks-Dean-Corrado/3127190433230b3dc1abd0680bb58dced4bcd90e,Large Scale Distributed Deep Networks,,"J. Dean, G. Corrado, R. Monga, Kai Chen, M. Devin, Quoc V. Le, Mark Z. Mao, Marc'Aurelio Ranzato, A. Senior, P. Tucker, Ke Yang, A. Ng","Recent work in unsupervised feature learning and deep learning has shown that being able to train large models can dramatically improve performance. In this paper, we consider the problem of training a deep network with billions of parameters using tens of thousands of CPU cores. We have developed a software framework called DistBelief that can utilize computing clusters with thousands of machines to train large models. Within this framework, we have developed two algorithms for large-scale distributed training: (i) Downpour SGD, an asynchronous stochastic gradient descent procedure supporting a large number of model replicas, and (ii) Sandblaster, a framework that supports a variety of distributed batch optimization procedures, including a distributed implementation of L-BFGS. Downpour SGD and Sandblaster L-BFGS both increase the scale and speed of deep network training. We have successfully used our system to train a deep network 30x larger than previously reported in the literature, and achieves state-of-the-art performance on ImageNet, a visual object recognition task with 16 million images and 21k categories. We show that these same techniques dramatically accelerate the training of a more modestly- sized deep network for a commercial speech recognition service. Although we focus on and report performance of these methods as applied to training large neural networks, the underlying algorithms are applicable to any gradient-based machine learning algorithm.",Industry,United States of America,"SOTA improvement,Highly cited",,,,,,,,,,,,,,,,,,,,,
DistBelief Speech,Google,2012-12-03,Speech,Speech recognition,47185920.0,"""We used a deep network with five layers: four hidden layer with sigmoidal activations and 2560 nodes each, and a softmax output layer with 8192 nodes.""
""The network was fully-connected layer-to-layer, for a total of approximately 42 million model parameters.""
2560*2560*4+2560*8192=47185920",3.114e+17,"https://www.wolframalpha.com/input?i=6+FLOP+*+47185920+*+1.1+billion
Number of epochs unknown but most likely 1 and probably under 30.
We could narrow down the uncertainty further if we knew something about the hardware.",,1100000000.0,"""We trained on a data set of 1.1 billion weakly labeled examples""",Speculative,https://www.semanticscholar.org/paper/Large-Scale-Distributed-Deep-Networks-Dean-Corrado/3127190433230b3dc1abd0680bb58dced4bcd90e,Large Scale Distributed Deep Networks,,"J. Dean, G. Corrado, R. Monga, Kai Chen, M. Devin, Quoc V. Le, Mark Z. Mao, Marc'Aurelio Ranzato, A. Senior, P. Tucker, Ke Yang, A. Ng","Recent work in unsupervised feature learning and deep learning has shown that being able to train large models can dramatically improve performance. In this paper, we consider the problem of training a deep network with billions of parameters using tens of thousands of CPU cores. We have developed a software framework called DistBelief that can utilize computing clusters with thousands of machines to train large models. Within this framework, we have developed two algorithms for large-scale distributed training: (i) Downpour SGD, an asynchronous stochastic gradient descent procedure supporting a large number of model replicas, and (ii) Sandblaster, a framework that supports a variety of distributed batch optimization procedures, including a distributed implementation of L-BFGS. Downpour SGD and Sandblaster L-BFGS both increase the scale and speed of deep network training. We have successfully used our system to train a deep network 30x larger than previously reported in the literature, and achieves state-of-the-art performance on ImageNet, a visual object recognition task with 16 million images and 21k categories. We show that these same techniques dramatically accelerate the training of a more modestly- sized deep network for a commercial speech recognition service. Although we focus on and report performance of these methods as applied to training large neural networks, the underlying algorithms are applicable to any gradient-based machine learning algorithm.",Industry,United States of America,"Highly cited,SOTA improvement",,,120.0,Figure 4,,,,,,,,,,,,,,,,,True
Bayesian automated hyperparameter tuning,"University of Toronto,University of Sherbrooke,Harvard University",2012-12-02,Other,Mathematical simulation,,,,,,,,Unknown,https://arxiv.org/abs/1206.2944,Practical Bayesian optimization of machine learning algorithms,7308.0,"J Snoek, H Larochelle, RP Adams",,"Academia,Academia,Academia","Canada,Canada,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
RNN+LDA+KN5+cache,"Microsoft,Brno University of Technology",2012-12-01,Language,Language modeling,9000000.0,,,,Penn TreeBank (PTB),,,,https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/rnn_ctxt.pdf,Context dependent recurrent neural network language model,716.0,"Tomas Mikolov, Geoffrey Zweig",,"Industry,Academia","United States of America,Multinational,India,Belgium,Czechia",SOTA improvement,"""We report perplexity results on the Penn Treebank data, where we achieve a new state-of-the-art""",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
AlexNet,University of Toronto,2012-09-30,Vision,Image classification,60000000.0,"""Our neural network architecture has 60 million parameters.""",4.7e+17,"1.2M images * 90 epochs * 0.75 GFLOP * (2 add-multiply) * (3 backward pass) 
= 470 PF = 0.0054 pfs-days

Source: https://openai.com/blog/ai-and-compute/

Hardware method:
2 GTX 580 3GB GPUs for ""between five and six days"". Assuming 5.5 days and 32-bit training:
1.581 TFLOPS * 5.5 days * 2 = 1.5e18 FLOP
Comparing to the operation counting method, this implies around 31% MFU.

Authors of ""AI and Memory Wall"" (https://github.com/amirgholami/ai_and_memory_wall) estimated model's training compute as 460 PFLOP = 4.6*10^17 FLOP",ImageNet,1200000.0,"""ImageNet is a dataset of over 15 million labeled high-resolution images belonging to roughly 22,000 categories. The images were collected from the web and labeled by human labelers using Amazon’s Mechanical Turk crowd-sourcing tool. Starting in 2010, as part of the Pascal Visual Object Challenge, an annual competition called the ImageNet Large-Scale Visual Recognition Challenge (ILSVRC) has been held. ILSVRC uses a subset of ImageNet with roughly 1000 images in each of 1000 categories. In all, there are roughly 1.2 million training images, 50,000 validation images, and 150,000 testing images.""",Confident,https://proceedings.neurips.cc/paper/2012/hash/c399862d3b9d6b76c8436e924a68c45b-Abstract.html,ImageNet Classification with Deep Convolutional Neural Networks,113243.0,"Alex Krizhevsky, Ilya Sutskever, Geoffrey Hinton","We trained a large, deep convolutional neural network to classify the 1.3 million high-resolution images in the LSVRC-2010 ImageNet training set into the 1000 different classes. On the test data, we achieved top-1 and top-5 error rates of 39.7\% and 18.9\% which is considerably better than the previous state-of-the-art results. The neural network, which has 60 million parameters and 500,000 neurons, consists of five convolutional layers, some of which are followed by max-pooling layers, and two globally connected layers with a final 1000-way softmax. To make training faster, we used non-saturating neurons and a very efficient GPU implementation of convolutional nets. To reduce overfitting in the globally connected layers we employed a new regularization method that proved to be very effective.",Academia,Canada,"Highly cited,Historical significance",,,132.0,"""Our network takes between five and six days to train on two GTX 580 3GB GPUs.""",NVIDIA GeForce GTX 580,,0.313,,,,,,,,,,,,,FP32,True
LSTM LM,RWTH Aachen University,2012-09-09,Language,Language modeling,102720000.0,"Multiple models were trained, the largest on transcribed French podcast data.
""We trained an LSTM LM using 300 hidden nodes and 27 M running words of indomain training data""
""Corpus sizes in number of running words; the vocabulary size of the Treebank corpus is 10 K, for Quaero French it is 170 K""
Embedding and unembedding: 2*170000*300=102000000
LSTM: 4*600*300=720000
Total: 102000000+720000=102720000=1.03e8
(Assuming the embedding dimension is the same as the LSTM layer)",1.66e+16,"FLOP per input for LSTM layer is 4*2*(M+N)*M, for N inputs and M outputs.

Embedding FLOPs: 2 * 170000 * 300 = 102,000,000
LSTM FLOPs: 4 * 2 * (300 + 300) * 300 = 1,440,000
Unembedding FLOPs: 2 * 170000 * 300 = 102,000,000
Total: 205,440,000 FLOPs per word per forward pass
For 27M training input words and including backward passes: 27M * 3 * 205,440,000 = 1.66e16

However, it sounds like they're doing something with a secondary acoustic model, so this may be an underestimate.",,27000000.0,"""We trained an LSTM LM using 300 hidden nodes and 27 M running words of indomain training data.""",Speculative,https://www.semanticscholar.org/paper/LSTM-Neural-Networks-for-Language-Modeling-Sundermeyer-Schl%C3%BCter/f9a1b3850dfd837793743565a8af95973d395a4e,LSTM Neural Networks for Language Modeling,,"M. Sundermeyer, R. Schlüter, H. Ney","Neural networks have become increasingly popular for the task of language modeling. Whereas feed-forward networks only exploit a fixed context length to predict the next word of a sequence, conceptually, standard recurrent neural networks can take into account all of the predecessor words. On the other hand, it is well known that recurrent networks are difficult to train and therefore are unlikely to show the full potential of recurrent models. These problems are addressed by a the Long Short-Term Memory neural network architecture. In this work, we analyze this type of network on an English and a large French language modeling task. Experiments show improvements of about 8 % relative in perplexity over standard recurrent neural network LMs. In addition, we gain considerable improvements in WER on top of a state-of-the-art speech recognition system.",Academia,Germany,Highly cited,,,,,,,,,,,,,,,,,,,,,
LSTM-300units,RWTH Aachen University,2012-09-01,Language,Language modeling,12000000.0,,,,,,,,https://www.isca-archive.org/interspeech_2012/sundermeyer12_interspeech.pdf,LSTM Neural Networks for Language Modeling,2503.0,"Martin Sundermeyer, Ralf Schlüter, Hermann Ney",,Academia,Germany,Highly cited,,,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
Context-dependent RNN,"Microsoft Research,Brno University of Technology",2012-07-27,Language,Language modeling,,,,,,,,Unknown,https://www.microsoft.com/en-us/research/wp-content/uploads/2012/07/rnn_ctxt_TR.sav_.pdf,Context Dependent Recurrent Neural Network Language Model,707.0,"Tomas Mikolov, Geoffrey Zweig","Recurrent neural network language models (RNNLMs) have recently demonstrated state-of-the-art performance across a variety of tasks. In this paper, we improve their performance by providing a contextual real-valued input vector in association with each word. This vector is used to convey contextual information about the sentence being modeled. By performing Latent Dirichlet Allocation using a block of preceding text, we achieve a topic-conditioned RNNLM. This approach has the key advantage of avoiding the data fragmentation associated with building multiple topic models on different data subsets. We report perplexity results on the Penn Treebank data, where we achieve a new state-of-the-art. We further apply the model to the Wall Street Journal speech recognition task, where we observe 
improvements in word-error-rate.","Industry,Academia","United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,Czechia",SOTA improvement,New SOTA perplexity on PTB,,,,,,,,,,,,,,,,,,,,
Unsupervised High-level Feature Learner,Google,2012-07-12,Vision,Image classification,1000000000.0,"""To answer this, we train a 9-layered locally connected sparse autoencoder with pooling and local contrast normalization on a large dataset of images (the model has 1 billion connections, the dataset has 10 million 200x200 pixel images downloaded from the Internet)""",6e+17,"Assuming 1 epoch, 10 million images and 1 billion parameters, 6*N*D = 6*10^17 FLOP",,10000000.0,10 million 200x200 images extracted from Youtube videos,Likely,https://arxiv.org/abs/1112.6209,Building High-level Features Using Large Scale Unsupervised Learning,2909.0,"Quoc V. Le, Marc'Aurelio Ranzato, Rajat Monga, Matthieu Devin, Kai Chen, Greg S. Corrado, Jeff Dean, Andrew Y. Ng","We consider the problem of building high-level, class-specific feature detectors from only unlabeled data. For example, is it possible to learn a face detector using only unlabeled images using unlabeled images? To answer this, we train a 9-layered locally connected sparse autoencoder with pooling and local contrast normalization on a large dataset of images (the model has 1 billion connections, the dataset has 10 million 200×200 pixel images downloaded from the Internet). We train this network using model parallelism and asynchronous SGD on a cluster with 1,000 machines (16,000 cores) for three days. Contrary to what appears to be a widely-held intuition, our experimental results reveal that it is possible to train a face detector without having to label images as containing a face or not. Control experiments show that this feature detector is robust not only to translation but also to scaling and out-of-plane rotation. We also find that the same network is sensitive to other high-level concepts such as cat faces and human bodies. Starting with these learned features, we trained our network to obtain 15.8% accuracy in recognizing 20,000 object categories from ImageNet, a leap of 70% relative improvement over the previous state-of-the-art.",Industry,United States of America,"Highly cited,SOTA improvement","""we trained our network to obtain 15.8% accuracy in recognizing 20,000 object categories from ImageNet, a leap of 70% relative improvement over the previous state-of-the-art""",,72.0,"""We train this network using model parallelism and asynchronous SGD on a cluster with 1,000 machines (16,000 cores) for three days. """,,,,,Hardware not reported,,,,,,,,,,,,True
MV-RNN,Stanford University,2012-07-12,Language,Text classification,3510255.0,"""We represent a word as both a continuous vector and a matrix of parameters. We initialize all word vectors x ∈ Rn with pre-trained 50-dimensional word vectors from the unsupervised model of Collobert and Weston (2008). [...] Every word is also associated with a matrix X.  [...] If the vectors have dimensionality n, then each word’s matrix has dimensionality X ∈ Rn×n.""

""We propose the following combination function which is input dependent:
p = fA,B(a, b) = f(Ba, Ab) = g(W x (Ba Ab)) ,(2)
where A, B are matrices for single words, the global W ∈ Rn×2n is a matrix that maps both transformed words back into the same n-dimensional space.""

""For computing nonterminal phrase matrices, we define the function
P = fM(A, B) = WMA, B, (3)
where WM ∈ Rn×2n, so P ∈ Rn×n just like each input matrix.""

""If every word is represented by an n-dimensional vector and additionally by an n × n matrix, the dimensionality of the whole model may become too large with commonly used vector sizes of n = 100. In order to reduce the number of parameters, we represent word matrices by the following low-rank plus diagonal approximation: A = UV + diag(a), (5)
where U ∈ Rn×r, V ∈ Rr×n, a ∈ Rnand we set the rank for all experiments to r = 3.""

""We train these representations by adding on top of each parent node a simple softmax classifier
to predict a class distribution over, e.g., sentiment or relationship classes: d(p) = softmax(Wlabelp). If there are K labels, then d ∈ RK is a K-dimensional multinomial distribution""

In total there are V*(n+n*r + r*n) + n*2n + n*2n + (n+1)*k parameters, where n is the vector dimension, r is the low-rank decomposition dimension, V is the vocabulary size and k is the number of classes.

In the experiments we have that n=50, r=3, k=? and V=?. I'm guesstimating k=5 and V=10k.",,,,,,,https://www.aclweb.org/anthology/D12-1110/,Semantic Compositionality through Recursive Matrix-Vector Spaces,1459.0,"R. Socher, B. Huval, C. D. Manning, and A. Y. Ng",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Dropout (TIMIT),University of Toronto,2012-06-03,Speech,Speech recognition,48840185.0,The input to the net is 21 adjacent frames with an advance of 10ms per frame. The neural net has 4 fully-connected hidden layers of 4000 units per layer and 185 “softmax” output units that are subsequently merged into the 39 distinct classes used for the benchmark.,,,TIMIT,41620.0,"4162 utterances, guesstimated avg 10 words per utterance",,https://arxiv.org/abs/1207.0580,Improving neural networks by preventing co-adaptation of feature detectors,7445.0,"GE Hinton, N Srivastava, A Krizhevsky","Deep neural nets with a large number of parameters are very powerful machine learning systems. However, overfitting is a serious problem in such networks. Large networks are also slow to use, making it difficult to deal with overfitting by combining the predictions of many different large neural nets at test time. Dropout is a technique for addressing this problem. The key idea is to randomly drop units (along with their connections) from the neural network during training. This prevents units from co-adapting too much. During training, dropout samples from an exponential number of different thinned networks. At test time, it is easy to approximate the effect of averaging the predictions of all these thinned networks by simply using a single unthinned network that has smaller weights. This significantly reduces overfitting and gives major improvements over other regularization methods. We show that dropout improves the performance of neural networks on supervised learning tasks in vision, speech recognition, document classification and computational biology, obtaining state-of-the-art results on many benchmark data sets.",Academia,Canada,Highly cited,,,,,NVIDIA GeForce GTX 580,,,,,,,,,,,Unreleased,Open (non-commercial),Unreleased,http://www.cs.toronto.edu/~nitish/dropout see model files,,
Dropout (MNIST),University of Toronto,2012-06-03,Vision,Character recognition,5594010.0,"We show results for 4 nets (784-800-800-10, 784-1200-1200-10, 784-2000-2000-10, 784-1200-1200-1200-10)

784*2000+2000*2000+10*2000+6010=5594010",6039370800000000.0,"Num mul-add / forward pass
2 FLOPs / mult-add
3 total mult-add / fp mult-add
3000 epochs
60000 training samples",MNIST,60000.0,"The MNIST database contains 60,000 training images and 10,000 testing images (Wikipedia)",Confident,https://arxiv.org/abs/1207.0580,Improving neural networks by preventing co-adaptation of feature detectors,7445.0,"GE Hinton, N Srivastava, A Krizhevsky","Deep neural nets with a large number of parameters are very powerful machine learning systems. However, overfitting is a serious problem in such networks. Large networks are also slow to use, making it difficult to deal with overfitting by combining the predictions of many different large neural nets at test time. Dropout is a technique for addressing this problem. The key idea is to randomly drop units (along with their connections) from the neural network during training. This prevents units from co-adapting too much. During training, dropout samples from an exponential number of different thinned networks. At test time, it is easy to approximate the effect of averaging the predictions of all these thinned networks by simply using a single unthinned network that has smaller weights. This significantly reduces overfitting and gives major improvements over other regularization methods. We show that dropout improves the performance of neural networks on supervised learning tasks in vision, speech recognition, document classification and computational biology, obtaining state-of-the-art results on many benchmark data sets.",Academia,Canada,Highly cited,,,,,NVIDIA GeForce GTX 580,,,,,,,,,,,Unreleased,Open (non-commercial),Unreleased,http://www.cs.toronto.edu/~nitish/dropout see model files,,
Dropout (ImageNet),University of Toronto,2012-06-03,Vision,Image classification,,"""We achieved comparable performance of 48.6% error using a single neural network with five convolutional hidden layers interleaved with “max-pooling” layer followed by two globally
connected layers and a final 1000-way softmax layer""",2.731968e+17,"""a single NVIDIA GTX 580 GPU... Training on ImageNet takes
roughly four days with dropout and two days without.""
1.581 TFLOP/s * 4 day * 86400 s/day * 0.5 utilization",ImageNet,1000000.0,"In 2010, a subset of 1000 classes
with roughly 1000 examples per class was the basis of an object recognition competition...",Confident,https://arxiv.org/abs/1207.0580,Improving neural networks by preventing co-adaptation of feature detectors,7445.0,"GE Hinton, N Srivastava, A Krizhevsky","Deep neural nets with a large number of parameters are very powerful machine learning systems. However, overfitting is a serious problem in such networks. Large networks are also slow to use, making it difficult to deal with overfitting by combining the predictions of many different large neural nets at test time. Dropout is a technique for addressing this problem. The key idea is to randomly drop units (along with their connections) from the neural network during training. This prevents units from co-adapting too much. During training, dropout samples from an exponential number of different thinned networks. At test time, it is easy to approximate the effect of averaging the predictions of all these thinned networks by simply using a single unthinned network that has smaller weights. This significantly reduces overfitting and gives major improvements over other regularization methods. We show that dropout improves the performance of neural networks on supervised learning tasks in vision, speech recognition, document classification and computational biology, obtaining state-of-the-art results on many benchmark data sets.",Academia,Canada,Highly cited,,,96.0,4 days with dropout; 2 days without dropout,NVIDIA GeForce GTX 580,,,,,,,,,,,Unreleased,Unreleased,Unreleased,,FP32,True
Dropout (CIFAR),University of Toronto,2012-06-03,Vision,Character recognition,,,4268700000000000.0,"""a single NVIDIA GTX 580 GPU. Training on CIFAR-10 takes roughly 90 minutes"" p17
1.581 TFLOP/s * 90 min * 60 s/min * 0.5 utilization",CIFAR-10,60000.0,,Confident,https://arxiv.org/abs/1207.0580,Improving neural networks by preventing co-adaptation of feature detectors,7445.0,"GE Hinton, N Srivastava, A Krizhevsky","Deep neural nets with a large number of parameters are very powerful machine learning systems. However, overfitting is a serious problem in such networks. Large networks are also slow to use, making it difficult to deal with overfitting by combining the predictions of many different large neural nets at test time. Dropout is a technique for addressing this problem. The key idea is to randomly drop units (along with their connections) from the neural network during training. This prevents units from co-adapting too much. During training, dropout samples from an exponential number of different thinned networks. At test time, it is easy to approximate the effect of averaging the predictions of all these thinned networks by simply using a single unthinned network that has smaller weights. This significantly reduces overfitting and gives major improvements over other regularization methods. We show that dropout improves the performance of neural networks on supervised learning tasks in vision, speech recognition, document classification and computational biology, obtaining state-of-the-art results on many benchmark data sets.",Academia,Canada,Highly cited,,,1.5,90 minutes,NVIDIA GeForce GTX 580,,,,,,,,,,,Unreleased,Open (non-commercial),Unreleased,http://www.cs.toronto.edu/~nitish/dropout see model files,FP32,
HOGWILD!,University of Wisconsin Madison,2011-11-11,Other,Text classification,,,,,,,,Unknown,https://arxiv.org/abs/1106.5730,HOGWILD!: A Lock-Free Approach to Parallelizing Stochastic Gradient Descent,2222.0,"F Niu, B Recht, C Ré, SJ Wright",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
NLP from scratch,"NEC Laboratories,Princeton University",2011-11-08,Language,Language Structure Modeling,5000000.0,"""The capacity of our network architectures lies mainly in the word lookup table, which contains 50 × 100,000 parameters to train. [...] most of the trainable parameters are located in the lookup tables.""",,,,852000000.0,"""Section 4 leverages large unlabeled data sets (∼ 852 million words)""",,https://www.jmlr.org/papers/volume12/collobert11a/collobert11a.pdf,Natural Language Processing (Almost) from Scratch,7640.0,"Ronan Collobert, J. Weston, L. Bottou, Michael Karlen, K. Kavukcuoglu, P. Kuksa",,"Industry,Academia","United States of America,United States of America",Highly cited,,,72.0,"""Chunking and NER take about one hour to train, POS takes few hours, and SRL takes about three days.""
SRL is the longest task.",,,,,,,,,,,,,,,,,
Domain Adaptation,University of Maryland,2011-11-06,Vision,Object recognition,15260.0,"Did not take into account initial image feature extraction, only novel stuff.

1. Perform PCA on the feature matrices from both domains. Learnable parameters are projection matrices.
= 800 (# features) x 200 (reduced dimension) x 2 (once per subdomain)

2. Perform partial least squares regression. Learnable parameters are

Matrix P with dimensions 200 (# features) x 30 (dimension of latent space)
Matrix Q with dimensions 1 (# responses) x 30 (dimension of latent space)
Projection matrix of X onto latent space:  200 (# features) x 30 (dimension of latent space)
Projection matrix of Y onto latent space:  1 (# responses) x 30 (dimension of latent space)
",,,Dataset introduced in 'Adapting Visual Category Models to New Domains',4652.0,"Dataset introduced in 'Adapting Visual Category Models to New
Domains'",,http://ftp.idiap.ch/pub/courses/EE-700/material/05-12-2012/2011_ICCV_DomainAdaptation.pdf,Domain Adaptation for Object Recognition: An Unsupervised Approach,1071.0,"Raghuraman Gopalan, Ruonan Li, Rama Chellappa",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Adaptive Subgrad,"Technion - Israel Institute of Technology,Google,University of California (UC) Berkeley",2011-10-03,Language,Text classification,,,,,Reuters RCV1,,,Unknown,https://dl.acm.org/doi/10.5555/1953048.2021068,Adaptive Subgradient Methods for Online Learning and Stochastic Optimization,10055.0,"J Duchi, E Hazan, Y Singer","We present a new family of subgradient methods that dynamically incorporate knowledge of the geometry of the data observed in earlier iterations to perform more informative gradient-based learning. Metaphorically, the adaptation allows us to find needles in haystacks in the form of very predictive but rarely seen features. Our paradigm stems from recent advances in stochastic optimization and online learning which employ proximal functions to control the gradient steps of the algorithm. We describe and analyze an apparatus for adaptively modifying the proximal function, which significantly simplifies setting a learning rate and results in regret guarantees that are provably as good as the best proximal function that can be chosen in hindsight. We give several efficient algorithms for empirical risk minimization problems with common and important regularization functions and domain constraints. We experimentally study our theoretical analysis and show that adaptive subgradient methods outperform state-of-the-art, yet non-adaptive, subgradient algorithms.","Academia,Industry,Academia","Israel,United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
Recursive sentiment autoencoder,Stanford University,2011-07-01,Language,Text classification,,,,,,,"They use several datasets for self-supervised and supervised learning
",Unknown,https://aclanthology.org/D11-1014/,Semi-supervised recursive autoencoders for predicting sentiment distributions,1477.0,"R. Socher, J. Pennington, E. H. Huang, A. Y. Ng, and C. D. Manning",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Recursive Neural Network,Stanford University,2011-06-28,"Vision,Language",Representation learning,,,,,WSJ,833333.0,"Full WSJ dataset: 1000000 words (https://catalog.ldc.upenn.edu/LDC99T42) 
Using 20 out of 24 splits for training: 1000000*(20/24)=833333.333",Confident,https://www.semanticscholar.org/paper/Parsing-Natural-Scenes-and-Natural-Language-with-Socher-Lin/9c0ddf74f87d154db88d79c640578c1610451eec,Parsing natural scenes and natural language with recursive neural networks,,"R. Socher, Cliff Chiung-Yu Lin, A. Ng, Christopher D. Manning","Recursive structure is commonly found in the inputs of different modalities such as natural scene images or natural language sentences. Discovering this recursive structure helps us to not only identify the units that an image or sentence contains but also how they interact to form a whole. We introduce a max-margin structure prediction architecture based on recursive neural networks that can successfully recover such structure both in complex scene images as well as sentences. The same algorithm can be used both to provide a competitive syntactic parser for natural language sentences from the Penn Treebank and to outperform alternative approaches for semantic scene segmentation, annotation and classification. For segmentation and annotation our algorithm obtains a new level of state-of-the-art performance on the Stanford background dataset (78.1%). The features from the image parse tree outperform Gist descriptors for scene classification by 4%.",Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Vector Space Model,Stanford University,2011-06-19,Language,Semantic embedding,255000.0,"""We build a fixed dictionary of the 5,000 most frequent tokens""
""For all word vector models, we use 50-dimensional vectors""
Parameters: 5000*50 + 5000=255000
",,,IMDb,75000.0,"""We train a variant of our model which uses 50,000 unlabeled reviews in addition to the labeled set of 25,000 reviews""",Confident,https://www.semanticscholar.org/paper/Learning-Word-Vectors-for-Sentiment-Analysis-Maas-Daly/1c61f9ef06fe74505775a833ff849185757199e7,Learning Word Vectors for Sentiment Analysis,,"Andrew L. Maas, Raymond E. Daly, Peter T. Pham, Dan Huang, A. Ng, Christopher Potts","Unsupervised vector-based approaches to semantics can model rich lexical meanings, but they largely fail to capture sentiment information that is central to many word meanings and important for a wide range of NLP tasks. We present a model that uses a mix of unsupervised and supervised techniques to learn word vectors capturing semantic term--document information as well as rich sentiment content. The proposed model can leverage both continuous and multi-dimensional sentiment information as well as non-sentiment annotations. We instantiate the model to utilize the document-level sentiment polarity annotations present in many online documents (e.g. star ratings). We evaluate the model using small, widely used sentiment and subjectivity corpora and find it out-performs several previously introduced methods for sentiment classification. We also introduce a large dataset of movie reviews to serve as a more robust benchmark for work in this area.",Academia,United States of America,"Highly cited,SOTA improvement","""We evaluate the model using small,
widely used sentiment and subjectivity corpora and find it out-performs several previously introduced methods for sentiment classification""",,,,,,,,,,,,,,,,,,,,
Cross-Lingual POS Tagger,"Carnegie Mellon University (CMU),Google Research",2011-06-19,Language,Part-of-speech tagging,,,,,,,,Unknown,https://aclanthology.org/P11-1061/,Unsupervised Part-of-Speech Tagging with Bilingual Graph-Based Projections,316.0,"Dipanjan Das, Slav Petrov",,"Academia,Industry","United States of America,Multinational,United States of America,Canada,Switzerland",SOTA improvement,"""Across eight European languages, our approach results in an average absolute improvement of 10.4% over a state-of-the-art baseline, and 16.7% over vanilla hidden Markov models induced with the Expectation Maximization algorithm.""",,,,,,,,,,,,,,,,,,,,
RNN-SpeedUp,"Brno University of Technology,Johns Hopkins University",2011-05-22,Language,Language modeling,,,,,Penn TreeBank (PTB),697500.0,"Section 3: ""The data used in the following experiments were obtained from
Penn Tree Bank: sections 0-20 were used as training data (about
930K tokens)""

0.75 words per token for English",,https://ieeexplore.ieee.org/document/5947611,Extensions of recurrent neural network language model,1576.0,"T. Mikolov, S. Kombrink, L. Burget, J. Cernock ˇ y, and S. Khudanpur",,"Academia,Academia","Czechia,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
Deep Autoencoders,University of Toronto,2011-04-29,Vision,Image representation,139808256.0,"2*(3072*8192+8192*4096+4096*2048+2048*1024+1024*512+512*256+256*128+128*64+64*28)=139808256
""n each autoencoder, the hidden layers halve in size until they reach the desired size, except that we use 28 instead of 32""",3.672864e+16,"48*60*60*708500000000*0.3=36728640000000000=3.7e16
GTX 285 with 708.5 GFLOP/s",,1600000.0,"""We train on 1.6 million 32 × 32 color images""",Confident,https://www.semanticscholar.org/paper/Using-very-deep-autoencoders-for-content-based-Krizhevsky-Hinton/88080d28536f36588740737f3b7a1f6c1a409654,Using very deep autoencoders for content-based image retrieval,,"A. Krizhevsky, Geoffrey E. Hinton","We show how to learn many layers of features on color images and we use these features to initialize deep autoencoders. We then use the autoencoders to map images to short binary codes. Using semantic hashing [6], 28-bit codes can be used to retrieve images that are similar to a query image in a time that is independent of the size of the database. This extremely fast retrieval makes it possible to search using multiple di erent transformations of the query image. 256-bit binary codes allow much more accurate matching and can be used to prune the set of images found using the 28-bit codes.",Academia,Canada,Historical significance,,85.0,48.0,"""The entire training procedure for each autoencoder took about 2 days on an Nvidia GTX 285 GPU.""",NVIDIA GeForce GTX 285,1.0,,,,246.22598104391827,,,,,,,,,,,True
Deep rectifier networks,University of Montreal / Université de Montréal,2011-04-13,Vision,Image classification,,,,,"CIFAR-10,MNIST,NISTP,NORB",,,Unknown,https://proceedings.mlr.press/v15/glorot11a.html,Deep sparse rectifier neural networks,7887.0,"Xavier Glorot, Antoine Bordes, Yoshua Bengio","While logistic sigmoid neurons are more biologically plausible than hyperbolic tangent neurons, the latter work better for training multi-layer neural networks. This paper shows that rectifying neurons are an even better model of biological neurons and yield equal or better performance than hyperbolic tangent networks in spite of the hard non-linearity and non-differentiability at zero, creating sparse representations with true zeros which seem remarkably suitable for naturally sparse data. Even though they can take advantage of semi-supervised setups with extra-unlabeled data, deep rectifier networks can reach their best performance without requiring any unsupervised pre-training on purely supervised tasks with large labeled datasets. Hence, these results can be seen as a new milestone in the attempts at understanding the difficulty in training deep but purely supervised neural networks, and closing the performance gap between neural networks learnt with and without unsupervised pre-training.",Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,,
Optimized Single-layer Net,"University of Michigan,Stanford University",2011-04-11,Vision,Image classification,,,,,,,,Unknown,http://proceedings.mlr.press/v15/coates11a.html,An analysis of single-layer networks in unsupervised feature learning,3716.0,"A Coates, A Ng, H Lee",,"Academia,Academia","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
YouTube Video Recommendation System,Google,2010-09-26,Recommendation,Recommender system,,,,,,10000000000.0,"""We currently handle millions of users
and tens of billions of activity events with a total footprint
of several terabytes of data""

If 10M users each watch 1000 videos, that's 10B visualizations, which matches their ""activity events"" count.",,https://dl.acm.org/doi/10.1145/1864708.1864770,The YouTube Video Recommendation System,1160.0,"J Davidson, B Liebald, J Liu, P Nandy","We discuss the video recommendation system in use at YouTube, the world's most popular online video community. The system recommends personalized sets of videos to users based on their activity on the site. We discuss some of the unique challenges that the system faces and how we address them. In addition, we provide details on the experimentation and evaluation framework used to test and tune new algorithms. We also present some of the findings from these experiments.",Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
RNN LM,Johns Hopkins University,2010-09-26,Language,Language modeling,70265000.0,"This database entry refers to the 3xRNN rows in Table 2 (static and dynamic likely use the same model ensemble, but allow the model weights to update once when testing the dynamic version).

I assume the 3xRNN represents interpolation between the three largest models shown explicitly (RNN 250/5, RNN 250/2, and RNN 400/10). This seems likely, since smaller models do considerably worse on their own.

In the following colab notebook, I estimate vocabulary sizes for the NYT Gigaword data at around 54.4k, 41.4k, and 27.6k for merge thresholds of 2, 5, and 10, respectively: https://colab.research.google.com/drive/1K5qH0EqXtFwTLESNtp4oelCM28GpGXt6#scrollTo=tedUkbgklNJ3

So the total number of parameters in each constituent model is:
- RNN 250/2: (250 + 54.4k) * 250 + (250 * 54.4k) = 27,262,500
- RNN 250/5: (250 + 41.4k) * 250 + (250 * 41.4k) = 20,762,500
- RNN 400/10: (400 + 27.6k) * 400 + (400 * 27.6k) = 22,240,000

In total: 70,265,000 parameters",5.396e+16,"""Convergence is usually achieved after 10-20 epochs.""
Training was done over a 6.4M subset of the NYT section of English Gigaword.

6 * 70,265,000 * 20 * 6.4M = 5.396e16",WSJ,6400000.0,"As it is very time consuming to train RNN LM on large data, we have used only up to 6.4M words for training RNN models.",Speculative,https://www.semanticscholar.org/paper/Recurrent-neural-network-based-language-model-Mikolov-Karafi%C3%A1t/9819b600a828a57e1cde047bbe710d3446b30da5,Recurrent neural network based language model,5780.0,"Tomas Mikolov, M. Karafiát, L. Burget, J. Černocký, S. Khudanpur","A new recurrent neural network based language model (RNN LM) with applications to speech recognition is presented. Results indicate that it is possible to obtain around 50% reduction of perplexity by using mixture of several RNN LMs, compared to a state of the art backoff language model. Speech recognition experiments show around 18% reduction of word error rate on the Wall Street Journal task when comparing models trained on the same amount of data, and around 5% on the much harder NIST RT05 task, even when the backoff model is trained on much more data than the RNN LM. We provide ample empirical evidence to suggest that connectionist language models are superior to standard n-gram techniques, except their high computational (training) complexity. Index Terms: language modeling, recurrent neural networks, speech recognition",Academia,United States of America,Highly cited,,1.0,504.0,"""it takes several weeks to train the most complex models.""
Rough guess, 3 weeks = 504 hours

Assuming these models trained at the same time on different machines.",,,,,,,,,,,,,,,,,True
Fisher-Boost,Xerox Research Centre Europe (XRCE),2010-09-05,Vision,Image classification,,,,,,,,Unknown,https://link.springer.com/chapter/10.1007/978-3-642-15561-1_11,Improving the Fisher Kernel for Large-Scale Image Classification,3062.0,Florent PerronninJorge SánchezThomas Mensink,,Industry,France,Highly cited,,,21.5,"""Extracting and projecting the SIFT features for the 350K training images takes approx. 15h (150ms / image), learning the GMM on a random subset of 1M descriptors approx. 30 min, computing the Fisher vectors. Improving the Fisher Kernel for Large-Scale Image Classification 155
approx. 4h (40ms / image) and learning the 18 classifiers approx. 2h (7 min / class). ""
15 + 0.5 + 4 + 2 = 21.5 hours",,,,,,,,,,,,,,,,,
ReLU (NORB),University of Toronto,2010-06-15,Vision,Object recognition,16210006.0,"""The stereo-pair images are subsampled from their original resolution of 108 × 108 × 2 to 32 × 32 × 2 to speed up experiments [...]  the architecture
with the best results have 4000 units in the first layer
and 2000 in the second [...] there are 58,320 test
cases (9,720 cases per class) ""

So the architecture has (32*32*2+1)x4000 + (4000+1)*2000 + (2000+1)*58,320/9,720 parameters",,,,291600.0,"""There are 291,600 training cases (48,600 cases per class) and 58,320 test cases (9,720 cases per class).""",,https://dl.acm.org/doi/10.5555/3104322.3104425,Rectified linear units improve restricted boltzmann machines,16786.0,"Nair, V., Hinton, G. E.",,Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,,
ReLU (LFW),University of Toronto,2010-06-15,Vision,Face recognition,,,,,,,,Unknown,https://dl.acm.org/doi/10.5555/3104322.3104425,Rectified linear units improve restricted boltzmann machines,16786.0,"Nair, V., Hinton, G. E.",,Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,,
Mid-level Features,"INRIA,Ecole Normale Supèrieure,New York University (NYU)",2010-06-13,Vision,Object recognition,,This is extracting low-level SIFT features then max-pooling them and using in a linear SVM. The training compute could be estimated loosely for the SVM part.,,,,,,Unknown,https://ieeexplore.ieee.org/document/5539963,Learning mid-level features for recognition,1314.0,"YL Boureau, F Bach, Y LeCun, J Ponce",,"Academia,Academia,Academia","France,France,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
Deconvolutional Network,New York University (NYU),2010-06-13,Vision,Image classification,,,,,,,,Unknown,https://ieeexplore.ieee.org/document/5539957,Deconvolutional Networks,1542.0,"Matthew D. Zeiler, Dilip Krishnan, Graham W. Taylor and Rob Fergus",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Word Representations,"University of Montreal / Université de Montréal,University of Illinois Urbana-Champaign (UIUC)",2010-06-01,Language,Language Structure Modeling,,,,,,37000000.0,"Section 6: ""After cleaning, there are 37 million words (58%
of the original) in 1.3 million sentences""",,https://aclanthology.org/P10-1040.pdf,Word Representations: A Simple and General Method for Semi-Supervised Learning,2510.0,"Joseph Turian, Lev-Arie Ratinov, Yoshua Bengio",,"Academia,Academia","Canada,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
Feedforward NN,University of Montreal / Université de Montréal,2010-05-13,Vision,Digit recognition,7082000.0,"pg250 of the paper, section 2.3: 
""We optimized feedforward neural networks with one to
five hidden layers, with one thousand hidden units per
layer""

Input is a flattened 32x32 image, which corresponds to an input vector of length 3072

Output is a number from 0-9, so 10 neurons

No. of params: 3072*1000 + 4*1000*1000 + 1000*10 = 7,082,000
",350000000000000.0,"Roughly two times the number of parameters for ops per forward pass. 

So 2*7082000 params*3.5*140 epochs * 50k training images = 3.5e14",MNIST,,,Confident,https://proceedings.mlr.press/v9/glorot10a.html,Understanding the difficulty of training deep feedforward neural networks,16706.0,"X Glorot, Y Bengio",,Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,,
6-layer MLP (MNIST),"IDSIA,University of Lugano,SUPSI",2010-03-01,Vision,Character recognition,12110000.0,Table 1,130788000000000.0,"""Networks with up to 12 million weights can successfully be trained by plain gradient descent to achieve test errors below 1% after 20-30 epochs in less than 2 hours of training.""

60k images in each MNIST epoch.

Architecture-based estimate: 6 * 12.11M * 60k * 30 = 1.31e14

We can also get a rough hardware estimate. The authors use single precision, GTX280 gets 6.221e11 FLOPs in single precision. Training 30 epochs takes less than 2 hours, but on each epoch the training set is augmented in online fashion, which takes 93 seconds.
(2*3600 - 93*30) * 6.221e11 * 0.3 = 8.23e14

The architecture approach seems less uncertain.",MNIST,60000.0,"""MNIST consists of two datasets, one for training (60,000 images) and one for testing (10,000 images). Many studies divide the training set into two sets consisting of 50,000 images for training and 10,000 for validation. Our network is trained on slightly deformed images, continually generated in on-line fashion; hence we may use the whole un-deformed training set for validation, without wasting training images""",Likely,https://arxiv.org/abs/1003.0358,Deep Big Simple Neural Nets Excel on Handwritten Digit Recognition,1264.0,"Dan Claudiu Ciresan, Ueli Meier, Luca Maria Gambardella, Juergen Schmidhuber",,"Academia,Academia,Academia","Switzerland,Switzerland,Switzerland",Highly cited,,,2.0,"""less than 2 hours of
training""","NVIDIA GeForce GTX 280,Intel Core 2 Quad Q9450",,,,,,,,,,,,,,,FP32,
Stacked Denoising Autoencoders,"University of Montreal / Université de Montréal,University of Toronto",2010-01-03,Other,Image classification,,,,,,,,Unknown,https://www.jmlr.org/papers/v11/vincent10a.html,Stacked denoising autoencoders: Learning useful representations in a deep network with a local denoising criterion,6908.0,"P Vincent, H Larochelle, I Lajoie, Y Bengio",,"Academia,Academia","Canada,Canada",Highly cited,,,,,,,,,,,,,,,,,,,,,
Super-vector coding,"University of Illinois Urbana-Champaign (UIUC),NEC Laboratories,Rutgers University",2010-01-01,Vision,Image classification,1025.0,"Somewhat low confidence, but it seems like the number of learnable parameters is the size of the codebook, plus parameters in the SVM used for classification. Since it is a linear SVM, there will be one parameter per input feature, plus a single bias term.

So in total, 512 learnable codebook values, plus 513 SVM parameters = 1025 parameters",,,"PASCAL VOC 2007,PASCAL VOC 2009",1000000.0,"""PASCAL VOC 2007 consists of 9,963 images which are divided intothree subsets: training data (2501 images), validation data (2510 images), and
test data (4952 images). PASCAL VOC 2009 consists of 14,743 images and correspondingly are divided into three subsets: training data(3473 images), validation data(3581 images), and testing data (7689 images).""

PASCAL VOC 2009 is the larger experiment; images used in training is 3473 + 3581 = 7,054

For each image, the inputs for the codebook training are generated as follows: ""128-dimensional SIFT vectors are extracted over a grid with spacing of 4 pixels on three patch scales (16x16,25x25 and 31x31). The dimension of descriptors is reduced to 80 by applying principal component analysis (PCA). The codebooks C are trained on one million randomly sampled descriptors""

Loss function for learning the SV coding seems to look at the L2 loss on SIFT vectors, so there should be one gradient per descriptor, i.e. 1M inputs.",Speculative,http://tongzhang-ml.org/papers/eccv10_supervect.pdf,Image Classification using Super-Vector Coding of Local Image Descriptors,696.0,"Xi Zhou, Kai Yu, Tong Zhang, and Thomas S. Huang",,"Academia,Industry,Academia","United States of America,United States of America,United States of America",SOTA improvement,"""Our experiments demonstrate that the proposed classification method achieves state-of-the-art accuracy on the well-known PASCAL benchmarks.""",,,,,,,,,,,,,,,,,,,,
3D city reconstruction,"University of Washington,Microsoft Research,Cornell University",2009-09-29,3D modeling,3D reconstruction,,,,,,,,Unknown,https://grail.cs.washington.edu/rome/,Building Rome in a Day,2234.0,"Sameer Agarwal, Noah Snavely, Ian Simon, Steven M. Seitz and Richard Szeliski",,"Academia,Industry,Academia","United States of America,United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
BellKor 2007,AT&T,2009-09-21,Recommendation,Movie ratings,,,,,Netflix Prize,100480507.0,"The training data set consists of 100,480,507
ratings",,https://www.semanticscholar.org/paper/The-BellKor-solution-to-the-Netflix-Prize-Bell-Koren/f4ebb542c752a0dc423f94fd121e2edb8f6275ba,The BellKor solution to the Netflix Prize,241.0,"RM Bell, Y Koren, C Volinsky",,Industry,United States of America,SOTA improvement,Won Netflix prize,,,,,,,,,,,,,,,,,,,,
MatrixFac for Recommenders,"Yahoo Research,AT&T",2009-08-07,Recommendation,Recommender system,,,,,Netflix Prize,100480507.0,,,https://ieeexplore.ieee.org/document/5197422,Matrix factorization techniques for recommender systems,9234.0,"Yehuda Koren, Robert Bell, and Chris Volinsky",,"Industry,Industry","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
Pragmatic Theory solution (Netflix 2009),Pragmatic Theory Inc.,2009-08-01,Recommendation,Movie ratings,,"This is an ensemble of many smaller models. Ideally, the number of parameters of all the sub-models should be added up and recorded here.",,"This is an ensemble of many smaller models. Ideally, the training compute of all the sub-models should be added up and recorded here.",Netflix Prize,100480507.0,"""Netflix provided a training data set of 100,480,507 ratings that 480,189 users gave to 17,770 movies.""",Confident,https://www.asc.ohio-state.edu/statistics/statgen/joul_aut2009/PragmaticTheory.pdf,The Pragmatic Theory solution to the Netflix Grand Prize,111.0,"M Piotte, M Chabbert",,Industry,Canada,SOTA improvement,Netflix grand prize winner (along with two other teams),,,,,,,,,,,,,,,,,,,,
BigChaos OptiBlend,AT&T,2009-08-01,Recommendation,Movie ratings,,,,,Netflix Prize,100480507.0,"""Netflix provided a training data set of 100,480,507 ratings that 480,189 users gave to 17,770 movies.""",,https://www.asc.ohio-state.edu/statistics/statgen/joul_aut2009/BigChaos.pdf,The BigChaos Solution to the Netflix Grand Prize,237.0,"A Töscher, M Jahrer, RM Bell",,Industry,United States of America,SOTA improvement,"won Netflix prize
",,,,,,,,,,,,,,,,,,,FP32,
BellKor 2009,AT&T,2009-08-01,Recommendation,Movie ratings,,,,,Netflix Prize,100480507.0,"""Netflix provided a training data set of 100,480,507 ratings that 480,189 users gave to 17,770 movies.""",,https://www2.seas.gwu.edu/~simhaweb/champalg/cf/papers/KorenBellKor2009.pdf,The BellKor Solution to the Netflix Grand Prize,513.0,Y Koren,,Industry,United States of America,Historical significance,Introduced new algorithms; won Netflix Grand Prize,,,,,,,,,,,,,,,,,,,,
BellKor 2008,AT&T,2009-08-01,Recommendation,Movie ratings,,,,,Netflix Prize,100480507.0,"""Netflix provided a training data set of 100,480,507 ratings that 480,189 users gave to 17,770 movies.""",,https://cseweb.ucsd.edu/classes/fa17/cse291-b/reading/ProgressPrize2008_BellKor.pdf,The BellKor 2008 Solution to the Netflix Prize,162.0,"RM Bell, Y Koren, C Volinsky",,Industry,United States of America,SOTA improvement,Won Netflix prize,,,,,,,,,,,,,,,,,,,,
GPU DBNs,Stanford University,2009-06-15,Other,Miscellaneous image analysis,100000000.0,"""For example, we are able to reduce the time required to learn a four-layer DBN with 100 million free parameters from several weeks to around a single day.""",1000000000000000.0,"https://www.getguesstimate.com/models/19602

6435 GPU seconds for 1M examples
Single GTX 280 with 622.1 GFLOPS
All results are reported for 1M examples, unclear if they ran larger training experiments.",,1000000.0,"Table 2 shows the running time for processing 1 million
examples for RBMs of varying size",Confident,https://dl.acm.org/doi/abs/10.1145/1553374.1553486?utm_campaign=The+Batch&utm_source=hs_email&utm_medium=email&_hsenc=p2ANqtz-95Z7-X4Dl-RJK6gYKvjyDIrYaGhBeqWoc0ldqyPEKni0Ip6UE7452hr-ygY52z00LBpYgM,Large-scale Deep Unsupervised Learning using Graphics Processors,1032.0,"R Raina, A Madhavan, AY Ng",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,FP32,True
Conv-DBN,Stanford University,2009-06-14,Vision,Image classification,,,,,,,,Unknown,https://dl.acm.org/doi/10.1145/1553374.1553453,Convolutional deep belief networks for scalable unsupervised learning of hierarchical representations,2964.0,"H Lee, R Grosse, R Ranganath, AY Ng",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Deep Boltzmann Machines,University of Toronto,2009-04-16,Other,Image classification,,,,,,,,Unknown,https://www.sciencedirect.com/topics/computer-science/deep-boltzmann-machine,Deep Boltzmann Machines,2666.0,"Ruslan Salakhutdinov, Geoffrey Hinton",,Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,,
RBM Image Classifier,University of Toronto,2009-04-08,Vision,Image classification,80000000.0,"Best performing model (see Figure 3.1) had 10,000 hidden units in one hidden layer and 8000 visible units",,,CIFAR-10,2000000.0,,Likely,https://www.cs.toronto.edu/~kriz/learning-features-2009-TR.pdf,Learning Multiple Layers of Features from Tiny Images,32057.0,Alex Krizhevsky,"Groups at MIT and NYU have collected a dataset of millions of tiny colour images from the web. It
is, in principle, an excellent dataset for unsupervised training of deep generative models, but previous
researchers who have tried this have found it dicult to learn a good set of lters from the images.
We show how to train a multi-layer generative model that learns to extract meaningful features which
resemble those found in the human visual cortex. Using a novel parallelization algorithm to distribute
the work among multiple machines connected on a network, we show how training such a model can be
done in reasonable time.
A second problematic aspect of the tiny images dataset is that there are no reliable class labels
which makes it hard to use for object recognition experiments. We created two sets of reliable labels.
The CIFAR-10 set has 6000 examples of each of 10 classes and the CIFAR-100 set has 600 examples of
each of 100 non-overlapping classes. Using these labels, we show that object recognition is signicantly
improved by pre-training a layer of features on a large set of unlabeled tiny images.",Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,FP32,
Semantic Hashing,University of Toronto,2008-12-10,Language,Search,2600000.0,,,,,310521.0,Section 4.1,,https://www.cs.cmu.edu/~rsalakhu/papers/sdarticle.pdf,Semantic Hashing,1487.0,"R Salakhutdinov, G Hinton",,Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,,
HLBL,University of Toronto,2008-12-08,Language,Language modeling,1846400.0,"""Except for where stated otherwise, the models used for the experiments used 100 dimensional feature vectors and a context size of 5.""
""The vocabulary size for this dataset is 17964.""
Embedding: 17964 * 100 = 1796400
Context matrices: 5 * 100 * 100 = 50000
Unembedding: 0 (tied embedding “while the matrix of weights from the hidden layer to the output layer is simply the feature vector matrix R”)
Total: 1796400 + 50000 = 1846400
",,"6ND: 6 * 1846400 * 14000000 = 155,097,600,000,000 FLOP per epoch.
Not stated how many epochs for training.",,14000000.0,"""The dataset consists of a 14 million word training set""",Confident,https://www.semanticscholar.org/paper/A-Scalable-Hierarchical-Distributed-Language-Model-Mnih-Hinton/a9fc84f8abe740cdc7ee82e69444d1d00dbe0ceb,A Scalable Hierarchical Distributed Language Model,,"A. Mnih, Geoffrey E. Hinton","Neural probabilistic language models (NPLMs) have been shown to be competitive with and occasionally superior to the widely-used n-gram language models. The main drawback of NPLMs is their extremely long training and testing times. Morin and Bengio have proposed a hierarchical language model built around a binary tree of words, which was two orders of magnitude faster than the non-hierarchical model it was based on. However, it performed considerably worse than its non-hierarchical counterpart in spite of using a word tree created using expert knowledge. We introduce a fast hierarchical language model along with a simple feature-based algorithm for automatic construction of word trees from the data. We then show that the resulting models can outperform non-hierarchical neural models as well as the best n-gram models.",Academia,Canada,Highly cited,,,,HLBL with largest tree (T7) takes 32 minutes per epoch. Unstated how many epochs they trained for.,,,,,,,,,,,,,,,,,
ADAPTIVE NLPM,University of Toronto,2008-12-08,Language,Language modeling,12198000.0,"None given but it does say "" Since each non-leaf node in a tree has its own feature vector, the number of free parameters associated with the tree is linear in this quantity"", and the largest model (T7: ADAPATIVE(0.4) x 4) has 121980 of them. The feature vectors are 100-dimensional. I've done the dubious thing of multiplying the two to give an estimate.",,,,14000000.0,"""The dataset consists of a 14 million word training set""",Confident,https://papers.nips.cc/paper_files/paper/2008/file/1e056d2b0ebd5c878c550da6ac5d3724-Paper.pdf,A Scalable Hierarchical Distributed Language Model,1297.0,"Andriy Mnih, Geoffrey Hinton","Neural probabilistic language models (NPLMs) have been shown to be competitive with and occasionally superior to the widely-used n-gram language models. The main drawback of NPLMs is their extremely long training and testing times. Morin and Bengio have proposed a hierarchical language model built around a binary tree of words, which was two orders of magnitude faster than the nonhierarchical model it was based on. However, it performed considerably worse than its non-hierarchical counterpart in spite of using a word tree created using expert knowledge. We introduce a fast hierarchical language model along with a simple feature-based algorithm for automatic construction of word trees from the data. We then show that the resulting models can outperform non-hierarchical neural models as well as the best n-gram models.",Academia,Canada,Highly cited,,,,"32 minutes per epoch for the largest model, but unfortunately no epoch count given.

""Models were trained using the learning rate of 10^−3 until the perplexity on the validation set started to increase. Then the learning rate was reduced to 3 × 10^−5 and training was resumed until the validation perplexity started increasing again.""",,,,,,,,,,,,Unreleased,,,,,
BigChaos 2008,AT&T,2008-11-25,Recommendation,Movie ratings,,,,,Netflix Prize,100480507.0,"""Netflix provided a training data set of 100,480,507 ratings that 480,189 users gave to 17,770 movies.""",,https://www.asc.ohio-state.edu/statistics/statgen/joul_aut2009/BigChaos.pdf,The BigChaos Solution to the Netflix Prize 2008,35.0,"A Töscher, M Jahrer",,Industry,United States of America,Historical significance,Winners of the 2008 Netflix Price,,,,,,,,,,,,,,,,,,,FP32,
Sparse digit recognition SVM,University of Lubeck,2008-11-19,Vision,Image classification,,,,,,,,Unknown,https://pubmed.ncbi.nlm.nih.gov/19000969/,Simple method for high-performance digit recognition based on sparse coding,124.0,"Kai Labusch, Erhadt Barth, Thomas Martinetz","In this brief paper, we propose a method of feature extraction for digit recognition that is inspired by vision research: a sparse-coding strategy and a local maximum operation. We show that our method, despite its simplicity, yields state-of-the-art classification results on a highly competitive digit-recognition benchmark. We first employ the unsupervised Sparsenet algorithm to learn a basis for representing patches of handwritten digit images. We then use this basis to extract local coefficients. In a second step, we apply a local maximum operation to implement local shift invariance. Finally, we train a support vector machine (SVM) on the resulting feature vectors and obtain state-of-the-art classification performance in the digit recognition task defined by the MNIST benchmark. We compare the different classification performances obtained with sparse coding, Gabor wavelets, and principal component analysis (PCA). We conclude that the learning of a sparse representation of local image patches combined with a local maximum operation for feature extraction can significantly improve recognition performance.",Academia,Germany,SOTA improvement,"""Finally, we train a support vector machine (SVM) on the resulting feature vectors and obtain state-of-the-art classification performance in the digit recognition task defined by the MNIST benchmark""",,,,,,,,,,,,,,,,,,,,
Boss (DARPA Urban Challenge),Carnegie Mellon University (CMU),2008-07-23,Driving,Self-driving car,,,,,,,,Unknown,https://onlinelibrary.wiley.com/doi/abs/10.1002/rob.20255,Autonomous driving in urban environments: Boss and the Urban Challenge,1840.0,"Chris Urmson, Joshua Anhalt, Drew Bagnell,Christopher Baker, Robert Bittner,M. N. Clark, John Dolan, Dave Duggins,Tugrul Galatali, Chris Geyer,Michele Gittleman, Sam Harbaugh,Martial Hebert, Thomas M. Howard,Sascha Kolski, Alonzo Kelly,Maxim Likhachev, Matt McNaughton,Nick Miller, Kevin Peterson, Brian Pilnick,Raj Rajkumar, Paul Rybski, Bryan Salesky,Young-Woo Seo, Sanjiv Singh, Jarrod Snider,Anthony Stentz, William “Red” Whittaker,Ziv Wolkowicki, and Jason Ziglar",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Semi-Supervised Embedding for DL,"Google,NUANCE Communications,IDIAP,University of Illinois Urbana-Champaign (UIUC)",2008-07-05,Other,"Image classification,Language Structure Modeling,Text classification",,,,,,,,Unknown,https://dl.acm.org/doi/10.1145/1390156.1390303,Deep Learning via Semi-Supervised Embedding,1087.0,"Jason Weston, Frederick, Ratle, Hossein Mobahi, Ronan Collobert",,"Industry,Industry,Academia,Academia","United States of America,United States of America,Switzerland,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
Denoising Autoencoders,University of Montreal / Université de Montréal,2008-07-05,Other,Image classification,,,,,,,,Unknown,https://dl.acm.org/doi/10.1145/1390156.1390294,Extracting and Composing Robust Features with Denoising Autoencoders,7192.0,"Pascal Vincent, Hugo Larechelle, Yoshua Bengio, Pierre- Antoine Manzagol",,Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,,
Deep Multitask NLP Network,NEC Laboratories,2008-07-05,Language,Language modeling,1500000.0,"With a word vector size of 50 and a vocabulary size of 30,000, the embedding matrix has 1,500,000 parameters. There are also some small convolutional and dense layers with far fewer parameters.",,,"PropBank,Penn TreeBank (PTB),Wikipedia",633000000.0,"Section 7: ""631 million words
from Wikipedia""",Speculative,http://icml2008.cs.helsinki.fi/papers/391.pdf,"A Unified Architecture for Natural Language Processing: Deep Neural Networks with Multitask Learning
",7095.0,"Ronan Collobert, Jason Weston","We describe a single convolutional neural network architecture that, given a sentence, outputs a host of language processing predictions: part-of-speech tags, chunks, named entity tags, semantic roles, semantically similar words and the likelihood that the sentence makes sense (grammatically and semantically) using a language model. The entire network is trained jointly on all these tasks using weight-sharing, an instance of multitask learning. All the tasks use labeled data except the language model which is learnt from unlabeled text and represents a novel form of semi-supervised learning for the shared tasks. We show how both multitask learning and semi-supervised learning improve the generalization of the shared tasks, resulting in stateof-the-art performance.",Industry,United States of America,"Highly cited,SOTA improvement",,,168.0,1 week on 1 computer,,,,,,,,,,,,,,,,,
Multiscale deformable part model,"UC Irvine,University of Chicago,Toyota Technological Institute at Chicago",2008-06-23,Vision,Object detection,,,,,,,,Unknown,https://ieeexplore.ieee.org/abstract/document/4587597,"A discriminatively trained, multiscale, deformable part model",3093.0,"Pedro Felzenszwalb, David McAllester, Deva Ramanan",,"Academia,Academia,Academia","United States of America,United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
BLSTM for handwriting (2),"University of Bern,IDSIA,Technical University of Munich",2007-12-03,Vision,Character recognition,100881.0,"For the raw input representation,
there were 4 input units and a total of 100,881 weights",,,,,,,https://proceedings.neurips.cc/paper/2007/hash/4b0250793549726d5c1ea3906726ebfe-Abstract.html,Unconstrained online handwriting recognition with recurrent neural networks,341.0,"Alex Graves, Marcus Liwicki, Horst Bunke, Jürgen Schmidhuber, Santiago Fernández",,"Academia,Academia,Academia","Switzerland,Switzerland,Germany",SOTA improvement,"""In experiments on an unconstrained
online database, we record excellent results using either raw or preprocessed data, well outperforming a state-of-the-art HMM based system in both cases.""",,,,,,,,,,,,,,,,,,,,
Enhanced Neighborhood-Based Filtering,AT&T,2007-10-28,Recommendation,Recommender system,,,,,,,,Unknown,https://ieeexplore.ieee.org/abstract/document/4470228,Scalable Collaborative Filtering with Jointly Derived Neighborhood Interpolation Weights,687.0,"RM Bell, Y Koren",,Industry,United States of America,SOTA improvement,"""We evaluate these methods on the Netflix dataset, where they deliver significantly better results than the commercial Netflix Cinematch recommender system.""",,,,,,,,,,,,,,,,,,,,
BLSTM for handwriting (1),"University of Bern,IDSIA,Technical University of Munich",2007-09-23,Vision,Image classification,,,,,,,,Unknown,https://people.idsia.ch//~juergen/icdar_2007.pdf,A Novel Approach to On-Line Handwriting Recognition Based on Bidirectional Long Short-Term Memory Networks,287.0,"M Liwicki, A Graves, S Fernàndez",,"Academia,Academia,Academia","Switzerland,Switzerland,Germany",SOTA improvement,,,,,,,,,,,,,,,,,,,,,
Regularized SVD for Collaborative Filtering,Warsaw University,2007-08-12,Recommendation,Recommender system,,,,,Netflix Prize,100480507.0,,,https://www.semanticscholar.org/paper/Improving-regularized-singular-value-decomposition-Paterek/f732d0f69fe4e84a95c32706b28b9e4ef1753c61,Improving regularized singular value decomposition for collaborative filtering,1117.0,A Paterek,,Academia,Poland,Highly cited,,,,,,,,,,,,,,,,,,,,,
Fisher Kernel GMM,Xerox,2007-07-16,Vision,Image classification,,,,2.5 hours on an AMD Opteron 2.4GHz with 4GB RAM,,30000.0,"""Approximately 30K images were available for training and 5K for testing. Both sets were manually multi-labeled""",Likely,https://ieeexplore.ieee.org/document/4270291,Fisher kernels on visual vocabularies for image categorization,1915.0,"Florent Perronnin, Christopher Dance","Within the field of pattern classification, the Fisher kernel is a powerful framework which combines the strengths of generative and discriminative approaches. The idea is to
characterize a signal with a gradient vector derived from a
generative probability model and to subsequently feed this
representation to a discriminative classifier. We propose to
apply this framework to image categorization where the input signals are images and where the underlying generative
model is a visual vocabulary: a Gaussian mixture model
which approximates the distribution of low-level features in
images. We show that Fisher kernels can actually be understood as an extension of the popular bag-of-visterms. Our approach demonstrates excellent performance on two challenging databases: an in-house database of 19 object/scene categories and the recently released VOC 2006 database. It is also very practical: it has low computational needs both at training and test time and vocabularies trained on one set of categories can be applied to another set without any significant loss in performance.",Industry,United States of America,Highly cited,,,2.5,"""With Fisher kernels, the training
cost is reduced down to approximately 2h30.""",,,,,,,,,,,,,,,,,
SB-LM,Google,2007-06-22,Language,Language modeling,300000000000.0,Table 2,1.4494464e+18,"Assuming a Nehalem based processor with 8 FLOP/cycle (https://www.agner.org/optimize/microarchitecture.pdf#page=105.06) , 2 cores and 2.33 GHz clock speed: 8*2*2330000000=37280000000 FLOP/s
Trained for 1 day on 1500 machines (Table 2)
Compute: 1500*37280000000*1*24*60*60*0.3=1449446400000000000=1.4e18
",,1800000000000.0,Table 2,Likely,https://www.semanticscholar.org/paper/Large-Language-Models-in-Machine-Translation-Brants-Popat/ba786c46373892554b98df42df7af6f5da343c9d,Large Language Models in Machine Translation,,"T. Brants, Ashok Popat, P. Xu, F. Och, J. Dean","Systems, methods, and computer program products for machine translation are provided. In some implementations a system is provided. The system includes a language model including a collection of n-grams from a corpus, each n-gram having a corresponding relative frequency in the corpus and an order n corresponding to a number of tokens in the n-gram, each n-gram corresponding to a backoff n-gram having an order of n-1 and a collection of backoff scores, each backoff score associated with an n-gram, the backoff score determined as a function of a backoff factor and a relative frequency of a corresponding backoff n-gram in the corpus.",Industry,United States of America,"Training cost,Highly cited",,,24.0,Table 2,,1500.0,,,,,,,,,,,,,,,True
KN-LM,Google,2007-06-22,Language,Language modeling,21000000000.0,Table 2,7.7303808e+17,"Trained for 2 days on 400 machines (Table 2)
Assuming a Nehalem based processor with 8 FLOP/cycle (https://www.agner.org/optimize/microarchitecture.pdf#page=105.06) , 2 cores and 2.33 GHz clock speed: 8*2*2330000000=37280000000 FLOP/s
Compute: 400*37280000000*2*24*60*60*0.3=773038080000000000=7.7e17",,31000000000.0,Table 2,Likely,https://www.semanticscholar.org/paper/Large-Language-Models-in-Machine-Translation-Brants-Popat/ba786c46373892554b98df42df7af6f5da343c9d,Large Language Models in Machine Translation,,"T. Brants, Ashok Popat, P. Xu, F. Och, J. Dean","Systems, methods, and computer program products for machine translation are provided. In some implementations a system is provided. The system includes a language model including a collection of n-grams from a corpus, each n-gram having a corresponding relative frequency in the corpus and an order n corresponding to a number of tokens in the n-gram, each n-gram corresponding to a backoff n-gram having an order of n-1 and a collection of backoff scores, each backoff score associated with an n-gram, the backoff score determined as a function of a backoff factor and a relative frequency of a corresponding backoff n-gram in the corpus.",Industry,United States of America,"Training cost,Highly cited",,,48.0,Table 2,,400.0,,,,,,,,,,,,,,,True
Restricted Bolzmann machines,University of Toronto,2007-06-20,Recommendation,"Movie ratings,Recommender system",,,,,Netflix Prize,100480507.0,"The training data set consists of 100,480,507
ratings",,https://dl.acm.org/doi/abs/10.1145/1273496.1273596?casa_token=cfdkH2x12MwAAAAA:sEUzfllIGyPcOfzgUoDPHlpC1ukfCAo8ewocBXWBswIIF9eS5HdFo30nOtfmIV8gm-XpBpQJJ5zYVO8,Restricted Boltzmann machines for collaborative filtering,2140.0,"Russ Salukhutdinov, Andriy Mnih, GE Hinton",,Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,,
λ-WASP,UT Austin,2007-06-01,Language,Language Structure Modeling,,,,,,792.0,"""Table 1 summarizes the results at the end of the learning curves (792 training examples for λWASP, WASP and SCISSOR, 600 for Z&C)""",,https://www.aclweb.org/anthology/P07-1121/,Learning Synchronous Grammars for Semantic Parsing with Lambda Calculus,383.0,"YW Wong, R Mooney",,Academia,United States of America,SOTA improvement,"""The resulting parser is shown to be the bestperforming system so far in a database query domain""",,,,,,,,,,,,,,,,,,,,
Empirical evaluation of deep architectures,University of Montreal / Université de Montréal,2007-06-01,Other,Image classification,,,,,,,,Unknown,https://dl.acm.org/doi/10.1145/1273496.1273556,An empirical evaluation of deep architectures on problems with many factors of variation,1149.0,"Hugo Larechelle, Dumithru Erhan, Aaron C Courville, James Bergsta, Yoshua Bengio",,Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,,
Sparse Energy-Based Model,New York University (NYU),2006-12-04,Vision,Character recognition,,,,,MNIST,60000.0,,,https://papers.nips.cc/paper/2006/hash/87f4d79e36d68c3031ccf6c55e9bbd39-Abstract.html,Efficient Learning of Sparse Representations with an Energy-Based Model,1601.0,"M Ranzato, C Poultney, S Chopra, Y Cun",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Greedy layer-wise DNN training,University of Montreal / Université de Montréal,2006-12-04,Other,"Image classification,Regression",,,,,,,,Unknown,https://dl.acm.org/doi/10.5555/2976456.2976476,Greedy layer-wise training of deep networks,5605.0,"Y Bengio, P Lamblin, D Popovici",,Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,,
Local Binary Patterns for facial recognition,"University of Oulu,IEEE",2006-12-01,Vision,Image classification,,"Shallowly investigated, couldn't find much.
",,,,,,Unknown,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.456.1094&rep=rep1&type=pdf,Face Description with Local Binary Patterns: Application to Face Recognition,5816.0,"Timo Ahonen, Abdenour Hadid, and Matti Pietikainen",,"Academia,Industry","Finland,Multinational",Highly cited,,,,,,,,,,,,,,,,,,,,,
Sparse Vision Encoding,Stanford University,2006-11-01,Vision,Image classification,,,9604800000000.0,"(Just for natural images)

""All experiments were conducted on a Linux machine with AMD Opteron 2GHz CPU and 2GB RAM. ... For example, we were able to learn a set of 1,024 bases (each 14×14 pixels)in about 2 hours and a set of 2,000 bases (each 20×20 pixels) in about 10 hours.""

I filtered for 2GHz Opteron models that came out in 2005, of which there are five: https://www.techpowerup.com/cpu-specs/?mfgr=AMD&released=2005&generation=AMD%20Opteron&sort=name

Found a source which indicates 3 cycles per 32-bit multiply, and 5 per 64 bit: https://www.cse.wustl.edu/~roger/569M/m2066.pdf 
Assuming 32-bit precision, 2e9 cycles/s / 3 cycle/FLOP = 6.67e8 FLOP/s

10 * 3600 * 6.67e8 * 0.4 = 9.6048e12 FLOPs",,2000.0,"However, these are 1000 20x20 pixel ""bases"", not images",Likely,https://proceedings.neurips.cc/paper_files/paper/2006/file/2d71b2ae158c7c5912cc0bbde2bb9d95-Paper.pdf,Efficient sparse coding algorithms,3512.0,"Honglak Lee, Alexis Battle, Rajat Raina, Andrew Y. Ng","Sparse coding provides a class of algorithms for finding succinct representations of stimuli; given only unlabeled input data, it discovers basis functions that capture higher-level features in the data. However, finding sparse codes remains a very difficult computational problem. In this paper, we present efficient sparse coding algorithms that are based on iteratively solving two convex optimization problems: an L1-regularized least squares problem and an L2-constrained least squares problem. We propose novel algorithms to solve both of these optimization problems. Our algorithms result in a significant speedup for sparse coding, allowing us to learn larger sparse codes than possible with previously described algorithms. We apply these algorithms to natural images and demonstrate that the inferred sparse codes exhibit end-stopping and non-classical receptive field surround suppression and, therefore, may provide a partial explanation for these two phenomena in V1 neurons.",Academia,United States of America,Highly cited,"Major caveat: the task in question is ""encoding"", which I'm not sure is a valid task. Unusually low confidence across all answers in this form due to the task and training data being atypical.",,10.0,"""...in about 2 hours and a set of 2,000 bases (each 20×20 pixels) in about 10 hours.""",,,,,,,,,,,,Unreleased,,,,,
Dimensionality Reduction,University of Toronto,2006-07-18,Vision,Face recognition,3800000.0,,,,,70000.0,"After fine-tuning on all 60,000 training images, the autoencoder was tested on 10,000 new images and produced much better reconstructions than did PCA
(Fig. 2B)",,https://www.cs.toronto.edu/~hinton/science.pdf,Reducing the dimensionality of data with neural networks.,15697.0,"GE Hinton, RR Salakhutdinov",,Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,,
Deep Belief Nets,"University of Toronto,National University of Singapore",2006-07-18,Vision,Character recognition,1600000.0,,,,MNIST,60000.0,"""The network that performed best on the validation set was
then tested and had an error rate of 1.39%. This network was
then trained on all 60,000 training images8 until its error-rate
on the full training set was as low as its final error-rate had
been on the initial training set of 44,000 images.""",,https://www.cs.toronto.edu/~hinton/absps/fastnc.pdf,A fast learning algorithm for deep belief nets,16071.0,"GE Hinton, S Osindero, YW Teh",,"Academia,Academia","Canada,Singapore",Highly cited,,,,,,,,,,,,,,,,,,,,,
CTC-Trained LSTM,"IDSIA,Technical University of Munich",2006-06-25,Speech,Speech recognition,114662.0,"""The hidden layers were fully connected to themselves
and the output layer, and fully connected from the input layer. The input layer was size 26, the softmax output layer size 62 (61 phoneme categories plus the blank label), and the total number of weights was
114, 662.""

https://www.cs.toronto.edu/~graves/icml_2006.pdf",,,TIMIT,41620.0,"4162 utterances, guesstimated avg 10 words per utterance",,https://www.cs.toronto.edu/~graves/icml_2006.pdf,Connectionist Temporal Classification: Labelling Unsegmented Sequence Data with Recurrent Neural Networks,4862.0,"Alex Graves, Santiago Fernández, Faustino Gómez, Jürgen Schmidhuber",,"Academia,Academia","Switzerland,Germany",Highly cited,,,,,,,,,,,,,,,,,,,,,
Spatial Pyramid Matching,"INRIA,University of Illinois Urbana-Champaign (UIUC),Ecole Normale Supèrieure",2006-06-17,Vision,Image classification,,,,,,,,Unknown,https://inc.ucsd.edu/mplab/users/marni/Igert/Lazebnik_06.pdf,Beyond Bags of Features: Spatial Pyramid Matching for Recognizing Natural Scene Categories,9807.0,"S Lazebnik, C Schmid, J Ponce",,"Academia,Academia,Academia","France,United States of America,France",Highly cited,,,,,,,,,,,,,,,,,,,,,
DrLIM,New York University (NYU),2006-06-17,Other,Image embedding,37097.0,Architecture described in figure 3,,,,217470.0,"""The dataset was split into 660 training images and a 312
test images. The result of training on all 10989 similar pairs
and 206481 dissimilar pairs is a 3-dimensional manifold in
the shape of a cylinder (see figure 8).""

206481 + 10989 = 217470",,https://ieeexplore.ieee.org/document/1640964,Dimensionality Reduction by Learning an Invariant Mapping,4888.0,R. Hadsell; S. Chopra; Y. LeCun,,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
FAST,University of Cambridge,2006-05-07,Video,Corner detection,,,,,,,,Unknown,https://link.springer.com/chapter/10.1007/11744023_34,Machine Learning for High-Speed Corner Detection,5419.0,Edward Rosten and Tom Drummond,,Academia,United Kingdom of Great Britain and Northern Ireland,Highly cited,,,,,,,,,,,,,,,,,,,,,
TFE SVM,"Centre de Recherche en Automatique de Nancy (CRAN),CENPARMI",2006-02-02,Vision,Character recognition,,,,,,,,Unknown,https://hal.archives-ouvertes.fr/hal-00018426/en,A trainable feature extractor for handwritten digit recognition,365.0,"Fabian Lauer, Ching Y Suen, Gerard Bloch",,"Academia,Academia","France,Canada",SOTA improvement,best at affine-transformed digits in table 4,,,,,,,,,,,,,,,,,,,,
Stanley (DARPA Grand Challenge 2),Stanford University,2006-01-01,Driving,Self-driving car,,"""Our  approach  and  the underlying  probabilistic  Markov  model  possess  anumber  of  unknown  parameters.  These  parameters include the height threshold, the statistical acceptance  probability  threshold,  and  various  Markov chain error parameters the noise covariances of theprocess noise and the measurement noise. Stanley uses a discriminative learning algorithm for  locally  optimizing  these  parameters.""",,,,,,Unknown,http://robots.stanford.edu/papers/thrun.stanley05.pdf,Stanley: The Robot that Won the DARPA Grand Challenge,2561.0,"S Thrun, M Montemerlo, H Dahlkamp",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Monocular Depth Prediction,Stanford University,2005-12-05,Vision,Miscellaneous image analysis,1472256.0,"""In detail, we use different parameters (θr, σ1r, σ2r) for each row in the image, because the images we consider are taken from a horizontally mounted camera, and thus different rows of the image have different statistical properties.""
""We collected a total of 425 image+depthmap pairs, with an image resolution of 1704x2272 and a depthmap resolution of 86x107""

The dimensionality of each parameter set isn't totally clear, but from equation (1) it seems like θ is the same length as the absolute depth input features (646) and σ1 and σ2 are scalar. If so, then we should have:
2272 * (646 + 1 + 1) = 1,472,256 parameters",,,,2933137.0,"""We collected a total of 425 image+depthmap pairs, with an image resolution of 1704x2272 and a depthmap resolution of 86x107. In the experimental results reported here, 75% of the images/depthmaps were used for training, and the remaining 25% for hold-out testing""
It seems like they do predictions over the dense values in the depthmap, so
86 * 107 * 425 * 0.75 = 2,933,137",Speculative,https://papers.nips.cc/paper_files/paper/2005/file/17d8da815fa21c57af9829fb0a869602-Paper.pdf,Learning Depth from Single Monocular Images,1417.0,"Ashutosh Saxena, Sung H. Chung, and Andrew Y. Ng","We consider the task of depth estimation from a single monocular image. We take a supervised learning approach to this problem, in which we begin by collecting a training set of monocular images (of unstructured outdoor environments which include forests, trees, buildings, etc.) and their corresponding ground-truth depthmaps. Then, we apply supervised learning to predict the depthmap as a function of the image. Depth estimation is a challenging problem, since local features alone are insufficient to estimate depth at a point, and one needs to consider the global context of the image. Our model uses a discriminatively-trained Markov Random Field (MRF) that incorporates multiscale local- and global-image features, and models both depths at individual points as well as the relation between depths at different points. We show that, even on unstructured scenes, our algorithm is frequently able to recover fairly accurate depthmaps.",Academia,United States of America,Highly cited,1000+ citations,,,,,,,,,,,,,,,Unreleased,,,,,
RankNet,"Microsoft Research,Microsoft",2005-08-07,Search,Search,5711.0,"Model is ""a two layer net with 10 hidden units""
Input is of size 569 ""In all, we use 569 features""
Parameters:
569*10 + 10 for hidden layer
10*1 + 1 for output layer",3482081588304.0,"FLOPs per forward pass: 2*parameters = 11422
FLOPs per pair (data point): two forward passes and one backward pass (""A forward prop is performed for the first sample; each node’s activation and gradient value are stored; a forward prop is then performed for the second sample, and the activations and gradients are again stored. The gradient of the cost is then *formula*"") = 2*11422 + 2*11422 = 45688
Total FLOPs = (FLOPs per pair = 45688)*(pairs = 3,464,289)*(epochs = 22) = 3.48E12",,3464289.0,"""This resulted in our training on 384,314 query/document feature vectors, and on 3,464,289 pairs.""",Confident,https://dl.acm.org/doi/abs/10.1145/1102351.1102363,Learning to rank using gradient descent,,"Chris Burges, Tal Shaked, Erin Renshaw, Ari Lazier, Matt Deeds, Nicole Hamilton, Greg HullenderAuthors Info & Claims","We investigate using gradient descent methods for learning ranking functions; we propose a simple probabilistic cost function, and we introduce RankNet, an implementation of these ideas using a neural network to model the underlying ranking function. We present test results on toy data and on data from a commercial internet search engine.","Industry,Industry","United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational,United States of America,Multinational,India,Belgium",Highly cited,,22.0,5.85,Table 6,,,,,,,,,,,,Unreleased,,,,,
BiLSTM for Speech,"IDSIA,Technical University of Munich",2005-08-01,Speech,Speech recognition,152061.0,"""The hidden layer sizes were chosen to ensure that all networks had roughly the same number of weights W (≈100,000). However, for the MLPs the network grew with the time-window size, and W varied between 22,061 and 152,061.""",24124575958774.88,"Extracted from AI and Compute (https://openai.com/blog/ai-and-compute/) charts by using https://automeris.io/WebPlotDigitizer/.

Forward FLOP: 2*200000=400000
Trained on 4158 utterances (TIMIT)
""We found that large networks, of around 200,000 weights,
gave good performance""
TIMIT has around 5 hours total. Estimated utterance length: 5*60*60/(4620+1680)=2.86s
The frame size was 5 ms
Frames per utterance: 2.86/0.005=572
Training FLOP for one epoch: 3*400000*572*4158=2854051200000

Epochs unclear, based on OpenAIs estimate it would be 8. ",TIMIT,36960.0,"https://catalog.ldc.upenn.edu/LDC93s1
One sample utterance has around 10 words

3696 utterances * 10 words = around 37k words",Likely,https://www.sciencedirect.com/science/article/abs/pii/S0893608005001206,Framewise phoneme classification with bidirectional LSTM and other neural network architectures,4281.0,"A Graves, J Schmidhuber",,"Academia,Academia","Switzerland,Germany",Highly cited,,,,,,,,,,,,,,,,,,,,,True
Histograms of Oriented Gradients,INRIA,2005-06-25,Vision,Object detection,,,,,,1805.0," we produced a new and significantly more
challenging data set, ‘INRIA’, containing 1805 64×128 im-
ages",,https://ieeexplore.ieee.org/document/1467360,Histograms of oriented gradients for human detection,36578.0,"N Dalal, B Triggs",,Academia,France,Highly cited,,,,,,,,,,,,,,,,,,,,,
ConvNet similarity metric,New York University (NYU),2005-06-20,Vision,Face verification,,,,,,140000.0,"The actual training set that was used contained
140,000 image pairs that were evenly split between genuine
and impostor.",,https://ieeexplore.ieee.org/document/1467314,"Learning a similarity metric discriminatively, with application to face verification",4059.0,"S Chopra, R Hadsell, Y LeCun",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Hiero,University of Maryland,2005-06-01,Language,Translation,120000000.0,"Very unsure, but the paper mentions 
""We ran the training process of Section 3 on the same data, obtaining a grammar of 24M rules"" 
and 
""For our experiments we used the following features, analogous to Pharaoh’s default feature set:
• P(γ | α) and P(α | γ), the latter of which is not
found in the noisy-channel model, but has been
previously found to be a helpful feature (Och
and Ney, 2002);
• the lexical weights Pw(γ | α) and Pw(α | γ) (Koehn et al., 2003), which estimate how well the words in α translate the words in γ;
2
• a phrase penalty exp(1), which allows the
model to learn a preference for longer or
shorter derivations, analogous to Koehn’sphrase penalty (Koehn, 2003).""

Suggesting 24M rules * 5 features per rule (?)",,,,171400000.0,"[WORDS]
155M words dataset for the language model plus (7.2+9.2)M words for the translation model?",,https://aclanthology.org/P05-1033/,A Hierarchical Phrase-Based Model for Statistical Machine Translation,1487.0,David Chiang,,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
SACHS,"Massachusetts Institute of Technology (MIT),Stanford University",2005-04-22,Biology,Other Biological Modeling,178.0,From https://www.bnlearn.com/bnrepository/,,,,5400.0,"I think? 

"" The truncated singlecell data set (420 data points) shows a large
(11-arc) decline in accuracy, missing more connections and reporting more unexplained arcs than its larger (5400 data points) counterpart (fig. S4B). ""

Seems potentially wrong by maybe 20%. Might need to add 1200.",,https://science.sciencemag.org/content/308/5721/523.long,Causal Protein-Signaling Networks Derived from Multiparameter Single-Cell Data.,1682.0,"K. Sachs, O. Perez, D. Pe'er, D. A. Lauffenburger and G. P. Nolan",,"Academia,Academia","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
Hierarchical LM,,2005-01-06,Language,Language modeling,,,115848000000000.0,"""The computations were performed on Athlon processors with a 1.2 GHz clock""
FP32 per cycle: 4 (""The bottom line is that the Athlon is capable of delivering as many as four 32-bit, single-precision floating-point results per clock cycle"", https://www.pctechguide.com/amd-technology/amd-athlon) 
Training time per epoch: 1609s (table 1)
Epochs: 30 ""Training is performed over about 20 to 30 epochs according to validation set perplexity (early stopping).""
Assumed utilization: 0.5 
Compute estimate: 0.5*1200000000*4*30*1609=115848000000000=1.16e14",Brown corpus,1000000.0,"""The corpus has 1,105,515 occurrences of words, split into 3 sets: 900,000 for training, 100,000 for validation (model selection), and 105,515 for testing""",Confident,https://www.semanticscholar.org/paper/Hierarchical-Probabilistic-Neural-Network-Language-Morin-Bengio/c19fbefdeead6a4154a22a9c8551a18b1530033a,Hierarchical Probabilistic Neural Network Language Model,,"Frederic Morin, Yoshua Bengio","In recent years, variants of a neural network architecture for statistical language modeling have been proposed and successfully applied, e.g. in the language modeling component of speech recognizers. The main advantage of these architectures is that they learn an embedding for words (or other symbols) in a continuous space that helps to smooth the language model and provide good generalization even when the number of training examples is insufficient. However, these models are extremely slow in comparison to the more commonly used n-gram models, both for training and recognition. As an alternative to an importance sampling method proposed to speed-up training, we introduce a hierarchical decomposition of the conditional probabilities that yields a speed-up of about 200 both during training and recognition. The hierarchical decomposition is a binary hierarchical clustering constrained by the prior knowledge extracted from the WordNet semantic hierarchy.",,,Highly cited,,30.0,13.4,"Training time per epoch: 1609s (table 1)
Total training time 30*1609/60/60=13.408h
",,1.0,,,,,,,,,,,,,,,True
LMICA,,2004-12-01,Vision,Object detection,4096000.0,"64*64*1000=4096000
""100000 samples of natural scenes of 64 × 64 pixels were given as X""
""LMICA was carried out in 1000 layers""
",2782080000000000.0,"69*60*60*8*2800000000*0.5=2782080000000000=2.78e15
""it consumed about 69 hours with Intel 2.8GHz CPU""
- Assuming they used an Intel Pentium 4 processor with 8 FLOP/cycle (https://en.wikipedia.org/wiki/FLOPS)",,100000.0,"""100000 samples of natural scenes of 64 × 64 pixels were given as X""",Confident,https://www.semanticscholar.org/paper/Linear-Multilayer-Independent-Component-Analysis-Matsuda-Yamaguchi/7061b01572fbff2e223ce3abb59f397895b1ebf1,"Linear Multilayer Independent Component Analysis for Large Natural Scenes
",,"Yoshitatsu Matsuda, K. Yamaguchi","In this paper, linear multilayer ICA (LMICA) is proposed for extracting independent components from quite high-dimensional observed signals such as large-size natural scenes. There are two phases in each layer of LMICA. One is the mapping phase, where a one-dimensional mapping is formed by a stochastic gradient algorithm which makes more highly-correlated (non-independent) signals be nearer incrementally. Another is the local-ICA phase, where each neighbor (namely, highly-correlated) pair of signals in the mapping is separated by the MaxKurt algorithm. Because LMICA separates only the highly-correlated pairs instead of all ones, it can extract independent components quite efficiently from appropriate observed signals. In addition, it is proved that LMICA always converges. Some numerical experiments verify that LMICA is quite efficient and effective in large-size natural image processing.",,,"Training cost,Historical significance",,,,,,,,,,,,,,,,,,,,,True
Invariant CNN,New York University (NYU),2004-06-27,Vision,Object recognition,90575.0,"""The network has a total of 90,575 trainable parameters.""",974230000000.0,"""A full propagation through the network requires 3,896,920 multiply-adds."" - it's not entirely clear whether this refers to a forward pass or forward + backward pass (I assumed the latter)
""We used a stochastic version of the Levenberg-Marquardt algorithm with diagonal approximation of the Hessian [7], for approximately 250,000 online updates.""
3896920*250000=974230000000=9.7e11",,24300.0,"""normalized-uniform set: 5 classes, centered, unperturbed objects on uniform backgrounds. 24,300 training samples, 24,300 testing samples.""",Confident,https://www.semanticscholar.org/paper/Learning-methods-for-generic-object-recognition-to-LeCun-Huang/f354310098e09c1e1dc88758fca36767fd9d084d,Learning methods for generic object recognition with invariance to pose and lighting,,"Yann LeCun, Fu Jie Huang, L. Bottou","We assess the applicability of several popular learning methods for the problem of recognizing generic visual categories with invariance to pose, lighting, and surrounding clutter. A large dataset comprising stereo image pairs of 50 uniform-colored toys under 36 azimuths, 9 elevations, and 6 lighting conditions was collected (for a total of 194,400 individual images). The objects were 10 instances of 5 generic categories: four-legged animals, human figures, airplanes, trucks, and cars. Five instances of each category were used for training, and the other five for testing. Low-resolution grayscale images of the objects with various amounts of variability and surrounding clutter were used for training and testing. Nearest neighbor methods, support vector machines, and convolutional networks, operating on raw pixels or on PCA-derived features were tested. Test error rates for unseen object instances placed on uniform backgrounds were around 13% for SVM and 7% for convolutional nets. On a segmentation/recognition task with highly cluttered images, SVM proved impractical, while convolutional nets yielded 16/7% error. A real-time version of the system was implemented that can detect and classify objects in natural scenes at around 10 frames per second.",Academia,United States of America,"Highly cited,Historical significance",,10.0,,,,,,,,,,,,,,,,,,,
Max-Margin Markov Networks,Stanford University,2004-03-01,"Vision,Language","Image classification,Text classification",,,,,,600.0,"The data set is divided into 10 folds of ∼ 600 training and ∼ 5500 testing examples.
The accuracy results, ... are averages over the 10 folds",,https://papers.nips.cc/paper/2003/file/878d5691c824ee2aaf770f7d36c151d6-Paper.pdf,Max-margin markov networks,1764.0,"B. Taskar, C. Guestrin, and D. Koller",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
CNN Best Practices,Microsoft Research,2003-08-06,Vision,Character recognition,,,,,MNIST,50000.0,,,https://ieeexplore.ieee.org/document/1227801,Best practices for convolutional neural networks applied to visual document analysis,3065.0,"PY Simard, D Steinkraus, JC Platt",,Industry,"United States of America,United Kingdom of Great Britain and Northern Ireland,Multinational",Highly cited,,,,,,,,,,,,,,,,,,,,,
Unsupervised Scale-Invariant Learning,University of Oxford,2003-06-18,Vision,Image classification,451.0,"See Table 1
",,,,3500.0,"See Table 2 and Figure 1.
There are 7 datasets, each with 200-800 of pictures. I pick 500 as the avg number of pictures",,https://ieeexplore.ieee.org/document/1211479,Object Class Recognition by Unsupervised Scale-Invariant Learning,2970.0,"R Fergus, P Perona, A Zisserman",,Academia,United Kingdom of Great Britain and Northern Ireland,Highly cited,,,,,,,,,,,,,,,,,,,,,
Phrase-based translation,University of Southern California,2003-05-01,Language,Translation,9178890.0,"There are various components to the system:

- Translation probability model phi
- The distortion probability distribution d
- A langage model p_LM
- A length factor w

Several translation probability models are considered. The most performant one is the AP word alignment model. The sentence length preferred by the authors is 3 words maximum. In the biggest corpus considered (320k phrase pairs) it produces a phrase translation probability table of 1996k entries.

The distortion probability model d is taken from  (Marcu and Wong, 2002).

The distortion probability model must have ~10 parameters at most

The language model p_LM is a back off trigram model from (Seymore and Rosenfeld,1997). AFAIK the cutoff used is not specified. Based on the example on section 4.3 of (Seymore and Rosefeld, 1997), a trigram probability model has about 3866964 + 2674322 + 641604 parameters.

""For each possible phrase translation anywhere in the sentence (we call it a translation option), we multiply its phrase translation probability with the language model probability for the generated English phrase. As language model probability we use the unigram probability for the first word, the bigram probability for the second, and the trigram probability for all following words""

The length factor w is an additional single parameter.

""In order to calibrate the output length, we introduce a
factor w for each generated English word in addition to
the trigram language model ""

In summary, the parameter count seems to be dominated by the trigram language model and the word alignment phrase translation model. ",,,,20000000.0,"[WORDS]
""We used the freely available Europarl corpus to carry out experiments. This corpus contains over 20 million words in each of the eleven official languages of the European Union, covering the proceedings of the European Parliament 1996-2001. 1755 sentences of length 5-15 were reserved for testing.""

""These results are consistent
over training corpus sizes from 10,000 sentence pairs to
320,000 sentence pairs. ""

So 20 million words or 320k sentence pairs.",,https://dl.acm.org/doi/10.3115/1073445.1073462,Statistical Phrase-Based Translation,4270.0,"Philipp Koehn, Franz Josef Och, Daniel Marcu",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
NPLM (Brown),University of Montreal / Université de Montréal,2003-03-15,Language,Text autocompletion,4124233.0,"""The number of free parameters is |V|(1 + nm + h) + h(1 + (n − 1)m) [...] For example, consider the following architecture used in the experiments on the AP (Associated Press) news data: the vocabulary size is |V| = 17,964, the number of hidden units is h = 60, the order of the model is n = 6, the number of word features is m = 100""

Brown corpus: n=5, h=100, m=30, |V|=16383
16383*(1+5*30+100)+100*(1+(5-1)*30)=4124233",132076260000000.0,"""For example, consider the following architecture used in the experiments on the AP (Associated Press) news data: the vocabulary size is |V| = 17,964, the number of hidden units is h = 60, the order of the model is n = 6, the number of word features is m = 100. The total number of numerical operations to process a single training example is approximately |V|(1+nm+h)+h(1+nm)+nm""

Brown corpus: n=5, h=100, m=30, |V|=16383, dataset size = 800000, epochs=20
Forward FLOP: 16383*(1+5*30+100)+100*(1+5*30)+5*30=4127383
Adjusting for backward pass with 1:1 ratio, as the by far largest layer (embedding) doesn't require gradients w.r.t. inputs.
Total FLOP: 2*4127383*800000*20=1.3207626e+14",Brown corpus,800000.0,"""Comparative experiments were performed on the Brown corpus which is a stream of 1,181,041 words, from a large variety of English texts and books. The first 800,000 words were used for training, the following 200,000 for validation (model selection, weight decay, early stopping) and the remaining 181,041 for testing. The number of different words is 47,578 (including punctuation, distinguishing between upper and lower case, and including the syntactical marks used to separate texts and paragraphs). Rare words with frequency ≤ 3 were merged into a single symbol, reducing the vocabulary size to |V| = 16,383.""",Confident,https://dl.acm.org/doi/10.5555/944919.944966,A Neural Probabilistic Language Model,7627.0,"Yoshua Bengio, Réjean Ducharme, Pascal Vincent, Christian Jauvin",,Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,,True
NPLM (AP News),University of Montreal / Université de Montréal,2003-03-15,Language,Text autocompletion,11904264.0,"""The number of free parameters is |V|(1 + nm + h) + h(1 + (n − 1)m) [...] For example, consider the following architecture used in the experiments on the AP (Associated Press) news data: the vocabulary size is |V| = 17,964, the number of hidden units is h = 60, the order of the model is n = 6, the number of word features is m = 100""

AP News: n=6, h=60, m=100, |V|=17964
17964*(1+6*100+60)+60*(1+(6-1)*100)=11904264",1666869200000000.0,"""For example, consider the following architecture used in the experiments on the AP (Associated Press) news data: the vocabulary size is |V| = 17,964, the number of hidden units is h = 60, the order of the model is n = 6, the number of word features is m = 100. The total number of numerical operations to process a single training example is approximately |V|(1+nm+h)+h(1+nm)+nm""

AP News: n=6, h=60, m=100, |V|=17964, dataset=13994528, epochs=5
Forward FLOP: 17964*(1+6*100+60)+60*(1+6*100)+6*100=11910864
Adjusting for backward pass with 1:1 ratio, as the by far largest layer (embedding) doesn't require gradients w.r.t. inputs.
Total FLOP: 2*11910864*13994528*5=1.6668692e+15",Brown corpus,13994528.0,"""Comparative experiments were performed on the Brown corpus which is a stream of 1,181,041 words, from a large variety of English texts and books. The first 800,000 words were used for training, the following 200,000 for validation (model selection, weight decay, early stopping) and the remaining 181,041 for testing. The number of different words is 47,578 (including punctuation, distinguishing between upper and lower case, and including the syntactical marks used to separate texts and paragraphs). Rare words with frequency ≤ 3 were merged into a single symbol, reducing the vocabulary size to |V| = 16,383.""",Confident,https://dl.acm.org/doi/10.5555/944919.944966,A Neural Probabilistic Language Model,7627.0,"Yoshua Bengio, Réjean Ducharme, Pascal Vincent, Christian Jauvin",,Academia,Canada,Highly cited,,,,,,,,,,,,,,,,,,,,,True
LDA,Stanford University,2003-02-02,Language,Document classification,,,,,,,Multiple experiments with different tasks and datasets,Unknown,https://jmlr.org/papers/volume3/blei03a/blei03a.pdf,Latent Dirichlet Allocation,38724.0,"David M. Blei, Andrew Y. Ng, Michael I. Jordan",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Statistical Shape Constellations,California Institute of Technology,2003-01-01,Vision,Image classification,,,,,,,,Unknown,https://link.springer.com/content/pdf/10.1007/3-540-45054-8_2.pdf,Unsupervised Learning of Models for Recognition,949.0,"M. Weber, M. Welling, and P. Perona",,Academia,United States of America,Historical significance,,,,,,,,,,,,,,,,,,,,,
Maximum Entropy Models for machine translation,"University of Southern California,RWTH Aachen University",2002-07-06,Language,Translation,,,,,,519523.0,"[WORDS]
Table 1",,https://aclanthology.org/P02-1038/,Discriminative Training and Maximum Entropy Models for Statistical Machine Translation,1413.0,Franz Josef Och and Hermann Ney,,"Academia,Academia","United States of America,Germany",Highly cited,,,,,,,,,,,,,,,,,,,,,
Tagging via Viterbi Decoding,AT&T,2002-06-01,Language,"Binary classification,Part-of-speech tagging",,,,,,,,Unknown,https://dl.acm.org/doi/10.3115/1118693.1118694,Discriminative Training Methods for Hidden Markov Models: Theory and Experiments with Perceptron Algorithms,2582.0,Michael Collins,,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
NEAT,IDSIA,2002-06-01,Other,Pole balancing,,,,,,,,Unknown,https://direct.mit.edu/evco/article/10/2/99/1123/Evolving-Neural-Networks-through-Augmenting,Evolving Neural Networks through Augmenting Topologies ,3402.0,"Justin Bayer, Daan Wierstra, Julian Togelius, Jürgen Schmidhuber","An important question in neuroevolution is how to gain an advantage from evolving neural network topologies along with weights. We present a method, NeuroEvolution of Augmenting Topologies (NEAT), which outperforms the best fixed-topology method on a challenging benchmark reinforcement learning task. We claim that the increased efficiency is due to (1) employing a principled method of crossover of different topologies, (2) protecting structural innovation using speciation, and (3) incrementally growing from minimal structure. We test this claim through a series of ablation studies that demonstrate that each component is necessary to the system as a whole and to each other. What results is significantly faster learning. NEAT is also an important contribution to GAs because it shows how it is possible for evolution to both optimize and complexify solutions simultaneously, offering the possibility of evolving increasingly complex solutions over generations, and strengthening the analogy with biological evolution.",Academia,Switzerland,Highly cited,,,,,,,,,,,,,,,,,,,,,
Thumbs Up?,"Cornell University,IBM",2002-05-28,Language,Sentiment classification,,,,,IMDb,2053.0,"yielding a corpus of 752 negative and
1301 positive reviews",,https://arxiv.org/abs/cs/0205070,Thumbs up? Sentiment Classification using Machine Learning Techniques,10656.0,"Bo Pang, Lillian Lee, Shivakumar Vaithyanathan",,"Academia,Industry","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
Decision tree (classification),"Mitsubishi Electric Research Labs,Compaq CRL",2001-12-08,Vision,Face recognition,12000.0,"Iteratively learns decision tree features, where each feature has 2 parameters (threshold and parity). They learn 6000 features total: ""The complete face detection cascade has 38 stages with over
6000 features""

Additional weights (see Table 1) are a temporary variable of the optimization and not part of the final model. ",63000000000000.0,"
The training compute can be tediously worked out from the pseudocode. I think for dataset size D, number of filters T, the training compute is roughly 180k * D * 3 * T = 6.3e13 FLOPs

The training evaluates each of 180k candidate features at each step, repeated for 6000 steps (as 1 feature is selected per round). 
The operations for one feature evaluation are unclear, but should be low (they only compare specific integer positions in the image). Estimated at 10op. 
180000*6000*10*14460=1.56168e+14",,14460.0,Section 5: 4916 hand labeled faces  + 9544 non-face images = 14460,Likely,https://www.cs.cmu.edu/~efros/courses/LBMV07/Papers/viola-cvpr-01.pdf,Rapid object detection using a boosted cascade of simple features,23449.0,"P. Viola, M. Jones",,"Industry,Industry","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,True
Gradient Boosting Machine,Stanford University,2001-10-01,Mathematics,"Pattern classification,Binary classification,Regression",,,,,,,,Unknown,https://projecteuclid.org/journals/annals-of-statistics/volume-29/issue-5/Greedy-function-approximation-A-gradient-boostingmachine/10.1214/aos/1013203451.full,Greedy function approximation: A gradient boosting machine,17891.0,Jerome H. Friedman,,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Immediate trihead,Brown University,2001-07-06,Language,Language modeling,,,,,,,,Unknown,https://dl.acm.org/doi/10.3115/1073012.1073029,Immediate-Head Parsing for Language Models,422.0,Eugene Charniak,,Academia,United States of America,SOTA improvement,"""The perplexity for both of these models significantly improve
upon the trigram model base-line as
well as the best previous grammar based language model""",,,,,,,,,,,,,,,,,,,,
PoE MNIST,University College London (UCL),2000-11-28,Vision,Digit recognition,3925310.0,"10 models, one for each digit. Largest models: 500 epochs, 500 hidden units (Table 2)
""The largest network was the best, even though each digit model contains 392,500 parameters trained on only 4,400 images""
""the classification network had 30 inputs and therefore 300 weights and 10 output biases.""

Total: 392500*10 + 310 = 3,925,310",51810000000000.0,"Each model was trained on 4400 examples: ""The largest network was the best, even though each digit model contains 392,500 parameters trained on only 4,400 images.""

Table 2, largest network trained 500 epochs.
10 * 6 * 392500 * 4400 * 500 = 51,810,000,000,000",MNIST,60000.0,Total training data size is 60000 but the subnetworks were trained on smaller subsets.,Confident,https://proceedings.neurips.cc/paper_files/paper/2000/file/1f1baa5b8edac74eb4eaa329f14a0361-Paper.pdf,Recognizing Hand-written Digits Using Hierarchical Products of Experts,,"Guy Mayraz, Geoffrey E. Hinton","The product of experts learning procedure [1] can discover a set of stochastic binary features that constitute a non-linear generative model of handwritten images of digits. The quality of generative models learned in this way can be assessed by learning a separate model for each class of digit and then comparing the unnormalized probabilities of test images under the 10 different class-specific models. To improve discriminative performance, it is helpful to learn a hierarchy of separate models for each digit class. Each model in the hierarchy has one layer of hidden units and the nth level model is trained on data that consists of the activities of the hidden units in the already trained (n - 1)th level model. After training, each level produces a separate, unnormalized log probabilty score. With a three-level hierarchy for each of the 10 digit classes, a test image produces 30 scores which can be used as inputs to a supervised, logistic classification network that is trained on separate data. On the MNIST database, our system is comparable with current state-of-the-art discriminative methods, demonstrating that the product of experts learning procedure can produce effective generative models of high-dimensional data.",Academia,United Kingdom of Great Britain and Northern Ireland,Historical significance,,500.0,,,,,,,,,,,,,,,,,,,True
Neural LM,University of Montreal / Université de Montréal,2000-11-28,Language,Language modeling,6906980.0,"(30959*100) + (8*100*120) + (120*30959) = 6,906,980
""This is obtained with a network with the direct architecture, 100 randomly initialized words features, 120 hidden units, and n = 8 words of context.""
""The Hansard corpus (Canadian parliament proceedings, French version) is a stream of about 34 million words, of which 32 millions (set A) was used for training, 1.1 million (set B) was used for validation, and 1.2 million (set C) was used for out-of-sample tests. The original data has 106, 936 different words, and those with frequency <= 10 were merged into a single token, yielding IVI = 30,959 different words.""
",6339000000000000.0,"The authors use a trick to avoid having to calculate the final layer for all possible words in the vocabulary. They precompute a ""short list"" of the most common word following any 2 precursor words with a smoothed trigram model, and then only calculate the softmax over words on the short list. This means only a negligible fraction of the unembedding parameters get used, so the effective number of parameters appears to be (30959*100) + (8*100*120) = 3,191,900

""Apparent convergence of the stochastic gradient descent procedure was obtained after around 10 epochs for Hansard""

6ND:
6*3191900*33100000*10=6.339e15
",Hansard Corpus,33100000.0,"The Hansard corpus (Canadian parliament proceedings, French version) is a stream of about 34 million words, of which 32 millions (set A) was used for training, 1.1 million (set B) was used for validation, and 1.2 million (set C) was used for out-of-sample tests.",Confident,https://papers.nips.cc/paper_files/paper/2000/file/728f206c2a01bf572b5940d7d9a8fa4c-Paper.pdf,A Neural Probabilistic Language Model,,"Yoshua Bengio, Réjean Ducharme, Pascal Vincent, Christian Janvin","A goal of statistical language modeling is to learn the joint probability function of sequences of words. This is intrinsically difficult because of the curse of dimensionality: we propose to fight it with its own weapons. In the proposed approach one learns simultaneously (1) a distributed representation for each word (i.e. a similarity between words) along with (2) the probability function for word sequences, expressed with these representations. Generalization is obtained because a sequence of words that has never been seen before gets high probability if it is made of words that are similar to words forming an already seen sentence. We report on experiments using neural networks for the probability function, showing on two text corpora that the proposed approach very significantly improves on a state-of-the-art trigram model.",Academia,Canada,"Training cost,Historical significance,Highly cited",,10.0,,,,,,,,,,,,,,,,,,,True
FrameNet role labeling,University of Rochester,2000-09-01,Language,Language Structure Modeling,,,,,FrameNet,50000.0,"Abstract: ""The system is based on statistical classifiers trained on roughly 50,000 sentences""",,https://dl.acm.org/doi/10.1162/089120102760275983,Automatic Labeling of Semantic Roles,2499.0,"Daniel Gildea, Daniel Jurafsky",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
SVD in recommender systems,University of Minnesota,2000-07-14,Recommendation,Recommender system,,,,,,,,Unknown,http://robotics.stanford.edu/~ronnyk/WEBKDD2000/papers/sarwar.pdf,Application of Dimensionality Reduction in Recommender System -- A Case Study,2126.0,"B Sarwar, G Karypis, J Konstan, J Riedl",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Perceptron for Large Margin Classification,"University of California San Diego,Shannon Laboratory,AT&T",1999-12-01,Vision,Character recognition,,,,,MNIST,60000.0,"""The dataset consists of 60,000 training examples and 10,000 test examples.""",,https://link.springer.com/article/10.1023/A:1007662407062,Large Margin Classification Using the Perceptron Algorithm,1731.0,Yoav Freund & Robert E. Schapire,,"Academia,Industry","United States of America,United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
IBM Model 4,"University of Southern California,IBM,University of Pennsylvania",1999-07-02,Language,Translation,,,,,,800000.0,"[WORDS]
See FIgure 6",,http://www-i6.informatik.rwth-aachen.de/publications/download/266/al-onaizan--1999.pdf,Statistical machine translation,1921.0,"Yaser Al-Onaizan, Jan Curin, Michael Jahr, Kevin Knight, John Lafferty, Dan Melamed, Franz-Josef Och, David Purdy, Noah A. Smith, and David Yarowsky",,"Academia,Industry,Academia","United States of America,United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
LSTM with forget gates,IDSIA,1999-01-02,Language,Language Structure Modeling,276.0,See Table 1,,,,30000.0,"Training was stopped after at most 30000
training streams, each of which was ended
when the first prediction error or the
100000th successive input symbol occurred

NOTE this is a weird task. Not sure how to measure dataset size (#seqs? #symbols?)",,https://ieeexplore.ieee.org/document/818041,Learning to forget: Continual prediction with LSTM,6283.0,"F. A. Gers, J. Schmidhuber, and F. Cummins",,Academia,Switzerland,Highly cited,,,,,,,,,,,,,,,,,,,,,
LeNet-5,AT&T,1998-11-01,Vision,Character recognition,60000.0,"""[LeNet5] contains 390408 connections, but only 60000 trainable free parameters because of the weight sharing""",2810937600000.0,"""[LeNet5] contains 390408 connections"" = multiply-adds
MNIST - 60,000 data points
20 epochs
390408*60000*6*20=2.810938e+12",MNIST,60000.0,"The MNIST database contains 60,000 training images and 10,000 testing images (Wikipedia)",Confident,http://vision.stanford.edu/cs598_spring07/papers/Lecun98.pdf,Gradient-based Learning Applied to Document Recognition,50261.0,"Yann LeCun, Léon Bottou, Yoshua Bengio, Patrick Haffner",,Industry,United States of America,"Historical significance,Highly cited",,,,,,,,,,,,,,,,,,,,,True
Social and content-based classification,"AT&T,Bell Laboratories,Rutgers University",1998-07-01,Recommendation,Recommender system,,,,,,45000.0,"""Our data set consists of more than 45,000 movie rat-
ings collected from approximately 260 users.""",,https://www.aaai.org/Papers/AAAI/1998/AAAI98-101.pdf,Recommendation as Classification: Using Social and Content-based Information in Recommendation,1564.0,"C Basu, H Hirsh, W Cohen",,"Industry,Industry,Academia","United States of America,United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
Sparse coding model for V1 receptive fields,"UC Davis,Cornell University",1997-12-01,Vision,Miscellaneous image analysis,,,,,,10.0,"In Simulation Methods: ""The data for training were taken from ten 512 × 512
pixel images of natural surroundings""",,https://www.sciencedirect.com/science/article/pii/S0042698997001697,Sparse coding with an overcomplete basis set: A strategy employed by V1?,4257.0,"Bruno A. Olshausen, David J. Field",,"Academia,Academia","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
LSTM,Technical University of Munich,1997-11-15,Language,Language modeling,10504.0,"Table 2

http://www.bioinf.jku.at/publications/older/2604.pdf",31512000000000.0,"""Due to limited computation time, training is stopped after 5 million sequence presentations""

Each sequence has p=100 elements in the long-delay setting.

COMPUTE = PRESENTATIONS * PRESENTATION LENGTH * UPDATE COMPUTE PER TOKEN

5000000*100*6*10,504.0=",,1273000.0,"Table 8. The rightmost column lists numbers of training sequences required to achieve the stopping
criterion.

This applies to experiment 5 (multiplication)

Sequences have random lengths, on the order of 100-1000 (table 7 )",Confident,https://direct.mit.edu/neco/article-abstract/9/8/1735/6109/Long-Short-Term-Memory?redirectedFrom=fulltext,Long short-term memory,82231.0,Sepp Hochreiter ; Jurgen Schmidhuber,,Academia,Germany,Highly cited,,,,,,,,,,,,,,,,,,,,,True
Bidirectional RNN,Advanced Telecommunications Research Institute,1997-11-01,Speech,Speech recognition,13000.0,"Page 7: ""The structures of all networks are adjusted so that
each of them has about the same number of free parameters
(approximately 13 000 here""",,,TIMIT,73920.0,"""the training data set consisting of 3696 sentences
from 462 speakers""

Assuming avg sentence length of 20 words

3696 * 20 total words",,https://ieeexplore.ieee.org/document/650093,Bidirectional recurrent neural networks,7990.0,"M. Schuster, KK Paliwal",,Industry,Japan,Highly cited,,,,,,,,,,,,,,,,,,,,,
SVM for face detection,Massachusetts Institute of Technology (MIT),1997-06-17,Vision,Object detection,,,,,,50000.0,"Section 1: ""The problem that we have to solve involves training a classifier
to discriminate between face and non-face patterns, using a
data set of 50,000points. """,,https://ieeexplore.ieee.org/document/609310,Training Support Vector Machines: An Application to Face Detection,3851.0,"E. Osuna, R. Freund, F. Girosi",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Deep Blue,IBM,1997-05-01,Games,Chess,8000.0,"""The new chess chip had a completely redesigned evaluation function, going from around 6400 features to over 8000""",,"The 8000 features were tuned using a mix of human judgment and automated tools using data on chess matches. Unclear how much total ""compute"" went into this.",,,,Speculative,https://www.sciencedirect.com/science/article/pii/S0004370201001291,Deep Blue,1992.0,"Murray Campbell, A. Joseph Hoane Jr., Feng-hsiung Hsu","Deep Blue is the chess machine that defeated then-reigning World Chess Champion Garry Kasparov in a six-game match in 1997. There were a number of factors that contributed to this success, including:
•a single-chip chess search engine,

•a massively parallel system with multiple levels of parallelism,

•a strong emphasis on search extensions,

•a complex evaluation function, and

•effective use of a Grandmaster game database.


This paper describes the Deep Blue system, and gives some of the rationale that went into the design decisions behind Deep Blue.",Industry,United States of America,"Historical significance,Highly cited","Defeated Kasparov in 1997, which was a famous AI milestone.",,,,,,,,,,,,,,,Unreleased,Unreleased,,,,
HMM Word Alignment,University of Erlangen - Nuremburg,1996-08-05,Language,Translation,,,,,,442316.0,"[WORDS]
Table 1.
I take the sum of all words. Maybe it would be better to use only the sum of English or German words?",,https://dl.acm.org/doi/10.3115/993268.993313,HMM-Based Word Alignment in Statistical Translation,1099.0,"Stephan Vogel, Hermann Ney, Christoph Tillmann",,Academia,Germany,Highly cited,,,,,,,,,,,,,,,,,,,,,
AdaBoost.M2 Digit Recognition,AT&T,1996-07-03,Vision,Digit recognition,,,,,,9709.0,,Confident,https://cseweb.ucsd.edu/~yfreund/papers/boostingexperiments.pdf,Experiments with a New Boosting Algorithm,12977.0,"Yoav Freund, Robert E. Schapire","In an earlier paper, we introduced a new “boosting” algorithm called AdaBoost which, theoretically, can be used to significantly reduce the error of any learning algorithm that con- sistently generates classifiers whose performance is a little better than random guessing. We also introduced the related notion of a “pseudo-loss” which is a method for forcing a learning algorithm of multi-label concepts to concentrate on the labels that are hardest to discriminate. In this paper, we describe experiments we carried out to assess how well AdaBoost with and without pseudo-loss, performs on real learning problems.
We performed two sets of experiments. The first set compared boosting to Breiman’s “bagging” method when used to aggregate various classifiers (including decision trees and single attribute- value tests). We compared the performance of the two methods on a collection of machine-learning benchmarks. In the second set of experiments, we studied in more detail the performance of boosting using a nearest-neighbor classifier on an OCR problem.",Industry,United States of America,Highly cited,Also listed in Denis Panjuta's List of 100+ AI Algorithms,,,,,,,,,,,,,,,,,,,,
System 11,Carnegie Mellon University (CMU),1996-06-18,Vision,Face detection,6452.0,"System 11 is a combination of Network 1 and Network 2

Network 1 has 2095 connections and network 2 has 4357 connections (see table 1)",25859616000.0,"Since there is no parameter sharing, the forward compute is roughly twice that of the number of parameters. We use a 2:1 forward-backward ratio as this is a shallow network, with most connections in the first layer.

Number of passes (Section 2.1):
* ""Nearly 1,050 face examples were gathered from face databases [...]""
* ""Fifteen face examples are generated for the training set from each original image""

Training loop:
1. ""initial set of nonface images by generating 1,000 random images""
2. Train (presumably on whole set)
3. Run + collect false positives
4. ""Select up to 250 of these subimages [...] and add them into the training set [...] Go to step 2""

""A typical training run selects approximately 8,000 nonface images ""

Selecting 8,000 nonface images implies 8000/250 = 32 loops.

Assuming compute is 3 * N * D, we have
* Loop 1: D = 15*1050 + 1000
* Loop 2: D = 15*1050 + 1000 + 250
* So on.

Hence D overall is 32*(15*1050 + 1000) + 250*32/2*(32+1) = 668,000.

Hence compute = 3 * 12904 * 668e3 = 25859616000",,9050.0,"""A typical training
run selects approximately 8000 non-face images from the
146,212,178 subimages that are available at all locations
and scales in the training scenery images.""

""Nearly 1050 face examples were gathered from face databases at CMU and Harvard [...] In the training set,15 face examples are generated from each
original image [...]""

""Create an initial set of non-face images by generating
1000 images with random pixel intensities""",Confident,https://ieeexplore.ieee.org/document/655647,Neural Network-Based Face Detection,6011.0,"HA Rowley, S Baluja, T Kanade",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
MUSIC perceptron,,1996-06-03,Vision,Image completion,13607.0,230*55+56*15+16*6+7*3=13607 (Figure 2),881733600000.0,"2*13607*3*10800000=881733600000=8.8e11
Training steps: 400*27000=10800000
""After 400 epochs the error of the network""",,27000.0,"“The training experiments were carried out on a database of 30,000 photos. Therefor the database was split into ten sets. Nine of them were used for the training and one for the testing.”",Confident,https://ieeexplore.ieee.org/document/549237,A neural network for grey level and color correction used in photofinishing,,M. Kocheisen; U.A. Muller; G. Troster,"The application of a multilayer perceptron for color and gray level correction in the field of photofinishing is presented. It is shown, that a neural network can improve the overall performance of a state of the art photo printer. The improved correction ability will reduce the number of unsalable pictures and thus lowers the production costs for the photo laboratory. The training experiments were carried out on a database of 30,000 photos using the MUSIC parallel supercomputer. The MUSIC system made it possible, for the first time, to process this large database in a reasonable time.",,,Historical significance,,400.0,,,,,,,,,,,,,,,,,,,True
LISSOM,University of Texas at Austin,1995-11-27,Vision,Digit recognition,432800.0,"Total connections 32*32*20*20+20*20*48+20*20*10=432800
Input: 32*32, Lissom: 20*20, Output: 10 (Figure 1a), up to 48 lateral connections per Lissom neuron (Figure 1b)
",195544800000.0,"Lissom connections: 32*32*20*20+20*20*48=428800
Lissom compute: 2*428800*3*38*2000=195532800000=1.96e11
Perceptron connections: 20*20*10=4000
Perceptron compute: 2*4000*3*500*1700=20400000000=2e10
Total compute: 195532800000+12000000=195544800000=1.96e11
""LISSOM was trained with 2000 patterns""
""The initial self-organizing map was formed in 8 epochs over the training set, gradually reducing the neighborhood radius from 20 to 8. The lateral connections were then added to the system, and over another 30 epochs,""
""Of these, 1700 were used to train the perceptron layer, ""
""After the SOM and LISSOM maps were organized, a complete set of activation patterns on the two maps were collected. These patterns then formed the training input for the perceptron layer. Two separate versions were each trained for 500 epochs,""

",,2000.0,"""LISSOM was trained with 2000 patterns""",Likely,https://www.semanticscholar.org/paper/Laterally-Interconnected-Self-Organizing-Maps-in-Choe-Sirosh/785f5facc76538ceba6f6b9e2d7b641d322e9854,Laterally Interconnected Self-Organizing Maps in Hand-Written Digit Recognition,,"Yoonsuck Choe, Joseph Sirosh, R. Miikkulainen","An application of laterally interconnected self-organizing maps (LISSOM) to handwritten digit recognition is presented. The lateral connections learn the correlations of activity between units on the map. The resulting excitatory connections focus the activity into local patches and the inhibitory connections decorrelate redundant activity on the map. The map thus forms internal representations that are easy to recognize with e.g. a perceptron network. The recognition rate on a subset of NIST database 3 is 4.0% higher with LISSOM than with a regular Self-Organizing Map (SOM) as the front end, and 15.8% higher than recognition of raw input bitmaps directly. These results form a promising starting point for building pattern recognition systems with a LISSOM map as a front end.",Academia,United States of America,"SOTA improvement,Historical significance",,38.0,,,,,,,,,,,,,,,,,,,True
Support Vector Machines,"AT&T,Bell Laboratories",1995-09-01,Vision,Image classification,100000000.0,"Section 6.2.2: ""...polynomials
of degree 4 (that have more than 10^8 free parameters)...""
They used 4-degree polynomials for MNIST",,,MNIST,60000.0,"Section 6.2: ""The large database consists of 60,000 training and 10,000 test patterns""",,https://link.springer.com/article/10.1007/BF00994018,Support-Vector Networks,48968.0,"C Cortes, V Vapnik",,"Industry,Industry","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
Random Decision Forests,"AT&T,Bell Laboratories",1995-08-14,Other,Image classification,,,,,MNIST,60000.0,The images are from the 1992 NIST (National Institute of Standards and Technology) Competition,,https://ieeexplore.ieee.org/document/598994,Random decision forests,4678.0,TK Ho,,"Industry,Industry","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
Iterative Bootstrapping WSD,University of Pennsylvania,1995-06-26,Language,Language Structure Modeling,,,,,,460000000.0,the data were extracted from a 460 million word corpus,,https://dl.acm.org/doi/10.3115/981658.981684,Unsupervised Word Sense Disambiguation Rivaling Supervised Methods,2996.0,D Yarowsky,,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Predictive Coding NN,Technical University of Munich,1994-12-02,Language,Language modeling,206910.0,"5*80*430+430+430*80+80=206910
""P has nk input units and k output units. n is called the ""time-window size""
""Note that the time-window was quite small (n = 5).""
""alphabet consisted of k = 80 possible characters""
""P had 430 hidden units""",18621900000000.0,"2*206910*3*15000000=18621900000000=1.86e13
""The training phase consisted of 25 sweeps through the training set""",,600000.0,"Training dataset: 15000*40=600000
""The training set for the predictor was given by a set of 40 articles from the newspaper Miinchner M erkur, each containing between 10000 and 20000 characters.""",Confident,https://proceedings.neurips.cc/paper/1994/file/5705e1164a8394aace6018e27d20d237-Paper.pdf,Predictive Coding with Neural Nets: Application to Text Compression,,"J. Schmidhuber, Stefan Heil","To compress text files, a neural predictor network P is used to approximate the conditional probability distribution of possible ""next characters"", given n previous characters. P's outputs are fed into standard coding algorithms that generate short codes for characters with high predicted probability and long codes for highly unpredictable characters. Tested on short German newspaper articles, our method outperforms widely used Lempel-Ziv algorithms (used in UNIX functions such as ""compress"" and ""gzip"").",Academia,Germany,Historical significance,,25.0,,,,,,,,,,,,,,,,,,,True
NeuroChess,,1994-12-02,Games,Chess,72251.0,"""Prior to learning an evaluation function, the model M (175 input, 165 hidden, and 175 output units)"" = 58,090 parameters
""NeuroChess then learns an evaluation network V (175 input units, 0 to 80 hidden units, and one output units)."" = 14,161 parameters
Total: 58,090 + 14,161 = 72,251",858730812676.0,"Lower bound: 0.3*2*24*60*60*1400000=72576000000=7.26e10
Upper bound: 0.3*14*24*60*60*1400000*20=10160640000000=1.02e13
Geometric mean: 858730812676=8.59e11 (speculative)
""Thus far, experiments lasted for 2 days to 2 weeks on I to 20 SUN Sparc Stations. ""
SparcStation has 1.4 MFLOPS (https://ieeexplore.ieee.org/document/63671)
",,120000.0,"""is trained using a database of 120,000 expert games.""",Speculative,https://www.semanticscholar.org/paper/Learning-to-Play-the-Game-of-Chess-Thrun/4bc7a6dcb9e0e6c7a26800532e2a00f5572eea47,Learning to Play the Game of Chess,,S. Thrun,"This paper presents NeuroChess, a program which learns to play chess from the final outcome of games. NeuroChess learns chess board evaluation functions, represented by artificial neural networks. It integrates inductive neural network learning, temporal differencing, and a variant of explanation-based learning. Performance results illustrate some of the strengths and weaknesses of this approach.",,,"Historical significance,Highly cited",,,,,,,,,,,,,,,,,,,,,True
Mixture of linear models,,1994-12-02,Vision,Image classification,384000.0,"“In the example we describe, 7000 training images are sufficient to fit 384,000 parameters“",453600000000.0,"0.3*12*60*60*35000000=453600000000=4.54e11
Assuming a utilization of 0.3 and interpreting ""overnight"" as 12 hours.
“the training procedure is fast enough to do the fitting overnight on an R4400-based machine. “
R4400 has 35MFLOPS (“Compare this to the 200MHz R4400 which is rated at about 35MFLOPS”, http://www.sgidepot.co.uk/perf.html)",,7000.0,"""7000 training images are sufficient""",Likely,https://www.semanticscholar.org/paper/Recognizing-Handwritten-Digits-Using-Mixtures-of-Hinton-Revow/9dea20c1e5bbb1f543ff08113ffde5380c679f1f,Recognizing Handwritten Digits Using Mixtures of Linear Models,,"Geoffrey E. Hinton, M. Revow, P. Dayan","We construct a mixture of locally linear generative models of a collection of pixel-based images of digits, and use them for recognition. Different models of a given digit are used to capture different styles of writing, and new images are classified by evaluating their log-likelihoods under each model. We use an EM-based algorithm in which the M-step is computationally straightforward principal components analysis (PCA). Incorporating tangent-plane information [12] about expected local deformations only requires adding tangent vectors into the sample covariance matrices for the PCA, and it demonstrably improves performance.",,,Historical significance,,,12.0,"""the training procedure is fast enough to do the fitting overnight on an R4400-based machine.""",,,,,,,,,,,,,,,,,True
JPMAX,,1994-12-02,Vision,Image representation,4446.0,"Inputs are 12x12 pixels (Figure 3). They first train the architecture in Figure 2 a), then freeze it and train the additional layer in Figure 3 b).

Figure 2 a): 2*(12*12*15) + 2*15 = 4,350
Figure 2 b): 2*(12*12*15) + 2*15 + 2*(15*3) + 2*3 = 4,446",80828280.0,"Training 2a):  ""The learning took about 3000 iterations of steepest descent"" Assuming each iteration refers to a single image.
6 * 4446 * 3000 = 80,028,000

Training 2b): ""While keeping the first layer of weights frozen, this network was trained using exactly the same cost function as the first layer for about 30 iterations using a gradient-based learning method.""

6 * 4446 * 30 = 800,280

Total: 80,828,280",,1500.0,“Figure 3: 10 of the 1500 training patterns”,Speculative,https://proceedings.neurips.cc/paper_files/paper/1994/hash/4b0250793549726d5c1ea3906726ebfe-Abstract.html,JPMAX: Learning to Recognize Moving Objects as a Model-fitting Problem,,Suzanna Becker,"Unsupervised learning procedures have been successful at low-level feature extraction and preprocessing of raw sensor data. So far, however, they have had limited success in learning higher-order representations, e.g., of objects in visual images. A promising ap(cid:173) proach is to maximize some measure of agreement between the outputs of two groups of units which receive inputs physically sep(cid:173) arated in space, time or modality, as in (Becker and Hinton, 1992; Becker, 1993; de Sa, 1993). Using the same approach, a much sim(cid:173) pler learning procedure is proposed here which discovers features in a single-layer network consisting of several populations of units, and can be applied to multi-layer networks trained one layer at a time. When trained with this algorithm on image sequences of moving geometric objects a two-layer network can learn to perform accurate position-invariant object classification.",,,Historical significance,,,,,,,,,,,,,,,,,,,,,
GroupLens,Massachusetts Institute of Technology (MIT),1994-10-22,Recommendation,Recommender system,,"For each pair of users, the system computes the correlation between their scores in the articles they have rated.

Then to make the prediction of a score for a given article and user the system computes a weighted average taking into account the correlations with each other user, the average rating of each user and the average rating of the article.

So the system in total has n+m+n*n ~= n*n parameters, where n is the number of users and m is the number of articles.

To address scaling issues, the system is partioned into clusters of users. It's very unclear what is the number of users per cluster, though the Daily ratings traffic table provided suggests that is around 10k users ",,,,100000000.0,"For each pair of users, the system computes the correlation between their scores in the articles they have rated.

Then to make the prediction of a score for a given article and user the system computes a weighted average taking into account the correlations with each other user, the average rating of each user and the average rating of the article.

So the system in total has n+m+n*n ~= n*n parameters, where n is the number of users and m is the number of articles.

To address scaling issues, the system is partioned into clusters of users. It's very unclear what is the number of users per cluster, though the Daily ratings traffic table provided suggests that is around 10k users ",,https://dl.acm.org/doi/10.1145/192844.192905,GroupLens: an Open Architecture for Collaborative Filtering of Netnews,7733.0,"Paul Resnick, Neophytos Iacovou, Mitesh Suchak, Peter Bergstrom, John Riedl",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Ceramic-MLP,Sapienza Università di Roma,1994-01-07,Materials science,Pattern classification,1888.0,"Parameters: 100*16 + 16*16 + 16*2 = 1888
Architecture: ""The topology of the classifier was X-Y-Y-2, where X is the number of input components, Y is the number of neurons in each hidden layer and the number of neurons in the output layer is two, which is the number of classes. The two hidden layers were considered to have the same number of nodes for simplification purposes. ""
Input size: ""Each pattern consists of a 10 x 10 pixel sub-image.""
Hidden size: ""Experiments have been made on networks with 6, 9, 12 and 16 hidden nodes. """,4531200000.0,"Compute estimate: 2*1888*3*400000=4531200000=4.53e9
Training steps: ""In Fig. 6 we report the classification results obtained on the testing set in the 12 and 16 component compressed data after 400000 training iterations""",,80.0,"After the pre-processing phase, a training set of 80 patterns and a testing set of 64 patterns were available.",Likely,https://www.sciencedirect.com/science/article/abs/pii/S0921883108605506,Ceramic powder characterization by multilayer perceptron (MLP) data compression and classification,,"G. Bonifazi, P. Burrascano","A neural network approach for pattern classification has been explored in the present paper as part of the recent resurgence of interest in this area. Our research has focused on how a multilayer feedforward structure performs in the particular problem of particle characterization. The proposed procedure, after suitable data preprocessing, consists of two distinct phases: in the former, a feedforward neural network is used to obtain an image data compression. In the latter, a neural classifier is trained on the compressed data. All the tests have been conducted on a sample constituted by two different typologies of ceramic particles, each characterized by a different microstructure. The sample image of different particles acquired and directly digitalized by scanning electron microscopy has been processed in order to achieve the best conditions to obtain the boundary profile of each particle. The boundary is thus assumed to be representative of the morphological characteristics of the ceramic products. Using the neural approach, a classification accuracy as high as 100% on a training set of 80 sub-images was achieved. These networks correctly classified up to 96.9% of 64 testing patterns not contained in the training set.",Academia,Italy,Historical significance,,5000.0,,,,,,,,,,,,,,,,,,,
ANN Eye Tracker,,1993-11-29,Vision,Miscellaneous image analysis,5620.0,"15*15*20+20+50*10*2+100=5620
Hidden layer is split, 15*15 image input, 2*50 output neurons (see Figure 2)
Hidden size up to 20 neurons (""This architecture was used with varying numbers of hidden units in the single, divided, hidden layer; experiments with 10, 16 and 20 hidden units were performed. "")",17534400000.0,"2*5620*3*520000=17534400000
Training examples: 2000*260=520000
""As mentioned before, 2000 image/position pairs were gathered for training""
""All of the networks described in this paper are trained with the same parameters for 260 epochs""",,2000.0,,Confident,https://www.semanticscholar.org/paper/Non-Intrusive-Gaze-Tracking-Using-Artificial-Neural-Baluja-Pomerleau/574c0cf98825bf09b0ab7bbfe9ba89cd6090745e,Non-Intrusive Gaze Tracking Using Artificial Neural Networks,,"S. Baluja, D. Pomerleau","We have developed an artificial neural network based gaze tracking system which can be customized to individual users. A three layer feed forward network, trained with standard error back propagation, is used to determine the position of a user''s gaze from the appearance of the user''s eye. Unlike other gaze trackers, which normally require the user to wear cumbersome headgear, or to use a chin rest to ensure head immobility, our system is entirely non-intrusive. Currently, the best intrusive gaze tracking systems are accurate to approximately 0.75 degrees. In our experiments, we have been able to achieve an accuracy of 1.5 degrees, while allowing head mobility. In its current implementation, our system works at 15 hz. In this paper we present an empirical analysis of the performance of a large number of artificial neural network architectures for this task. Suggestions for further explorations for neurally based gaze trackers are presented, and are related to other similar artificial neural network applications such as autonomous road following.",,,Historical significance,,260.0,0.6,"""Training the 8x2 hidden layer network using the 15x40 input retina, with 2000 images, takes approximately 30-40 minutes on a Sun SPARC 10 machine. """,,,,,,,,,,,,,,,,,
Siamese-TDNN,Bell Laboratories,1993-08-01,Vision,Image classification,744.0,"""The input is 8 by 200 units, the first convolutional layer is 6 by 192 units with each unit's receptive field covering 8 by 9 units of the input. The first averaging layer is 6 by 64 units, the second convolution layer is 4 by 57 with 6 by 8 receptive fields and the second averaging layer is 4 by 19""
""Two separate sub-networks based on Time Delay Neural Networks (Lang and Hinton, 1988, Guyon et al. 1990) act on each input pattern to extract features,""
""All weights could be learnt, but the two sub-networks were constrained to have identical weights.""
L1: H=1, W=200, C=8, K=9, D=6
L2: H=1, W=64, C=6, K=8, D=4
Parameters:  7*9*8+5*8*6=744",12869570138112.0,"8073216*3*7701*69=12869570138112=1.29e13
Forward pass flop: 2*(2*200*200*8*6+2*64*64*6*4)=8073216
""We used up to 7,701 signature pairs""
Epochs: 69 (Table 1)
",,7701.0,"""We used up to 7,701 signature pairs""",Likely,https://www.semanticscholar.org/paper/Signature-Verification-Using-A-%22Siamese%22-Time-Delay-Bromley-Bentz/997dc5d9a058753f034422afe7bd0cc0b8ad808b,"Signature Verification using a ""Siamese"" Time Delay Neural Network",,"J. Bromley, James W. Bentz, L. Bottou, Isabelle M Guyon, Yann LeCun, C. Moore, Eduard Säckinger, Roopak Shah","This paper describes an algorithm for verification of signatures written on a pen-input tablet. The algorithm is based on a novel, artificial neural network, called a ""Siamese"" neural network. This network consists of two identical sub-networks joined at their outputs. During training the two sub-networks extract features from two signatures, while the joining neuron measures the distance between the two feature vectors. Verification consists of comparing an extracted feature vector with a stored feature vector for the signer. Signatures closer to this stored representation than a chosen threshold are accepted, all other signatures are rejected as forgeries.",Industry,United States of America,"Historical significance,Highly cited",,69.0,,,,,,,,,,,,,,,,,,,True
IBM-5,IBM,1993-06-15,Language,Translation,1658364.0,"The model is initiallized with 2.44E+09 translation probabilities, which are progressively culled until 1,658,364 remain. There are other parameters in the models (eg the fertility probabilities that relate each word in the input to the number of words it will align to) but the parameter count is dominated by the translation probabilities.",,,Proceedings of the Canadian parliament,53358600.0,"""They used the algorithm to extract a large number of translations from several years of the proceedings of the Canadian parliament. From these translations, we have chosen as our training data those for which both the English sentence and the French sentence are 30 or fewer words in length. This is a collection of 1,778,620 translations.""",,https://dl.acm.org/doi/10.5555/972470.972474,The Mathematics of Statistical Machine Translation: Parameter Estimation,5752.0,"Peter F. Brown, Stephen A. Della Pietra, Vincent J. Della Pietra, Robert L. Mercer",,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Boosting,Bell Laboratories,1992-11-30,Vision,Digit recognition,2578.0,"“The network has 4645 neurons, 2578 different weights, and 98442 connections.“",,,,9709.0,“divided into 9709 training examples and 2007 validation samples.”,Likely,https://www.semanticscholar.org/paper/Improving-Performance-in-Neural-Networks-Using-a-Drucker-Schapire/77b5185dafb9e5b884a677a32713e54c253a4e0b,Improving Performance in Neural Networks Using a Boosting Algorithm,,"H. Drucker, R. Schapire, Patrice Y. Simard","A boosting algorithm converts a learning machine with error rate less than 50% to one with an arbitrarily low error rate. However, the algorithm discussed here depends on having a large supply of independent training samples. We show how to circumvent this problem and generate an ensemble of learning machines whose performance in optical character recognition problems is dramatically improved over that of a single network. We report the effect of boosting on four databases (all handwritten) consisting of 12,000 digits from segmented ZIP codes from the United State Postal Service (USPS) and the following from the National Institute of Standards and Testing (NIST): 220,000 digits, 45,000 upper case alphas, and 45,000 lower case alphas. We use two performance measures: the raw error rate (no rejects) and the reject rate required to achieve a 1% error rate on the patterns not rejected. Boosting improved performance in some cases by a factor of three.",Industry,United States of America,Historical significance,,,,,,,,,,,,,,,,,,,,,
Cancer drug mechanism prediction,National Cancer Institute,1992-10-16,Medicine,Drug discovery,594.0,"“The network shown has 60 input PEs, one for each cell line, and 6 output PEs“
“Neural networks with three to nine hidden layer PEs used”
9*60 + 6*9 = 594",53460000.0,"2*594*3*15000=53460000=5.35e7
“The extent of training was 15,000 presentations“",,,,Likely,https://pubmed.ncbi.nlm.nih.gov/1411538/,Neural computing in cancer drug development: predicting mechanism of action,,"John N. Weinstein, Kurt W. Kohn, Michael R. Grever, Vellarkad N.
Viswanadhan, Lawrence V. Rubinstein, Anne P. Monks, Dominic A. Scudiero, Lester Welch, Antonis D. Koutsoukos, August J. Chiausa, Kenneth D. Paull","Described here are neural networks capable of predicting a drug's mechanism of action from its pattern of activity against a panel of 60 malignant cell lines in the National Cancer Institute's drug screening program. Given six possible classes of mechanism, the network misses the correct category for only 12 out of 141 agents (8.5 percent), whereas linear discriminant analysis, a standard statistical technique, misses 20 out of 141 (14.2 percent). The success of the neural net indicates several things. (i) The cell line response patterns are rich in information about mechanism. (ii) Appropriately designed neural networks can make effective use of that information. (iii) Trained networks can be used to classify prospectively the more than 10,000 agents per year tested by the screening program. Related networks, in combination with classical statistical tools, will help in a variety of ways to move new anticancer agents through the pipeline from in vitro studies to clinical application.",Government,United States of America,Historical significance,,,,,,,,,,,,,,,,,,,,,
Golem,Alan Turing Institute,1992-10-01,Biology,Protein folding prediction,,,,,,1612.0,Table 1,Confident,https://www.semanticscholar.org/paper/Protein-secondary-structure-prediction-using-Muggleton-King/9f744e48091a24b569435d070920e60db45f4fdc,Protein secondary structure prediction using logic-based machine learning.,,"S. Muggleton, Ross D. King, M. J. Sternberg","Many attempts have been made to solve the problem of predicting protein secondary structure from the primary sequence but the best performance results are still disappointing. In this paper, the use of a machine learning algorithm which allows relational descriptions is shown to lead to improved performance. The Inductive Logic Programming computer program, Golem, was applied to learning secondary structure prediction rules for alpha/alpha domain type proteins. The input to the program consisted of 12 non-homologous proteins (1612 residues) of known structure, together with a background knowledge describing the chemical and physical properties of the residues. Golem learned a small set of rules that predict which residues are part of the alpha-helices--based on their positional relationships and chemical and physical properties. The rules were tested on four independent non-homologous proteins (416 residues) giving an accuracy of 81% (+/- 2%). This is an improvement, on identical data, over the previously reported result of 73% by King and Sternberg (1990, J. Mol. Biol., 216, 441-457) using the machine learning program PROMIS, and of 72% using the standard Garnier-Osguthorpe-Robson method. The best previously reported result in the literature for the alpha/alpha domain type is 76%, achieved using a neural net approach. Machine learning also has the advantage over neural network and statistical methods in producing more understandable results.",Government,United Kingdom of Great Britain and Northern Ireland,"Historical significance,SOTA improvement",,,,,,,,,,,,,,,,,,,,,
Fuzzy NN,Indian Statistical Institute,1992-09-01,Speech,Speech recognition,1166.0,"Table II: ""he neural network has three hidden layers, with m hidden nodes in each layer"", m = 20, input dim. = 9, output dim. = 6

9*20+20*20+20*20+6*20+66=1166",1403117760.0,1166 params * 2 FLOP/param * (3 for forward + backward pass) * 460 epochs * 436 examples,,436.0,"""The above-mentioned algorithm was tested on a set of 871 Indian Telugu vowel sounds"" and 50% of the dataset was used. 871*0.5 ~= 436",Confident,https://ieeexplore.ieee.org/document/159058,"Multilayer perceptron, fuzzy sets, and classification",1223.0,"SK Pal, S Mitra",,Academia,India,Highly cited,,,,,,,,,,,,,,,,,,,,,
TD-Gammon,IBM,1992-05-01,Games,Backgammon,25000.0,"""The best performance was obtained with a network containing 80 hidden units and over 25,000 weights.""",18232157622832.703,"Extracted from AI and Compute (https://openai.com/blog/ai-and-compute/) charts by using https://automeris.io/WebPlotDigitizer/.

OpenAI estimate: 1.8e13

Hardware estimate (likely overestimates due to simulation effort)
""on an IBM RS/6000 workstation, the smallest network was trained in several hours, while the largest net required two weeks of simulation time.""
IBM RS/6000 achieves 1.5 GFLOPS on Linpack (https://link.springer.com/rwe/10.1007/978-0-387-09766-4_232) 
14*24*60*60*0.5*1500000000=9.072e+14

Operation counting estimate: 
Forward FLOP: 50000
Each legal move had to be evaluated separately, assuming an average of 10 move options (+2 for backward passes of the chosen move):
50000*12*300000*21=3.78e+12

Keeping the OpenAI estimate as the median estimate. ",,6300000.0,"""This network was trained
for over 300,000 training games""

Each backgammon game has an avg of around 21 movements
https://www.bkgm.com/rgb/rgb.cgi?view+712",Speculative,https://papers.nips.cc/paper/1991/file/68ce199ec2c5517597ce0a4d89620f55-Paper.pdf,Practical Issues in Temporal Difference Learning,1344.0,G Tesauro,,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,True
Weight Decay,,1991-12-02,Speech,Speech synthesis,8386.0," 7*26*40+40+40*26+26=8386
""The network had 7 x 26 input units, 40 hidden units and 26 output units""",75474000000.0,"2*8386*3*1500000=75474000000=7.55e10
""It was trained on 400 to 5000 random words from the data base of around 20.000 words,""
""The top full line corresponds to the generalization error after 300 epochs""
",,5000.0,"""It was trained on 400 to 5000 random words from the data base of around 20.000 words,""",Confident,https://www.semanticscholar.org/paper/A-Simple-Weight-Decay-Can-Improve-Generalization-Krogh-Hertz/48e1de7d085808004d5f0493d486669a3d2930b5,A Simple Weight Decay Can Improve Generalization,,"A. Krogh, J. Hertz","It has been observed in numerical simulations that a weight decay can improve generalization in a feed-forward neural network. This paper explains why. It is proven that a weight decay has two effects in a linear network. First, it suppresses any irrelevant components of the weight vector by choosing the smallest vector that solves the learning problem. Second, if the size is chosen right, a weight decay can suppress some of the effects of static noise on the targets, which improves generalization quite a lot. It is then shown how to extend these results to networks with hidden layers and non-linear units. Finally the theory is confirmed by some numerical simulations using the data from NetTalk.",,,"Highly cited,Historical significance",,300.0,,,,,,,,,,,,,,,,,,,True
SRN-Encoded Grammatical Structures,University of California San Diego,1991-09-01,Language,Language Structure Modeling,,,,,,177805.0,4 training sets of 10k sentences each. Total number of words calculated by multiplying 10k and the avg. number of words per sentence in the training set.,,https://dl.acm.org/doi/10.1007/BF00114844,"Distributed representations, simple recurrent networks, and grammatical structure",1717.0,J. L. Elman,,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
RAAM,,1990-11-01,Other,Representation learning,1536.0,"Largest model:
""A 48-16-48 RAAM learned to construct representations ""
Parameters 48*16*2 = 1536",,,,29.0,29 sentence fragments (Figure 10),Confident,https://www.sciencedirect.com/science/article/abs/pii/000437029090005K?via%3Dihub,Recursive Distributed Representations,,Jordan B. Pollack,"A longstanding difficulty for connectionist modeling has been how to represent variable-sized recursive data structures, such as trees and lists, in fixed-width patterns. This paper presents a connectionist architecture which automatically develops compact distributed representations for such compositional structures, as well as efficient accessing mechanisms for them. Patterns which stand for the internal nodes of fixed-valence trees are devised through the recursive use of backpropagation on three-layer auto-associative encoder networks. The resulting representations are novel, in that they combine apparently immiscible aspects of features, pointers, and symbol structures. They form a bridge between the data structures necessary for high-level cognitive tasks and the associative, pattern recognition machinery provided by neural networks.",,,Highly cited,,,,,,,,,,,,,,,,,,,,,
SexNet compression,,1990-10-01,Vision,Image representation,72940.0,"900*40*2+40+900=72940
“Images sampled at 30x30 were compressed using a 900x40x900 fully connected back-propagation network”",78775200000.0,"2*72940*3*90*2000=78775200000
“The compression network trained for 2000 runs on each of 90 faces”",,90.0,“The compression network trained for 2000 runs on each of 90 faces”,Confident,https://www.semanticscholar.org/paper/SEXNET%3A-A-Neural-Network-Identifies-Sex-From-Human-Golomb-Lawrence/cbf90aa78fea0c8a1028705d92bc4bc7808ddeeb,SEXNET: A Neural Network Identifies Sex From Human Faces,,"B. Golomb, D. T. Lawrence, T. Sejnowski","Sex identification in animals has biological importance. Humans are good at making this determination visually, but machines have not matched this ability. A neural network was trained to discriminate sex in human faces, and performed as well as humans on a set of 90 exemplars. Images sampled at 30×30 were compressed using a 900×40×900 fully-connected back-propagation network; activities of hidden units served as input to a back-propagation ""SexNet"" trained to produce values of 1 for male and 0 for female faces. The network's average error rate of 8.1% compared favorably to humans, who averaged 11.6%. Some SexNet errors mimicked those of humans.",,,Historical significance,,2000.0,,,,,,,,,,,,,,,,,,,True
SexNet classification,,1990-10-01,Vision,Image classification,1640.0,Largest classification model: 40*40 + 40=1640 (Figure 2),,,,80.0,"“Each training on a different 80 faces, leaving a distinct set of 10 untrained faces for testing”",Likely,https://www.semanticscholar.org/paper/SEXNET%3A-A-Neural-Network-Identifies-Sex-From-Human-Golomb-Lawrence/cbf90aa78fea0c8a1028705d92bc4bc7808ddeeb,SEXNET: A Neural Network Identifies Sex From Human Faces,,"B. Golomb, D. T. Lawrence, T. Sejnowski","Sex identification in animals has biological importance. Humans are good at making this determination visually, but machines have not matched this ability. A neural network was trained to discriminate sex in human faces, and performed as well as humans on a set of 90 exemplars. Images sampled at 30×30 were compressed using a 900×40×900 fully-connected back-propagation network; activities of hidden units served as input to a back-propagation ""SexNet"" trained to produce values of 1 for male and 0 for female faces. The network's average error rate of 8.1% compared favorably to humans, who averaged 11.6%. Some SexNet errors mimicked those of humans.",,,"Historical significance,Highly cited",,,,,,,,,,,,,,,,,,,,,
ISR network,Stanford University,1990-10-01,Vision,Character recognition,,,,,,9000.0,"“We used a training and test set of about 9,000 and 1,800 characters respectively. “",Confident,https://papers.nips.cc/paper_files/paper/1990/hash/e46de7e1bcaaced9a54f1e9d0d2f800d-Abstract.html,Integrated Segmentation and Recognition of Hand-Printed Numerals,,"James Keeler, David Rumelhart, Wee Leow","Neural network algorithms have proven useful for recognition of individ(cid:173) ual, segmented characters. However, their recognition accuracy has been limited by the accuracy of the underlying segmentation algorithm. Con(cid:173) ventional, rule-based segmentation algorithms encounter difficulty if the characters are touching, broken, or noisy. The problem in these situations is that often one cannot properly segment a character until it is recog(cid:173) nized yet one cannot properly recognize a character until it is segmented. We present here a neural network algorithm that simultaneously segments and recognizes in an integrated system. This algorithm has several novel features: it uses a supervised learning algorithm (backpropagation), but is able to take position-independent information as targets and self-organize the activities of the units in a competitive fashion to infer the positional information. We demonstrate this ability with overlapping hand-printed numerals.",Academia,United States of America,Historical significance,,,,,,,,,,,,,,,,,,,,,
Bankruptcy-NN,,1990-06-17,Other,Binary classification,36.0,"""The input layer consisted of the five nodes, one for each of the ratios. The hidden layer consisted of 5 node.;. The output layer consisted of only one neuron""
30 weights + 6 biases = 36",3059337600.0," 2*36*3*74*191400=3,059,337,600=3.06e9
""Convergence was reached after 191,400 iterations""",,370.0,"""The first (training) subsample of 74 firms data""
5 inputs per firm
74*5 = 370",Confident,https://www.semanticscholar.org/paper/A-neural-network-model-for-bankruptcy-prediction-Odom-Sharda/ead9fa02902850a7418fb5ba720f3d9d8ab2f88b,A neural network model for bankruptcy prediction,,"M. Odom, R. Sharda","A neural network model is developed for prediction of bankruptcy, and it is tested using financial data from various companies. The same set of data is analyzed using a more traditional method of bankruptcy prediction, multivariate discriminant analysis. A comparison of the predictive abilities of both the neural network and the discriminant analysis method is presented. The results show that neural networks might be applicable to this problem",,,"Historical significance,Highly cited",,191400.0,24.0,,,,,,,,,,,,,,,,,,True
Zip CNN,"AT&T,Bell Laboratories",1989-12-01,Vision,Character recognition,9760.0,"""In summary, the network has 1256 units, 64,660 connections, and 9760 independent parameters""",1496338054440.0,"Its a deep CNN so we assume a backward-forward ratio of 2:1
 2*64660*3*23*167693=1496338054440
""The network was trained for 23
passes through the training set (167,693 pattern presentations).""",Buffalo zips,7291.0,"The digits were written
by many different people, using a great variety of sizes, writing styles,
and instruments, with widely varying amounts of care; 7291 examples
are used for training the network and 2007 are used for testing the generalization performance",Confident,https://ieeexplore.ieee.org/document/6795724,Backpropagation applied to handwritten zip code recognition,10587.0,Y. LeCun B. Boser J. S. Denker D. Henderson R. E. Howard W. Hubbard L. D. Jackel,,"Industry,Industry","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,True
Innervator,"Stanford University,California Institute of Technology",1989-12-01,Mathematics,Pattern classification,10.0,Each net has 5 units,120000000.0,10 params * 6 FLOP/param/pass * 4 datapoints * 1000 epochs * 50 individuals * 10 generations,,4.0,,Confident,https://www.researchgate.net/publication/220885651_Designing_Neural_Networks_using_Genetic_Algorithms,Designing neural networks using genetic algorithms,1132.0,"Geoffrey Miller, Peter Todd, and Shailesh Hegde",,"Academia,Academia","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
ALVINN,Carnegie Mellon University (CMU),1989-12-01,Driving,Self-driving car,36627.0,"1217*29 + 29*46 =36627
“Each of these 1217 input units is fully connected to the hidden layer of 29 units, which is in turn fully connected to the output layer. The output layer consists of 46 units, divided into two groups.”",10548576000.0,"2 * 36627 * 3 * 40 * 1200 = 10548576000 = 1.05e10
36627 parameters
""After 40 epochs of training on the 1200 simulated road snapshots""",Road snapshots,1200.0,"""Training involves first creating a set of 1200 road snapshots depicting roads with a wide variety of retinal orientations and positions, under a variety of lighting conditions and with realistic noise levels""",Confident,https://proceedings.neurips.cc/paper/1988/hash/812b4ba287f5ee0bc9d43bbf5bbe87fb-Abstract.html,ALVINN: an autonomous land vehicle in a neural network,1962.0,DA Pomerleau,,Academia,United States of America,Highly cited,,40.0,,,,,,,,,,,,,,,,,,,True
Speaker-independent vowel classification,University of Washington,1989-11-27,Speech,Speech recognition,3040.0,"“The MLP consisted of 64 inputs (the DFf coefficients. each nonnalized between zero and one), a single hidden layer of 40 units, and 12 output units;”",7485696000.0,"2*3040*3*410400=7485696000=7.49e9
“The network was trained on 100 iterations through the 4104 training vectors.”",,4104.0,,Confident,https://www.semanticscholar.org/paper/Performance-Comparisons-Between-Backpropagation-and-Atlas-Cole/e42d2b89fcb4a1a3dfa63408f424f76975ed1e1b,Performance Comparisons Between Backpropagation Networks and Classification Trees on Three Real-World Applications,,"L. Atlas, R. Cole, J. Connor, M. El-Sharkawi, R. Marks, Y. Muthusamy, E. Barnard","Multi-layer perceptrons and trained classification trees are two very different techniques which have recently become popular. Given enough data and time, both methods are capable of performing arbitrary non-linear classification. We first consider the important differences between multi-layer perceptrons and classification trees and conclude that there is not enough theoretical basis for the clear-cut superiority of one technique over the other. For this reason, we performed a number of empirical tests on three real-world problems in power system load forecasting, power system security prediction, and speaker-independent vowel identification. In all cases, even for piecewise-linear trees, the multi-layer perceptron performed as well as or better than the trained classification trees.",Academia,United States of America,Historical significance,,100.0,,,,,,,,,,,,,,,,,,,True
Handwritten Digit Recognition System,AT&T,1989-11-27,Vision,Digit recognition,2578.0,"""In summary, the network has 4635 units, 98442 connections, and 2578 independent parameters.“",181440000000.0,"1.4e6 * 3 * 24 * 60* 60 * 0.5 = 181440000000 = 1.81e11
""A complete training session (30 passes through the training set plus test) takes about 3 days on a SUN SPARCstation 1""
Sparcstation 1 has an estimated compute of 1.4 MFLOPS (source: https://ieeexplore.ieee.org/document/63671 )",,9840.0,"""After 30 training passes the error rate on training set (7291 handwritten plus 2549 printed digits)""",Confident,https://www.semanticscholar.org/paper/Handwritten-Digit-Recognition-with-a-Network-LeCun-Boser/86ab4cae682fbd49c5a5bedb630e5a40fa7529f6,Handwritten Digit Recognition with a Back-Propagation Network,,"Yann LeCun, B. Boser, J. Denker, D. Henderson, R. Howard, W. Hubbard, L. Jackel","We present an application of back-propagation networks to handwritten digit recognition. Minimal preprocessing of the data was required, but architecture of the network was highly constrained and specifically designed for the task. The input of the network consists of normalized images of isolated digits. The method has 1% error rate and about a 9% reject rate on zipcode digits provided by the U.S. Postal Service.",Industry,United States of America,Historical significance,,30.0,72.0,"""A complete training session (30 passes through the training set plus test) takes about 3 days on a SUN SPARCstation 1""",,,,,,,,,,,,,,,,,True
Truck backer-upper,Stanford University,1989-06-18,Driving,Self-driving car,805.0,6*25+25+8*45+45*6=805 (see Figure 6),,,,,,Confident,https://ieeexplore.ieee.org/document/118723,"The truck backer-upper: an example of self-learning in neural networks
",,"Derrick Nguyen, Bernard Widrow","Neural networks can be used to solve highly nonlinear control problems. A two-layer neural network containing 26 adaptive neural elements has learned to back up a computer-simulated trailer truck to a loading dock, even when initially jackknifed. It is not yet known how to design a controller to perform this steering task. Nevertheless, the neural net was able to learn of its own accord to do this, regardless of initial conditions. Experience gained with the truck backer-upper should be applicable to a wide variety of nonlinear control problems.",Academia,United States of America,Historical significance,,,,,,,,,,,,,,,,,,,,,
Invariant image recognition,Complutense University of Madrid,1989-06-18,Vision,Representation learning,,,27000000000.0,"0.5*6*60*60*2.5e6 = 27000000000 = 2.7e10
Trained for 6h on a SUN-4 (section 4)
Assumed utilization of 0.5
SUN-4 is estimated at 2.5e6 FLOP/s (Nordhaus, 2007)",,,,Confident,https://ieeexplore.ieee.org/document/118669,Invariant image recognition using a multi-network neural model,,"V. Cruz, G. Cristóbal, T. Michaux, S. Barquin","A new model which permits visual patterns to be invariant to affine transforms (translations, rotations, and dimensions) is presented. A training multilayer fully connected network of ADALINE neurons is proposed as a preprocessing step for invariant image extraction. A second neural network has been trained by the popular backpropagation algorithm for recovering the real image without distortions. First, the sample invariants are obtained by the preprocessing network. In the second step, the general invariant that includes all the sample invariants is computed. Afterward, the reordered sample invariants are input to a multilayer neural network trained by the backpropagation algorithm. The original image, without distortions, is obtained in the output of this system. Several test images have been computed, and evaluation of the results shows that in the case of images with intrinsic perceptual similarity, the learning procedure leads to a global invariant extraction that requires less computational effort in comparison with an arbitrary training selection. After the training process, this system is able to extract the generalized invariant image from an arbitrary picture recovering the input image without distortions.<<ETX>>",Academia,Spain,Historical significance,,,6.0,Section 4,,,,,,,,,,,,,,,,,True
Time-delay neural networks,"Advanced Telecommunications Research Institute,Carnegie Mellon University (CMU)",1989-03-03,Speech,Speech recognition,,,,,,,,Unknown,https://ieeexplore.ieee.org/abstract/document/21701,Phoneme recognition using time-delay neural networks,3445.0,"A. Waibel, T. Hanazawa, G. Hinton, K. Shikano, and K. J. Lang",,"Industry,Academia","Japan,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
Q-learning,University of London,1989-01-01,"Robotics,Games","Route finding,System control",,,,,,,,Unknown,http://www.cs.rhul.ac.uk/~chrisw/thesis.html,Learning from delayed rewards,8025.0,Christopher Watkins,,Academia,United Kingdom of Great Britain and Northern Ireland,Highly cited,,,,,,,,,,,,,,,,,,,,,
MLP baggage detector,Science Applications International Corporation / SAIC,1989-01-01,Vision,Image classification,,"3 layer network, input layer (<20), hidden layer, output layer (3)",,,,40000.0,"""The database contains about 20,000 bags without simulants and a like number with; although, because of changes made in the systems as they were developed, not all measurements are on the same basis.""",Confident,https://www.semanticscholar.org/paper/Detection-of-explosives-in-checked-airline-baggage-Shea-Lin/71da4057401f459bc079696a029aee45a0a89728,Detection of explosives in checked airline baggage using an artificial neural system,,"Patrick M Shea, Vincent Lin","An artificial neural system (ANS) has been applied to the problem of discriminating between suitcases with and without explosives. The input to the ANS was data gathered during the field tests of a prototype explosive detection system. The performance of the ANS is contrasted with the standard statistical technique (discriminant analysis) used, and is shown to exceed the performance of the standard technique over a substantial range. The system that generated the data, the nature of the data, the basics of discriminant analysis, and the technique used in developing the network are described.",Industry,United States of America,Historical significance,One of the first real-world use cases of neural networks,2000.0,,,,,,,,,,,,,,,,,,,
MLN-ASR,McGill University,1988-08-01,Speech,Speech recognition,10000.0,"“For an MLN of about 10,000 links, the time was 115 CPU msecs for the recognition of a spoken letter and 317 msecs for the learning of a spoken letter on the SUN 4/280. A 20% reduction was obtained on the VAX 8650”",296425000.0,"“For an MLN of about 10,000 links, the time was 115 CPU msecs for the recognition of a spoken letter and 317 msecs for the learning of a spoken letter on the SUN 4/280. A 20% reduction was obtained on the VAX 8650”, “Learning and recognition were performed on a VAX 8650.”
Dataset: 70*10*2=1400 (Train) 10*10*2=200 (Test)
“The ten words of the El set were pronounced twice by 80 speakers (40 males and 40 females)”
“The data from 70 speakers were used as a training set while the data from the remaining 10 speakers (6 males and 4 females) were used for the test”
VAX 8650 FLOPS  = 1.67E+06 (Nordhaus)
Training time: 317ms * 1400  * 0.8 = 355040ms = 355s
Estimate: 0.5 * 1.67e6 * 355 = 296425000 = 2.96e8",,1400.0,,Confident,https://aaai.org/papers/00734-aaai88-130-data-driven-execution-of-multi-layered-networks-for-automatic-speech-recognition/,Data-Driven Execution of Multi-Layered Networks for Automatic Speech Recognition,,"Renato De Mori, Yoshua Bengio, Régis Cardin","A set of Multi-Layered Networks (MLN) for Automatic Speech Recognition (ASR) is proposed. Such a set allows the integration of information extracted with variable resolution in the time and frequency domains and to keep the number of links between nodes of the networks small in order to allow significant generalization during learning with a reasonable training set size. Subsets of networks can be executed depending on preconditions based on descriptions of the time evolution of signal energies allowing spectral properties that are significant in different acoustic situations to be learned.
Preliminary experiments on speaker-independent recognition of the letters of the E-set are reported. Voices from 70 speakers were used for learning. Voices of 10 new speakers were used for test. An overall error rate of 9.5% was obtained in the test showing that results better than those previously reported can be achieved.",Academia,Canada,Historical significance,,,0.1,,,,,,,,,,,,,,,,,,True
NetTalk (transcription),Princeton University,1987-06-06,Speech,Speech synthesis,18629.0,"""The connections in the network are specified by a total of 18629
weight parameters (including a variable threshold for each unit)""",28328002560.0,18629 params * 2 FLOP/param * (3 for forward + backward pass) * 55 epochs * 1024 words/epoch * 4.5 letters/word,,1024.0,"We used the first two pages of transcriptions, which contained 1024 words from a child in firstgrade",Confident,http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=03A3D3EDF0BAF35405ABCF083411B55E?doi=10.1.1.154.7012&rep=rep1&type=pdf,Parallel Networks that Learn to Pronounce English Text,2558.0,"TJ Sejnowski, CR Rosenberg",,Academia,United States of America,Highly cited,,55.0,,,,,,,,,,,,,,,,,,,True
NetTalk (dictionary),Princeton University,1987-06-06,Speech,Speech synthesis,18629.0,"""The connections in the network are specified by a total of 18629 weight parameters (including a variable threshold for each unit)""",27664065000.0,18629 params * 2 FLOP/param * (3 for forward + backward pass) * 55 epochs * 1000 words/epoch * 4.5 letters/word (estimated number of letters),,1000.0,"""A subset of the 1000 most commonly occurring words was selected from this dictionary based on frequency counts in the Brown corpus""",Confident,http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=03A3D3EDF0BAF35405ABCF083411B55E?doi=10.1.1.154.7012&rep=rep1&type=pdf,Parallel Networks that Learn to Pronounce English Text,2558.0,"TJ Sejnowski, CR Rosenberg",,Academia,United States of America,Highly cited,,55.0,,,,,,,,,,,,,,,,,,,True
Optimized Multi-Scale Edge Detection,Massachusetts Institute of Technology (MIT),1986-11-01,Vision,Object detection,,,,,,,,Unknown,https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=4767851,A Computational Approach To Edge Detection,37931.0,John Canny,,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Back-propagation,"University of California San Diego,Carnegie Mellon University (CMU)",1986-10-01,Mathematics,Triplet completion,720.0,"Architecture in Figure 3: 

24+12 input -> 6 + 6 hidden -> 12 hidden -> 6 hidden -> 24 output

Parameters: 6*24+6*12+12*12+6*12+24*12=720",673920000.0,"We assume that the number of mult-adds per pass is equal to the number of parameters -> 2*720=1440 FLOP per forward pass.

""We trained the network for 1500 sweeps""
There are 104 relationship triplets (""[...] of the 104 possible triplets"")

FLOP: 1500*104*3*1440=673920000

",,104.0,"There are 104 relationship triplets (""[...] of the 104 possible triplets"")",Confident,https://www.semanticscholar.org/paper/Learning-representations-by-back-propagating-errors-Rumelhart-Hinton/052b1d8ce63b07fec3de9dbb583772d860b7c769,Learning representations by back-propagating errors,25930.0,"Rumelhart, David E.; Hinton, Geoffrey E.; Williams, Ronald J.",,"Academia,Academia","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,True
Distributed representation NN,Carnegie Mellon University (CMU),1986-08-15,Other,Representation learning,432.0,"Parameters: 24*6 + 12*6 + 12*12 + 12*6 =432
""Figure 5: The activity levels in a five-layer network after it has learned. The bottom layer has 24 input units on the left for representing person 1 and 12 units on the right for representing the relationship. The white squares inside these two groups show the activity levels of the units. There is one active unit in the first group (representing Colin) and one in the second group (representing has-aunt). Each of the two groups of input units is totally connected to its own group of 6 units in the second layer. These two groups of 6 must learn to encode the input terms as distributed patterns of activity. The second layer is totally connected to the central layer of 12 units, and this layer is connected to the penultimate layer of 6 units.""
",388800000.0," 2*432*3*1500*100=388800000=3.9e8
""After 1500 sweeps through all 100 training examples the weights were very stable """,,100.0,"""After 1500 sweeps through all 100 training examples the weights were very stable """,Confident,https://www.cs.toronto.edu/~hinton/absps/families.pdf,Learning distributed representations of concepts.,,Geoffrey E. Hinton,,Academia,United States of America,"Historical significance,Highly cited",,1500.0,,,,,,,,,,,,,,,,,,,True
PDP model for serial order,University of California San Diego,1986-01-05,Speech,Speech synthesis,,,,,,,,Unknown,https://www.osti.gov/biblio/6910294,Serial order: A parallel distributed processing approach,1502.0,"Jordan, M.I.",,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Error Propagation,"University of California San Diego,Carnegie Mellon University (CMU)",1986-01-03,Other,"Text classification,Image classification",,,,,,,,Unknown,https://stanford.edu/~jlmcc/papers/PDP/Volume%201/Chap8_PDP86.pdf,Learning internal representations by error propagation,27322.0,"D. E. Rumelhart, G. E. Hinton, and R. J. Williams",,"Academia,Academia","United States of America,United States of America",Highly cited,,,,,,,,,,,,,,,,,,,,,
Learnability theory of language development,Massachusetts Institute of Technology (MIT),1984-07-01,Language,Language Structure Modeling,,,,,,,,Unknown,https://psycnet.apa.org/record/1985-97439-000,Language learnability and language development,4730.0,Steven Pinker,,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Hierarchical Cognitron,NHK Broadcasting Science Research Laboratories,1984-04-01,Other,Pattern recognition,9315.0,"Parameters 5*5*9*3*3 + 3*3*9*3*3*9 + 9*3*3*9 = 9315
""The numbers of excitatory cells in these four layers were: 7x7 in U0, 5x5 in  U1, 3x3 in U2, and 9 in U3""
""Each feature-extracting cell in layer U1 receives excitatory modifiable afferent connections from 3x3 cells in layer U0""
""On the other hand, each feature, each extracting cell in layers U2 and U3 receives excitatory modifiable connections from all 9 cells in each of the 3 x 3 hypercolumns in the layer preceding it. Therefore, it receives 3 x 3 x 9 afferent excitatory modifiable connections altogether""
",,,,5.0,"""Five training patterns used for the self-organization are shown in Fig. 4""",Speculative,https://link.springer.com/article/10.1007/BF00337157,A hierarchical neural network model for associative memory,,K. Fukushima,"A hierarchical neural network model with feedback interconnections, which has the function of associative memory and the ability to recognize patterns, is proposed. The model consists of a hierarchical multi-layered network to which efferent connections are added, so as to make positive feedback loops in pairs with afferent connections. The cell-layer at the initial stage of the network is the input layer which receives the stimulus input and at the same time works as an output layer for associative recall. The deepest layer is the output layer for pattern-recognition. Pattern-recognition is performed hierarchically by integrating information by converging afferent paths in the network. For the purpose of associative recall, the integrated information is again distributed to lower-order cells by diverging efferent paths. These two operations progress simultaneously in the network. If a fragment of a training pattern is presented to the network which has completed its self-organization, the entire pattern will gradually be recalled in the initial layer. If a stimulus consisting of a number of training patterns superposed is presented, one pattern gradually becomes predominant in the recalled output after competition between the patterns, and the others disappear. At about the same time when the recalled pattern reaches a steady state in he initial layer, in the deepest layer of the network, a response is elicited from the cell corresponding to the category of the finally-recalled pattern. Once a steady state has been reached, the response of the network is automatically extinguished by inhibitory signals from a steadiness-detecting cell. If the same stimulus is still presented after inhibition, a response for another pattern, formerly suppressed, will now appear, because the cells of the network have adaptation characteristics which makes the same response unlikely to recur. Since inhibition occurs repeatedly, the superposed input patterns are recalled one by one in turn.",Industry,Japan,Historical significance,,,,,,,,,,,,,,,,,,,,,
ASE+ACE,University of Massachusetts Amherst,1983-09-01,Robotics,Pole balancing,324.0,"The system consists of two parts: ACE and ASE, each with 162 weights (=324 parameters). Found in Figures 2 and 3.",324000000.0,"324 * 2 * 500000 = 324000000 = 3.24e8. The calculation assumes ""compute per forward pass"" = ""number of parameters"" = ""compute per backward pass"". Their model only has a single layer and is trained with simple update rules instead of gradient descent. Training details are described in Section IX.

Note that this is the compute for a single run; they appear to have repeated training 10 times for the ASE+ACE system.",,500000.0,"""Runs consisted of 100 trials unless the run's duration exceeded 500 000 time steps (approximately 2.8 h of simulated real time)"" 
""Almost all runs of the ASE/ACE system [...], were terminated after 500 000"" (Section IX)",Likely,https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=6313077,Neuronlike adaptive elements that can solve difficult learning control problems,4296.0,"Andrew G. Barto, Richard S. Sutton, and Charles W. Anderson","It is shown how a system consisting of two neuronlike adaptive elements can solve a difficult learning control problem. The task is to balance a pole that is hinged to a movable cart by applying forces to the cart's base. It is argued that the learning problems faced by adaptive elements that are components of adaptive networks are at least as difficult as this version of the pole-balancing problem. The learning system consists of a single associative search element (ASE) and a single adaptive critic element (ACE). In the course of learning to balance the pole, the ASE constructs associations between input and output by searching under the influence of reinforcement feedback, and the ACE constructs a more informative evaluation function than reinforcement feedback alone can provide. The differences between this approach and other attempts to solve problems using neurolike elements are discussed, as is the relation of this work to classical and instrumental conditioning in animal learning studies and its possible implications for research in the neurosciences.",Academia,United States of America,"Highly cited,Historical significance",,,2.8,"""Runs consisted of 100 trials unless the run's duration exceeded 500 000 time steps (approximately 2.8 h of simulated real time)"" 
""Almost all runs of the ASE/ACE system [...], were terminated after 500 000"" (Section IX)",,,,,,,,,,,,,,,,,True
Hopfield network,California Institute of Technology,1982-04-01,Other,Sequence memorization,9900.0,"My understanding is that the biggest Hopfield networks they studied had N=100 units. 

Each unit has 99 synapses Tij from each other unit, for a total of 100*99 parameters",,,,,,,https://www.pnas.org/doi/10.1073/pnas.79.8.2554,Neural networks and physical systems with emergent collective computational abilities,23315.0,JJ Hopfield,,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Kohonen network,Helsinki University of Technology,1981-07-25,Mathematics,Dimensionality reduction,4096.0,"The input vectors are 3D.
I could not find the grid size, but from the images it looks 8x8.
So the network was 8x8x3 parameters.",,,,,??? Seemingly no info,,https://link.springer.com/article/10.1007/BF00337288,Self-organized formation of topologically correct feature maps,11841.0,T Kohonen,,Academia,Finland,Highly cited,,,,,,,,,,,,,,,,,,,,,
Neocognitron,NHK Broadcasting Science Research Laboratories,1980-04-01,Vision,Character recognition,1140576.0,"""The synaptic connections from S-layers to C-layers
are fixed and unmodifiable. [...]
The numbers of excitatory cells in these seven layers are: 16x16 in U0, 16x16x24 in Us1, 10x10x 24 in Uc1, 8x8x24 in Us2, 6x 6x 24 in Uc2, 2x2x24 in Us3, and 24 in Uc3 
[...]
 the number of input synapses to each S-cell is 5 x 5 in layer Us1 and 5x5x24 in layers Us2 and Us3
[...]
The number of excitatory input synapses to each C-cell is 5x5 in layers Uc1 and Uc2, and is 2x2 in
layer Uc3
""

The number of synapses into each S-layer is:

S1: (16*16*24)*(5*5) 
S2: (8*8*24)*(5*5*24)
S3: (2*2*24)*(5*5*24)

We assume one parameter a per synapse into each cell in a S-layer, and one parameter b per each cell in a S-layer.",273738240.0,"""It does not necessarily mean that all of these input synapses are
always fully reinforced. In usual situations, only some of these input synapses are reinforced, and the rest of them remains in small values [...] Each of the five stimulus patterns has been presented 20 times to the network. By that time, self organization of the network has almost been completed.""

We multiply by 2 to account for multadds in the forward pass. 
There is no real backward pass, weights are only updated sparsely. Estimating 20% additional weight update compute compared to the forward pass:
2*1,140,576.0*1.2*100=273738240
",,5.0,"""In order to self-organize the network, we have presented five stimulus patterns ""0"", ""1"", ""2"", ""3"", and ""4"", which are shown in Fig. 6""",Confident,https://link.springer.com/article/10.1007/BF00344251,Neocognitron: A self-organizing neural network model for a mechanism of pattern recognition unaffected by shift in position,5782.0,"K Fukushima, S Miyake",,Industry,Japan,Highly cited,,,,,,,,,,,,,,,,,,,,,True
Statistical continuous speech recognizer,Massachusetts Institute of Technology (MIT),1976-04-30,Speech,Speech recognition,,,,,,12000.0,"800 sentences, counting 15 words per sentence gives 12000 words
""All the results given are for a training set of 800 sentences and a test set of 100 sentences""",Confident,https://ieeexplore.ieee.org/document/1454428,Continuous speech recognition by statistical methods,1591.0,Frederick Jelenick,"Statistical methods useful in automatic recognition of continuous speech are described. They concern modeling of a speaker and of an acoustic processor, extraction of the models' statistical parameters, and hypothesis search procedures and likelihood computations of linguistic decoding. Experimental results are presented that indicate the power of the methods.",Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Cognitron,Biological Cybernetics,1975-09-01,Other,"Miscellaneous image analysis,Image classification",21600.0,"4 layers, 288 neurons per layer, weights connect each neuron to only 25 neurons in the previous layer.
Only 3 layers with learnable weights, the first layer is just an input representation (see Fig 5)
3*288*25 parameters",5184000.0,"No real backward pass as weights are sparsely updated. Assuming 20% additional compute for the weight update.
Total compute estimate: 100*2*3*288*25*1.2 = 5184000
",,5.0,5 examples presented for (at least) 20 cycles = 100 training steps,Confident,https://link.springer.com/article/10.1007%2FBF00342633,Cognitron: a self-organizing multilayered neural network,791.0,Kunihiko Fukushima,,Industry,Japan,Historical significance,Precursor of the Neocognitron,20.0,,,,,,,,,,,,,,,,,,,True
Piecewise linear model,University of Kansas,1973-11-01,Vision,Image classification,357.0,"16 input features + bias = 17 input features
7*6/2 = 21 Hyperplanes
17*21 = 357 parameters
""For the multicategory problem involving NR categories, a total of NR(NR - 1)/2 hyperplanes are used to partition the pattern space.""
""The input variables to the classifier consisted of the mean variance of the four textural features (f1,f2,f3, andfg obtained from the distance 1 gray-tone spatial-dependence matrices) and eight spectral features (comprised of the mean variance of the image gray-tone values) in each of the four spectral bands""
",,,,314.0,"""Number of training samples = 314;""",Confident,https://ieeexplore.ieee.org/document/4309314,Textural Features for Image Classification,,"R. Haralick, K. Shanmugam, I. Dinstein","Texture is one of the important characteristics used in identifying objects or regions of interest in an image, whether the image be a photomicrograph, an aerial photograph, or a satellite image. This paper describes some easily computable textural features based on gray-tone spatial dependancies, and illustrates their application in category-identification tasks of three different kinds of image data: photomicrographs of five kinds of sandstones, 1:20 000 panchromatic aerial photographs of eight land-use categories, and Earth Resources Technology Satellite (ERTS) multispecial imagery containing seven land-use categories. We use two kinds of decision rules: one for which the decision regions are convex polyhedra (a piecewise linear decision rule), and one for which the decision regions are rectangular parallelpipeds (a min-max decision rule). In each experiment the data set was divided into two parts, a training set and a test set. Test set identification accuracy is 89 percent for the photomicrographs, 82 percent for the aerial photographic imagery, and 83 percent for the satellite imagery. These results indicate that the easily computable textural features probably have a general applicability for a wide variety of image-classification applications.",Academia,United States of America,"Historical significance,Highly cited",,,,,,,,,,,,,,,,,,,,,
Graph-based structural reasoning,Massachusetts Institute of Technology (MIT),1970-09-01,Vision,Image classification,,,,,,,,Unknown,https://dspace.mit.edu/handle/1721.1/6884,Learning Structural Definitions from Examples,1805.0,Patrick Winston,,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,
Decision tree adaline,Tokyo Medical and Dental University,1969-05-01,Medicine,Medical diagnosis,2450.0,"5 adaline were trained on binary decisions (p. 1)
Each adaline had up to 490 input weights (“meshes”)
Total parameters = 5*490=2450
",,,,80.0,40 positive and negative training examples (p. 2),Confident,https://pubmed.ncbi.nlm.nih.gov/5820353/,A use of Adaline as an automatic method for interpretation of the electrocardiogram and the vectorcardiogram,,"T Sano, S Tsuchiya, F Suzuki","A learning machine"" adaline neuron"" was employed for automatic diagnosis of the vectorcardiogram and the electrocardiogram. The frontal circle and the horizontal circle were divided into 480 meshes. The features were expressed by a binary digit, whether the vector loops passed through each mesh or not. In a part of the trials, 5 sets of binary digits were applied in addition to QRS duration and direction of inscription of QRS loops and T loops. In this trial a total of 490 meshes were used. Vectorcardiograms were taken by FRANK'S method in 235 cases. Several methods of adaline usage were tried. The best result was obtained so far by successive dichotomies based on the principle of the logical decision tree. First the normal patterns and the abnormal patterns were divided. The correct ratio was 96.5% when the 490 meshes were employed, cases of an output value within±10 units being regarded as undecided. Next the abnormal cases were divided into two groups depending on whether the QRS duration was more than 0.12 seconds or less. The group of cases with a QRS duration of less than 0.12 seconds was divided into right ventricular hypertrophy and others. The correct ratio was 98.6%. The remaining cases were divided into left ventricular hypertrophy and myocardial infarction, the correct ratio being 88.8%. The group of cases with a QRS duration of more than 0.12 seconds was easily divided into complete left and right bundle branch block in all cases. Here the number of meshes could be decreased to 59 meshes without changing the accuracy appreciably. This attempt showed that the application of the adaline for automatic diagnosis of the vectorcardiogram and the electrocardiogram is promising.",Academia,Japan,Historical significance,,,,,,,,,,,,,,,,,,,,,
GLEE,University of Edinburgh,1968-07-01,Games,Tic Tac Toe,,,,,,,,Unknown,https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.474.2430,Boxes: An Experiment in Adaptive Control,590.0,Michie and Chambers,,Academia,United Kingdom of Great Britain and Northern Ireland,Historical significance,,,,,,,,,,,,,,,,,,,,,
BOXES,University of Edinburgh,1968-07-01,Games,Pole balancing,,,,,,,,Unknown,https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.474.2430,Boxes: An Experiment in Adaptive Control,590.0,Michie and Chambers,,Academia,United Kingdom of Great Britain and Northern Ireland,Historical significance,,,,,,,,,,,,,,,,,,,,,
LTE speaker verification system,IBM,1966-11-01,Speech,Speech recognition,2061.0,"2 connected systems, 1st level LTE and 2nd level LTE.
1st Level: 1810 parameters (""Thus, every 20 msec after the beginning of the utterance, the 15 filter amplitudes were each represented by a 12-bit code, resulting in a 180-bit time sample of the spectrum for that interval. Each time sample was fed to the first-level LTE's, which reduced it to a 10-bit code"")
2nd Level: 251 parameters (""This resulted in a 250-bit input pattern to the second level for the first half-second of each utterance. Each 250-bit pattern was then classified by the LTE into one of two classes"")",105917060.0,"1st and 2nd level system are trained separately, multiple versions of both are trained, I chose the largest clearly described training runs.

1st level LTE compute: 2*1810*28700=103894000=1.04e8
1st level steps: 28700 (""Only 287 samples were selected to train the 10 LTE's. The same algorithm was used as that used with the 100-class gain. Two LTE's
converged before 100 training passes."")

2nd level LTE compute: 2*251*4030=2023060=2e6
2nd level steps: 4030 (31 epochs, 130 training examples, see Table 3)

Total compute: 103894000+2023060=105917060=1.06e8 (assuming no backward pass since they didn't use backpropagation)
",,417.0,"Split between both systems, 287 for 1st level, 130 for 2nd level.",Likely,https://pubs.aip.org/asa/jasa/article-abstract/40/5/966/754180/Experimental-Studies-in-Speaker-Verification-Using?redirectedFrom=fulltext,"Experimental Studies in Speaker Verification, Using an Adaptive System",,K. P. Li; J. E. Dammann; W. D. Chapman,"This paper describes an investigation of the capability of a two‐level adaptive linear threshold element (LTE) system to perform speaker discriminations. The study also includes an investigation of discriminating a speaker from an unknown population. The problem has been confined to the verification of an utterance as that of an expected informant. The environment of the experiments is discussed, and the experimental system is described. At the first level LTE, four different kinds of training have been developed for effective transformation and data reduction. At the second‐level LTE, different training conditions and different decision processes are investigated and evaluated. Over 90% accuracy is obtained in separating a known speaker from impostors.",Industry,United States of America,Historical significance,,131.0,,,,,,,,,,,,,,,,,,,True
Heuristic Reinforcement Learning,Purdue University,1965-10-01,Robotics,System control,,,1080000.0,"Figure 10 shows their largest system is trained for 3h and was trained on an analog IBM 1620 that was simulated on a digital IBM 1710.
Nordhaus, 2007 lists the IBM 1620 at 200 multiplications per second and doesn’t contain the 1710
Flops estimate: 0.5 * 3 * 60 * 60 * 200 = 1080000 = 1.08e6
Assumed utilization of 0.5
",,,,Speculative,https://ieeexplore.ieee.org/document/1098193,A heuristic approach to reinforcement learning control systems,,"M. Waltz, K. Fu",This paper describes a learning control system using a reinforcement technique. The controller is capable of controlling a plant that may be nonlinear and nonstationary. The only a priori information required by the controller is the order of the plant. The approach is to design a controller which partitions the control measurement space into sets called control situations and then learns the best control choice for each control situation. The control measurements are those indicating the state of the plant and environment. The learning is accomplished by reinforcement of the probability of choosing a particular control choice for a given control situation. The system was stimulated on an IBM 1710-GEDA hybrid computer facility. Experimental results obtained from the simulation are presented.,Academia,United States of America,"Historical significance,Highly cited",,,3.0,Figure 10,,,,,,,,,,,,,,,,,True
Print Recognition Logic,IBM,1963-01-01,Vision,Character recognition,,,22500000.0,"0.5*2.5*60*60*5000 = 22500000 = 2.25e7
Assumed utilization of 0.5
Trained for 2-3h on an IBM 7090 (from Introduction)
Estimated IBM 7090 at 5000 FLOP/s based on multiplications per second (Nordhaus, 2007)
Note: the Nordhaus estimate is very different from Wikipedia's estimate of 100000 FLOP/s, which cites a PowerPoint as source.",,,,Speculative,https://ieeexplore.ieee.org/document/5392331,Computer-Automated Design of Multifont Print Recognition Logic,,"L. Kamentsky, Chao-Ning Liu","A computer program has been written to design character recognition logic based on the processing of data samples. This program consists of two subroutines: (1) to search for logic circuits having certain constraints on hardware design, and (2) to evaluate these logics in terms of their discriminating ability over samples of the character set they are expected to recognize. An executive routine is used to apply these subroutines to select a complete logic with a given performance and complexity. This logic consists of 39 to 96 and gates connected to a shift register and a table look-up or resistance network comparison system.",Industry,United States of America,Historical significance,,,2.5,2-3h (from Introduction),,,,,,,,,,,,,,,,,True
MADALINE I,Stanford University,1962-07-01,Other,"Text classification,Image classification",,,,,,,,Unknown,https://www.proquest.com/openview/7898314db50a218b58052ac91e3bde1e/1?,An adaptive logic system with generalizing properties,75.0,William Combs Ridgway,,Academia,United States of America,Historical significance,,,,,,,,,,,,,,,,,,,,,True
Linear Decision Functions,Bell Laboratories,1962-06-01,Mathematics,Binary classification,,,1559250.0,"0.5*45*35*1980 = 1559250 = 1.56e6
Trained using IBM punched cards, computation took 45 * 35s for all 10 digits (Section Estimating the Linear Decision Function).
Multiplications per second estimate based on publication year: 1.98e3 (regression on Nordhaus data).
Assumed utilization of 0.5",,500.0,"""Fifty different people were asked, resulting in a sample size of 50 for each of the ten pattern classes. """,Speculative,https://ieeexplore.ieee.org/document/4066882?denied=,"Linear Decision Functions, with Application to Pattern Recognition",,W. Highleyman,"Many pattern recognition machines may be considered to consist of two principal parts, a receptor and a categorizer. The receptor makes certain measurements on the unknown pattern to be recognized; the categorizer determines from these measurements the particular allowable pattern class to which the unknown pattern belongs. This paper is concerned with the study of a particular class of categorizers, the linear decision function. The optimum linear decision function is the best linear approximation to the optimum decision function in the following sense: 1) ""Optimum"" is taken to mean minimum loss (which includes minimum error systems). 2) ""Linear"" is taken to mean that each pair of pattern classes is separated by one and only one hyperplane in the measurement space. This class of categorizers is of practical interest for two reasons: 1) It can be empirically designed without making any assumptions whatsoever about either the distribution of the receptor measurements or the a priori probabilities of occurrence of the pattern classes, providing an appropriate pattern source is available. 2) Its implementation is quite simple and inexpensive. Various properties of linear decision functions are discussed. One such property is that a linear decision function is guaranteed to perform at least as well as a minimum distance categorizer. Procedures are then developed for the estimation (or design) of the optimum linear decision function based upon an appropriate sampling from the pattern classes to be categorized.",Industry,United States of America,"Historical significance,Highly cited",,,0.4375,"""Forty-five hyperplanes are required in the complete linear decision function""
""About 35 seconds, on the average, was required to determine a hyperplane, given an initial position.""",,,,,,,,,,,,,,,,,True
ADALINE,Stanford University,1960-06-30,Vision,Pattern recognition,17.0,"""The machine's total experience is stored in the values of the weights a0,...,a16""",6600.0,"""The method of searching that has proven most useful is the method of steepest descent""

Apparently each pattern was only shown once to the system.

So the training compute is (forward pass compute) * (3 for backprop) * dataset size

This is a single layer (and single neuron) which does not require gradients w.r.t. inputs - 1:1 forward-backward ratio

",,100.0,"""The best system, arrived at by slow precise adaptation on the full body of 100 noisy patterns, was able to classify these patterns as desired except for twelve errors.""

https://isl.stanford.edu/~widrow/papers/c1960adaptiveswitching.pdf",Confident,https://isl.stanford.edu/~widrow/papers/c1960adaptiveswitching.pdf,Adaptive switching circuits,6329.0,Widrow and Hoff,,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,True
Perceptron (1960),Cornell Aeronautical Laboratory,1960-03-30,Vision,Image classification,1000.0,""" The first program was designed to handle
up to 1000 A units, and a 72 by 72 sensory mosaic. It
was found that this large sensory system presented
stimuli with a fineness of grain considerably better than
the limits of discrimination of a thousand-unit percep-
tron, and at the same time, required an excessive
amount of time for stimulus transformations, since each
illuminated point in the stimulus must be transformed
individually into its image point.""",720000000.0,"4000 * 12000 * 15
from the text ""This program uses the IBM 704 computer to simulate per-ceptual learning, recognition, and spontaneous classification of visual stimuli in the perceptron,""
from https://en.wikipedia.org/wiki/IBM_704 The 704 can execute up to 12,000 floating-point additions per second.
"" For the first system, the computing time averaged about 15 seconds per stimulus cycle, ""
In Fig 10 we see up to 4000 stimuli",,5000.0,"from the text ""The two main simulation programs total about 5000 words each.""",Speculative,https://www.semanticscholar.org/paper/Perceptron-Simulation-Experiments-Rosenblatt/ae76ce1ba27ac29addce4aab93b927e9bc7f7c67,Perceptron Simulation Experiments,394.0,Frank Rosenblatt,"An experimental simulation program, which has been in progress at the Cornell Aeronautical Laboratory since 1957, is described. This program uses the IBM 704 computer to simulate perceptual learning, recognition, and spontaneous classification of visual stimuli in the perceptron, a theoretical brain model which has been described elsewhere. The paper includes a brief review of the organization of simple perceptrons, and theoretically predicted performance curves are compared with those obtained from the simulation programs, in several types of experiments, designed to study ""forced"" and ""spontaneous"" learning of pattern discriminations.",Academia,United States of America,Historical significance,,,,,,,,,,,,,,,,,,,,,True
Pattern recognition and reading by machine,Sandia Corporation,1959-12-01,Vision,Character recognition,2625.0,A two bit state is recorded for each of the 75 cell pairs and each of the 25+10 characters recognized.,,,,,,,https://dl.acm.org/doi/10.1145/1460299.1460326,Pattern recognition and reading by machine,587.0,"W. W. Bledsoe, I. Browning",,Industry,United States of America,Historical significance,,,,,,,,,,,,,,,,,,,,,True
Samuel Neural Checkers,IBM,1959-07-01,Games,Checkers,16.0,"""with 16 terms for generalization learning""

""Mention has been made several times of the procedure
for replacing terms in the scoring polynomial. The program, as it is currently running, contains 38 different
terms (in addition to the piece-advantage term), 16 of
these being included in the scoring polynomial at anyone
time and the remaining 22 being kept in reserve.""",428400000.0,"""it can learn to do this in a remarkably short period of time 8 or 10 hours of machine-playing time)""

""The availability of a larger and faster machine (the IBM 704), coupled with many detailed changes in the programming procedure, leads to a fairly interesting game being played, even without any learning.""

""The Type 704 is the first large-scale, commercially available computer to employ fully automatic floating point arithmetic commands. [...]. Floating point addition or subtraction operations require 84 microseconds.""

source: https://www.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP704.html

""An idea of the learning ability of this procedure can be gained by analyzing an initial test series of 28 games""

""Each game averaged 68 moves (34 to a side), of which approximately 20 caused changes to be made in the scoring polynomial.""

10*3600*1000000/84=428571428",,53000.0,"Based on number of board positions

At the present time the memory tape contains something over 53,000 board positions (averaging 3.8 word search) which have been selected from a much larger
number of positions by means of the culling techniques
described. While this is still far from the number which
would tax the listing and searching procedures used in
the program, rough estimates, based on the frequency
with which the saved boards are utilized during normal
play (these figures being tabulated automatically), indicate that a library tape containing at least 20 times the
present number of board positions would be needed to
improve the midgame play significantly. At the present
rate of acquisition of new positions this would require
an inordinate amount of play and, consequently, of
machine time.",Likely,https://ieeexplore.ieee.org/abstract/document/5392560,Some studies in machine learning using the game of checkers,4671.0,Arthur L. Samuel,,Industry,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,True
Pandemonium (morse),Massachusetts Institute of Technology (MIT),1959-02-01,Language,Morse translation,,"The paper mentions 11 function types. Unclear how many times they are called (number of ""demons"" in their Pandemonium implementation).",600000000.0,"The paper mentions using an IBM 704, which can execute up to 12,000 floating-point additions per second (https://wikiless.org/wiki/IBM_704). My best guess as to how long it ran for ranges between 1h to 2 days, which when plugged into guesstimate (https://www.getguesstimate.com/models/19625), i.e., taking the log mean, gives a mean estimate of 600M",,,??? Might need to make a guesstimate here.,Speculative,https://aitopics.org/doc/classics:504E1BAC/,Pandemonium: A Paradigm for Learning,1453.0,OG Selfridge,,Academia,United States of America,Highly cited,,,,,,,,,,,,,,,,,,,,,True
Perceptron Mark I,"Cornell Aeronautical Laboratory,Cornell University",1957-01-01,Other,Binary classification,1000.0,"""Figure 4.8 Illustration of the Mark 1 perceptron hardware. The photograph on the left shows how the inputs were obtained using a simple camera system in which an input scene, in this case a printed character, was illuminated by powerful lights, and an image focussed onto a 20 × 20 array of cadmium sulphide photocells, giving a primitive 400 pixel image. The perceptron also had a patch board, shown in the middle photograph, which allowed different configurations of input features to be tried. Often these were wired up at random to demonstrate the ability of the perceptron to learn without the need for precise wiring, in contrast to a modern digital computer. The photograph on the right shows one of the racks of adaptive weights. Each weight was implemented using a rotary variable resistor, also called a potentiometer, driven by an electric motor thereby allowing the value of the weight to be adjusted automatically by the learning algorithm.""

source: Bishop, Christopher M. (2006). Pattern Recognition and Machine Learning

The Perceptron had a 400-pixel visual input and 1000 neurons in the hidden layer. https://twitter.com/DiegoKuonen/status/1130352233223262208",694894.9377361819,"Extracted from AI and Compute (https://openai.com/blog/ai-and-compute/) charts by using https://automeris.io/WebPlotDigitizer/.

Additional experiment described in https://babel.hathitrust.org/cgi/pt?id=coo.31924004657973&seq=70 
- 400 input (20x20) - 512 hidden with 40 fixed connections each (not learned) - 1 output (learned)
Parameters: 512*1=512
Forward flop: 41*512=20992
Forward + “backward flop”: 43*512=22016 (only last layer was adjusted)
100*22016=2201600
",,100.0,"Appendix II describes an experiment with 6 stimulus patterns

https://babel.hathitrust.org/cgi/pt?id=coo.31924004657973&seq=47 describes simulation experiments with ""X"" and ""E"" patterns using 100 total training stimuli",Likely,https://blogs.umass.edu/brain-wars/files/2016/03/rosenblatt-1957.pdf,The Perceptron—a perceiving and recognizing automaton,1610.0,F Rosenblatt,,"Academia,Academia","United States of America,United States of America","Historical significance,Highly cited",First modern neural network ,,,,,,,,,,,,,,,,,,,,True
Sequence-based pattern recognition,Massachusetts Institute of Technology (MIT),1955-03-01,Vision,Character recognition,,,,,,,,Unknown,https://dl.acm.org/doi/10.1145/1455292.1455310,Pattern recognition and modern computers,290.0,O. G. Selfridge,,Academia,United States of America,Historical significance,,,,,,,,,,,,,,,,,,,,,True
Self Organizing System,Massachusetts Institute of Technology (MIT),1955-03-01,Other,Pattern recognition,225.0,Figure 4 contains the learnt weight matrix,,,,256.0,""" The modifier was then
disabled so that no further changes in the net could
occur and all 256 possible input patterns were then presented in turn.""

""For these purposes, 16-element nets (8 input and 8
output) were used because it was desired to exhaust all
possible input patterns, and we were limited to about
2^8 inputs by available time. """,,https://dl.acm.org/doi/10.1145/1455292.1455309,Generalization of pattern recognition in a self-organizing system,93.0,W. A. Clark and B. G. Farley,,Academia,United States of America,Historical significance,,,,,,,,,,,,,,,,,,,,,True
Genetic algorithm,Institute for Advanced Study,1954-07-02,"Mathematics,Biology",Numerical simulation,,,,,,,,Unknown,https://link.springer.com/article/10.1007/BF01556771,Numerical testing of evolution theories,266.0,NA Barricelli,,Academia,United States of America,Historical significance,Possibly first computer simulation of a genetic evolution algorithm,,,,,,,,,,,,,,,,,,,,True
SNARC,Harvard University,1952-01-08,Robotics,Maze solving,40.0,"The link below seems to suggest the SNARC had 40 cells, each with a dial that acts as a configurable weight.

https://www.webofstories.com/play/marvin.minsky/137",,,,,,,https://en.wikipedia.org/wiki/Stochastic_neural_analog_reinforcement_calculator,A Neural-Analogue Calculator Based upon a Probability Model of Reinforcement,33.0,Marvin Minsky,,Academia,United States of America,Historical significance,,,,,,,,,,,,,,,,,,,,,True
Theseus,Bell Laboratories,1950-07-02,Robotics,Maze solving,40.0,"The learned part is the maze configuration. There are 25 squares of the maze. The 16 squares to the left top corner have each one adjacent square down and one adjacent square up, for a total of 16*2 walls. We only need to count the 8 spare walls connecting the squares in the right side and the bottom side. In total there are 16*2+8 walls.",40.0,"The ""training"" consists on the mouse running around and checking each wall (assuming each relay switch is one operation).",,40.0,Each wall Theseus bumps into is a datapoint,Confident,https://www.technologyreview.com/2018/12/19/138508/mighty-mouse/,Mighty Mouse,,Claude Shannon,,Industry,United States of America,Historical significance,,,,,,,,,,,,,,,,,,,,,True
