====================================================================================================
import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
import uuid
import glob
import time
from dataclasses import dataclass

import numpy as np
import torch
from torch import nn
import torch.nn.functional as F
import torch.distributed as dist
import torch._inductor.config as config
from torch.nn.parallel import DistributedDataParallel as DDP

# -----------------------------------------------------------------------------
# Muon optimizer

def zeropower_via_svd(G, steps=None):
    U, S, V = G.svd()
    return U @ V.T

@torch.compile
def zeropower_via_newtonschulz5(G: torch.Tensor, steps: int = 10):
    """
    Newton-Schulz iteration to compute the zeroth power / orthogonalization of G. We opt to use a
    quintic iteration whose coefficients are selected to maximize the slope at zero. For the purpose
    of minimizing steps, it turns out to be empirically effective to keep increasing the slope at
    zero even beyond the point where the iteration no longer converges all the way to one everywhere
    on the interval. This iteration therefore does not produce UV^T but rather something like US'V^T
    where S' is diagonal with S_{ii}' \sim Uniform(0.5, 1.5), which turns out not to hurt model
    performance at all relative to UV^T, where USV^T = G is the SVD.
    """
    assert len(G.shape) == 2
    a, b, c = (3.4445, -4.7750,  2.0315)
    X = G.bfloat16()
    I = torch.eye(min(G.size(0), G.size(1)), dtype=X.dtype, device=X.device)
    X.div_(X.norm() + 1e-7) # ensure top singular value <= 1
    if G.size(0) > G.size(1):
        X = X.T
    for _ in range(steps):
        A = X @ X.T
        S = A @ (b * I + c * A)
        torch.diagonal(S).add_(a)
        X = S @ X
    if G.size(0) > G.size(1):
        X = X.T
    return X

zeropower_backends = dict(svd=zeropower_via_svd, newtonschulz5=zeropower_via_newtonschulz5)

class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Some warnings:
    - This optimizer assumes that all parameters passed in are 2D.
    - It should not be used for the embedding layer, the final fully connected layer, or any {0,1}-D
    parameters; those should all be optimized by a standard method (e.g., AdamW).
    - To use it with 4D convolutional filters, it works well to just flatten their last 3 dimensions.
    - We believe it is unlikely to work well for training with small batch size.
    - We believe it may not work well for finetuning pretrained models, but we haven't tested this.
    - We have not yet tried this optimizer for training scenarios larger than NanoGPT (124M).

    Arguments:
        lr: The learning rate used by the internal SGD.
        momentum: The momentum used by the internal SGD.
        nesterov: Whether to use Nesterov-style momentum in the internal SGD. (recommended)
        backend: The chosen backend for the orthogonalization step. (recommended: 'newtonschulz5')
        backend_steps: The number of iteration steps to use in the backend, if it is iterative.
    """
    def __init__(self, params, lr=0.02, momentum=0.95, nesterov=True,
                 backend='newtonschulz5', backend_steps=5):
        defaults = dict(lr=lr, momentum=momentum, nesterov=nesterov, backend=backend, backend_steps=backend_steps)
        super().__init__(params, defaults)

    def step(self):

        for group in self.param_groups:

            lr = group['lr']
            momentum = group['momentum']
            zeropower_backend = zeropower_backends[group['backend']]

            # generate weight updates in distributed fashion
            total_params = sum(p.numel() for p in group['params'])
            updates_flat = torch.zeros(total_params, device='cuda', dtype=torch.bfloat16)
            curr_idx = 0
            for i, p in enumerate(group['params']):
                # luckily this will perfectly distribute a transformer with multiple of 4 layers to 8 GPUs
                if i % int(os.environ['WORLD_SIZE']) == int(os.environ['RANK']):
                    g = p.grad
                    assert g is not None
                    state = self.state[p]
                    if 'momentum_buffer' not in state:
                        state['momentum_buffer'] = torch.zeros_like(g)
                    buf = state['momentum_buffer']
                    buf.mul_(momentum).add_(g)
                    if group['nesterov']:
                        g = g.add(buf, alpha=momentum)
                    g = zeropower_backend(g, steps=group['backend_steps'])
                    g *= max(1, g.size(0)/g.size(1))**0.5
                    updates_flat[curr_idx:curr_idx+p.numel()] = g.flatten()
                curr_idx += p.numel()

            # sync updates across devices. we are not memory-constrained so can do this simple deserialization
            dist.all_reduce(updates_flat, op=dist.ReduceOp.SUM)

            # deserialize and apply updates
            curr_idx = 0
            for p in group['params']:
                g = updates_flat[curr_idx:curr_idx+p.numel()].view_as(p.data).type_as(p.data)
                p.data.add_(g, alpha=-lr)
                curr_idx += p.numel()

# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the GPT-2 model

class Rotary(torch.nn.Module):

    def __init__(self, dim, base=10000):
        super().__init__()
        self.inv_freq = 1.0 / (base ** (torch.arange(0, dim, 2).float() / dim))
        self.seq_len_cached = None
        self.cos_cached = None
        self.sin_cached = None

    def forward(self, x):
        seq_len = x.shape[1]
        if seq_len != self.seq_len_cached:
            self.seq_len_cached = seq_len
            t = torch.arange(seq_len, device=x.device).type_as(self.inv_freq)
            freqs = torch.outer(t, self.inv_freq).to(x.device)
            self.cos_cached = freqs.cos().bfloat16()
            self.sin_cached = freqs.sin().bfloat16()
        return self.cos_cached[None, :, None, :], self.sin_cached[None, :, None, :]

def apply_rotary_emb(x, cos, sin):
    assert x.ndim == 4 # multihead attention
    d = x.shape[3]//2
    x1 = x[..., :d]
    x2 = x[..., d:]
    y1 = x1 * cos + x2 * sin
    y2 = x1 * (-sin) + x2 * cos
    return torch.cat([y1, y2], 3).type_as(x)

class CausalSelfAttention(nn.Module):

    def __init__(self, config):
        super().__init__()
        self.n_head = config.n_head
        self.n_embd = config.n_embd
        self.head_dim = self.n_embd // self.n_head
        assert self.n_embd % self.n_head == 0
        self.c_q = nn.Linear(self.n_embd, self.n_embd, bias=False)
        self.c_k = nn.Linear(self.n_embd, self.n_embd, bias=False)
        self.c_v = nn.Linear(self.n_embd, self.n_embd, bias=False)
        # output projection
        self.c_proj = nn.Linear(self.n_embd, self.n_embd, bias=False)
        self.c_proj.weight.data.zero_() # zero init suggested by @Grad62304977
        self.rotary = Rotary(self.head_dim)
        self.lambdas = nn.Parameter(torch.tensor([0.5, 0.5]))

    def forward(self, x, v1=None):
        B, T, C = x.size() # batch size, sequence length, embedding dimensionality (n_embd)
        q = self.c_q(x).view(B, T, self.n_head, self.head_dim)
        k = self.c_k(x).view(B, T, self.n_head, self.head_dim)
        v = self.c_v(x).view(B, T, self.n_head, self.head_dim)
        if v1 is None:
            v1 = v # This happens if we are in the first block. v needs to be accessed by subsequent blocks
        v = self.lambdas[0] * v + self.lambdas[1] * v1.view_as(v) # @Grad62304977
        cos, sin = self.rotary(q)
        q, k = F.rms_norm(q, (q.size(-1),)), F.rms_norm(k, (k.size(-1),)) # QK norm suggested by @Grad62304977
        q, k = apply_rotary_emb(q, cos, sin), apply_rotary_emb(k, cos, sin)
        y = F.scaled_dot_product_attention(q.transpose(1, 2), k.transpose(1, 2), v.transpose(1, 2), is_causal=True)
        y = y.transpose(1, 2).contiguous().view_as(x) # re-assemble all head outputs side by side
        y = self.c_proj(y)
        return y, v1

class MLP(nn.Module):

    def __init__(self, config):
        super().__init__()
        self.c_fc    = nn.Linear(config.n_embd, 4 * config.n_embd, bias=False)
        self.c_proj  = nn.Linear(4 * config.n_embd, config.n_embd, bias=False)
        self.c_proj.weight.data.zero_() # zero init suggested by @Grad62304977

    def forward(self, x):
        x = self.c_fc(x)
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = self.c_proj(x)
        return x

class Block(nn.Module):

    def __init__(self, config):
        super().__init__()
        self.attn = CausalSelfAttention(config)
        self.mlp = MLP(config)
        self.lambdas = nn.Parameter(torch.tensor([1., 0.]))

    def forward(self, x, v1, x0):
        x = self.lambdas[0] * x + self.lambdas[1] * x0
        x1, v1 = self.attn(F.rms_norm(x, (x.size(-1),)), v1)
        x = x + x1
        x = x + self.mlp(F.rms_norm(x, (x.size(-1),)))
        return x, v1

# -----------------------------------------------------------------------------
# The main GPT-2 model

@dataclass
class GPTConfig:
    vocab_size : int = 50304
    n_layer : int = 12
    n_head : int = 6 # head dim 128 suggested by @Grad62304977
    n_embd : int = 768

class GPT(nn.Module):

    def __init__(self, config):
        super().__init__()
        self.config = config

        self.transformer = nn.ModuleDict(dict(
            wte = nn.Embedding(config.vocab_size, config.n_embd),
            h = nn.ModuleList([Block(config) for _ in range(config.n_layer)]),
        ))
        self.lm_head = nn.Linear(config.n_embd, config.vocab_size, bias=False)
        self.lm_head.weight.data.zero_() # @Grad62304977

    def forward(self, idx, targets=None, return_logits=True):

        # forward the GPT model itself
        x = self.transformer.wte(idx) # token embeddings of shape (b, t, n_embd)
        x = F.rms_norm(x, (x.size(-1),)) # @Grad62304977
        x0 = x
        v1 = None
        for block in self.transformer.h:
            x, v1 = block(x, v1, x0)
        x = F.rms_norm(x, (x.size(-1),))

        if targets is not None:
            # if we are given some desired targets also calculate the loss
            logits = self.lm_head(x)
            logits = 30 * torch.tanh(logits / 30) # @Grad62304977
            logits = logits.float() # use tf32/fp32 for logits
            loss = F.cross_entropy(logits.view(-1, logits.size(-1)), targets.view(-1), ignore_index=-1)
        else:
            # inference-time mini-optimization: only forward the lm_head on the very last position
            logits = self.lm_head(x[:, [-1], :]) # note: using list [-1] to preserve the time dim
            logits = 30 * torch.tanh(logits / 30) # @Grad62304977
            logits = logits.float() # use tf32/fp32 for logits
            loss = None

        # there are performance reasons why not returning logits is prudent, if not needed
        if not return_logits:
            logits = None

        return logits, loss

# -----------------------------------------------------------------------------
# Our own simple Distributed Data Loader

def _peek_data_shard(filename):
    # only reads the header, returns header data
    with open(filename, "rb") as f:
        # first read the header, which is 256 int32 integers (4 bytes each)
        header = np.frombuffer(f.read(256*4), dtype=np.int32)
    if header[0] != 20240520:
        print("ERROR: magic number mismatch in the data .bin file!")
        print("---> HINT: Are you passing in a correct file with --input_bin?")
        print("---> HINT: Dataset encoding changed recently, re-run data prepro or refer again to README")
        print("---> HINT: For example re-run: `python dev/data/tinyshakespeare.py`, then re-try")
        exit(1)
    assert header[1] == 1, "unsupported version"
    ntok = header[2] # number of tokens (claimed)
    return ntok # for now just return the number of tokens

def _load_data_shard(filename):
    with open(filename, "rb") as f:
        # first read the header, which is 256 int32 integers (4 bytes each)
        header = np.frombuffer(f.read(256*4), dtype=np.int32)
        assert header[0] == 20240520, "magic number mismatch in the data .bin file"
        assert header[1] == 1, "unsupported version"
        ntok = header[2] # number of tokens (claimed)
        # the rest of it are tokens, stored as uint16
        tokens = np.frombuffer(f.read(), dtype=np.uint16)
    assert len(tokens) == ntok, "number of tokens read does not match header?"
    return tokens

class DistributedDataLoader:
    def __init__(self, filename_pattern, B, T, process_rank, num_processes):
        self.process_rank = process_rank
        self.num_processes = num_processes
        self.B = B
        self.T = T

        # glob files that match the pattern
        self.files = sorted(glob.glob(filename_pattern))
        assert len(self.files) > 0, f"did not find any files that match the pattern {filename_pattern}"

        # load and validate all data shards, count number of tokens in total
        ntok_total = 0
        for fname in self.files:
            shard_ntok = _peek_data_shard(fname)
            assert shard_ntok >= num_processes * B * T + 1
            ntok_total += int(shard_ntok)
        self.ntok_total = ntok_total

        # kick things off
        self.reset()

    def reset(self):
        self.current_shard = 0
        self.current_position = self.process_rank * self.B * self.T
        self.tokens = _load_data_shard(self.files[self.current_shard])

    def advance(self): # advance to next data shard
        self.current_shard = (self.current_shard + 1) % len(self.files)
        self.current_position = self.process_rank * self.B * self.T
        self.tokens = _load_data_shard(self.files[self.current_shard])

    def next_batch(self):
        B = self.B
        T = self.T
        buf = self.tokens[self.current_position : self.current_position+B*T+1]
        buf = torch.tensor(buf.astype(np.int32), dtype=torch.long)
        x = (buf[:-1]).view(B, T) # inputs
        y = (buf[1:]).view(B, T) # targets
        # advance current position and load next shard if necessary
        self.current_position += B * T * self.num_processes
        if self.current_position + (B * T * self.num_processes + 1) > len(self.tokens):
            self.advance()
        return x.cuda(), y.cuda()

# -----------------------------------------------------------------------------
# int main

@dataclass
class Hyperparameters:
    # data hyperparams
    input_bin : str = 'data/fineweb10B/fineweb_train_*.bin' # input .bin to train on
    input_val_bin : str = 'data/fineweb10B/fineweb_val_*.bin' # input .bin to eval validation loss on
    # optimization hyperparams
    batch_size : int = 8*64 # batch size, in sequences, across all devices
    device_batch_size : int = 64 # batch size, in sequences, per device
    sequence_length : int = 1024 # sequence length, in tokens
    num_iterations : int = 3125 # number of iterations to run
    warmup_iters : int = 0
    warmdown_iters : int = 914 # number of iterations of linear warmup/warmdown for triangular or trapezoidal schedule
    weight_decay : float = 0
    # evaluation and logging hyperparams
    val_loss_every : int = 125 # every how many steps to evaluate val loss? 0 for only at the end
    val_tokens : int = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    save_every : int = 0 # every how many steps to save the checkpoint? 0 for only at the end
args = Hyperparameters()

# set up DDP (distributed data parallel). torchrun sets this env variable
assert torch.cuda.is_available()
dist.init_process_group(backend='nccl')
ddp_rank = int(os.environ['RANK'])
ddp_local_rank = int(os.environ['LOCAL_RANK'])
ddp_world_size = int(os.environ['WORLD_SIZE'])
device = f'cuda:{ddp_local_rank}'
torch.cuda.set_device(device)
print(f"using device: {device}")
master_process = (ddp_rank == 0) # this process will do logging, checkpointing etc.

# convenience variables
B, T = args.device_batch_size, args.sequence_length
# calculate the number of steps to take in the val loop.
assert args.val_tokens % (B * T * ddp_world_size) == 0
val_steps = args.val_tokens // (B * T * ddp_world_size)
# calculate the steps of gradient accumulation required to attain the desired global batch size.
assert args.batch_size % (B * ddp_world_size) == 0
train_accumulation_steps = args.batch_size // (B * ddp_world_size)

# load tokens
train_loader = DistributedDataLoader(args.input_bin, B, T, ddp_rank, ddp_world_size)
val_loader = DistributedDataLoader(args.input_val_bin, B, T, ddp_rank, ddp_world_size)
if master_process:
    print(f"Training DataLoader: total number of tokens: {train_loader.ntok_total} across {len(train_loader.files)} files")
    print(f"Validation DataLoader: total number of tokens: {val_loader.ntok_total} across {len(val_loader.files)} files")
x, y = train_loader.next_batch()

# there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency. suggested to me by @Grad62304977.
# this originates from Karpathy's experiments.
if master_process:
    print("Building model...")
num_vocab = 50304
model = GPT(GPTConfig(vocab_size=num_vocab, n_layer=12, n_head=6, n_embd=768))
model = model.to(device)
if hasattr(config, "coordinate_descent_tuning"):
    config.coordinate_descent_tuning = True # suggested by @Chillee
model = torch.compile(model)
# here we wrap model into DDP container
model = DDP(model, device_ids=[ddp_local_rank])
raw_model = model.module # always contains the "raw" unwrapped model
ctx = torch.amp.autocast(device_type='cuda', dtype=torch.bfloat16)
if master_process:
    print("Model built.")

# CUDNN attention is ~4ms faster than Flash, but doesn't get selected by default in PyTorch 2.5.1
from torch.backends.cuda import enable_cudnn_sdp, enable_flash_sdp, enable_math_sdp, enable_mem_efficient_sdp
enable_cudnn_sdp(True)
enable_flash_sdp(False)
enable_mem_efficient_sdp(False)
enable_math_sdp(False)

# init the optimizer(s)
optimizer1 = torch.optim.Adam([raw_model.transformer.wte.weight], lr=0.3,   betas=(0.9, 0.95), fused=True)
optimizer2 = torch.optim.Adam([raw_model.lm_head.weight],         lr=0.002, betas=(0.9, 0.95), fused=True)
params = list(raw_model.transformer.h.parameters())
matrix_params = [p for p in params if p.ndim == 2]
scalar_params = [p for p in params if p.ndim < 2]
optimizer3 = Muon(matrix_params,           lr=0.02,  momentum=0.95)
optimizer4 = torch.optim.Adam(scalar_params, lr=0.02, betas=(0.9, 0.95), fused=True) # note that this learning rate is neither sensitive nor tuned
optimizers = [optimizer1, optimizer2, optimizer3, optimizer4]
# learning rate decay scheduler (linear warmup and warmdown)
def get_lr(it):
    assert it <= args.num_iterations
    # 1) linear warmup for warmup_iters steps
    if it < args.warmup_iters:
        return (it+1) / args.warmup_iters
    # 2) constant lr for a while
    elif it < args.num_iterations - args.warmdown_iters:
        return 1.0
    # 3) linear warmdown
    else:
        decay_ratio = (args.num_iterations - it) / args.warmdown_iters
        return decay_ratio
schedulers = [torch.optim.lr_scheduler.LambdaLR(opt, get_lr) for opt in optimizers]

# begin logging
if master_process:
    run_id = str(uuid.uuid4())
    logdir = 'logs/%s/' % run_id
    os.makedirs(logdir, exist_ok=True)
    logfile = 'logs/%s.txt' % run_id
    # create the log file
    with open(logfile, "w") as f:
        # begin the log by printing this file (the Python code)
        f.write('='*100 + '\n')
        f.write(code)
        f.write('='*100 + '\n')
        # log information about the hardware/software environment this is running on
        # and print the full `nvidia-smi` to file
        f.write(f"Running pytorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}\nnvidia-smi:\n")
        import subprocess
        result = subprocess.run(['nvidia-smi'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        f.write(f'{result.stdout}\n')
        f.write('='*100 + '\n')

training_time_ms = 0
# start the clock
torch.cuda.synchronize()
t0 = time.time()
# begin training
train_loader.reset()
for step in range(args.num_iterations + 1):
    last_step = (step == args.num_iterations)
    # This effectively ignores timing first 10 steps, which are slower for weird reasons.
    # Alternately, and slightly more correctly in terms of benchmarking, we could do 10
    # steps with dummy data first, and then re-initialize the model and reset the loader.
    if step == 10:
        training_time_ms = 0
        t0 = time.time()
    timed_steps = float('nan') if step <= 11 else (step - 10) + 1 # <= 11 to avoid bug in val

    # once in a while evaluate the validation dataset
    if (last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0)):
        # stop the clock
        torch.cuda.synchronize()
        training_time_ms += 1000 * (time.time() - t0)
        # run validation batches
        model.eval()
        val_loader.reset()
        val_loss = 0.0
        for _ in range(val_steps):
            x_val, y_val = val_loader.next_batch()
            with ctx: # of course, we'd like to use no_grad() here too, but that creates a torch.compile error for some reason
                _, loss = model(x_val, y_val, return_logits=False)
                val_loss += loss.detach()
                del loss
        dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
        val_loss /= val_steps
        # log val loss to console and to logfile
        if master_process:
            print(f'step:{step}/{args.num_iterations} val_loss:{val_loss:.4f} train_time:{training_time_ms:.0f}ms step_avg:{training_time_ms/(timed_steps-1):.2f}ms')
            with open(logfile, "a") as f:
                f.write(f'step:{step}/{args.num_iterations} val_loss:{val_loss:.4f} train_time:{training_time_ms:.0f}ms step_avg:{training_time_ms/(timed_steps-1):.2f}ms\n')
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.time()

    if master_process and (last_step or (args.save_every > 0 and step % args.save_every == 0)):
        # stop the clock
        torch.cuda.synchronize()
        training_time_ms += 1000 * (time.time() - t0)
        # save the state of the training process
        log = dict(step=step, code=code, model=raw_model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
        torch.save(log, 'logs/%s/state_step%06d.pt' % (run_id, step))
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.time()

    # bit confusing: we want to make sure to eval on 0th iteration
    # but also after the very last iteration. so we loop for step <= num_iterations
    # instead of just < num_iterations (one extra due to <=), only to do
    # the validation/sampling one last time, and then we break right here as we're done.
    if last_step:
        break

    # --------------- TRAINING SECTION BEGIN -----------------
    model.train()
    for i in range(1, train_accumulation_steps+1):
        # forward pass
        with ctx:
            _, loss = model(x, y, return_logits=False)
            train_loss = loss.detach()
        # advance the dataset for the next batch
        x, y = train_loader.next_batch()
        # backward pass
        if i < train_accumulation_steps:
            with model.no_sync(): # there's no need to sync gradients every accumulation step
                loss.backward()
        else:
            loss.backward() # just sync on the last step
    for p in model.parameters():
        p.grad /= train_accumulation_steps
    # momentum warmup for Muon
    frac = min(step/500, 1)
    frac2 = 1 - max(step - args.num_iterations + 500, 0) / 500
    optimizer3.param_groups[0]['momentum'] = (1 - frac) * 0.85 + frac * 0.95
    optimizer1.param_groups[0]['betas'] = (
        (1 - frac2) * 0.80 + frac2 * 0.90,
        (1 - frac2) * 0.85 + frac2 * 0.95,
    )
    # step the optimizers and schedulers
    for opt, sched in zip(optimizers, schedulers):
        opt.step()
        sched.step()
    # null the gradients
    model.zero_grad(set_to_none=True)
    # --------------- TRAINING SECTION END -------------------
    # everything that follows now is just diagnostics, prints, logging, etc.

    #dist.all_reduce(train_loss, op=dist.ReduceOp.AVG) # all-reducing the training loss would be more correct in terms of logging, but slower
    if master_process:
        approx_time = training_time_ms + 1000 * (time.time() - t0)
        print(f"step:{step+1}/{args.num_iterations} train_loss:{train_loss.item():.4f} train_time:{approx_time:.0f}ms step_avg:{approx_time/timed_steps:.2f}ms")
        with open(logfile, "a") as f:
            f.write(f"step:{step+1}/{args.num_iterations} train_loss:{train_loss.item():.4f} train_time:{approx_time:.0f}ms step_avg:{approx_time/timed_steps:.2f}ms\n")

if master_process:
    print(f"peak memory consumption: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB")

# -------------------------------------------------------------------------
# clean up nice
dist.destroy_process_group()
====================================================================================================
Running pytorch 2.5.1+cu124 compiled for CUDA 12.4
nvidia-smi:
Thu Nov  7 14:32:33 2024       
+-----------------------------------------------------------------------------------------+
| NVIDIA-SMI 560.35.03              Driver Version: 560.35.03      CUDA Version: 12.6     |
|-----------------------------------------+------------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |
|                                         |                        |               MIG M. |
|=========================================+========================+======================|
|   0  NVIDIA H100 80GB HBM3          On  |   00000000:18:00.0 Off |                    0 |
| N/A   26C    P0            111W /  700W |    5304MiB /  81559MiB |      2%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  |   00000000:2A:00.0 Off |                    0 |
| N/A   28C    P0            119W /  700W |    5352MiB /  81559MiB |      4%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  |   00000000:3A:00.0 Off |                    0 |
| N/A   30C    P0            122W /  700W |    5352MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  |   00000000:5D:00.0 Off |                    0 |
| N/A   26C    P0            120W /  700W |    5352MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  |   00000000:84:00.0 Off |                    0 |
| N/A   27C    P0            115W /  700W |    5352MiB /  81559MiB |      2%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  |   00000000:8B:00.0 Off |                    0 |
| N/A   31C    P0            117W /  700W |    5352MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  |   00000000:91:00.0 Off |                    0 |
| N/A   30C    P0            118W /  700W |    5352MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  |   00000000:E4:00.0 Off |                    0 |
| N/A   27C    P0            119W /  700W |    5112MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
                                                                                         
+-----------------------------------------------------------------------------------------+
| Processes:                                                                              |
|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |
|        ID   ID                                                               Usage      |
|=========================================================================================|
+-----------------------------------------------------------------------------------------+

====================================================================================================
step:0/3125 val_loss:10.8258 train_time:657ms step_avg:nanms
step:1/3125 train_loss:10.8258 train_time:62253ms step_avg:nanms
step:2/3125 train_loss:10.4266 train_time:62389ms step_avg:nanms
step:3/3125 train_loss:9.9486 train_time:62533ms step_avg:nanms
step:4/3125 train_loss:9.0357 train_time:62691ms step_avg:nanms
step:5/3125 train_loss:8.0507 train_time:62837ms step_avg:nanms
step:6/3125 train_loss:7.5244 train_time:62986ms step_avg:nanms
step:7/3125 train_loss:7.0168 train_time:63137ms step_avg:nanms
step:8/3125 train_loss:7.2707 train_time:63295ms step_avg:nanms
step:9/3125 train_loss:6.8974 train_time:63446ms step_avg:nanms
step:10/3125 train_loss:6.8077 train_time:63600ms step_avg:nanms
step:11/3125 train_loss:6.6873 train_time:114ms step_avg:nanms
step:12/3125 train_loss:6.6613 train_time:266ms step_avg:nanms
step:13/3125 train_loss:6.5314 train_time:418ms step_avg:139.18ms
step:14/3125 train_loss:6.4682 train_time:568ms step_avg:141.95ms
step:15/3125 train_loss:6.4415 train_time:722ms step_avg:144.31ms
step:16/3125 train_loss:6.3971 train_time:876ms step_avg:145.97ms
step:17/3125 train_loss:6.4080 train_time:1031ms step_avg:147.28ms
step:18/3125 train_loss:6.4441 train_time:1183ms step_avg:147.86ms
step:19/3125 train_loss:6.2894 train_time:1334ms step_avg:148.22ms
step:20/3125 train_loss:6.3053 train_time:1487ms step_avg:148.66ms
step:21/3125 train_loss:6.0142 train_time:1639ms step_avg:148.97ms
step:22/3125 train_loss:6.3312 train_time:1791ms step_avg:149.25ms
step:23/3125 train_loss:6.5767 train_time:1945ms step_avg:149.65ms
step:24/3125 train_loss:6.2347 train_time:2100ms step_avg:150.01ms
step:25/3125 train_loss:6.3886 train_time:2251ms step_avg:150.04ms
step:26/3125 train_loss:6.0973 train_time:2404ms step_avg:150.23ms
step:27/3125 train_loss:6.0107 train_time:2556ms step_avg:150.36ms
step:28/3125 train_loss:6.1948 train_time:2711ms step_avg:150.59ms
step:29/3125 train_loss:5.8552 train_time:2863ms step_avg:150.67ms
step:30/3125 train_loss:6.1161 train_time:3017ms step_avg:150.83ms
step:31/3125 train_loss:5.9516 train_time:3173ms step_avg:151.11ms
step:32/3125 train_loss:5.9211 train_time:3321ms step_avg:150.97ms
step:33/3125 train_loss:5.7528 train_time:3475ms step_avg:151.08ms
step:34/3125 train_loss:6.0509 train_time:3628ms step_avg:151.15ms
step:35/3125 train_loss:5.9736 train_time:3780ms step_avg:151.20ms
step:36/3125 train_loss:6.1276 train_time:3932ms step_avg:151.22ms
step:37/3125 train_loss:6.0308 train_time:4087ms step_avg:151.38ms
step:38/3125 train_loss:5.9283 train_time:4240ms step_avg:151.43ms
step:39/3125 train_loss:5.8139 train_time:4392ms step_avg:151.46ms
step:40/3125 train_loss:5.8354 train_time:4547ms step_avg:151.56ms
step:41/3125 train_loss:5.7526 train_time:4701ms step_avg:151.64ms
step:42/3125 train_loss:5.7529 train_time:4853ms step_avg:151.67ms
step:43/3125 train_loss:5.6505 train_time:5007ms step_avg:151.74ms
step:44/3125 train_loss:5.7266 train_time:5159ms step_avg:151.75ms
step:45/3125 train_loss:5.7140 train_time:5312ms step_avg:151.78ms
step:46/3125 train_loss:5.8505 train_time:5467ms step_avg:151.85ms
step:47/3125 train_loss:5.6509 train_time:5620ms step_avg:151.90ms
step:48/3125 train_loss:5.5158 train_time:5772ms step_avg:151.90ms
step:49/3125 train_loss:5.7114 train_time:5928ms step_avg:152.00ms
step:50/3125 train_loss:5.5959 train_time:6080ms step_avg:152.00ms
step:51/3125 train_loss:5.7366 train_time:6233ms step_avg:152.03ms
step:52/3125 train_loss:5.5920 train_time:6387ms step_avg:152.08ms
step:53/3125 train_loss:5.4477 train_time:6540ms step_avg:152.10ms
step:54/3125 train_loss:5.5705 train_time:6692ms step_avg:152.10ms
step:55/3125 train_loss:5.4450 train_time:6857ms step_avg:152.38ms
step:56/3125 train_loss:5.7752 train_time:7002ms step_avg:152.21ms
step:57/3125 train_loss:5.4347 train_time:7154ms step_avg:152.22ms
step:58/3125 train_loss:5.3172 train_time:7307ms step_avg:152.24ms
step:59/3125 train_loss:5.4433 train_time:7460ms step_avg:152.24ms
step:60/3125 train_loss:5.4090 train_time:7612ms step_avg:152.24ms
step:61/3125 train_loss:5.5051 train_time:7766ms step_avg:152.27ms
step:62/3125 train_loss:5.2689 train_time:7921ms step_avg:152.32ms
step:63/3125 train_loss:5.3658 train_time:8074ms step_avg:152.35ms
step:64/3125 train_loss:5.3452 train_time:8227ms step_avg:152.36ms
step:65/3125 train_loss:5.1718 train_time:8379ms step_avg:152.35ms
step:66/3125 train_loss:5.1619 train_time:8532ms step_avg:152.35ms
step:67/3125 train_loss:5.3061 train_time:8685ms step_avg:152.38ms
step:68/3125 train_loss:5.1835 train_time:8839ms step_avg:152.40ms
step:69/3125 train_loss:5.4180 train_time:8991ms step_avg:152.40ms
step:70/3125 train_loss:5.0782 train_time:9146ms step_avg:152.44ms
step:71/3125 train_loss:5.1449 train_time:9299ms step_avg:152.44ms
step:72/3125 train_loss:5.3063 train_time:9452ms step_avg:152.45ms
step:73/3125 train_loss:5.2284 train_time:9606ms step_avg:152.47ms
step:74/3125 train_loss:5.1223 train_time:9758ms step_avg:152.46ms
step:75/3125 train_loss:5.2371 train_time:9912ms step_avg:152.50ms
step:76/3125 train_loss:5.2216 train_time:10065ms step_avg:152.49ms
step:77/3125 train_loss:5.1650 train_time:10218ms step_avg:152.51ms
step:78/3125 train_loss:5.2550 train_time:10375ms step_avg:152.57ms
step:79/3125 train_loss:5.3644 train_time:10533ms step_avg:152.65ms
step:80/3125 train_loss:5.1035 train_time:10680ms step_avg:152.57ms
step:81/3125 train_loss:5.1933 train_time:10833ms step_avg:152.57ms
step:82/3125 train_loss:4.9597 train_time:10988ms step_avg:152.61ms
step:83/3125 train_loss:5.1507 train_time:11139ms step_avg:152.59ms
step:84/3125 train_loss:5.1011 train_time:11292ms step_avg:152.60ms
step:85/3125 train_loss:5.0829 train_time:11447ms step_avg:152.62ms
step:86/3125 train_loss:4.9399 train_time:11600ms step_avg:152.63ms
step:87/3125 train_loss:5.1442 train_time:11758ms step_avg:152.70ms
step:88/3125 train_loss:5.0527 train_time:11906ms step_avg:152.64ms
step:89/3125 train_loss:5.1009 train_time:12060ms step_avg:152.65ms
step:90/3125 train_loss:5.0601 train_time:12217ms step_avg:152.71ms
step:91/3125 train_loss:4.9740 train_time:12367ms step_avg:152.68ms
step:92/3125 train_loss:4.9735 train_time:12521ms step_avg:152.69ms
step:93/3125 train_loss:5.0954 train_time:12675ms step_avg:152.71ms
step:94/3125 train_loss:4.9294 train_time:12831ms step_avg:152.75ms
step:95/3125 train_loss:4.9381 train_time:12983ms step_avg:152.74ms
step:96/3125 train_loss:4.9884 train_time:13135ms step_avg:152.73ms
step:97/3125 train_loss:4.8871 train_time:13288ms step_avg:152.74ms
step:98/3125 train_loss:4.9470 train_time:13445ms step_avg:152.78ms
step:99/3125 train_loss:4.8782 train_time:13597ms step_avg:152.77ms
step:100/3125 train_loss:4.9880 train_time:13751ms step_avg:152.79ms
step:101/3125 train_loss:4.9574 train_time:13904ms step_avg:152.79ms
step:102/3125 train_loss:4.8370 train_time:14057ms step_avg:152.79ms
step:103/3125 train_loss:4.9759 train_time:14211ms step_avg:152.81ms
step:104/3125 train_loss:4.8980 train_time:14365ms step_avg:152.81ms
step:105/3125 train_loss:4.7941 train_time:14517ms step_avg:152.81ms
step:106/3125 train_loss:4.8440 train_time:14670ms step_avg:152.81ms
step:107/3125 train_loss:4.9963 train_time:14826ms step_avg:152.84ms
step:108/3125 train_loss:4.8105 train_time:14978ms step_avg:152.84ms
step:109/3125 train_loss:4.6173 train_time:15131ms step_avg:152.84ms
step:110/3125 train_loss:4.7779 train_time:15286ms step_avg:152.86ms
step:111/3125 train_loss:4.7759 train_time:15439ms step_avg:152.86ms
step:112/3125 train_loss:4.7250 train_time:15591ms step_avg:152.85ms
step:113/3125 train_loss:4.8566 train_time:15749ms step_avg:152.91ms
step:114/3125 train_loss:4.7536 train_time:15900ms step_avg:152.89ms
step:115/3125 train_loss:4.6155 train_time:16052ms step_avg:152.87ms
step:116/3125 train_loss:4.7647 train_time:16206ms step_avg:152.89ms
step:117/3125 train_loss:4.7006 train_time:16360ms step_avg:152.89ms
step:118/3125 train_loss:4.6407 train_time:16512ms step_avg:152.89ms
step:119/3125 train_loss:4.8143 train_time:16665ms step_avg:152.89ms
step:120/3125 train_loss:4.7147 train_time:16819ms step_avg:152.90ms
step:121/3125 train_loss:4.6148 train_time:16973ms step_avg:152.91ms
step:122/3125 train_loss:4.5499 train_time:17128ms step_avg:152.93ms
step:123/3125 train_loss:4.6840 train_time:17281ms step_avg:152.93ms
step:124/3125 train_loss:4.5283 train_time:17438ms step_avg:152.96ms
step:125/3125 train_loss:4.8149 train_time:17587ms step_avg:152.93ms
step:125/3125 val_loss:4.6370 train_time:17626ms step_avg:153.27ms
step:126/3125 train_loss:4.6751 train_time:17749ms step_avg:153.01ms
step:127/3125 train_loss:4.6351 train_time:17903ms step_avg:153.02ms
step:128/3125 train_loss:4.6731 train_time:18055ms step_avg:153.01ms
step:129/3125 train_loss:4.5835 train_time:18206ms step_avg:152.99ms
step:130/3125 train_loss:4.8728 train_time:18359ms step_avg:152.99ms
step:131/3125 train_loss:4.5761 train_time:18511ms step_avg:152.98ms
step:132/3125 train_loss:4.6056 train_time:18665ms step_avg:152.99ms
step:133/3125 train_loss:4.5383 train_time:18823ms step_avg:153.03ms
step:134/3125 train_loss:4.6352 train_time:18979ms step_avg:153.05ms
step:135/3125 train_loss:4.4716 train_time:19131ms step_avg:153.05ms
step:136/3125 train_loss:4.6219 train_time:19282ms step_avg:153.04ms
step:137/3125 train_loss:4.3967 train_time:19435ms step_avg:153.03ms
step:138/3125 train_loss:4.5635 train_time:19587ms step_avg:153.02ms
step:139/3125 train_loss:4.4795 train_time:19743ms step_avg:153.04ms
step:140/3125 train_loss:4.5461 train_time:19898ms step_avg:153.06ms
step:141/3125 train_loss:4.6209 train_time:20054ms step_avg:153.08ms
step:142/3125 train_loss:4.4828 train_time:20203ms step_avg:153.06ms
step:143/3125 train_loss:4.4740 train_time:20357ms step_avg:153.06ms
step:144/3125 train_loss:4.4059 train_time:20509ms step_avg:153.05ms
step:145/3125 train_loss:4.5180 train_time:20662ms step_avg:153.05ms
step:146/3125 train_loss:4.4699 train_time:20815ms step_avg:153.05ms
step:147/3125 train_loss:4.3523 train_time:20969ms step_avg:153.06ms
step:148/3125 train_loss:4.4836 train_time:21123ms step_avg:153.06ms
step:149/3125 train_loss:4.5103 train_time:21279ms step_avg:153.08ms
step:150/3125 train_loss:4.4595 train_time:21429ms step_avg:153.07ms
step:151/3125 train_loss:4.5652 train_time:21583ms step_avg:153.07ms
step:152/3125 train_loss:4.4202 train_time:21736ms step_avg:153.07ms
step:153/3125 train_loss:4.4193 train_time:21890ms step_avg:153.08ms
step:154/3125 train_loss:4.5005 train_time:22044ms step_avg:153.08ms
step:155/3125 train_loss:4.4883 train_time:22199ms step_avg:153.10ms
step:156/3125 train_loss:4.4196 train_time:22357ms step_avg:153.13ms
step:157/3125 train_loss:4.4707 train_time:22506ms step_avg:153.10ms
step:158/3125 train_loss:4.5406 train_time:22660ms step_avg:153.11ms
step:159/3125 train_loss:4.3626 train_time:22814ms step_avg:153.11ms
step:160/3125 train_loss:4.4309 train_time:22968ms step_avg:153.12ms
step:161/3125 train_loss:4.2388 train_time:23122ms step_avg:153.12ms
step:162/3125 train_loss:4.4600 train_time:23276ms step_avg:153.13ms
step:163/3125 train_loss:4.4696 train_time:23429ms step_avg:153.13ms
step:164/3125 train_loss:4.4492 train_time:23582ms step_avg:153.13ms
step:165/3125 train_loss:4.3171 train_time:23735ms step_avg:153.13ms
step:166/3125 train_loss:4.3868 train_time:23893ms step_avg:153.16ms
step:167/3125 train_loss:4.4695 train_time:24042ms step_avg:153.13ms
step:168/3125 train_loss:4.3070 train_time:24195ms step_avg:153.13ms
step:169/3125 train_loss:4.3842 train_time:24347ms step_avg:153.13ms
step:170/3125 train_loss:4.2795 train_time:24502ms step_avg:153.13ms
step:171/3125 train_loss:4.1510 train_time:24654ms step_avg:153.13ms
step:172/3125 train_loss:4.3029 train_time:24808ms step_avg:153.13ms
step:173/3125 train_loss:4.3220 train_time:24962ms step_avg:153.14ms
step:174/3125 train_loss:4.3721 train_time:25116ms step_avg:153.14ms
step:175/3125 train_loss:4.5266 train_time:25268ms step_avg:153.14ms
step:176/3125 train_loss:4.3517 train_time:25420ms step_avg:153.13ms
step:177/3125 train_loss:4.2116 train_time:25574ms step_avg:153.14ms
step:178/3125 train_loss:4.1747 train_time:25726ms step_avg:153.13ms
step:179/3125 train_loss:4.2876 train_time:25882ms step_avg:153.15ms
step:180/3125 train_loss:4.2494 train_time:26034ms step_avg:153.14ms
step:181/3125 train_loss:4.2127 train_time:26188ms step_avg:153.15ms
step:182/3125 train_loss:4.3879 train_time:26342ms step_avg:153.15ms
step:183/3125 train_loss:4.2655 train_time:26496ms step_avg:153.16ms
step:184/3125 train_loss:4.2444 train_time:26648ms step_avg:153.15ms
step:185/3125 train_loss:4.2386 train_time:26803ms step_avg:153.16ms
step:186/3125 train_loss:4.3153 train_time:26964ms step_avg:153.21ms
step:187/3125 train_loss:4.2785 train_time:27113ms step_avg:153.18ms
step:188/3125 train_loss:4.3397 train_time:27266ms step_avg:153.18ms
step:189/3125 train_loss:4.2710 train_time:28044ms step_avg:156.67ms
step:190/3125 train_loss:4.2055 train_time:28833ms step_avg:160.18ms
step:191/3125 train_loss:4.3008 train_time:28976ms step_avg:160.09ms
step:192/3125 train_loss:4.1837 train_time:29126ms step_avg:160.03ms
step:193/3125 train_loss:4.1255 train_time:29279ms step_avg:159.99ms
step:194/3125 train_loss:4.3444 train_time:29430ms step_avg:159.94ms
step:195/3125 train_loss:4.2520 train_time:29581ms step_avg:159.90ms
step:196/3125 train_loss:4.4625 train_time:29733ms step_avg:159.85ms
step:197/3125 train_loss:4.2913 train_time:29893ms step_avg:159.86ms
step:198/3125 train_loss:4.1351 train_time:30047ms step_avg:159.82ms
step:199/3125 train_loss:4.2677 train_time:30200ms step_avg:159.79ms
step:200/3125 train_loss:4.1242 train_time:30352ms step_avg:159.75ms
step:201/3125 train_loss:4.2146 train_time:30503ms step_avg:159.70ms
step:202/3125 train_loss:4.0888 train_time:30656ms step_avg:159.67ms
step:203/3125 train_loss:4.3314 train_time:31456ms step_avg:162.98ms
step:204/3125 train_loss:4.1604 train_time:31601ms step_avg:162.89ms
step:205/3125 train_loss:4.2819 train_time:31752ms step_avg:162.83ms
step:206/3125 train_loss:4.3301 train_time:31902ms step_avg:162.76ms
step:207/3125 train_loss:4.0394 train_time:32054ms step_avg:162.71ms
step:208/3125 train_loss:4.1886 train_time:32205ms step_avg:162.65ms
step:209/3125 train_loss:4.1894 train_time:32358ms step_avg:162.60ms
step:210/3125 train_loss:4.3321 train_time:32520ms step_avg:162.60ms
step:211/3125 train_loss:4.2645 train_time:32673ms step_avg:162.55ms
step:212/3125 train_loss:4.1487 train_time:32824ms step_avg:162.49ms
step:213/3125 train_loss:4.1686 train_time:32978ms step_avg:162.45ms
step:214/3125 train_loss:4.1318 train_time:33131ms step_avg:162.41ms
step:215/3125 train_loss:4.2049 train_time:33283ms step_avg:162.36ms
step:216/3125 train_loss:4.0129 train_time:33439ms step_avg:162.33ms
step:217/3125 train_loss:4.0829 train_time:33594ms step_avg:162.29ms
step:218/3125 train_loss:4.0936 train_time:33746ms step_avg:162.24ms
step:219/3125 train_loss:4.1691 train_time:33898ms step_avg:162.19ms
step:220/3125 train_loss:4.1515 train_time:34052ms step_avg:162.15ms
step:221/3125 train_loss:4.1752 train_time:34204ms step_avg:162.10ms
step:222/3125 train_loss:4.1968 train_time:34358ms step_avg:162.07ms
step:223/3125 train_loss:4.1019 train_time:34511ms step_avg:162.03ms
step:224/3125 train_loss:4.0592 train_time:34664ms step_avg:161.98ms
step:225/3125 train_loss:4.3756 train_time:34819ms step_avg:161.95ms
step:226/3125 train_loss:3.9878 train_time:34972ms step_avg:161.91ms
step:227/3125 train_loss:4.0616 train_time:35124ms step_avg:161.86ms
step:228/3125 train_loss:4.0718 train_time:35280ms step_avg:161.83ms
step:229/3125 train_loss:4.2204 train_time:35435ms step_avg:161.80ms
step:230/3125 train_loss:4.0105 train_time:35591ms step_avg:161.78ms
step:231/3125 train_loss:4.1393 train_time:35743ms step_avg:161.73ms
step:232/3125 train_loss:3.9916 train_time:35897ms step_avg:161.70ms
step:233/3125 train_loss:4.0606 train_time:36048ms step_avg:161.65ms
step:234/3125 train_loss:4.1803 train_time:36201ms step_avg:161.61ms
step:235/3125 train_loss:4.1005 train_time:36356ms step_avg:161.58ms
step:236/3125 train_loss:3.9858 train_time:36508ms step_avg:161.54ms
step:237/3125 train_loss:4.1517 train_time:36662ms step_avg:161.51ms
step:238/3125 train_loss:4.1663 train_time:36815ms step_avg:161.47ms
step:239/3125 train_loss:4.0212 train_time:36970ms step_avg:161.44ms
step:240/3125 train_loss:4.1707 train_time:37121ms step_avg:161.39ms
step:241/3125 train_loss:4.1945 train_time:37274ms step_avg:161.36ms
step:242/3125 train_loss:4.0497 train_time:37428ms step_avg:161.33ms
step:243/3125 train_loss:4.2209 train_time:37580ms step_avg:161.29ms
step:244/3125 train_loss:4.0998 train_time:37735ms step_avg:161.26ms
step:245/3125 train_loss:4.1601 train_time:37886ms step_avg:161.22ms
step:246/3125 train_loss:4.2311 train_time:38048ms step_avg:161.22ms
step:247/3125 train_loss:4.1429 train_time:38193ms step_avg:161.15ms
step:248/3125 train_loss:4.0902 train_time:38346ms step_avg:161.12ms
step:249/3125 train_loss:4.1996 train_time:38499ms step_avg:161.08ms
step:250/3125 train_loss:4.0025 train_time:38654ms step_avg:161.06ms
step:250/3125 val_loss:4.0874 train_time:38693ms step_avg:161.22ms
step:251/3125 train_loss:4.0543 train_time:38815ms step_avg:161.06ms
step:252/3125 train_loss:4.1513 train_time:38970ms step_avg:161.03ms
step:253/3125 train_loss:4.2306 train_time:39120ms step_avg:160.99ms
step:254/3125 train_loss:4.0134 train_time:39274ms step_avg:160.96ms
step:255/3125 train_loss:3.9656 train_time:39425ms step_avg:160.92ms
step:256/3125 train_loss:4.1471 train_time:39575ms step_avg:160.87ms
step:257/3125 train_loss:4.0514 train_time:39728ms step_avg:160.84ms
step:258/3125 train_loss:4.0667 train_time:39889ms step_avg:160.84ms
step:259/3125 train_loss:4.0499 train_time:40042ms step_avg:160.81ms
step:260/3125 train_loss:4.1022 train_time:40194ms step_avg:160.78ms
step:261/3125 train_loss:4.1345 train_time:40346ms step_avg:160.74ms
step:262/3125 train_loss:4.0966 train_time:40498ms step_avg:160.71ms
step:263/3125 train_loss:4.0663 train_time:40650ms step_avg:160.67ms
step:264/3125 train_loss:3.9775 train_time:40806ms step_avg:160.65ms
step:265/3125 train_loss:4.0649 train_time:40961ms step_avg:160.63ms
step:266/3125 train_loss:3.9390 train_time:41115ms step_avg:160.61ms
step:267/3125 train_loss:3.9911 train_time:41269ms step_avg:160.58ms
step:268/3125 train_loss:3.9940 train_time:41421ms step_avg:160.55ms
step:269/3125 train_loss:4.0286 train_time:41573ms step_avg:160.51ms
step:270/3125 train_loss:3.9366 train_time:41725ms step_avg:160.48ms
step:271/3125 train_loss:4.1727 train_time:41879ms step_avg:160.46ms
step:272/3125 train_loss:4.0518 train_time:42036ms step_avg:160.44ms
step:273/3125 train_loss:3.9883 train_time:42192ms step_avg:160.42ms
step:274/3125 train_loss:4.0296 train_time:42343ms step_avg:160.39ms
step:275/3125 train_loss:4.1011 train_time:42496ms step_avg:160.36ms
step:276/3125 train_loss:4.1371 train_time:42648ms step_avg:160.33ms
step:277/3125 train_loss:4.2960 train_time:42802ms step_avg:160.31ms
step:278/3125 train_loss:4.1075 train_time:42955ms step_avg:160.28ms
step:279/3125 train_loss:4.1551 train_time:43111ms step_avg:160.26ms
step:280/3125 train_loss:4.0667 train_time:43264ms step_avg:160.24ms
step:281/3125 train_loss:4.2142 train_time:43416ms step_avg:160.21ms
step:282/3125 train_loss:4.0250 train_time:43571ms step_avg:160.19ms
step:283/3125 train_loss:4.0127 train_time:43722ms step_avg:160.16ms
step:284/3125 train_loss:3.9797 train_time:43875ms step_avg:160.13ms
step:285/3125 train_loss:4.1184 train_time:44029ms step_avg:160.11ms
step:286/3125 train_loss:4.1275 train_time:44183ms step_avg:160.08ms
step:287/3125 train_loss:4.1635 train_time:44335ms step_avg:160.06ms
step:288/3125 train_loss:3.9847 train_time:44489ms step_avg:160.03ms
step:289/3125 train_loss:4.0911 train_time:44644ms step_avg:160.01ms
step:290/3125 train_loss:3.9425 train_time:44795ms step_avg:159.98ms
step:291/3125 train_loss:3.9351 train_time:44949ms step_avg:159.96ms
step:292/3125 train_loss:4.0045 train_time:45104ms step_avg:159.94ms
step:293/3125 train_loss:3.9384 train_time:45256ms step_avg:159.91ms
step:294/3125 train_loss:3.9829 train_time:45410ms step_avg:159.90ms
step:295/3125 train_loss:4.0273 train_time:45569ms step_avg:159.89ms
step:296/3125 train_loss:3.9124 train_time:45715ms step_avg:159.84ms
step:297/3125 train_loss:3.9328 train_time:45870ms step_avg:159.83ms
step:298/3125 train_loss:3.9282 train_time:46028ms step_avg:159.82ms
step:299/3125 train_loss:4.0411 train_time:46176ms step_avg:159.78ms
step:300/3125 train_loss:3.9023 train_time:46333ms step_avg:159.77ms
step:301/3125 train_loss:4.0298 train_time:46484ms step_avg:159.74ms
step:302/3125 train_loss:4.0532 train_time:46636ms step_avg:159.71ms
step:303/3125 train_loss:4.0082 train_time:46791ms step_avg:159.70ms
step:304/3125 train_loss:4.0500 train_time:46943ms step_avg:159.67ms
step:305/3125 train_loss:4.0283 train_time:47100ms step_avg:159.66ms
step:306/3125 train_loss:4.5179 train_time:47250ms step_avg:159.63ms
step:307/3125 train_loss:4.0110 train_time:47405ms step_avg:159.61ms
step:308/3125 train_loss:3.9140 train_time:47558ms step_avg:159.59ms
step:309/3125 train_loss:4.0579 train_time:47712ms step_avg:159.57ms
step:310/3125 train_loss:3.9296 train_time:47865ms step_avg:159.55ms
step:311/3125 train_loss:4.1589 train_time:48017ms step_avg:159.53ms
step:312/3125 train_loss:3.9977 train_time:48172ms step_avg:159.51ms
step:313/3125 train_loss:3.9436 train_time:48326ms step_avg:159.49ms
step:314/3125 train_loss:4.0208 train_time:48478ms step_avg:159.47ms
step:315/3125 train_loss:4.1488 train_time:48631ms step_avg:159.45ms
step:316/3125 train_loss:4.0213 train_time:48786ms step_avg:159.43ms
step:317/3125 train_loss:3.8644 train_time:48937ms step_avg:159.40ms
step:318/3125 train_loss:3.9475 train_time:49092ms step_avg:159.39ms
step:319/3125 train_loss:3.9866 train_time:49244ms step_avg:159.37ms
step:320/3125 train_loss:3.9583 train_time:49400ms step_avg:159.36ms
step:321/3125 train_loss:4.0792 train_time:49557ms step_avg:159.35ms
step:322/3125 train_loss:4.0183 train_time:49706ms step_avg:159.31ms
step:323/3125 train_loss:4.0031 train_time:49858ms step_avg:159.29ms
step:324/3125 train_loss:4.0846 train_time:50012ms step_avg:159.27ms
step:325/3125 train_loss:4.0209 train_time:50165ms step_avg:159.26ms
step:326/3125 train_loss:4.0899 train_time:50318ms step_avg:159.23ms
step:327/3125 train_loss:3.9618 train_time:50472ms step_avg:159.22ms
step:328/3125 train_loss:4.4477 train_time:50627ms step_avg:159.20ms
step:329/3125 train_loss:4.1389 train_time:50776ms step_avg:159.17ms
step:330/3125 train_loss:3.8873 train_time:50930ms step_avg:159.16ms
step:331/3125 train_loss:3.8275 train_time:51082ms step_avg:159.13ms
step:332/3125 train_loss:4.0473 train_time:51235ms step_avg:159.11ms
step:333/3125 train_loss:3.9840 train_time:51390ms step_avg:159.10ms
step:334/3125 train_loss:3.9501 train_time:51541ms step_avg:159.08ms
step:335/3125 train_loss:3.9135 train_time:51693ms step_avg:159.06ms
step:336/3125 train_loss:4.0821 train_time:51848ms step_avg:159.04ms
step:337/3125 train_loss:4.0348 train_time:52002ms step_avg:159.03ms
step:338/3125 train_loss:4.5052 train_time:52155ms step_avg:159.01ms
step:339/3125 train_loss:4.0132 train_time:52311ms step_avg:159.00ms
step:340/3125 train_loss:3.9604 train_time:52465ms step_avg:158.98ms
step:341/3125 train_loss:4.0061 train_time:52622ms step_avg:158.98ms
step:342/3125 train_loss:3.9178 train_time:52771ms step_avg:158.95ms
step:343/3125 train_loss:3.8929 train_time:52923ms step_avg:158.93ms
step:344/3125 train_loss:3.9232 train_time:53083ms step_avg:158.93ms
step:345/3125 train_loss:4.0644 train_time:53232ms step_avg:158.90ms
step:346/3125 train_loss:3.9080 train_time:53384ms step_avg:158.88ms
step:347/3125 train_loss:3.8455 train_time:53537ms step_avg:158.86ms
step:348/3125 train_loss:3.8790 train_time:53692ms step_avg:158.85ms
step:349/3125 train_loss:3.9274 train_time:53846ms step_avg:158.84ms
step:350/3125 train_loss:3.9004 train_time:54000ms step_avg:158.82ms
step:351/3125 train_loss:3.6416 train_time:54152ms step_avg:158.80ms
step:352/3125 train_loss:3.9030 train_time:54306ms step_avg:158.79ms
step:353/3125 train_loss:4.2504 train_time:54458ms step_avg:158.77ms
step:354/3125 train_loss:3.7328 train_time:54612ms step_avg:158.76ms
step:355/3125 train_loss:4.0006 train_time:54766ms step_avg:158.74ms
step:356/3125 train_loss:3.8671 train_time:54919ms step_avg:158.72ms
step:357/3125 train_loss:3.9671 train_time:55073ms step_avg:158.71ms
step:358/3125 train_loss:3.8765 train_time:55225ms step_avg:158.69ms
step:359/3125 train_loss:3.9246 train_time:55377ms step_avg:158.67ms
step:360/3125 train_loss:3.9139 train_time:55531ms step_avg:158.66ms
step:361/3125 train_loss:3.5132 train_time:55685ms step_avg:158.65ms
step:362/3125 train_loss:4.0953 train_time:55836ms step_avg:158.63ms
step:363/3125 train_loss:3.9902 train_time:55991ms step_avg:158.62ms
step:364/3125 train_loss:3.9189 train_time:56146ms step_avg:158.60ms
step:365/3125 train_loss:3.8213 train_time:56297ms step_avg:158.58ms
step:366/3125 train_loss:3.9873 train_time:56450ms step_avg:158.57ms
step:367/3125 train_loss:3.9448 train_time:56604ms step_avg:158.56ms
step:368/3125 train_loss:3.9383 train_time:56756ms step_avg:158.54ms
step:369/3125 train_loss:3.9205 train_time:56912ms step_avg:158.53ms
step:370/3125 train_loss:3.8193 train_time:57064ms step_avg:158.51ms
step:371/3125 train_loss:3.9626 train_time:57217ms step_avg:158.49ms
step:372/3125 train_loss:3.8267 train_time:57372ms step_avg:158.49ms
step:373/3125 train_loss:3.7765 train_time:57524ms step_avg:158.47ms
step:374/3125 train_loss:3.9989 train_time:57676ms step_avg:158.45ms
step:375/3125 train_loss:3.9125 train_time:57831ms step_avg:158.44ms
step:375/3125 val_loss:3.9082 train_time:57869ms step_avg:158.55ms
step:376/3125 train_loss:3.8891 train_time:57991ms step_avg:158.45ms
step:377/3125 train_loss:3.9482 train_time:58142ms step_avg:158.43ms
step:378/3125 train_loss:3.8692 train_time:58919ms step_avg:160.11ms
step:379/3125 train_loss:3.9248 train_time:59067ms step_avg:160.07ms
step:380/3125 train_loss:3.9448 train_time:59848ms step_avg:161.75ms
step:381/3125 train_loss:4.0253 train_time:59995ms step_avg:161.71ms
step:382/3125 train_loss:3.9286 train_time:60147ms step_avg:161.69ms
step:383/3125 train_loss:3.8879 train_time:60298ms step_avg:161.66ms
step:384/3125 train_loss:3.8709 train_time:60450ms step_avg:161.63ms
step:385/3125 train_loss:3.9489 train_time:60600ms step_avg:161.60ms
step:386/3125 train_loss:3.8692 train_time:60754ms step_avg:161.58ms
step:387/3125 train_loss:3.9668 train_time:60915ms step_avg:161.58ms
step:388/3125 train_loss:4.1506 train_time:61070ms step_avg:161.56ms
step:389/3125 train_loss:3.8817 train_time:61222ms step_avg:161.53ms
step:390/3125 train_loss:3.8693 train_time:61374ms step_avg:161.51ms
step:391/3125 train_loss:3.9734 train_time:61525ms step_avg:161.48ms
step:392/3125 train_loss:3.8895 train_time:61676ms step_avg:161.46ms
step:393/3125 train_loss:3.9947 train_time:61831ms step_avg:161.44ms
step:394/3125 train_loss:3.8399 train_time:61986ms step_avg:161.42ms
step:395/3125 train_loss:3.9737 train_time:62141ms step_avg:161.41ms
step:396/3125 train_loss:3.7177 train_time:62294ms step_avg:161.38ms
step:397/3125 train_loss:3.9313 train_time:62446ms step_avg:161.36ms
step:398/3125 train_loss:3.9502 train_time:62598ms step_avg:161.33ms
step:399/3125 train_loss:3.9626 train_time:62754ms step_avg:161.32ms
step:400/3125 train_loss:3.8580 train_time:62907ms step_avg:161.30ms
step:401/3125 train_loss:3.9016 train_time:63058ms step_avg:161.27ms
step:402/3125 train_loss:3.9962 train_time:63213ms step_avg:161.26ms
step:403/3125 train_loss:3.9196 train_time:63367ms step_avg:161.24ms
step:404/3125 train_loss:4.0339 train_time:63520ms step_avg:161.22ms
step:405/3125 train_loss:3.7775 train_time:63672ms step_avg:161.20ms
step:406/3125 train_loss:3.8805 train_time:63826ms step_avg:161.18ms
step:407/3125 train_loss:4.1802 train_time:63977ms step_avg:161.15ms
step:408/3125 train_loss:3.8733 train_time:64132ms step_avg:161.14ms
step:409/3125 train_loss:3.8965 train_time:64288ms step_avg:161.12ms
step:410/3125 train_loss:3.9448 train_time:64441ms step_avg:161.10ms
step:411/3125 train_loss:3.8371 train_time:64594ms step_avg:161.08ms
step:412/3125 train_loss:3.8536 train_time:64751ms step_avg:161.07ms
step:413/3125 train_loss:4.2934 train_time:64899ms step_avg:161.04ms
step:414/3125 train_loss:3.7224 train_time:65053ms step_avg:161.02ms
step:415/3125 train_loss:4.0912 train_time:65206ms step_avg:161.00ms
step:416/3125 train_loss:3.8467 train_time:65360ms step_avg:160.98ms
step:417/3125 train_loss:3.8535 train_time:65515ms step_avg:160.97ms
step:418/3125 train_loss:4.0306 train_time:65668ms step_avg:160.95ms
step:419/3125 train_loss:3.7730 train_time:65819ms step_avg:160.93ms
step:420/3125 train_loss:3.8997 train_time:65975ms step_avg:160.92ms
step:421/3125 train_loss:3.8128 train_time:66130ms step_avg:160.90ms
step:422/3125 train_loss:3.7340 train_time:66284ms step_avg:160.88ms
step:423/3125 train_loss:3.8683 train_time:66435ms step_avg:160.86ms
step:424/3125 train_loss:3.9605 train_time:66588ms step_avg:160.84ms
step:425/3125 train_loss:3.7065 train_time:66740ms step_avg:160.82ms
step:426/3125 train_loss:3.8888 train_time:66894ms step_avg:160.80ms
step:427/3125 train_loss:3.7740 train_time:67047ms step_avg:160.78ms
step:428/3125 train_loss:3.9879 train_time:67199ms step_avg:160.76ms
step:429/3125 train_loss:3.9039 train_time:67354ms step_avg:160.75ms
step:430/3125 train_loss:3.8414 train_time:67506ms step_avg:160.73ms
step:431/3125 train_loss:3.8187 train_time:67658ms step_avg:160.71ms
step:432/3125 train_loss:3.7145 train_time:67814ms step_avg:160.70ms
step:433/3125 train_loss:3.8580 train_time:67967ms step_avg:160.68ms
step:434/3125 train_loss:3.9076 train_time:68119ms step_avg:160.66ms
step:435/3125 train_loss:3.8615 train_time:68273ms step_avg:160.64ms
step:436/3125 train_loss:3.9034 train_time:68430ms step_avg:160.63ms
step:437/3125 train_loss:3.9216 train_time:68580ms step_avg:160.61ms
step:438/3125 train_loss:3.7955 train_time:68734ms step_avg:160.59ms
step:439/3125 train_loss:3.8070 train_time:68887ms step_avg:160.58ms
step:440/3125 train_loss:3.8011 train_time:69039ms step_avg:160.56ms
step:441/3125 train_loss:3.9769 train_time:69193ms step_avg:160.54ms
step:442/3125 train_loss:3.8534 train_time:69348ms step_avg:160.53ms
step:443/3125 train_loss:3.8364 train_time:69500ms step_avg:160.51ms
step:444/3125 train_loss:3.7362 train_time:69653ms step_avg:160.49ms
step:445/3125 train_loss:4.0151 train_time:69806ms step_avg:160.47ms
step:446/3125 train_loss:3.9418 train_time:69959ms step_avg:160.46ms
step:447/3125 train_loss:3.9277 train_time:70114ms step_avg:160.44ms
step:448/3125 train_loss:3.8422 train_time:70266ms step_avg:160.42ms
step:449/3125 train_loss:3.9456 train_time:70419ms step_avg:160.41ms
step:450/3125 train_loss:3.7776 train_time:70573ms step_avg:160.39ms
step:451/3125 train_loss:3.8016 train_time:70727ms step_avg:160.38ms
step:452/3125 train_loss:3.6736 train_time:70879ms step_avg:160.36ms
step:453/3125 train_loss:3.7958 train_time:71034ms step_avg:160.35ms
step:454/3125 train_loss:3.7683 train_time:71188ms step_avg:160.33ms
step:455/3125 train_loss:3.7313 train_time:71340ms step_avg:160.31ms
step:456/3125 train_loss:3.9394 train_time:71495ms step_avg:160.30ms
step:457/3125 train_loss:3.8175 train_time:71647ms step_avg:160.28ms
step:458/3125 train_loss:3.8807 train_time:71801ms step_avg:160.27ms
step:459/3125 train_loss:3.9275 train_time:71954ms step_avg:160.25ms
step:460/3125 train_loss:3.7298 train_time:72107ms step_avg:160.24ms
step:461/3125 train_loss:3.8981 train_time:72260ms step_avg:160.22ms
step:462/3125 train_loss:3.7901 train_time:72414ms step_avg:160.21ms
step:463/3125 train_loss:3.8183 train_time:72568ms step_avg:160.19ms
step:464/3125 train_loss:3.8628 train_time:72728ms step_avg:160.19ms
step:465/3125 train_loss:3.8074 train_time:72874ms step_avg:160.16ms
step:466/3125 train_loss:3.8144 train_time:73028ms step_avg:160.15ms
step:467/3125 train_loss:3.9076 train_time:73183ms step_avg:160.14ms
step:468/3125 train_loss:3.9182 train_time:73335ms step_avg:160.12ms
step:469/3125 train_loss:3.8977 train_time:73488ms step_avg:160.11ms
step:470/3125 train_loss:3.7889 train_time:73641ms step_avg:160.09ms
step:471/3125 train_loss:3.8685 train_time:73795ms step_avg:160.08ms
step:472/3125 train_loss:3.9159 train_time:73947ms step_avg:160.06ms
step:473/3125 train_loss:3.8701 train_time:74099ms step_avg:160.04ms
step:474/3125 train_loss:3.8188 train_time:74253ms step_avg:160.03ms
step:475/3125 train_loss:3.6844 train_time:74407ms step_avg:160.02ms
step:476/3125 train_loss:4.1209 train_time:74560ms step_avg:160.00ms
step:477/3125 train_loss:3.8640 train_time:74715ms step_avg:159.99ms
step:478/3125 train_loss:3.6911 train_time:74868ms step_avg:159.97ms
step:479/3125 train_loss:3.9139 train_time:75020ms step_avg:159.96ms
step:480/3125 train_loss:3.8673 train_time:75175ms step_avg:159.95ms
step:481/3125 train_loss:4.0124 train_time:75330ms step_avg:159.94ms
step:482/3125 train_loss:3.8212 train_time:75481ms step_avg:159.92ms
step:483/3125 train_loss:3.6247 train_time:75638ms step_avg:159.91ms
step:484/3125 train_loss:3.9118 train_time:75789ms step_avg:159.89ms
step:485/3125 train_loss:3.7631 train_time:75950ms step_avg:159.90ms
step:486/3125 train_loss:3.7719 train_time:76097ms step_avg:159.87ms
step:487/3125 train_loss:3.6978 train_time:76250ms step_avg:159.85ms
step:488/3125 train_loss:3.7771 train_time:76401ms step_avg:159.84ms
step:489/3125 train_loss:3.9765 train_time:76557ms step_avg:159.83ms
step:490/3125 train_loss:3.8159 train_time:76711ms step_avg:159.81ms
step:491/3125 train_loss:3.6935 train_time:76865ms step_avg:159.80ms
step:492/3125 train_loss:3.7199 train_time:77018ms step_avg:159.79ms
step:493/3125 train_loss:3.8340 train_time:77172ms step_avg:159.78ms
step:494/3125 train_loss:3.6830 train_time:77325ms step_avg:159.76ms
step:495/3125 train_loss:3.8137 train_time:77478ms step_avg:159.75ms
step:496/3125 train_loss:3.7546 train_time:77639ms step_avg:159.75ms
step:497/3125 train_loss:3.6288 train_time:77788ms step_avg:159.73ms
step:498/3125 train_loss:3.8311 train_time:77939ms step_avg:159.71ms
step:499/3125 train_loss:3.9054 train_time:78094ms step_avg:159.70ms
step:500/3125 train_loss:3.9353 train_time:78245ms step_avg:159.68ms
step:500/3125 val_loss:3.8107 train_time:78285ms step_avg:159.77ms
step:501/3125 train_loss:3.8469 train_time:78402ms step_avg:159.68ms
step:502/3125 train_loss:3.9030 train_time:78558ms step_avg:159.67ms
step:503/3125 train_loss:3.8467 train_time:78710ms step_avg:159.65ms
step:504/3125 train_loss:3.8823 train_time:78861ms step_avg:159.64ms
step:505/3125 train_loss:3.8273 train_time:79013ms step_avg:159.62ms
step:506/3125 train_loss:3.9233 train_time:79167ms step_avg:159.61ms
step:507/3125 train_loss:3.7611 train_time:79319ms step_avg:159.59ms
step:508/3125 train_loss:3.8608 train_time:79474ms step_avg:159.59ms
step:509/3125 train_loss:3.9417 train_time:79627ms step_avg:159.57ms
step:510/3125 train_loss:3.8764 train_time:79779ms step_avg:159.56ms
step:511/3125 train_loss:3.6892 train_time:79934ms step_avg:159.55ms
step:512/3125 train_loss:3.8850 train_time:80081ms step_avg:159.52ms
step:513/3125 train_loss:3.8194 train_time:80235ms step_avg:159.51ms
step:514/3125 train_loss:3.7839 train_time:80388ms step_avg:159.50ms
step:515/3125 train_loss:3.8689 train_time:80543ms step_avg:159.49ms
step:516/3125 train_loss:3.8376 train_time:80696ms step_avg:159.48ms
step:517/3125 train_loss:4.1871 train_time:80850ms step_avg:159.47ms
step:518/3125 train_loss:3.7889 train_time:81002ms step_avg:159.45ms
step:519/3125 train_loss:3.8890 train_time:81158ms step_avg:159.45ms
step:520/3125 train_loss:3.7807 train_time:81309ms step_avg:159.43ms
step:521/3125 train_loss:3.8008 train_time:81461ms step_avg:159.42ms
step:522/3125 train_loss:3.7566 train_time:81615ms step_avg:159.40ms
step:523/3125 train_loss:3.7623 train_time:81768ms step_avg:159.39ms
step:524/3125 train_loss:4.3964 train_time:81920ms step_avg:159.38ms
step:525/3125 train_loss:3.8502 train_time:82073ms step_avg:159.36ms
step:526/3125 train_loss:3.7872 train_time:82225ms step_avg:159.35ms
step:527/3125 train_loss:3.8036 train_time:82378ms step_avg:159.34ms
step:528/3125 train_loss:3.7592 train_time:82531ms step_avg:159.33ms
step:529/3125 train_loss:3.7325 train_time:82686ms step_avg:159.32ms
step:530/3125 train_loss:3.9546 train_time:82841ms step_avg:159.31ms
step:531/3125 train_loss:3.7587 train_time:82991ms step_avg:159.29ms
step:532/3125 train_loss:4.0246 train_time:83144ms step_avg:159.28ms
step:533/3125 train_loss:3.8356 train_time:83296ms step_avg:159.27ms
step:534/3125 train_loss:3.7690 train_time:83450ms step_avg:159.26ms
step:535/3125 train_loss:3.7874 train_time:83601ms step_avg:159.24ms
step:536/3125 train_loss:3.7194 train_time:83760ms step_avg:159.24ms
step:537/3125 train_loss:3.8585 train_time:83909ms step_avg:159.22ms
step:538/3125 train_loss:3.8434 train_time:84062ms step_avg:159.21ms
step:539/3125 train_loss:3.7378 train_time:84220ms step_avg:159.21ms
step:540/3125 train_loss:4.2401 train_time:84367ms step_avg:159.18ms
step:541/3125 train_loss:3.7777 train_time:84519ms step_avg:159.17ms
step:542/3125 train_loss:3.8906 train_time:84673ms step_avg:159.16ms
step:543/3125 train_loss:3.7114 train_time:84826ms step_avg:159.15ms
step:544/3125 train_loss:3.6892 train_time:84979ms step_avg:159.14ms
step:545/3125 train_loss:3.7679 train_time:85131ms step_avg:159.12ms
step:546/3125 train_loss:3.7013 train_time:85285ms step_avg:159.11ms
step:547/3125 train_loss:3.7477 train_time:85438ms step_avg:159.10ms
step:548/3125 train_loss:3.7554 train_time:85590ms step_avg:159.09ms
step:549/3125 train_loss:3.7333 train_time:85745ms step_avg:159.08ms
step:550/3125 train_loss:3.8354 train_time:85896ms step_avg:159.07ms
step:551/3125 train_loss:3.7245 train_time:86054ms step_avg:159.06ms
step:552/3125 train_loss:3.7348 train_time:86203ms step_avg:159.05ms
step:553/3125 train_loss:4.0734 train_time:86356ms step_avg:159.04ms
step:554/3125 train_loss:3.8638 train_time:86512ms step_avg:159.03ms
step:555/3125 train_loss:3.8217 train_time:86661ms step_avg:159.01ms
step:556/3125 train_loss:3.7605 train_time:86815ms step_avg:159.00ms
step:557/3125 train_loss:3.7996 train_time:86968ms step_avg:158.99ms
step:558/3125 train_loss:3.4596 train_time:87120ms step_avg:158.98ms
step:559/3125 train_loss:3.7159 train_time:87273ms step_avg:158.97ms
step:560/3125 train_loss:3.7614 train_time:87426ms step_avg:158.96ms
step:561/3125 train_loss:3.8062 train_time:87578ms step_avg:158.94ms
step:562/3125 train_loss:3.7214 train_time:87731ms step_avg:158.93ms
step:563/3125 train_loss:3.6630 train_time:87884ms step_avg:158.92ms
step:564/3125 train_loss:3.8653 train_time:88037ms step_avg:158.91ms
step:565/3125 train_loss:3.6758 train_time:88190ms step_avg:158.90ms
step:566/3125 train_loss:3.7930 train_time:88343ms step_avg:158.89ms
step:567/3125 train_loss:3.7358 train_time:89123ms step_avg:160.00ms
step:568/3125 train_loss:3.7066 train_time:89270ms step_avg:159.98ms
step:569/3125 train_loss:3.7900 train_time:89421ms step_avg:159.97ms
step:570/3125 train_loss:3.7655 train_time:90207ms step_avg:161.08ms
step:571/3125 train_loss:3.7951 train_time:90356ms step_avg:161.06ms
step:572/3125 train_loss:3.8760 train_time:90506ms step_avg:161.04ms
step:573/3125 train_loss:3.8337 train_time:90658ms step_avg:161.03ms
step:574/3125 train_loss:3.8360 train_time:90809ms step_avg:161.01ms
step:575/3125 train_loss:3.8859 train_time:90960ms step_avg:160.99ms
step:576/3125 train_loss:3.8347 train_time:91114ms step_avg:160.98ms
step:577/3125 train_loss:3.8628 train_time:91271ms step_avg:160.97ms
step:578/3125 train_loss:3.7880 train_time:91424ms step_avg:160.96ms
step:579/3125 train_loss:3.7844 train_time:91577ms step_avg:160.94ms
step:580/3125 train_loss:3.7693 train_time:91731ms step_avg:160.93ms
step:581/3125 train_loss:3.7035 train_time:91883ms step_avg:160.92ms
step:582/3125 train_loss:3.7372 train_time:92033ms step_avg:160.90ms
step:583/3125 train_loss:3.9625 train_time:92188ms step_avg:160.89ms
step:584/3125 train_loss:3.7266 train_time:92343ms step_avg:160.88ms
step:585/3125 train_loss:3.7017 train_time:92497ms step_avg:160.86ms
step:586/3125 train_loss:3.8882 train_time:92652ms step_avg:160.85ms
step:587/3125 train_loss:3.6375 train_time:92802ms step_avg:160.84ms
step:588/3125 train_loss:3.7724 train_time:92956ms step_avg:160.82ms
step:589/3125 train_loss:3.7491 train_time:93108ms step_avg:160.81ms
step:590/3125 train_loss:4.1036 train_time:93262ms step_avg:160.80ms
step:591/3125 train_loss:3.8916 train_time:93418ms step_avg:160.79ms
step:592/3125 train_loss:3.6334 train_time:93571ms step_avg:160.78ms
step:593/3125 train_loss:3.6459 train_time:93723ms step_avg:160.76ms
step:594/3125 train_loss:3.6249 train_time:93877ms step_avg:160.75ms
step:595/3125 train_loss:3.6687 train_time:94031ms step_avg:160.74ms
step:596/3125 train_loss:4.0447 train_time:94182ms step_avg:160.72ms
step:597/3125 train_loss:3.7609 train_time:94341ms step_avg:160.72ms
step:598/3125 train_loss:3.6975 train_time:94494ms step_avg:160.70ms
step:599/3125 train_loss:3.7690 train_time:94643ms step_avg:160.68ms
step:600/3125 train_loss:3.5897 train_time:94796ms step_avg:160.67ms
step:601/3125 train_loss:3.7055 train_time:94952ms step_avg:160.66ms
step:602/3125 train_loss:3.7426 train_time:95103ms step_avg:160.65ms
step:603/3125 train_loss:3.7679 train_time:95261ms step_avg:160.64ms
step:604/3125 train_loss:3.8919 train_time:95410ms step_avg:160.62ms
step:605/3125 train_loss:3.7342 train_time:95564ms step_avg:160.61ms
step:606/3125 train_loss:3.7230 train_time:95719ms step_avg:160.60ms
step:607/3125 train_loss:3.6836 train_time:95872ms step_avg:160.59ms
step:608/3125 train_loss:3.9279 train_time:96026ms step_avg:160.58ms
step:609/3125 train_loss:3.7552 train_time:96180ms step_avg:160.57ms
step:610/3125 train_loss:3.7248 train_time:96331ms step_avg:160.55ms
step:611/3125 train_loss:3.8214 train_time:96483ms step_avg:160.54ms
