import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
import uuid
import time
import copy
import glob
from dataclasses import dataclass
from functools import lru_cache
from pathlib import Path

os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "expandable_segments:True"
import torch
torch.empty(1, device="cuda", requires_grad=True).backward() # prevents a bug on some systems
from torch import Tensor, nn
import torch.nn.functional as F
import torch.distributed as dist
# use of FlexAttention contributed by @KoszarskyB
from torch.nn.attention.flex_attention import BlockMask, flex_attention
#torch._inductor.config.coordinate_descent_tuning = True # we have banned this flag for new records because it causes compilation to take 30min
import triton
import triton.language as tl

@dataclass
class Hyperparameters:
    # data
    dampen_factor = 64
    run_id = f'final/{uuid.uuid4()}'
    train_files = "data/fineweb10B/fineweb_train_*.bin" # input .bin to train on
    val_files = "data/fineweb10B/fineweb_val_*.bin" # input .bin to eval validation loss on
    val_tokens = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    train_seq_len = 48*1024 # FlexAttention sequence length
    val_seq_len = 4*64*1024 # FlexAttention sequence length for validation
    # optimization
    num_iterations = 1695 # number of iterations to run
    cooldown_frac = 0.45 # fraction of training spent cooling down the learning rate
    # evaluation and logging
    val_loss_every = 125 # every how many steps to evaluate val loss? 0 for only at the end
    save_checkpoint = False
args = Hyperparameters()

# -----------------------------------------------------------------------------
# Custom operators: FP8 matmul by @YouJiacheng

@torch.library.custom_op("nanogpt::mm", mutates_args=())
def mm_op(x: Tensor, w: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor, Tensor]:
    @torch.compile
    def impl(x: Tensor, w: Tensor):
        assert x.is_contiguous() and w.is_contiguous()
        x_f8 = x.div(x_s).to(torch.float8_e4m3fn)
        w_f8 = w.div(w_s).to(torch.float8_e4m3fn)
        out = torch._scaled_mm(
            x_f8,
            w_f8.T,
            out_dtype=torch.bfloat16,
            scale_a=x.new_tensor(x_s, dtype=torch.float32),
            scale_b=x.new_tensor(w_s, dtype=torch.float32),
            use_fast_accum=True,
        )
        return out, x_f8, w_f8

    return impl(x, w)

@mm_op.register_fake
def _(x: Tensor, w: Tensor, *_):
    assert x.ndim == w.ndim == 2
    assert x.shape[1] == w.shape[1]
    assert x.device == w.device
    assert x.is_contiguous() and w.is_contiguous()
    return x @ w.T, x.to(torch.float8_e4m3fn), w.to(torch.float8_e4m3fn)

@torch.library.custom_op("nanogpt::mm_backward", mutates_args=())
def mm_backward_op(g: Tensor, x_f8: Tensor, w_f8: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor]:
    @torch.compile
    def impl(grad: Tensor, x_f8: Tensor, w_f8: Tensor):
        assert grad.is_contiguous()
        x_inv_s = grad.new_tensor(x_s, dtype=torch.float32)
        w_inv_s = grad.new_tensor(w_s, dtype=torch.float32)
        grad_inv_s = grad.new_tensor(grad_s, dtype=torch.float32)
        grad_f8 = grad.div(grad_s).to(torch.float8_e5m2)
        grad_x = torch._scaled_mm(
            grad_f8,
            w_f8.T.contiguous().T,
            out_dtype=torch.bfloat16,
            scale_a=grad_inv_s,
            scale_b=w_inv_s,
            use_fast_accum=False,
        )
        # faster than grad_f8_t @ x_f8, for (d_out, d_in) == (50304, 768)
        grad_w = torch._scaled_mm(
            x_f8.T.contiguous(),
            grad_f8.T.contiguous().T,
            out_dtype=torch.float32,
            scale_a=x_inv_s,
            scale_b=grad_inv_s,
            use_fast_accum=False,
        ).T
        return grad_x, grad_w

    return impl(g, x_f8, w_f8)

@mm_backward_op.register_fake
def _(g: Tensor, x_f8: Tensor, w_f8: Tensor, *_):
    return x_f8.to(torch.bfloat16), w_f8.T.contiguous().T.to(torch.float32)

def backward(ctx, grad_out: Tensor, *_):
    x_f8, w_f8 = ctx.saved_tensors
    x_s, w_s, grad_s = ctx.scales
    grad_x, grad_w = torch.ops.nanogpt.mm_backward(
        grad_out, x_f8, w_f8, x_s, w_s, grad_s
    )
    return grad_x, grad_w, None, None, None

def setup_context(ctx: torch.autograd.function.FunctionCtx, inputs, output):
    *_, x_s, w_s, grad_s = inputs
    _, x_f8, w_f8 = output
    ctx.save_for_backward(x_f8, w_f8)
    ctx.scales = x_s, w_s, grad_s
    ctx.set_materialize_grads(False)

mm_op.register_autograd(backward, setup_context=setup_context)

# -----------------------------------------------------------------------------
# Triton kernel for symmetric matrix multiplication by @byronxu99

def _get_autotune_configs():
    return [
        triton.Config(
            {
                "BLOCK_SIZE_M": bm,
                "BLOCK_SIZE_N": bn,
                "BLOCK_SIZE_K": bk,
                "GROUP_SIZE_M": 8,
                "LOWER_UPPER": 1,
            },
            num_stages=stages,
            num_warps=warps,
        )
        for bm in [64, 128]
        for bn in [64, 128, 256]
        for bk in [64, 128]
        for stages, warps in [(3, 4), (3, 8), (4, 4)]
        if bm // bn <= 2 and bn // bm <= 2
    ]

@triton.jit
def _pid_to_block(
    pid,
    M,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
):
    # Split output matrix into blocks of size (BLOCK_SIZE_M, BLOCK_SIZE_N)
    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)
    num_pid_n = tl.cdiv(M, BLOCK_SIZE_N)

    # Map PID to a single matrix in batch
    batch_idx = pid // (num_pid_m * num_pid_n)
    pid = pid % (num_pid_m * num_pid_n)

    # Map PID to 2D grid of blocks
    pid_m = pid // num_pid_n
    pid_n = pid % num_pid_n
    pid_m, pid_n = tl.swizzle2d(pid_m, pid_n, num_pid_m, num_pid_n, GROUP_SIZE_M)

    m_idx = pid_m * BLOCK_SIZE_M
    n_idx = pid_n * BLOCK_SIZE_N
    return batch_idx, m_idx, n_idx

@triton.autotune(
    configs=_get_autotune_configs(),
    key=["M", "K", "a_stride_r", "a_stride_c", "c_stride_r", "c_stride_c"],
)
@triton.jit
def ns_line_1_kernel(
    A_ptr, C_ptr,
    M, K,
    a_stride_b, a_stride_r, a_stride_c,
    c_stride_b, c_stride_r, c_stride_c,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    BLOCK_SIZE_K: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
    LOWER_UPPER: tl.constexpr,
):
    pid = tl.program_id(axis=0)
    batch_idx, m_idx, n_idx = _pid_to_block(
        pid, M, BLOCK_SIZE_M, BLOCK_SIZE_N, GROUP_SIZE_M
    )

    # Skip blocks that don't need to be computed
    skip_block_below_diag = (LOWER_UPPER == 0) and (n_idx + BLOCK_SIZE_N <= m_idx)
    skip_block_above_diag = (LOWER_UPPER != 0) and (m_idx + BLOCK_SIZE_M <= n_idx)
    if skip_block_below_diag or skip_block_above_diag:
        return

    # Index into one matrix of batch
    A_ptr += batch_idx * a_stride_b
    C_ptr += batch_idx * c_stride_b

    # Create pointer arrays for A and A.T
    offs_m = (m_idx + tl.arange(0, BLOCK_SIZE_M)) % M
    offs_n = (n_idx + tl.arange(0, BLOCK_SIZE_N)) % M
    offs_k = tl.arange(0, BLOCK_SIZE_K)
    a_ptrs = A_ptr + (offs_m[:, None] * a_stride_r + offs_k[None, :] * a_stride_c)
    at_ptrs = A_ptr + (offs_k[:, None] * a_stride_c + offs_n[None, :] * a_stride_r)

    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)

    # Accumulate over blocks of K
    for k in tl.range(0, tl.cdiv(K, BLOCK_SIZE_K)):
        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k * BLOCK_SIZE_K, other=0.0)
        at = tl.load(at_ptrs, mask=offs_k[:, None] < K - k * BLOCK_SIZE_K, other=0.0)
        accumulator = tl.dot(a, at, accumulator)
        a_ptrs += BLOCK_SIZE_K * a_stride_c
        at_ptrs += BLOCK_SIZE_K * a_stride_c

    out_dtype = C_ptr.dtype.element_ty
    output = accumulator.to(out_dtype)

    # Store block of C
    offs_cm = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_cn = n_idx + tl.arange(0, BLOCK_SIZE_N)
    c_ptrs = C_ptr + (offs_cm[:, None] * c_stride_r + offs_cn[None, :] * c_stride_c)
    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < M)
    tl.store(c_ptrs, output, mask=c_mask)

    # Store block of C mirrored across the diagonal
    c_ptrs_t = C_ptr + (offs_cn[:, None] * c_stride_r + offs_cm[None, :] * c_stride_c)
    c_mask_t = (offs_cn[:, None] < M) & (offs_cm[None, :] < M)
    tl.store(c_ptrs_t, output.T, mask=c_mask_t)

def ns_line_1(A: torch.Tensor, out: torch.Tensor):
    """
    Launch Triton kernel to compute C = A @ A.T
    """
    assert A.ndim == 2 or A.ndim == 3
    M, K = A.shape[-2:]
    assert out.size(-2) == M, "Output matrix has incorrect shape"
    assert out.size(-1) == M, "Output matrix has incorrect shape"

    batch_size = A.size(0) if A.ndim == 3 else 1
    input_batch_stride = A.stride(0) if A.ndim == 3 else 0
    output_batch_stride = out.stride(0) if out.ndim == 3 else 0

    grid = lambda meta: (
        batch_size * triton.cdiv(M, meta["BLOCK_SIZE_M"]) * triton.cdiv(M, meta["BLOCK_SIZE_N"]),
    )
    ns_line_1_kernel[grid](
        A_ptr=A,
        C_ptr=out,
        M=M,
        K=K,
        a_stride_b=input_batch_stride,
        a_stride_r=A.stride(-2),
        a_stride_c=A.stride(-1),
        c_stride_b=output_batch_stride,
        c_stride_r=out.stride(-2),
        c_stride_c=out.stride(-1),
    )
    return out

@triton.autotune(
    configs=_get_autotune_configs(),
    key=["M", "a_stride_r", "a_stride_c", "c_stride_r", "c_stride_c"],
)
@triton.jit
def ns_line_2_kernel(
    A_ptr, C_ptr,
    M,
    a_stride_b, a_stride_r, a_stride_c,
    c_stride_b, c_stride_r, c_stride_c,
    alpha, beta,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    BLOCK_SIZE_K: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
    LOWER_UPPER: tl.constexpr,
):
    # This is mostly duplicated from ns_line_1_kernel, but also loads and adds a block of A
    # Performance is slightly slower than ns_line_1_kernel, so we use two separate kernels
    pid = tl.program_id(axis=0)
    batch_idx, m_idx, n_idx = _pid_to_block(
        pid, M, BLOCK_SIZE_M, BLOCK_SIZE_N, GROUP_SIZE_M
    )

    # Skip blocks that don't need to be computed
    skip_block_below_diag = (LOWER_UPPER == 0) and (n_idx + BLOCK_SIZE_N <= m_idx)
    skip_block_above_diag = (LOWER_UPPER != 0) and (m_idx + BLOCK_SIZE_M <= n_idx)
    if skip_block_below_diag or skip_block_above_diag:
        return

    # Index into one matrix of batch
    A_ptr += batch_idx * a_stride_b
    C_ptr += batch_idx * c_stride_b

    # Create pointer arrays for A and A.T
    offs_m = (m_idx + tl.arange(0, BLOCK_SIZE_M)) % M
    offs_n = (n_idx + tl.arange(0, BLOCK_SIZE_N)) % M
    offs_k = tl.arange(0, BLOCK_SIZE_K)
    a_ptrs = A_ptr + (offs_m[:, None] * a_stride_r + offs_k[None, :] * a_stride_c)
    at_ptrs = A_ptr + (offs_k[:, None] * a_stride_c + offs_n[None, :] * a_stride_r)

    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)

    # Accumulate over blocks of K
    for k in tl.range(0, tl.cdiv(M, BLOCK_SIZE_K)):
        a = tl.load(a_ptrs, mask=offs_k[None, :] < M - k * BLOCK_SIZE_K, other=0.0)
        at = tl.load(at_ptrs, mask=offs_k[:, None] < M - k * BLOCK_SIZE_K, other=0.0)
        accumulator = tl.dot(a, at, accumulator)
        a_ptrs += BLOCK_SIZE_K * a_stride_c
        at_ptrs += BLOCK_SIZE_K * a_stride_c

    # Load block of A to add (corresponds to the current block of C)
    offs_am = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_an = n_idx + tl.arange(0, BLOCK_SIZE_N)
    a_add_ptrs = A_ptr + (offs_am[:, None] * a_stride_r + offs_an[None, :] * a_stride_c)
    a_add_mask = (offs_am[:, None] < M) & (offs_an[None, :] < M)
    a_add = tl.load(a_add_ptrs, mask=a_add_mask, other=0.0).to(tl.float32)

    # Apply alpha and beta
    accumulator *= alpha
    accumulator += a_add * beta

    out_dtype = C_ptr.dtype.element_ty
    output = accumulator.to(out_dtype)

    # Store block of C
    offs_cm = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_cn = n_idx + tl.arange(0, BLOCK_SIZE_N)
    c_ptrs = C_ptr + (offs_cm[:, None] * c_stride_r + offs_cn[None, :] * c_stride_c)
    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < M)
    tl.store(c_ptrs, output, mask=c_mask)

    # Store block of C mirrored across the diagonal
    c_ptrs_t = C_ptr + (offs_cn[:, None] * c_stride_r + offs_cm[None, :] * c_stride_c)
    c_mask_t = (offs_cn[:, None] < M) & (offs_cm[None, :] < M)
    tl.store(c_ptrs_t, output.T, mask=c_mask_t)

def ns_line_2(A: torch.Tensor, alpha: float, beta: float, out: torch.Tensor):
    """
    Launch Triton kernel to compute C = alpha * A @ A.T + beta * A
    """
    assert A.ndim == 2 or A.ndim == 3
    M, K = A.shape[-2:]
    assert M == K, "Input matrix must be square"
    assert out.size(-2) == M
    assert out.size(-1) == M

    batch_size = A.size(0) if A.ndim == 3 else 1
    input_batch_stride = A.stride(0) if A.ndim == 3 else 0
    output_batch_stride = out.stride(0) if out.ndim == 3 else 0

    grid = lambda meta: (
        batch_size * triton.cdiv(M, meta["BLOCK_SIZE_M"]) * triton.cdiv(M, meta["BLOCK_SIZE_N"]),
    )
    ns_line_2_kernel[grid](
        A_ptr=A,
        C_ptr=out,
        M=M,
        a_stride_b=input_batch_stride,
        a_stride_r=A.stride(-2),
        a_stride_c=A.stride(-1),
        c_stride_b=output_batch_stride,
        c_stride_r=out.stride(-2),
        c_stride_c=out.stride(-1),
        alpha=alpha,
        beta=beta,
    )
    return out

@torch.compile(dynamic=False, fullgraph=True) # Must use dynamic=False or else it's much slower
def newton_schulz_triton(G: torch.Tensor):
    a, b, c = (3.4445, -4.7750, 2.0315)
    X = G.bfloat16()
    if G.size(-2) > G.size(-1):
        X = X.mT

    # Ensure spectral norm is at most 1
    X = X / (X.norm(dim=(-2, -1), keepdim=True) + 1e-7)

    # Allocate buffers
    X = X.contiguous()
    A = torch.empty((*X.shape[:-1], X.size(-2)), device=X.device, dtype=X.dtype)
    B = torch.empty_like(A)
    C = torch.empty_like(X)

    ns_line_3 = torch.baddbmm if X.ndim > 2 else torch.addmm

    # Perform the NS iterations
    for _ in range(5):
        ns_line_1(X, out=A)  # A = X @ X.mT
        ns_line_2(A, alpha=c, beta=b, out=B)  # B = b * A + c * A @ A
        ns_line_3(X, B, X, beta=a, out=C)  # C = a * X + B @ X
        X, C = C, X  # Swap references to avoid unnecessary copies

    if G.size(-2) > G.size(-1):
        X = X.mT
    return X

# -----------------------------------------------------------------------------
# Muon optimizer

class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    https://kellerjordan.github.io/posts/muon/

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Warning: This optimizer should not be used for the embedding layer, the final fully connected layer,
    or any {0,1}-D parameters; those should all be optimized by a standard method (e.g., AdamW).
    """
    def __init__(self, params, lr=0.02, weight_decay=0.01, momentum=0.95):
        defaults = dict(lr=lr, weight_decay=weight_decay, momentum=momentum)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)

    @torch.no_grad()
    def step(self):
        # Efficient systems-wise implementation of step developed by @YouJiacheng,
        # @KonstantinWilleke, @alexrgilbert, @adricarda, @tuttyfrutyee, @vdlad,
        # @ryanyang0, and @vagrawal.
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_gather_futures: list[torch.Future] = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            grad = torch.empty_like(params[-1])
            grad_pad = [param.grad for param in params] + [torch.zeros_like(params[-1])] * world_size
            for base_i in range(0, len(params), world_size):
                if base_i + rank < len(params):
                    grad = params[base_i + rank].grad
                # This gives strange dynamo warnings
                reduce_scatter_futures.append(dist.reduce_scatter(grad, grad_pad[base_i:base_i + world_size], op=dist.ReduceOp.AVG, async_op=True).get_future())

        idx = 0
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            params_pad = params + [torch.empty_like(params[-1])] * world_size
            momentum = group["momentum"]
            for base_i in range(0, len(params), world_size):
                reduce_scatter_futures[idx].wait()
                if base_i + rank < len(params):
                    p = params[base_i + rank]
                    grad = p.grad
                    eff_lr = group["lr"] * max(1, p.size(-2) / p.size(-1)) ** 0.5 * getattr(p, "lr_mul", 1.0)
                    eff_weight_decay = group["lr"] * group["weight_decay"] * getattr(p, "wd_mul", 1.0)
                    state = self.state[p]
                    if len(state) == 0:
                        state["momentum_buffer"] = torch.zeros_like(grad)
                    momentum_buffer = state["momentum_buffer"]
                    p.mul_(1 - eff_weight_decay)
                    momentum_buffer.lerp_(grad, 1 - momentum)
                    grad = grad.lerp_(momentum_buffer, momentum)
                    v = newton_schulz_triton(grad)
                    p.add_(other=v, alpha=-eff_lr)
                idx += 1
                all_gather_futures.append(dist.all_gather(params_pad[base_i:base_i + world_size], params_pad[base_i + rank], async_op=True).get_future())
        torch.futures.collect_all(all_gather_futures).wait()

class DistAdam(torch.optim.Optimizer):
    def __init__(self, params, lr: float = 1e-3, betas: tuple[float, float] = (0.9, 0.999), eps: float = 1e-8, weight_decay: float = 0.01):
        defaults = dict(lr=lr, betas=betas, eps=eps, weight_decay=weight_decay)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)
        # DistributedAdam implementation by @vagrawal

    @torch.compile
    @torch.no_grad()
    def step(self):
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_gather_futures: list[torch.Future] = []
        grad_slices = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            grad = torch.empty_like(params[-1])
            for base_i in range(len(params)):
                grad = params[base_i].grad
                rank_size = grad.shape[0] // world_size
                grad_slice = torch.empty_like(grad[:rank_size])
                reduce_scatter_futures.append(dist.reduce_scatter_tensor(grad_slice, grad, op=dist.ReduceOp.AVG, async_op=True).get_future())
                grad_slices.append(grad_slice)

        idx = 0
        for group in self.param_groups:
            beta1, beta2 = group['betas']
            eps = group['eps']
            wd = group['weight_decay']
            params = group['params']
            for base in range(len(params)):
                reduce_scatter_futures[idx].wait()
                p = params[base]
                rank_size = p.shape[0] // world_size
                p_slice = p[rank * rank_size:(rank + 1) * rank_size]
                lr = group['lr'] * getattr(p, "lr_mul", 1.0)
                state = self.state[p]
                g_slice = grad_slices[idx]
                # State init
                if not state:
                    state['step'] = torch.tensor(0, dtype=torch.int64, device=p.device)
                    state['exp_avg'] = torch.zeros_like(p_slice)
                    state['exp_avg_sq'] = torch.zeros_like(p_slice)
                exp_avg = state['exp_avg']
                exp_avg_sq = state['exp_avg_sq']
                state['step'] += 1
                t = state['step']
                # weight decay
                if wd != 0:
                    eff_weight_decay = lr * wd * getattr(p, "wd_mul", 1.0)
                    p_slice.mul_(1 - eff_weight_decay)
                # update running averages
                exp_avg.mul_(beta1).add_(g_slice, alpha=1 - beta1)
                exp_avg_sq.mul_(beta2).addcmul_(g_slice, g_slice, value=1 - beta2)
                # bias corrections
                bias1 = 1 - beta1 ** t
                bias2 = 1 - beta2 ** t
                # compute step
                denom = exp_avg_sq.sqrt().add_(eps)
                step_size = lr * (torch.sqrt(bias2) / bias1)
                update = exp_avg.div(denom).mul_(step_size)
                p_slice.add_(other=update, alpha=-1.0)
                idx += 1
                all_gather_futures.append(dist.all_gather_into_tensor(p, p_slice, async_op=True).get_future())
        torch.futures.collect_all(all_gather_futures).wait()

# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the model

def norm(x: Tensor):
    return F.rms_norm(x, (x.size(-1),))

class CastedLinear(nn.Linear):
    def __init__(self, in_features: int, out_features: int, use_fp8=False, x_s=1.0, w_s=1.0, grad_s=1.0, bias=False):
        super().__init__(in_features, out_features, bias=bias)
        self.use_fp8 = use_fp8
        self.x_s = x_s
        self.w_s = w_s
        self.grad_s = grad_s

    def reset_parameters(self) -> None:
        std = 0.5 * (self.in_features ** -0.5) # 0.5 is a bit better than the default 1/sqrt(3)
        bound = (3 ** 0.5) * std
        with torch.no_grad():
            self.weight.uniform_(-bound, bound)

    def forward(self, x: Tensor):
        if self.use_fp8 and self.training:
            _x = x.flatten(0, -2)
            out: Tensor = torch.ops.nanogpt.mm(_x, self.weight, x_s=self.x_s, w_s=self.w_s, grad_s=self.grad_s)[0]
            return out.reshape(*x.shape[:-1], -1)
        else:
            return F.linear(x, self.weight.type_as(x))

class Rotary(nn.Module):
    def __init__(self, dim: int, max_seq_len: int):
        super().__init__()
        # half-truncate RoPE by @YouJiacheng (w/ base freq tuning)
        angular_freq = (1 / 1024) ** torch.linspace(0, 1, steps=dim//4, dtype=torch.float32)
        angular_freq = torch.cat([angular_freq, angular_freq.new_zeros(dim//4)])
        t = torch.arange(max_seq_len, dtype=torch.float32)
        theta = torch.einsum("i,j -> ij", t, angular_freq)
        self.cos = nn.Buffer(theta.cos(), persistent=False)
        self.sin = nn.Buffer(theta.sin(), persistent=False)

    def forward(self, x_BTHD: Tensor):
        assert self.cos.size(0) >= x_BTHD.size(-3)
        cos, sin = self.cos[None, :x_BTHD.size(-3), None, :], self.sin[None, :x_BTHD.size(-3), None, :]
        x1, x2 = x_BTHD.to(dtype=torch.float32).chunk(2, dim=-1)
        y1 = x1 * cos + x2 * sin
        y2 = x1 * (-sin) + x2 * cos
        return torch.cat((y1, y2), 3).type_as(x_BTHD)

class CausalSelfAttention(nn.Module):
    def __init__(self, dim: int, num_heads: int, max_seq_len: int, head_dim=128):
        super().__init__()
        self.num_heads = num_heads
        self.head_dim = head_dim
        hdim = num_heads * head_dim
        assert hdim == dim, "num_heads * head_dim must equal model_dim"
        std = 0.5 * (dim ** -0.5)
        bound = (3 ** 0.5) * std # improved init scale by @YouJiacheng
        # merged QKV weights: suggested by many, implemented by @fernbear.bsky.social, and further improved by @YouJiacheng
        # https://x.com/hi_tysam/status/1879699187107033311
        self.qkvo_w = nn.Parameter(torch.empty(4, hdim, dim))
        with torch.no_grad():
            self.qkvo_w[:3].uniform_(-bound, bound) # init QKV weights
            self.qkvo_w[3].zero_() # init output weights to zero
        self.rotary = Rotary(head_dim, max_seq_len)
        # scale the attention logits by given constant, instead of the default head_dim**-0.5, by @leloykun
        # inspired by learnable scalars used by @brendanh0gan https://x.com/hi_tysam/status/1879693583898591283
        self.attn_scale = 0.12
        self.dampen = CastedLinear(dim//args.dampen_factor, num_heads)
        self.dampen.weight.detach().zero_()

    def forward(self, x: Tensor, ve: Tensor | None, lambdas: Tensor, block_mask: BlockMask):
        B, T, d_model = x.size(0), x.size(1), x.size(-1) # batch size, sequence length
        assert B == 1, "Must use batch size = 1 for FlexAttention"
        dampen_factor = torch.sigmoid(self.dampen(x[..., :d_model//args.dampen_factor])).view(B, T, self.num_heads, 1)
        q, k, v = F.linear(x, self.qkvo_w[:3].flatten(end_dim=1).type_as(x)).view(B, T, 3 * self.num_heads, self.head_dim).chunk(3, dim=-2)
        q, k = norm(q), norm(k) # QK norm @Grad62304977
        q, k = self.rotary(q), self.rotary(k)
        if ve is not None:
            v = lambdas[0] * v + lambdas[1] * ve.view_as(v) # @KoszarskyB & @Grad62304977
        else: # skip mid-layers token value embeddings by @YouJiacheng
            v = lambdas[0] * v
        y = flex_attention(q.transpose(1, 2), k.transpose(1, 2), v.transpose(1, 2), block_mask=block_mask, scale=0.12).transpose(1, 2)
        y = y.view(B, T, self.num_heads, self.head_dim)
        y = y * dampen_factor
        y = y.contiguous().view(B, T, self.num_heads * self.head_dim) # re-assemble all head outputs side by side
        y = F.linear(y, self.qkvo_w[3].type_as(y))
        return y

class MLP(nn.Module):
    def __init__(self, dim: int):
        super().__init__()
        hdim = 4 * dim
        # make both matrices have the same shape because optimizer sorts params by shape
        # 2 matrices x 12 layers = 24 total, which is divisible by 8 GPU world size
        self.c_fc = nn.Parameter(torch.empty(dim, hdim))
        self.c_proj = nn.Parameter(torch.empty(dim, hdim))
        std = 0.5 * (dim ** -0.5)
        bound = (3 ** 0.5) * std # improved init scale by @YouJiacheng
        with torch.no_grad():
            self.c_fc.uniform_(-bound, bound)
            self.c_proj.zero_() # zero init suggested by @Grad62304977

    def forward(self, x: Tensor):
        x = F.linear(x, self.c_fc.T.type_as(x))
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = F.linear(x, self.c_proj.type_as(x))
        return x

class Block(nn.Module):
    def __init__(self, dim: int, num_heads: int, max_seq_len: int, layer_idx: int):
        super().__init__()
        # skip attention of blocks.7 (the 8th layer) by @YouJiacheng
        self.attn = CausalSelfAttention(dim, num_heads, max_seq_len) if layer_idx != 7 else None
        self.mlp = MLP(dim)

    def forward(self, x: Tensor, ve: Tensor | None, x0: Tensor, lambdas: Tensor, sa_lambdas: Tensor, block_mask: BlockMask):
        x = lambdas[0] * x + lambdas[1] * x0
        if self.attn is not None:
            x = x + self.attn(norm(x), ve, sa_lambdas, block_mask)
        x = x + self.mlp(norm(x))
        return x

# -----------------------------------------------------------------------------
# The main model

def next_multiple_of_n(v: float | int, *, n: int):
    return next(x for x in range(n, int(v) + 1 + n, n) if x >= v)

class GPT(nn.Module):
    def __init__(self, vocab_size: int, num_layers: int, num_heads: int, model_dim: int, max_seq_len: int):
        super().__init__()
        vocab_size = next_multiple_of_n(vocab_size, n=128)
        self.embed = nn.Embedding(vocab_size, model_dim)
        # token value embeddings by @KoszarskyB - inspired by @Grad62304977's value residual implementation following https://arxiv.org/abs/2410.17897
        # value embedding code simplification inspired by @ragulpr https://github.com/KellerJordan/modded-nanogpt/pull/78
        self.value_embeds = nn.ModuleList([nn.Embedding(vocab_size, model_dim) for _ in range(3)])
        self.blocks = nn.ModuleList([Block(model_dim, num_heads, max_seq_len, i) for i in range(num_layers)])
        # there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency.
        # suggested to me by @Grad62304977. this originates from Karpathy's experiments.
        use_fp8 = not os.environ.get("DISABLE_FP8", False)
        self.lm_head = CastedLinear(model_dim, vocab_size, use_fp8=use_fp8, x_s=(model_dim**0.5)/448, w_s=2**-9, grad_s=1/448)
        self.lm_head.weight.detach().zero_() # @Grad62304977
        # Add learnable skip connection weights for decoder layers
        assert num_layers % 2 == 0
        pad = (-num_layers * 5) % dist.get_world_size()
        self.scalars = nn.Parameter(torch.cat([
            torch.ones(num_layers), # skip_weights
            *[torch.tensor([1.0, 0.0]) for _ in range(num_layers)], # block lambdas
            *[torch.tensor([0.5, 0.5]) for _ in range(num_layers)], # SA lambdas
            torch.ones(pad),
        ]))
        # set learning rates
        for param in self.embed.parameters():
            param.lr_mul = 75.
        for param in self.value_embeds.parameters():
            param.lr_mul = 75.
        self.lm_head.weight.lr_mul = 1.0
        self.scalars.lr_mul = 5.0

    def create_blockmasks(self, input_seq: Tensor, sliding_window_num_blocks: Tensor):
        BLOCK_SIZE = 128
        docs = (input_seq == 50256).cumsum(0)
        # increments = (input_seq == 50256) | torch.cat([torch.tensor([False], device="cuda"), input_seq[:-1] == 50256])
        # docs = increments.cumsum(0)

        def document_causal(b, h, q_idx, kv_idx):
            causal_mask = q_idx >= kv_idx
            document_mask = docs[q_idx] == docs[kv_idx]
            return causal_mask & document_mask

        def dense_to_ordered(dense_blockmask: Tensor):
            num_blocks = dense_blockmask.sum(dim=-1, dtype=torch.int32)
            indices = dense_blockmask.argsort(dim=-1, descending=False, stable=True).flip(-1).to(torch.int32)
            return num_blocks[None, None].contiguous(), indices[None, None].contiguous()

        # manual block mask creation by @YouJiacheng
        assert len(input_seq) % BLOCK_SIZE == 0
        NUM_BLOCKS = len(input_seq) // BLOCK_SIZE
        block_idx = torch.arange(NUM_BLOCKS, dtype=torch.int32, device="cuda")
        causal_blockmask_any = block_idx[:, None] >= block_idx
        causal_blockmask_all = block_idx[:, None] > block_idx
        docs_low = docs.view(-1, BLOCK_SIZE)[:, 0].contiguous()
        docs_high = docs.view(-1, BLOCK_SIZE)[:, -1].contiguous()
        document_blockmask_any = (docs_low[:, None] <= docs_high) & (docs_high[:, None] >= docs_low)
        document_blockmask_all = (docs_low[:, None] == docs_high) & (docs_high[:, None] == docs_low)
        blockmask_any = causal_blockmask_any & document_blockmask_any
        blockmask_all = causal_blockmask_all & document_blockmask_all
        partial_kv_num_blocks, partial_kv_indices = dense_to_ordered(blockmask_any & ~blockmask_all)
        full_kv_num_blocks, full_kv_indices = dense_to_ordered(blockmask_all)
        def build_bm(window_size_blocks: Tensor) -> BlockMask:
            return BlockMask.from_kv_blocks(
                torch.clamp_max(partial_kv_num_blocks, torch.clamp_min(window_size_blocks - full_kv_num_blocks, 1)),
                partial_kv_indices,
                torch.clamp_max(full_kv_num_blocks, window_size_blocks - 1),
                full_kv_indices,
                BLOCK_SIZE=BLOCK_SIZE,
                mask_mod=document_causal,
            )
        # Long-short SWA block masks by @leloykun & @YouJiacheng, adapated from suggestion by @Grad62304977, following Gemma 2 paper
        return build_bm(sliding_window_num_blocks), build_bm(sliding_window_num_blocks // 2)

    def forward(self, input_seq: Tensor, target_seq: Tensor, sliding_window_num_blocks: Tensor):
        assert input_seq.ndim == 1

        ve = [value_embed(input_seq) for value_embed in self.value_embeds]
        # 012 ... 012 structure on token value embeddings by @YouJiacheng, improved on @leloykun's U-net structure
        ve = [ve[0], ve[1], ve[2]] + [None] * (len(self.blocks) - 6) + [ve[0], ve[1], ve[2]]
        assert len(ve) == len(self.blocks)

        long_bm, short_bm = self.create_blockmasks(input_seq, sliding_window_num_blocks)
        block_masks = [long_bm, short_bm, short_bm, short_bm, long_bm, short_bm, short_bm, long_bm, short_bm, short_bm, short_bm, long_bm]
        assert len(block_masks) == len(self.blocks)

        x = x0 = norm(self.embed(input_seq)[None]) # use of norm here by @Grad62304977

        # U-net design by @brendanh0gan
        skip_connections = []
        skip_weights = self.scalars[:(len(self.blocks) // 2)]
        lambdas = self.scalars[1 * len(self.blocks): 3 * len(self.blocks)].view(-1, 2)
        sa_lambdas = self.scalars[3 * len(self.blocks): 5 * len(self.blocks)].view(-1, 2)

        n = len(self.blocks) // 2

        for i in range(len(self.blocks)):
            if i >= n:
                x = x + skip_weights[i - n] * skip_connections.pop()
            x = self.blocks[i](x, ve[i], x0, lambdas[i], sa_lambdas[i], block_masks[i])
            if i < n:
                skip_connections.append(x)

        x = norm(x)
        logits = self.lm_head(x).float()
        # @Grad62304977 added tanh softcapping following Gemma 2 paper, @KoszarskyB reduced it from 30 to 15, @YouJiacheng shifted it by +15 (2*sigmoid(2*x)=tanh(x)+1)
        logits = 30 * torch.sigmoid(logits / 7.5)
        loss = F.cross_entropy(logits.view(-1, logits.size(-1)), target_seq, reduction="sum" if self.training else "mean")
        return loss

# -----------------------------------------------------------------------------
# Distributed data loader

def _load_data_shard(file: Path):
    header = torch.from_file(str(file), False, 256, dtype=torch.int32) # header is 256 int32
    assert header[0] == 20240520, "magic number mismatch in the data .bin file"
    assert header[1] == 1, "unsupported version"
    num_tokens = int(header[2]) # number of tokens (claimed)
    with file.open("rb", buffering=0) as f:
        tokens = torch.empty(num_tokens, dtype=torch.uint16, pin_memory=True) # avoid pin_memory copy by @YouJiacheng
        f.seek(256 * 4)
        nbytes = f.readinto(tokens.numpy()) # avoid bytes->array copy by @YouJiacheng
        assert nbytes == 2 * num_tokens, "number of tokens read does not match header"
    return tokens

# find world_size starting indicies, such that each begins with token 50256 and local_batches don't overlap
def find_batch_starts(tokens: Tensor, pos: int, seq_len: int, token_window: int):
    boundary_mask = tokens[pos : pos + token_window] == 50256
    boundary_positions = torch.nonzero(boundary_mask, as_tuple=False).squeeze(-1) + pos
    start = boundary_positions[0].item()
    starts = []
    for i in range(1, len(boundary_positions)):
        end = boundary_positions[i].item() 
        if end - start >= seq_len:
            starts.append(start) # append start once end pos is confirmed
            if len(starts) == dist.get_world_size():
                return starts, end - pos
            start = end
    assert False # increase token_window if necessary

def distributed_data_generator(filename_pattern: str, seq_len: int, grad_accum_steps: int, align_to_bos: bool):
    rank = dist.get_rank()
    world_size = dist.get_world_size()
    batch_size = seq_len * world_size
    files = [Path(file) for file in sorted(glob.glob(filename_pattern))]
    file_iter = iter(files) # use itertools.cycle(files) instead if you want to do multi-epoch training
    tokens, pos = _load_data_shard(next(file_iter)), 0
    while True:
        token_window = grad_accum_steps * (2 * batch_size if align_to_bos else batch_size) # provide buffer to handle samples up to length seq_len
        if pos + token_window + 1 >= len(tokens):
            tokens = _load_data_shard(next(file_iter))
            pos = 0
        for _ in range(grad_accum_steps):
            if align_to_bos:
                batch_starts, tokens_consumed = find_batch_starts(tokens, pos, seq_len, token_window)
                start_idx = batch_starts[rank]
            else:
                tokens_consumed = batch_size
                start_idx = pos + rank * seq_len
            buf = tokens[start_idx:][:seq_len + 1]
            inputs = buf[:-1].to(device="cuda", dtype=torch.int32, non_blocking=True) # no sync on host side;
            targets = buf[1:].to(device="cuda", dtype=torch.int64, non_blocking=True) # H2D in another stream isn't helpful.
            pos += tokens_consumed
            token_window -= tokens_consumed
            yield inputs, targets

# -----------------------------------------------------------------------------
# int main



data_path = os.environ.get("DATA_PATH", ".")
args.train_files = os.path.join(data_path, args.train_files)
args.val_files = os.path.join(data_path, args.val_files)

# torchrun sets these env variables
rank = int(os.environ["RANK"])
world_size = int(os.environ["WORLD_SIZE"])
assert 8 % world_size == 0, "world_size must be a divisor of 8"
grad_accum_steps = 8 // world_size
assert torch.cuda.is_available()
device = torch.device("cuda", int(os.environ["LOCAL_RANK"]))
torch.cuda.set_device(device)
dist.init_process_group(backend="nccl", device_id=device)
dist.barrier()
master_process = (rank == 0) # this process will do logging, checkpointing etc.

# begin logging
logfile = None
if master_process:
    run_id = args.run_id
    os.makedirs("logs", exist_ok=True)
    logfile = f"logs/{run_id}.txt"
    print(logfile)
def print0(s, console=False):
    if master_process:
        with open(logfile, "a") as f:
            if console:
                print(s)
            print(s, file=f)

# begin by printing this file (the Python code)
print0(code)
print0("="*100)
# log information about the hardware/software environment this is running on
print0(f"Running Python {sys.version}")
print0(f"Running PyTorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}")
print0(f"Running Triton version {triton.__version__}")
def nvidia_smi():
    import subprocess  # avoid top level import
    return subprocess.run(["nvidia-smi"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).stdout
print0(nvidia_smi())
print0("="*100)

model: nn.Module = GPT(vocab_size=50257, num_layers=12, num_heads=6, model_dim=768, max_seq_len=max(args.train_seq_len, args.val_seq_len)).cuda()
for m in model.modules():
    if isinstance(m, nn.Embedding):
        m.bfloat16()
for param in model.parameters():
    dist.broadcast(param.detach(), 0)

# collect the parameters to optimize
hidden_matrix_params = [p for n, p in model.blocks.named_parameters() if p.ndim >= 2 and "embed" not in n]
embed_params = [p for n, p in model.named_parameters() if "embed" in n]
scalar_params = [p for p in model.parameters() if p.ndim < 2]
head_params = [model.lm_head.weight]

# init the optimizer(s)
# small adam epsilon by @YouJiacheng. this is an alternate method of fixing the world_size dependence
# discovered by @fernbear.bsky.social https://x.com/hi_tysam/status/1879692937589875094
optimizer1 = DistAdam(scalar_params + head_params + embed_params, lr=0.008, betas=(0.8, 0.95), eps=1e-10, weight_decay=0.0)
optimizer2 = Muon(hidden_matrix_params, lr=0.05, momentum=0.95, weight_decay=0.0)
optimizers = [optimizer1, optimizer2]
for opt in optimizers:
    for group in opt.param_groups:
        group["initial_lr"] = group["lr"]

# learning rate schedule: stable then decay
def get_lr(step: int):
    x = step / args.num_iterations # progress in training
    assert 0 <= x < 1
    if x < 1 - args.cooldown_frac:
        return 1.0
    else:
        w = (1 - x) / args.cooldown_frac
        return w * 1.0 + (1 - w) * 0.1

# attention window size schedule: linearly increase
@lru_cache(1)
def get_window_size_blocks_helper(window_size: int):
    return torch.tensor(window_size // 128, dtype=torch.int32, pin_memory=True).cuda(non_blocking=True)
def get_window_size_blocks(step: int):
    x = step / args.num_iterations # progress in training
    assert 0 <= x <= 1
    # Linearly increase the block-wise sliding window size over training 128 -> 1792
    # increase by @fernbear.bsky.social; block-wise by @YouJiacheng
    window_size = next_multiple_of_n(1728 * x, n=128)
    return get_window_size_blocks_helper(window_size)

model: nn.Module = torch.compile(model, dynamic=False, fullgraph=True)

########################################
#            Warmup kernels            #
########################################

# Warmup the training kernels, then re-initialize the state so we aren't cheating
warmup_steps = 10
initial_state = dict(model=copy.deepcopy(model.state_dict()),
                     optimizers=[copy.deepcopy(opt.state_dict()) for opt in optimizers]) # save the initial state
train_loader = distributed_data_generator(args.train_files, args.train_seq_len, grad_accum_steps, align_to_bos=True)
for _ in range(warmup_steps):
    inputs, targets = next(train_loader)
    model(inputs, targets, get_window_size_blocks(1)).backward()
    for opt in optimizers:
        opt.step()
    model.zero_grad(set_to_none=True)
model.load_state_dict(initial_state["model"])
for opt, opt_state in zip(optimizers, initial_state["optimizers"]):
    opt.load_state_dict(opt_state)
del train_loader, initial_state

########################################
#        Training and validation       #
########################################

train_loader = distributed_data_generator(args.train_files, args.train_seq_len, grad_accum_steps, align_to_bos=True)
training_time_ms = 0
# start the clock
torch.cuda.synchronize()
t0 = time.perf_counter()
# begin training
train_steps = args.num_iterations
for step in range(train_steps + 1):
    last_step = (step == train_steps)

    # --------------- VALIDATION SECTION -----------------
    if last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0):
        # stop the clock
        torch.cuda.synchronize()
        training_time_ms += 1000 * (time.perf_counter() - t0)
        model.eval()
        val_batch_size = world_size * args.val_seq_len
        assert args.val_tokens % val_batch_size == 0
        val_steps = args.val_tokens // val_batch_size
        val_loader = distributed_data_generator(args.val_files, args.val_seq_len, grad_accum_steps, align_to_bos=False)
        val_loss = 0
        with torch.no_grad():
            for _ in range(val_steps):
                inputs, targets = next(val_loader)
                val_loss += model(inputs, targets, get_window_size_blocks(step))
        val_loss /= val_steps
        del val_loader
        dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
        print0(f"step:{step}/{train_steps} val_loss:{val_loss:.4f} train_time:{training_time_ms:.0f}ms step_avg:{training_time_ms/max(step, 1):.2f}ms", console=True)
        model.train()
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.perf_counter()

    if last_step:
        if master_process and args.save_checkpoint:
            log = dict(step=step, code=code, model=model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
            os.makedirs(f"logs/{run_id}", exist_ok=True)
            torch.save(log, f"logs/{run_id}/state_step{step:06d}.pt")
        # the last step only has the validation loop, so break to avoid training
        break

    # --------------- TRAINING SECTION -----------------
    for _ in range(grad_accum_steps):
        inputs, targets = next(train_loader)
        model(inputs, targets, get_window_size_blocks(step)).backward()
    # set optimization hyperparameters
    for opt in optimizers:
        for group in opt.param_groups:
            group["lr"] = group["initial_lr"] * get_lr(step)
    for group in optimizer2.param_groups:
        frac = min(step / 300, 1) # momentum warmup for muon
        group["momentum"] = (1 - frac) * 0.85 + frac * 0.95
    # step the optimizers
    for opt in optimizers:
        opt.step()
    # null the gradients
    model.zero_grad(set_to_none=True)
    # logging
    approx_training_time_ms = training_time_ms + 1000 * (time.perf_counter() - t0)
    print0(f"step:{step+1}/{train_steps} train_time:{approx_training_time_ms:.0f}ms step_avg:{approx_training_time_ms/(step + 1):.2f}ms", console=True)

print0(f"peak memory allocated: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB "
       f"reserved: {torch.cuda.max_memory_reserved() // 1024 // 1024} MiB", console=True)
dist.destroy_process_group()
====================================================================================================
Running Python 3.10.12 (main, May 27 2025, 17:12:29) [GCC 11.4.0]
Running PyTorch 2.9.0.dev20250713+cu126 compiled for CUDA 12.6
Running Triton version 3.4.0
Sat Aug 23 13:48:02 2025       
+-----------------------------------------------------------------------------------------+
| NVIDIA-SMI 570.148.08             Driver Version: 570.148.08     CUDA Version: 12.8     |
|-----------------------------------------+------------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |
|                                         |                        |               MIG M. |
|=========================================+========================+======================|
|   0  NVIDIA H100 80GB HBM3          On  |   00000000:61:00.0 Off |                    0 |
| N/A   32C    P0            117W /  700W |    5858MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  |   00000000:62:00.0 Off |                    0 |
| N/A   37C    P0            121W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  |   00000000:63:00.0 Off |                    0 |
| N/A   38C    P0            122W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  |   00000000:64:00.0 Off |                    0 |
| N/A   31C    P0            113W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  |   00000000:6A:00.0 Off |                    0 |
| N/A   32C    P0            120W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  |   00000000:6B:00.0 Off |                    0 |
| N/A   38C    P0            121W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  |   00000000:6C:00.0 Off |                    0 |
| N/A   36C    P0            120W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  |   00000000:6D:00.0 Off |                    0 |
| N/A   34C    P0            119W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
                                                                                         
+-----------------------------------------------------------------------------------------+
| Processes:                                                                              |
|  GPU   GI   CI              PID   Type   Process name                        GPU Memory |
|        ID   ID                                                               Usage      |
|=========================================================================================|
|    0   N/A  N/A          319303      C   /usr/bin/python3                       1510MiB |
|    0   N/A  N/A          319304      C   /usr/bin/python3                        614MiB |
|    0   N/A  N/A          319305      C   /usr/bin/python3                        614MiB |
|    0   N/A  N/A          319306      C   /usr/bin/python3                        614MiB |
|    0   N/A  N/A          319307      C   /usr/bin/python3                        614MiB |
|    0   N/A  N/A          319308      C   /usr/bin/python3                        614MiB |
|    0   N/A  N/A          319309      C   /usr/bin/python3                        614MiB |
|    0   N/A  N/A          319310      C   /usr/bin/python3                        614MiB |
|    1   N/A  N/A          319304      C   /usr/bin/python3                       1510MiB |
|    2   N/A  N/A          319305      C   /usr/bin/python3                       1510MiB |
|    3   N/A  N/A          319306      C   /usr/bin/python3                       1510MiB |
|    4   N/A  N/A          319307      C   /usr/bin/python3                       1510MiB |
|    5   N/A  N/A          319308      C   /usr/bin/python3                       1510MiB |
|    6   N/A  N/A          319309      C   /usr/bin/python3                       1510MiB |
|    7   N/A  N/A          319310      C   /usr/bin/python3                       1510MiB |
+-----------------------------------------------------------------------------------------+

====================================================================================================
step:0/1695 val_loss:10.8258 train_time:0ms step_avg:0.06ms
step:1/1695 train_time:155ms step_avg:155.16ms
step:2/1695 train_time:182ms step_avg:90.82ms
step:3/1695 train_time:250ms step_avg:83.49ms
step:4/1695 train_time:342ms step_avg:85.55ms
step:5/1695 train_time:435ms step_avg:86.91ms
step:6/1695 train_time:527ms step_avg:87.78ms
step:7/1695 train_time:619ms step_avg:88.50ms
step:8/1695 train_time:712ms step_avg:89.01ms
step:9/1695 train_time:805ms step_avg:89.42ms
step:10/1695 train_time:898ms step_avg:89.80ms
step:11/1695 train_time:990ms step_avg:90.03ms
step:12/1695 train_time:1086ms step_avg:90.46ms
step:13/1695 train_time:1182ms step_avg:90.92ms
step:14/1695 train_time:1277ms step_avg:91.23ms
step:15/1695 train_time:1371ms step_avg:91.38ms
step:16/1695 train_time:1465ms step_avg:91.54ms
step:17/1695 train_time:1558ms step_avg:91.66ms
step:18/1695 train_time:1651ms step_avg:91.75ms
step:19/1695 train_time:1744ms step_avg:91.79ms
step:20/1695 train_time:1838ms step_avg:91.88ms
step:21/1695 train_time:1931ms step_avg:91.93ms
step:22/1695 train_time:2025ms step_avg:92.02ms
step:23/1695 train_time:2119ms step_avg:92.11ms
step:24/1695 train_time:2213ms step_avg:92.19ms
step:25/1695 train_time:2306ms step_avg:92.25ms
step:26/1695 train_time:2401ms step_avg:92.34ms
step:27/1695 train_time:2494ms step_avg:92.38ms
step:28/1695 train_time:2588ms step_avg:92.43ms
step:29/1695 train_time:2682ms step_avg:92.48ms
step:30/1695 train_time:2776ms step_avg:92.52ms
step:31/1695 train_time:2869ms step_avg:92.54ms
step:32/1695 train_time:2962ms step_avg:92.57ms
step:33/1695 train_time:3056ms step_avg:92.61ms
step:34/1695 train_time:3149ms step_avg:92.62ms
step:35/1695 train_time:3243ms step_avg:92.66ms
step:36/1695 train_time:3338ms step_avg:92.73ms
step:37/1695 train_time:3431ms step_avg:92.73ms
step:38/1695 train_time:3525ms step_avg:92.76ms
step:39/1695 train_time:3619ms step_avg:92.79ms
step:40/1695 train_time:3713ms step_avg:92.82ms
step:41/1695 train_time:3806ms step_avg:92.83ms
step:42/1695 train_time:3900ms step_avg:92.85ms
step:43/1695 train_time:3993ms step_avg:92.86ms
step:44/1695 train_time:4086ms step_avg:92.87ms
step:45/1695 train_time:4181ms step_avg:92.90ms
step:46/1695 train_time:4274ms step_avg:92.92ms
step:47/1695 train_time:4368ms step_avg:92.93ms
step:48/1695 train_time:4461ms step_avg:92.95ms
step:49/1695 train_time:4555ms step_avg:92.96ms
step:50/1695 train_time:4648ms step_avg:92.96ms
step:51/1695 train_time:4743ms step_avg:92.99ms
step:52/1695 train_time:4835ms step_avg:92.98ms
step:53/1695 train_time:4929ms step_avg:93.00ms
step:54/1695 train_time:5023ms step_avg:93.01ms
step:55/1695 train_time:5116ms step_avg:93.02ms
step:56/1695 train_time:5210ms step_avg:93.03ms
step:57/1695 train_time:5304ms step_avg:93.06ms
step:58/1695 train_time:5399ms step_avg:93.08ms
step:59/1695 train_time:5494ms step_avg:93.12ms
step:60/1695 train_time:5588ms step_avg:93.13ms
step:61/1695 train_time:5681ms step_avg:93.13ms
step:62/1695 train_time:5775ms step_avg:93.14ms
step:63/1695 train_time:5868ms step_avg:93.14ms
step:64/1695 train_time:5961ms step_avg:93.15ms
step:65/1695 train_time:6054ms step_avg:93.14ms
step:66/1695 train_time:6147ms step_avg:93.14ms
step:67/1695 train_time:6240ms step_avg:93.13ms
step:68/1695 train_time:6333ms step_avg:93.14ms
step:69/1695 train_time:6427ms step_avg:93.14ms
step:70/1695 train_time:6522ms step_avg:93.17ms
step:71/1695 train_time:6616ms step_avg:93.18ms
step:72/1695 train_time:6710ms step_avg:93.19ms
step:73/1695 train_time:6804ms step_avg:93.21ms
step:74/1695 train_time:6899ms step_avg:93.23ms
step:75/1695 train_time:6993ms step_avg:93.24ms
step:76/1695 train_time:7086ms step_avg:93.24ms
step:77/1695 train_time:7181ms step_avg:93.25ms
step:78/1695 train_time:7275ms step_avg:93.27ms
step:79/1695 train_time:7369ms step_avg:93.28ms
step:80/1695 train_time:7462ms step_avg:93.28ms
step:81/1695 train_time:7556ms step_avg:93.29ms
step:82/1695 train_time:7650ms step_avg:93.29ms
step:83/1695 train_time:7743ms step_avg:93.29ms
step:84/1695 train_time:7837ms step_avg:93.30ms
step:85/1695 train_time:7931ms step_avg:93.30ms
step:86/1695 train_time:8025ms step_avg:93.31ms
step:87/1695 train_time:8121ms step_avg:93.34ms
step:88/1695 train_time:8213ms step_avg:93.33ms
step:89/1695 train_time:8306ms step_avg:93.32ms
step:90/1695 train_time:8400ms step_avg:93.33ms
step:91/1695 train_time:8494ms step_avg:93.34ms
step:92/1695 train_time:8588ms step_avg:93.35ms
step:93/1695 train_time:8682ms step_avg:93.35ms
step:94/1695 train_time:8775ms step_avg:93.35ms
step:95/1695 train_time:8868ms step_avg:93.35ms
step:96/1695 train_time:8962ms step_avg:93.35ms
step:97/1695 train_time:9055ms step_avg:93.36ms
step:98/1695 train_time:9149ms step_avg:93.35ms
step:99/1695 train_time:9242ms step_avg:93.35ms
step:100/1695 train_time:9336ms step_avg:93.36ms
step:101/1695 train_time:9429ms step_avg:93.36ms
step:102/1695 train_time:9524ms step_avg:93.37ms
step:103/1695 train_time:9619ms step_avg:93.38ms
step:104/1695 train_time:9712ms step_avg:93.38ms
step:105/1695 train_time:9806ms step_avg:93.39ms
step:106/1695 train_time:9900ms step_avg:93.40ms
step:107/1695 train_time:9994ms step_avg:93.40ms
step:108/1695 train_time:10087ms step_avg:93.40ms
step:109/1695 train_time:10180ms step_avg:93.40ms
step:110/1695 train_time:10274ms step_avg:93.40ms
step:111/1695 train_time:10368ms step_avg:93.41ms
step:112/1695 train_time:10462ms step_avg:93.41ms
step:113/1695 train_time:10556ms step_avg:93.42ms
step:114/1695 train_time:10649ms step_avg:93.41ms
step:115/1695 train_time:10742ms step_avg:93.41ms
step:116/1695 train_time:10835ms step_avg:93.41ms
step:117/1695 train_time:10929ms step_avg:93.41ms
step:118/1695 train_time:11023ms step_avg:93.41ms
step:119/1695 train_time:11116ms step_avg:93.41ms
step:120/1695 train_time:11210ms step_avg:93.41ms
step:121/1695 train_time:11305ms step_avg:93.43ms
step:122/1695 train_time:11397ms step_avg:93.42ms
step:123/1695 train_time:11490ms step_avg:93.42ms
step:124/1695 train_time:11584ms step_avg:93.42ms
step:125/1695 train_time:11678ms step_avg:93.43ms
step:125/1695 val_loss:4.5872 train_time:11770ms step_avg:94.16ms
step:126/1695 train_time:11798ms step_avg:93.64ms
step:127/1695 train_time:11875ms step_avg:93.50ms
step:128/1695 train_time:11974ms step_avg:93.55ms
step:129/1695 train_time:12070ms step_avg:93.56ms
step:130/1695 train_time:12165ms step_avg:93.58ms
step:131/1695 train_time:12257ms step_avg:93.57ms
step:132/1695 train_time:12351ms step_avg:93.57ms
step:133/1695 train_time:12444ms step_avg:93.56ms
step:134/1695 train_time:12537ms step_avg:93.56ms
step:135/1695 train_time:12630ms step_avg:93.56ms
step:136/1695 train_time:12724ms step_avg:93.56ms
step:137/1695 train_time:12818ms step_avg:93.56ms
step:138/1695 train_time:12913ms step_avg:93.57ms
step:139/1695 train_time:13008ms step_avg:93.58ms
step:140/1695 train_time:13104ms step_avg:93.60ms
step:141/1695 train_time:13199ms step_avg:93.61ms
step:142/1695 train_time:13292ms step_avg:93.61ms
step:143/1695 train_time:13386ms step_avg:93.61ms
step:144/1695 train_time:13481ms step_avg:93.62ms
step:145/1695 train_time:13574ms step_avg:93.61ms
step:146/1695 train_time:13668ms step_avg:93.62ms
step:147/1695 train_time:13762ms step_avg:93.62ms
step:148/1695 train_time:13857ms step_avg:93.63ms
step:149/1695 train_time:13951ms step_avg:93.63ms
step:150/1695 train_time:14047ms step_avg:93.64ms
step:151/1695 train_time:14142ms step_avg:93.65ms
step:152/1695 train_time:14236ms step_avg:93.66ms
step:153/1695 train_time:14330ms step_avg:93.66ms
step:154/1695 train_time:14424ms step_avg:93.66ms
step:155/1695 train_time:14518ms step_avg:93.66ms
step:156/1695 train_time:14613ms step_avg:93.67ms
step:157/1695 train_time:14706ms step_avg:93.67ms
step:158/1695 train_time:14801ms step_avg:93.67ms
step:159/1695 train_time:14895ms step_avg:93.68ms
step:160/1695 train_time:14989ms step_avg:93.68ms
step:161/1695 train_time:15084ms step_avg:93.69ms
step:162/1695 train_time:15179ms step_avg:93.69ms
step:163/1695 train_time:15273ms step_avg:93.70ms
step:164/1695 train_time:15367ms step_avg:93.70ms
step:165/1695 train_time:15461ms step_avg:93.70ms
step:166/1695 train_time:15554ms step_avg:93.70ms
step:167/1695 train_time:15648ms step_avg:93.70ms
step:168/1695 train_time:15742ms step_avg:93.71ms
step:169/1695 train_time:15838ms step_avg:93.71ms
step:170/1695 train_time:15931ms step_avg:93.71ms
step:171/1695 train_time:16026ms step_avg:93.72ms
step:172/1695 train_time:16121ms step_avg:93.73ms
step:173/1695 train_time:16214ms step_avg:93.73ms
step:174/1695 train_time:16308ms step_avg:93.73ms
step:175/1695 train_time:16403ms step_avg:93.73ms
step:176/1695 train_time:16496ms step_avg:93.73ms
step:177/1695 train_time:16590ms step_avg:93.73ms
step:178/1695 train_time:16684ms step_avg:93.73ms
step:179/1695 train_time:16778ms step_avg:93.73ms
step:180/1695 train_time:16873ms step_avg:93.74ms
step:181/1695 train_time:16967ms step_avg:93.74ms
step:182/1695 train_time:17061ms step_avg:93.74ms
step:183/1695 train_time:17155ms step_avg:93.74ms
step:184/1695 train_time:17249ms step_avg:93.74ms
step:185/1695 train_time:17343ms step_avg:93.75ms
step:186/1695 train_time:17437ms step_avg:93.75ms
step:187/1695 train_time:17530ms step_avg:93.74ms
step:188/1695 train_time:17624ms step_avg:93.75ms
step:189/1695 train_time:17718ms step_avg:93.74ms
step:190/1695 train_time:17811ms step_avg:93.74ms
step:191/1695 train_time:17906ms step_avg:93.75ms
step:192/1695 train_time:18000ms step_avg:93.75ms
step:193/1695 train_time:18094ms step_avg:93.75ms
step:194/1695 train_time:18188ms step_avg:93.75ms
step:195/1695 train_time:18282ms step_avg:93.75ms
step:196/1695 train_time:18377ms step_avg:93.76ms
step:197/1695 train_time:18470ms step_avg:93.76ms
step:198/1695 train_time:18564ms step_avg:93.76ms
step:199/1695 train_time:18658ms step_avg:93.76ms
step:200/1695 train_time:18752ms step_avg:93.76ms
step:201/1695 train_time:18846ms step_avg:93.76ms
step:202/1695 train_time:18941ms step_avg:93.77ms
step:203/1695 train_time:19035ms step_avg:93.77ms
step:204/1695 train_time:19130ms step_avg:93.77ms
step:205/1695 train_time:19224ms step_avg:93.77ms
step:206/1695 train_time:19318ms step_avg:93.78ms
step:207/1695 train_time:19412ms step_avg:93.78ms
step:208/1695 train_time:19506ms step_avg:93.78ms
step:209/1695 train_time:19600ms step_avg:93.78ms
step:210/1695 train_time:19694ms step_avg:93.78ms
step:211/1695 train_time:19788ms step_avg:93.78ms
step:212/1695 train_time:19883ms step_avg:93.79ms
step:213/1695 train_time:19977ms step_avg:93.79ms
step:214/1695 train_time:20070ms step_avg:93.79ms
step:215/1695 train_time:20164ms step_avg:93.79ms
step:216/1695 train_time:20258ms step_avg:93.79ms
step:217/1695 train_time:20352ms step_avg:93.79ms
step:218/1695 train_time:20446ms step_avg:93.79ms
step:219/1695 train_time:20540ms step_avg:93.79ms
step:220/1695 train_time:20634ms step_avg:93.79ms
step:221/1695 train_time:20728ms step_avg:93.79ms
step:222/1695 train_time:20822ms step_avg:93.79ms
step:223/1695 train_time:20916ms step_avg:93.79ms
step:224/1695 train_time:21009ms step_avg:93.79ms
step:225/1695 train_time:21104ms step_avg:93.80ms
step:226/1695 train_time:21200ms step_avg:93.80ms
step:227/1695 train_time:21294ms step_avg:93.80ms
step:228/1695 train_time:21388ms step_avg:93.81ms
step:229/1695 train_time:21481ms step_avg:93.80ms
step:230/1695 train_time:21576ms step_avg:93.81ms
step:231/1695 train_time:21669ms step_avg:93.81ms
step:232/1695 train_time:21763ms step_avg:93.81ms
step:233/1695 train_time:21857ms step_avg:93.81ms
step:234/1695 train_time:21950ms step_avg:93.80ms
step:235/1695 train_time:22044ms step_avg:93.80ms
step:236/1695 train_time:22138ms step_avg:93.81ms
step:237/1695 train_time:22232ms step_avg:93.81ms
step:238/1695 train_time:22327ms step_avg:93.81ms
step:239/1695 train_time:22421ms step_avg:93.81ms
step:240/1695 train_time:22514ms step_avg:93.81ms
step:241/1695 train_time:22608ms step_avg:93.81ms
step:242/1695 train_time:22704ms step_avg:93.82ms
step:243/1695 train_time:22798ms step_avg:93.82ms
step:244/1695 train_time:22893ms step_avg:93.82ms
step:245/1695 train_time:22986ms step_avg:93.82ms
step:246/1695 train_time:23080ms step_avg:93.82ms
step:247/1695 train_time:23174ms step_avg:93.82ms
step:248/1695 train_time:23268ms step_avg:93.82ms
step:249/1695 train_time:23362ms step_avg:93.82ms
step:250/1695 train_time:23457ms step_avg:93.83ms
step:250/1695 val_loss:4.0644 train_time:23548ms step_avg:94.19ms
step:251/1695 train_time:23576ms step_avg:93.93ms
step:252/1695 train_time:23651ms step_avg:93.85ms
step:253/1695 train_time:23751ms step_avg:93.88ms
step:254/1695 train_time:23846ms step_avg:93.88ms
step:255/1695 train_time:23941ms step_avg:93.89ms
step:256/1695 train_time:24035ms step_avg:93.89ms
step:257/1695 train_time:24128ms step_avg:93.88ms
step:258/1695 train_time:24222ms step_avg:93.88ms
step:259/1695 train_time:24316ms step_avg:93.88ms
step:260/1695 train_time:24411ms step_avg:93.89ms
step:261/1695 train_time:24504ms step_avg:93.89ms
step:262/1695 train_time:24600ms step_avg:93.89ms
step:263/1695 train_time:24697ms step_avg:93.90ms
step:264/1695 train_time:24794ms step_avg:93.92ms
step:265/1695 train_time:24888ms step_avg:93.92ms
step:266/1695 train_time:24983ms step_avg:93.92ms
step:267/1695 train_time:25077ms step_avg:93.92ms
step:268/1695 train_time:25171ms step_avg:93.92ms
step:269/1695 train_time:25264ms step_avg:93.92ms
step:270/1695 train_time:25358ms step_avg:93.92ms
step:271/1695 train_time:25451ms step_avg:93.92ms
step:272/1695 train_time:25546ms step_avg:93.92ms
step:273/1695 train_time:25641ms step_avg:93.92ms
step:274/1695 train_time:25736ms step_avg:93.93ms
step:275/1695 train_time:25831ms step_avg:93.93ms
step:276/1695 train_time:25927ms step_avg:93.94ms
step:277/1695 train_time:26022ms step_avg:93.94ms
step:278/1695 train_time:26117ms step_avg:93.95ms
step:279/1695 train_time:26210ms step_avg:93.94ms
step:280/1695 train_time:26304ms step_avg:93.94ms
step:281/1695 train_time:26399ms step_avg:93.95ms
step:282/1695 train_time:26492ms step_avg:93.94ms
step:283/1695 train_time:26586ms step_avg:93.94ms
step:284/1695 train_time:26682ms step_avg:93.95ms
step:285/1695 train_time:26777ms step_avg:93.95ms
step:286/1695 train_time:26871ms step_avg:93.95ms
step:287/1695 train_time:26967ms step_avg:93.96ms
step:288/1695 train_time:27062ms step_avg:93.97ms
step:289/1695 train_time:27157ms step_avg:93.97ms
step:290/1695 train_time:27251ms step_avg:93.97ms
step:291/1695 train_time:27345ms step_avg:93.97ms
step:292/1695 train_time:27440ms step_avg:93.97ms
step:293/1695 train_time:27534ms step_avg:93.97ms
step:294/1695 train_time:27629ms step_avg:93.97ms
step:295/1695 train_time:27724ms step_avg:93.98ms
step:296/1695 train_time:27821ms step_avg:93.99ms
step:297/1695 train_time:27915ms step_avg:93.99ms
step:298/1695 train_time:28009ms step_avg:93.99ms
step:299/1695 train_time:28104ms step_avg:93.99ms
step:300/1695 train_time:28199ms step_avg:94.00ms
step:301/1695 train_time:28293ms step_avg:94.00ms
step:302/1695 train_time:28387ms step_avg:94.00ms
step:303/1695 train_time:28482ms step_avg:94.00ms
step:304/1695 train_time:28576ms step_avg:94.00ms
step:305/1695 train_time:28670ms step_avg:94.00ms
step:306/1695 train_time:28765ms step_avg:94.00ms
step:307/1695 train_time:28860ms step_avg:94.01ms
step:308/1695 train_time:28955ms step_avg:94.01ms
step:309/1695 train_time:29049ms step_avg:94.01ms
step:310/1695 train_time:29143ms step_avg:94.01ms
step:311/1695 train_time:29238ms step_avg:94.01ms
step:312/1695 train_time:29332ms step_avg:94.01ms
step:313/1695 train_time:29427ms step_avg:94.02ms
step:314/1695 train_time:29522ms step_avg:94.02ms
step:315/1695 train_time:29617ms step_avg:94.02ms
step:316/1695 train_time:29710ms step_avg:94.02ms
step:317/1695 train_time:29805ms step_avg:94.02ms
step:318/1695 train_time:29901ms step_avg:94.03ms
step:319/1695 train_time:29995ms step_avg:94.03ms
step:320/1695 train_time:30089ms step_avg:94.03ms
step:321/1695 train_time:30184ms step_avg:94.03ms
step:322/1695 train_time:30279ms step_avg:94.04ms
step:323/1695 train_time:30374ms step_avg:94.04ms
step:324/1695 train_time:30468ms step_avg:94.04ms
step:325/1695 train_time:30562ms step_avg:94.04ms
step:326/1695 train_time:30656ms step_avg:94.04ms
step:327/1695 train_time:30751ms step_avg:94.04ms
step:328/1695 train_time:30846ms step_avg:94.04ms
step:329/1695 train_time:30942ms step_avg:94.05ms
step:330/1695 train_time:31036ms step_avg:94.05ms
step:331/1695 train_time:31130ms step_avg:94.05ms
step:332/1695 train_time:31224ms step_avg:94.05ms
step:333/1695 train_time:31319ms step_avg:94.05ms
step:334/1695 train_time:31414ms step_avg:94.05ms
step:335/1695 train_time:31508ms step_avg:94.05ms
step:336/1695 train_time:31602ms step_avg:94.05ms
step:337/1695 train_time:31697ms step_avg:94.06ms
step:338/1695 train_time:31791ms step_avg:94.06ms
step:339/1695 train_time:31886ms step_avg:94.06ms
step:340/1695 train_time:31981ms step_avg:94.06ms
step:341/1695 train_time:32074ms step_avg:94.06ms
step:342/1695 train_time:32168ms step_avg:94.06ms
step:343/1695 train_time:32263ms step_avg:94.06ms
step:344/1695 train_time:32358ms step_avg:94.06ms
step:345/1695 train_time:32452ms step_avg:94.06ms
step:346/1695 train_time:32547ms step_avg:94.07ms
step:347/1695 train_time:32643ms step_avg:94.07ms
step:348/1695 train_time:32738ms step_avg:94.07ms
step:349/1695 train_time:32833ms step_avg:94.08ms
step:350/1695 train_time:32926ms step_avg:94.08ms
step:351/1695 train_time:33023ms step_avg:94.08ms
step:352/1695 train_time:33117ms step_avg:94.08ms
step:353/1695 train_time:33211ms step_avg:94.08ms
step:354/1695 train_time:33307ms step_avg:94.09ms
step:355/1695 train_time:33401ms step_avg:94.09ms
step:356/1695 train_time:33496ms step_avg:94.09ms
step:357/1695 train_time:33590ms step_avg:94.09ms
step:358/1695 train_time:33686ms step_avg:94.09ms
step:359/1695 train_time:33780ms step_avg:94.10ms
step:360/1695 train_time:33874ms step_avg:94.09ms
step:361/1695 train_time:33969ms step_avg:94.10ms
step:362/1695 train_time:34064ms step_avg:94.10ms
step:363/1695 train_time:34159ms step_avg:94.10ms
step:364/1695 train_time:34253ms step_avg:94.10ms
step:365/1695 train_time:34347ms step_avg:94.10ms
step:366/1695 train_time:34441ms step_avg:94.10ms
step:367/1695 train_time:34535ms step_avg:94.10ms
step:368/1695 train_time:34628ms step_avg:94.10ms
step:369/1695 train_time:34723ms step_avg:94.10ms
step:370/1695 train_time:34818ms step_avg:94.10ms
step:371/1695 train_time:34912ms step_avg:94.10ms
step:372/1695 train_time:35007ms step_avg:94.10ms
step:373/1695 train_time:35101ms step_avg:94.10ms
step:374/1695 train_time:35195ms step_avg:94.10ms
step:375/1695 train_time:35289ms step_avg:94.10ms
step:375/1695 val_loss:3.8654 train_time:35382ms step_avg:94.35ms
step:376/1695 train_time:35410ms step_avg:94.17ms
step:377/1695 train_time:35486ms step_avg:94.13ms
step:378/1695 train_time:35588ms step_avg:94.15ms
step:379/1695 train_time:35685ms step_avg:94.15ms
step:380/1695 train_time:35781ms step_avg:94.16ms
step:381/1695 train_time:35877ms step_avg:94.17ms
step:382/1695 train_time:35972ms step_avg:94.17ms
step:383/1695 train_time:36068ms step_avg:94.17ms
step:384/1695 train_time:36163ms step_avg:94.18ms
step:385/1695 train_time:36260ms step_avg:94.18ms
step:386/1695 train_time:36354ms step_avg:94.18ms
step:387/1695 train_time:36450ms step_avg:94.19ms
step:388/1695 train_time:36547ms step_avg:94.19ms
step:389/1695 train_time:36645ms step_avg:94.20ms
step:390/1695 train_time:36741ms step_avg:94.21ms
step:391/1695 train_time:36838ms step_avg:94.21ms
step:392/1695 train_time:36934ms step_avg:94.22ms
step:393/1695 train_time:37030ms step_avg:94.22ms
step:394/1695 train_time:37125ms step_avg:94.23ms
step:395/1695 train_time:37221ms step_avg:94.23ms
step:396/1695 train_time:37317ms step_avg:94.24ms
step:397/1695 train_time:37413ms step_avg:94.24ms
step:398/1695 train_time:37509ms step_avg:94.24ms
step:399/1695 train_time:37606ms step_avg:94.25ms
step:400/1695 train_time:37702ms step_avg:94.25ms
step:401/1695 train_time:37799ms step_avg:94.26ms
step:402/1695 train_time:37895ms step_avg:94.27ms
step:403/1695 train_time:37991ms step_avg:94.27ms
step:404/1695 train_time:38087ms step_avg:94.27ms
step:405/1695 train_time:38182ms step_avg:94.28ms
step:406/1695 train_time:38278ms step_avg:94.28ms
step:407/1695 train_time:38375ms step_avg:94.29ms
step:408/1695 train_time:38472ms step_avg:94.29ms
step:409/1695 train_time:38568ms step_avg:94.30ms
step:410/1695 train_time:38664ms step_avg:94.30ms
step:411/1695 train_time:38760ms step_avg:94.31ms
step:412/1695 train_time:38857ms step_avg:94.31ms
step:413/1695 train_time:38953ms step_avg:94.32ms
step:414/1695 train_time:39049ms step_avg:94.32ms
step:415/1695 train_time:39145ms step_avg:94.33ms
step:416/1695 train_time:39241ms step_avg:94.33ms
step:417/1695 train_time:39337ms step_avg:94.33ms
step:418/1695 train_time:39434ms step_avg:94.34ms
step:419/1695 train_time:39529ms step_avg:94.34ms
step:420/1695 train_time:39625ms step_avg:94.34ms
step:421/1695 train_time:39721ms step_avg:94.35ms
step:422/1695 train_time:39817ms step_avg:94.35ms
step:423/1695 train_time:39915ms step_avg:94.36ms
step:424/1695 train_time:40011ms step_avg:94.36ms
step:425/1695 train_time:40106ms step_avg:94.37ms
step:426/1695 train_time:40202ms step_avg:94.37ms
step:427/1695 train_time:40299ms step_avg:94.38ms
step:428/1695 train_time:40394ms step_avg:94.38ms
step:429/1695 train_time:40490ms step_avg:94.38ms
step:430/1695 train_time:40586ms step_avg:94.39ms
step:431/1695 train_time:40682ms step_avg:94.39ms
step:432/1695 train_time:40778ms step_avg:94.39ms
step:433/1695 train_time:40874ms step_avg:94.40ms
step:434/1695 train_time:40970ms step_avg:94.40ms
step:435/1695 train_time:41065ms step_avg:94.40ms
step:436/1695 train_time:41161ms step_avg:94.41ms
step:437/1695 train_time:41257ms step_avg:94.41ms
step:438/1695 train_time:41354ms step_avg:94.41ms
step:439/1695 train_time:41449ms step_avg:94.42ms
step:440/1695 train_time:41545ms step_avg:94.42ms
step:441/1695 train_time:41641ms step_avg:94.42ms
step:442/1695 train_time:41737ms step_avg:94.43ms
step:443/1695 train_time:41834ms step_avg:94.43ms
step:444/1695 train_time:41929ms step_avg:94.44ms
step:445/1695 train_time:42025ms step_avg:94.44ms
step:446/1695 train_time:42121ms step_avg:94.44ms
step:447/1695 train_time:42218ms step_avg:94.45ms
step:448/1695 train_time:42314ms step_avg:94.45ms
step:449/1695 train_time:42410ms step_avg:94.45ms
step:450/1695 train_time:42505ms step_avg:94.46ms
step:451/1695 train_time:42602ms step_avg:94.46ms
step:452/1695 train_time:42698ms step_avg:94.47ms
step:453/1695 train_time:42794ms step_avg:94.47ms
step:454/1695 train_time:42890ms step_avg:94.47ms
step:455/1695 train_time:42986ms step_avg:94.47ms
step:456/1695 train_time:43082ms step_avg:94.48ms
step:457/1695 train_time:43179ms step_avg:94.48ms
step:458/1695 train_time:43275ms step_avg:94.49ms
step:459/1695 train_time:43370ms step_avg:94.49ms
step:460/1695 train_time:43466ms step_avg:94.49ms
step:461/1695 train_time:43562ms step_avg:94.50ms
step:462/1695 train_time:43658ms step_avg:94.50ms
step:463/1695 train_time:43755ms step_avg:94.50ms
step:464/1695 train_time:43852ms step_avg:94.51ms
step:465/1695 train_time:43947ms step_avg:94.51ms
step:466/1695 train_time:44044ms step_avg:94.51ms
step:467/1695 train_time:44140ms step_avg:94.52ms
step:468/1695 train_time:44236ms step_avg:94.52ms
step:469/1695 train_time:44333ms step_avg:94.53ms
step:470/1695 train_time:44430ms step_avg:94.53ms
step:471/1695 train_time:44526ms step_avg:94.53ms
step:472/1695 train_time:44622ms step_avg:94.54ms
step:473/1695 train_time:44718ms step_avg:94.54ms
step:474/1695 train_time:44814ms step_avg:94.54ms
step:475/1695 train_time:44911ms step_avg:94.55ms
step:476/1695 train_time:45006ms step_avg:94.55ms
step:477/1695 train_time:45103ms step_avg:94.56ms
step:478/1695 train_time:45199ms step_avg:94.56ms
step:479/1695 train_time:45296ms step_avg:94.56ms
step:480/1695 train_time:45393ms step_avg:94.57ms
step:481/1695 train_time:45489ms step_avg:94.57ms
step:482/1695 train_time:45585ms step_avg:94.58ms
step:483/1695 train_time:45682ms step_avg:94.58ms
step:484/1695 train_time:45777ms step_avg:94.58ms
step:485/1695 train_time:45874ms step_avg:94.59ms
step:486/1695 train_time:45970ms step_avg:94.59ms
step:487/1695 train_time:46066ms step_avg:94.59ms
step:488/1695 train_time:46162ms step_avg:94.59ms
step:489/1695 train_time:46259ms step_avg:94.60ms
step:490/1695 train_time:46356ms step_avg:94.60ms
step:491/1695 train_time:46452ms step_avg:94.61ms
step:492/1695 train_time:46547ms step_avg:94.61ms
step:493/1695 train_time:46643ms step_avg:94.61ms
step:494/1695 train_time:46739ms step_avg:94.61ms
step:495/1695 train_time:46835ms step_avg:94.62ms
step:496/1695 train_time:46931ms step_avg:94.62ms
step:497/1695 train_time:47027ms step_avg:94.62ms
step:498/1695 train_time:47123ms step_avg:94.63ms
step:499/1695 train_time:47219ms step_avg:94.63ms
step:500/1695 train_time:47316ms step_avg:94.63ms
step:500/1695 val_loss:3.7236 train_time:47410ms step_avg:94.82ms
step:501/1695 train_time:47439ms step_avg:94.69ms
step:502/1695 train_time:47522ms step_avg:94.66ms
step:503/1695 train_time:47620ms step_avg:94.67ms
step:504/1695 train_time:47717ms step_avg:94.68ms
step:505/1695 train_time:47813ms step_avg:94.68ms
step:506/1695 train_time:47909ms step_avg:94.68ms
step:507/1695 train_time:48005ms step_avg:94.68ms
step:508/1695 train_time:48100ms step_avg:94.69ms
step:509/1695 train_time:48197ms step_avg:94.69ms
step:510/1695 train_time:48293ms step_avg:94.69ms
step:511/1695 train_time:48389ms step_avg:94.69ms
step:512/1695 train_time:48485ms step_avg:94.70ms
step:513/1695 train_time:48583ms step_avg:94.70ms
step:514/1695 train_time:48681ms step_avg:94.71ms
step:515/1695 train_time:48778ms step_avg:94.72ms
step:516/1695 train_time:48875ms step_avg:94.72ms
step:517/1695 train_time:48971ms step_avg:94.72ms
step:518/1695 train_time:49067ms step_avg:94.72ms
step:519/1695 train_time:49163ms step_avg:94.73ms
step:520/1695 train_time:49259ms step_avg:94.73ms
step:521/1695 train_time:49356ms step_avg:94.73ms
step:522/1695 train_time:49453ms step_avg:94.74ms
step:523/1695 train_time:49550ms step_avg:94.74ms
step:524/1695 train_time:49647ms step_avg:94.75ms
step:525/1695 train_time:49743ms step_avg:94.75ms
step:526/1695 train_time:49841ms step_avg:94.75ms
step:527/1695 train_time:49937ms step_avg:94.76ms
step:528/1695 train_time:50034ms step_avg:94.76ms
step:529/1695 train_time:50129ms step_avg:94.76ms
step:530/1695 train_time:50225ms step_avg:94.76ms
step:531/1695 train_time:50321ms step_avg:94.77ms
step:532/1695 train_time:50418ms step_avg:94.77ms
step:533/1695 train_time:50514ms step_avg:94.77ms
step:534/1695 train_time:50611ms step_avg:94.78ms
step:535/1695 train_time:50708ms step_avg:94.78ms
step:536/1695 train_time:50805ms step_avg:94.79ms
step:537/1695 train_time:50901ms step_avg:94.79ms
step:538/1695 train_time:50998ms step_avg:94.79ms
step:539/1695 train_time:51095ms step_avg:94.80ms
step:540/1695 train_time:51191ms step_avg:94.80ms
step:541/1695 train_time:51287ms step_avg:94.80ms
step:542/1695 train_time:51383ms step_avg:94.80ms
step:543/1695 train_time:51480ms step_avg:94.81ms
step:544/1695 train_time:51576ms step_avg:94.81ms
step:545/1695 train_time:51673ms step_avg:94.81ms
step:546/1695 train_time:51770ms step_avg:94.82ms
step:547/1695 train_time:51866ms step_avg:94.82ms
step:548/1695 train_time:51962ms step_avg:94.82ms
step:549/1695 train_time:52059ms step_avg:94.83ms
step:550/1695 train_time:52156ms step_avg:94.83ms
step:551/1695 train_time:52253ms step_avg:94.83ms
step:552/1695 train_time:52349ms step_avg:94.83ms
step:553/1695 train_time:52444ms step_avg:94.84ms
step:554/1695 train_time:52542ms step_avg:94.84ms
step:555/1695 train_time:52639ms step_avg:94.85ms
step:556/1695 train_time:52736ms step_avg:94.85ms
step:557/1695 train_time:52833ms step_avg:94.85ms
step:558/1695 train_time:52930ms step_avg:94.86ms
step:559/1695 train_time:53026ms step_avg:94.86ms
step:560/1695 train_time:53123ms step_avg:94.86ms
step:561/1695 train_time:53220ms step_avg:94.87ms
step:562/1695 train_time:53317ms step_avg:94.87ms
step:563/1695 train_time:53413ms step_avg:94.87ms
step:564/1695 train_time:53510ms step_avg:94.88ms
step:565/1695 train_time:53606ms step_avg:94.88ms
step:566/1695 train_time:53704ms step_avg:94.88ms
step:567/1695 train_time:53801ms step_avg:94.89ms
step:568/1695 train_time:53898ms step_avg:94.89ms
step:569/1695 train_time:53993ms step_avg:94.89ms
step:570/1695 train_time:54089ms step_avg:94.89ms
step:571/1695 train_time:54185ms step_avg:94.89ms
step:572/1695 train_time:54281ms step_avg:94.90ms
step:573/1695 train_time:54378ms step_avg:94.90ms
step:574/1695 train_time:54474ms step_avg:94.90ms
step:575/1695 train_time:54571ms step_avg:94.91ms
step:576/1695 train_time:54668ms step_avg:94.91ms
step:577/1695 train_time:54764ms step_avg:94.91ms
step:578/1695 train_time:54860ms step_avg:94.91ms
step:579/1695 train_time:54957ms step_avg:94.92ms
step:580/1695 train_time:55053ms step_avg:94.92ms
step:581/1695 train_time:55149ms step_avg:94.92ms
step:582/1695 train_time:55245ms step_avg:94.92ms
step:583/1695 train_time:55341ms step_avg:94.93ms
step:584/1695 train_time:55439ms step_avg:94.93ms
step:585/1695 train_time:55537ms step_avg:94.93ms
step:586/1695 train_time:55636ms step_avg:94.94ms
step:587/1695 train_time:55733ms step_avg:94.95ms
step:588/1695 train_time:55830ms step_avg:94.95ms
step:589/1695 train_time:55925ms step_avg:94.95ms
step:590/1695 train_time:56022ms step_avg:94.95ms
step:591/1695 train_time:56119ms step_avg:94.96ms
step:592/1695 train_time:56215ms step_avg:94.96ms
step:593/1695 train_time:56312ms step_avg:94.96ms
step:594/1695 train_time:56409ms step_avg:94.96ms
step:595/1695 train_time:56505ms step_avg:94.97ms
step:596/1695 train_time:56602ms step_avg:94.97ms
step:597/1695 train_time:56699ms step_avg:94.97ms
step:598/1695 train_time:56796ms step_avg:94.98ms
step:599/1695 train_time:56892ms step_avg:94.98ms
step:600/1695 train_time:56988ms step_avg:94.98ms
step:601/1695 train_time:57084ms step_avg:94.98ms
step:602/1695 train_time:57180ms step_avg:94.98ms
step:603/1695 train_time:57276ms step_avg:94.99ms
step:604/1695 train_time:57374ms step_avg:94.99ms
step:605/1695 train_time:57471ms step_avg:94.99ms
step:606/1695 train_time:57567ms step_avg:95.00ms
step:607/1695 train_time:57663ms step_avg:95.00ms
step:608/1695 train_time:57760ms step_avg:95.00ms
step:609/1695 train_time:57857ms step_avg:95.00ms
step:610/1695 train_time:57953ms step_avg:95.01ms
step:611/1695 train_time:58049ms step_avg:95.01ms
step:612/1695 train_time:58144ms step_avg:95.01ms
step:613/1695 train_time:58240ms step_avg:95.01ms
step:614/1695 train_time:58338ms step_avg:95.01ms
step:615/1695 train_time:58436ms step_avg:95.02ms
step:616/1695 train_time:58533ms step_avg:95.02ms
step:617/1695 train_time:58629ms step_avg:95.02ms
step:618/1695 train_time:58725ms step_avg:95.02ms
step:619/1695 train_time:58821ms step_avg:95.03ms
step:620/1695 train_time:58918ms step_avg:95.03ms
step:621/1695 train_time:59015ms step_avg:95.03ms
step:622/1695 train_time:59112ms step_avg:95.03ms
step:623/1695 train_time:59207ms step_avg:95.04ms
step:624/1695 train_time:59303ms step_avg:95.04ms
step:625/1695 train_time:59401ms step_avg:95.04ms
step:625/1695 val_loss:3.6385 train_time:59496ms step_avg:95.19ms
step:626/1695 train_time:59524ms step_avg:95.09ms
step:627/1695 train_time:59604ms step_avg:95.06ms
step:628/1695 train_time:59709ms step_avg:95.08ms
step:629/1695 train_time:60139ms step_avg:95.61ms
step:630/1695 train_time:60235ms step_avg:95.61ms
step:631/1695 train_time:60332ms step_avg:95.61ms
step:632/1695 train_time:60429ms step_avg:95.62ms
step:633/1695 train_time:60525ms step_avg:95.62ms
step:634/1695 train_time:60623ms step_avg:95.62ms
step:635/1695 train_time:60720ms step_avg:95.62ms
step:636/1695 train_time:60817ms step_avg:95.62ms
step:637/1695 train_time:60914ms step_avg:95.63ms
step:638/1695 train_time:61015ms step_avg:95.63ms
step:639/1695 train_time:61115ms step_avg:95.64ms
step:640/1695 train_time:61215ms step_avg:95.65ms
step:641/1695 train_time:61313ms step_avg:95.65ms
step:642/1695 train_time:61771ms step_avg:96.22ms
step:643/1695 train_time:61820ms step_avg:96.14ms
step:644/1695 train_time:61916ms step_avg:96.14ms
step:645/1695 train_time:62013ms step_avg:96.14ms
step:646/1695 train_time:62110ms step_avg:96.15ms
step:647/1695 train_time:62207ms step_avg:96.15ms
step:648/1695 train_time:62305ms step_avg:96.15ms
step:649/1695 train_time:62402ms step_avg:96.15ms
step:650/1695 train_time:62499ms step_avg:96.15ms
step:651/1695 train_time:62596ms step_avg:96.15ms
step:652/1695 train_time:62696ms step_avg:96.16ms
step:653/1695 train_time:62796ms step_avg:96.17ms
step:654/1695 train_time:62896ms step_avg:96.17ms
step:655/1695 train_time:62994ms step_avg:96.17ms
step:656/1695 train_time:63092ms step_avg:96.18ms
step:657/1695 train_time:63189ms step_avg:96.18ms
step:658/1695 train_time:63286ms step_avg:96.18ms
step:659/1695 train_time:63383ms step_avg:96.18ms
step:660/1695 train_time:63480ms step_avg:96.18ms
step:661/1695 train_time:63577ms step_avg:96.18ms
step:662/1695 train_time:63676ms step_avg:96.19ms
step:663/1695 train_time:63775ms step_avg:96.19ms
step:664/1695 train_time:63873ms step_avg:96.19ms
step:665/1695 train_time:63971ms step_avg:96.20ms
step:666/1695 train_time:64070ms step_avg:96.20ms
step:667/1695 train_time:64168ms step_avg:96.20ms
step:668/1695 train_time:64265ms step_avg:96.21ms
step:669/1695 train_time:64363ms step_avg:96.21ms
step:670/1695 train_time:64460ms step_avg:96.21ms
step:671/1695 train_time:64558ms step_avg:96.21ms
step:672/1695 train_time:64655ms step_avg:96.21ms
step:673/1695 train_time:64753ms step_avg:96.22ms
step:674/1695 train_time:64851ms step_avg:96.22ms
step:675/1695 train_time:64949ms step_avg:96.22ms
step:676/1695 train_time:65046ms step_avg:96.22ms
step:677/1695 train_time:65144ms step_avg:96.22ms
step:678/1695 train_time:65241ms step_avg:96.23ms
step:679/1695 train_time:65339ms step_avg:96.23ms
step:680/1695 train_time:65438ms step_avg:96.23ms
step:681/1695 train_time:65535ms step_avg:96.23ms
step:682/1695 train_time:65633ms step_avg:96.24ms
step:683/1695 train_time:65731ms step_avg:96.24ms
step:684/1695 train_time:65829ms step_avg:96.24ms
step:685/1695 train_time:65926ms step_avg:96.24ms
step:686/1695 train_time:66024ms step_avg:96.24ms
step:687/1695 train_time:66122ms step_avg:96.25ms
step:688/1695 train_time:66220ms step_avg:96.25ms
step:689/1695 train_time:66319ms step_avg:96.25ms
step:690/1695 train_time:66417ms step_avg:96.26ms
step:691/1695 train_time:66515ms step_avg:96.26ms
step:692/1695 train_time:66613ms step_avg:96.26ms
step:693/1695 train_time:66712ms step_avg:96.27ms
step:694/1695 train_time:66811ms step_avg:96.27ms
step:695/1695 train_time:66910ms step_avg:96.27ms
step:696/1695 train_time:67008ms step_avg:96.28ms
step:697/1695 train_time:67105ms step_avg:96.28ms
step:698/1695 train_time:67202ms step_avg:96.28ms
step:699/1695 train_time:67299ms step_avg:96.28ms
step:700/1695 train_time:67397ms step_avg:96.28ms
step:701/1695 train_time:67496ms step_avg:96.28ms
step:702/1695 train_time:67593ms step_avg:96.29ms
step:703/1695 train_time:67692ms step_avg:96.29ms
step:704/1695 train_time:67789ms step_avg:96.29ms
step:705/1695 train_time:67887ms step_avg:96.29ms
step:706/1695 train_time:67985ms step_avg:96.30ms
step:707/1695 train_time:68082ms step_avg:96.30ms
step:708/1695 train_time:68179ms step_avg:96.30ms
step:709/1695 train_time:68277ms step_avg:96.30ms
step:710/1695 train_time:68375ms step_avg:96.30ms
step:711/1695 train_time:68474ms step_avg:96.31ms
step:712/1695 train_time:68572ms step_avg:96.31ms
step:713/1695 train_time:68669ms step_avg:96.31ms
step:714/1695 train_time:68767ms step_avg:96.31ms
step:715/1695 train_time:69087ms step_avg:96.63ms
step:716/1695 train_time:69182ms step_avg:96.62ms
step:717/1695 train_time:69280ms step_avg:96.62ms
step:718/1695 train_time:69376ms step_avg:96.62ms
step:719/1695 train_time:69767ms step_avg:97.03ms
step:720/1695 train_time:69863ms step_avg:97.03ms
step:721/1695 train_time:69960ms step_avg:97.03ms
step:722/1695 train_time:70058ms step_avg:97.03ms
step:723/1695 train_time:70154ms step_avg:97.03ms
step:724/1695 train_time:70251ms step_avg:97.03ms
step:725/1695 train_time:70348ms step_avg:97.03ms
step:726/1695 train_time:70444ms step_avg:97.03ms
step:727/1695 train_time:70542ms step_avg:97.03ms
step:728/1695 train_time:70640ms step_avg:97.03ms
step:729/1695 train_time:70742ms step_avg:97.04ms
step:730/1695 train_time:70844ms step_avg:97.05ms
step:731/1695 train_time:70943ms step_avg:97.05ms
step:732/1695 train_time:71043ms step_avg:97.05ms
step:733/1695 train_time:71142ms step_avg:97.06ms
step:734/1695 train_time:71240ms step_avg:97.06ms
step:735/1695 train_time:71336ms step_avg:97.06ms
step:736/1695 train_time:71434ms step_avg:97.06ms
step:737/1695 train_time:71531ms step_avg:97.06ms
step:738/1695 train_time:71628ms step_avg:97.06ms
step:739/1695 train_time:71726ms step_avg:97.06ms
step:740/1695 train_time:71824ms step_avg:97.06ms
step:741/1695 train_time:71923ms step_avg:97.06ms
step:742/1695 train_time:72021ms step_avg:97.06ms
step:743/1695 train_time:72119ms step_avg:97.07ms
step:744/1695 train_time:72217ms step_avg:97.07ms
step:745/1695 train_time:72314ms step_avg:97.07ms
step:746/1695 train_time:72412ms step_avg:97.07ms
step:747/1695 train_time:72509ms step_avg:97.07ms
step:748/1695 train_time:72606ms step_avg:97.07ms
step:749/1695 train_time:72704ms step_avg:97.07ms
step:750/1695 train_time:72802ms step_avg:97.07ms
step:750/1695 val_loss:3.5787 train_time:72898ms step_avg:97.20ms
step:751/1695 train_time:72926ms step_avg:97.11ms
step:752/1695 train_time:73011ms step_avg:97.09ms
step:753/1695 train_time:73110ms step_avg:97.09ms
step:754/1695 train_time:73208ms step_avg:97.09ms
step:755/1695 train_time:73306ms step_avg:97.09ms
step:756/1695 train_time:73405ms step_avg:97.10ms
step:757/1695 train_time:73503ms step_avg:97.10ms
step:758/1695 train_time:73600ms step_avg:97.10ms
step:759/1695 train_time:73697ms step_avg:97.10ms
step:760/1695 train_time:73795ms step_avg:97.10ms
step:761/1695 train_time:73893ms step_avg:97.10ms
step:762/1695 train_time:73993ms step_avg:97.10ms
step:763/1695 train_time:74092ms step_avg:97.11ms
step:764/1695 train_time:74190ms step_avg:97.11ms
step:765/1695 train_time:74288ms step_avg:97.11ms
step:766/1695 train_time:74387ms step_avg:97.11ms
step:767/1695 train_time:74486ms step_avg:97.11ms
step:768/1695 train_time:74584ms step_avg:97.12ms
step:769/1695 train_time:74683ms step_avg:97.12ms
step:770/1695 train_time:74781ms step_avg:97.12ms
step:771/1695 train_time:74880ms step_avg:97.12ms
step:772/1695 train_time:74978ms step_avg:97.12ms
step:773/1695 train_time:75078ms step_avg:97.13ms
step:774/1695 train_time:75177ms step_avg:97.13ms
step:775/1695 train_time:75276ms step_avg:97.13ms
step:776/1695 train_time:75374ms step_avg:97.13ms
step:777/1695 train_time:75473ms step_avg:97.13ms
step:778/1695 train_time:75570ms step_avg:97.13ms
step:779/1695 train_time:75667ms step_avg:97.13ms
step:780/1695 train_time:75766ms step_avg:97.14ms
step:781/1695 train_time:75864ms step_avg:97.14ms
step:782/1695 train_time:75964ms step_avg:97.14ms
step:783/1695 train_time:76062ms step_avg:97.14ms
step:784/1695 train_time:76160ms step_avg:97.14ms
step:785/1695 train_time:76259ms step_avg:97.14ms
step:786/1695 train_time:76358ms step_avg:97.15ms
step:787/1695 train_time:76457ms step_avg:97.15ms
step:788/1695 train_time:76555ms step_avg:97.15ms
step:789/1695 train_time:76653ms step_avg:97.15ms
step:790/1695 train_time:76751ms step_avg:97.15ms
step:791/1695 train_time:76848ms step_avg:97.15ms
step:792/1695 train_time:76946ms step_avg:97.15ms
step:793/1695 train_time:77045ms step_avg:97.16ms
step:794/1695 train_time:77144ms step_avg:97.16ms
step:795/1695 train_time:77244ms step_avg:97.16ms
step:796/1695 train_time:77585ms step_avg:97.47ms
step:797/1695 train_time:77682ms step_avg:97.47ms
step:798/1695 train_time:77779ms step_avg:97.47ms
step:799/1695 train_time:77877ms step_avg:97.47ms
step:800/1695 train_time:77974ms step_avg:97.47ms
step:801/1695 train_time:78071ms step_avg:97.47ms
step:802/1695 train_time:78168ms step_avg:97.47ms
step:803/1695 train_time:78265ms step_avg:97.47ms
step:804/1695 train_time:78603ms step_avg:97.76ms
step:805/1695 train_time:78699ms step_avg:97.76ms
step:806/1695 train_time:78796ms step_avg:97.76ms
step:807/1695 train_time:78894ms step_avg:97.76ms
step:808/1695 train_time:78991ms step_avg:97.76ms
step:809/1695 train_time:79089ms step_avg:97.76ms
step:810/1695 train_time:79187ms step_avg:97.76ms
step:811/1695 train_time:79285ms step_avg:97.76ms
step:812/1695 train_time:79382ms step_avg:97.76ms
step:813/1695 train_time:79483ms step_avg:97.77ms
step:814/1695 train_time:79584ms step_avg:97.77ms
step:815/1695 train_time:79683ms step_avg:97.77ms
step:816/1695 train_time:79782ms step_avg:97.77ms
step:817/1695 train_time:79881ms step_avg:97.77ms
step:818/1695 train_time:79979ms step_avg:97.77ms
step:819/1695 train_time:80077ms step_avg:97.77ms
step:820/1695 train_time:80176ms step_avg:97.78ms
step:821/1695 train_time:80274ms step_avg:97.78ms
step:822/1695 train_time:80371ms step_avg:97.78ms
step:823/1695 train_time:80469ms step_avg:97.77ms
step:824/1695 train_time:80566ms step_avg:97.77ms
step:825/1695 train_time:80664ms step_avg:97.78ms
step:826/1695 train_time:80762ms step_avg:97.78ms
step:827/1695 train_time:80861ms step_avg:97.78ms
step:828/1695 train_time:80959ms step_avg:97.78ms
step:829/1695 train_time:81057ms step_avg:97.78ms
step:830/1695 train_time:81155ms step_avg:97.78ms
step:831/1695 train_time:81253ms step_avg:97.78ms
step:832/1695 train_time:81352ms step_avg:97.78ms
step:833/1695 train_time:81450ms step_avg:97.78ms
step:834/1695 train_time:81547ms step_avg:97.78ms
step:835/1695 train_time:81645ms step_avg:97.78ms
step:836/1695 train_time:81745ms step_avg:97.78ms
step:837/1695 train_time:81843ms step_avg:97.78ms
step:838/1695 train_time:81941ms step_avg:97.78ms
step:839/1695 train_time:82039ms step_avg:97.78ms
step:840/1695 train_time:82138ms step_avg:97.78ms
step:841/1695 train_time:82237ms step_avg:97.79ms
step:842/1695 train_time:82336ms step_avg:97.79ms
step:843/1695 train_time:82435ms step_avg:97.79ms
step:844/1695 train_time:82534ms step_avg:97.79ms
step:845/1695 train_time:82631ms step_avg:97.79ms
step:846/1695 train_time:82729ms step_avg:97.79ms
step:847/1695 train_time:82827ms step_avg:97.79ms
step:848/1695 train_time:82925ms step_avg:97.79ms
step:849/1695 train_time:83023ms step_avg:97.79ms
step:850/1695 train_time:83120ms step_avg:97.79ms
step:851/1695 train_time:83218ms step_avg:97.79ms
step:852/1695 train_time:83316ms step_avg:97.79ms
step:853/1695 train_time:83414ms step_avg:97.79ms
step:854/1695 train_time:83513ms step_avg:97.79ms
step:855/1695 train_time:83610ms step_avg:97.79ms
step:856/1695 train_time:83708ms step_avg:97.79ms
step:857/1695 train_time:83806ms step_avg:97.79ms
step:858/1695 train_time:83904ms step_avg:97.79ms
step:859/1695 train_time:84002ms step_avg:97.79ms
step:860/1695 train_time:84101ms step_avg:97.79ms
step:861/1695 train_time:84199ms step_avg:97.79ms
step:862/1695 train_time:84298ms step_avg:97.79ms
step:863/1695 train_time:84396ms step_avg:97.79ms
step:864/1695 train_time:84495ms step_avg:97.80ms
step:865/1695 train_time:84594ms step_avg:97.80ms
step:866/1695 train_time:84693ms step_avg:97.80ms
step:867/1695 train_time:84791ms step_avg:97.80ms
step:868/1695 train_time:84889ms step_avg:97.80ms
step:869/1695 train_time:84986ms step_avg:97.80ms
step:870/1695 train_time:85084ms step_avg:97.80ms
step:871/1695 train_time:85182ms step_avg:97.80ms
step:872/1695 train_time:85282ms step_avg:97.80ms
step:873/1695 train_time:85382ms step_avg:97.80ms
step:874/1695 train_time:85481ms step_avg:97.80ms
step:875/1695 train_time:85581ms step_avg:97.81ms
step:875/1695 val_loss:3.5322 train_time:85677ms step_avg:97.92ms
step:876/1695 train_time:85705ms step_avg:97.84ms
step:877/1695 train_time:85791ms step_avg:97.82ms
step:878/1695 train_time:85890ms step_avg:97.82ms
step:879/1695 train_time:85989ms step_avg:97.83ms
step:880/1695 train_time:86086ms step_avg:97.82ms
step:881/1695 train_time:86185ms step_avg:97.83ms
step:882/1695 train_time:86285ms step_avg:97.83ms
step:883/1695 train_time:86384ms step_avg:97.83ms
step:884/1695 train_time:86483ms step_avg:97.83ms
step:885/1695 train_time:86581ms step_avg:97.83ms
step:886/1695 train_time:86682ms step_avg:97.84ms
step:887/1695 train_time:86785ms step_avg:97.84ms
step:888/1695 train_time:86887ms step_avg:97.85ms
step:889/1695 train_time:86988ms step_avg:97.85ms
step:890/1695 train_time:87087ms step_avg:97.85ms
step:891/1695 train_time:87186ms step_avg:97.85ms
step:892/1695 train_time:87285ms step_avg:97.85ms
step:893/1695 train_time:87384ms step_avg:97.85ms
step:894/1695 train_time:87483ms step_avg:97.86ms
step:895/1695 train_time:87583ms step_avg:97.86ms
step:896/1695 train_time:87682ms step_avg:97.86ms
step:897/1695 train_time:87782ms step_avg:97.86ms
step:898/1695 train_time:87883ms step_avg:97.87ms
step:899/1695 train_time:87984ms step_avg:97.87ms
step:900/1695 train_time:88085ms step_avg:97.87ms
step:901/1695 train_time:88185ms step_avg:97.87ms
step:902/1695 train_time:88284ms step_avg:97.88ms
step:903/1695 train_time:88384ms step_avg:97.88ms
step:904/1695 train_time:88483ms step_avg:97.88ms
step:905/1695 train_time:88582ms step_avg:97.88ms
step:906/1695 train_time:88682ms step_avg:97.88ms
step:907/1695 train_time:88782ms step_avg:97.89ms
step:908/1695 train_time:88883ms step_avg:97.89ms
step:909/1695 train_time:88983ms step_avg:97.89ms
step:910/1695 train_time:89083ms step_avg:97.89ms
step:911/1695 train_time:89183ms step_avg:97.90ms
step:912/1695 train_time:89283ms step_avg:97.90ms
step:913/1695 train_time:89382ms step_avg:97.90ms
step:914/1695 train_time:89481ms step_avg:97.90ms
step:915/1695 train_time:89580ms step_avg:97.90ms
step:916/1695 train_time:89680ms step_avg:97.90ms
step:917/1695 train_time:89778ms step_avg:97.90ms
step:918/1695 train_time:89878ms step_avg:97.91ms
step:919/1695 train_time:89977ms step_avg:97.91ms
step:920/1695 train_time:90077ms step_avg:97.91ms
step:921/1695 train_time:90176ms step_avg:97.91ms
step:922/1695 train_time:90275ms step_avg:97.91ms
step:923/1695 train_time:90374ms step_avg:97.91ms
step:924/1695 train_time:90473ms step_avg:97.91ms
step:925/1695 train_time:90574ms step_avg:97.92ms
step:926/1695 train_time:90674ms step_avg:97.92ms
step:927/1695 train_time:90773ms step_avg:97.92ms
step:928/1695 train_time:90871ms step_avg:97.92ms
step:929/1695 train_time:90971ms step_avg:97.92ms
step:930/1695 train_time:91071ms step_avg:97.93ms
step:931/1695 train_time:91171ms step_avg:97.93ms
step:932/1695 train_time:91271ms step_avg:97.93ms
step:933/1695 train_time:91370ms step_avg:97.93ms
step:934/1695 train_time:91469ms step_avg:97.93ms
step:935/1695 train_time:91568ms step_avg:97.93ms
step:936/1695 train_time:91667ms step_avg:97.93ms
step:937/1695 train_time:91767ms step_avg:97.94ms
step:938/1695 train_time:91866ms step_avg:97.94ms
step:939/1695 train_time:91967ms step_avg:97.94ms
step:940/1695 train_time:92067ms step_avg:97.94ms
step:941/1695 train_time:92168ms step_avg:97.95ms
step:942/1695 train_time:92267ms step_avg:97.95ms
step:943/1695 train_time:92367ms step_avg:97.95ms
step:944/1695 train_time:92466ms step_avg:97.95ms
step:945/1695 train_time:92567ms step_avg:97.95ms
step:946/1695 train_time:92666ms step_avg:97.96ms
step:947/1695 train_time:92766ms step_avg:97.96ms
step:948/1695 train_time:92865ms step_avg:97.96ms
step:949/1695 train_time:92965ms step_avg:97.96ms
step:950/1695 train_time:93065ms step_avg:97.96ms
step:951/1695 train_time:93166ms step_avg:97.97ms
step:952/1695 train_time:93266ms step_avg:97.97ms
step:953/1695 train_time:93366ms step_avg:97.97ms
step:954/1695 train_time:93466ms step_avg:97.97ms
step:955/1695 train_time:93567ms step_avg:97.98ms
step:956/1695 train_time:93666ms step_avg:97.98ms
step:957/1695 train_time:93766ms step_avg:97.98ms
step:958/1695 train_time:93865ms step_avg:97.98ms
step:959/1695 train_time:93965ms step_avg:97.98ms
step:960/1695 train_time:94065ms step_avg:97.98ms
step:961/1695 train_time:94165ms step_avg:97.99ms
step:962/1695 train_time:94265ms step_avg:97.99ms
step:963/1695 train_time:94365ms step_avg:97.99ms
step:964/1695 train_time:94466ms step_avg:97.99ms
step:965/1695 train_time:94566ms step_avg:98.00ms
step:966/1695 train_time:94669ms step_avg:98.00ms
step:967/1695 train_time:94769ms step_avg:98.00ms
step:968/1695 train_time:94867ms step_avg:98.00ms
step:969/1695 train_time:94967ms step_avg:98.01ms
step:970/1695 train_time:95067ms step_avg:98.01ms
step:971/1695 train_time:95167ms step_avg:98.01ms
step:972/1695 train_time:95266ms step_avg:98.01ms
step:973/1695 train_time:95366ms step_avg:98.01ms
step:974/1695 train_time:95465ms step_avg:98.01ms
step:975/1695 train_time:95565ms step_avg:98.02ms
step:976/1695 train_time:95665ms step_avg:98.02ms
step:977/1695 train_time:95765ms step_avg:98.02ms
step:978/1695 train_time:95864ms step_avg:98.02ms
step:979/1695 train_time:95965ms step_avg:98.02ms
step:980/1695 train_time:96065ms step_avg:98.03ms
step:981/1695 train_time:96164ms step_avg:98.03ms
step:982/1695 train_time:96265ms step_avg:98.03ms
step:983/1695 train_time:96366ms step_avg:98.03ms
step:984/1695 train_time:96465ms step_avg:98.03ms
step:985/1695 train_time:96565ms step_avg:98.04ms
step:986/1695 train_time:96666ms step_avg:98.04ms
step:987/1695 train_time:96766ms step_avg:98.04ms
step:988/1695 train_time:96866ms step_avg:98.04ms
step:989/1695 train_time:96966ms step_avg:98.04ms
step:990/1695 train_time:97065ms step_avg:98.05ms
step:991/1695 train_time:97166ms step_avg:98.05ms
step:992/1695 train_time:97265ms step_avg:98.05ms
step:993/1695 train_time:97365ms step_avg:98.05ms
step:994/1695 train_time:97465ms step_avg:98.05ms
step:995/1695 train_time:97565ms step_avg:98.06ms
step:996/1695 train_time:97664ms step_avg:98.06ms
step:997/1695 train_time:97764ms step_avg:98.06ms
step:998/1695 train_time:97864ms step_avg:98.06ms
step:999/1695 train_time:97965ms step_avg:98.06ms
step:1000/1695 train_time:98064ms step_avg:98.06ms
step:1000/1695 val_loss:3.4877 train_time:98160ms step_avg:98.16ms
step:1001/1695 train_time:98189ms step_avg:98.09ms
step:1002/1695 train_time:98270ms step_avg:98.07ms
step:1003/1695 train_time:98372ms step_avg:98.08ms
step:1004/1695 train_time:98471ms step_avg:98.08ms
step:1005/1695 train_time:98570ms step_avg:98.08ms
step:1006/1695 train_time:98668ms step_avg:98.08ms
step:1007/1695 train_time:98767ms step_avg:98.08ms
step:1008/1695 train_time:98865ms step_avg:98.08ms
step:1009/1695 train_time:98965ms step_avg:98.08ms
step:1010/1695 train_time:99063ms step_avg:98.08ms
step:1011/1695 train_time:99164ms step_avg:98.08ms
step:1012/1695 train_time:99265ms step_avg:98.09ms
step:1013/1695 train_time:99366ms step_avg:98.09ms
step:1014/1695 train_time:99466ms step_avg:98.09ms
step:1015/1695 train_time:99567ms step_avg:98.10ms
step:1016/1695 train_time:99666ms step_avg:98.10ms
step:1017/1695 train_time:99766ms step_avg:98.10ms
step:1018/1695 train_time:99865ms step_avg:98.10ms
step:1019/1695 train_time:99963ms step_avg:98.10ms
step:1020/1695 train_time:100063ms step_avg:98.10ms
step:1021/1695 train_time:100164ms step_avg:98.10ms
step:1022/1695 train_time:100264ms step_avg:98.11ms
step:1023/1695 train_time:100365ms step_avg:98.11ms
step:1024/1695 train_time:100467ms step_avg:98.11ms
step:1025/1695 train_time:100567ms step_avg:98.11ms
step:1026/1695 train_time:100667ms step_avg:98.12ms
step:1027/1695 train_time:100766ms step_avg:98.12ms
step:1028/1695 train_time:100865ms step_avg:98.12ms
step:1029/1695 train_time:100965ms step_avg:98.12ms
step:1030/1695 train_time:101064ms step_avg:98.12ms
step:1031/1695 train_time:101165ms step_avg:98.12ms
step:1032/1695 train_time:101266ms step_avg:98.13ms
step:1033/1695 train_time:101366ms step_avg:98.13ms
step:1034/1695 train_time:101466ms step_avg:98.13ms
step:1035/1695 train_time:101566ms step_avg:98.13ms
step:1036/1695 train_time:101665ms step_avg:98.13ms
step:1037/1695 train_time:101766ms step_avg:98.13ms
step:1038/1695 train_time:101865ms step_avg:98.14ms
step:1039/1695 train_time:101964ms step_avg:98.14ms
step:1040/1695 train_time:102063ms step_avg:98.14ms
step:1041/1695 train_time:102163ms step_avg:98.14ms
step:1042/1695 train_time:102264ms step_avg:98.14ms
step:1043/1695 train_time:102365ms step_avg:98.14ms
step:1044/1695 train_time:102465ms step_avg:98.15ms
step:1045/1695 train_time:102565ms step_avg:98.15ms
step:1046/1695 train_time:102665ms step_avg:98.15ms
step:1047/1695 train_time:102765ms step_avg:98.15ms
step:1048/1695 train_time:102865ms step_avg:98.15ms
step:1049/1695 train_time:102964ms step_avg:98.15ms
step:1050/1695 train_time:103064ms step_avg:98.16ms
step:1051/1695 train_time:103164ms step_avg:98.16ms
step:1052/1695 train_time:103264ms step_avg:98.16ms
step:1053/1695 train_time:103366ms step_avg:98.16ms
step:1054/1695 train_time:103466ms step_avg:98.17ms
step:1055/1695 train_time:103566ms step_avg:98.17ms
step:1056/1695 train_time:103666ms step_avg:98.17ms
step:1057/1695 train_time:103765ms step_avg:98.17ms
step:1058/1695 train_time:103864ms step_avg:98.17ms
step:1059/1695 train_time:103963ms step_avg:98.17ms
step:1060/1695 train_time:104063ms step_avg:98.17ms
step:1061/1695 train_time:104162ms step_avg:98.17ms
step:1062/1695 train_time:104262ms step_avg:98.18ms
step:1063/1695 train_time:104362ms step_avg:98.18ms
step:1064/1695 train_time:104462ms step_avg:98.18ms
step:1065/1695 train_time:104563ms step_avg:98.18ms
step:1066/1695 train_time:104663ms step_avg:98.18ms
step:1067/1695 train_time:104763ms step_avg:98.18ms
step:1068/1695 train_time:104863ms step_avg:98.19ms
step:1069/1695 train_time:104962ms step_avg:98.19ms
step:1070/1695 train_time:105062ms step_avg:98.19ms
step:1071/1695 train_time:105161ms step_avg:98.19ms
step:1072/1695 train_time:105261ms step_avg:98.19ms
step:1073/1695 train_time:105360ms step_avg:98.19ms
step:1074/1695 train_time:105459ms step_avg:98.19ms
step:1075/1695 train_time:105559ms step_avg:98.19ms
step:1076/1695 train_time:105659ms step_avg:98.20ms
step:1077/1695 train_time:105760ms step_avg:98.20ms
step:1078/1695 train_time:105860ms step_avg:98.20ms
step:1079/1695 train_time:105961ms step_avg:98.20ms
step:1080/1695 train_time:106060ms step_avg:98.20ms
step:1081/1695 train_time:106159ms step_avg:98.20ms
step:1082/1695 train_time:106260ms step_avg:98.21ms
step:1083/1695 train_time:106359ms step_avg:98.21ms
step:1084/1695 train_time:106460ms step_avg:98.21ms
step:1085/1695 train_time:106559ms step_avg:98.21ms
step:1086/1695 train_time:106660ms step_avg:98.21ms
step:1087/1695 train_time:106760ms step_avg:98.22ms
step:1088/1695 train_time:106861ms step_avg:98.22ms
step:1089/1695 train_time:106961ms step_avg:98.22ms
step:1090/1695 train_time:107062ms step_avg:98.22ms
step:1091/1695 train_time:107161ms step_avg:98.22ms
step:1092/1695 train_time:107261ms step_avg:98.22ms
step:1093/1695 train_time:107360ms step_avg:98.23ms
step:1094/1695 train_time:107460ms step_avg:98.23ms
step:1095/1695 train_time:107560ms step_avg:98.23ms
step:1096/1695 train_time:107661ms step_avg:98.23ms
step:1097/1695 train_time:107761ms step_avg:98.23ms
step:1098/1695 train_time:107860ms step_avg:98.23ms
step:1099/1695 train_time:107959ms step_avg:98.23ms
step:1100/1695 train_time:108059ms step_avg:98.24ms
step:1101/1695 train_time:108159ms step_avg:98.24ms
step:1102/1695 train_time:108259ms step_avg:98.24ms
step:1103/1695 train_time:108359ms step_avg:98.24ms
step:1104/1695 train_time:108460ms step_avg:98.24ms
step:1105/1695 train_time:108559ms step_avg:98.24ms
step:1106/1695 train_time:108660ms step_avg:98.25ms
step:1107/1695 train_time:108760ms step_avg:98.25ms
step:1108/1695 train_time:108860ms step_avg:98.25ms
step:1109/1695 train_time:108959ms step_avg:98.25ms
step:1110/1695 train_time:109060ms step_avg:98.25ms
step:1111/1695 train_time:109160ms step_avg:98.25ms
step:1112/1695 train_time:109260ms step_avg:98.26ms
step:1113/1695 train_time:109361ms step_avg:98.26ms
step:1114/1695 train_time:109461ms step_avg:98.26ms
step:1115/1695 train_time:109561ms step_avg:98.26ms
step:1116/1695 train_time:109661ms step_avg:98.26ms
step:1117/1695 train_time:109763ms step_avg:98.27ms
step:1118/1695 train_time:109863ms step_avg:98.27ms
step:1119/1695 train_time:109964ms step_avg:98.27ms
step:1120/1695 train_time:110064ms step_avg:98.27ms
step:1121/1695 train_time:110164ms step_avg:98.27ms
step:1122/1695 train_time:110264ms step_avg:98.27ms
step:1123/1695 train_time:110365ms step_avg:98.28ms
step:1124/1695 train_time:110465ms step_avg:98.28ms
step:1125/1695 train_time:110565ms step_avg:98.28ms
step:1125/1695 val_loss:3.4364 train_time:110663ms step_avg:98.37ms
step:1126/1695 train_time:110690ms step_avg:98.30ms
step:1127/1695 train_time:110776ms step_avg:98.29ms
step:1128/1695 train_time:110878ms step_avg:98.30ms
step:1129/1695 train_time:110978ms step_avg:98.30ms
step:1130/1695 train_time:111078ms step_avg:98.30ms
step:1131/1695 train_time:111177ms step_avg:98.30ms
step:1132/1695 train_time:111277ms step_avg:98.30ms
step:1133/1695 train_time:111376ms step_avg:98.30ms
step:1134/1695 train_time:111477ms step_avg:98.30ms
step:1135/1695 train_time:111576ms step_avg:98.30ms
step:1136/1695 train_time:111680ms step_avg:98.31ms
step:1137/1695 train_time:111782ms step_avg:98.31ms
step:1138/1695 train_time:111883ms step_avg:98.32ms
step:1139/1695 train_time:111982ms step_avg:98.32ms
step:1140/1695 train_time:112083ms step_avg:98.32ms
step:1141/1695 train_time:112182ms step_avg:98.32ms
step:1142/1695 train_time:112283ms step_avg:98.32ms
step:1143/1695 train_time:112382ms step_avg:98.32ms
step:1144/1695 train_time:112483ms step_avg:98.32ms
step:1145/1695 train_time:112586ms step_avg:98.33ms
step:1146/1695 train_time:112687ms step_avg:98.33ms
step:1147/1695 train_time:112789ms step_avg:98.33ms
step:1148/1695 train_time:112889ms step_avg:98.34ms
step:1149/1695 train_time:112991ms step_avg:98.34ms
step:1150/1695 train_time:113093ms step_avg:98.34ms
step:1151/1695 train_time:113193ms step_avg:98.34ms
step:1152/1695 train_time:113295ms step_avg:98.35ms
step:1153/1695 train_time:113395ms step_avg:98.35ms
step:1154/1695 train_time:113496ms step_avg:98.35ms
step:1155/1695 train_time:113597ms step_avg:98.35ms
step:1156/1695 train_time:113698ms step_avg:98.35ms
step:1157/1695 train_time:113800ms step_avg:98.36ms
step:1158/1695 train_time:113900ms step_avg:98.36ms
step:1159/1695 train_time:114001ms step_avg:98.36ms
step:1160/1695 train_time:114102ms step_avg:98.36ms
step:1161/1695 train_time:114202ms step_avg:98.36ms
step:1162/1695 train_time:114301ms step_avg:98.37ms
step:1163/1695 train_time:114404ms step_avg:98.37ms
step:1164/1695 train_time:114506ms step_avg:98.37ms
step:1165/1695 train_time:114609ms step_avg:98.38ms
step:1166/1695 train_time:114710ms step_avg:98.38ms
step:1167/1695 train_time:114813ms step_avg:98.38ms
step:1168/1695 train_time:114914ms step_avg:98.39ms
step:1169/1695 train_time:115015ms step_avg:98.39ms
step:1170/1695 train_time:115117ms step_avg:98.39ms
step:1171/1695 train_time:115218ms step_avg:98.39ms
step:1172/1695 train_time:115319ms step_avg:98.40ms
step:1173/1695 train_time:115420ms step_avg:98.40ms
step:1174/1695 train_time:115522ms step_avg:98.40ms
step:1175/1695 train_time:115622ms step_avg:98.40ms
step:1176/1695 train_time:115722ms step_avg:98.40ms
step:1177/1695 train_time:115823ms step_avg:98.41ms
step:1178/1695 train_time:115923ms step_avg:98.41ms
step:1179/1695 train_time:116026ms step_avg:98.41ms
step:1180/1695 train_time:116126ms step_avg:98.41ms
step:1181/1695 train_time:116227ms step_avg:98.41ms
step:1182/1695 train_time:116329ms step_avg:98.42ms
step:1183/1695 train_time:116431ms step_avg:98.42ms
step:1184/1695 train_time:116533ms step_avg:98.42ms
step:1185/1695 train_time:116635ms step_avg:98.43ms
step:1186/1695 train_time:116736ms step_avg:98.43ms
step:1187/1695 train_time:116837ms step_avg:98.43ms
step:1188/1695 train_time:116938ms step_avg:98.43ms
step:1189/1695 train_time:117038ms step_avg:98.43ms
step:1190/1695 train_time:117139ms step_avg:98.44ms
step:1191/1695 train_time:117241ms step_avg:98.44ms
step:1192/1695 train_time:117340ms step_avg:98.44ms
step:1193/1695 train_time:117440ms step_avg:98.44ms
step:1194/1695 train_time:117541ms step_avg:98.44ms
step:1195/1695 train_time:117641ms step_avg:98.44ms
step:1196/1695 train_time:117741ms step_avg:98.45ms
step:1197/1695 train_time:117842ms step_avg:98.45ms
step:1198/1695 train_time:117941ms step_avg:98.45ms
step:1199/1695 train_time:118041ms step_avg:98.45ms
step:1200/1695 train_time:118142ms step_avg:98.45ms
step:1201/1695 train_time:118242ms step_avg:98.45ms
step:1202/1695 train_time:118343ms step_avg:98.46ms
step:1203/1695 train_time:118443ms step_avg:98.46ms
step:1204/1695 train_time:118544ms step_avg:98.46ms
step:1205/1695 train_time:118645ms step_avg:98.46ms
step:1206/1695 train_time:118746ms step_avg:98.46ms
step:1207/1695 train_time:118846ms step_avg:98.46ms
step:1208/1695 train_time:118946ms step_avg:98.47ms
step:1209/1695 train_time:119047ms step_avg:98.47ms
step:1210/1695 train_time:119148ms step_avg:98.47ms
step:1211/1695 train_time:119250ms step_avg:98.47ms
step:1212/1695 train_time:119352ms step_avg:98.48ms
step:1213/1695 train_time:119453ms step_avg:98.48ms
step:1214/1695 train_time:119554ms step_avg:98.48ms
step:1215/1695 train_time:119656ms step_avg:98.48ms
step:1216/1695 train_time:119758ms step_avg:98.49ms
step:1217/1695 train_time:119859ms step_avg:98.49ms
step:1218/1695 train_time:119961ms step_avg:98.49ms
step:1219/1695 train_time:120062ms step_avg:98.49ms
step:1220/1695 train_time:120162ms step_avg:98.49ms
step:1221/1695 train_time:120261ms step_avg:98.49ms
step:1222/1695 train_time:120362ms step_avg:98.50ms
step:1223/1695 train_time:120462ms step_avg:98.50ms
step:1224/1695 train_time:120562ms step_avg:98.50ms
step:1225/1695 train_time:120664ms step_avg:98.50ms
step:1226/1695 train_time:120764ms step_avg:98.50ms
step:1227/1695 train_time:120866ms step_avg:98.50ms
step:1228/1695 train_time:120967ms step_avg:98.51ms
step:1229/1695 train_time:121068ms step_avg:98.51ms
step:1230/1695 train_time:121169ms step_avg:98.51ms
step:1231/1695 train_time:121270ms step_avg:98.51ms
step:1232/1695 train_time:121371ms step_avg:98.52ms
step:1233/1695 train_time:121472ms step_avg:98.52ms
step:1234/1695 train_time:121575ms step_avg:98.52ms
step:1235/1695 train_time:121675ms step_avg:98.52ms
step:1236/1695 train_time:121779ms step_avg:98.53ms
step:1237/1695 train_time:121880ms step_avg:98.53ms
step:1238/1695 train_time:121980ms step_avg:98.53ms
step:1239/1695 train_time:122081ms step_avg:98.53ms
step:1240/1695 train_time:122181ms step_avg:98.53ms
step:1241/1695 train_time:122283ms step_avg:98.54ms
step:1242/1695 train_time:122383ms step_avg:98.54ms
step:1243/1695 train_time:122484ms step_avg:98.54ms
step:1244/1695 train_time:122584ms step_avg:98.54ms
step:1245/1695 train_time:122686ms step_avg:98.54ms
step:1246/1695 train_time:122787ms step_avg:98.54ms
step:1247/1695 train_time:122888ms step_avg:98.55ms
step:1248/1695 train_time:122990ms step_avg:98.55ms
step:1249/1695 train_time:123091ms step_avg:98.55ms
step:1250/1695 train_time:123192ms step_avg:98.55ms
step:1250/1695 val_loss:3.3910 train_time:123290ms step_avg:98.63ms
step:1251/1695 train_time:123319ms step_avg:98.58ms
step:1252/1695 train_time:123407ms step_avg:98.57ms
step:1253/1695 train_time:123508ms step_avg:98.57ms
step:1254/1695 train_time:123608ms step_avg:98.57ms
step:1255/1695 train_time:123708ms step_avg:98.57ms
step:1256/1695 train_time:123808ms step_avg:98.57ms
step:1257/1695 train_time:123907ms step_avg:98.57ms
step:1258/1695 train_time:124007ms step_avg:98.58ms
step:1259/1695 train_time:124107ms step_avg:98.58ms
step:1260/1695 train_time:124206ms step_avg:98.58ms
step:1261/1695 train_time:124308ms step_avg:98.58ms
step:1262/1695 train_time:124411ms step_avg:98.58ms
step:1263/1695 train_time:124513ms step_avg:98.59ms
step:1264/1695 train_time:124614ms step_avg:98.59ms
step:1265/1695 train_time:124715ms step_avg:98.59ms
step:1266/1695 train_time:124816ms step_avg:98.59ms
step:1267/1695 train_time:124917ms step_avg:98.59ms
step:1268/1695 train_time:125019ms step_avg:98.60ms
step:1269/1695 train_time:125120ms step_avg:98.60ms
step:1270/1695 train_time:125221ms step_avg:98.60ms
step:1271/1695 train_time:125324ms step_avg:98.60ms
step:1272/1695 train_time:125424ms step_avg:98.60ms
step:1273/1695 train_time:125525ms step_avg:98.61ms
step:1274/1695 train_time:125625ms step_avg:98.61ms
step:1275/1695 train_time:125726ms step_avg:98.61ms
step:1276/1695 train_time:125827ms step_avg:98.61ms
step:1277/1695 train_time:125927ms step_avg:98.61ms
step:1278/1695 train_time:126027ms step_avg:98.61ms
step:1279/1695 train_time:126127ms step_avg:98.61ms
step:1280/1695 train_time:126228ms step_avg:98.62ms
step:1281/1695 train_time:126330ms step_avg:98.62ms
step:1282/1695 train_time:126432ms step_avg:98.62ms
step:1283/1695 train_time:126535ms step_avg:98.62ms
step:1284/1695 train_time:126637ms step_avg:98.63ms
step:1285/1695 train_time:126737ms step_avg:98.63ms
step:1286/1695 train_time:126838ms step_avg:98.63ms
step:1287/1695 train_time:126939ms step_avg:98.63ms
step:1288/1695 train_time:127040ms step_avg:98.63ms
step:1289/1695 train_time:127141ms step_avg:98.64ms
step:1290/1695 train_time:127243ms step_avg:98.64ms
step:1291/1695 train_time:127344ms step_avg:98.64ms
step:1292/1695 train_time:127446ms step_avg:98.64ms
step:1293/1695 train_time:127546ms step_avg:98.64ms
step:1294/1695 train_time:127648ms step_avg:98.65ms
step:1295/1695 train_time:127749ms step_avg:98.65ms
step:1296/1695 train_time:127848ms step_avg:98.65ms
step:1297/1695 train_time:127948ms step_avg:98.65ms
step:1298/1695 train_time:128049ms step_avg:98.65ms
step:1299/1695 train_time:128151ms step_avg:98.65ms
step:1300/1695 train_time:128253ms step_avg:98.66ms
step:1301/1695 train_time:128355ms step_avg:98.66ms
step:1302/1695 train_time:128457ms step_avg:98.66ms
step:1303/1695 train_time:128559ms step_avg:98.66ms
step:1304/1695 train_time:128660ms step_avg:98.67ms
step:1305/1695 train_time:128761ms step_avg:98.67ms
step:1306/1695 train_time:128862ms step_avg:98.67ms
step:1307/1695 train_time:128963ms step_avg:98.67ms
step:1308/1695 train_time:129064ms step_avg:98.67ms
step:1309/1695 train_time:129164ms step_avg:98.67ms
step:1310/1695 train_time:129265ms step_avg:98.68ms
step:1311/1695 train_time:129366ms step_avg:98.68ms
step:1312/1695 train_time:129466ms step_avg:98.68ms
step:1313/1695 train_time:129567ms step_avg:98.68ms
step:1314/1695 train_time:129667ms step_avg:98.68ms
step:1315/1695 train_time:129768ms step_avg:98.68ms
step:1316/1695 train_time:129869ms step_avg:98.68ms
step:1317/1695 train_time:129969ms step_avg:98.69ms
step:1318/1695 train_time:130069ms step_avg:98.69ms
step:1319/1695 train_time:130170ms step_avg:98.69ms
step:1320/1695 train_time:130271ms step_avg:98.69ms
step:1321/1695 train_time:130373ms step_avg:98.69ms
step:1322/1695 train_time:130475ms step_avg:98.70ms
step:1323/1695 train_time:130576ms step_avg:98.70ms
step:1324/1695 train_time:130677ms step_avg:98.70ms
step:1325/1695 train_time:130778ms step_avg:98.70ms
step:1326/1695 train_time:130880ms step_avg:98.70ms
step:1327/1695 train_time:130981ms step_avg:98.70ms
step:1328/1695 train_time:131082ms step_avg:98.71ms
step:1329/1695 train_time:131183ms step_avg:98.71ms
step:1330/1695 train_time:131284ms step_avg:98.71ms
step:1331/1695 train_time:131385ms step_avg:98.71ms
step:1332/1695 train_time:131486ms step_avg:98.71ms
step:1333/1695 train_time:131588ms step_avg:98.72ms
step:1334/1695 train_time:131688ms step_avg:98.72ms
step:1335/1695 train_time:131787ms step_avg:98.72ms
step:1336/1695 train_time:131889ms step_avg:98.72ms
step:1337/1695 train_time:131989ms step_avg:98.72ms
step:1338/1695 train_time:132090ms step_avg:98.72ms
step:1339/1695 train_time:132192ms step_avg:98.72ms
step:1340/1695 train_time:132293ms step_avg:98.73ms
step:1341/1695 train_time:132394ms step_avg:98.73ms
step:1342/1695 train_time:132496ms step_avg:98.73ms
step:1343/1695 train_time:132597ms step_avg:98.73ms
step:1344/1695 train_time:132697ms step_avg:98.73ms
step:1345/1695 train_time:132799ms step_avg:98.74ms
step:1346/1695 train_time:132901ms step_avg:98.74ms
step:1347/1695 train_time:133001ms step_avg:98.74ms
step:1348/1695 train_time:133103ms step_avg:98.74ms
step:1349/1695 train_time:133204ms step_avg:98.74ms
step:1350/1695 train_time:133305ms step_avg:98.74ms
step:1351/1695 train_time:133405ms step_avg:98.75ms
step:1352/1695 train_time:133506ms step_avg:98.75ms
step:1353/1695 train_time:133606ms step_avg:98.75ms
step:1354/1695 train_time:133705ms step_avg:98.75ms
step:1355/1695 train_time:133805ms step_avg:98.75ms
step:1356/1695 train_time:133905ms step_avg:98.75ms
step:1357/1695 train_time:134006ms step_avg:98.75ms
step:1358/1695 train_time:134106ms step_avg:98.75ms
step:1359/1695 train_time:134206ms step_avg:98.75ms
step:1360/1695 train_time:134307ms step_avg:98.76ms
step:1361/1695 train_time:134409ms step_avg:98.76ms
step:1362/1695 train_time:134509ms step_avg:98.76ms
step:1363/1695 train_time:134610ms step_avg:98.76ms
step:1364/1695 train_time:134712ms step_avg:98.76ms
step:1365/1695 train_time:134813ms step_avg:98.76ms
step:1366/1695 train_time:134915ms step_avg:98.77ms
step:1367/1695 train_time:135015ms step_avg:98.77ms
step:1368/1695 train_time:135116ms step_avg:98.77ms
step:1369/1695 train_time:135217ms step_avg:98.77ms
step:1370/1695 train_time:135317ms step_avg:98.77ms
step:1371/1695 train_time:135418ms step_avg:98.77ms
step:1372/1695 train_time:135520ms step_avg:98.78ms
step:1373/1695 train_time:135622ms step_avg:98.78ms
step:1374/1695 train_time:135723ms step_avg:98.78ms
step:1375/1695 train_time:135825ms step_avg:98.78ms
step:1375/1695 val_loss:3.3517 train_time:135923ms step_avg:98.85ms
step:1376/1695 train_time:135951ms step_avg:98.80ms
step:1377/1695 train_time:136040ms step_avg:98.79ms
step:1378/1695 train_time:136141ms step_avg:98.80ms
step:1379/1695 train_time:136242ms step_avg:98.80ms
step:1380/1695 train_time:136344ms step_avg:98.80ms
step:1381/1695 train_time:136445ms step_avg:98.80ms
step:1382/1695 train_time:136544ms step_avg:98.80ms
step:1383/1695 train_time:136644ms step_avg:98.80ms
step:1384/1695 train_time:136744ms step_avg:98.80ms
step:1385/1695 train_time:136845ms step_avg:98.81ms
step:1386/1695 train_time:136949ms step_avg:98.81ms
step:1387/1695 train_time:137052ms step_avg:98.81ms
step:1388/1695 train_time:137155ms step_avg:98.81ms
step:1389/1695 train_time:137257ms step_avg:98.82ms
step:1390/1695 train_time:137358ms step_avg:98.82ms
step:1391/1695 train_time:137459ms step_avg:98.82ms
step:1392/1695 train_time:137561ms step_avg:98.82ms
step:1393/1695 train_time:137663ms step_avg:98.82ms
step:1394/1695 train_time:137765ms step_avg:98.83ms
step:1395/1695 train_time:137867ms step_avg:98.83ms
step:1396/1695 train_time:137969ms step_avg:98.83ms
step:1397/1695 train_time:138071ms step_avg:98.83ms
step:1398/1695 train_time:138172ms step_avg:98.84ms
step:1399/1695 train_time:138273ms step_avg:98.84ms
step:1400/1695 train_time:138375ms step_avg:98.84ms
step:1401/1695 train_time:138475ms step_avg:98.84ms
step:1402/1695 train_time:138578ms step_avg:98.84ms
step:1403/1695 train_time:138682ms step_avg:98.85ms
step:1404/1695 train_time:138784ms step_avg:98.85ms
step:1405/1695 train_time:138886ms step_avg:98.85ms
step:1406/1695 train_time:138988ms step_avg:98.85ms
step:1407/1695 train_time:139090ms step_avg:98.86ms
step:1408/1695 train_time:139191ms step_avg:98.86ms
step:1409/1695 train_time:139296ms step_avg:98.86ms
step:1410/1695 train_time:139397ms step_avg:98.86ms
step:1411/1695 train_time:139498ms step_avg:98.86ms
step:1412/1695 train_time:139602ms step_avg:98.87ms
step:1413/1695 train_time:139702ms step_avg:98.87ms
step:1414/1695 train_time:139805ms step_avg:98.87ms
step:1415/1695 train_time:139908ms step_avg:98.88ms
step:1416/1695 train_time:140010ms step_avg:98.88ms
step:1417/1695 train_time:140110ms step_avg:98.88ms
step:1418/1695 train_time:140211ms step_avg:98.88ms
step:1419/1695 train_time:140314ms step_avg:98.88ms
step:1420/1695 train_time:140414ms step_avg:98.88ms
step:1421/1695 train_time:140516ms step_avg:98.89ms
step:1422/1695 train_time:140617ms step_avg:98.89ms
step:1423/1695 train_time:140718ms step_avg:98.89ms
step:1424/1695 train_time:140820ms step_avg:98.89ms
step:1425/1695 train_time:140924ms step_avg:98.89ms
step:1426/1695 train_time:141027ms step_avg:98.90ms
step:1427/1695 train_time:141129ms step_avg:98.90ms
step:1428/1695 train_time:141231ms step_avg:98.90ms
step:1429/1695 train_time:141332ms step_avg:98.90ms
step:1430/1695 train_time:141433ms step_avg:98.90ms
step:1431/1695 train_time:141534ms step_avg:98.91ms
step:1432/1695 train_time:141635ms step_avg:98.91ms
step:1433/1695 train_time:141736ms step_avg:98.91ms
step:1434/1695 train_time:141838ms step_avg:98.91ms
step:1435/1695 train_time:141941ms step_avg:98.91ms
step:1436/1695 train_time:142044ms step_avg:98.92ms
step:1437/1695 train_time:142146ms step_avg:98.92ms
step:1438/1695 train_time:142247ms step_avg:98.92ms
step:1439/1695 train_time:142350ms step_avg:98.92ms
step:1440/1695 train_time:142453ms step_avg:98.93ms
step:1441/1695 train_time:142555ms step_avg:98.93ms
step:1442/1695 train_time:142655ms step_avg:98.93ms
step:1443/1695 train_time:142755ms step_avg:98.93ms
step:1444/1695 train_time:142856ms step_avg:98.93ms
step:1445/1695 train_time:142958ms step_avg:98.93ms
step:1446/1695 train_time:143061ms step_avg:98.94ms
step:1447/1695 train_time:143164ms step_avg:98.94ms
step:1448/1695 train_time:143268ms step_avg:98.94ms
step:1449/1695 train_time:143368ms step_avg:98.94ms
step:1450/1695 train_time:143469ms step_avg:98.94ms
step:1451/1695 train_time:143571ms step_avg:98.95ms
step:1452/1695 train_time:143672ms step_avg:98.95ms
step:1453/1695 train_time:143773ms step_avg:98.95ms
step:1454/1695 train_time:143877ms step_avg:98.95ms
step:1455/1695 train_time:143979ms step_avg:98.95ms
step:1456/1695 train_time:144082ms step_avg:98.96ms
step:1457/1695 train_time:144184ms step_avg:98.96ms
step:1458/1695 train_time:144287ms step_avg:98.96ms
step:1459/1695 train_time:144389ms step_avg:98.96ms
step:1460/1695 train_time:144490ms step_avg:98.97ms
step:1461/1695 train_time:144593ms step_avg:98.97ms
step:1462/1695 train_time:144694ms step_avg:98.97ms
step:1463/1695 train_time:144794ms step_avg:98.97ms
step:1464/1695 train_time:144896ms step_avg:98.97ms
step:1465/1695 train_time:144996ms step_avg:98.97ms
step:1466/1695 train_time:145100ms step_avg:98.98ms
step:1467/1695 train_time:145203ms step_avg:98.98ms
step:1468/1695 train_time:145305ms step_avg:98.98ms
step:1469/1695 train_time:145408ms step_avg:98.98ms
step:1470/1695 train_time:145509ms step_avg:98.99ms
step:1471/1695 train_time:145610ms step_avg:98.99ms
step:1472/1695 train_time:145711ms step_avg:98.99ms
step:1473/1695 train_time:145812ms step_avg:98.99ms
step:1474/1695 train_time:145913ms step_avg:98.99ms
step:1475/1695 train_time:146014ms step_avg:98.99ms
step:1476/1695 train_time:146116ms step_avg:98.99ms
step:1477/1695 train_time:146221ms step_avg:99.00ms
step:1478/1695 train_time:146323ms step_avg:99.00ms
step:1479/1695 train_time:146424ms step_avg:99.00ms
step:1480/1695 train_time:146527ms step_avg:99.00ms
step:1481/1695 train_time:146629ms step_avg:99.01ms
step:1482/1695 train_time:146731ms step_avg:99.01ms
step:1483/1695 train_time:146832ms step_avg:99.01ms
step:1484/1695 train_time:146934ms step_avg:99.01ms
step:1485/1695 train_time:147036ms step_avg:99.01ms
step:1486/1695 train_time:147138ms step_avg:99.02ms
step:1487/1695 train_time:147239ms step_avg:99.02ms
step:1488/1695 train_time:147342ms step_avg:99.02ms
step:1489/1695 train_time:147445ms step_avg:99.02ms
step:1490/1695 train_time:147548ms step_avg:99.03ms
step:1491/1695 train_time:147650ms step_avg:99.03ms
step:1492/1695 train_time:147751ms step_avg:99.03ms
step:1493/1695 train_time:147852ms step_avg:99.03ms
step:1494/1695 train_time:147954ms step_avg:99.03ms
step:1495/1695 train_time:148055ms step_avg:99.03ms
step:1496/1695 train_time:148156ms step_avg:99.03ms
step:1497/1695 train_time:148257ms step_avg:99.04ms
step:1498/1695 train_time:148360ms step_avg:99.04ms
step:1499/1695 train_time:148462ms step_avg:99.04ms
step:1500/1695 train_time:148564ms step_avg:99.04ms
step:1500/1695 val_loss:3.3169 train_time:148663ms step_avg:99.11ms
step:1501/1695 train_time:148691ms step_avg:99.06ms
step:1502/1695 train_time:148780ms step_avg:99.05ms
step:1503/1695 train_time:148882ms step_avg:99.06ms
step:1504/1695 train_time:148983ms step_avg:99.06ms
step:1505/1695 train_time:149083ms step_avg:99.06ms
step:1506/1695 train_time:149184ms step_avg:99.06ms
step:1507/1695 train_time:149285ms step_avg:99.06ms
step:1508/1695 train_time:149385ms step_avg:99.06ms
step:1509/1695 train_time:149488ms step_avg:99.06ms
step:1510/1695 train_time:149589ms step_avg:99.07ms
step:1511/1695 train_time:149694ms step_avg:99.07ms
step:1512/1695 train_time:149796ms step_avg:99.07ms
step:1513/1695 train_time:149899ms step_avg:99.07ms
step:1514/1695 train_time:150001ms step_avg:99.08ms
step:1515/1695 train_time:150106ms step_avg:99.08ms
step:1516/1695 train_time:150207ms step_avg:99.08ms
step:1517/1695 train_time:150307ms step_avg:99.08ms
step:1518/1695 train_time:150408ms step_avg:99.08ms
step:1519/1695 train_time:150512ms step_avg:99.09ms
step:1520/1695 train_time:150614ms step_avg:99.09ms
step:1521/1695 train_time:150716ms step_avg:99.09ms
step:1522/1695 train_time:150818ms step_avg:99.09ms
step:1523/1695 train_time:150920ms step_avg:99.09ms
step:1524/1695 train_time:151025ms step_avg:99.10ms
step:1525/1695 train_time:151129ms step_avg:99.10ms
step:1526/1695 train_time:151231ms step_avg:99.10ms
step:1527/1695 train_time:151332ms step_avg:99.10ms
step:1528/1695 train_time:151438ms step_avg:99.11ms
step:1529/1695 train_time:151539ms step_avg:99.11ms
step:1530/1695 train_time:151642ms step_avg:99.11ms
step:1531/1695 train_time:151742ms step_avg:99.11ms
step:1532/1695 train_time:151845ms step_avg:99.12ms
step:1533/1695 train_time:151945ms step_avg:99.12ms
step:1534/1695 train_time:152046ms step_avg:99.12ms
step:1535/1695 train_time:152147ms step_avg:99.12ms
step:1536/1695 train_time:152248ms step_avg:99.12ms
step:1537/1695 train_time:152350ms step_avg:99.12ms
step:1538/1695 train_time:152452ms step_avg:99.12ms
step:1539/1695 train_time:152555ms step_avg:99.13ms
step:1540/1695 train_time:152659ms step_avg:99.13ms
step:1541/1695 train_time:152762ms step_avg:99.13ms
step:1542/1695 train_time:152868ms step_avg:99.14ms
step:1543/1695 train_time:152969ms step_avg:99.14ms
step:1544/1695 train_time:153071ms step_avg:99.14ms
step:1545/1695 train_time:153173ms step_avg:99.14ms
step:1546/1695 train_time:153274ms step_avg:99.14ms
step:1547/1695 train_time:153377ms step_avg:99.14ms
step:1548/1695 train_time:153479ms step_avg:99.15ms
step:1549/1695 train_time:153581ms step_avg:99.15ms
step:1550/1695 train_time:153683ms step_avg:99.15ms
step:1551/1695 train_time:153786ms step_avg:99.15ms
step:1552/1695 train_time:153887ms step_avg:99.15ms
step:1553/1695 train_time:153990ms step_avg:99.16ms
step:1554/1695 train_time:154091ms step_avg:99.16ms
step:1555/1695 train_time:154193ms step_avg:99.16ms
step:1556/1695 train_time:154294ms step_avg:99.16ms
step:1557/1695 train_time:154398ms step_avg:99.16ms
step:1558/1695 train_time:154501ms step_avg:99.17ms
step:1559/1695 train_time:154603ms step_avg:99.17ms
step:1560/1695 train_time:154704ms step_avg:99.17ms
step:1561/1695 train_time:154806ms step_avg:99.17ms
step:1562/1695 train_time:154909ms step_avg:99.17ms
step:1563/1695 train_time:155013ms step_avg:99.18ms
step:1564/1695 train_time:155114ms step_avg:99.18ms
step:1565/1695 train_time:155215ms step_avg:99.18ms
step:1566/1695 train_time:155317ms step_avg:99.18ms
step:1567/1695 train_time:155418ms step_avg:99.18ms
step:1568/1695 train_time:155519ms step_avg:99.18ms
step:1569/1695 train_time:155621ms step_avg:99.19ms
step:1570/1695 train_time:155726ms step_avg:99.19ms
step:1571/1695 train_time:155827ms step_avg:99.19ms
step:1572/1695 train_time:155929ms step_avg:99.19ms
step:1573/1695 train_time:156031ms step_avg:99.19ms
step:1574/1695 train_time:156132ms step_avg:99.19ms
step:1575/1695 train_time:156233ms step_avg:99.20ms
step:1576/1695 train_time:156336ms step_avg:99.20ms
step:1577/1695 train_time:156439ms step_avg:99.20ms
step:1578/1695 train_time:156541ms step_avg:99.20ms
step:1579/1695 train_time:156643ms step_avg:99.20ms
step:1580/1695 train_time:156746ms step_avg:99.21ms
step:1581/1695 train_time:156849ms step_avg:99.21ms
step:1582/1695 train_time:156950ms step_avg:99.21ms
step:1583/1695 train_time:157054ms step_avg:99.21ms
step:1584/1695 train_time:157156ms step_avg:99.21ms
step:1585/1695 train_time:157257ms step_avg:99.22ms
step:1586/1695 train_time:157360ms step_avg:99.22ms
step:1587/1695 train_time:157462ms step_avg:99.22ms
step:1588/1695 train_time:157563ms step_avg:99.22ms
step:1589/1695 train_time:157664ms step_avg:99.22ms
step:1590/1695 train_time:157766ms step_avg:99.22ms
step:1591/1695 train_time:157867ms step_avg:99.23ms
step:1592/1695 train_time:157969ms step_avg:99.23ms
step:1593/1695 train_time:158070ms step_avg:99.23ms
step:1594/1695 train_time:158174ms step_avg:99.23ms
step:1595/1695 train_time:158277ms step_avg:99.23ms
step:1596/1695 train_time:158378ms step_avg:99.23ms
step:1597/1695 train_time:158481ms step_avg:99.24ms
step:1598/1695 train_time:158584ms step_avg:99.24ms
step:1599/1695 train_time:158691ms step_avg:99.24ms
step:1600/1695 train_time:158787ms step_avg:99.24ms
step:1601/1695 train_time:158890ms step_avg:99.24ms
step:1602/1695 train_time:158991ms step_avg:99.25ms
step:1603/1695 train_time:159093ms step_avg:99.25ms
step:1604/1695 train_time:159194ms step_avg:99.25ms
step:1605/1695 train_time:159296ms step_avg:99.25ms
step:1606/1695 train_time:159399ms step_avg:99.25ms
step:1607/1695 train_time:159500ms step_avg:99.25ms
step:1608/1695 train_time:159601ms step_avg:99.25ms
step:1609/1695 train_time:159703ms step_avg:99.26ms
step:1610/1695 train_time:159806ms step_avg:99.26ms
step:1611/1695 train_time:159908ms step_avg:99.26ms
step:1612/1695 train_time:160010ms step_avg:99.26ms
step:1613/1695 train_time:160111ms step_avg:99.26ms
step:1614/1695 train_time:160212ms step_avg:99.26ms
step:1615/1695 train_time:160314ms step_avg:99.27ms
step:1616/1695 train_time:160415ms step_avg:99.27ms
step:1617/1695 train_time:160518ms step_avg:99.27ms
step:1618/1695 train_time:160620ms step_avg:99.27ms
step:1619/1695 train_time:160723ms step_avg:99.27ms
step:1620/1695 train_time:160826ms step_avg:99.28ms
step:1621/1695 train_time:160927ms step_avg:99.28ms
step:1622/1695 train_time:161028ms step_avg:99.28ms
step:1623/1695 train_time:161130ms step_avg:99.28ms
step:1624/1695 train_time:161231ms step_avg:99.28ms
step:1625/1695 train_time:161335ms step_avg:99.28ms
step:1625/1695 val_loss:3.2888 train_time:161435ms step_avg:99.34ms
step:1626/1695 train_time:161464ms step_avg:99.30ms
step:1627/1695 train_time:161550ms step_avg:99.29ms
step:1628/1695 train_time:161655ms step_avg:99.30ms
step:1629/1695 train_time:161757ms step_avg:99.30ms
step:1630/1695 train_time:161859ms step_avg:99.30ms
step:1631/1695 train_time:161961ms step_avg:99.30ms
step:1632/1695 train_time:162062ms step_avg:99.30ms
step:1633/1695 train_time:162162ms step_avg:99.30ms
step:1634/1695 train_time:162265ms step_avg:99.31ms
step:1635/1695 train_time:162367ms step_avg:99.31ms
step:1636/1695 train_time:162470ms step_avg:99.31ms
step:1637/1695 train_time:162574ms step_avg:99.31ms
step:1638/1695 train_time:162677ms step_avg:99.31ms
step:1639/1695 train_time:162779ms step_avg:99.32ms
step:1640/1695 train_time:162881ms step_avg:99.32ms
step:1641/1695 train_time:162984ms step_avg:99.32ms
step:1642/1695 train_time:163085ms step_avg:99.32ms
step:1643/1695 train_time:163187ms step_avg:99.32ms
step:1644/1695 train_time:163293ms step_avg:99.33ms
step:1645/1695 train_time:163393ms step_avg:99.33ms
step:1646/1695 train_time:163496ms step_avg:99.33ms
step:1647/1695 train_time:163601ms step_avg:99.33ms
step:1648/1695 train_time:163704ms step_avg:99.33ms
step:1649/1695 train_time:163807ms step_avg:99.34ms
step:1650/1695 train_time:163910ms step_avg:99.34ms
step:1651/1695 train_time:164012ms step_avg:99.34ms
step:1652/1695 train_time:164115ms step_avg:99.34ms
step:1653/1695 train_time:164219ms step_avg:99.35ms
step:1654/1695 train_time:164321ms step_avg:99.35ms
step:1655/1695 train_time:164423ms step_avg:99.35ms
step:1656/1695 train_time:164525ms step_avg:99.35ms
step:1657/1695 train_time:164627ms step_avg:99.35ms
step:1658/1695 train_time:164730ms step_avg:99.35ms
step:1659/1695 train_time:164836ms step_avg:99.36ms
step:1660/1695 train_time:164938ms step_avg:99.36ms
step:1661/1695 train_time:165042ms step_avg:99.36ms
step:1662/1695 train_time:165147ms step_avg:99.37ms
step:1663/1695 train_time:165249ms step_avg:99.37ms
step:1664/1695 train_time:165351ms step_avg:99.37ms
step:1665/1695 train_time:165456ms step_avg:99.37ms
step:1666/1695 train_time:165560ms step_avg:99.38ms
step:1667/1695 train_time:165661ms step_avg:99.38ms
step:1668/1695 train_time:165766ms step_avg:99.38ms
step:1669/1695 train_time:165871ms step_avg:99.38ms
step:1670/1695 train_time:165973ms step_avg:99.39ms
step:1671/1695 train_time:166077ms step_avg:99.39ms
step:1672/1695 train_time:166181ms step_avg:99.39ms
step:1673/1695 train_time:166282ms step_avg:99.39ms
step:1674/1695 train_time:166383ms step_avg:99.39ms
step:1675/1695 train_time:166486ms step_avg:99.39ms
step:1676/1695 train_time:166594ms step_avg:99.40ms
step:1677/1695 train_time:166695ms step_avg:99.40ms
step:1678/1695 train_time:166798ms step_avg:99.40ms
step:1679/1695 train_time:166901ms step_avg:99.40ms
step:1680/1695 train_time:167002ms step_avg:99.41ms
step:1681/1695 train_time:167105ms step_avg:99.41ms
step:1682/1695 train_time:167213ms step_avg:99.41ms
step:1683/1695 train_time:167315ms step_avg:99.41ms
step:1684/1695 train_time:167419ms step_avg:99.42ms
step:1685/1695 train_time:167522ms step_avg:99.42ms
step:1686/1695 train_time:167624ms step_avg:99.42ms
step:1687/1695 train_time:167726ms step_avg:99.42ms
step:1688/1695 train_time:167829ms step_avg:99.42ms
step:1689/1695 train_time:167931ms step_avg:99.43ms
step:1690/1695 train_time:168033ms step_avg:99.43ms
step:1691/1695 train_time:168136ms step_avg:99.43ms
step:1692/1695 train_time:168238ms step_avg:99.43ms
step:1693/1695 train_time:168341ms step_avg:99.43ms
step:1694/1695 train_time:168444ms step_avg:99.44ms
step:1695/1695 train_time:168548ms step_avg:99.44ms
step:1695/1695 val_loss:3.2760 train_time:168647ms step_avg:99.50ms
peak memory allocated: 34761 MiB reserved: 49140 MiB
