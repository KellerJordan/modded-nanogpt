import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
import uuid
import time
import copy
import glob
from dataclasses import dataclass
from functools import lru_cache
from pathlib import Path

os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "expandable_segments:True"
import torch
torch.empty(1, device="cuda", requires_grad=True).backward() # prevents a bug on some systems
from torch import Tensor, nn
import torch.nn.functional as F
import torch.distributed as dist
# use of FlexAttention contributed by @KoszarskyB
from torch.nn.attention.flex_attention import BlockMask, flex_attention
#torch._inductor.config.coordinate_descent_tuning = True # we have banned this flag for new records because it causes compilation to take 30min
import triton
import triton.language as tl

@dataclass
class Hyperparameters:
    # data
    dampen_factor = 64
    run_id = f'final/{uuid.uuid4()}'
    train_files = "data/fineweb10B/fineweb_train_*.bin" # input .bin to train on
    val_files = "data/fineweb10B/fineweb_val_*.bin" # input .bin to eval validation loss on
    val_tokens = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    train_seq_len = 48*1024 # FlexAttention sequence length
    val_seq_len = 4*64*1024 # FlexAttention sequence length for validation
    # optimization
    num_iterations = 1695 # number of iterations to run
    cooldown_frac = 0.45 # fraction of training spent cooling down the learning rate
    # evaluation and logging
    val_loss_every = 125 # every how many steps to evaluate val loss? 0 for only at the end
    save_checkpoint = False
args = Hyperparameters()

# -----------------------------------------------------------------------------
# Custom operators: FP8 matmul by @YouJiacheng

@torch.library.custom_op("nanogpt::mm", mutates_args=())
def mm_op(x: Tensor, w: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor, Tensor]:
    @torch.compile
    def impl(x: Tensor, w: Tensor):
        assert x.is_contiguous() and w.is_contiguous()
        x_f8 = x.div(x_s).to(torch.float8_e4m3fn)
        w_f8 = w.div(w_s).to(torch.float8_e4m3fn)
        out = torch._scaled_mm(
            x_f8,
            w_f8.T,
            out_dtype=torch.bfloat16,
            scale_a=x.new_tensor(x_s, dtype=torch.float32),
            scale_b=x.new_tensor(w_s, dtype=torch.float32),
            use_fast_accum=True,
        )
        return out, x_f8, w_f8

    return impl(x, w)

@mm_op.register_fake
def _(x: Tensor, w: Tensor, *_):
    assert x.ndim == w.ndim == 2
    assert x.shape[1] == w.shape[1]
    assert x.device == w.device
    assert x.is_contiguous() and w.is_contiguous()
    return x @ w.T, x.to(torch.float8_e4m3fn), w.to(torch.float8_e4m3fn)

@torch.library.custom_op("nanogpt::mm_backward", mutates_args=())
def mm_backward_op(g: Tensor, x_f8: Tensor, w_f8: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor]:
    @torch.compile
    def impl(grad: Tensor, x_f8: Tensor, w_f8: Tensor):
        assert grad.is_contiguous()
        x_inv_s = grad.new_tensor(x_s, dtype=torch.float32)
        w_inv_s = grad.new_tensor(w_s, dtype=torch.float32)
        grad_inv_s = grad.new_tensor(grad_s, dtype=torch.float32)
        grad_f8 = grad.div(grad_s).to(torch.float8_e5m2)
        grad_x = torch._scaled_mm(
            grad_f8,
            w_f8.T.contiguous().T,
            out_dtype=torch.bfloat16,
            scale_a=grad_inv_s,
            scale_b=w_inv_s,
            use_fast_accum=False,
        )
        # faster than grad_f8_t @ x_f8, for (d_out, d_in) == (50304, 768)
        grad_w = torch._scaled_mm(
            x_f8.T.contiguous(),
            grad_f8.T.contiguous().T,
            out_dtype=torch.float32,
            scale_a=x_inv_s,
            scale_b=grad_inv_s,
            use_fast_accum=False,
        ).T
        return grad_x, grad_w

    return impl(g, x_f8, w_f8)

@mm_backward_op.register_fake
def _(g: Tensor, x_f8: Tensor, w_f8: Tensor, *_):
    return x_f8.to(torch.bfloat16), w_f8.T.contiguous().T.to(torch.float32)

def backward(ctx, grad_out: Tensor, *_):
    x_f8, w_f8 = ctx.saved_tensors
    x_s, w_s, grad_s = ctx.scales
    grad_x, grad_w = torch.ops.nanogpt.mm_backward(
        grad_out, x_f8, w_f8, x_s, w_s, grad_s
    )
    return grad_x, grad_w, None, None, None

def setup_context(ctx: torch.autograd.function.FunctionCtx, inputs, output):
    *_, x_s, w_s, grad_s = inputs
    _, x_f8, w_f8 = output
    ctx.save_for_backward(x_f8, w_f8)
    ctx.scales = x_s, w_s, grad_s
    ctx.set_materialize_grads(False)

mm_op.register_autograd(backward, setup_context=setup_context)

# -----------------------------------------------------------------------------
# Triton kernel for symmetric matrix multiplication by @byronxu99

def _get_autotune_configs():
    return [
        triton.Config(
            {
                "BLOCK_SIZE_M": bm,
                "BLOCK_SIZE_N": bn,
                "BLOCK_SIZE_K": bk,
                "GROUP_SIZE_M": 8,
                "LOWER_UPPER": 1,
            },
            num_stages=stages,
            num_warps=warps,
        )
        for bm in [64, 128]
        for bn in [64, 128, 256]
        for bk in [64, 128]
        for stages, warps in [(3, 4), (3, 8), (4, 4)]
        if bm // bn <= 2 and bn // bm <= 2
    ]

@triton.jit
def _pid_to_block(
    pid,
    M,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
):
    # Split output matrix into blocks of size (BLOCK_SIZE_M, BLOCK_SIZE_N)
    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)
    num_pid_n = tl.cdiv(M, BLOCK_SIZE_N)

    # Map PID to a single matrix in batch
    batch_idx = pid // (num_pid_m * num_pid_n)
    pid = pid % (num_pid_m * num_pid_n)

    # Map PID to 2D grid of blocks
    pid_m = pid // num_pid_n
    pid_n = pid % num_pid_n
    pid_m, pid_n = tl.swizzle2d(pid_m, pid_n, num_pid_m, num_pid_n, GROUP_SIZE_M)

    m_idx = pid_m * BLOCK_SIZE_M
    n_idx = pid_n * BLOCK_SIZE_N
    return batch_idx, m_idx, n_idx

@triton.autotune(
    configs=_get_autotune_configs(),
    key=["M", "K", "a_stride_r", "a_stride_c", "c_stride_r", "c_stride_c"],
)
@triton.jit
def ns_line_1_kernel(
    A_ptr, C_ptr,
    M, K,
    a_stride_b, a_stride_r, a_stride_c,
    c_stride_b, c_stride_r, c_stride_c,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    BLOCK_SIZE_K: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
    LOWER_UPPER: tl.constexpr,
):
    pid = tl.program_id(axis=0)
    batch_idx, m_idx, n_idx = _pid_to_block(
        pid, M, BLOCK_SIZE_M, BLOCK_SIZE_N, GROUP_SIZE_M
    )

    # Skip blocks that don't need to be computed
    skip_block_below_diag = (LOWER_UPPER == 0) and (n_idx + BLOCK_SIZE_N <= m_idx)
    skip_block_above_diag = (LOWER_UPPER != 0) and (m_idx + BLOCK_SIZE_M <= n_idx)
    if skip_block_below_diag or skip_block_above_diag:
        return

    # Index into one matrix of batch
    A_ptr += batch_idx * a_stride_b
    C_ptr += batch_idx * c_stride_b

    # Create pointer arrays for A and A.T
    offs_m = (m_idx + tl.arange(0, BLOCK_SIZE_M)) % M
    offs_n = (n_idx + tl.arange(0, BLOCK_SIZE_N)) % M
    offs_k = tl.arange(0, BLOCK_SIZE_K)
    a_ptrs = A_ptr + (offs_m[:, None] * a_stride_r + offs_k[None, :] * a_stride_c)
    at_ptrs = A_ptr + (offs_k[:, None] * a_stride_c + offs_n[None, :] * a_stride_r)

    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)

    # Accumulate over blocks of K
    for k in tl.range(0, tl.cdiv(K, BLOCK_SIZE_K)):
        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k * BLOCK_SIZE_K, other=0.0)
        at = tl.load(at_ptrs, mask=offs_k[:, None] < K - k * BLOCK_SIZE_K, other=0.0)
        accumulator = tl.dot(a, at, accumulator)
        a_ptrs += BLOCK_SIZE_K * a_stride_c
        at_ptrs += BLOCK_SIZE_K * a_stride_c

    out_dtype = C_ptr.dtype.element_ty
    output = accumulator.to(out_dtype)

    # Store block of C
    offs_cm = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_cn = n_idx + tl.arange(0, BLOCK_SIZE_N)
    c_ptrs = C_ptr + (offs_cm[:, None] * c_stride_r + offs_cn[None, :] * c_stride_c)
    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < M)
    tl.store(c_ptrs, output, mask=c_mask)

    # Store block of C mirrored across the diagonal
    c_ptrs_t = C_ptr + (offs_cn[:, None] * c_stride_r + offs_cm[None, :] * c_stride_c)
    c_mask_t = (offs_cn[:, None] < M) & (offs_cm[None, :] < M)
    tl.store(c_ptrs_t, output.T, mask=c_mask_t)

def ns_line_1(A: torch.Tensor, out: torch.Tensor):
    """
    Launch Triton kernel to compute C = A @ A.T
    """
    assert A.ndim == 2 or A.ndim == 3
    M, K = A.shape[-2:]
    assert out.size(-2) == M, "Output matrix has incorrect shape"
    assert out.size(-1) == M, "Output matrix has incorrect shape"

    batch_size = A.size(0) if A.ndim == 3 else 1
    input_batch_stride = A.stride(0) if A.ndim == 3 else 0
    output_batch_stride = out.stride(0) if out.ndim == 3 else 0

    grid = lambda meta: (
        batch_size * triton.cdiv(M, meta["BLOCK_SIZE_M"]) * triton.cdiv(M, meta["BLOCK_SIZE_N"]),
    )
    ns_line_1_kernel[grid](
        A_ptr=A,
        C_ptr=out,
        M=M,
        K=K,
        a_stride_b=input_batch_stride,
        a_stride_r=A.stride(-2),
        a_stride_c=A.stride(-1),
        c_stride_b=output_batch_stride,
        c_stride_r=out.stride(-2),
        c_stride_c=out.stride(-1),
    )
    return out

@triton.autotune(
    configs=_get_autotune_configs(),
    key=["M", "a_stride_r", "a_stride_c", "c_stride_r", "c_stride_c"],
)
@triton.jit
def ns_line_2_kernel(
    A_ptr, C_ptr,
    M,
    a_stride_b, a_stride_r, a_stride_c,
    c_stride_b, c_stride_r, c_stride_c,
    alpha, beta,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    BLOCK_SIZE_K: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
    LOWER_UPPER: tl.constexpr,
):
    # This is mostly duplicated from ns_line_1_kernel, but also loads and adds a block of A
    # Performance is slightly slower than ns_line_1_kernel, so we use two separate kernels
    pid = tl.program_id(axis=0)
    batch_idx, m_idx, n_idx = _pid_to_block(
        pid, M, BLOCK_SIZE_M, BLOCK_SIZE_N, GROUP_SIZE_M
    )

    # Skip blocks that don't need to be computed
    skip_block_below_diag = (LOWER_UPPER == 0) and (n_idx + BLOCK_SIZE_N <= m_idx)
    skip_block_above_diag = (LOWER_UPPER != 0) and (m_idx + BLOCK_SIZE_M <= n_idx)
    if skip_block_below_diag or skip_block_above_diag:
        return

    # Index into one matrix of batch
    A_ptr += batch_idx * a_stride_b
    C_ptr += batch_idx * c_stride_b

    # Create pointer arrays for A and A.T
    offs_m = (m_idx + tl.arange(0, BLOCK_SIZE_M)) % M
    offs_n = (n_idx + tl.arange(0, BLOCK_SIZE_N)) % M
    offs_k = tl.arange(0, BLOCK_SIZE_K)
    a_ptrs = A_ptr + (offs_m[:, None] * a_stride_r + offs_k[None, :] * a_stride_c)
    at_ptrs = A_ptr + (offs_k[:, None] * a_stride_c + offs_n[None, :] * a_stride_r)

    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)

    # Accumulate over blocks of K
    for k in tl.range(0, tl.cdiv(M, BLOCK_SIZE_K)):
        a = tl.load(a_ptrs, mask=offs_k[None, :] < M - k * BLOCK_SIZE_K, other=0.0)
        at = tl.load(at_ptrs, mask=offs_k[:, None] < M - k * BLOCK_SIZE_K, other=0.0)
        accumulator = tl.dot(a, at, accumulator)
        a_ptrs += BLOCK_SIZE_K * a_stride_c
        at_ptrs += BLOCK_SIZE_K * a_stride_c

    # Load block of A to add (corresponds to the current block of C)
    offs_am = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_an = n_idx + tl.arange(0, BLOCK_SIZE_N)
    a_add_ptrs = A_ptr + (offs_am[:, None] * a_stride_r + offs_an[None, :] * a_stride_c)
    a_add_mask = (offs_am[:, None] < M) & (offs_an[None, :] < M)
    a_add = tl.load(a_add_ptrs, mask=a_add_mask, other=0.0).to(tl.float32)

    # Apply alpha and beta
    accumulator *= alpha
    accumulator += a_add * beta

    out_dtype = C_ptr.dtype.element_ty
    output = accumulator.to(out_dtype)

    # Store block of C
    offs_cm = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_cn = n_idx + tl.arange(0, BLOCK_SIZE_N)
    c_ptrs = C_ptr + (offs_cm[:, None] * c_stride_r + offs_cn[None, :] * c_stride_c)
    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < M)
    tl.store(c_ptrs, output, mask=c_mask)

    # Store block of C mirrored across the diagonal
    c_ptrs_t = C_ptr + (offs_cn[:, None] * c_stride_r + offs_cm[None, :] * c_stride_c)
    c_mask_t = (offs_cn[:, None] < M) & (offs_cm[None, :] < M)
    tl.store(c_ptrs_t, output.T, mask=c_mask_t)

def ns_line_2(A: torch.Tensor, alpha: float, beta: float, out: torch.Tensor):
    """
    Launch Triton kernel to compute C = alpha * A @ A.T + beta * A
    """
    assert A.ndim == 2 or A.ndim == 3
    M, K = A.shape[-2:]
    assert M == K, "Input matrix must be square"
    assert out.size(-2) == M
    assert out.size(-1) == M

    batch_size = A.size(0) if A.ndim == 3 else 1
    input_batch_stride = A.stride(0) if A.ndim == 3 else 0
    output_batch_stride = out.stride(0) if out.ndim == 3 else 0

    grid = lambda meta: (
        batch_size * triton.cdiv(M, meta["BLOCK_SIZE_M"]) * triton.cdiv(M, meta["BLOCK_SIZE_N"]),
    )
    ns_line_2_kernel[grid](
        A_ptr=A,
        C_ptr=out,
        M=M,
        a_stride_b=input_batch_stride,
        a_stride_r=A.stride(-2),
        a_stride_c=A.stride(-1),
        c_stride_b=output_batch_stride,
        c_stride_r=out.stride(-2),
        c_stride_c=out.stride(-1),
        alpha=alpha,
        beta=beta,
    )
    return out

@torch.compile(dynamic=False, fullgraph=True) # Must use dynamic=False or else it's much slower
def newton_schulz_triton(G: torch.Tensor):
    a, b, c = (3.4445, -4.7750, 2.0315)
    X = G.bfloat16()
    if G.size(-2) > G.size(-1):
        X = X.mT

    # Ensure spectral norm is at most 1
    X = X / (X.norm(dim=(-2, -1), keepdim=True) + 1e-7)

    # Allocate buffers
    X = X.contiguous()
    A = torch.empty((*X.shape[:-1], X.size(-2)), device=X.device, dtype=X.dtype)
    B = torch.empty_like(A)
    C = torch.empty_like(X)

    ns_line_3 = torch.baddbmm if X.ndim > 2 else torch.addmm

    # Perform the NS iterations
    for _ in range(5):
        ns_line_1(X, out=A)  # A = X @ X.mT
        ns_line_2(A, alpha=c, beta=b, out=B)  # B = b * A + c * A @ A
        ns_line_3(X, B, X, beta=a, out=C)  # C = a * X + B @ X
        X, C = C, X  # Swap references to avoid unnecessary copies

    if G.size(-2) > G.size(-1):
        X = X.mT
    return X

# -----------------------------------------------------------------------------
# Muon optimizer

class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    https://kellerjordan.github.io/posts/muon/

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Warning: This optimizer should not be used for the embedding layer, the final fully connected layer,
    or any {0,1}-D parameters; those should all be optimized by a standard method (e.g., AdamW).
    """
    def __init__(self, params, lr=0.02, weight_decay=0.01, momentum=0.95):
        defaults = dict(lr=lr, weight_decay=weight_decay, momentum=momentum)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)

    @torch.no_grad()
    def step(self):
        # Efficient systems-wise implementation of step developed by @YouJiacheng,
        # @KonstantinWilleke, @alexrgilbert, @adricarda, @tuttyfrutyee, @vdlad,
        # @ryanyang0, and @vagrawal.
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_gather_futures: list[torch.Future] = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            grad = torch.empty_like(params[-1])
            grad_pad = [param.grad for param in params] + [torch.zeros_like(params[-1])] * world_size
            for base_i in range(0, len(params), world_size):
                if base_i + rank < len(params):
                    grad = params[base_i + rank].grad
                # This gives strange dynamo warnings
                reduce_scatter_futures.append(dist.reduce_scatter(grad, grad_pad[base_i:base_i + world_size], op=dist.ReduceOp.AVG, async_op=True).get_future())

        idx = 0
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            params_pad = params + [torch.empty_like(params[-1])] * world_size
            momentum = group["momentum"]
            for base_i in range(0, len(params), world_size):
                reduce_scatter_futures[idx].wait()
                if base_i + rank < len(params):
                    p = params[base_i + rank]
                    grad = p.grad
                    eff_lr = group["lr"] * max(1, p.size(-2) / p.size(-1)) ** 0.5 * getattr(p, "lr_mul", 1.0)
                    eff_weight_decay = group["lr"] * group["weight_decay"] * getattr(p, "wd_mul", 1.0)
                    state = self.state[p]
                    if len(state) == 0:
                        state["momentum_buffer"] = torch.zeros_like(grad)
                    momentum_buffer = state["momentum_buffer"]
                    p.mul_(1 - eff_weight_decay)
                    momentum_buffer.lerp_(grad, 1 - momentum)
                    grad = grad.lerp_(momentum_buffer, momentum)
                    v = newton_schulz_triton(grad)
                    p.add_(other=v, alpha=-eff_lr)
                idx += 1
                all_gather_futures.append(dist.all_gather(params_pad[base_i:base_i + world_size], params_pad[base_i + rank], async_op=True).get_future())
        torch.futures.collect_all(all_gather_futures).wait()

class DistAdam(torch.optim.Optimizer):
    def __init__(self, params, lr: float = 1e-3, betas: tuple[float, float] = (0.9, 0.999), eps: float = 1e-8, weight_decay: float = 0.01):
        defaults = dict(lr=lr, betas=betas, eps=eps, weight_decay=weight_decay)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)
        # DistributedAdam implementation by @vagrawal

    @torch.compile
    @torch.no_grad()
    def step(self):
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_gather_futures: list[torch.Future] = []
        grad_slices = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            grad = torch.empty_like(params[-1])
            for base_i in range(len(params)):
                grad = params[base_i].grad
                rank_size = grad.shape[0] // world_size
                grad_slice = torch.empty_like(grad[:rank_size])
                reduce_scatter_futures.append(dist.reduce_scatter_tensor(grad_slice, grad, op=dist.ReduceOp.AVG, async_op=True).get_future())
                grad_slices.append(grad_slice)

        idx = 0
        for group in self.param_groups:
            beta1, beta2 = group['betas']
            eps = group['eps']
            wd = group['weight_decay']
            params = group['params']
            for base in range(len(params)):
                reduce_scatter_futures[idx].wait()
                p = params[base]
                rank_size = p.shape[0] // world_size
                p_slice = p[rank * rank_size:(rank + 1) * rank_size]
                lr = group['lr'] * getattr(p, "lr_mul", 1.0)
                state = self.state[p]
                g_slice = grad_slices[idx]
                # State init
                if not state:
                    state['step'] = torch.tensor(0, dtype=torch.int64, device=p.device)
                    state['exp_avg'] = torch.zeros_like(p_slice)
                    state['exp_avg_sq'] = torch.zeros_like(p_slice)
                exp_avg = state['exp_avg']
                exp_avg_sq = state['exp_avg_sq']
                state['step'] += 1
                t = state['step']
                # weight decay
                if wd != 0:
                    eff_weight_decay = lr * wd * getattr(p, "wd_mul", 1.0)
                    p_slice.mul_(1 - eff_weight_decay)
                # update running averages
                exp_avg.mul_(beta1).add_(g_slice, alpha=1 - beta1)
                exp_avg_sq.mul_(beta2).addcmul_(g_slice, g_slice, value=1 - beta2)
                # bias corrections
                bias1 = 1 - beta1 ** t
                bias2 = 1 - beta2 ** t
                # compute step
                denom = exp_avg_sq.sqrt().add_(eps)
                step_size = lr * (torch.sqrt(bias2) / bias1)
                update = exp_avg.div(denom).mul_(step_size)
                p_slice.add_(other=update, alpha=-1.0)
                idx += 1
                all_gather_futures.append(dist.all_gather_into_tensor(p, p_slice, async_op=True).get_future())
        torch.futures.collect_all(all_gather_futures).wait()

# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the model

def norm(x: Tensor):
    return F.rms_norm(x, (x.size(-1),))

class CastedLinear(nn.Linear):
    def __init__(self, in_features: int, out_features: int, use_fp8=False, x_s=1.0, w_s=1.0, grad_s=1.0, bias=False):
        super().__init__(in_features, out_features, bias=bias)
        self.use_fp8 = use_fp8
        self.x_s = x_s
        self.w_s = w_s
        self.grad_s = grad_s

    def reset_parameters(self) -> None:
        std = 0.5 * (self.in_features ** -0.5) # 0.5 is a bit better than the default 1/sqrt(3)
        bound = (3 ** 0.5) * std
        with torch.no_grad():
            self.weight.uniform_(-bound, bound)

    def forward(self, x: Tensor):
        if self.use_fp8 and self.training:
            _x = x.flatten(0, -2)
            out: Tensor = torch.ops.nanogpt.mm(_x, self.weight, x_s=self.x_s, w_s=self.w_s, grad_s=self.grad_s)[0]
            return out.reshape(*x.shape[:-1], -1)
        else:
            return F.linear(x, self.weight.type_as(x))

class Rotary(nn.Module):
    def __init__(self, dim: int, max_seq_len: int):
        super().__init__()
        # half-truncate RoPE by @YouJiacheng (w/ base freq tuning)
        angular_freq = (1 / 1024) ** torch.linspace(0, 1, steps=dim//4, dtype=torch.float32)
        angular_freq = torch.cat([angular_freq, angular_freq.new_zeros(dim//4)])
        t = torch.arange(max_seq_len, dtype=torch.float32)
        theta = torch.einsum("i,j -> ij", t, angular_freq)
        self.cos = nn.Buffer(theta.cos(), persistent=False)
        self.sin = nn.Buffer(theta.sin(), persistent=False)

    def forward(self, x_BTHD: Tensor):
        assert self.cos.size(0) >= x_BTHD.size(-3)
        cos, sin = self.cos[None, :x_BTHD.size(-3), None, :], self.sin[None, :x_BTHD.size(-3), None, :]
        x1, x2 = x_BTHD.to(dtype=torch.float32).chunk(2, dim=-1)
        y1 = x1 * cos + x2 * sin
        y2 = x1 * (-sin) + x2 * cos
        return torch.cat((y1, y2), 3).type_as(x_BTHD)

class CausalSelfAttention(nn.Module):
    def __init__(self, dim: int, num_heads: int, max_seq_len: int, head_dim=128):
        super().__init__()
        self.num_heads = num_heads
        self.head_dim = head_dim
        hdim = num_heads * head_dim
        assert hdim == dim, "num_heads * head_dim must equal model_dim"
        std = 0.5 * (dim ** -0.5)
        bound = (3 ** 0.5) * std # improved init scale by @YouJiacheng
        # merged QKV weights: suggested by many, implemented by @fernbear.bsky.social, and further improved by @YouJiacheng
        # https://x.com/hi_tysam/status/1879699187107033311
        self.qkvo_w = nn.Parameter(torch.empty(4, hdim, dim))
        with torch.no_grad():
            self.qkvo_w[:3].uniform_(-bound, bound) # init QKV weights
            self.qkvo_w[3].zero_() # init output weights to zero
        self.rotary = Rotary(head_dim, max_seq_len)
        # scale the attention logits by given constant, instead of the default head_dim**-0.5, by @leloykun
        # inspired by learnable scalars used by @brendanh0gan https://x.com/hi_tysam/status/1879693583898591283
        self.attn_scale = 0.12
        self.dampen = CastedLinear(dim//args.dampen_factor, num_heads)
        self.dampen.weight.detach().zero_()

    def forward(self, x: Tensor, ve: Tensor | None, lambdas: Tensor, block_mask: BlockMask):
        B, T, d_model = x.size(0), x.size(1), x.size(-1) # batch size, sequence length
        assert B == 1, "Must use batch size = 1 for FlexAttention"
        dampen_factor = torch.sigmoid(self.dampen(x[..., :d_model//args.dampen_factor])).view(B, T, self.num_heads, 1)
        q, k, v = F.linear(x, self.qkvo_w[:3].flatten(end_dim=1).type_as(x)).view(B, T, 3 * self.num_heads, self.head_dim).chunk(3, dim=-2)
        q, k = norm(q), norm(k) # QK norm @Grad62304977
        q, k = self.rotary(q), self.rotary(k)
        if ve is not None:
            v = lambdas[0] * v + lambdas[1] * ve.view_as(v) # @KoszarskyB & @Grad62304977
        else: # skip mid-layers token value embeddings by @YouJiacheng
            v = lambdas[0] * v
        y = flex_attention(q.transpose(1, 2), k.transpose(1, 2), v.transpose(1, 2), block_mask=block_mask, scale=0.12).transpose(1, 2)
        y = y.view(B, T, self.num_heads, self.head_dim)
        y = y * dampen_factor
        y = y.contiguous().view(B, T, self.num_heads * self.head_dim) # re-assemble all head outputs side by side
        y = F.linear(y, self.qkvo_w[3].type_as(y))
        return y

class MLP(nn.Module):
    def __init__(self, dim: int):
        super().__init__()
        hdim = 4 * dim
        # make both matrices have the same shape because optimizer sorts params by shape
        # 2 matrices x 12 layers = 24 total, which is divisible by 8 GPU world size
        self.c_fc = nn.Parameter(torch.empty(dim, hdim))
        self.c_proj = nn.Parameter(torch.empty(dim, hdim))
        std = 0.5 * (dim ** -0.5)
        bound = (3 ** 0.5) * std # improved init scale by @YouJiacheng
        with torch.no_grad():
            self.c_fc.uniform_(-bound, bound)
            self.c_proj.zero_() # zero init suggested by @Grad62304977

    def forward(self, x: Tensor):
        x = F.linear(x, self.c_fc.T.type_as(x))
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = F.linear(x, self.c_proj.type_as(x))
        return x

class Block(nn.Module):
    def __init__(self, dim: int, num_heads: int, max_seq_len: int, layer_idx: int):
        super().__init__()
        # skip attention of blocks.7 (the 8th layer) by @YouJiacheng
        self.attn = CausalSelfAttention(dim, num_heads, max_seq_len) if layer_idx != 7 else None
        self.mlp = MLP(dim)

    def forward(self, x: Tensor, ve: Tensor | None, x0: Tensor, lambdas: Tensor, sa_lambdas: Tensor, block_mask: BlockMask):
        x = lambdas[0] * x + lambdas[1] * x0
        if self.attn is not None:
            x = x + self.attn(norm(x), ve, sa_lambdas, block_mask)
        x = x + self.mlp(norm(x))
        return x

# -----------------------------------------------------------------------------
# The main model

def next_multiple_of_n(v: float | int, *, n: int):
    return next(x for x in range(n, int(v) + 1 + n, n) if x >= v)

class GPT(nn.Module):
    def __init__(self, vocab_size: int, num_layers: int, num_heads: int, model_dim: int, max_seq_len: int):
        super().__init__()
        vocab_size = next_multiple_of_n(vocab_size, n=128)
        self.embed = nn.Embedding(vocab_size, model_dim)
        # token value embeddings by @KoszarskyB - inspired by @Grad62304977's value residual implementation following https://arxiv.org/abs/2410.17897
        # value embedding code simplification inspired by @ragulpr https://github.com/KellerJordan/modded-nanogpt/pull/78
        self.value_embeds = nn.ModuleList([nn.Embedding(vocab_size, model_dim) for _ in range(3)])
        self.blocks = nn.ModuleList([Block(model_dim, num_heads, max_seq_len, i) for i in range(num_layers)])
        # there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency.
        # suggested to me by @Grad62304977. this originates from Karpathy's experiments.
        use_fp8 = not os.environ.get("DISABLE_FP8", False)
        self.lm_head = CastedLinear(model_dim, vocab_size, use_fp8=use_fp8, x_s=(model_dim**0.5)/448, w_s=2**-9, grad_s=1/448)
        self.lm_head.weight.detach().zero_() # @Grad62304977
        # Add learnable skip connection weights for decoder layers
        assert num_layers % 2 == 0
        pad = (-num_layers * 5) % dist.get_world_size()
        self.scalars = nn.Parameter(torch.cat([
            torch.ones(num_layers), # skip_weights
            *[torch.tensor([1.0, 0.0]) for _ in range(num_layers)], # block lambdas
            *[torch.tensor([0.5, 0.5]) for _ in range(num_layers)], # SA lambdas
            torch.ones(pad),
        ]))
        # set learning rates
        for param in self.embed.parameters():
            param.lr_mul = 75.
        for param in self.value_embeds.parameters():
            param.lr_mul = 75.
        self.lm_head.weight.lr_mul = 1.0
        self.scalars.lr_mul = 5.0

    def create_blockmasks(self, input_seq: Tensor, sliding_window_num_blocks: Tensor):
        BLOCK_SIZE = 128
        docs = (input_seq == 50256).cumsum(0)
        # increments = (input_seq == 50256) | torch.cat([torch.tensor([False], device="cuda"), input_seq[:-1] == 50256])
        # docs = increments.cumsum(0)

        def document_causal(b, h, q_idx, kv_idx):
            causal_mask = q_idx >= kv_idx
            document_mask = docs[q_idx] == docs[kv_idx]
            return causal_mask & document_mask

        def dense_to_ordered(dense_blockmask: Tensor):
            num_blocks = dense_blockmask.sum(dim=-1, dtype=torch.int32)
            indices = dense_blockmask.argsort(dim=-1, descending=False, stable=True).flip(-1).to(torch.int32)
            return num_blocks[None, None].contiguous(), indices[None, None].contiguous()

        # manual block mask creation by @YouJiacheng
        assert len(input_seq) % BLOCK_SIZE == 0
        NUM_BLOCKS = len(input_seq) // BLOCK_SIZE
        block_idx = torch.arange(NUM_BLOCKS, dtype=torch.int32, device="cuda")
        causal_blockmask_any = block_idx[:, None] >= block_idx
        causal_blockmask_all = block_idx[:, None] > block_idx
        docs_low = docs.view(-1, BLOCK_SIZE)[:, 0].contiguous()
        docs_high = docs.view(-1, BLOCK_SIZE)[:, -1].contiguous()
        document_blockmask_any = (docs_low[:, None] <= docs_high) & (docs_high[:, None] >= docs_low)
        document_blockmask_all = (docs_low[:, None] == docs_high) & (docs_high[:, None] == docs_low)
        blockmask_any = causal_blockmask_any & document_blockmask_any
        blockmask_all = causal_blockmask_all & document_blockmask_all
        partial_kv_num_blocks, partial_kv_indices = dense_to_ordered(blockmask_any & ~blockmask_all)
        full_kv_num_blocks, full_kv_indices = dense_to_ordered(blockmask_all)
        def build_bm(window_size_blocks: Tensor) -> BlockMask:
            return BlockMask.from_kv_blocks(
                torch.clamp_max(partial_kv_num_blocks, torch.clamp_min(window_size_blocks - full_kv_num_blocks, 1)),
                partial_kv_indices,
                torch.clamp_max(full_kv_num_blocks, window_size_blocks - 1),
                full_kv_indices,
                BLOCK_SIZE=BLOCK_SIZE,
                mask_mod=document_causal,
            )
        # Long-short SWA block masks by @leloykun & @YouJiacheng, adapated from suggestion by @Grad62304977, following Gemma 2 paper
        return build_bm(sliding_window_num_blocks), build_bm(sliding_window_num_blocks // 2)

    def forward(self, input_seq: Tensor, target_seq: Tensor, sliding_window_num_blocks: Tensor):
        assert input_seq.ndim == 1

        ve = [value_embed(input_seq) for value_embed in self.value_embeds]
        # 012 ... 012 structure on token value embeddings by @YouJiacheng, improved on @leloykun's U-net structure
        ve = [ve[0], ve[1], ve[2]] + [None] * (len(self.blocks) - 6) + [ve[0], ve[1], ve[2]]
        assert len(ve) == len(self.blocks)

        long_bm, short_bm = self.create_blockmasks(input_seq, sliding_window_num_blocks)
        block_masks = [long_bm, short_bm, short_bm, short_bm, long_bm, short_bm, short_bm, long_bm, short_bm, short_bm, short_bm, long_bm]
        assert len(block_masks) == len(self.blocks)

        x = x0 = norm(self.embed(input_seq)[None]) # use of norm here by @Grad62304977

        # U-net design by @brendanh0gan
        skip_connections = []
        skip_weights = self.scalars[:(len(self.blocks) // 2)]
        lambdas = self.scalars[1 * len(self.blocks): 3 * len(self.blocks)].view(-1, 2)
        sa_lambdas = self.scalars[3 * len(self.blocks): 5 * len(self.blocks)].view(-1, 2)

        n = len(self.blocks) // 2

        for i in range(len(self.blocks)):
            if i >= n:
                x = x + skip_weights[i - n] * skip_connections.pop()
            x = self.blocks[i](x, ve[i], x0, lambdas[i], sa_lambdas[i], block_masks[i])
            if i < n:
                skip_connections.append(x)

        x = norm(x)
        logits = self.lm_head(x).float()
        # @Grad62304977 added tanh softcapping following Gemma 2 paper, @KoszarskyB reduced it from 30 to 15, @YouJiacheng shifted it by +15 (2*sigmoid(2*x)=tanh(x)+1)
        logits = 30 * torch.sigmoid(logits / 7.5)
        loss = F.cross_entropy(logits.view(-1, logits.size(-1)), target_seq, reduction="sum" if self.training else "mean")
        return loss

# -----------------------------------------------------------------------------
# Distributed data loader

def _load_data_shard(file: Path):
    header = torch.from_file(str(file), False, 256, dtype=torch.int32) # header is 256 int32
    assert header[0] == 20240520, "magic number mismatch in the data .bin file"
    assert header[1] == 1, "unsupported version"
    num_tokens = int(header[2]) # number of tokens (claimed)
    with file.open("rb", buffering=0) as f:
        tokens = torch.empty(num_tokens, dtype=torch.uint16, pin_memory=True) # avoid pin_memory copy by @YouJiacheng
        f.seek(256 * 4)
        nbytes = f.readinto(tokens.numpy()) # avoid bytes->array copy by @YouJiacheng
        assert nbytes == 2 * num_tokens, "number of tokens read does not match header"
    return tokens

# find world_size starting indicies, such that each begins with token 50256 and local_batches don't overlap
def find_batch_starts(tokens: Tensor, pos: int, seq_len: int, token_window: int):
    boundary_mask = tokens[pos : pos + token_window] == 50256
    boundary_positions = torch.nonzero(boundary_mask, as_tuple=False).squeeze(-1) + pos
    start = boundary_positions[0].item()
    starts = []
    for i in range(1, len(boundary_positions)):
        end = boundary_positions[i].item() 
        if end - start >= seq_len:
            starts.append(start) # append start once end pos is confirmed
            if len(starts) == dist.get_world_size():
                return starts, end - pos
            start = end
    assert False # increase token_window if necessary

def distributed_data_generator(filename_pattern: str, seq_len: int, grad_accum_steps: int, align_to_bos: bool):
    rank = dist.get_rank()
    world_size = dist.get_world_size()
    batch_size = seq_len * world_size
    files = [Path(file) for file in sorted(glob.glob(filename_pattern))]
    file_iter = iter(files) # use itertools.cycle(files) instead if you want to do multi-epoch training
    tokens, pos = _load_data_shard(next(file_iter)), 0
    while True:
        token_window = grad_accum_steps * (2 * batch_size if align_to_bos else batch_size) # provide buffer to handle samples up to length seq_len
        if pos + token_window + 1 >= len(tokens):
            tokens = _load_data_shard(next(file_iter))
            pos = 0
        for _ in range(grad_accum_steps):
            if align_to_bos:
                batch_starts, tokens_consumed = find_batch_starts(tokens, pos, seq_len, token_window)
                start_idx = batch_starts[rank]
            else:
                tokens_consumed = batch_size
                start_idx = pos + rank * seq_len
            buf = tokens[start_idx:][:seq_len + 1]
            inputs = buf[:-1].to(device="cuda", dtype=torch.int32, non_blocking=True) # no sync on host side;
            targets = buf[1:].to(device="cuda", dtype=torch.int64, non_blocking=True) # H2D in another stream isn't helpful.
            pos += tokens_consumed
            token_window -= tokens_consumed
            yield inputs, targets

# -----------------------------------------------------------------------------
# int main



data_path = os.environ.get("DATA_PATH", ".")
args.train_files = os.path.join(data_path, args.train_files)
args.val_files = os.path.join(data_path, args.val_files)

# torchrun sets these env variables
rank = int(os.environ["RANK"])
world_size = int(os.environ["WORLD_SIZE"])
assert 8 % world_size == 0, "world_size must be a divisor of 8"
grad_accum_steps = 8 // world_size
assert torch.cuda.is_available()
device = torch.device("cuda", int(os.environ["LOCAL_RANK"]))
torch.cuda.set_device(device)
dist.init_process_group(backend="nccl", device_id=device)
dist.barrier()
master_process = (rank == 0) # this process will do logging, checkpointing etc.

# begin logging
logfile = None
if master_process:
    run_id = args.run_id
    os.makedirs("logs", exist_ok=True)
    logfile = f"logs/{run_id}.txt"
    print(logfile)
def print0(s, console=False):
    if master_process:
        with open(logfile, "a") as f:
            if console:
                print(s)
            print(s, file=f)

# begin by printing this file (the Python code)
print0(code)
print0("="*100)
# log information about the hardware/software environment this is running on
print0(f"Running Python {sys.version}")
print0(f"Running PyTorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}")
print0(f"Running Triton version {triton.__version__}")
def nvidia_smi():
    import subprocess  # avoid top level import
    return subprocess.run(["nvidia-smi"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).stdout
print0(nvidia_smi())
print0("="*100)

model: nn.Module = GPT(vocab_size=50257, num_layers=12, num_heads=6, model_dim=768, max_seq_len=max(args.train_seq_len, args.val_seq_len)).cuda()
for m in model.modules():
    if isinstance(m, nn.Embedding):
        m.bfloat16()
for param in model.parameters():
    dist.broadcast(param.detach(), 0)

# collect the parameters to optimize
hidden_matrix_params = [p for n, p in model.blocks.named_parameters() if p.ndim >= 2 and "embed" not in n]
embed_params = [p for n, p in model.named_parameters() if "embed" in n]
scalar_params = [p for p in model.parameters() if p.ndim < 2]
head_params = [model.lm_head.weight]

# init the optimizer(s)
# small adam epsilon by @YouJiacheng. this is an alternate method of fixing the world_size dependence
# discovered by @fernbear.bsky.social https://x.com/hi_tysam/status/1879692937589875094
optimizer1 = DistAdam(scalar_params + head_params + embed_params, lr=0.008, betas=(0.8, 0.95), eps=1e-10, weight_decay=0.0)
optimizer2 = Muon(hidden_matrix_params, lr=0.05, momentum=0.95, weight_decay=0.0)
optimizers = [optimizer1, optimizer2]
for opt in optimizers:
    for group in opt.param_groups:
        group["initial_lr"] = group["lr"]

# learning rate schedule: stable then decay
def get_lr(step: int):
    x = step / args.num_iterations # progress in training
    assert 0 <= x < 1
    if x < 1 - args.cooldown_frac:
        return 1.0
    else:
        w = (1 - x) / args.cooldown_frac
        return w * 1.0 + (1 - w) * 0.1

# attention window size schedule: linearly increase
@lru_cache(1)
def get_window_size_blocks_helper(window_size: int):
    return torch.tensor(window_size // 128, dtype=torch.int32, pin_memory=True).cuda(non_blocking=True)
def get_window_size_blocks(step: int):
    x = step / args.num_iterations # progress in training
    assert 0 <= x <= 1
    # Linearly increase the block-wise sliding window size over training 128 -> 1792
    # increase by @fernbear.bsky.social; block-wise by @YouJiacheng
    window_size = next_multiple_of_n(1728 * x, n=128)
    return get_window_size_blocks_helper(window_size)

model: nn.Module = torch.compile(model, dynamic=False, fullgraph=True)

########################################
#            Warmup kernels            #
########################################

# Warmup the training kernels, then re-initialize the state so we aren't cheating
warmup_steps = 10
initial_state = dict(model=copy.deepcopy(model.state_dict()),
                     optimizers=[copy.deepcopy(opt.state_dict()) for opt in optimizers]) # save the initial state
train_loader = distributed_data_generator(args.train_files, args.train_seq_len, grad_accum_steps, align_to_bos=True)
for _ in range(warmup_steps):
    inputs, targets = next(train_loader)
    model(inputs, targets, get_window_size_blocks(1)).backward()
    for opt in optimizers:
        opt.step()
    model.zero_grad(set_to_none=True)
model.load_state_dict(initial_state["model"])
for opt, opt_state in zip(optimizers, initial_state["optimizers"]):
    opt.load_state_dict(opt_state)
del train_loader, initial_state

########################################
#        Training and validation       #
########################################

train_loader = distributed_data_generator(args.train_files, args.train_seq_len, grad_accum_steps, align_to_bos=True)
training_time_ms = 0
# start the clock
torch.cuda.synchronize()
t0 = time.perf_counter()
# begin training
train_steps = args.num_iterations
for step in range(train_steps + 1):
    last_step = (step == train_steps)

    # --------------- VALIDATION SECTION -----------------
    if last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0):
        # stop the clock
        torch.cuda.synchronize()
        training_time_ms += 1000 * (time.perf_counter() - t0)
        model.eval()
        val_batch_size = world_size * args.val_seq_len
        assert args.val_tokens % val_batch_size == 0
        val_steps = args.val_tokens // val_batch_size
        val_loader = distributed_data_generator(args.val_files, args.val_seq_len, grad_accum_steps, align_to_bos=False)
        val_loss = 0
        with torch.no_grad():
            for _ in range(val_steps):
                inputs, targets = next(val_loader)
                val_loss += model(inputs, targets, get_window_size_blocks(step))
        val_loss /= val_steps
        del val_loader
        dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
        print0(f"step:{step}/{train_steps} val_loss:{val_loss:.4f} train_time:{training_time_ms:.0f}ms step_avg:{training_time_ms/max(step, 1):.2f}ms", console=True)
        model.train()
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.perf_counter()

    if last_step:
        if master_process and args.save_checkpoint:
            log = dict(step=step, code=code, model=model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
            os.makedirs(f"logs/{run_id}", exist_ok=True)
            torch.save(log, f"logs/{run_id}/state_step{step:06d}.pt")
        # the last step only has the validation loop, so break to avoid training
        break

    # --------------- TRAINING SECTION -----------------
    for _ in range(grad_accum_steps):
        inputs, targets = next(train_loader)
        model(inputs, targets, get_window_size_blocks(step)).backward()
    # set optimization hyperparameters
    for opt in optimizers:
        for group in opt.param_groups:
            group["lr"] = group["initial_lr"] * get_lr(step)
    for group in optimizer2.param_groups:
        frac = min(step / 300, 1) # momentum warmup for muon
        group["momentum"] = (1 - frac) * 0.85 + frac * 0.95
    # step the optimizers
    for opt in optimizers:
        opt.step()
    # null the gradients
    model.zero_grad(set_to_none=True)
    # logging
    approx_training_time_ms = training_time_ms + 1000 * (time.perf_counter() - t0)
    print0(f"step:{step+1}/{train_steps} train_time:{approx_training_time_ms:.0f}ms step_avg:{approx_training_time_ms/(step + 1):.2f}ms", console=True)

print0(f"peak memory allocated: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB "
       f"reserved: {torch.cuda.max_memory_reserved() // 1024 // 1024} MiB", console=True)
dist.destroy_process_group()
====================================================================================================
Running Python 3.10.12 (main, May 27 2025, 17:12:29) [GCC 11.4.0]
Running PyTorch 2.9.0.dev20250713+cu126 compiled for CUDA 12.6
Running Triton version 3.4.0
Sat Aug 23 13:04:05 2025       
+-----------------------------------------------------------------------------------------+
| NVIDIA-SMI 570.148.08             Driver Version: 570.148.08     CUDA Version: 12.8     |
|-----------------------------------------+------------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |
|                                         |                        |               MIG M. |
|=========================================+========================+======================|
|   0  NVIDIA H100 80GB HBM3          On  |   00000000:61:00.0 Off |                    0 |
| N/A   27C    P0            117W /  700W |    5858MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  |   00000000:62:00.0 Off |                    0 |
| N/A   29C    P0            116W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  |   00000000:63:00.0 Off |                    0 |
| N/A   30C    P0            118W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  |   00000000:64:00.0 Off |                    0 |
| N/A   26C    P0            112W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  |   00000000:6A:00.0 Off |                    0 |
| N/A   27C    P0            116W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  |   00000000:6B:00.0 Off |                    0 |
| N/A   29C    P0            115W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  |   00000000:6C:00.0 Off |                    0 |
| N/A   29C    P0            115W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  |   00000000:6D:00.0 Off |                    0 |
| N/A   30C    P0            116W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
                                                                                         
+-----------------------------------------------------------------------------------------+
| Processes:                                                                              |
|  GPU   GI   CI              PID   Type   Process name                        GPU Memory |
|        ID   ID                                                               Usage      |
|=========================================================================================|
|    0   N/A  N/A          293658      C   /usr/bin/python3                       1510MiB |
|    0   N/A  N/A          293659      C   /usr/bin/python3                        614MiB |
|    0   N/A  N/A          293660      C   /usr/bin/python3                        614MiB |
|    0   N/A  N/A          293661      C   /usr/bin/python3                        614MiB |
|    0   N/A  N/A          293662      C   /usr/bin/python3                        614MiB |
|    0   N/A  N/A          293663      C   /usr/bin/python3                        614MiB |
|    0   N/A  N/A          293664      C   /usr/bin/python3                        614MiB |
|    0   N/A  N/A          293665      C   /usr/bin/python3                        614MiB |
|    1   N/A  N/A          293659      C   /usr/bin/python3                       1510MiB |
|    2   N/A  N/A          293660      C   /usr/bin/python3                       1510MiB |
|    3   N/A  N/A          293661      C   /usr/bin/python3                       1510MiB |
|    4   N/A  N/A          293662      C   /usr/bin/python3                       1510MiB |
|    5   N/A  N/A          293663      C   /usr/bin/python3                       1510MiB |
|    6   N/A  N/A          293664      C   /usr/bin/python3                       1510MiB |
|    7   N/A  N/A          293665      C   /usr/bin/python3                       1510MiB |
+-----------------------------------------------------------------------------------------+

====================================================================================================
step:0/1695 val_loss:10.8258 train_time:0ms step_avg:0.03ms
step:1/1695 train_time:148ms step_avg:148.13ms
step:2/1695 train_time:174ms step_avg:86.81ms
step:3/1695 train_time:245ms step_avg:81.60ms
step:4/1695 train_time:336ms step_avg:84.10ms
step:5/1695 train_time:429ms step_avg:85.81ms
step:6/1695 train_time:522ms step_avg:86.96ms
step:7/1695 train_time:615ms step_avg:87.92ms
step:8/1695 train_time:708ms step_avg:88.55ms
step:9/1695 train_time:801ms step_avg:89.03ms
step:10/1695 train_time:894ms step_avg:89.41ms
step:11/1695 train_time:988ms step_avg:89.80ms
step:12/1695 train_time:1081ms step_avg:90.12ms
step:13/1695 train_time:1177ms step_avg:90.54ms
step:14/1695 train_time:1271ms step_avg:90.81ms
step:15/1695 train_time:1365ms step_avg:91.01ms
step:16/1695 train_time:1459ms step_avg:91.18ms
step:17/1695 train_time:1552ms step_avg:91.28ms
step:18/1695 train_time:1645ms step_avg:91.37ms
step:19/1695 train_time:1738ms step_avg:91.46ms
step:20/1695 train_time:1831ms step_avg:91.54ms
step:21/1695 train_time:1924ms step_avg:91.63ms
step:22/1695 train_time:2017ms step_avg:91.70ms
step:23/1695 train_time:2111ms step_avg:91.80ms
step:24/1695 train_time:2207ms step_avg:91.94ms
step:25/1695 train_time:2301ms step_avg:92.06ms
step:26/1695 train_time:2396ms step_avg:92.15ms
step:27/1695 train_time:2489ms step_avg:92.20ms
step:28/1695 train_time:2583ms step_avg:92.26ms
step:29/1695 train_time:2677ms step_avg:92.32ms
step:30/1695 train_time:2770ms step_avg:92.33ms
step:31/1695 train_time:2863ms step_avg:92.36ms
step:32/1695 train_time:2956ms step_avg:92.38ms
step:33/1695 train_time:3050ms step_avg:92.42ms
step:34/1695 train_time:3144ms step_avg:92.47ms
step:35/1695 train_time:3238ms step_avg:92.53ms
step:36/1695 train_time:3332ms step_avg:92.56ms
step:37/1695 train_time:3427ms step_avg:92.61ms
step:38/1695 train_time:3520ms step_avg:92.64ms
step:39/1695 train_time:3613ms step_avg:92.65ms
step:40/1695 train_time:3706ms step_avg:92.66ms
step:41/1695 train_time:3800ms step_avg:92.67ms
step:42/1695 train_time:3893ms step_avg:92.69ms
step:43/1695 train_time:3986ms step_avg:92.69ms
step:44/1695 train_time:4080ms step_avg:92.72ms
step:45/1695 train_time:4173ms step_avg:92.72ms
step:46/1695 train_time:4268ms step_avg:92.77ms
step:47/1695 train_time:4361ms step_avg:92.79ms
step:48/1695 train_time:4455ms step_avg:92.81ms
step:49/1695 train_time:4549ms step_avg:92.83ms
step:50/1695 train_time:4643ms step_avg:92.86ms
step:51/1695 train_time:4737ms step_avg:92.89ms
step:52/1695 train_time:4830ms step_avg:92.89ms
step:53/1695 train_time:4924ms step_avg:92.91ms
step:54/1695 train_time:5017ms step_avg:92.91ms
step:55/1695 train_time:5110ms step_avg:92.91ms
step:56/1695 train_time:5204ms step_avg:92.93ms
step:57/1695 train_time:5297ms step_avg:92.93ms
step:58/1695 train_time:5390ms step_avg:92.94ms
step:59/1695 train_time:5485ms step_avg:92.96ms
step:60/1695 train_time:5578ms step_avg:92.97ms
step:61/1695 train_time:5672ms step_avg:92.98ms
step:62/1695 train_time:5766ms step_avg:93.00ms
step:63/1695 train_time:5859ms step_avg:93.00ms
step:64/1695 train_time:5952ms step_avg:93.01ms
step:65/1695 train_time:6046ms step_avg:93.02ms
step:66/1695 train_time:6140ms step_avg:93.04ms
step:67/1695 train_time:6234ms step_avg:93.04ms
step:68/1695 train_time:6328ms step_avg:93.05ms
step:69/1695 train_time:6421ms step_avg:93.06ms
step:70/1695 train_time:6514ms step_avg:93.06ms
step:71/1695 train_time:6608ms step_avg:93.07ms
step:72/1695 train_time:6702ms step_avg:93.09ms
step:73/1695 train_time:6797ms step_avg:93.11ms
step:74/1695 train_time:6889ms step_avg:93.10ms
step:75/1695 train_time:6982ms step_avg:93.10ms
step:76/1695 train_time:7077ms step_avg:93.11ms
step:77/1695 train_time:7170ms step_avg:93.11ms
step:78/1695 train_time:7264ms step_avg:93.12ms
step:79/1695 train_time:7356ms step_avg:93.12ms
step:80/1695 train_time:7450ms step_avg:93.12ms
step:81/1695 train_time:7543ms step_avg:93.13ms
step:82/1695 train_time:7637ms step_avg:93.13ms
step:83/1695 train_time:7730ms step_avg:93.14ms
step:84/1695 train_time:7824ms step_avg:93.15ms
step:85/1695 train_time:7918ms step_avg:93.15ms
step:86/1695 train_time:8011ms step_avg:93.15ms
step:87/1695 train_time:8104ms step_avg:93.15ms
step:88/1695 train_time:8198ms step_avg:93.16ms
step:89/1695 train_time:8291ms step_avg:93.16ms
step:90/1695 train_time:8385ms step_avg:93.17ms
step:91/1695 train_time:8479ms step_avg:93.17ms
step:92/1695 train_time:8571ms step_avg:93.17ms
step:93/1695 train_time:8665ms step_avg:93.17ms
step:94/1695 train_time:8758ms step_avg:93.17ms
step:95/1695 train_time:8852ms step_avg:93.17ms
step:96/1695 train_time:8946ms step_avg:93.18ms
step:97/1695 train_time:9039ms step_avg:93.19ms
step:98/1695 train_time:9133ms step_avg:93.19ms
step:99/1695 train_time:9227ms step_avg:93.20ms
step:100/1695 train_time:9321ms step_avg:93.21ms
step:101/1695 train_time:9414ms step_avg:93.21ms
step:102/1695 train_time:9507ms step_avg:93.21ms
step:103/1695 train_time:9602ms step_avg:93.22ms
step:104/1695 train_time:9694ms step_avg:93.21ms
step:105/1695 train_time:9788ms step_avg:93.22ms
step:106/1695 train_time:9882ms step_avg:93.23ms
step:107/1695 train_time:9976ms step_avg:93.23ms
step:108/1695 train_time:10070ms step_avg:93.24ms
step:109/1695 train_time:10164ms step_avg:93.25ms
step:110/1695 train_time:10258ms step_avg:93.26ms
step:111/1695 train_time:10351ms step_avg:93.25ms
step:112/1695 train_time:10445ms step_avg:93.26ms
step:113/1695 train_time:10538ms step_avg:93.26ms
step:114/1695 train_time:10631ms step_avg:93.26ms
step:115/1695 train_time:10724ms step_avg:93.26ms
step:116/1695 train_time:10818ms step_avg:93.26ms
step:117/1695 train_time:10912ms step_avg:93.26ms
step:118/1695 train_time:11005ms step_avg:93.27ms
step:119/1695 train_time:11098ms step_avg:93.26ms
step:120/1695 train_time:11191ms step_avg:93.26ms
step:121/1695 train_time:11285ms step_avg:93.27ms
step:122/1695 train_time:11379ms step_avg:93.27ms
step:123/1695 train_time:11472ms step_avg:93.27ms
step:124/1695 train_time:11566ms step_avg:93.27ms
step:125/1695 train_time:11659ms step_avg:93.27ms
step:125/1695 val_loss:4.6123 train_time:11750ms step_avg:94.00ms
step:126/1695 train_time:11777ms step_avg:93.47ms
step:127/1695 train_time:11853ms step_avg:93.33ms
step:128/1695 train_time:11958ms step_avg:93.42ms
step:129/1695 train_time:12053ms step_avg:93.43ms
step:130/1695 train_time:12147ms step_avg:93.44ms
step:131/1695 train_time:12240ms step_avg:93.43ms
step:132/1695 train_time:12333ms step_avg:93.43ms
step:133/1695 train_time:12426ms step_avg:93.43ms
step:134/1695 train_time:12519ms step_avg:93.42ms
step:135/1695 train_time:12612ms step_avg:93.42ms
step:136/1695 train_time:12705ms step_avg:93.42ms
step:137/1695 train_time:12799ms step_avg:93.42ms
step:138/1695 train_time:12894ms step_avg:93.44ms
step:139/1695 train_time:12990ms step_avg:93.45ms
step:140/1695 train_time:13085ms step_avg:93.46ms
step:141/1695 train_time:13179ms step_avg:93.47ms
step:142/1695 train_time:13273ms step_avg:93.47ms
step:143/1695 train_time:13367ms step_avg:93.47ms
step:144/1695 train_time:13460ms step_avg:93.47ms
step:145/1695 train_time:13554ms step_avg:93.48ms
step:146/1695 train_time:13647ms step_avg:93.47ms
step:147/1695 train_time:13741ms step_avg:93.48ms
step:148/1695 train_time:13835ms step_avg:93.48ms
step:149/1695 train_time:13929ms step_avg:93.48ms
step:150/1695 train_time:14023ms step_avg:93.49ms
step:151/1695 train_time:14118ms step_avg:93.50ms
step:152/1695 train_time:14212ms step_avg:93.50ms
step:153/1695 train_time:14306ms step_avg:93.50ms
step:154/1695 train_time:14400ms step_avg:93.51ms
step:155/1695 train_time:14494ms step_avg:93.51ms
step:156/1695 train_time:14587ms step_avg:93.51ms
step:157/1695 train_time:14681ms step_avg:93.51ms
step:158/1695 train_time:14775ms step_avg:93.51ms
step:159/1695 train_time:14869ms step_avg:93.52ms
step:160/1695 train_time:14963ms step_avg:93.52ms
step:161/1695 train_time:15057ms step_avg:93.52ms
step:162/1695 train_time:15151ms step_avg:93.53ms
step:163/1695 train_time:15246ms step_avg:93.53ms
step:164/1695 train_time:15340ms step_avg:93.53ms
step:165/1695 train_time:15434ms step_avg:93.54ms
step:166/1695 train_time:15528ms step_avg:93.54ms
step:167/1695 train_time:15622ms step_avg:93.54ms
step:168/1695 train_time:15716ms step_avg:93.55ms
step:169/1695 train_time:15809ms step_avg:93.55ms
step:170/1695 train_time:15904ms step_avg:93.55ms
step:171/1695 train_time:15998ms step_avg:93.55ms
step:172/1695 train_time:16093ms step_avg:93.56ms
step:173/1695 train_time:16186ms step_avg:93.56ms
step:174/1695 train_time:16279ms step_avg:93.56ms
step:175/1695 train_time:16373ms step_avg:93.56ms
step:176/1695 train_time:16467ms step_avg:93.56ms
step:177/1695 train_time:16561ms step_avg:93.56ms
step:178/1695 train_time:16655ms step_avg:93.57ms
step:179/1695 train_time:16749ms step_avg:93.57ms
step:180/1695 train_time:16842ms step_avg:93.57ms
step:181/1695 train_time:16937ms step_avg:93.57ms
step:182/1695 train_time:17030ms step_avg:93.57ms
step:183/1695 train_time:17124ms step_avg:93.58ms
step:184/1695 train_time:17219ms step_avg:93.58ms
step:185/1695 train_time:17313ms step_avg:93.58ms
step:186/1695 train_time:17407ms step_avg:93.58ms
step:187/1695 train_time:17500ms step_avg:93.58ms
step:188/1695 train_time:17594ms step_avg:93.58ms
step:189/1695 train_time:17688ms step_avg:93.59ms
step:190/1695 train_time:17781ms step_avg:93.59ms
step:191/1695 train_time:17876ms step_avg:93.59ms
step:192/1695 train_time:17971ms step_avg:93.60ms
step:193/1695 train_time:18065ms step_avg:93.60ms
step:194/1695 train_time:18159ms step_avg:93.60ms
step:195/1695 train_time:18252ms step_avg:93.60ms
step:196/1695 train_time:18347ms step_avg:93.61ms
step:197/1695 train_time:18442ms step_avg:93.61ms
step:198/1695 train_time:18536ms step_avg:93.62ms
step:199/1695 train_time:18630ms step_avg:93.62ms
step:200/1695 train_time:18723ms step_avg:93.62ms
step:201/1695 train_time:18818ms step_avg:93.62ms
step:202/1695 train_time:18912ms step_avg:93.62ms
step:203/1695 train_time:19005ms step_avg:93.62ms
step:204/1695 train_time:19099ms step_avg:93.62ms
step:205/1695 train_time:19193ms step_avg:93.63ms
step:206/1695 train_time:19288ms step_avg:93.63ms
step:207/1695 train_time:19382ms step_avg:93.63ms
step:208/1695 train_time:19476ms step_avg:93.63ms
step:209/1695 train_time:19570ms step_avg:93.63ms
step:210/1695 train_time:19664ms step_avg:93.64ms
step:211/1695 train_time:19758ms step_avg:93.64ms
step:212/1695 train_time:19851ms step_avg:93.64ms
step:213/1695 train_time:19945ms step_avg:93.64ms
step:214/1695 train_time:20040ms step_avg:93.64ms
step:215/1695 train_time:20134ms step_avg:93.65ms
step:216/1695 train_time:20227ms step_avg:93.65ms
step:217/1695 train_time:20321ms step_avg:93.65ms
step:218/1695 train_time:20415ms step_avg:93.65ms
step:219/1695 train_time:20509ms step_avg:93.65ms
step:220/1695 train_time:20603ms step_avg:93.65ms
step:221/1695 train_time:20697ms step_avg:93.65ms
step:222/1695 train_time:20791ms step_avg:93.65ms
step:223/1695 train_time:20884ms step_avg:93.65ms
step:224/1695 train_time:20979ms step_avg:93.66ms
step:225/1695 train_time:21073ms step_avg:93.66ms
step:226/1695 train_time:21167ms step_avg:93.66ms
step:227/1695 train_time:21261ms step_avg:93.66ms
step:228/1695 train_time:21355ms step_avg:93.66ms
step:229/1695 train_time:21449ms step_avg:93.67ms
step:230/1695 train_time:21543ms step_avg:93.67ms
step:231/1695 train_time:21637ms step_avg:93.67ms
step:232/1695 train_time:21731ms step_avg:93.67ms
step:233/1695 train_time:21824ms step_avg:93.67ms
step:234/1695 train_time:21918ms step_avg:93.67ms
step:235/1695 train_time:22012ms step_avg:93.67ms
step:236/1695 train_time:22105ms step_avg:93.67ms
step:237/1695 train_time:22199ms step_avg:93.67ms
step:238/1695 train_time:22293ms step_avg:93.67ms
step:239/1695 train_time:22387ms step_avg:93.67ms
step:240/1695 train_time:22482ms step_avg:93.67ms
step:241/1695 train_time:22575ms step_avg:93.67ms
step:242/1695 train_time:22669ms step_avg:93.67ms
step:243/1695 train_time:22763ms step_avg:93.68ms
step:244/1695 train_time:22857ms step_avg:93.68ms
step:245/1695 train_time:22951ms step_avg:93.68ms
step:246/1695 train_time:23046ms step_avg:93.68ms
step:247/1695 train_time:23138ms step_avg:93.68ms
step:248/1695 train_time:23232ms step_avg:93.68ms
step:249/1695 train_time:23326ms step_avg:93.68ms
step:250/1695 train_time:23419ms step_avg:93.68ms
step:250/1695 val_loss:4.0789 train_time:23511ms step_avg:94.04ms
step:251/1695 train_time:23539ms step_avg:93.78ms
step:252/1695 train_time:23617ms step_avg:93.72ms
step:253/1695 train_time:23717ms step_avg:93.74ms
step:254/1695 train_time:23813ms step_avg:93.75ms
step:255/1695 train_time:23907ms step_avg:93.75ms
step:256/1695 train_time:24000ms step_avg:93.75ms
step:257/1695 train_time:24094ms step_avg:93.75ms
step:258/1695 train_time:24188ms step_avg:93.75ms
step:259/1695 train_time:24282ms step_avg:93.75ms
step:260/1695 train_time:24376ms step_avg:93.75ms
step:261/1695 train_time:24469ms step_avg:93.75ms
step:262/1695 train_time:24564ms step_avg:93.75ms
step:263/1695 train_time:24660ms step_avg:93.76ms
step:264/1695 train_time:24756ms step_avg:93.77ms
step:265/1695 train_time:24852ms step_avg:93.78ms
step:266/1695 train_time:24946ms step_avg:93.78ms
step:267/1695 train_time:25040ms step_avg:93.78ms
step:268/1695 train_time:25135ms step_avg:93.79ms
step:269/1695 train_time:25229ms step_avg:93.79ms
step:270/1695 train_time:25323ms step_avg:93.79ms
step:271/1695 train_time:25417ms step_avg:93.79ms
step:272/1695 train_time:25510ms step_avg:93.79ms
step:273/1695 train_time:25605ms step_avg:93.79ms
step:274/1695 train_time:25700ms step_avg:93.80ms
step:275/1695 train_time:25796ms step_avg:93.80ms
step:276/1695 train_time:25890ms step_avg:93.80ms
step:277/1695 train_time:25984ms step_avg:93.81ms
step:278/1695 train_time:26079ms step_avg:93.81ms
step:279/1695 train_time:26173ms step_avg:93.81ms
step:280/1695 train_time:26267ms step_avg:93.81ms
step:281/1695 train_time:26361ms step_avg:93.81ms
step:282/1695 train_time:26454ms step_avg:93.81ms
step:283/1695 train_time:26548ms step_avg:93.81ms
step:284/1695 train_time:26643ms step_avg:93.81ms
step:285/1695 train_time:26740ms step_avg:93.82ms
step:286/1695 train_time:26835ms step_avg:93.83ms
step:287/1695 train_time:26930ms step_avg:93.83ms
step:288/1695 train_time:27024ms step_avg:93.83ms
step:289/1695 train_time:27119ms step_avg:93.84ms
step:290/1695 train_time:27214ms step_avg:93.84ms
step:291/1695 train_time:27307ms step_avg:93.84ms
step:292/1695 train_time:27401ms step_avg:93.84ms
step:293/1695 train_time:27496ms step_avg:93.84ms
step:294/1695 train_time:27590ms step_avg:93.84ms
step:295/1695 train_time:27685ms step_avg:93.85ms
step:296/1695 train_time:27779ms step_avg:93.85ms
step:297/1695 train_time:27875ms step_avg:93.85ms
step:298/1695 train_time:27969ms step_avg:93.86ms
step:299/1695 train_time:28064ms step_avg:93.86ms
step:300/1695 train_time:28158ms step_avg:93.86ms
step:301/1695 train_time:28253ms step_avg:93.86ms
step:302/1695 train_time:28347ms step_avg:93.86ms
step:303/1695 train_time:28441ms step_avg:93.86ms
step:304/1695 train_time:28535ms step_avg:93.87ms
step:305/1695 train_time:28630ms step_avg:93.87ms
step:306/1695 train_time:28724ms step_avg:93.87ms
step:307/1695 train_time:28819ms step_avg:93.87ms
step:308/1695 train_time:28915ms step_avg:93.88ms
step:309/1695 train_time:29010ms step_avg:93.88ms
step:310/1695 train_time:29104ms step_avg:93.88ms
step:311/1695 train_time:29199ms step_avg:93.89ms
step:312/1695 train_time:29294ms step_avg:93.89ms
step:313/1695 train_time:29388ms step_avg:93.89ms
step:314/1695 train_time:29482ms step_avg:93.89ms
step:315/1695 train_time:29576ms step_avg:93.89ms
step:316/1695 train_time:29670ms step_avg:93.89ms
step:317/1695 train_time:29765ms step_avg:93.89ms
step:318/1695 train_time:29860ms step_avg:93.90ms
step:319/1695 train_time:29955ms step_avg:93.90ms
step:320/1695 train_time:30049ms step_avg:93.90ms
step:321/1695 train_time:30144ms step_avg:93.91ms
step:322/1695 train_time:30239ms step_avg:93.91ms
step:323/1695 train_time:30333ms step_avg:93.91ms
step:324/1695 train_time:30427ms step_avg:93.91ms
step:325/1695 train_time:30522ms step_avg:93.91ms
step:326/1695 train_time:30617ms step_avg:93.92ms
step:327/1695 train_time:30712ms step_avg:93.92ms
step:328/1695 train_time:30806ms step_avg:93.92ms
step:329/1695 train_time:30901ms step_avg:93.92ms
step:330/1695 train_time:30996ms step_avg:93.93ms
step:331/1695 train_time:31091ms step_avg:93.93ms
step:332/1695 train_time:31186ms step_avg:93.93ms
step:333/1695 train_time:31280ms step_avg:93.93ms
step:334/1695 train_time:31374ms step_avg:93.93ms
step:335/1695 train_time:31468ms step_avg:93.93ms
step:336/1695 train_time:31562ms step_avg:93.94ms
step:337/1695 train_time:31657ms step_avg:93.94ms
step:338/1695 train_time:31752ms step_avg:93.94ms
step:339/1695 train_time:31846ms step_avg:93.94ms
step:340/1695 train_time:31940ms step_avg:93.94ms
step:341/1695 train_time:32035ms step_avg:93.94ms
step:342/1695 train_time:32129ms step_avg:93.94ms
step:343/1695 train_time:32224ms step_avg:93.95ms
step:344/1695 train_time:32318ms step_avg:93.95ms
step:345/1695 train_time:32413ms step_avg:93.95ms
step:346/1695 train_time:32506ms step_avg:93.95ms
step:347/1695 train_time:32602ms step_avg:93.95ms
step:348/1695 train_time:32697ms step_avg:93.96ms
step:349/1695 train_time:32791ms step_avg:93.96ms
step:350/1695 train_time:32886ms step_avg:93.96ms
step:351/1695 train_time:32980ms step_avg:93.96ms
step:352/1695 train_time:33075ms step_avg:93.96ms
step:353/1695 train_time:33169ms step_avg:93.96ms
step:354/1695 train_time:33264ms step_avg:93.97ms
step:355/1695 train_time:33359ms step_avg:93.97ms
step:356/1695 train_time:33453ms step_avg:93.97ms
step:357/1695 train_time:33547ms step_avg:93.97ms
step:358/1695 train_time:33642ms step_avg:93.97ms
step:359/1695 train_time:33737ms step_avg:93.97ms
step:360/1695 train_time:33831ms step_avg:93.98ms
step:361/1695 train_time:33925ms step_avg:93.98ms
step:362/1695 train_time:34020ms step_avg:93.98ms
step:363/1695 train_time:34114ms step_avg:93.98ms
step:364/1695 train_time:34208ms step_avg:93.98ms
step:365/1695 train_time:34303ms step_avg:93.98ms
step:366/1695 train_time:34398ms step_avg:93.98ms
step:367/1695 train_time:34492ms step_avg:93.98ms
step:368/1695 train_time:34586ms step_avg:93.98ms
step:369/1695 train_time:34680ms step_avg:93.98ms
step:370/1695 train_time:34774ms step_avg:93.98ms
step:371/1695 train_time:34868ms step_avg:93.98ms
step:372/1695 train_time:34963ms step_avg:93.99ms
step:373/1695 train_time:35058ms step_avg:93.99ms
step:374/1695 train_time:35153ms step_avg:93.99ms
step:375/1695 train_time:35248ms step_avg:93.99ms
step:375/1695 val_loss:3.8806 train_time:35339ms step_avg:94.24ms
step:376/1695 train_time:35365ms step_avg:94.06ms
step:377/1695 train_time:35445ms step_avg:94.02ms
step:378/1695 train_time:35545ms step_avg:94.04ms
step:379/1695 train_time:35644ms step_avg:94.05ms
step:380/1695 train_time:35740ms step_avg:94.05ms
step:381/1695 train_time:35836ms step_avg:94.06ms
step:382/1695 train_time:35931ms step_avg:94.06ms
step:383/1695 train_time:36026ms step_avg:94.06ms
step:384/1695 train_time:36122ms step_avg:94.07ms
step:385/1695 train_time:36219ms step_avg:94.07ms
step:386/1695 train_time:36314ms step_avg:94.08ms
step:387/1695 train_time:36410ms step_avg:94.08ms
step:388/1695 train_time:36508ms step_avg:94.09ms
step:389/1695 train_time:36605ms step_avg:94.10ms
step:390/1695 train_time:36702ms step_avg:94.11ms
step:391/1695 train_time:36798ms step_avg:94.11ms
step:392/1695 train_time:36893ms step_avg:94.12ms
step:393/1695 train_time:36989ms step_avg:94.12ms
step:394/1695 train_time:37085ms step_avg:94.12ms
step:395/1695 train_time:37181ms step_avg:94.13ms
step:396/1695 train_time:37276ms step_avg:94.13ms
step:397/1695 train_time:37373ms step_avg:94.14ms
step:398/1695 train_time:37469ms step_avg:94.14ms
step:399/1695 train_time:37565ms step_avg:94.15ms
step:400/1695 train_time:37662ms step_avg:94.15ms
step:401/1695 train_time:37758ms step_avg:94.16ms
step:402/1695 train_time:37855ms step_avg:94.17ms
step:403/1695 train_time:37952ms step_avg:94.17ms
step:404/1695 train_time:38047ms step_avg:94.18ms
step:405/1695 train_time:38142ms step_avg:94.18ms
step:406/1695 train_time:38238ms step_avg:94.18ms
step:407/1695 train_time:38334ms step_avg:94.19ms
step:408/1695 train_time:38430ms step_avg:94.19ms
step:409/1695 train_time:38525ms step_avg:94.19ms
step:410/1695 train_time:38622ms step_avg:94.20ms
step:411/1695 train_time:38719ms step_avg:94.21ms
step:412/1695 train_time:38815ms step_avg:94.21ms
step:413/1695 train_time:38911ms step_avg:94.22ms
step:414/1695 train_time:39006ms step_avg:94.22ms
step:415/1695 train_time:39103ms step_avg:94.22ms
step:416/1695 train_time:39198ms step_avg:94.23ms
step:417/1695 train_time:39294ms step_avg:94.23ms
step:418/1695 train_time:39389ms step_avg:94.23ms
step:419/1695 train_time:39485ms step_avg:94.24ms
step:420/1695 train_time:39582ms step_avg:94.24ms
step:421/1695 train_time:39677ms step_avg:94.25ms
step:422/1695 train_time:39774ms step_avg:94.25ms
step:423/1695 train_time:39870ms step_avg:94.26ms
step:424/1695 train_time:39966ms step_avg:94.26ms
step:425/1695 train_time:40062ms step_avg:94.26ms
step:426/1695 train_time:40158ms step_avg:94.27ms
step:427/1695 train_time:40255ms step_avg:94.27ms
step:428/1695 train_time:40351ms step_avg:94.28ms
step:429/1695 train_time:40446ms step_avg:94.28ms
step:430/1695 train_time:40543ms step_avg:94.29ms
step:431/1695 train_time:40638ms step_avg:94.29ms
step:432/1695 train_time:40734ms step_avg:94.29ms
step:433/1695 train_time:40830ms step_avg:94.30ms
step:434/1695 train_time:40926ms step_avg:94.30ms
step:435/1695 train_time:41022ms step_avg:94.30ms
step:436/1695 train_time:41118ms step_avg:94.31ms
step:437/1695 train_time:41214ms step_avg:94.31ms
step:438/1695 train_time:41310ms step_avg:94.32ms
step:439/1695 train_time:41406ms step_avg:94.32ms
step:440/1695 train_time:41502ms step_avg:94.32ms
step:441/1695 train_time:41598ms step_avg:94.33ms
step:442/1695 train_time:41695ms step_avg:94.33ms
step:443/1695 train_time:41791ms step_avg:94.34ms
step:444/1695 train_time:41887ms step_avg:94.34ms
step:445/1695 train_time:41983ms step_avg:94.34ms
step:446/1695 train_time:42079ms step_avg:94.35ms
step:447/1695 train_time:42175ms step_avg:94.35ms
step:448/1695 train_time:42271ms step_avg:94.35ms
step:449/1695 train_time:42367ms step_avg:94.36ms
step:450/1695 train_time:42463ms step_avg:94.36ms
step:451/1695 train_time:42560ms step_avg:94.37ms
step:452/1695 train_time:42657ms step_avg:94.37ms
step:453/1695 train_time:42754ms step_avg:94.38ms
step:454/1695 train_time:42850ms step_avg:94.38ms
step:455/1695 train_time:42946ms step_avg:94.39ms
step:456/1695 train_time:43042ms step_avg:94.39ms
step:457/1695 train_time:43138ms step_avg:94.39ms
step:458/1695 train_time:43234ms step_avg:94.40ms
step:459/1695 train_time:43332ms step_avg:94.40ms
step:460/1695 train_time:43428ms step_avg:94.41ms
step:461/1695 train_time:43523ms step_avg:94.41ms
step:462/1695 train_time:43620ms step_avg:94.42ms
step:463/1695 train_time:43717ms step_avg:94.42ms
step:464/1695 train_time:43813ms step_avg:94.42ms
step:465/1695 train_time:43909ms step_avg:94.43ms
step:466/1695 train_time:44004ms step_avg:94.43ms
step:467/1695 train_time:44101ms step_avg:94.43ms
step:468/1695 train_time:44197ms step_avg:94.44ms
step:469/1695 train_time:44294ms step_avg:94.44ms
step:470/1695 train_time:44390ms step_avg:94.45ms
step:471/1695 train_time:44486ms step_avg:94.45ms
step:472/1695 train_time:44582ms step_avg:94.45ms
step:473/1695 train_time:44678ms step_avg:94.46ms
step:474/1695 train_time:44774ms step_avg:94.46ms
step:475/1695 train_time:44870ms step_avg:94.46ms
step:476/1695 train_time:44965ms step_avg:94.47ms
step:477/1695 train_time:45062ms step_avg:94.47ms
step:478/1695 train_time:45158ms step_avg:94.47ms
step:479/1695 train_time:45255ms step_avg:94.48ms
step:480/1695 train_time:45351ms step_avg:94.48ms
step:481/1695 train_time:45446ms step_avg:94.48ms
step:482/1695 train_time:45542ms step_avg:94.49ms
step:483/1695 train_time:45639ms step_avg:94.49ms
step:484/1695 train_time:45735ms step_avg:94.49ms
step:485/1695 train_time:45831ms step_avg:94.50ms
step:486/1695 train_time:45927ms step_avg:94.50ms
step:487/1695 train_time:46023ms step_avg:94.50ms
step:488/1695 train_time:46119ms step_avg:94.51ms
step:489/1695 train_time:46216ms step_avg:94.51ms
step:490/1695 train_time:46312ms step_avg:94.51ms
step:491/1695 train_time:46408ms step_avg:94.52ms
step:492/1695 train_time:46504ms step_avg:94.52ms
step:493/1695 train_time:46600ms step_avg:94.52ms
step:494/1695 train_time:46696ms step_avg:94.53ms
step:495/1695 train_time:46793ms step_avg:94.53ms
step:496/1695 train_time:46889ms step_avg:94.53ms
step:497/1695 train_time:46985ms step_avg:94.54ms
step:498/1695 train_time:47081ms step_avg:94.54ms
step:499/1695 train_time:47178ms step_avg:94.54ms
step:500/1695 train_time:47273ms step_avg:94.55ms
step:500/1695 val_loss:3.7364 train_time:47368ms step_avg:94.74ms
step:501/1695 train_time:47395ms step_avg:94.60ms
step:502/1695 train_time:47475ms step_avg:94.57ms
step:503/1695 train_time:47577ms step_avg:94.59ms
step:504/1695 train_time:47674ms step_avg:94.59ms
step:505/1695 train_time:47770ms step_avg:94.59ms
step:506/1695 train_time:47866ms step_avg:94.60ms
step:507/1695 train_time:47962ms step_avg:94.60ms
step:508/1695 train_time:48057ms step_avg:94.60ms
step:509/1695 train_time:48153ms step_avg:94.60ms
step:510/1695 train_time:48248ms step_avg:94.60ms
step:511/1695 train_time:48345ms step_avg:94.61ms
step:512/1695 train_time:48442ms step_avg:94.61ms
step:513/1695 train_time:48541ms step_avg:94.62ms
step:514/1695 train_time:48639ms step_avg:94.63ms
step:515/1695 train_time:48736ms step_avg:94.63ms
step:516/1695 train_time:48832ms step_avg:94.64ms
step:517/1695 train_time:48930ms step_avg:94.64ms
step:518/1695 train_time:49025ms step_avg:94.64ms
step:519/1695 train_time:49121ms step_avg:94.64ms
step:520/1695 train_time:49217ms step_avg:94.65ms
step:521/1695 train_time:49313ms step_avg:94.65ms
step:522/1695 train_time:49409ms step_avg:94.65ms
step:523/1695 train_time:49506ms step_avg:94.66ms
step:524/1695 train_time:49604ms step_avg:94.66ms
step:525/1695 train_time:49702ms step_avg:94.67ms
step:526/1695 train_time:49799ms step_avg:94.68ms
step:527/1695 train_time:49897ms step_avg:94.68ms
step:528/1695 train_time:49994ms step_avg:94.69ms
step:529/1695 train_time:50091ms step_avg:94.69ms
step:530/1695 train_time:50186ms step_avg:94.69ms
step:531/1695 train_time:50282ms step_avg:94.69ms
step:532/1695 train_time:50379ms step_avg:94.70ms
step:533/1695 train_time:50475ms step_avg:94.70ms
step:534/1695 train_time:50573ms step_avg:94.71ms
step:535/1695 train_time:50671ms step_avg:94.71ms
step:536/1695 train_time:50767ms step_avg:94.72ms
step:537/1695 train_time:50863ms step_avg:94.72ms
step:538/1695 train_time:50960ms step_avg:94.72ms
step:539/1695 train_time:51058ms step_avg:94.73ms
step:540/1695 train_time:51155ms step_avg:94.73ms
step:541/1695 train_time:51253ms step_avg:94.74ms
step:542/1695 train_time:51350ms step_avg:94.74ms
step:543/1695 train_time:51446ms step_avg:94.74ms
step:544/1695 train_time:51542ms step_avg:94.75ms
step:545/1695 train_time:51638ms step_avg:94.75ms
step:546/1695 train_time:51736ms step_avg:94.75ms
step:547/1695 train_time:51833ms step_avg:94.76ms
step:548/1695 train_time:51929ms step_avg:94.76ms
step:549/1695 train_time:52025ms step_avg:94.76ms
step:550/1695 train_time:52122ms step_avg:94.77ms
step:551/1695 train_time:52219ms step_avg:94.77ms
step:552/1695 train_time:52317ms step_avg:94.78ms
step:553/1695 train_time:52415ms step_avg:94.78ms
step:554/1695 train_time:52512ms step_avg:94.79ms
step:555/1695 train_time:52609ms step_avg:94.79ms
step:556/1695 train_time:52706ms step_avg:94.79ms
step:557/1695 train_time:52802ms step_avg:94.80ms
step:558/1695 train_time:52899ms step_avg:94.80ms
step:559/1695 train_time:52995ms step_avg:94.80ms
step:560/1695 train_time:53092ms step_avg:94.81ms
step:561/1695 train_time:53189ms step_avg:94.81ms
step:562/1695 train_time:53286ms step_avg:94.81ms
step:563/1695 train_time:53382ms step_avg:94.82ms
step:564/1695 train_time:53480ms step_avg:94.82ms
step:565/1695 train_time:53577ms step_avg:94.83ms
step:566/1695 train_time:53675ms step_avg:94.83ms
step:567/1695 train_time:53773ms step_avg:94.84ms
step:568/1695 train_time:53870ms step_avg:94.84ms
step:569/1695 train_time:53966ms step_avg:94.84ms
step:570/1695 train_time:54062ms step_avg:94.85ms
step:571/1695 train_time:54159ms step_avg:94.85ms
step:572/1695 train_time:54256ms step_avg:94.85ms
step:573/1695 train_time:54353ms step_avg:94.86ms
step:574/1695 train_time:54450ms step_avg:94.86ms
step:575/1695 train_time:54547ms step_avg:94.86ms
step:576/1695 train_time:54642ms step_avg:94.87ms
step:577/1695 train_time:54739ms step_avg:94.87ms
step:578/1695 train_time:54837ms step_avg:94.87ms
step:579/1695 train_time:54935ms step_avg:94.88ms
step:580/1695 train_time:55033ms step_avg:94.88ms
step:581/1695 train_time:55130ms step_avg:94.89ms
step:582/1695 train_time:55227ms step_avg:94.89ms
step:583/1695 train_time:55323ms step_avg:94.89ms
step:584/1695 train_time:55420ms step_avg:94.90ms
step:585/1695 train_time:55518ms step_avg:94.90ms
step:586/1695 train_time:55616ms step_avg:94.91ms
step:587/1695 train_time:55713ms step_avg:94.91ms
step:588/1695 train_time:55810ms step_avg:94.91ms
step:589/1695 train_time:55906ms step_avg:94.92ms
step:590/1695 train_time:56002ms step_avg:94.92ms
step:591/1695 train_time:56099ms step_avg:94.92ms
step:592/1695 train_time:56196ms step_avg:94.93ms
step:593/1695 train_time:56294ms step_avg:94.93ms
step:594/1695 train_time:56391ms step_avg:94.93ms
step:595/1695 train_time:56487ms step_avg:94.94ms
step:596/1695 train_time:56583ms step_avg:94.94ms
step:597/1695 train_time:56680ms step_avg:94.94ms
step:598/1695 train_time:56776ms step_avg:94.94ms
step:599/1695 train_time:56873ms step_avg:94.95ms
step:600/1695 train_time:56970ms step_avg:94.95ms
step:601/1695 train_time:57066ms step_avg:94.95ms
step:602/1695 train_time:57162ms step_avg:94.95ms
step:603/1695 train_time:57258ms step_avg:94.96ms
step:604/1695 train_time:57355ms step_avg:94.96ms
step:605/1695 train_time:57452ms step_avg:94.96ms
step:606/1695 train_time:57548ms step_avg:94.96ms
step:607/1695 train_time:57644ms step_avg:94.97ms
step:608/1695 train_time:57740ms step_avg:94.97ms
step:609/1695 train_time:57835ms step_avg:94.97ms
step:610/1695 train_time:57932ms step_avg:94.97ms
step:611/1695 train_time:58029ms step_avg:94.97ms
step:612/1695 train_time:58125ms step_avg:94.97ms
step:613/1695 train_time:58222ms step_avg:94.98ms
step:614/1695 train_time:58319ms step_avg:94.98ms
step:615/1695 train_time:58416ms step_avg:94.99ms
step:616/1695 train_time:58512ms step_avg:94.99ms
step:617/1695 train_time:58609ms step_avg:94.99ms
step:618/1695 train_time:58705ms step_avg:94.99ms
step:619/1695 train_time:58801ms step_avg:94.99ms
step:620/1695 train_time:58898ms step_avg:95.00ms
step:621/1695 train_time:58995ms step_avg:95.00ms
step:622/1695 train_time:59092ms step_avg:95.00ms
step:623/1695 train_time:59189ms step_avg:95.01ms
step:624/1695 train_time:59287ms step_avg:95.01ms
step:625/1695 train_time:59383ms step_avg:95.01ms
step:625/1695 val_loss:3.6465 train_time:59477ms step_avg:95.16ms
step:626/1695 train_time:59504ms step_avg:95.05ms
step:627/1695 train_time:59583ms step_avg:95.03ms
step:628/1695 train_time:59681ms step_avg:95.03ms
step:629/1695 train_time:59778ms step_avg:95.04ms
step:630/1695 train_time:59876ms step_avg:95.04ms
step:631/1695 train_time:59974ms step_avg:95.05ms
step:632/1695 train_time:60071ms step_avg:95.05ms
step:633/1695 train_time:60167ms step_avg:95.05ms
step:634/1695 train_time:60264ms step_avg:95.05ms
step:635/1695 train_time:60361ms step_avg:95.06ms
step:636/1695 train_time:60459ms step_avg:95.06ms
step:637/1695 train_time:60558ms step_avg:95.07ms
step:638/1695 train_time:60657ms step_avg:95.07ms
step:639/1695 train_time:60757ms step_avg:95.08ms
step:640/1695 train_time:60856ms step_avg:95.09ms
step:641/1695 train_time:60955ms step_avg:95.09ms
step:642/1695 train_time:61052ms step_avg:95.10ms
step:643/1695 train_time:61150ms step_avg:95.10ms
step:644/1695 train_time:61247ms step_avg:95.10ms
step:645/1695 train_time:61345ms step_avg:95.11ms
step:646/1695 train_time:61443ms step_avg:95.11ms
step:647/1695 train_time:61541ms step_avg:95.12ms
step:648/1695 train_time:61639ms step_avg:95.12ms
step:649/1695 train_time:61737ms step_avg:95.13ms
step:650/1695 train_time:61835ms step_avg:95.13ms
step:651/1695 train_time:61934ms step_avg:95.14ms
step:652/1695 train_time:62033ms step_avg:95.14ms
step:653/1695 train_time:62131ms step_avg:95.15ms
step:654/1695 train_time:62229ms step_avg:95.15ms
step:655/1695 train_time:62327ms step_avg:95.16ms
step:656/1695 train_time:62425ms step_avg:95.16ms
step:657/1695 train_time:62522ms step_avg:95.16ms
step:658/1695 train_time:62620ms step_avg:95.17ms
step:659/1695 train_time:62719ms step_avg:95.17ms
step:660/1695 train_time:62817ms step_avg:95.18ms
step:661/1695 train_time:62915ms step_avg:95.18ms
step:662/1695 train_time:63014ms step_avg:95.19ms
step:663/1695 train_time:63112ms step_avg:95.19ms
step:664/1695 train_time:63209ms step_avg:95.19ms
step:665/1695 train_time:63309ms step_avg:95.20ms
step:666/1695 train_time:63407ms step_avg:95.21ms
step:667/1695 train_time:63505ms step_avg:95.21ms
step:668/1695 train_time:63605ms step_avg:95.22ms
step:669/1695 train_time:63705ms step_avg:95.22ms
step:670/1695 train_time:63803ms step_avg:95.23ms
step:671/1695 train_time:63901ms step_avg:95.23ms
step:672/1695 train_time:64000ms step_avg:95.24ms
step:673/1695 train_time:64098ms step_avg:95.24ms
step:674/1695 train_time:64195ms step_avg:95.25ms
step:675/1695 train_time:64294ms step_avg:95.25ms
step:676/1695 train_time:64391ms step_avg:95.25ms
step:677/1695 train_time:64490ms step_avg:95.26ms
step:678/1695 train_time:64590ms step_avg:95.26ms
step:679/1695 train_time:64690ms step_avg:95.27ms
step:680/1695 train_time:64789ms step_avg:95.28ms
step:681/1695 train_time:64888ms step_avg:95.28ms
step:682/1695 train_time:64987ms step_avg:95.29ms
step:683/1695 train_time:65086ms step_avg:95.29ms
step:684/1695 train_time:65184ms step_avg:95.30ms
step:685/1695 train_time:65282ms step_avg:95.30ms
step:686/1695 train_time:65380ms step_avg:95.31ms
step:687/1695 train_time:65477ms step_avg:95.31ms
step:688/1695 train_time:65575ms step_avg:95.31ms
step:689/1695 train_time:65672ms step_avg:95.32ms
step:690/1695 train_time:65770ms step_avg:95.32ms
step:691/1695 train_time:65869ms step_avg:95.32ms
step:692/1695 train_time:65967ms step_avg:95.33ms
step:693/1695 train_time:66067ms step_avg:95.33ms
step:694/1695 train_time:66166ms step_avg:95.34ms
step:695/1695 train_time:66264ms step_avg:95.34ms
step:696/1695 train_time:66362ms step_avg:95.35ms
step:697/1695 train_time:66460ms step_avg:95.35ms
step:698/1695 train_time:66558ms step_avg:95.35ms
step:699/1695 train_time:66655ms step_avg:95.36ms
step:700/1695 train_time:66753ms step_avg:95.36ms
step:701/1695 train_time:66851ms step_avg:95.36ms
step:702/1695 train_time:66949ms step_avg:95.37ms
step:703/1695 train_time:67047ms step_avg:95.37ms
step:704/1695 train_time:67146ms step_avg:95.38ms
step:705/1695 train_time:67245ms step_avg:95.38ms
step:706/1695 train_time:67343ms step_avg:95.39ms
step:707/1695 train_time:67441ms step_avg:95.39ms
step:708/1695 train_time:67539ms step_avg:95.39ms
step:709/1695 train_time:67636ms step_avg:95.40ms
step:710/1695 train_time:67734ms step_avg:95.40ms
step:711/1695 train_time:67831ms step_avg:95.40ms
step:712/1695 train_time:67930ms step_avg:95.41ms
step:713/1695 train_time:68027ms step_avg:95.41ms
step:714/1695 train_time:68126ms step_avg:95.41ms
step:715/1695 train_time:68225ms step_avg:95.42ms
step:716/1695 train_time:68322ms step_avg:95.42ms
step:717/1695 train_time:68420ms step_avg:95.43ms
step:718/1695 train_time:68518ms step_avg:95.43ms
step:719/1695 train_time:68615ms step_avg:95.43ms
step:720/1695 train_time:68713ms step_avg:95.43ms
step:721/1695 train_time:68810ms step_avg:95.44ms
step:722/1695 train_time:68909ms step_avg:95.44ms
step:723/1695 train_time:69006ms step_avg:95.44ms
step:724/1695 train_time:69104ms step_avg:95.45ms
step:725/1695 train_time:69201ms step_avg:95.45ms
step:726/1695 train_time:69299ms step_avg:95.45ms
step:727/1695 train_time:69398ms step_avg:95.46ms
step:728/1695 train_time:69496ms step_avg:95.46ms
step:729/1695 train_time:69594ms step_avg:95.46ms
step:730/1695 train_time:69692ms step_avg:95.47ms
step:731/1695 train_time:69790ms step_avg:95.47ms
step:732/1695 train_time:69888ms step_avg:95.48ms
step:733/1695 train_time:69986ms step_avg:95.48ms
step:734/1695 train_time:70084ms step_avg:95.48ms
step:735/1695 train_time:70181ms step_avg:95.49ms
step:736/1695 train_time:70279ms step_avg:95.49ms
step:737/1695 train_time:70377ms step_avg:95.49ms
step:738/1695 train_time:70475ms step_avg:95.49ms
step:739/1695 train_time:70572ms step_avg:95.50ms
step:740/1695 train_time:70670ms step_avg:95.50ms
step:741/1695 train_time:70768ms step_avg:95.50ms
step:742/1695 train_time:70867ms step_avg:95.51ms
step:743/1695 train_time:70965ms step_avg:95.51ms
step:744/1695 train_time:71062ms step_avg:95.51ms
step:745/1695 train_time:71160ms step_avg:95.52ms
step:746/1695 train_time:71258ms step_avg:95.52ms
step:747/1695 train_time:71356ms step_avg:95.52ms
step:748/1695 train_time:71454ms step_avg:95.53ms
step:749/1695 train_time:71552ms step_avg:95.53ms
step:750/1695 train_time:71650ms step_avg:95.53ms
step:750/1695 val_loss:3.5852 train_time:71745ms step_avg:95.66ms
step:751/1695 train_time:71772ms step_avg:95.57ms
step:752/1695 train_time:71856ms step_avg:95.55ms
step:753/1695 train_time:71958ms step_avg:95.56ms
step:754/1695 train_time:72057ms step_avg:95.57ms
step:755/1695 train_time:72156ms step_avg:95.57ms
step:756/1695 train_time:72254ms step_avg:95.57ms
step:757/1695 train_time:72351ms step_avg:95.58ms
step:758/1695 train_time:72449ms step_avg:95.58ms
step:759/1695 train_time:72546ms step_avg:95.58ms
step:760/1695 train_time:72643ms step_avg:95.58ms
step:761/1695 train_time:72741ms step_avg:95.59ms
step:762/1695 train_time:72840ms step_avg:95.59ms
step:763/1695 train_time:72939ms step_avg:95.59ms
step:764/1695 train_time:73037ms step_avg:95.60ms
step:765/1695 train_time:73136ms step_avg:95.60ms
step:766/1695 train_time:73234ms step_avg:95.61ms
step:767/1695 train_time:73332ms step_avg:95.61ms
step:768/1695 train_time:73430ms step_avg:95.61ms
step:769/1695 train_time:73528ms step_avg:95.62ms
step:770/1695 train_time:73626ms step_avg:95.62ms
step:771/1695 train_time:73724ms step_avg:95.62ms
step:772/1695 train_time:73823ms step_avg:95.63ms
step:773/1695 train_time:73921ms step_avg:95.63ms
step:774/1695 train_time:74020ms step_avg:95.63ms
step:775/1695 train_time:74117ms step_avg:95.63ms
step:776/1695 train_time:74215ms step_avg:95.64ms
step:777/1695 train_time:74313ms step_avg:95.64ms
step:778/1695 train_time:74411ms step_avg:95.64ms
step:779/1695 train_time:74510ms step_avg:95.65ms
step:780/1695 train_time:74607ms step_avg:95.65ms
step:781/1695 train_time:74705ms step_avg:95.65ms
step:782/1695 train_time:74804ms step_avg:95.66ms
step:783/1695 train_time:74904ms step_avg:95.66ms
step:784/1695 train_time:75002ms step_avg:95.67ms
step:785/1695 train_time:75099ms step_avg:95.67ms
step:786/1695 train_time:75197ms step_avg:95.67ms
step:787/1695 train_time:75294ms step_avg:95.67ms
step:788/1695 train_time:75392ms step_avg:95.68ms
step:789/1695 train_time:75491ms step_avg:95.68ms
step:790/1695 train_time:75590ms step_avg:95.68ms
step:791/1695 train_time:75688ms step_avg:95.69ms
step:792/1695 train_time:75787ms step_avg:95.69ms
step:793/1695 train_time:75885ms step_avg:95.69ms
step:794/1695 train_time:75984ms step_avg:95.70ms
step:795/1695 train_time:76083ms step_avg:95.70ms
step:796/1695 train_time:76181ms step_avg:95.71ms
step:797/1695 train_time:76279ms step_avg:95.71ms
step:798/1695 train_time:76376ms step_avg:95.71ms
step:799/1695 train_time:76474ms step_avg:95.71ms
step:800/1695 train_time:76572ms step_avg:95.72ms
step:801/1695 train_time:76671ms step_avg:95.72ms
step:802/1695 train_time:76771ms step_avg:95.72ms
step:803/1695 train_time:76870ms step_avg:95.73ms
step:804/1695 train_time:76970ms step_avg:95.73ms
step:805/1695 train_time:77069ms step_avg:95.74ms
step:806/1695 train_time:77169ms step_avg:95.74ms
step:807/1695 train_time:77268ms step_avg:95.75ms
step:808/1695 train_time:77367ms step_avg:95.75ms
step:809/1695 train_time:77465ms step_avg:95.75ms
step:810/1695 train_time:77562ms step_avg:95.76ms
step:811/1695 train_time:77659ms step_avg:95.76ms
step:812/1695 train_time:77757ms step_avg:95.76ms
step:813/1695 train_time:77855ms step_avg:95.76ms
step:814/1695 train_time:77952ms step_avg:95.76ms
step:815/1695 train_time:78051ms step_avg:95.77ms
step:816/1695 train_time:78150ms step_avg:95.77ms
step:817/1695 train_time:78249ms step_avg:95.78ms
step:818/1695 train_time:78348ms step_avg:95.78ms
step:819/1695 train_time:78447ms step_avg:95.78ms
step:820/1695 train_time:78545ms step_avg:95.79ms
step:821/1695 train_time:78643ms step_avg:95.79ms
step:822/1695 train_time:78742ms step_avg:95.79ms
step:823/1695 train_time:78840ms step_avg:95.80ms
step:824/1695 train_time:78937ms step_avg:95.80ms
step:825/1695 train_time:79036ms step_avg:95.80ms
step:826/1695 train_time:79134ms step_avg:95.80ms
step:827/1695 train_time:79233ms step_avg:95.81ms
step:828/1695 train_time:79332ms step_avg:95.81ms
step:829/1695 train_time:79432ms step_avg:95.82ms
step:830/1695 train_time:79531ms step_avg:95.82ms
step:831/1695 train_time:79629ms step_avg:95.82ms
step:832/1695 train_time:79728ms step_avg:95.83ms
step:833/1695 train_time:79826ms step_avg:95.83ms
step:834/1695 train_time:79925ms step_avg:95.83ms
step:835/1695 train_time:80023ms step_avg:95.84ms
step:836/1695 train_time:80122ms step_avg:95.84ms
step:837/1695 train_time:80220ms step_avg:95.84ms
step:838/1695 train_time:80319ms step_avg:95.85ms
step:839/1695 train_time:80417ms step_avg:95.85ms
step:840/1695 train_time:80517ms step_avg:95.85ms
step:841/1695 train_time:80618ms step_avg:95.86ms
step:842/1695 train_time:80717ms step_avg:95.86ms
step:843/1695 train_time:80815ms step_avg:95.87ms
step:844/1695 train_time:80914ms step_avg:95.87ms
step:845/1695 train_time:81013ms step_avg:95.87ms
step:846/1695 train_time:81113ms step_avg:95.88ms
step:847/1695 train_time:81212ms step_avg:95.88ms
step:848/1695 train_time:81312ms step_avg:95.89ms
step:849/1695 train_time:81411ms step_avg:95.89ms
step:850/1695 train_time:81510ms step_avg:95.89ms
step:851/1695 train_time:81608ms step_avg:95.90ms
step:852/1695 train_time:81707ms step_avg:95.90ms
step:853/1695 train_time:81805ms step_avg:95.90ms
step:854/1695 train_time:81903ms step_avg:95.91ms
step:855/1695 train_time:82001ms step_avg:95.91ms
step:856/1695 train_time:82099ms step_avg:95.91ms
step:857/1695 train_time:82199ms step_avg:95.91ms
step:858/1695 train_time:82297ms step_avg:95.92ms
step:859/1695 train_time:82395ms step_avg:95.92ms
step:860/1695 train_time:82495ms step_avg:95.92ms
step:861/1695 train_time:82593ms step_avg:95.93ms
step:862/1695 train_time:82692ms step_avg:95.93ms
step:863/1695 train_time:82791ms step_avg:95.93ms
step:864/1695 train_time:82889ms step_avg:95.94ms
step:865/1695 train_time:82989ms step_avg:95.94ms
step:866/1695 train_time:83088ms step_avg:95.94ms
step:867/1695 train_time:83187ms step_avg:95.95ms
step:868/1695 train_time:83285ms step_avg:95.95ms
step:869/1695 train_time:83384ms step_avg:95.95ms
step:870/1695 train_time:83481ms step_avg:95.96ms
step:871/1695 train_time:83580ms step_avg:95.96ms
step:872/1695 train_time:83677ms step_avg:95.96ms
step:873/1695 train_time:83775ms step_avg:95.96ms
step:874/1695 train_time:83873ms step_avg:95.96ms
step:875/1695 train_time:83971ms step_avg:95.97ms
step:875/1695 val_loss:3.5356 train_time:84068ms step_avg:96.08ms
step:876/1695 train_time:84095ms step_avg:96.00ms
step:877/1695 train_time:84181ms step_avg:95.99ms
step:878/1695 train_time:84283ms step_avg:95.99ms
step:879/1695 train_time:84381ms step_avg:96.00ms
step:880/1695 train_time:84479ms step_avg:96.00ms
step:881/1695 train_time:84578ms step_avg:96.00ms
step:882/1695 train_time:84678ms step_avg:96.01ms
step:883/1695 train_time:84777ms step_avg:96.01ms
step:884/1695 train_time:84878ms step_avg:96.02ms
step:885/1695 train_time:84976ms step_avg:96.02ms
step:886/1695 train_time:85077ms step_avg:96.02ms
step:887/1695 train_time:85179ms step_avg:96.03ms
step:888/1695 train_time:85280ms step_avg:96.04ms
step:889/1695 train_time:85381ms step_avg:96.04ms
step:890/1695 train_time:85481ms step_avg:96.05ms
step:891/1695 train_time:85580ms step_avg:96.05ms
step:892/1695 train_time:85679ms step_avg:96.05ms
step:893/1695 train_time:85778ms step_avg:96.06ms
step:894/1695 train_time:85878ms step_avg:96.06ms
step:895/1695 train_time:85978ms step_avg:96.06ms
step:896/1695 train_time:86078ms step_avg:96.07ms
step:897/1695 train_time:86179ms step_avg:96.07ms
step:898/1695 train_time:86280ms step_avg:96.08ms
step:899/1695 train_time:86380ms step_avg:96.08ms
step:900/1695 train_time:86481ms step_avg:96.09ms
step:901/1695 train_time:86581ms step_avg:96.09ms
step:902/1695 train_time:86680ms step_avg:96.10ms
step:903/1695 train_time:86780ms step_avg:96.10ms
step:904/1695 train_time:86879ms step_avg:96.11ms
step:905/1695 train_time:86978ms step_avg:96.11ms
step:906/1695 train_time:87079ms step_avg:96.11ms
step:907/1695 train_time:87179ms step_avg:96.12ms
step:908/1695 train_time:87280ms step_avg:96.12ms
step:909/1695 train_time:87380ms step_avg:96.13ms
step:910/1695 train_time:87480ms step_avg:96.13ms
step:911/1695 train_time:87580ms step_avg:96.14ms
step:912/1695 train_time:87679ms step_avg:96.14ms
step:913/1695 train_time:87780ms step_avg:96.14ms
step:914/1695 train_time:87879ms step_avg:96.15ms
step:915/1695 train_time:87978ms step_avg:96.15ms
step:916/1695 train_time:88077ms step_avg:96.15ms
step:917/1695 train_time:88178ms step_avg:96.16ms
step:918/1695 train_time:88279ms step_avg:96.16ms
step:919/1695 train_time:88380ms step_avg:96.17ms
step:920/1695 train_time:88481ms step_avg:96.18ms
step:921/1695 train_time:88581ms step_avg:96.18ms
step:922/1695 train_time:88680ms step_avg:96.18ms
step:923/1695 train_time:88779ms step_avg:96.19ms
step:924/1695 train_time:88879ms step_avg:96.19ms
step:925/1695 train_time:88980ms step_avg:96.19ms
step:926/1695 train_time:89080ms step_avg:96.20ms
step:927/1695 train_time:89179ms step_avg:96.20ms
step:928/1695 train_time:89279ms step_avg:96.21ms
step:929/1695 train_time:89379ms step_avg:96.21ms
step:930/1695 train_time:89480ms step_avg:96.22ms
step:931/1695 train_time:89580ms step_avg:96.22ms
step:932/1695 train_time:89680ms step_avg:96.22ms
step:933/1695 train_time:89781ms step_avg:96.23ms
step:934/1695 train_time:89881ms step_avg:96.23ms
step:935/1695 train_time:89980ms step_avg:96.24ms
step:936/1695 train_time:90079ms step_avg:96.24ms
step:937/1695 train_time:90179ms step_avg:96.24ms
step:938/1695 train_time:90279ms step_avg:96.25ms
step:939/1695 train_time:90381ms step_avg:96.25ms
step:940/1695 train_time:90482ms step_avg:96.26ms
step:941/1695 train_time:90583ms step_avg:96.26ms
step:942/1695 train_time:90682ms step_avg:96.27ms
step:943/1695 train_time:90784ms step_avg:96.27ms
step:944/1695 train_time:90884ms step_avg:96.28ms
step:945/1695 train_time:90984ms step_avg:96.28ms
step:946/1695 train_time:91083ms step_avg:96.28ms
step:947/1695 train_time:91183ms step_avg:96.29ms
step:948/1695 train_time:91283ms step_avg:96.29ms
step:949/1695 train_time:91382ms step_avg:96.29ms
step:950/1695 train_time:91482ms step_avg:96.30ms
step:951/1695 train_time:91582ms step_avg:96.30ms
step:952/1695 train_time:91682ms step_avg:96.30ms
step:953/1695 train_time:91783ms step_avg:96.31ms
step:954/1695 train_time:91884ms step_avg:96.31ms
step:955/1695 train_time:91984ms step_avg:96.32ms
step:956/1695 train_time:92083ms step_avg:96.32ms
step:957/1695 train_time:92182ms step_avg:96.32ms
step:958/1695 train_time:92282ms step_avg:96.33ms
step:959/1695 train_time:92381ms step_avg:96.33ms
step:960/1695 train_time:92482ms step_avg:96.34ms
step:961/1695 train_time:92581ms step_avg:96.34ms
step:962/1695 train_time:92681ms step_avg:96.34ms
step:963/1695 train_time:92781ms step_avg:96.35ms
step:964/1695 train_time:92881ms step_avg:96.35ms
step:965/1695 train_time:92982ms step_avg:96.35ms
step:966/1695 train_time:93083ms step_avg:96.36ms
step:967/1695 train_time:93184ms step_avg:96.36ms
step:968/1695 train_time:93284ms step_avg:96.37ms
step:969/1695 train_time:93384ms step_avg:96.37ms
step:970/1695 train_time:93483ms step_avg:96.37ms
step:971/1695 train_time:93584ms step_avg:96.38ms
step:972/1695 train_time:93683ms step_avg:96.38ms
step:973/1695 train_time:93782ms step_avg:96.38ms
step:974/1695 train_time:93882ms step_avg:96.39ms
step:975/1695 train_time:93981ms step_avg:96.39ms
step:976/1695 train_time:94082ms step_avg:96.40ms
step:977/1695 train_time:94182ms step_avg:96.40ms
step:978/1695 train_time:94283ms step_avg:96.40ms
step:979/1695 train_time:94383ms step_avg:96.41ms
step:980/1695 train_time:94484ms step_avg:96.41ms
step:981/1695 train_time:94583ms step_avg:96.41ms
step:982/1695 train_time:94685ms step_avg:96.42ms
step:983/1695 train_time:94785ms step_avg:96.42ms
step:984/1695 train_time:94884ms step_avg:96.43ms
step:985/1695 train_time:94983ms step_avg:96.43ms
step:986/1695 train_time:95083ms step_avg:96.43ms
step:987/1695 train_time:95183ms step_avg:96.44ms
step:988/1695 train_time:95283ms step_avg:96.44ms
step:989/1695 train_time:95383ms step_avg:96.44ms
step:990/1695 train_time:95484ms step_avg:96.45ms
step:991/1695 train_time:95584ms step_avg:96.45ms
step:992/1695 train_time:95684ms step_avg:96.46ms
step:993/1695 train_time:95784ms step_avg:96.46ms
step:994/1695 train_time:95884ms step_avg:96.46ms
step:995/1695 train_time:95983ms step_avg:96.47ms
step:996/1695 train_time:96084ms step_avg:96.47ms
step:997/1695 train_time:96184ms step_avg:96.47ms
step:998/1695 train_time:96283ms step_avg:96.48ms
step:999/1695 train_time:96383ms step_avg:96.48ms
step:1000/1695 train_time:96484ms step_avg:96.48ms
step:1000/1695 val_loss:3.4915 train_time:96581ms step_avg:96.58ms
step:1001/1695 train_time:96608ms step_avg:96.51ms
step:1002/1695 train_time:96695ms step_avg:96.50ms
step:1003/1695 train_time:96797ms step_avg:96.51ms
step:1004/1695 train_time:96897ms step_avg:96.51ms
step:1005/1695 train_time:96996ms step_avg:96.51ms
step:1006/1695 train_time:97095ms step_avg:96.52ms
step:1007/1695 train_time:97194ms step_avg:96.52ms
step:1008/1695 train_time:97293ms step_avg:96.52ms
step:1009/1695 train_time:97393ms step_avg:96.52ms
step:1010/1695 train_time:97492ms step_avg:96.53ms
step:1011/1695 train_time:97594ms step_avg:96.53ms
step:1012/1695 train_time:97696ms step_avg:96.54ms
step:1013/1695 train_time:97798ms step_avg:96.54ms
step:1014/1695 train_time:97899ms step_avg:96.55ms
step:1015/1695 train_time:97998ms step_avg:96.55ms
step:1016/1695 train_time:98097ms step_avg:96.55ms
step:1017/1695 train_time:98197ms step_avg:96.56ms
step:1018/1695 train_time:98296ms step_avg:96.56ms
step:1019/1695 train_time:98396ms step_avg:96.56ms
step:1020/1695 train_time:98496ms step_avg:96.56ms
step:1021/1695 train_time:98597ms step_avg:96.57ms
step:1022/1695 train_time:98698ms step_avg:96.57ms
step:1023/1695 train_time:98799ms step_avg:96.58ms
step:1024/1695 train_time:98902ms step_avg:96.58ms
step:1025/1695 train_time:99001ms step_avg:96.59ms
step:1026/1695 train_time:99101ms step_avg:96.59ms
step:1027/1695 train_time:99200ms step_avg:96.59ms
step:1028/1695 train_time:99299ms step_avg:96.59ms
step:1029/1695 train_time:99399ms step_avg:96.60ms
step:1030/1695 train_time:99499ms step_avg:96.60ms
step:1031/1695 train_time:99600ms step_avg:96.60ms
step:1032/1695 train_time:99699ms step_avg:96.61ms
step:1033/1695 train_time:99800ms step_avg:96.61ms
step:1034/1695 train_time:99899ms step_avg:96.61ms
step:1035/1695 train_time:99999ms step_avg:96.62ms
step:1036/1695 train_time:100100ms step_avg:96.62ms
step:1037/1695 train_time:100199ms step_avg:96.62ms
step:1038/1695 train_time:100299ms step_avg:96.63ms
step:1039/1695 train_time:100399ms step_avg:96.63ms
step:1040/1695 train_time:100499ms step_avg:96.63ms
step:1041/1695 train_time:100599ms step_avg:96.64ms
step:1042/1695 train_time:100699ms step_avg:96.64ms
step:1043/1695 train_time:100799ms step_avg:96.64ms
step:1044/1695 train_time:100899ms step_avg:96.65ms
step:1045/1695 train_time:100998ms step_avg:96.65ms
step:1046/1695 train_time:101099ms step_avg:96.65ms
step:1047/1695 train_time:101198ms step_avg:96.66ms
step:1048/1695 train_time:101298ms step_avg:96.66ms
step:1049/1695 train_time:101399ms step_avg:96.66ms
step:1050/1695 train_time:101499ms step_avg:96.67ms
step:1051/1695 train_time:101599ms step_avg:96.67ms
step:1052/1695 train_time:101700ms step_avg:96.67ms
step:1053/1695 train_time:101801ms step_avg:96.68ms
step:1054/1695 train_time:101901ms step_avg:96.68ms
step:1055/1695 train_time:102000ms step_avg:96.68ms
step:1056/1695 train_time:102101ms step_avg:96.69ms
step:1057/1695 train_time:102200ms step_avg:96.69ms
step:1058/1695 train_time:102299ms step_avg:96.69ms
step:1059/1695 train_time:102399ms step_avg:96.69ms
step:1060/1695 train_time:102498ms step_avg:96.70ms
step:1061/1695 train_time:102598ms step_avg:96.70ms
step:1062/1695 train_time:102699ms step_avg:96.70ms
step:1063/1695 train_time:102799ms step_avg:96.71ms
step:1064/1695 train_time:102899ms step_avg:96.71ms
step:1065/1695 train_time:102998ms step_avg:96.71ms
step:1066/1695 train_time:103098ms step_avg:96.71ms
step:1067/1695 train_time:103199ms step_avg:96.72ms
step:1068/1695 train_time:103299ms step_avg:96.72ms
step:1069/1695 train_time:103399ms step_avg:96.73ms
step:1070/1695 train_time:103500ms step_avg:96.73ms
step:1071/1695 train_time:103601ms step_avg:96.73ms
step:1072/1695 train_time:103701ms step_avg:96.74ms
step:1073/1695 train_time:103800ms step_avg:96.74ms
step:1074/1695 train_time:103899ms step_avg:96.74ms
step:1075/1695 train_time:103999ms step_avg:96.74ms
step:1076/1695 train_time:104098ms step_avg:96.75ms
step:1077/1695 train_time:104199ms step_avg:96.75ms
step:1078/1695 train_time:104299ms step_avg:96.75ms
step:1079/1695 train_time:104400ms step_avg:96.76ms
step:1080/1695 train_time:104500ms step_avg:96.76ms
step:1081/1695 train_time:104599ms step_avg:96.76ms
step:1082/1695 train_time:104699ms step_avg:96.76ms
step:1083/1695 train_time:104800ms step_avg:96.77ms
step:1084/1695 train_time:104899ms step_avg:96.77ms
step:1085/1695 train_time:104999ms step_avg:96.77ms
step:1086/1695 train_time:105098ms step_avg:96.78ms
step:1087/1695 train_time:105198ms step_avg:96.78ms
step:1088/1695 train_time:105299ms step_avg:96.78ms
step:1089/1695 train_time:105399ms step_avg:96.78ms
step:1090/1695 train_time:105499ms step_avg:96.79ms
step:1091/1695 train_time:105600ms step_avg:96.79ms
step:1092/1695 train_time:105701ms step_avg:96.80ms
step:1093/1695 train_time:105800ms step_avg:96.80ms
step:1094/1695 train_time:105900ms step_avg:96.80ms
step:1095/1695 train_time:106000ms step_avg:96.80ms
step:1096/1695 train_time:106099ms step_avg:96.81ms
step:1097/1695 train_time:106199ms step_avg:96.81ms
step:1098/1695 train_time:106299ms step_avg:96.81ms
step:1099/1695 train_time:106398ms step_avg:96.81ms
step:1100/1695 train_time:106498ms step_avg:96.82ms
step:1101/1695 train_time:106598ms step_avg:96.82ms
step:1102/1695 train_time:106699ms step_avg:96.82ms
step:1103/1695 train_time:106799ms step_avg:96.83ms
step:1104/1695 train_time:106899ms step_avg:96.83ms
step:1105/1695 train_time:107000ms step_avg:96.83ms
step:1106/1695 train_time:107100ms step_avg:96.84ms
step:1107/1695 train_time:107199ms step_avg:96.84ms
step:1108/1695 train_time:107299ms step_avg:96.84ms
step:1109/1695 train_time:107399ms step_avg:96.84ms
step:1110/1695 train_time:107499ms step_avg:96.85ms
step:1111/1695 train_time:107598ms step_avg:96.85ms
step:1112/1695 train_time:107698ms step_avg:96.85ms
step:1113/1695 train_time:107799ms step_avg:96.85ms
step:1114/1695 train_time:107899ms step_avg:96.86ms
step:1115/1695 train_time:108000ms step_avg:96.86ms
step:1116/1695 train_time:108099ms step_avg:96.86ms
step:1117/1695 train_time:108199ms step_avg:96.87ms
step:1118/1695 train_time:108299ms step_avg:96.87ms
step:1119/1695 train_time:108399ms step_avg:96.87ms
step:1120/1695 train_time:108499ms step_avg:96.87ms
step:1121/1695 train_time:108599ms step_avg:96.88ms
step:1122/1695 train_time:108700ms step_avg:96.88ms
step:1123/1695 train_time:108800ms step_avg:96.88ms
step:1124/1695 train_time:108900ms step_avg:96.89ms
step:1125/1695 train_time:108999ms step_avg:96.89ms
step:1125/1695 val_loss:3.4400 train_time:109096ms step_avg:96.97ms
step:1126/1695 train_time:109124ms step_avg:96.91ms
step:1127/1695 train_time:109210ms step_avg:96.90ms
step:1128/1695 train_time:109311ms step_avg:96.91ms
step:1129/1695 train_time:109411ms step_avg:96.91ms
step:1130/1695 train_time:109510ms step_avg:96.91ms
step:1131/1695 train_time:109609ms step_avg:96.91ms
step:1132/1695 train_time:109709ms step_avg:96.92ms
step:1133/1695 train_time:109808ms step_avg:96.92ms
step:1134/1695 train_time:109908ms step_avg:96.92ms
step:1135/1695 train_time:110008ms step_avg:96.92ms
step:1136/1695 train_time:110109ms step_avg:96.93ms
step:1137/1695 train_time:110211ms step_avg:96.93ms
step:1138/1695 train_time:110313ms step_avg:96.94ms
step:1139/1695 train_time:110413ms step_avg:96.94ms
step:1140/1695 train_time:110513ms step_avg:96.94ms
step:1141/1695 train_time:110613ms step_avg:96.94ms
step:1142/1695 train_time:110713ms step_avg:96.95ms
step:1143/1695 train_time:110813ms step_avg:96.95ms
step:1144/1695 train_time:110913ms step_avg:96.95ms
step:1145/1695 train_time:111014ms step_avg:96.96ms
step:1146/1695 train_time:111115ms step_avg:96.96ms
step:1147/1695 train_time:111216ms step_avg:96.96ms
step:1148/1695 train_time:111317ms step_avg:96.97ms
step:1149/1695 train_time:111418ms step_avg:96.97ms
step:1150/1695 train_time:111519ms step_avg:96.97ms
step:1151/1695 train_time:111621ms step_avg:96.98ms
step:1152/1695 train_time:111722ms step_avg:96.98ms
step:1153/1695 train_time:111824ms step_avg:96.99ms
step:1154/1695 train_time:111924ms step_avg:96.99ms
step:1155/1695 train_time:112025ms step_avg:96.99ms
step:1156/1695 train_time:112126ms step_avg:96.99ms
step:1157/1695 train_time:112228ms step_avg:97.00ms
step:1158/1695 train_time:112330ms step_avg:97.00ms
step:1159/1695 train_time:112431ms step_avg:97.01ms
step:1160/1695 train_time:112530ms step_avg:97.01ms
step:1161/1695 train_time:112631ms step_avg:97.01ms
step:1162/1695 train_time:112731ms step_avg:97.01ms
step:1163/1695 train_time:112833ms step_avg:97.02ms
step:1164/1695 train_time:112933ms step_avg:97.02ms
step:1165/1695 train_time:113033ms step_avg:97.02ms
step:1166/1695 train_time:113134ms step_avg:97.03ms
step:1167/1695 train_time:113234ms step_avg:97.03ms
step:1168/1695 train_time:113335ms step_avg:97.03ms
step:1169/1695 train_time:113436ms step_avg:97.04ms
step:1170/1695 train_time:113538ms step_avg:97.04ms
step:1171/1695 train_time:113637ms step_avg:97.04ms
step:1172/1695 train_time:113740ms step_avg:97.05ms
step:1173/1695 train_time:113840ms step_avg:97.05ms
step:1174/1695 train_time:113942ms step_avg:97.05ms
step:1175/1695 train_time:114043ms step_avg:97.06ms
step:1176/1695 train_time:114145ms step_avg:97.06ms
step:1177/1695 train_time:114247ms step_avg:97.07ms
step:1178/1695 train_time:114349ms step_avg:97.07ms
step:1179/1695 train_time:114453ms step_avg:97.08ms
step:1180/1695 train_time:114553ms step_avg:97.08ms
step:1181/1695 train_time:114653ms step_avg:97.08ms
step:1182/1695 train_time:114754ms step_avg:97.08ms
step:1183/1695 train_time:114853ms step_avg:97.09ms
step:1184/1695 train_time:114955ms step_avg:97.09ms
step:1185/1695 train_time:115057ms step_avg:97.09ms
step:1186/1695 train_time:115159ms step_avg:97.10ms
step:1187/1695 train_time:115260ms step_avg:97.10ms
step:1188/1695 train_time:115362ms step_avg:97.11ms
step:1189/1695 train_time:115463ms step_avg:97.11ms
step:1190/1695 train_time:115564ms step_avg:97.11ms
step:1191/1695 train_time:115664ms step_avg:97.12ms
step:1192/1695 train_time:115765ms step_avg:97.12ms
step:1193/1695 train_time:115866ms step_avg:97.12ms
step:1194/1695 train_time:115969ms step_avg:97.13ms
step:1195/1695 train_time:116070ms step_avg:97.13ms
step:1196/1695 train_time:116171ms step_avg:97.13ms
step:1197/1695 train_time:116273ms step_avg:97.14ms
step:1198/1695 train_time:116373ms step_avg:97.14ms
step:1199/1695 train_time:116473ms step_avg:97.14ms
step:1200/1695 train_time:116573ms step_avg:97.14ms
step:1201/1695 train_time:116673ms step_avg:97.15ms
step:1202/1695 train_time:116775ms step_avg:97.15ms
step:1203/1695 train_time:116877ms step_avg:97.15ms
step:1204/1695 train_time:116979ms step_avg:97.16ms
step:1205/1695 train_time:117080ms step_avg:97.16ms
step:1206/1695 train_time:117181ms step_avg:97.16ms
step:1207/1695 train_time:117282ms step_avg:97.17ms
step:1208/1695 train_time:117384ms step_avg:97.17ms
step:1209/1695 train_time:117485ms step_avg:97.18ms
step:1210/1695 train_time:117586ms step_avg:97.18ms
step:1211/1695 train_time:117687ms step_avg:97.18ms
step:1212/1695 train_time:117789ms step_avg:97.19ms
step:1213/1695 train_time:117890ms step_avg:97.19ms
step:1214/1695 train_time:117991ms step_avg:97.19ms
step:1215/1695 train_time:118092ms step_avg:97.20ms
step:1216/1695 train_time:118194ms step_avg:97.20ms
step:1217/1695 train_time:118293ms step_avg:97.20ms
step:1218/1695 train_time:118395ms step_avg:97.20ms
step:1219/1695 train_time:118495ms step_avg:97.21ms
step:1220/1695 train_time:118597ms step_avg:97.21ms
step:1221/1695 train_time:118698ms step_avg:97.21ms
step:1222/1695 train_time:118800ms step_avg:97.22ms
step:1223/1695 train_time:118903ms step_avg:97.22ms
step:1224/1695 train_time:119006ms step_avg:97.23ms
step:1225/1695 train_time:119107ms step_avg:97.23ms
step:1226/1695 train_time:119207ms step_avg:97.23ms
step:1227/1695 train_time:119308ms step_avg:97.24ms
step:1228/1695 train_time:119409ms step_avg:97.24ms
step:1229/1695 train_time:119510ms step_avg:97.24ms
step:1230/1695 train_time:119612ms step_avg:97.25ms
step:1231/1695 train_time:119713ms step_avg:97.25ms
step:1232/1695 train_time:119813ms step_avg:97.25ms
step:1233/1695 train_time:119914ms step_avg:97.25ms
step:1234/1695 train_time:120015ms step_avg:97.26ms
step:1235/1695 train_time:120115ms step_avg:97.26ms
step:1236/1695 train_time:120216ms step_avg:97.26ms
step:1237/1695 train_time:120318ms step_avg:97.27ms
step:1238/1695 train_time:120421ms step_avg:97.27ms
step:1239/1695 train_time:120522ms step_avg:97.27ms
step:1240/1695 train_time:120624ms step_avg:97.28ms
step:1241/1695 train_time:120725ms step_avg:97.28ms
step:1242/1695 train_time:120826ms step_avg:97.28ms
step:1243/1695 train_time:120927ms step_avg:97.29ms
step:1244/1695 train_time:121028ms step_avg:97.29ms
step:1245/1695 train_time:121130ms step_avg:97.29ms
step:1246/1695 train_time:121232ms step_avg:97.30ms
step:1247/1695 train_time:121332ms step_avg:97.30ms
step:1248/1695 train_time:121433ms step_avg:97.30ms
step:1249/1695 train_time:121533ms step_avg:97.30ms
step:1250/1695 train_time:121633ms step_avg:97.31ms
step:1250/1695 val_loss:3.3953 train_time:121731ms step_avg:97.38ms
step:1251/1695 train_time:121758ms step_avg:97.33ms
step:1252/1695 train_time:121845ms step_avg:97.32ms
step:1253/1695 train_time:121947ms step_avg:97.32ms
step:1254/1695 train_time:122048ms step_avg:97.33ms
step:1255/1695 train_time:122149ms step_avg:97.33ms
step:1256/1695 train_time:122249ms step_avg:97.33ms
step:1257/1695 train_time:122349ms step_avg:97.33ms
step:1258/1695 train_time:122450ms step_avg:97.34ms
step:1259/1695 train_time:122551ms step_avg:97.34ms
step:1260/1695 train_time:122651ms step_avg:97.34ms
step:1261/1695 train_time:122754ms step_avg:97.35ms
step:1262/1695 train_time:122855ms step_avg:97.35ms
step:1263/1695 train_time:122957ms step_avg:97.35ms
step:1264/1695 train_time:123057ms step_avg:97.36ms
step:1265/1695 train_time:123157ms step_avg:97.36ms
step:1266/1695 train_time:123258ms step_avg:97.36ms
step:1267/1695 train_time:123359ms step_avg:97.36ms
step:1268/1695 train_time:123460ms step_avg:97.37ms
step:1269/1695 train_time:123561ms step_avg:97.37ms
step:1270/1695 train_time:123662ms step_avg:97.37ms
step:1271/1695 train_time:123764ms step_avg:97.38ms
step:1272/1695 train_time:123864ms step_avg:97.38ms
step:1273/1695 train_time:123965ms step_avg:97.38ms
step:1274/1695 train_time:124066ms step_avg:97.38ms
step:1275/1695 train_time:124168ms step_avg:97.39ms
step:1276/1695 train_time:124272ms step_avg:97.39ms
step:1277/1695 train_time:124372ms step_avg:97.39ms
step:1278/1695 train_time:124473ms step_avg:97.40ms
step:1279/1695 train_time:124574ms step_avg:97.40ms
step:1280/1695 train_time:124674ms step_avg:97.40ms
step:1281/1695 train_time:124775ms step_avg:97.40ms
step:1282/1695 train_time:124875ms step_avg:97.41ms
step:1283/1695 train_time:124975ms step_avg:97.41ms
step:1284/1695 train_time:125075ms step_avg:97.41ms
step:1285/1695 train_time:125176ms step_avg:97.41ms
step:1286/1695 train_time:125277ms step_avg:97.42ms
step:1287/1695 train_time:125379ms step_avg:97.42ms
step:1288/1695 train_time:125480ms step_avg:97.42ms
step:1289/1695 train_time:125582ms step_avg:97.43ms
step:1290/1695 train_time:125683ms step_avg:97.43ms
step:1291/1695 train_time:125786ms step_avg:97.43ms
step:1292/1695 train_time:125886ms step_avg:97.43ms
step:1293/1695 train_time:125986ms step_avg:97.44ms
step:1294/1695 train_time:126089ms step_avg:97.44ms
step:1295/1695 train_time:126191ms step_avg:97.44ms
step:1296/1695 train_time:126292ms step_avg:97.45ms
step:1297/1695 train_time:126393ms step_avg:97.45ms
step:1298/1695 train_time:126494ms step_avg:97.45ms
step:1299/1695 train_time:126594ms step_avg:97.45ms
step:1300/1695 train_time:126694ms step_avg:97.46ms
step:1301/1695 train_time:126795ms step_avg:97.46ms
step:1302/1695 train_time:126896ms step_avg:97.46ms
step:1303/1695 train_time:126997ms step_avg:97.47ms
step:1304/1695 train_time:127098ms step_avg:97.47ms
step:1305/1695 train_time:127200ms step_avg:97.47ms
step:1306/1695 train_time:127303ms step_avg:97.48ms
step:1307/1695 train_time:127405ms step_avg:97.48ms
step:1308/1695 train_time:127506ms step_avg:97.48ms
step:1309/1695 train_time:127607ms step_avg:97.48ms
step:1310/1695 train_time:127709ms step_avg:97.49ms
step:1311/1695 train_time:127812ms step_avg:97.49ms
step:1312/1695 train_time:127913ms step_avg:97.49ms
step:1313/1695 train_time:128014ms step_avg:97.50ms
step:1314/1695 train_time:128114ms step_avg:97.50ms
step:1315/1695 train_time:128215ms step_avg:97.50ms
step:1316/1695 train_time:128315ms step_avg:97.50ms
step:1317/1695 train_time:128415ms step_avg:97.51ms
step:1318/1695 train_time:128517ms step_avg:97.51ms
step:1319/1695 train_time:128618ms step_avg:97.51ms
step:1320/1695 train_time:128720ms step_avg:97.51ms
step:1321/1695 train_time:128823ms step_avg:97.52ms
step:1322/1695 train_time:128924ms step_avg:97.52ms
step:1323/1695 train_time:129025ms step_avg:97.52ms
step:1324/1695 train_time:129127ms step_avg:97.53ms
step:1325/1695 train_time:129227ms step_avg:97.53ms
step:1326/1695 train_time:129329ms step_avg:97.53ms
step:1327/1695 train_time:129432ms step_avg:97.54ms
step:1328/1695 train_time:129533ms step_avg:97.54ms
step:1329/1695 train_time:129633ms step_avg:97.54ms
step:1330/1695 train_time:129733ms step_avg:97.54ms
step:1331/1695 train_time:129834ms step_avg:97.55ms
step:1332/1695 train_time:129936ms step_avg:97.55ms
step:1333/1695 train_time:130037ms step_avg:97.55ms
step:1334/1695 train_time:130138ms step_avg:97.55ms
step:1335/1695 train_time:130239ms step_avg:97.56ms
step:1336/1695 train_time:130342ms step_avg:97.56ms
step:1337/1695 train_time:130444ms step_avg:97.57ms
step:1338/1695 train_time:130545ms step_avg:97.57ms
step:1339/1695 train_time:130647ms step_avg:97.57ms
step:1340/1695 train_time:130748ms step_avg:97.57ms
step:1341/1695 train_time:130848ms step_avg:97.58ms
step:1342/1695 train_time:130949ms step_avg:97.58ms
step:1343/1695 train_time:131050ms step_avg:97.58ms
step:1344/1695 train_time:131152ms step_avg:97.58ms
step:1345/1695 train_time:131253ms step_avg:97.59ms
step:1346/1695 train_time:131355ms step_avg:97.59ms
step:1347/1695 train_time:131455ms step_avg:97.59ms
step:1348/1695 train_time:131556ms step_avg:97.59ms
step:1349/1695 train_time:131658ms step_avg:97.60ms
step:1350/1695 train_time:131759ms step_avg:97.60ms
step:1351/1695 train_time:131859ms step_avg:97.60ms
step:1352/1695 train_time:131961ms step_avg:97.60ms
step:1353/1695 train_time:132064ms step_avg:97.61ms
step:1354/1695 train_time:132165ms step_avg:97.61ms
step:1355/1695 train_time:132266ms step_avg:97.61ms
step:1356/1695 train_time:132369ms step_avg:97.62ms
step:1357/1695 train_time:132470ms step_avg:97.62ms
step:1358/1695 train_time:132571ms step_avg:97.62ms
step:1359/1695 train_time:132673ms step_avg:97.63ms
step:1360/1695 train_time:132773ms step_avg:97.63ms
step:1361/1695 train_time:132873ms step_avg:97.63ms
step:1362/1695 train_time:132973ms step_avg:97.63ms
step:1363/1695 train_time:133075ms step_avg:97.63ms
step:1364/1695 train_time:133176ms step_avg:97.64ms
step:1365/1695 train_time:133278ms step_avg:97.64ms
step:1366/1695 train_time:133379ms step_avg:97.64ms
step:1367/1695 train_time:133481ms step_avg:97.65ms
step:1368/1695 train_time:133584ms step_avg:97.65ms
step:1369/1695 train_time:133685ms step_avg:97.65ms
step:1370/1695 train_time:133785ms step_avg:97.65ms
step:1371/1695 train_time:133886ms step_avg:97.66ms
step:1372/1695 train_time:133987ms step_avg:97.66ms
step:1373/1695 train_time:134090ms step_avg:97.66ms
step:1374/1695 train_time:134192ms step_avg:97.66ms
step:1375/1695 train_time:134293ms step_avg:97.67ms
step:1375/1695 val_loss:3.3553 train_time:134391ms step_avg:97.74ms
step:1376/1695 train_time:134418ms step_avg:97.69ms
step:1377/1695 train_time:134504ms step_avg:97.68ms
step:1378/1695 train_time:134605ms step_avg:97.68ms
step:1379/1695 train_time:134706ms step_avg:97.68ms
step:1380/1695 train_time:134809ms step_avg:97.69ms
step:1381/1695 train_time:134910ms step_avg:97.69ms
step:1382/1695 train_time:135010ms step_avg:97.69ms
step:1383/1695 train_time:135110ms step_avg:97.69ms
step:1384/1695 train_time:135211ms step_avg:97.70ms
step:1385/1695 train_time:135313ms step_avg:97.70ms
step:1386/1695 train_time:135418ms step_avg:97.70ms
step:1387/1695 train_time:135520ms step_avg:97.71ms
step:1388/1695 train_time:135622ms step_avg:97.71ms
step:1389/1695 train_time:135725ms step_avg:97.71ms
step:1390/1695 train_time:135827ms step_avg:97.72ms
step:1391/1695 train_time:135929ms step_avg:97.72ms
step:1392/1695 train_time:136031ms step_avg:97.72ms
step:1393/1695 train_time:136133ms step_avg:97.73ms
step:1394/1695 train_time:136234ms step_avg:97.73ms
step:1395/1695 train_time:136335ms step_avg:97.73ms
step:1396/1695 train_time:136437ms step_avg:97.73ms
step:1397/1695 train_time:136541ms step_avg:97.74ms
step:1398/1695 train_time:136643ms step_avg:97.74ms
step:1399/1695 train_time:136744ms step_avg:97.74ms
step:1400/1695 train_time:136847ms step_avg:97.75ms
step:1401/1695 train_time:136948ms step_avg:97.75ms
step:1402/1695 train_time:137050ms step_avg:97.75ms
step:1403/1695 train_time:137152ms step_avg:97.76ms
step:1404/1695 train_time:137256ms step_avg:97.76ms
step:1405/1695 train_time:137357ms step_avg:97.76ms
step:1406/1695 train_time:137459ms step_avg:97.77ms
step:1407/1695 train_time:137561ms step_avg:97.77ms
step:1408/1695 train_time:137662ms step_avg:97.77ms
step:1409/1695 train_time:137766ms step_avg:97.78ms
step:1410/1695 train_time:137869ms step_avg:97.78ms
step:1411/1695 train_time:137970ms step_avg:97.78ms
step:1412/1695 train_time:138073ms step_avg:97.79ms
step:1413/1695 train_time:138174ms step_avg:97.79ms
step:1414/1695 train_time:138276ms step_avg:97.79ms
step:1415/1695 train_time:138378ms step_avg:97.79ms
step:1416/1695 train_time:138479ms step_avg:97.80ms
step:1417/1695 train_time:138579ms step_avg:97.80ms
step:1418/1695 train_time:138680ms step_avg:97.80ms
step:1419/1695 train_time:138782ms step_avg:97.80ms
step:1420/1695 train_time:138882ms step_avg:97.80ms
step:1421/1695 train_time:138984ms step_avg:97.81ms
step:1422/1695 train_time:139087ms step_avg:97.81ms
step:1423/1695 train_time:139190ms step_avg:97.81ms
step:1424/1695 train_time:139293ms step_avg:97.82ms
step:1425/1695 train_time:139395ms step_avg:97.82ms
step:1426/1695 train_time:139498ms step_avg:97.82ms
step:1427/1695 train_time:139599ms step_avg:97.83ms
step:1428/1695 train_time:139700ms step_avg:97.83ms
step:1429/1695 train_time:139801ms step_avg:97.83ms
step:1430/1695 train_time:139902ms step_avg:97.83ms
step:1431/1695 train_time:140005ms step_avg:97.84ms
step:1432/1695 train_time:140106ms step_avg:97.84ms
step:1433/1695 train_time:140209ms step_avg:97.84ms
step:1434/1695 train_time:140312ms step_avg:97.85ms
step:1435/1695 train_time:140417ms step_avg:97.85ms
step:1436/1695 train_time:140520ms step_avg:97.86ms
step:1437/1695 train_time:140621ms step_avg:97.86ms
step:1438/1695 train_time:140723ms step_avg:97.86ms
step:1439/1695 train_time:140826ms step_avg:97.86ms
step:1440/1695 train_time:140928ms step_avg:97.87ms
step:1441/1695 train_time:141030ms step_avg:97.87ms
step:1442/1695 train_time:141131ms step_avg:97.87ms
step:1443/1695 train_time:141233ms step_avg:97.87ms
step:1444/1695 train_time:141335ms step_avg:97.88ms
step:1445/1695 train_time:141436ms step_avg:97.88ms
step:1446/1695 train_time:141538ms step_avg:97.88ms
step:1447/1695 train_time:141639ms step_avg:97.88ms
step:1448/1695 train_time:141743ms step_avg:97.89ms
step:1449/1695 train_time:141844ms step_avg:97.89ms
step:1450/1695 train_time:141946ms step_avg:97.89ms
step:1451/1695 train_time:142048ms step_avg:97.90ms
step:1452/1695 train_time:142150ms step_avg:97.90ms
step:1453/1695 train_time:142253ms step_avg:97.90ms
step:1454/1695 train_time:142356ms step_avg:97.91ms
step:1455/1695 train_time:142458ms step_avg:97.91ms
step:1456/1695 train_time:142560ms step_avg:97.91ms
step:1457/1695 train_time:142662ms step_avg:97.92ms
step:1458/1695 train_time:142765ms step_avg:97.92ms
step:1459/1695 train_time:142867ms step_avg:97.92ms
step:1460/1695 train_time:142968ms step_avg:97.92ms
step:1461/1695 train_time:143071ms step_avg:97.93ms
step:1462/1695 train_time:143173ms step_avg:97.93ms
step:1463/1695 train_time:143275ms step_avg:97.93ms
step:1464/1695 train_time:143377ms step_avg:97.94ms
step:1465/1695 train_time:143477ms step_avg:97.94ms
step:1466/1695 train_time:143579ms step_avg:97.94ms
step:1467/1695 train_time:143679ms step_avg:97.94ms
step:1468/1695 train_time:143781ms step_avg:97.94ms
step:1469/1695 train_time:143884ms step_avg:97.95ms
step:1470/1695 train_time:143986ms step_avg:97.95ms
step:1471/1695 train_time:144088ms step_avg:97.95ms
step:1472/1695 train_time:144190ms step_avg:97.96ms
step:1473/1695 train_time:144292ms step_avg:97.96ms
step:1474/1695 train_time:144393ms step_avg:97.96ms
step:1475/1695 train_time:144495ms step_avg:97.96ms
step:1476/1695 train_time:144597ms step_avg:97.97ms
step:1477/1695 train_time:144699ms step_avg:97.97ms
step:1478/1695 train_time:144800ms step_avg:97.97ms
step:1479/1695 train_time:144901ms step_avg:97.97ms
step:1480/1695 train_time:145003ms step_avg:97.98ms
step:1481/1695 train_time:145107ms step_avg:97.98ms
step:1482/1695 train_time:145208ms step_avg:97.98ms
step:1483/1695 train_time:145310ms step_avg:97.98ms
step:1484/1695 train_time:145413ms step_avg:97.99ms
step:1485/1695 train_time:145515ms step_avg:97.99ms
step:1486/1695 train_time:145616ms step_avg:97.99ms
step:1487/1695 train_time:145717ms step_avg:97.99ms
step:1488/1695 train_time:145820ms step_avg:98.00ms
step:1489/1695 train_time:145923ms step_avg:98.00ms
step:1490/1695 train_time:146026ms step_avg:98.00ms
step:1491/1695 train_time:146127ms step_avg:98.01ms
step:1492/1695 train_time:146229ms step_avg:98.01ms
step:1493/1695 train_time:146330ms step_avg:98.01ms
step:1494/1695 train_time:146432ms step_avg:98.01ms
step:1495/1695 train_time:146535ms step_avg:98.02ms
step:1496/1695 train_time:146637ms step_avg:98.02ms
step:1497/1695 train_time:146738ms step_avg:98.02ms
step:1498/1695 train_time:146840ms step_avg:98.02ms
step:1499/1695 train_time:146942ms step_avg:98.03ms
step:1500/1695 train_time:147044ms step_avg:98.03ms
step:1500/1695 val_loss:3.3201 train_time:147143ms step_avg:98.10ms
step:1501/1695 train_time:147170ms step_avg:98.05ms
step:1502/1695 train_time:147256ms step_avg:98.04ms
step:1503/1695 train_time:147358ms step_avg:98.04ms
step:1504/1695 train_time:147460ms step_avg:98.05ms
step:1505/1695 train_time:147562ms step_avg:98.05ms
step:1506/1695 train_time:147663ms step_avg:98.05ms
step:1507/1695 train_time:147764ms step_avg:98.05ms
step:1508/1695 train_time:147865ms step_avg:98.05ms
step:1509/1695 train_time:147968ms step_avg:98.06ms
step:1510/1695 train_time:148070ms step_avg:98.06ms
step:1511/1695 train_time:148173ms step_avg:98.06ms
step:1512/1695 train_time:148275ms step_avg:98.07ms
step:1513/1695 train_time:148376ms step_avg:98.07ms
step:1514/1695 train_time:148479ms step_avg:98.07ms
step:1515/1695 train_time:148583ms step_avg:98.07ms
step:1516/1695 train_time:148685ms step_avg:98.08ms
step:1517/1695 train_time:148785ms step_avg:98.08ms
step:1518/1695 train_time:148887ms step_avg:98.08ms
step:1519/1695 train_time:148990ms step_avg:98.08ms
step:1520/1695 train_time:149091ms step_avg:98.09ms
step:1521/1695 train_time:149192ms step_avg:98.09ms
step:1522/1695 train_time:149294ms step_avg:98.09ms
step:1523/1695 train_time:149398ms step_avg:98.09ms
step:1524/1695 train_time:149503ms step_avg:98.10ms
step:1525/1695 train_time:149606ms step_avg:98.10ms
step:1526/1695 train_time:149708ms step_avg:98.10ms
step:1527/1695 train_time:149809ms step_avg:98.11ms
step:1528/1695 train_time:149915ms step_avg:98.11ms
step:1529/1695 train_time:150016ms step_avg:98.11ms
step:1530/1695 train_time:150118ms step_avg:98.12ms
step:1531/1695 train_time:150220ms step_avg:98.12ms
step:1532/1695 train_time:150322ms step_avg:98.12ms
step:1533/1695 train_time:150424ms step_avg:98.12ms
step:1534/1695 train_time:150526ms step_avg:98.13ms
step:1535/1695 train_time:150628ms step_avg:98.13ms
step:1536/1695 train_time:150731ms step_avg:98.13ms
step:1537/1695 train_time:150833ms step_avg:98.13ms
step:1538/1695 train_time:150934ms step_avg:98.14ms
step:1539/1695 train_time:151035ms step_avg:98.14ms
step:1540/1695 train_time:151136ms step_avg:98.14ms
step:1541/1695 train_time:151239ms step_avg:98.14ms
step:1542/1695 train_time:151344ms step_avg:98.15ms
step:1543/1695 train_time:151446ms step_avg:98.15ms
step:1544/1695 train_time:151548ms step_avg:98.15ms
step:1545/1695 train_time:151649ms step_avg:98.15ms
step:1546/1695 train_time:151751ms step_avg:98.16ms
step:1547/1695 train_time:151855ms step_avg:98.16ms
step:1548/1695 train_time:151956ms step_avg:98.16ms
step:1549/1695 train_time:152058ms step_avg:98.17ms
step:1550/1695 train_time:152160ms step_avg:98.17ms
step:1551/1695 train_time:152262ms step_avg:98.17ms
step:1552/1695 train_time:152364ms step_avg:98.17ms
step:1553/1695 train_time:152467ms step_avg:98.18ms
step:1554/1695 train_time:152569ms step_avg:98.18ms
step:1555/1695 train_time:152670ms step_avg:98.18ms
step:1556/1695 train_time:152773ms step_avg:98.18ms
step:1557/1695 train_time:152876ms step_avg:98.19ms
step:1558/1695 train_time:152978ms step_avg:98.19ms
step:1559/1695 train_time:153081ms step_avg:98.19ms
step:1560/1695 train_time:153181ms step_avg:98.19ms
step:1561/1695 train_time:153283ms step_avg:98.20ms
step:1562/1695 train_time:153385ms step_avg:98.20ms
step:1563/1695 train_time:153488ms step_avg:98.20ms
step:1564/1695 train_time:153590ms step_avg:98.20ms
step:1565/1695 train_time:153691ms step_avg:98.21ms
step:1566/1695 train_time:153793ms step_avg:98.21ms
step:1567/1695 train_time:153894ms step_avg:98.21ms
step:1568/1695 train_time:153995ms step_avg:98.21ms
step:1569/1695 train_time:154096ms step_avg:98.21ms
step:1570/1695 train_time:154198ms step_avg:98.22ms
step:1571/1695 train_time:154299ms step_avg:98.22ms
step:1572/1695 train_time:154401ms step_avg:98.22ms
step:1573/1695 train_time:154504ms step_avg:98.22ms
step:1574/1695 train_time:154606ms step_avg:98.22ms
step:1575/1695 train_time:154708ms step_avg:98.23ms
step:1576/1695 train_time:154810ms step_avg:98.23ms
step:1577/1695 train_time:154914ms step_avg:98.23ms
step:1578/1695 train_time:155015ms step_avg:98.23ms
step:1579/1695 train_time:155116ms step_avg:98.24ms
step:1580/1695 train_time:155218ms step_avg:98.24ms
step:1581/1695 train_time:155319ms step_avg:98.24ms
step:1582/1695 train_time:155421ms step_avg:98.24ms
step:1583/1695 train_time:155524ms step_avg:98.25ms
step:1584/1695 train_time:155626ms step_avg:98.25ms
step:1585/1695 train_time:155728ms step_avg:98.25ms
step:1586/1695 train_time:155831ms step_avg:98.25ms
step:1587/1695 train_time:155933ms step_avg:98.26ms
step:1588/1695 train_time:156034ms step_avg:98.26ms
step:1589/1695 train_time:156135ms step_avg:98.26ms
step:1590/1695 train_time:156237ms step_avg:98.26ms
step:1591/1695 train_time:156340ms step_avg:98.26ms
step:1592/1695 train_time:156442ms step_avg:98.27ms
step:1593/1695 train_time:156543ms step_avg:98.27ms
step:1594/1695 train_time:156647ms step_avg:98.27ms
step:1595/1695 train_time:156748ms step_avg:98.27ms
step:1596/1695 train_time:156850ms step_avg:98.28ms
step:1597/1695 train_time:156952ms step_avg:98.28ms
step:1598/1695 train_time:157055ms step_avg:98.28ms
step:1599/1695 train_time:157156ms step_avg:98.28ms
step:1600/1695 train_time:157257ms step_avg:98.29ms
step:1601/1695 train_time:157360ms step_avg:98.29ms
step:1602/1695 train_time:157461ms step_avg:98.29ms
step:1603/1695 train_time:157563ms step_avg:98.29ms
step:1604/1695 train_time:157664ms step_avg:98.29ms
step:1605/1695 train_time:157767ms step_avg:98.30ms
step:1606/1695 train_time:157870ms step_avg:98.30ms
step:1607/1695 train_time:157972ms step_avg:98.30ms
step:1608/1695 train_time:158074ms step_avg:98.30ms
step:1609/1695 train_time:158175ms step_avg:98.31ms
step:1610/1695 train_time:158277ms step_avg:98.31ms
step:1611/1695 train_time:158380ms step_avg:98.31ms
step:1612/1695 train_time:158481ms step_avg:98.31ms
step:1613/1695 train_time:158582ms step_avg:98.32ms
step:1614/1695 train_time:158683ms step_avg:98.32ms
step:1615/1695 train_time:158784ms step_avg:98.32ms
step:1616/1695 train_time:158887ms step_avg:98.32ms
step:1617/1695 train_time:158990ms step_avg:98.32ms
step:1618/1695 train_time:159093ms step_avg:98.33ms
step:1619/1695 train_time:159195ms step_avg:98.33ms
step:1620/1695 train_time:159297ms step_avg:98.33ms
step:1621/1695 train_time:159399ms step_avg:98.33ms
step:1622/1695 train_time:159499ms step_avg:98.34ms
step:1623/1695 train_time:159600ms step_avg:98.34ms
step:1624/1695 train_time:159702ms step_avg:98.34ms
step:1625/1695 train_time:159806ms step_avg:98.34ms
step:1625/1695 val_loss:3.2915 train_time:159906ms step_avg:98.40ms
step:1626/1695 train_time:159932ms step_avg:98.36ms
step:1627/1695 train_time:160019ms step_avg:98.35ms
step:1628/1695 train_time:160122ms step_avg:98.36ms
step:1629/1695 train_time:160225ms step_avg:98.36ms
step:1630/1695 train_time:160326ms step_avg:98.36ms
step:1631/1695 train_time:160428ms step_avg:98.36ms
step:1632/1695 train_time:160529ms step_avg:98.36ms
step:1633/1695 train_time:160629ms step_avg:98.36ms
step:1634/1695 train_time:160731ms step_avg:98.37ms
step:1635/1695 train_time:160834ms step_avg:98.37ms
step:1636/1695 train_time:160938ms step_avg:98.37ms
step:1637/1695 train_time:161041ms step_avg:98.38ms
step:1638/1695 train_time:161143ms step_avg:98.38ms
step:1639/1695 train_time:161246ms step_avg:98.38ms
step:1640/1695 train_time:161349ms step_avg:98.38ms
step:1641/1695 train_time:161452ms step_avg:98.39ms
step:1642/1695 train_time:161554ms step_avg:98.39ms
step:1643/1695 train_time:161656ms step_avg:98.39ms
step:1644/1695 train_time:161759ms step_avg:98.39ms
step:1645/1695 train_time:161861ms step_avg:98.40ms
step:1646/1695 train_time:161965ms step_avg:98.40ms
step:1647/1695 train_time:162069ms step_avg:98.40ms
step:1648/1695 train_time:162173ms step_avg:98.41ms
step:1649/1695 train_time:162276ms step_avg:98.41ms
step:1650/1695 train_time:162379ms step_avg:98.41ms
step:1651/1695 train_time:162482ms step_avg:98.41ms
step:1652/1695 train_time:162585ms step_avg:98.42ms
step:1653/1695 train_time:162688ms step_avg:98.42ms
step:1654/1695 train_time:162790ms step_avg:98.42ms
step:1655/1695 train_time:162893ms step_avg:98.42ms
step:1656/1695 train_time:162998ms step_avg:98.43ms
step:1657/1695 train_time:163100ms step_avg:98.43ms
step:1658/1695 train_time:163203ms step_avg:98.43ms
step:1659/1695 train_time:163308ms step_avg:98.44ms
step:1660/1695 train_time:163411ms step_avg:98.44ms
step:1661/1695 train_time:163516ms step_avg:98.44ms
step:1662/1695 train_time:163620ms step_avg:98.45ms
step:1663/1695 train_time:163723ms step_avg:98.45ms
step:1664/1695 train_time:163825ms step_avg:98.45ms
step:1665/1695 train_time:163931ms step_avg:98.46ms
step:1666/1695 train_time:164034ms step_avg:98.46ms
step:1667/1695 train_time:164136ms step_avg:98.46ms
step:1668/1695 train_time:164242ms step_avg:98.47ms
step:1669/1695 train_time:164346ms step_avg:98.47ms
step:1670/1695 train_time:164448ms step_avg:98.47ms
step:1671/1695 train_time:164550ms step_avg:98.47ms
step:1672/1695 train_time:164654ms step_avg:98.48ms
step:1673/1695 train_time:164757ms step_avg:98.48ms
step:1674/1695 train_time:164860ms step_avg:98.48ms
step:1675/1695 train_time:164963ms step_avg:98.49ms
step:1676/1695 train_time:165067ms step_avg:98.49ms
step:1677/1695 train_time:165168ms step_avg:98.49ms
step:1678/1695 train_time:165272ms step_avg:98.49ms
step:1679/1695 train_time:165377ms step_avg:98.50ms
step:1680/1695 train_time:165480ms step_avg:98.50ms
step:1681/1695 train_time:165584ms step_avg:98.50ms
step:1682/1695 train_time:165690ms step_avg:98.51ms
step:1683/1695 train_time:165791ms step_avg:98.51ms
step:1684/1695 train_time:165894ms step_avg:98.51ms
step:1685/1695 train_time:165997ms step_avg:98.51ms
step:1686/1695 train_time:166100ms step_avg:98.52ms
step:1687/1695 train_time:166203ms step_avg:98.52ms
step:1688/1695 train_time:166305ms step_avg:98.52ms
step:1689/1695 train_time:166406ms step_avg:98.52ms
step:1690/1695 train_time:166508ms step_avg:98.53ms
step:1691/1695 train_time:166611ms step_avg:98.53ms
step:1692/1695 train_time:166713ms step_avg:98.53ms
step:1693/1695 train_time:166816ms step_avg:98.53ms
step:1694/1695 train_time:166920ms step_avg:98.54ms
step:1695/1695 train_time:167023ms step_avg:98.54ms
step:1695/1695 val_loss:3.2786 train_time:167122ms step_avg:98.60ms
peak memory allocated: 34004 MiB reserved: 49180 MiB
