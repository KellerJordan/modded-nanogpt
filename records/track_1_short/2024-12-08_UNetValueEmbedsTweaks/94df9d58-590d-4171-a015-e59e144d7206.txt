import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
import uuid
import time
from dataclasses import dataclass
from pathlib import Path

import torch
from torch import nn
import torch.nn.functional as F
import torch.distributed as dist
import torch._inductor.config as config
from torch.nn.parallel import DistributedDataParallel as DDP
# Use of FlexAttention contributed by @KoszarskyB
from torch.nn.attention.flex_attention import BlockMask, flex_attention

# -----------------------------------------------------------------------------
# Muon optimizer

def zeropower_via_svd(G, steps=None):
    U, S, V = G.svd()
    return U @ V.T

@torch.compile
def zeropower_via_newtonschulz5(G, steps=10, eps=1e-7):
    """
    Newton-Schulz iteration to compute the zeroth power / orthogonalization of G. We opt to use a
    quintic iteration whose coefficients are selected to maximize the slope at zero. For the purpose
    of minimizing steps, it turns out to be empirically effective to keep increasing the slope at
    zero even beyond the point where the iteration no longer converges all the way to one everywhere
    on the interval. This iteration therefore does not produce UV^T but rather something like US'V^T
    where S' is diagonal with S_{ii}' ~ Uniform(0.5, 1.5), which turns out not to hurt model
    performance at all relative to UV^T, where USV^T = G is the SVD.
    """
    assert len(G.shape) == 2
    a, b, c = (3.4445, -4.7750,  2.0315)
    X = G.bfloat16()
    X /= (X.norm() + eps) # ensure top singular value <= 1
    if G.size(0) > G.size(1):
        X = X.T
    for _ in range(steps):
        A = X @ X.T
        B = b * A + c * A @ A # adapted from suggestion by @jxbz, @leloykun, and @YouJiacheng
        X = a * X + B @ X
    if G.size(0) > G.size(1):
        X = X.T
    return X

zeropower_backends = dict(svd=zeropower_via_svd, newtonschulz5=zeropower_via_newtonschulz5)

class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Some warnings:
    - This optimizer assumes that all parameters passed in are 2D.
    - It should not be used for the embedding layer, the final fully connected layer, or any {0,1}-D
    parameters; those should all be optimized by a standard method (e.g., AdamW).
    - To use it with 4D convolutional filters, it works well to just flatten their last 3 dimensions.
    - We believe it is unlikely to work well for training with small batch size.
    - We believe it may not work well for finetuning pretrained models, but we haven't tested this.
    - We have not yet tried this optimizer for training scenarios larger than NanoGPT (124M).

    Arguments:
        lr: The learning rate used by the internal SGD.
        momentum: The momentum used by the internal SGD.
        nesterov: Whether to use Nesterov-style momentum in the internal SGD. (recommended)
        backend: The chosen backend for the orthogonalization step. (recommended: 'newtonschulz5')
        backend_steps: The number of iteration steps to use in the backend, if it is iterative.
    """
    def __init__(self, params, lr=0.02, momentum=0.95, nesterov=True,
                 backend='newtonschulz5', backend_steps=5):
        self.num_process = int(os.environ['WORLD_SIZE'])
        self.rank = int(os.environ["RANK"])
        defaults = dict(lr=lr, momentum=momentum, nesterov=nesterov, backend=backend, backend_steps=backend_steps)
        params: "list[torch.Tensor]" = list(params)
        assert all(isinstance(p, torch.Tensor) for p in params)
        sizes = {p.numel() for p in params}
        param_groups = [
            {
                "params": [p for p in params if p.numel() == size],
                "update_buffer": [
                    torch.empty(size, device="cuda", dtype=torch.bfloat16)
                    for _ in range(self.num_process)
                ],
            }
            for size in sizes
        ]
        super().__init__(param_groups, defaults)

    def step(self):
        for group in self.param_groups:
            lr: float = group["lr"]
            momentum: float = group["momentum"]
            nesterov: bool = group["nesterov"]
            zeropower_backend = zeropower_backends[group["backend"]]
            backend_steps: int = group["backend_steps"]
            update_buffers: "list[torch.Tensor]" = group["update_buffer"]
            # generate weight updates in distributed fashion
            params: "list[torch.Tensor]" = group["params"]
            assert len(params) % self.num_process == 0
            handle = None
            params_world = None
            def update_prev():
                if params_world is None:
                    return
                assert handle is not None
                handle.wait()
                for p_world, g_world in zip(params_world, update_buffers):
                    p_world.data.add_(
                        g_world.view_as(p_world),
                        alpha=-lr * max(1, p_world.size(0) / p_world.size(1)) ** 0.5,
                    )
            for base_i in range(len(params))[::self.num_process]:
                p = params[base_i + self.rank]
                g = p.grad
                assert g is not None
                state = self.state[p] 
                if "momentum_buffer" not in state:
                    state["momentum_buffer"] = torch.zeros_like(g)
                buf: torch.Tensor = state["momentum_buffer"]
                buf.lerp_(g, 1 - momentum)
                g = g.lerp_(buf, momentum) if nesterov else buf
                g = zeropower_backend(g, steps=backend_steps).flatten()
                update_prev()
                handle = dist.all_gather(update_buffers, g, async_op=True)
                params_world = params[base_i : base_i + self.num_process]
            update_prev()


# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the GPT-2 model

def norm(x):
    return F.rms_norm(x, (x.size(-1),))

class CastedLinear(nn.Linear):

    def __init__(self, in_features, out_features):
        super().__init__(in_features, out_features, bias=False)

    def forward(self, x):
        return F.linear(x, self.weight.to(x.dtype))

class Rotary(torch.nn.Module):

    def __init__(self, dim, base=10000):
        super().__init__()
        self.register_buffer('inv_freq', (1 / base) ** (torch.arange(0, dim, 2) / dim))
        self.seq_len_cached = None
        self.cos_cached = None
        self.sin_cached = None

    def forward(self, x):
        seq_len = x.shape[1]
        if seq_len != self.seq_len_cached:
            t = torch.arange(seq_len, device=x.device)
            freqs = torch.outer(t, self.inv_freq)
            self.seq_len_cached = seq_len
            self.cos_cached = freqs.cos()
            self.sin_cached = freqs.sin()
        cos, sin = self.cos_cached[None, :, None, :], self.sin_cached[None, :, None, :]
        # apply_rotary_emb(x, cos, sin)
        x1, x2 = x.chunk(2, dim=3)
        y1 = x1 * cos + x2 * sin
        y2 = x1 * (-sin) + x2 * cos
        return torch.cat((y1, y2), 3).type_as(x)

class CausalSelfAttention(nn.Module):

    def __init__(self, dim, n_head):
        super().__init__()
        assert dim % n_head == 0
        self.n_head = n_head
        self.c_q = CastedLinear(dim, dim)
        self.c_k = CastedLinear(dim, dim)
        self.c_v = CastedLinear(dim, dim)
        # value residual lambda
        self.lambdas = nn.Parameter(torch.tensor([0.5, 0.5])) # @Grad62304977
        # rotary embeddings
        self.rotary = Rotary(dim // n_head) # dim // n_head = head_dim
        # output projection
        self.c_proj = CastedLinear(dim, dim)
        self.c_proj.weight.data.zero_() # zero init suggested by @Grad62304977

    def forward(self, x: torch.Tensor, vi: torch.Tensor, block_mask: BlockMask) -> torch.Tensor:
        B, T = x.size(0), x.size(1) # batch size, sequence length
        assert B == 1, "Must use batch size = 1 for FlexAttention"
        q: torch.Tensor = self.c_q(x).view(B, T, self.n_head, -1)
        k: torch.Tensor = self.c_k(x).view(B, T, self.n_head, -1)
        v: torch.Tensor = self.c_v(x).view(B, T, self.n_head, -1)
        v = self.lambdas[0] * v + self.lambdas[1] * vi.view_as(v) # @Grad62304977
        q, k = norm(q), norm(k) # QK norm suggested by @Grad62304977
        q, k = self.rotary(q), self.rotary(k)
        y = flex_attention(q.transpose(1, 2), k.transpose(1, 2), v.transpose(1, 2), block_mask=block_mask)
        y = y.transpose(1, 2).contiguous().view_as(x) # re-assemble all head outputs side by side
        y = self.c_proj(y)
        return y

class MLP(nn.Module):

    def __init__(self, dim: int):
        super().__init__()
        self.c_fc   = CastedLinear(dim, 4 * dim)
        self.c_proj = CastedLinear(4 * dim, dim)
        self.c_proj.weight.data.zero_() # zero init suggested by @Grad62304977

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        x = self.c_fc(x)
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = self.c_proj(x)
        return x

class Block(nn.Module):

    def __init__(self, config):
        super().__init__()
        self.attn = CausalSelfAttention(config.n_embd, config.n_head)
        self.mlp = MLP(config.n_embd)
        self.lambdas = nn.Parameter(torch.tensor([1., 0.]))

    def forward(self, x: torch.Tensor, vi: torch.Tensor, x0: torch.Tensor, block_mask: BlockMask) -> torch.Tensor:
        x = self.lambdas[0] * x + self.lambdas[1] * x0
        x = x + self.attn(norm(x), vi, block_mask)
        x = x + self.mlp(norm(x))
        return x

# -----------------------------------------------------------------------------
# The main GPT-2 model

@dataclass
class GPTConfig:
    vocab_size : int = 50304
    n_layer : int = 12
    n_head : int = 6 # head dim 128 suggested by @Grad62304977
    n_embd : int = 768
    lm_head_softcap : int = 30

class GPT(nn.Module):

    def __init__(self, config: GPTConfig):
        super().__init__()
        self.n_layer = config.n_layer
        self.lm_head_softcap = config.lm_head_softcap

        # U-net design by @brendanh0gan
        self.num_encoder_layers = config.n_layer // 2 # Half of the layers for encoder
        self.num_decoder_layers = config.n_layer - self.num_encoder_layers # Remaining for decoder
        # Add learnable skip connection weights for decoder layers
        self.skip_weights = nn.Parameter(torch.ones(self.num_decoder_layers))

        self.transformer = nn.ModuleDict(dict(
            wte = nn.Embedding(config.vocab_size, config.n_embd),
            # token value embeddings by @KoszarskyB - inspired by @Grad62304977's value residual learning
            # U-net structure on token value embeddings by @leloykun
            vte = nn.Embedding(config.vocab_size, config.n_embd*self.num_encoder_layers),
            h = nn.ModuleList([Block(config) for _ in range(config.n_layer)]),
        ))
        self.lm_head = CastedLinear(config.n_embd, config.vocab_size)
        self.lm_head.weight.data.zero_() # @Grad62304977

    def forward(self, idx: torch.Tensor, target: torch.Tensor, sliding_window: torch.Tensor) -> torch.Tensor:
        BLOCK_SIZE = 128
        assert idx.ndim == 1
        docs = (idx == 50256).cumsum(0)
        docs_low = docs.reshape(-1, BLOCK_SIZE)[:, 0].contiguous()
        docs_high = docs.reshape(-1, BLOCK_SIZE)[:, -1].contiguous()
        def document_sliding_window_causal(b, h, q_idx, kv_idx):
            causal_mask = q_idx >= kv_idx
            document_mask = docs[q_idx] == docs[kv_idx]
            window_mask = q_idx - kv_idx < sliding_window
            return causal_mask & document_mask & window_mask

        S = len(idx)
        def create_sliding_window_causal_mask(S: int, sliding_window: torch.Tensor):
            kv_idx = block_idx = torch.arange(S // BLOCK_SIZE, dtype=torch.int32, device="cuda")
            q_idx = block_idx[:, None]
            causal_mask = q_idx >= kv_idx
            document_mask = (docs_low[q_idx] <= docs_high[kv_idx]) & (docs_low[kv_idx] <= docs_high[q_idx])
            window_mask = q_idx - kv_idx < ((sliding_window + BLOCK_SIZE - 1) // BLOCK_SIZE)
            dense_mask = causal_mask & document_mask & window_mask
            dense_mask = dense_mask.to(torch.int32)
            num_blocks = dense_mask.sum(dim=-1).to(torch.int32)
            indices = torch.argsort(dense_mask, dim=-1, descending=True, stable=True).to(torch.int32)
            num_blocks = num_blocks[None, None, :].contiguous()
            indices = indices[None, None, :].contiguous()
            return BlockMask.from_kv_blocks(num_blocks, indices, BLOCK_SIZE=BLOCK_SIZE, mask_mod=document_sliding_window_causal)
        block_mask = create_sliding_window_causal_mask(S, sliding_window)

        # forward the GPT model itself
        x = self.transformer.wte(idx[None]) # token embeddings of shape (b, t, n_embd)
        x = norm(x) # @Grad62304977
        x0 = x
        vi = self.transformer.vte(idx[None]).chunk(self.num_encoder_layers, dim=-1)

        # Store outputs for U-Net skip connections
        skip_connections = []
        # Encoder pass - process only the first half of the blocks
        for i in range(self.num_encoder_layers):
            x = self.transformer.h[i](x, vi[i], x0, block_mask)
            skip_connections.append(x)
        # Decoder pass - process the remaining blocks with weighted skip connections
        for i in range(self.num_decoder_layers):
            x = x + self.skip_weights[i] * skip_connections.pop()
            # U-net structure on token value embeddings by @leloykun
            x = self.transformer.h[self.num_encoder_layers + i](x, vi[self.num_encoder_layers-1-i], x0, block_mask)

        x = norm(x)
        logits = self.lm_head(x)
        logits = self.lm_head_softcap * torch.tanh(logits / self.lm_head_softcap) # @Grad62304977
        logits = logits.float()
        loss = F.cross_entropy(logits.view(-1, logits.size(-1)), target.view(-1))
        return loss

# -----------------------------------------------------------------------------
# Our own simple Distributed Data Loader

def _peek_data_shard(file: Path):
    # only reads the header, returns header data
    # header is 256 int32
    header = torch.from_file(f"{file}", False, 256, dtype=torch.int32)
    assert header[0] == 20240520, "magic number mismatch in the data .bin file"
    assert header[1] == 1, "unsupported version"
    return int(header[2]) # number of tokens (claimed)

def _load_data_shard(file: Path, ntok: int):
    with file.open("rb") as f:
        tokens = torch.empty(ntok, dtype=torch.uint16, pin_memory=True)
        f.seek(256 * 4)
        nbytes = f.readinto(tokens.numpy())
        assert nbytes == 2 * ntok, "number of tokens read does not match header?"
    return tokens

class DistributedDataLoader:
    def __init__(self, filename_pattern, T, process_rank, num_processes):
        self.process_rank = process_rank
        self.num_processes = num_processes
        self.T = T

        # glob files that match the pattern
        self.files = sorted(Path.cwd().glob(filename_pattern))
        assert len(self.files) > 0, f"did not find any files that match the pattern {filename_pattern}"

        # load and validate all data shards, count number of tokens in total
        self.ntoks = [_peek_data_shard(file) for file in self.files]
        assert min(self.ntoks) >= num_processes * T + 1
        self.ntok_total = sum(self.ntoks)

        self.reset()

    def reset(self):
        self.current_shard = -1
        self.advance()

    def advance(self): # advance to next data shard
        self.current_shard = (self.current_shard + 1) % len(self.files)
        self.current_position = self.process_rank * self.T
        self.tokens = _load_data_shard(self.files[self.current_shard], self.ntoks[self.current_shard])

    def next_batch(self):
        batch_size = self.T * self.num_processes
        buf = self.tokens[self.current_position:self.current_position+self.T+1]
        # host side async is sufficient;
        # no performance improvement was observed when introducing a separate stream.
        x = buf[:-1].to(device="cuda", dtype=torch.int32, non_blocking=True) # inputs
        y = buf[1:].to(device="cuda", dtype=torch.int64, non_blocking=True) # targets
        # advance current position and load next shard if necessary
        self.current_position += batch_size
        if self.current_position + batch_size + 1 >= len(self.tokens):
            self.advance()
        return x, y

# -----------------------------------------------------------------------------
# int main

@dataclass
class Hyperparameters:
    # data hyperparams
    input_bin : str = 'data/fineweb10B/fineweb_train_*.bin' # input .bin to train on
    input_val_bin : str = 'data/fineweb10B/fineweb_val_*.bin' # input .bin to eval validation loss on
    # optimization hyperparams
    batch_size : int = 8 # batch size, in sequences, across all devices
    sequence_length : int = 64*1024 # sequence length, in tokens
    num_iterations : int = 1480 # number of iterations to run
    warmup_iters : int = 0
    cooldown_iters : int = 600 # number of iterations of linear warmup/cooldown for triangular or trapezoidal schedule
    weight_decay : float = 0
    # evaluation and logging hyperparams
    val_loss_every : int = 125 # every how many steps to evaluate val loss? 0 for only at the end
    val_tokens : int = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    save_every : int = 0 # every how many steps to save the checkpoint? 0 for only at the end
args = Hyperparameters()

# set up DDP (distributed data parallel). torchrun sets this env variable
assert torch.cuda.is_available()
dist.init_process_group(backend='nccl')
ddp_rank = int(os.environ['RANK'])
ddp_local_rank = int(os.environ['LOCAL_RANK'])
ddp_world_size = int(os.environ['WORLD_SIZE'])
device = f'cuda:{ddp_local_rank}'
torch.cuda.set_device(device)
print(f"using device: {device}")
master_process = (ddp_rank == 0) # this process will do logging, checkpointing etc.

# begin logging
logfile = None
if master_process:
    run_id = str(uuid.uuid4())
    logdir = 'logs/%s/' % run_id
    # os.makedirs(logdir, exist_ok=True)
    logfile = 'logs/%s.txt' % run_id
    # create the log file
    with open(logfile, "w") as f:
        # begin the log by printing this file (the Python code)
        f.write(code)
        f.write('='*100 + '\n')
def print0(s, logonly=False):
    if master_process:
        with open(logfile, "a") as f:
            if not logonly:
                print(s)
            f.write(s+'\n')
# log information about the hardware/software environment this is running on
# and print the full `nvidia-smi` to file
print0(f"Running pytorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}\nnvidia-smi:")
import subprocess
result = subprocess.run(['nvidia-smi'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
print0(f'{result.stdout}', logonly=True)
print0('='*100, logonly=True)

# convenience variables
T = args.sequence_length
# calculate the number of steps to take in the val loop.
assert args.val_tokens % (T * ddp_world_size) == 0
val_steps = args.val_tokens // (T * ddp_world_size)
# calculate the steps of gradient accumulation required to attain the desired global batch size.
assert args.batch_size % (ddp_world_size) == 0
train_accumulation_steps = args.batch_size // ddp_world_size
assert train_accumulation_steps == 1

# load tokens
train_loader = DistributedDataLoader(args.input_bin, T, ddp_rank, ddp_world_size)
val_loader = DistributedDataLoader(args.input_val_bin, T, ddp_rank, ddp_world_size)
print0(f"Training DataLoader: total number of tokens: {train_loader.ntok_total} across {len(train_loader.files)} files")
print0(f"Validation DataLoader: total number of tokens: {val_loader.ntok_total} across {len(val_loader.files)} files")
print0('='*100, logonly=True)
x, y = train_loader.next_batch()

# there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency. suggested to me by @Grad62304977.
# this originates from Karpathy's experiments.
num_vocab = 50304
model = GPT(GPTConfig(vocab_size=num_vocab, n_layer=12, n_head=6, n_embd=768))
model = model.cuda().bfloat16()
for m in model.modules():
    if isinstance(m, CastedLinear):
        m.float()
if hasattr(config, "coordinate_descent_tuning"):
    config.coordinate_descent_tuning = True # suggested by @Chillee
model = torch.compile(model)
# here we wrap model into DDP container
model = DDP(model, device_ids=[ddp_local_rank])
raw_model = model.module # always contains the "raw" unwrapped model

# init the optimizer(s)
optimizer1 = torch.optim.Adam([raw_model.transformer.wte.weight, raw_model.transformer.vte.weight], lr=0.6, betas=(0.8, 0.95), fused=True)
optimizer2 = torch.optim.Adam([raw_model.lm_head.weight], lr=0.008, betas=(0.8, 0.95), fused=True)
params = list(raw_model.transformer.h.parameters())
matrix_params = [p for p in params if p.ndim == 2]
scalar_params = [p for p in params if p.ndim < 2] + [raw_model.skip_weights]
optimizer3 = Muon(matrix_params, lr=0.05, momentum=0.95)
optimizer4 = torch.optim.Adam(scalar_params, lr=0.04, betas=(0.8, 0.95), fused=True)
optimizers = [optimizer1, optimizer2, optimizer3, optimizer4]
# learning rate decay scheduler (linear warmup and cooldown)
def get_lr(it):
    assert it <= args.num_iterations
    # 1) linear warmup for warmup_iters steps
    if it < args.warmup_iters:
        return (it+1) / args.warmup_iters
    # 2) constant lr for a while
    elif it < args.num_iterations - args.cooldown_iters:
        return 1.0
    # 3) linear cooldown
    else:
        decay_ratio = (args.num_iterations - it) / args.cooldown_iters
        return decay_ratio
schedulers = [torch.optim.lr_scheduler.LambdaLR(opt, get_lr) for opt in optimizers]

sliding_window_size = torch.tensor(64, dtype=torch.int32, device="cuda")
sw_size_prev = 64
# Start training loop
training_time_ms = 0
# start the clock
torch.cuda.synchronize()
t0 = time.perf_counter()
# begin training
for step in range(args.num_iterations + 1):
    last_step = (step == args.num_iterations)
    # This effectively ignores timing first 10 steps, which are slower for weird reasons.
    # Alternately, and slightly more correctly in terms of benchmarking, we could do 10
    # steps with dummy data first, and then re-initialize the model and reset the loader.
    if step == 10:
        training_time_ms = 0
        t0 = time.perf_counter()
    timed_steps = float('nan') if step <= 11 else (step - 10) + 1 # <= 11 to avoid bug in val

    # Set the sliding window size for the current step, in chunks of 64. By @fernbear.bsky.social
    sw_size =  64 * int((64 + (1792 - 64) * step / args.num_iterations) // 64)
    if sw_size != sw_size_prev:
        sliding_window_size.copy_(sw_size, non_blocking=True)
        sw_size_prev = sw_size

    # once in a while evaluate the validation dataset
    if (last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0)):
        # stop the clock
        torch.cuda.synchronize()
        training_time_ms += 1000 * (time.perf_counter() - t0)
        # run validation batches
        model.eval()
        val_loader.reset()
        val_loss = 0.0
        for _ in range(val_steps):
            with torch.no_grad():
                x_val, y_val = val_loader.next_batch()
                val_loss += model(x_val, y_val, sliding_window=sliding_window_size)
        dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
        val_loss /= val_steps
        # log val loss to console and to logfile
        print0(f'step:{step}/{args.num_iterations} val_loss:{val_loss:.4f} train_time:{training_time_ms:.0f}ms step_avg:{training_time_ms/(timed_steps-1):.2f}ms')
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.perf_counter()

    if master_process and (last_step or (args.save_every > 0 and step % args.save_every == 0)):
        # stop the clock
        torch.cuda.synchronize()
        training_time_ms += 1000 * (time.perf_counter() - t0)
        # save the state of the training process
        log = dict(step=step, code=code, model=raw_model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
        # torch.save(log, 'logs/%s/state_step%06d.pt' % (run_id, step))
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.perf_counter()

    # bit confusing: we want to make sure to eval on 0th iteration
    # but also after the very last iteration. so we loop for step <= num_iterations
    # instead of just < num_iterations (one extra due to <=), only to do
    # the validation/sampling one last time, and then we break right here as we're done.
    if last_step:
        break

    # --------------- TRAINING SECTION BEGIN -----------------
    model.train()
    loss = model(x, y, sliding_window=sliding_window_size)
    loss.backward()
    del loss
    # advance the dataset for the next batch
    x, y = train_loader.next_batch()
    # momentum warmup for Muon
    frac = min(step/300, 1)
    for group in optimizer3.param_groups:
        group['momentum'] = (1 - frac) * 0.85 + frac * 0.95
    # step the optimizers and schedulers
    for opt, sched in zip(optimizers, schedulers):
        opt.step()
        sched.step()
    # null the gradients
    model.zero_grad(set_to_none=True)
    # --------------- TRAINING SECTION END -------------------
    # everything that follows now is just diagnostics, prints, logging, etc.
    approx_time = training_time_ms + 1000 * (time.perf_counter() - t0)
    print0(f"step:{step+1}/{args.num_iterations} train_time:{approx_time:.0f}ms step_avg:{approx_time/timed_steps:.2f}ms")

if master_process:
    print(f"peak memory consumption: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB")

# -------------------------------------------------------------------------
# clean up nice
dist.destroy_process_group()
====================================================================================================
Running pytorch 2.6.0.dev20241203+cu124 compiled for CUDA 12.4
nvidia-smi:
Sun Dec  8 11:46:47 2024       
+---------------------------------------------------------------------------------------+
| NVIDIA-SMI 535.129.03             Driver Version: 535.129.03   CUDA Version: 12.6     |
|-----------------------------------------+----------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |
|                                         |                      |               MIG M. |
|=========================================+======================+======================|
|   0  NVIDIA H100 80GB HBM3          On  | 00000000:65:02.0 Off |                    0 |
| N/A   37C    P0              74W / 700W |      7MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  | 00000000:67:02.0 Off |                    0 |
| N/A   45C    P0              78W / 700W |     26MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  | 00000000:69:02.0 Off |                    0 |
| N/A   46C    P0             124W / 700W |    533MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  | 00000000:6B:02.0 Off |                    0 |
| N/A   39C    P0              93W / 700W |     26MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  | 00000000:6F:02.0 Off |                    0 |
| N/A   39C    P0             117W / 700W |    533MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  | 00000000:71:02.0 Off |                    0 |
| N/A   46C    P0             103W / 700W |     27MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  | 00000000:73:02.0 Off |                    0 |
| N/A   46C    P0             128W / 700W |    533MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  | 00000000:75:02.0 Off |                    0 |
| N/A   39C    P0             124W / 700W |    533MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
                                                                                         
+---------------------------------------------------------------------------------------+
| Processes:                                                                            |
|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |
|        ID   ID                                                             Usage      |
|=======================================================================================|
+---------------------------------------------------------------------------------------+

====================================================================================================
Training DataLoader: total number of tokens: 3200000000 across 32 files
Validation DataLoader: total number of tokens: 100000000 across 1 files
====================================================================================================
step:0/1480 val_loss:10.8258 train_time:0ms step_avg:nanms
step:1/1480 train_time:23702ms step_avg:nanms
step:2/1480 train_time:23835ms step_avg:nanms
step:3/1480 train_time:23974ms step_avg:nanms
step:4/1480 train_time:24115ms step_avg:nanms
step:5/1480 train_time:24255ms step_avg:nanms
step:6/1480 train_time:24396ms step_avg:nanms
step:7/1480 train_time:24536ms step_avg:nanms
step:8/1480 train_time:24679ms step_avg:nanms
step:9/1480 train_time:24824ms step_avg:nanms
step:10/1480 train_time:24967ms step_avg:nanms
step:11/1480 train_time:143ms step_avg:nanms
step:12/1480 train_time:285ms step_avg:nanms
step:13/1480 train_time:428ms step_avg:142.65ms
step:14/1480 train_time:569ms step_avg:142.18ms
step:15/1480 train_time:711ms step_avg:142.22ms
step:16/1480 train_time:853ms step_avg:142.22ms
step:17/1480 train_time:998ms step_avg:142.52ms
step:18/1480 train_time:1143ms step_avg:142.83ms
step:19/1480 train_time:1286ms step_avg:142.89ms
step:20/1480 train_time:1429ms step_avg:142.92ms
step:21/1480 train_time:1570ms step_avg:142.74ms
step:22/1480 train_time:1712ms step_avg:142.69ms
step:23/1480 train_time:1856ms step_avg:142.79ms
step:24/1480 train_time:2001ms step_avg:142.93ms
step:25/1480 train_time:2145ms step_avg:143.02ms
step:26/1480 train_time:2287ms step_avg:142.96ms
step:27/1480 train_time:2430ms step_avg:142.96ms
step:28/1480 train_time:2571ms step_avg:142.85ms
step:29/1480 train_time:2712ms step_avg:142.75ms
step:30/1480 train_time:2854ms step_avg:142.68ms
step:31/1480 train_time:2998ms step_avg:142.74ms
step:32/1480 train_time:3142ms step_avg:142.84ms
step:33/1480 train_time:3285ms step_avg:142.85ms
step:34/1480 train_time:3428ms step_avg:142.83ms
step:35/1480 train_time:3570ms step_avg:142.80ms
step:36/1480 train_time:3712ms step_avg:142.78ms
step:37/1480 train_time:3853ms step_avg:142.71ms
step:38/1480 train_time:3995ms step_avg:142.69ms
step:39/1480 train_time:4139ms step_avg:142.72ms
step:40/1480 train_time:4283ms step_avg:142.75ms
step:41/1480 train_time:4426ms step_avg:142.77ms
step:42/1480 train_time:4568ms step_avg:142.74ms
step:43/1480 train_time:4709ms step_avg:142.71ms
step:44/1480 train_time:4850ms step_avg:142.65ms
step:45/1480 train_time:4994ms step_avg:142.68ms
step:46/1480 train_time:5139ms step_avg:142.74ms
step:47/1480 train_time:5284ms step_avg:142.80ms
step:48/1480 train_time:5427ms step_avg:142.80ms
step:49/1480 train_time:5568ms step_avg:142.77ms
step:50/1480 train_time:5711ms step_avg:142.77ms
step:51/1480 train_time:5852ms step_avg:142.72ms
step:52/1480 train_time:5995ms step_avg:142.73ms
step:53/1480 train_time:6138ms step_avg:142.75ms
step:54/1480 train_time:6283ms step_avg:142.79ms
step:55/1480 train_time:6427ms step_avg:142.82ms
step:56/1480 train_time:6568ms step_avg:142.79ms
step:57/1480 train_time:6711ms step_avg:142.80ms
step:58/1480 train_time:6853ms step_avg:142.77ms
step:59/1480 train_time:6997ms step_avg:142.79ms
step:60/1480 train_time:7140ms step_avg:142.80ms
step:61/1480 train_time:7285ms step_avg:142.84ms
step:62/1480 train_time:7429ms step_avg:142.86ms
step:63/1480 train_time:7571ms step_avg:142.85ms
step:64/1480 train_time:7713ms step_avg:142.83ms
step:65/1480 train_time:7856ms step_avg:142.83ms
step:66/1480 train_time:7999ms step_avg:142.85ms
step:67/1480 train_time:8143ms step_avg:142.86ms
step:68/1480 train_time:8288ms step_avg:142.89ms
step:69/1480 train_time:8431ms step_avg:142.90ms
step:70/1480 train_time:8576ms step_avg:142.93ms
step:71/1480 train_time:8719ms step_avg:142.94ms
step:72/1480 train_time:8861ms step_avg:142.92ms
step:73/1480 train_time:9004ms step_avg:142.93ms
step:74/1480 train_time:9147ms step_avg:142.92ms
step:75/1480 train_time:9290ms step_avg:142.92ms
step:76/1480 train_time:9433ms step_avg:142.92ms
step:77/1480 train_time:9577ms step_avg:142.94ms
step:78/1480 train_time:9721ms step_avg:142.96ms
step:79/1480 train_time:9864ms step_avg:142.96ms
step:80/1480 train_time:10008ms step_avg:142.97ms
step:81/1480 train_time:10149ms step_avg:142.95ms
step:82/1480 train_time:10290ms step_avg:142.92ms
step:83/1480 train_time:10433ms step_avg:142.92ms
step:84/1480 train_time:10575ms step_avg:142.91ms
step:85/1480 train_time:10718ms step_avg:142.90ms
step:86/1480 train_time:10860ms step_avg:142.90ms
step:87/1480 train_time:11004ms step_avg:142.91ms
step:88/1480 train_time:11146ms step_avg:142.90ms
step:89/1480 train_time:11288ms step_avg:142.88ms
step:90/1480 train_time:11430ms step_avg:142.87ms
step:91/1480 train_time:11571ms step_avg:142.86ms
step:92/1480 train_time:11717ms step_avg:142.89ms
step:93/1480 train_time:11859ms step_avg:142.88ms
step:94/1480 train_time:12003ms step_avg:142.90ms
step:95/1480 train_time:12146ms step_avg:142.90ms
step:96/1480 train_time:12288ms step_avg:142.88ms
step:97/1480 train_time:12431ms step_avg:142.88ms
step:98/1480 train_time:12573ms step_avg:142.88ms
step:99/1480 train_time:12715ms step_avg:142.87ms
step:100/1480 train_time:12859ms step_avg:142.88ms
step:101/1480 train_time:13004ms step_avg:142.90ms
step:102/1480 train_time:13146ms step_avg:142.89ms
step:103/1480 train_time:13288ms step_avg:142.88ms
step:104/1480 train_time:13431ms step_avg:142.88ms
step:105/1480 train_time:13573ms step_avg:142.87ms
step:106/1480 train_time:13714ms step_avg:142.86ms
step:107/1480 train_time:13856ms step_avg:142.85ms
step:108/1480 train_time:14001ms step_avg:142.87ms
step:109/1480 train_time:14146ms step_avg:142.89ms
step:110/1480 train_time:14287ms step_avg:142.87ms
step:111/1480 train_time:14432ms step_avg:142.90ms
step:112/1480 train_time:14580ms step_avg:142.94ms
step:113/1480 train_time:14727ms step_avg:142.98ms
step:114/1480 train_time:14872ms step_avg:143.00ms
step:115/1480 train_time:15020ms step_avg:143.05ms
step:116/1480 train_time:15169ms step_avg:143.10ms
step:117/1480 train_time:15315ms step_avg:143.13ms
step:118/1480 train_time:15463ms step_avg:143.17ms
step:119/1480 train_time:15610ms step_avg:143.21ms
step:120/1480 train_time:15756ms step_avg:143.24ms
step:121/1480 train_time:15903ms step_avg:143.27ms
step:122/1480 train_time:16050ms step_avg:143.31ms
step:123/1480 train_time:16196ms step_avg:143.33ms
step:124/1480 train_time:16344ms step_avg:143.37ms
step:125/1480 train_time:16491ms step_avg:143.40ms
step:125/1480 val_loss:4.4154 train_time:16549ms step_avg:143.90ms
step:126/1480 train_time:16646ms step_avg:143.50ms
step:127/1480 train_time:16794ms step_avg:143.54ms
step:128/1480 train_time:16941ms step_avg:143.56ms
step:129/1480 train_time:17087ms step_avg:143.59ms
step:130/1480 train_time:17231ms step_avg:143.59ms
step:131/1480 train_time:17376ms step_avg:143.61ms
step:132/1480 train_time:17522ms step_avg:143.62ms
step:133/1480 train_time:17671ms step_avg:143.66ms
step:134/1480 train_time:17819ms step_avg:143.70ms
step:135/1480 train_time:17966ms step_avg:143.73ms
step:136/1480 train_time:18111ms step_avg:143.74ms
step:137/1480 train_time:18258ms step_avg:143.76ms
step:138/1480 train_time:18405ms step_avg:143.79ms
step:139/1480 train_time:18551ms step_avg:143.81ms
step:140/1480 train_time:18697ms step_avg:143.83ms
step:141/1480 train_time:18846ms step_avg:143.86ms
step:142/1480 train_time:18994ms step_avg:143.89ms
step:143/1480 train_time:19142ms step_avg:143.93ms
step:144/1480 train_time:19288ms step_avg:143.94ms
step:145/1480 train_time:19433ms step_avg:143.95ms
step:146/1480 train_time:19580ms step_avg:143.97ms
step:147/1480 train_time:19727ms step_avg:144.00ms
step:148/1480 train_time:19873ms step_avg:144.01ms
step:149/1480 train_time:20021ms step_avg:144.04ms
step:150/1480 train_time:20168ms step_avg:144.06ms
step:151/1480 train_time:20314ms step_avg:144.07ms
step:152/1480 train_time:20461ms step_avg:144.09ms
step:153/1480 train_time:20608ms step_avg:144.11ms
step:154/1480 train_time:20754ms step_avg:144.13ms
step:155/1480 train_time:20901ms step_avg:144.14ms
step:156/1480 train_time:21050ms step_avg:144.18ms
step:157/1480 train_time:21198ms step_avg:144.20ms
step:158/1480 train_time:21345ms step_avg:144.22ms
step:159/1480 train_time:21490ms step_avg:144.23ms
step:160/1480 train_time:21639ms step_avg:144.26ms
step:161/1480 train_time:21786ms step_avg:144.28ms
step:162/1480 train_time:21931ms step_avg:144.28ms
step:163/1480 train_time:22081ms step_avg:144.32ms
step:164/1480 train_time:22229ms step_avg:144.34ms
step:165/1480 train_time:22374ms step_avg:144.35ms
step:166/1480 train_time:22521ms step_avg:144.37ms
step:167/1480 train_time:22668ms step_avg:144.38ms
step:168/1480 train_time:22814ms step_avg:144.39ms
step:169/1480 train_time:22963ms step_avg:144.42ms
step:170/1480 train_time:23110ms step_avg:144.44ms
step:171/1480 train_time:23257ms step_avg:144.46ms
step:172/1480 train_time:23405ms step_avg:144.47ms
step:173/1480 train_time:23551ms step_avg:144.48ms
step:174/1480 train_time:23697ms step_avg:144.50ms
step:175/1480 train_time:23846ms step_avg:144.52ms
step:176/1480 train_time:23992ms step_avg:144.53ms
step:177/1480 train_time:24143ms step_avg:144.57ms
step:178/1480 train_time:24289ms step_avg:144.58ms
step:179/1480 train_time:24436ms step_avg:144.59ms
step:180/1480 train_time:24583ms step_avg:144.61ms
step:181/1480 train_time:24729ms step_avg:144.62ms
step:182/1480 train_time:24877ms step_avg:144.63ms
step:183/1480 train_time:25024ms step_avg:144.65ms
step:184/1480 train_time:25171ms step_avg:144.66ms
step:185/1480 train_time:25318ms step_avg:144.67ms
step:186/1480 train_time:25465ms step_avg:144.69ms
step:187/1480 train_time:25610ms step_avg:144.69ms
step:188/1480 train_time:25756ms step_avg:144.70ms
step:189/1480 train_time:25903ms step_avg:144.71ms
step:190/1480 train_time:26050ms step_avg:144.72ms
step:191/1480 train_time:26197ms step_avg:144.73ms
step:192/1480 train_time:26345ms step_avg:144.75ms
step:193/1480 train_time:26491ms step_avg:144.76ms
step:194/1480 train_time:26639ms step_avg:144.78ms
step:195/1480 train_time:26787ms step_avg:144.79ms
step:196/1480 train_time:26933ms step_avg:144.80ms
step:197/1480 train_time:27082ms step_avg:144.83ms
step:198/1480 train_time:27229ms step_avg:144.84ms
step:199/1480 train_time:27376ms step_avg:144.85ms
step:200/1480 train_time:27524ms step_avg:144.87ms
step:201/1480 train_time:27671ms step_avg:144.87ms
step:202/1480 train_time:27818ms step_avg:144.88ms
step:203/1480 train_time:27966ms step_avg:144.90ms
step:204/1480 train_time:28113ms step_avg:144.91ms
step:205/1480 train_time:28261ms step_avg:144.93ms
step:206/1480 train_time:28408ms step_avg:144.94ms
step:207/1480 train_time:28553ms step_avg:144.94ms
step:208/1480 train_time:28701ms step_avg:144.95ms
step:209/1480 train_time:28849ms step_avg:144.97ms
step:210/1480 train_time:28995ms step_avg:144.97ms
step:211/1480 train_time:29143ms step_avg:144.99ms
step:212/1480 train_time:29290ms step_avg:145.00ms
step:213/1480 train_time:29437ms step_avg:145.01ms
step:214/1480 train_time:29585ms step_avg:145.02ms
step:215/1480 train_time:29731ms step_avg:145.03ms
step:216/1480 train_time:29879ms step_avg:145.04ms
step:217/1480 train_time:30026ms step_avg:145.05ms
step:218/1480 train_time:30173ms step_avg:145.06ms
step:219/1480 train_time:30320ms step_avg:145.07ms
step:220/1480 train_time:30468ms step_avg:145.08ms
step:221/1480 train_time:30615ms step_avg:145.10ms
step:222/1480 train_time:30766ms step_avg:145.12ms
step:223/1480 train_time:30917ms step_avg:145.15ms
step:224/1480 train_time:31068ms step_avg:145.18ms
step:225/1480 train_time:31220ms step_avg:145.21ms
step:226/1480 train_time:31372ms step_avg:145.24ms
step:227/1480 train_time:31524ms step_avg:145.27ms
step:228/1480 train_time:31673ms step_avg:145.29ms
step:229/1480 train_time:31824ms step_avg:145.31ms
step:230/1480 train_time:31974ms step_avg:145.34ms
step:231/1480 train_time:32125ms step_avg:145.36ms
step:232/1480 train_time:32276ms step_avg:145.39ms
step:233/1480 train_time:32426ms step_avg:145.41ms
step:234/1480 train_time:32578ms step_avg:145.44ms
step:235/1480 train_time:32729ms step_avg:145.46ms
step:236/1480 train_time:32878ms step_avg:145.48ms
step:237/1480 train_time:33028ms step_avg:145.50ms
step:238/1480 train_time:33178ms step_avg:145.52ms
step:239/1480 train_time:33328ms step_avg:145.54ms
step:240/1480 train_time:33479ms step_avg:145.56ms
step:241/1480 train_time:33630ms step_avg:145.58ms
step:242/1480 train_time:33783ms step_avg:145.61ms
step:243/1480 train_time:33933ms step_avg:145.63ms
step:244/1480 train_time:34084ms step_avg:145.66ms
step:245/1480 train_time:34233ms step_avg:145.67ms
step:246/1480 train_time:34384ms step_avg:145.69ms
step:247/1480 train_time:34534ms step_avg:145.71ms
step:248/1480 train_time:34686ms step_avg:145.74ms
step:249/1480 train_time:34836ms step_avg:145.76ms
step:250/1480 train_time:34987ms step_avg:145.78ms
step:250/1480 val_loss:3.9964 train_time:35045ms step_avg:146.02ms
step:251/1480 train_time:35142ms step_avg:145.82ms
step:252/1480 train_time:35294ms step_avg:145.84ms
step:253/1480 train_time:35444ms step_avg:145.86ms
step:254/1480 train_time:35593ms step_avg:145.87ms
step:255/1480 train_time:35742ms step_avg:145.88ms
step:256/1480 train_time:35891ms step_avg:145.90ms
step:257/1480 train_time:36041ms step_avg:145.92ms
step:258/1480 train_time:36194ms step_avg:145.95ms
step:259/1480 train_time:36346ms step_avg:145.97ms
step:260/1480 train_time:36497ms step_avg:145.99ms
step:261/1480 train_time:36646ms step_avg:146.00ms
step:262/1480 train_time:36797ms step_avg:146.02ms
step:263/1480 train_time:36947ms step_avg:146.04ms
step:264/1480 train_time:37099ms step_avg:146.06ms
step:265/1480 train_time:37249ms step_avg:146.07ms
step:266/1480 train_time:37401ms step_avg:146.10ms
step:267/1480 train_time:37551ms step_avg:146.11ms
step:268/1480 train_time:37702ms step_avg:146.13ms
step:269/1480 train_time:37851ms step_avg:146.14ms
step:270/1480 train_time:38002ms step_avg:146.16ms
step:271/1480 train_time:38152ms step_avg:146.18ms
step:272/1480 train_time:38303ms step_avg:146.19ms
step:273/1480 train_time:38453ms step_avg:146.21ms
step:274/1480 train_time:38604ms step_avg:146.23ms
step:275/1480 train_time:38755ms step_avg:146.24ms
step:276/1480 train_time:38905ms step_avg:146.26ms
step:277/1480 train_time:39054ms step_avg:146.27ms
step:278/1480 train_time:39205ms step_avg:146.29ms
step:279/1480 train_time:39355ms step_avg:146.30ms
step:280/1480 train_time:39506ms step_avg:146.32ms
step:281/1480 train_time:39656ms step_avg:146.33ms
step:282/1480 train_time:39806ms step_avg:146.35ms
step:283/1480 train_time:39956ms step_avg:146.36ms
step:284/1480 train_time:40107ms step_avg:146.38ms
step:285/1480 train_time:40258ms step_avg:146.39ms
step:286/1480 train_time:40408ms step_avg:146.41ms
step:287/1480 train_time:40560ms step_avg:146.43ms
step:288/1480 train_time:40709ms step_avg:146.43ms
step:289/1480 train_time:40860ms step_avg:146.45ms
step:290/1480 train_time:41009ms step_avg:146.46ms
step:291/1480 train_time:41161ms step_avg:146.48ms
step:292/1480 train_time:41311ms step_avg:146.49ms
step:293/1480 train_time:41462ms step_avg:146.51ms
step:294/1480 train_time:41613ms step_avg:146.52ms
step:295/1480 train_time:41764ms step_avg:146.54ms
step:296/1480 train_time:41914ms step_avg:146.55ms
step:297/1480 train_time:42065ms step_avg:146.57ms
step:298/1480 train_time:42215ms step_avg:146.58ms
step:299/1480 train_time:42365ms step_avg:146.59ms
step:300/1480 train_time:42516ms step_avg:146.61ms
step:301/1480 train_time:42666ms step_avg:146.62ms
step:302/1480 train_time:42816ms step_avg:146.63ms
step:303/1480 train_time:42966ms step_avg:146.64ms
step:304/1480 train_time:43116ms step_avg:146.65ms
step:305/1480 train_time:43267ms step_avg:146.67ms
step:306/1480 train_time:43417ms step_avg:146.68ms
step:307/1480 train_time:43568ms step_avg:146.69ms
step:308/1480 train_time:43719ms step_avg:146.71ms
step:309/1480 train_time:43870ms step_avg:146.72ms
step:310/1480 train_time:44020ms step_avg:146.73ms
step:311/1480 train_time:44171ms step_avg:146.75ms
step:312/1480 train_time:44321ms step_avg:146.76ms
step:313/1480 train_time:44473ms step_avg:146.78ms
step:314/1480 train_time:44624ms step_avg:146.79ms
step:315/1480 train_time:44774ms step_avg:146.80ms
step:316/1480 train_time:44925ms step_avg:146.81ms
step:317/1480 train_time:45075ms step_avg:146.82ms
step:318/1480 train_time:45225ms step_avg:146.84ms
step:319/1480 train_time:45378ms step_avg:146.85ms
step:320/1480 train_time:45529ms step_avg:146.87ms
step:321/1480 train_time:45680ms step_avg:146.88ms
step:322/1480 train_time:45829ms step_avg:146.89ms
step:323/1480 train_time:45980ms step_avg:146.90ms
step:324/1480 train_time:46129ms step_avg:146.91ms
step:325/1480 train_time:46280ms step_avg:146.92ms
step:326/1480 train_time:46430ms step_avg:146.93ms
step:327/1480 train_time:46581ms step_avg:146.94ms
step:328/1480 train_time:46731ms step_avg:146.95ms
step:329/1480 train_time:46882ms step_avg:146.97ms
step:330/1480 train_time:47034ms step_avg:146.98ms
step:331/1480 train_time:47188ms step_avg:147.00ms
step:332/1480 train_time:47341ms step_avg:147.02ms
step:333/1480 train_time:47495ms step_avg:147.04ms
step:334/1480 train_time:47648ms step_avg:147.06ms
step:335/1480 train_time:47802ms step_avg:147.08ms
step:336/1480 train_time:47956ms step_avg:147.10ms
step:337/1480 train_time:48110ms step_avg:147.13ms
step:338/1480 train_time:48264ms step_avg:147.15ms
step:339/1480 train_time:48416ms step_avg:147.16ms
step:340/1480 train_time:48570ms step_avg:147.18ms
step:341/1480 train_time:48724ms step_avg:147.20ms
step:342/1480 train_time:48877ms step_avg:147.22ms
step:343/1480 train_time:49030ms step_avg:147.24ms
step:344/1480 train_time:49185ms step_avg:147.26ms
step:345/1480 train_time:49340ms step_avg:147.28ms
step:346/1480 train_time:49494ms step_avg:147.30ms
step:347/1480 train_time:49648ms step_avg:147.32ms
step:348/1480 train_time:49803ms step_avg:147.35ms
step:349/1480 train_time:49958ms step_avg:147.37ms
step:350/1480 train_time:50112ms step_avg:147.39ms
step:351/1480 train_time:50267ms step_avg:147.41ms
step:352/1480 train_time:50420ms step_avg:147.43ms
step:353/1480 train_time:50574ms step_avg:147.44ms
step:354/1480 train_time:50726ms step_avg:147.46ms
step:355/1480 train_time:50880ms step_avg:147.48ms
step:356/1480 train_time:51035ms step_avg:147.50ms
step:357/1480 train_time:51190ms step_avg:147.52ms
step:358/1480 train_time:51344ms step_avg:147.54ms
step:359/1480 train_time:51499ms step_avg:147.56ms
step:360/1480 train_time:51654ms step_avg:147.58ms
step:361/1480 train_time:51807ms step_avg:147.60ms
step:362/1480 train_time:51961ms step_avg:147.62ms
step:363/1480 train_time:52115ms step_avg:147.64ms
step:364/1480 train_time:52269ms step_avg:147.65ms
step:365/1480 train_time:52423ms step_avg:147.67ms
step:366/1480 train_time:52577ms step_avg:147.69ms
step:367/1480 train_time:52730ms step_avg:147.70ms
step:368/1480 train_time:52883ms step_avg:147.72ms
step:369/1480 train_time:53036ms step_avg:147.73ms
step:370/1480 train_time:53190ms step_avg:147.75ms
step:371/1480 train_time:53344ms step_avg:147.77ms
step:372/1480 train_time:53500ms step_avg:147.79ms
step:373/1480 train_time:53655ms step_avg:147.81ms
step:374/1480 train_time:53807ms step_avg:147.82ms
step:375/1480 train_time:53961ms step_avg:147.84ms
step:375/1480 val_loss:3.8085 train_time:54022ms step_avg:148.00ms
step:376/1480 train_time:54119ms step_avg:147.87ms
step:377/1480 train_time:54274ms step_avg:147.89ms
step:378/1480 train_time:54427ms step_avg:147.90ms
step:379/1480 train_time:54580ms step_avg:147.91ms
step:380/1480 train_time:54732ms step_avg:147.92ms
step:381/1480 train_time:54884ms step_avg:147.93ms
step:382/1480 train_time:55037ms step_avg:147.95ms
step:383/1480 train_time:55192ms step_avg:147.97ms
step:384/1480 train_time:55345ms step_avg:147.98ms
step:385/1480 train_time:55500ms step_avg:148.00ms
step:386/1480 train_time:55653ms step_avg:148.01ms
step:387/1480 train_time:55807ms step_avg:148.03ms
step:388/1480 train_time:55960ms step_avg:148.04ms
step:389/1480 train_time:56114ms step_avg:148.06ms
step:390/1480 train_time:56270ms step_avg:148.08ms
step:391/1480 train_time:56424ms step_avg:148.09ms
step:392/1480 train_time:56579ms step_avg:148.11ms
step:393/1480 train_time:56732ms step_avg:148.13ms
step:394/1480 train_time:56884ms step_avg:148.14ms
step:395/1480 train_time:57037ms step_avg:148.15ms
step:396/1480 train_time:57191ms step_avg:148.16ms
step:397/1480 train_time:57344ms step_avg:148.18ms
step:398/1480 train_time:57500ms step_avg:148.20ms
step:399/1480 train_time:57654ms step_avg:148.21ms
step:400/1480 train_time:57808ms step_avg:148.23ms
step:401/1480 train_time:57962ms step_avg:148.24ms
step:402/1480 train_time:58116ms step_avg:148.25ms
step:403/1480 train_time:58271ms step_avg:148.27ms
step:404/1480 train_time:58425ms step_avg:148.29ms
step:405/1480 train_time:58578ms step_avg:148.30ms
step:406/1480 train_time:58732ms step_avg:148.31ms
step:407/1480 train_time:58886ms step_avg:148.33ms
step:408/1480 train_time:59039ms step_avg:148.34ms
step:409/1480 train_time:59195ms step_avg:148.36ms
step:410/1480 train_time:59349ms step_avg:148.37ms
step:411/1480 train_time:59505ms step_avg:148.39ms
step:412/1480 train_time:59659ms step_avg:148.41ms
step:413/1480 train_time:59812ms step_avg:148.42ms
step:414/1480 train_time:59965ms step_avg:148.43ms
step:415/1480 train_time:60117ms step_avg:148.44ms
step:416/1480 train_time:60271ms step_avg:148.45ms
step:417/1480 train_time:60426ms step_avg:148.47ms
step:418/1480 train_time:60580ms step_avg:148.48ms
step:419/1480 train_time:60734ms step_avg:148.49ms
step:420/1480 train_time:60889ms step_avg:148.51ms
step:421/1480 train_time:61042ms step_avg:148.52ms
step:422/1480 train_time:61195ms step_avg:148.53ms
step:423/1480 train_time:61348ms step_avg:148.54ms
step:424/1480 train_time:61502ms step_avg:148.56ms
step:425/1480 train_time:61656ms step_avg:148.57ms
step:426/1480 train_time:61810ms step_avg:148.58ms
step:427/1480 train_time:61964ms step_avg:148.59ms
step:428/1480 train_time:62117ms step_avg:148.61ms
step:429/1480 train_time:62270ms step_avg:148.62ms
step:430/1480 train_time:62424ms step_avg:148.63ms
step:431/1480 train_time:62576ms step_avg:148.64ms
step:432/1480 train_time:62730ms step_avg:148.65ms
step:433/1480 train_time:62884ms step_avg:148.66ms
step:434/1480 train_time:63038ms step_avg:148.67ms
step:435/1480 train_time:63191ms step_avg:148.69ms
step:436/1480 train_time:63345ms step_avg:148.70ms
step:437/1480 train_time:63500ms step_avg:148.71ms
step:438/1480 train_time:63654ms step_avg:148.72ms
step:439/1480 train_time:63807ms step_avg:148.73ms
step:440/1480 train_time:63962ms step_avg:148.75ms
step:441/1480 train_time:64120ms step_avg:148.77ms
step:442/1480 train_time:64278ms step_avg:148.79ms
step:443/1480 train_time:64434ms step_avg:148.81ms
step:444/1480 train_time:64589ms step_avg:148.82ms
step:445/1480 train_time:64745ms step_avg:148.84ms
step:446/1480 train_time:64902ms step_avg:148.86ms
step:447/1480 train_time:65059ms step_avg:148.88ms
step:448/1480 train_time:65215ms step_avg:148.89ms
step:449/1480 train_time:65372ms step_avg:148.91ms
step:450/1480 train_time:65527ms step_avg:148.93ms
step:451/1480 train_time:65686ms step_avg:148.95ms
step:452/1480 train_time:65841ms step_avg:148.96ms
step:453/1480 train_time:66000ms step_avg:148.98ms
step:454/1480 train_time:66156ms step_avg:149.00ms
step:455/1480 train_time:66312ms step_avg:149.01ms
step:456/1480 train_time:66468ms step_avg:149.03ms
step:457/1480 train_time:66624ms step_avg:149.05ms
step:458/1480 train_time:66781ms step_avg:149.06ms
step:459/1480 train_time:66939ms step_avg:149.09ms
step:460/1480 train_time:67096ms step_avg:149.10ms
step:461/1480 train_time:67255ms step_avg:149.12ms
step:462/1480 train_time:67410ms step_avg:149.14ms
step:463/1480 train_time:67567ms step_avg:149.15ms
step:464/1480 train_time:67724ms step_avg:149.17ms
step:465/1480 train_time:67882ms step_avg:149.19ms
step:466/1480 train_time:68040ms step_avg:149.21ms
step:467/1480 train_time:68200ms step_avg:149.23ms
step:468/1480 train_time:68358ms step_avg:149.25ms
step:469/1480 train_time:68515ms step_avg:149.27ms
step:470/1480 train_time:68670ms step_avg:149.28ms
step:471/1480 train_time:68827ms step_avg:149.30ms
step:472/1480 train_time:68985ms step_avg:149.32ms
step:473/1480 train_time:69142ms step_avg:149.33ms
step:474/1480 train_time:69301ms step_avg:149.35ms
step:475/1480 train_time:69460ms step_avg:149.38ms
step:476/1480 train_time:69618ms step_avg:149.39ms
step:477/1480 train_time:69776ms step_avg:149.41ms
step:478/1480 train_time:69931ms step_avg:149.43ms
step:479/1480 train_time:70089ms step_avg:149.44ms
step:480/1480 train_time:70245ms step_avg:149.46ms
step:481/1480 train_time:70402ms step_avg:149.47ms
step:482/1480 train_time:70558ms step_avg:149.49ms
step:483/1480 train_time:70714ms step_avg:149.50ms
step:484/1480 train_time:70871ms step_avg:149.52ms
step:485/1480 train_time:71028ms step_avg:149.53ms
step:486/1480 train_time:71186ms step_avg:149.55ms
step:487/1480 train_time:71343ms step_avg:149.57ms
step:488/1480 train_time:71502ms step_avg:149.59ms
step:489/1480 train_time:71658ms step_avg:149.60ms
step:490/1480 train_time:71814ms step_avg:149.61ms
step:491/1480 train_time:71971ms step_avg:149.63ms
step:492/1480 train_time:72127ms step_avg:149.64ms
step:493/1480 train_time:72284ms step_avg:149.66ms
step:494/1480 train_time:72440ms step_avg:149.67ms
step:495/1480 train_time:72599ms step_avg:149.69ms
step:496/1480 train_time:72757ms step_avg:149.71ms
step:497/1480 train_time:72912ms step_avg:149.72ms
step:498/1480 train_time:73071ms step_avg:149.73ms
step:499/1480 train_time:73227ms step_avg:149.75ms
step:500/1480 train_time:73385ms step_avg:149.77ms
step:500/1480 val_loss:3.6892 train_time:73447ms step_avg:149.89ms
step:501/1480 train_time:73546ms step_avg:149.79ms
step:502/1480 train_time:73704ms step_avg:149.80ms
step:503/1480 train_time:73861ms step_avg:149.82ms
step:504/1480 train_time:74017ms step_avg:149.83ms
step:505/1480 train_time:74172ms step_avg:149.84ms
step:506/1480 train_time:74327ms step_avg:149.85ms
step:507/1480 train_time:74486ms step_avg:149.87ms
step:508/1480 train_time:74645ms step_avg:149.89ms
step:509/1480 train_time:74803ms step_avg:149.91ms
step:510/1480 train_time:74960ms step_avg:149.92ms
step:511/1480 train_time:75117ms step_avg:149.93ms
step:512/1480 train_time:75274ms step_avg:149.95ms
step:513/1480 train_time:75430ms step_avg:149.96ms
step:514/1480 train_time:75587ms step_avg:149.97ms
step:515/1480 train_time:75744ms step_avg:149.99ms
step:516/1480 train_time:75902ms step_avg:150.00ms
step:517/1480 train_time:76059ms step_avg:150.02ms
step:518/1480 train_time:76215ms step_avg:150.03ms
step:519/1480 train_time:76373ms step_avg:150.04ms
step:520/1480 train_time:76529ms step_avg:150.06ms
step:521/1480 train_time:76686ms step_avg:150.07ms
step:522/1480 train_time:76844ms step_avg:150.09ms
step:523/1480 train_time:77001ms step_avg:150.10ms
step:524/1480 train_time:77159ms step_avg:150.11ms
step:525/1480 train_time:77317ms step_avg:150.13ms
step:526/1480 train_time:77475ms step_avg:150.14ms
step:527/1480 train_time:77631ms step_avg:150.16ms
step:528/1480 train_time:77787ms step_avg:150.17ms
step:529/1480 train_time:77944ms step_avg:150.18ms
step:530/1480 train_time:78102ms step_avg:150.20ms
step:531/1480 train_time:78259ms step_avg:150.21ms
step:532/1480 train_time:78416ms step_avg:150.22ms
step:533/1480 train_time:78572ms step_avg:150.23ms
step:534/1480 train_time:78728ms step_avg:150.24ms
step:535/1480 train_time:78886ms step_avg:150.26ms
step:536/1480 train_time:79045ms step_avg:150.28ms
step:537/1480 train_time:79204ms step_avg:150.29ms
step:538/1480 train_time:79364ms step_avg:150.31ms
step:539/1480 train_time:79524ms step_avg:150.33ms
step:540/1480 train_time:79682ms step_avg:150.34ms
step:541/1480 train_time:79838ms step_avg:150.35ms
step:542/1480 train_time:79993ms step_avg:150.36ms
step:543/1480 train_time:80148ms step_avg:150.37ms
step:544/1480 train_time:80305ms step_avg:150.38ms
step:545/1480 train_time:80463ms step_avg:150.40ms
step:546/1480 train_time:80621ms step_avg:150.41ms
step:547/1480 train_time:80779ms step_avg:150.43ms
step:548/1480 train_time:80935ms step_avg:150.44ms
step:549/1480 train_time:81090ms step_avg:150.45ms
step:550/1480 train_time:81249ms step_avg:150.46ms
step:551/1480 train_time:81406ms step_avg:150.47ms
step:552/1480 train_time:81566ms step_avg:150.49ms
step:553/1480 train_time:81726ms step_avg:150.51ms
step:554/1480 train_time:81887ms step_avg:150.53ms
step:555/1480 train_time:82047ms step_avg:150.54ms
step:556/1480 train_time:82205ms step_avg:150.56ms
step:557/1480 train_time:82366ms step_avg:150.58ms
step:558/1480 train_time:82526ms step_avg:150.59ms
step:559/1480 train_time:82686ms step_avg:150.61ms
step:560/1480 train_time:82846ms step_avg:150.63ms
step:561/1480 train_time:83005ms step_avg:150.64ms
step:562/1480 train_time:83166ms step_avg:150.66ms
step:563/1480 train_time:83325ms step_avg:150.68ms
step:564/1480 train_time:83486ms step_avg:150.70ms
step:565/1480 train_time:83645ms step_avg:150.71ms
step:566/1480 train_time:83806ms step_avg:150.73ms
step:567/1480 train_time:83965ms step_avg:150.75ms
step:568/1480 train_time:84124ms step_avg:150.76ms
step:569/1480 train_time:84283ms step_avg:150.77ms
step:570/1480 train_time:84443ms step_avg:150.79ms
step:571/1480 train_time:84603ms step_avg:150.81ms
step:572/1480 train_time:84764ms step_avg:150.82ms
step:573/1480 train_time:84924ms step_avg:150.84ms
step:574/1480 train_time:85084ms step_avg:150.86ms
step:575/1480 train_time:85247ms step_avg:150.88ms
step:576/1480 train_time:85406ms step_avg:150.89ms
step:577/1480 train_time:85566ms step_avg:150.91ms
step:578/1480 train_time:85725ms step_avg:150.92ms
step:579/1480 train_time:85886ms step_avg:150.94ms
step:580/1480 train_time:86046ms step_avg:150.96ms
step:581/1480 train_time:86207ms step_avg:150.98ms
step:582/1480 train_time:86368ms step_avg:150.99ms
step:583/1480 train_time:86525ms step_avg:151.00ms
step:584/1480 train_time:86686ms step_avg:151.02ms
step:585/1480 train_time:86845ms step_avg:151.04ms
step:586/1480 train_time:87006ms step_avg:151.05ms
step:587/1480 train_time:87166ms step_avg:151.07ms
step:588/1480 train_time:87325ms step_avg:151.08ms
step:589/1480 train_time:87486ms step_avg:151.10ms
step:590/1480 train_time:87647ms step_avg:151.12ms
step:591/1480 train_time:87806ms step_avg:151.13ms
step:592/1480 train_time:87966ms step_avg:151.15ms
step:593/1480 train_time:88127ms step_avg:151.16ms
step:594/1480 train_time:88288ms step_avg:151.18ms
step:595/1480 train_time:88449ms step_avg:151.20ms
step:596/1480 train_time:88610ms step_avg:151.21ms
step:597/1480 train_time:88769ms step_avg:151.23ms
step:598/1480 train_time:88927ms step_avg:151.24ms
step:599/1480 train_time:89087ms step_avg:151.25ms
step:600/1480 train_time:89247ms step_avg:151.27ms
step:601/1480 train_time:89406ms step_avg:151.28ms
step:602/1480 train_time:89564ms step_avg:151.29ms
step:603/1480 train_time:89726ms step_avg:151.31ms
step:604/1480 train_time:89886ms step_avg:151.32ms
step:605/1480 train_time:90046ms step_avg:151.34ms
step:606/1480 train_time:90208ms step_avg:151.36ms
step:607/1480 train_time:90369ms step_avg:151.37ms
step:608/1480 train_time:90527ms step_avg:151.38ms
step:609/1480 train_time:90687ms step_avg:151.40ms
step:610/1480 train_time:90845ms step_avg:151.41ms
step:611/1480 train_time:91007ms step_avg:151.43ms
step:612/1480 train_time:91167ms step_avg:151.44ms
step:613/1480 train_time:91327ms step_avg:151.45ms
step:614/1480 train_time:91487ms step_avg:151.47ms
step:615/1480 train_time:91646ms step_avg:151.48ms
step:616/1480 train_time:91804ms step_avg:151.49ms
step:617/1480 train_time:91965ms step_avg:151.51ms
step:618/1480 train_time:92126ms step_avg:151.52ms
step:619/1480 train_time:92287ms step_avg:151.54ms
step:620/1480 train_time:92446ms step_avg:151.55ms
step:621/1480 train_time:92605ms step_avg:151.56ms
step:622/1480 train_time:92766ms step_avg:151.58ms
step:623/1480 train_time:92926ms step_avg:151.59ms
step:624/1480 train_time:93086ms step_avg:151.61ms
step:625/1480 train_time:93246ms step_avg:151.62ms
step:625/1480 val_loss:3.6075 train_time:93310ms step_avg:151.72ms
step:626/1480 train_time:93409ms step_avg:151.64ms
step:627/1480 train_time:93568ms step_avg:151.65ms
step:628/1480 train_time:93725ms step_avg:151.66ms
step:629/1480 train_time:93884ms step_avg:151.67ms
step:630/1480 train_time:94042ms step_avg:151.68ms
step:631/1480 train_time:94199ms step_avg:151.69ms
step:632/1480 train_time:94358ms step_avg:151.70ms
step:633/1480 train_time:94518ms step_avg:151.71ms
step:634/1480 train_time:94679ms step_avg:151.73ms
step:635/1480 train_time:94839ms step_avg:151.74ms
step:636/1480 train_time:94998ms step_avg:151.75ms
step:637/1480 train_time:95160ms step_avg:151.77ms
step:638/1480 train_time:95319ms step_avg:151.78ms
step:639/1480 train_time:95479ms step_avg:151.79ms
step:640/1480 train_time:95639ms step_avg:151.81ms
step:641/1480 train_time:95799ms step_avg:151.82ms
step:642/1480 train_time:95959ms step_avg:151.83ms
step:643/1480 train_time:96118ms step_avg:151.85ms
step:644/1480 train_time:96277ms step_avg:151.86ms
step:645/1480 train_time:96437ms step_avg:151.87ms
step:646/1480 train_time:96596ms step_avg:151.88ms
step:647/1480 train_time:96756ms step_avg:151.89ms
step:648/1480 train_time:96917ms step_avg:151.91ms
step:649/1480 train_time:97077ms step_avg:151.92ms
step:650/1480 train_time:97237ms step_avg:151.93ms
step:651/1480 train_time:97398ms step_avg:151.95ms
step:652/1480 train_time:97558ms step_avg:151.96ms
step:653/1480 train_time:97718ms step_avg:151.97ms
step:654/1480 train_time:97878ms step_avg:151.98ms
step:655/1480 train_time:98038ms step_avg:152.00ms
step:656/1480 train_time:98198ms step_avg:152.01ms
step:657/1480 train_time:98360ms step_avg:152.02ms
step:658/1480 train_time:98520ms step_avg:152.04ms
step:659/1480 train_time:98680ms step_avg:152.05ms
step:660/1480 train_time:98842ms step_avg:152.07ms
step:661/1480 train_time:99003ms step_avg:152.08ms
step:662/1480 train_time:99163ms step_avg:152.09ms
step:663/1480 train_time:99322ms step_avg:152.10ms
step:664/1480 train_time:99483ms step_avg:152.11ms
step:665/1480 train_time:99645ms step_avg:152.13ms
step:666/1480 train_time:99805ms step_avg:152.14ms
step:667/1480 train_time:99967ms step_avg:152.16ms
step:668/1480 train_time:100129ms step_avg:152.17ms
step:669/1480 train_time:100293ms step_avg:152.19ms
step:670/1480 train_time:100453ms step_avg:152.20ms
step:671/1480 train_time:100615ms step_avg:152.22ms
step:672/1480 train_time:100778ms step_avg:152.23ms
step:673/1480 train_time:100941ms step_avg:152.25ms
step:674/1480 train_time:101101ms step_avg:152.26ms
step:675/1480 train_time:101263ms step_avg:152.28ms
step:676/1480 train_time:101425ms step_avg:152.29ms
step:677/1480 train_time:101586ms step_avg:152.30ms
step:678/1480 train_time:101746ms step_avg:152.31ms
step:679/1480 train_time:101907ms step_avg:152.33ms
step:680/1480 train_time:102069ms step_avg:152.34ms
step:681/1480 train_time:102231ms step_avg:152.36ms
step:682/1480 train_time:102394ms step_avg:152.37ms
step:683/1480 train_time:102558ms step_avg:152.39ms
step:684/1480 train_time:102719ms step_avg:152.40ms
step:685/1480 train_time:102883ms step_avg:152.42ms
step:686/1480 train_time:103044ms step_avg:152.43ms
step:687/1480 train_time:103204ms step_avg:152.44ms
step:688/1480 train_time:103366ms step_avg:152.46ms
step:689/1480 train_time:103528ms step_avg:152.47ms
step:690/1480 train_time:103693ms step_avg:152.49ms
step:691/1480 train_time:103855ms step_avg:152.50ms
step:692/1480 train_time:104018ms step_avg:152.52ms
step:693/1480 train_time:104182ms step_avg:152.54ms
step:694/1480 train_time:104342ms step_avg:152.55ms
step:695/1480 train_time:104501ms step_avg:152.56ms
step:696/1480 train_time:104662ms step_avg:152.57ms
step:697/1480 train_time:104824ms step_avg:152.58ms
step:698/1480 train_time:104985ms step_avg:152.59ms
step:699/1480 train_time:105147ms step_avg:152.61ms
step:700/1480 train_time:105309ms step_avg:152.62ms
step:701/1480 train_time:105468ms step_avg:152.63ms
step:702/1480 train_time:105631ms step_avg:152.65ms
step:703/1480 train_time:105791ms step_avg:152.66ms
step:704/1480 train_time:105953ms step_avg:152.67ms
step:705/1480 train_time:106116ms step_avg:152.68ms
step:706/1480 train_time:106281ms step_avg:152.70ms
step:707/1480 train_time:106441ms step_avg:152.71ms
step:708/1480 train_time:106602ms step_avg:152.72ms
step:709/1480 train_time:106764ms step_avg:152.74ms
step:710/1480 train_time:106924ms step_avg:152.75ms
step:711/1480 train_time:107085ms step_avg:152.76ms
step:712/1480 train_time:107252ms step_avg:152.78ms
step:713/1480 train_time:107416ms step_avg:152.80ms
step:714/1480 train_time:107578ms step_avg:152.81ms
step:715/1480 train_time:107739ms step_avg:152.82ms
step:716/1480 train_time:107899ms step_avg:152.83ms
step:717/1480 train_time:108063ms step_avg:152.85ms
step:718/1480 train_time:108222ms step_avg:152.86ms
step:719/1480 train_time:108381ms step_avg:152.87ms
step:720/1480 train_time:108545ms step_avg:152.88ms
step:721/1480 train_time:108705ms step_avg:152.89ms
step:722/1480 train_time:108866ms step_avg:152.90ms
step:723/1480 train_time:109025ms step_avg:152.91ms
step:724/1480 train_time:109186ms step_avg:152.92ms
step:725/1480 train_time:109349ms step_avg:152.94ms
step:726/1480 train_time:109512ms step_avg:152.95ms
step:727/1480 train_time:109676ms step_avg:152.97ms
step:728/1480 train_time:109837ms step_avg:152.98ms
step:729/1480 train_time:109999ms step_avg:152.99ms
step:730/1480 train_time:110164ms step_avg:153.01ms
step:731/1480 train_time:110325ms step_avg:153.02ms
step:732/1480 train_time:110484ms step_avg:153.02ms
step:733/1480 train_time:110645ms step_avg:153.04ms
step:734/1480 train_time:110807ms step_avg:153.05ms
step:735/1480 train_time:110966ms step_avg:153.06ms
step:736/1480 train_time:111127ms step_avg:153.07ms
step:737/1480 train_time:111285ms step_avg:153.07ms
step:738/1480 train_time:111446ms step_avg:153.08ms
step:739/1480 train_time:111605ms step_avg:153.09ms
step:740/1480 train_time:111769ms step_avg:153.11ms
step:741/1480 train_time:111932ms step_avg:153.12ms
step:742/1480 train_time:112094ms step_avg:153.13ms
step:743/1480 train_time:112256ms step_avg:153.15ms
step:744/1480 train_time:112421ms step_avg:153.16ms
step:745/1480 train_time:112584ms step_avg:153.18ms
step:746/1480 train_time:112744ms step_avg:153.19ms
step:747/1480 train_time:112907ms step_avg:153.20ms
step:748/1480 train_time:113072ms step_avg:153.21ms
step:749/1480 train_time:113237ms step_avg:153.23ms
step:750/1480 train_time:113398ms step_avg:153.24ms
step:750/1480 val_loss:3.5512 train_time:113463ms step_avg:153.33ms
step:751/1480 train_time:113565ms step_avg:153.26ms
step:752/1480 train_time:113726ms step_avg:153.27ms
step:753/1480 train_time:113886ms step_avg:153.28ms
step:754/1480 train_time:114047ms step_avg:153.29ms
step:755/1480 train_time:114207ms step_avg:153.30ms
step:756/1480 train_time:114370ms step_avg:153.31ms
step:757/1480 train_time:114536ms step_avg:153.33ms
step:758/1480 train_time:114697ms step_avg:153.34ms
step:759/1480 train_time:114859ms step_avg:153.35ms
step:760/1480 train_time:115021ms step_avg:153.36ms
step:761/1480 train_time:115185ms step_avg:153.38ms
step:762/1480 train_time:115347ms step_avg:153.39ms
step:763/1480 train_time:115508ms step_avg:153.40ms
step:764/1480 train_time:115670ms step_avg:153.41ms
step:765/1480 train_time:115829ms step_avg:153.42ms
step:766/1480 train_time:115992ms step_avg:153.43ms
step:767/1480 train_time:116153ms step_avg:153.44ms
step:768/1480 train_time:116316ms step_avg:153.45ms
step:769/1480 train_time:116480ms step_avg:153.47ms
step:770/1480 train_time:116644ms step_avg:153.48ms
step:771/1480 train_time:116809ms step_avg:153.49ms
step:772/1480 train_time:116970ms step_avg:153.50ms
step:773/1480 train_time:117130ms step_avg:153.51ms
step:774/1480 train_time:117292ms step_avg:153.52ms
step:775/1480 train_time:117454ms step_avg:153.54ms
step:776/1480 train_time:117623ms step_avg:153.55ms
step:777/1480 train_time:117789ms step_avg:153.57ms
step:778/1480 train_time:117952ms step_avg:153.58ms
step:779/1480 train_time:118115ms step_avg:153.60ms
step:780/1480 train_time:118278ms step_avg:153.61ms
step:781/1480 train_time:118442ms step_avg:153.62ms
step:782/1480 train_time:118607ms step_avg:153.64ms
step:783/1480 train_time:118768ms step_avg:153.65ms
step:784/1480 train_time:118930ms step_avg:153.66ms
step:785/1480 train_time:119091ms step_avg:153.67ms
step:786/1480 train_time:119255ms step_avg:153.68ms
step:787/1480 train_time:119420ms step_avg:153.69ms
step:788/1480 train_time:119584ms step_avg:153.71ms
step:789/1480 train_time:119745ms step_avg:153.72ms
step:790/1480 train_time:119909ms step_avg:153.73ms
step:791/1480 train_time:120079ms step_avg:153.75ms
step:792/1480 train_time:120245ms step_avg:153.77ms
step:793/1480 train_time:120406ms step_avg:153.78ms
step:794/1480 train_time:120570ms step_avg:153.79ms
step:795/1480 train_time:120736ms step_avg:153.80ms
step:796/1480 train_time:120903ms step_avg:153.82ms
step:797/1480 train_time:121067ms step_avg:153.83ms
step:798/1480 train_time:121231ms step_avg:153.85ms
step:799/1480 train_time:121398ms step_avg:153.86ms
step:800/1480 train_time:121563ms step_avg:153.88ms
step:801/1480 train_time:121727ms step_avg:153.89ms
step:802/1480 train_time:121894ms step_avg:153.91ms
step:803/1480 train_time:122057ms step_avg:153.92ms
step:804/1480 train_time:122220ms step_avg:153.93ms
step:805/1480 train_time:122385ms step_avg:153.94ms
step:806/1480 train_time:122547ms step_avg:153.95ms
step:807/1480 train_time:122708ms step_avg:153.96ms
step:808/1480 train_time:122872ms step_avg:153.97ms
step:809/1480 train_time:123033ms step_avg:153.98ms
step:810/1480 train_time:123194ms step_avg:153.99ms
step:811/1480 train_time:123357ms step_avg:154.00ms
step:812/1480 train_time:123522ms step_avg:154.02ms
step:813/1480 train_time:123684ms step_avg:154.03ms
step:814/1480 train_time:123846ms step_avg:154.04ms
step:815/1480 train_time:124008ms step_avg:154.05ms
step:816/1480 train_time:124172ms step_avg:154.06ms
step:817/1480 train_time:124333ms step_avg:154.07ms
step:818/1480 train_time:124495ms step_avg:154.08ms
step:819/1480 train_time:124661ms step_avg:154.09ms
step:820/1480 train_time:124826ms step_avg:154.11ms
step:821/1480 train_time:124987ms step_avg:154.11ms
step:822/1480 train_time:125150ms step_avg:154.13ms
step:823/1480 train_time:125313ms step_avg:154.14ms
step:824/1480 train_time:125475ms step_avg:154.15ms
step:825/1480 train_time:125640ms step_avg:154.16ms
step:826/1480 train_time:125805ms step_avg:154.17ms
step:827/1480 train_time:125969ms step_avg:154.19ms
step:828/1480 train_time:126131ms step_avg:154.19ms
step:829/1480 train_time:126294ms step_avg:154.20ms
step:830/1480 train_time:126458ms step_avg:154.22ms
step:831/1480 train_time:126623ms step_avg:154.23ms
step:832/1480 train_time:126786ms step_avg:154.24ms
step:833/1480 train_time:126950ms step_avg:154.25ms
step:834/1480 train_time:127116ms step_avg:154.27ms
step:835/1480 train_time:127280ms step_avg:154.28ms
step:836/1480 train_time:127444ms step_avg:154.29ms
step:837/1480 train_time:127607ms step_avg:154.30ms
step:838/1480 train_time:127769ms step_avg:154.31ms
step:839/1480 train_time:127931ms step_avg:154.32ms
step:840/1480 train_time:128092ms step_avg:154.33ms
step:841/1480 train_time:128252ms step_avg:154.33ms
step:842/1480 train_time:128418ms step_avg:154.35ms
step:843/1480 train_time:128581ms step_avg:154.36ms
step:844/1480 train_time:128743ms step_avg:154.37ms
step:845/1480 train_time:128908ms step_avg:154.38ms
step:846/1480 train_time:129072ms step_avg:154.39ms
step:847/1480 train_time:129236ms step_avg:154.40ms
step:848/1480 train_time:129399ms step_avg:154.41ms
step:849/1480 train_time:129563ms step_avg:154.43ms
step:850/1480 train_time:129726ms step_avg:154.44ms
step:851/1480 train_time:129891ms step_avg:154.45ms
step:852/1480 train_time:130052ms step_avg:154.46ms
step:853/1480 train_time:130215ms step_avg:154.47ms
step:854/1480 train_time:130381ms step_avg:154.48ms
step:855/1480 train_time:130546ms step_avg:154.49ms
step:856/1480 train_time:130708ms step_avg:154.50ms
step:857/1480 train_time:130871ms step_avg:154.51ms
step:858/1480 train_time:131035ms step_avg:154.52ms
step:859/1480 train_time:131201ms step_avg:154.54ms
step:860/1480 train_time:131363ms step_avg:154.54ms
step:861/1480 train_time:131529ms step_avg:154.56ms
step:862/1480 train_time:131698ms step_avg:154.57ms
step:863/1480 train_time:131866ms step_avg:154.59ms
step:864/1480 train_time:132030ms step_avg:154.60ms
step:865/1480 train_time:132190ms step_avg:154.61ms
step:866/1480 train_time:132356ms step_avg:154.62ms
step:867/1480 train_time:132520ms step_avg:154.63ms
step:868/1480 train_time:132683ms step_avg:154.64ms
step:869/1480 train_time:132847ms step_avg:154.65ms
step:870/1480 train_time:133013ms step_avg:154.67ms
step:871/1480 train_time:133175ms step_avg:154.68ms
step:872/1480 train_time:133340ms step_avg:154.69ms
step:873/1480 train_time:133504ms step_avg:154.70ms
step:874/1480 train_time:133668ms step_avg:154.71ms
step:875/1480 train_time:133832ms step_avg:154.72ms
step:875/1480 val_loss:3.5072 train_time:133899ms step_avg:154.80ms
step:876/1480 train_time:133998ms step_avg:154.73ms
step:877/1480 train_time:134164ms step_avg:154.74ms
step:878/1480 train_time:134327ms step_avg:154.75ms
step:879/1480 train_time:134491ms step_avg:154.77ms
step:880/1480 train_time:134655ms step_avg:154.78ms
step:881/1480 train_time:134817ms step_avg:154.78ms
step:882/1480 train_time:134981ms step_avg:154.79ms
step:883/1480 train_time:135147ms step_avg:154.81ms
step:884/1480 train_time:135315ms step_avg:154.82ms
step:885/1480 train_time:135480ms step_avg:154.83ms
step:886/1480 train_time:135647ms step_avg:154.85ms
step:887/1480 train_time:135815ms step_avg:154.86ms
step:888/1480 train_time:135988ms step_avg:154.88ms
step:889/1480 train_time:136156ms step_avg:154.90ms
step:890/1480 train_time:136317ms step_avg:154.91ms
step:891/1480 train_time:136482ms step_avg:154.92ms
step:892/1480 train_time:136648ms step_avg:154.93ms
step:893/1480 train_time:136812ms step_avg:154.94ms
step:894/1480 train_time:136979ms step_avg:154.95ms
step:895/1480 train_time:137145ms step_avg:154.97ms
step:896/1480 train_time:137311ms step_avg:154.98ms
step:897/1480 train_time:137477ms step_avg:154.99ms
step:898/1480 train_time:137645ms step_avg:155.01ms
step:899/1480 train_time:137810ms step_avg:155.02ms
step:900/1480 train_time:137974ms step_avg:155.03ms
step:901/1480 train_time:138139ms step_avg:155.04ms
step:902/1480 train_time:138302ms step_avg:155.05ms
step:903/1480 train_time:138476ms step_avg:155.07ms
step:904/1480 train_time:138640ms step_avg:155.08ms
step:905/1480 train_time:138801ms step_avg:155.08ms
step:906/1480 train_time:138969ms step_avg:155.10ms
step:907/1480 train_time:139136ms step_avg:155.11ms
step:908/1480 train_time:139298ms step_avg:155.12ms
step:909/1480 train_time:139462ms step_avg:155.13ms
step:910/1480 train_time:139632ms step_avg:155.15ms
step:911/1480 train_time:139797ms step_avg:155.16ms
step:912/1480 train_time:139962ms step_avg:155.17ms
step:913/1480 train_time:140133ms step_avg:155.19ms
step:914/1480 train_time:140300ms step_avg:155.20ms
step:915/1480 train_time:140470ms step_avg:155.22ms
step:916/1480 train_time:140634ms step_avg:155.23ms
step:917/1480 train_time:140797ms step_avg:155.23ms
step:918/1480 train_time:140964ms step_avg:155.25ms
step:919/1480 train_time:141134ms step_avg:155.26ms
step:920/1480 train_time:141299ms step_avg:155.27ms
step:921/1480 train_time:141465ms step_avg:155.29ms
step:922/1480 train_time:141634ms step_avg:155.30ms
step:923/1480 train_time:141795ms step_avg:155.31ms
step:924/1480 train_time:141960ms step_avg:155.32ms
step:925/1480 train_time:142125ms step_avg:155.33ms
step:926/1480 train_time:142290ms step_avg:155.34ms
step:927/1480 train_time:142454ms step_avg:155.35ms
step:928/1480 train_time:142620ms step_avg:155.36ms
step:929/1480 train_time:142784ms step_avg:155.37ms
step:930/1480 train_time:142952ms step_avg:155.38ms
step:931/1480 train_time:143115ms step_avg:155.39ms
step:932/1480 train_time:143280ms step_avg:155.40ms
step:933/1480 train_time:143450ms step_avg:155.42ms
step:934/1480 train_time:143616ms step_avg:155.43ms
step:935/1480 train_time:143788ms step_avg:155.45ms
step:936/1480 train_time:143956ms step_avg:155.46ms
step:937/1480 train_time:144125ms step_avg:155.48ms
step:938/1480 train_time:144289ms step_avg:155.48ms
step:939/1480 train_time:144459ms step_avg:155.50ms
step:940/1480 train_time:144627ms step_avg:155.51ms
step:941/1480 train_time:144790ms step_avg:155.52ms
step:942/1480 train_time:144956ms step_avg:155.53ms
step:943/1480 train_time:145126ms step_avg:155.55ms
step:944/1480 train_time:145298ms step_avg:155.57ms
step:945/1480 train_time:145463ms step_avg:155.57ms
step:946/1480 train_time:145633ms step_avg:155.59ms
step:947/1480 train_time:145800ms step_avg:155.60ms
step:948/1480 train_time:145966ms step_avg:155.61ms
step:949/1480 train_time:146133ms step_avg:155.63ms
step:950/1480 train_time:146297ms step_avg:155.64ms
step:951/1480 train_time:146467ms step_avg:155.65ms
step:952/1480 train_time:146633ms step_avg:155.66ms
step:953/1480 train_time:146802ms step_avg:155.68ms
step:954/1480 train_time:146972ms step_avg:155.69ms
step:955/1480 train_time:147136ms step_avg:155.70ms
step:956/1480 train_time:147300ms step_avg:155.71ms
step:957/1480 train_time:147469ms step_avg:155.72ms
step:958/1480 train_time:147638ms step_avg:155.74ms
step:959/1480 train_time:147801ms step_avg:155.74ms
step:960/1480 train_time:147969ms step_avg:155.76ms
step:961/1480 train_time:148135ms step_avg:155.77ms
step:962/1480 train_time:148298ms step_avg:155.78ms
step:963/1480 train_time:148465ms step_avg:155.79ms
step:964/1480 train_time:148633ms step_avg:155.80ms
step:965/1480 train_time:148797ms step_avg:155.81ms
step:966/1480 train_time:148963ms step_avg:155.82ms
step:967/1480 train_time:149127ms step_avg:155.83ms
step:968/1480 train_time:149292ms step_avg:155.84ms
step:969/1480 train_time:149458ms step_avg:155.85ms
step:970/1480 train_time:149619ms step_avg:155.85ms
step:971/1480 train_time:149782ms step_avg:155.86ms
step:972/1480 train_time:149948ms step_avg:155.87ms
step:973/1480 train_time:150113ms step_avg:155.88ms
step:974/1480 train_time:150282ms step_avg:155.89ms
step:975/1480 train_time:150448ms step_avg:155.91ms
step:976/1480 train_time:150614ms step_avg:155.91ms
step:977/1480 train_time:150778ms step_avg:155.92ms
step:978/1480 train_time:150942ms step_avg:155.93ms
step:979/1480 train_time:151108ms step_avg:155.94ms
step:980/1480 train_time:151275ms step_avg:155.95ms
step:981/1480 train_time:151441ms step_avg:155.96ms
step:982/1480 train_time:151605ms step_avg:155.97ms
step:983/1480 train_time:151772ms step_avg:155.98ms
step:984/1480 train_time:151937ms step_avg:155.99ms
step:985/1480 train_time:152106ms step_avg:156.01ms
step:986/1480 train_time:152272ms step_avg:156.02ms
step:987/1480 train_time:152436ms step_avg:156.02ms
step:988/1480 train_time:152601ms step_avg:156.03ms
step:989/1480 train_time:152768ms step_avg:156.04ms
step:990/1480 train_time:152937ms step_avg:156.06ms
step:991/1480 train_time:153103ms step_avg:156.07ms
step:992/1480 train_time:153279ms step_avg:156.09ms
step:993/1480 train_time:153455ms step_avg:156.11ms
step:994/1480 train_time:153620ms step_avg:156.12ms
step:995/1480 train_time:153782ms step_avg:156.12ms
step:996/1480 train_time:153945ms step_avg:156.13ms
step:997/1480 train_time:154111ms step_avg:156.14ms
step:998/1480 train_time:154275ms step_avg:156.15ms
step:999/1480 train_time:154439ms step_avg:156.16ms
step:1000/1480 train_time:154612ms step_avg:156.17ms
step:1000/1480 val_loss:3.4442 train_time:154680ms step_avg:156.24ms
step:1001/1480 train_time:154783ms step_avg:156.19ms
step:1002/1480 train_time:154950ms step_avg:156.20ms
step:1003/1480 train_time:155121ms step_avg:156.21ms
step:1004/1480 train_time:155290ms step_avg:156.23ms
step:1005/1480 train_time:155457ms step_avg:156.24ms
step:1006/1480 train_time:155627ms step_avg:156.25ms
step:1007/1480 train_time:155793ms step_avg:156.26ms
step:1008/1480 train_time:155959ms step_avg:156.27ms
step:1009/1480 train_time:156132ms step_avg:156.29ms
step:1010/1480 train_time:156296ms step_avg:156.30ms
step:1011/1480 train_time:156464ms step_avg:156.31ms
step:1012/1480 train_time:156630ms step_avg:156.32ms
step:1013/1480 train_time:156800ms step_avg:156.33ms
step:1014/1480 train_time:156968ms step_avg:156.34ms
step:1015/1480 train_time:157136ms step_avg:156.35ms
step:1016/1480 train_time:157306ms step_avg:156.37ms
step:1017/1480 train_time:157477ms step_avg:156.38ms
step:1018/1480 train_time:157644ms step_avg:156.39ms
step:1019/1480 train_time:157813ms step_avg:156.41ms
step:1020/1480 train_time:157983ms step_avg:156.42ms
step:1021/1480 train_time:158150ms step_avg:156.43ms
step:1022/1480 train_time:158318ms step_avg:156.44ms
step:1023/1480 train_time:158486ms step_avg:156.45ms
step:1024/1480 train_time:158653ms step_avg:156.46ms
step:1025/1480 train_time:158825ms step_avg:156.48ms
step:1026/1480 train_time:158991ms step_avg:156.49ms
step:1027/1480 train_time:159157ms step_avg:156.50ms
step:1028/1480 train_time:159331ms step_avg:156.51ms
step:1029/1480 train_time:159504ms step_avg:156.53ms
step:1030/1480 train_time:159671ms step_avg:156.54ms
step:1031/1480 train_time:159834ms step_avg:156.55ms
step:1032/1480 train_time:160009ms step_avg:156.56ms
step:1033/1480 train_time:160175ms step_avg:156.57ms
step:1034/1480 train_time:160343ms step_avg:156.58ms
step:1035/1480 train_time:160512ms step_avg:156.60ms
step:1036/1480 train_time:160677ms step_avg:156.61ms
step:1037/1480 train_time:160845ms step_avg:156.62ms
step:1038/1480 train_time:161012ms step_avg:156.63ms
step:1039/1480 train_time:161182ms step_avg:156.64ms
step:1040/1480 train_time:161349ms step_avg:156.65ms
step:1041/1480 train_time:161516ms step_avg:156.66ms
step:1042/1480 train_time:161679ms step_avg:156.67ms
step:1043/1480 train_time:161845ms step_avg:156.67ms
step:1044/1480 train_time:162010ms step_avg:156.68ms
step:1045/1480 train_time:162180ms step_avg:156.70ms
step:1046/1480 train_time:162348ms step_avg:156.71ms
step:1047/1480 train_time:162515ms step_avg:156.72ms
step:1048/1480 train_time:162680ms step_avg:156.72ms
step:1049/1480 train_time:162846ms step_avg:156.73ms
step:1050/1480 train_time:163016ms step_avg:156.75ms
step:1051/1480 train_time:163185ms step_avg:156.76ms
step:1052/1480 train_time:163352ms step_avg:156.77ms
step:1053/1480 train_time:163518ms step_avg:156.78ms
step:1054/1480 train_time:163688ms step_avg:156.79ms
step:1055/1480 train_time:163854ms step_avg:156.80ms
step:1056/1480 train_time:164018ms step_avg:156.81ms
step:1057/1480 train_time:164185ms step_avg:156.82ms
step:1058/1480 train_time:164354ms step_avg:156.83ms
step:1059/1480 train_time:164529ms step_avg:156.84ms
step:1060/1480 train_time:164697ms step_avg:156.85ms
step:1061/1480 train_time:164860ms step_avg:156.86ms
step:1062/1480 train_time:165026ms step_avg:156.87ms
step:1063/1480 train_time:165192ms step_avg:156.88ms
step:1064/1480 train_time:165355ms step_avg:156.88ms
step:1065/1480 train_time:165523ms step_avg:156.89ms
step:1066/1480 train_time:165691ms step_avg:156.90ms
step:1067/1480 train_time:165858ms step_avg:156.91ms
step:1068/1480 train_time:166024ms step_avg:156.92ms
step:1069/1480 train_time:166195ms step_avg:156.94ms
step:1070/1480 train_time:166361ms step_avg:156.94ms
step:1071/1480 train_time:166533ms step_avg:156.96ms
step:1072/1480 train_time:166698ms step_avg:156.97ms
step:1073/1480 train_time:166862ms step_avg:156.97ms
step:1074/1480 train_time:167030ms step_avg:156.98ms
step:1075/1480 train_time:167199ms step_avg:156.99ms
step:1076/1480 train_time:167368ms step_avg:157.01ms
step:1077/1480 train_time:167533ms step_avg:157.01ms
step:1078/1480 train_time:167709ms step_avg:157.03ms
step:1079/1480 train_time:167881ms step_avg:157.04ms
step:1080/1480 train_time:168050ms step_avg:157.06ms
step:1081/1480 train_time:168218ms step_avg:157.07ms
step:1082/1480 train_time:168385ms step_avg:157.08ms
step:1083/1480 train_time:168551ms step_avg:157.08ms
step:1084/1480 train_time:168717ms step_avg:157.09ms
step:1085/1480 train_time:168887ms step_avg:157.10ms
step:1086/1480 train_time:169055ms step_avg:157.11ms
step:1087/1480 train_time:169221ms step_avg:157.12ms
step:1088/1480 train_time:169392ms step_avg:157.14ms
step:1089/1480 train_time:169563ms step_avg:157.15ms
step:1090/1480 train_time:169734ms step_avg:157.16ms
step:1091/1480 train_time:169903ms step_avg:157.17ms
step:1092/1480 train_time:170072ms step_avg:157.18ms
step:1093/1480 train_time:170238ms step_avg:157.19ms
step:1094/1480 train_time:170404ms step_avg:157.20ms
step:1095/1480 train_time:170569ms step_avg:157.21ms
step:1096/1480 train_time:170737ms step_avg:157.22ms
step:1097/1480 train_time:170907ms step_avg:157.23ms
step:1098/1480 train_time:171077ms step_avg:157.24ms
step:1099/1480 train_time:171248ms step_avg:157.25ms
step:1100/1480 train_time:171418ms step_avg:157.26ms
step:1101/1480 train_time:171590ms step_avg:157.28ms
step:1102/1480 train_time:171761ms step_avg:157.29ms
step:1103/1480 train_time:171938ms step_avg:157.31ms
step:1104/1480 train_time:172106ms step_avg:157.32ms
step:1105/1480 train_time:172276ms step_avg:157.33ms
step:1106/1480 train_time:172445ms step_avg:157.34ms
step:1107/1480 train_time:172614ms step_avg:157.35ms
step:1108/1480 train_time:172778ms step_avg:157.36ms
step:1109/1480 train_time:172945ms step_avg:157.37ms
step:1110/1480 train_time:173111ms step_avg:157.37ms
step:1111/1480 train_time:173278ms step_avg:157.38ms
step:1112/1480 train_time:173450ms step_avg:157.40ms
step:1113/1480 train_time:173626ms step_avg:157.41ms
step:1114/1480 train_time:173799ms step_avg:157.43ms
step:1115/1480 train_time:173972ms step_avg:157.44ms
step:1116/1480 train_time:174139ms step_avg:157.45ms
step:1117/1480 train_time:174312ms step_avg:157.46ms
step:1118/1480 train_time:174486ms step_avg:157.48ms
step:1119/1480 train_time:174652ms step_avg:157.49ms
step:1120/1480 train_time:174821ms step_avg:157.50ms
step:1121/1480 train_time:174992ms step_avg:157.51ms
step:1122/1480 train_time:175158ms step_avg:157.52ms
step:1123/1480 train_time:175325ms step_avg:157.52ms
step:1124/1480 train_time:175494ms step_avg:157.54ms
step:1125/1480 train_time:175661ms step_avg:157.54ms
step:1125/1480 val_loss:3.3878 train_time:175729ms step_avg:157.60ms
step:1126/1480 train_time:175831ms step_avg:157.55ms
step:1127/1480 train_time:176002ms step_avg:157.57ms
step:1128/1480 train_time:176172ms step_avg:157.58ms
step:1129/1480 train_time:176347ms step_avg:157.59ms
step:1130/1480 train_time:176516ms step_avg:157.60ms
step:1131/1480 train_time:176694ms step_avg:157.62ms
step:1132/1480 train_time:176860ms step_avg:157.63ms
step:1133/1480 train_time:177032ms step_avg:157.64ms
step:1134/1480 train_time:177203ms step_avg:157.65ms
step:1135/1480 train_time:177371ms step_avg:157.66ms
step:1136/1480 train_time:177542ms step_avg:157.67ms
step:1137/1480 train_time:177710ms step_avg:157.68ms
step:1138/1480 train_time:177882ms step_avg:157.70ms
step:1139/1480 train_time:178048ms step_avg:157.70ms
step:1140/1480 train_time:178217ms step_avg:157.71ms
step:1141/1480 train_time:178389ms step_avg:157.73ms
step:1142/1480 train_time:178556ms step_avg:157.73ms
step:1143/1480 train_time:178726ms step_avg:157.75ms
step:1144/1480 train_time:178893ms step_avg:157.75ms
step:1145/1480 train_time:179061ms step_avg:157.76ms
step:1146/1480 train_time:179232ms step_avg:157.77ms
step:1147/1480 train_time:179403ms step_avg:157.79ms
step:1148/1480 train_time:179570ms step_avg:157.79ms
step:1149/1480 train_time:179742ms step_avg:157.81ms
step:1150/1480 train_time:179910ms step_avg:157.82ms
step:1151/1480 train_time:180081ms step_avg:157.83ms
step:1152/1480 train_time:180252ms step_avg:157.84ms
step:1153/1480 train_time:180425ms step_avg:157.85ms
step:1154/1480 train_time:180591ms step_avg:157.86ms
step:1155/1480 train_time:180764ms step_avg:157.87ms
step:1156/1480 train_time:180944ms step_avg:157.89ms
step:1157/1480 train_time:181114ms step_avg:157.90ms
step:1158/1480 train_time:181281ms step_avg:157.91ms
step:1159/1480 train_time:181448ms step_avg:157.92ms
step:1160/1480 train_time:181614ms step_avg:157.92ms
step:1161/1480 train_time:181784ms step_avg:157.94ms
step:1162/1480 train_time:181954ms step_avg:157.95ms
step:1163/1480 train_time:182125ms step_avg:157.96ms
step:1164/1480 train_time:182294ms step_avg:157.97ms
step:1165/1480 train_time:182459ms step_avg:157.97ms
step:1166/1480 train_time:182628ms step_avg:157.98ms
step:1167/1480 train_time:182796ms step_avg:157.99ms
step:1168/1480 train_time:182963ms step_avg:158.00ms
step:1169/1480 train_time:183130ms step_avg:158.01ms
step:1170/1480 train_time:183299ms step_avg:158.02ms
step:1171/1480 train_time:183466ms step_avg:158.02ms
step:1172/1480 train_time:183631ms step_avg:158.03ms
step:1173/1480 train_time:183804ms step_avg:158.04ms
step:1174/1480 train_time:183984ms step_avg:158.06ms
step:1175/1480 train_time:184155ms step_avg:158.07ms
step:1176/1480 train_time:184327ms step_avg:158.08ms
step:1177/1480 train_time:184503ms step_avg:158.10ms
step:1178/1480 train_time:184670ms step_avg:158.11ms
step:1179/1480 train_time:184835ms step_avg:158.11ms
step:1180/1480 train_time:185017ms step_avg:158.13ms
step:1181/1480 train_time:185187ms step_avg:158.14ms
step:1182/1480 train_time:185356ms step_avg:158.15ms
step:1183/1480 train_time:185527ms step_avg:158.16ms
step:1184/1480 train_time:185696ms step_avg:158.17ms
step:1185/1480 train_time:185868ms step_avg:158.19ms
step:1186/1480 train_time:186039ms step_avg:158.20ms
step:1187/1480 train_time:186222ms step_avg:158.22ms
step:1188/1480 train_time:186388ms step_avg:158.22ms
step:1189/1480 train_time:186560ms step_avg:158.24ms
step:1190/1480 train_time:186728ms step_avg:158.24ms
step:1191/1480 train_time:186902ms step_avg:158.26ms
step:1192/1480 train_time:187068ms step_avg:158.26ms
step:1193/1480 train_time:187235ms step_avg:158.27ms
step:1194/1480 train_time:187404ms step_avg:158.28ms
step:1195/1480 train_time:187577ms step_avg:158.29ms
step:1196/1480 train_time:187761ms step_avg:158.31ms
step:1197/1480 train_time:187931ms step_avg:158.32ms
step:1198/1480 train_time:188113ms step_avg:158.34ms
step:1199/1480 train_time:188284ms step_avg:158.35ms
step:1200/1480 train_time:188451ms step_avg:158.36ms
step:1201/1480 train_time:188621ms step_avg:158.37ms
step:1202/1480 train_time:188802ms step_avg:158.39ms
step:1203/1480 train_time:188977ms step_avg:158.41ms
step:1204/1480 train_time:189152ms step_avg:158.42ms
step:1205/1480 train_time:189321ms step_avg:158.43ms
step:1206/1480 train_time:189488ms step_avg:158.43ms
step:1207/1480 train_time:189656ms step_avg:158.44ms
step:1208/1480 train_time:189825ms step_avg:158.45ms
step:1209/1480 train_time:189999ms step_avg:158.46ms
step:1210/1480 train_time:190172ms step_avg:158.48ms
step:1211/1480 train_time:190347ms step_avg:158.49ms
step:1212/1480 train_time:190519ms step_avg:158.50ms
step:1213/1480 train_time:190692ms step_avg:158.51ms
step:1214/1480 train_time:190869ms step_avg:158.53ms
step:1215/1480 train_time:191042ms step_avg:158.54ms
step:1216/1480 train_time:191210ms step_avg:158.55ms
step:1217/1480 train_time:191383ms step_avg:158.56ms
step:1218/1480 train_time:191553ms step_avg:158.57ms
step:1219/1480 train_time:191731ms step_avg:158.59ms
step:1220/1480 train_time:191901ms step_avg:158.60ms
step:1221/1480 train_time:192070ms step_avg:158.60ms
step:1222/1480 train_time:192238ms step_avg:158.61ms
step:1223/1480 train_time:192409ms step_avg:158.62ms
step:1224/1480 train_time:192585ms step_avg:158.64ms
step:1225/1480 train_time:192757ms step_avg:158.65ms
step:1226/1480 train_time:192929ms step_avg:158.66ms
step:1227/1480 train_time:193103ms step_avg:158.67ms
step:1228/1480 train_time:193273ms step_avg:158.68ms
step:1229/1480 train_time:193445ms step_avg:158.69ms
step:1230/1480 train_time:193625ms step_avg:158.71ms
step:1231/1480 train_time:193802ms step_avg:158.72ms
step:1232/1480 train_time:193977ms step_avg:158.74ms
step:1233/1480 train_time:194148ms step_avg:158.75ms
step:1234/1480 train_time:194320ms step_avg:158.76ms
step:1235/1480 train_time:194494ms step_avg:158.77ms
step:1236/1480 train_time:194663ms step_avg:158.78ms
step:1237/1480 train_time:194834ms step_avg:158.79ms
step:1238/1480 train_time:195019ms step_avg:158.81ms
step:1239/1480 train_time:195189ms step_avg:158.82ms
step:1240/1480 train_time:195361ms step_avg:158.83ms
step:1241/1480 train_time:195535ms step_avg:158.84ms
step:1242/1480 train_time:195704ms step_avg:158.85ms
step:1243/1480 train_time:195877ms step_avg:158.86ms
step:1244/1480 train_time:196044ms step_avg:158.87ms
step:1245/1480 train_time:196212ms step_avg:158.88ms
step:1246/1480 train_time:196384ms step_avg:158.89ms
step:1247/1480 train_time:196554ms step_avg:158.90ms
step:1248/1480 train_time:196723ms step_avg:158.90ms
step:1249/1480 train_time:196891ms step_avg:158.91ms
step:1250/1480 train_time:197061ms step_avg:158.92ms
step:1250/1480 val_loss:3.3382 train_time:197134ms step_avg:158.98ms
step:1251/1480 train_time:197242ms step_avg:158.94ms
step:1252/1480 train_time:197411ms step_avg:158.95ms
step:1253/1480 train_time:197578ms step_avg:158.95ms
step:1254/1480 train_time:197751ms step_avg:158.96ms
step:1255/1480 train_time:197936ms step_avg:158.98ms
step:1256/1480 train_time:198110ms step_avg:159.00ms
step:1257/1480 train_time:198280ms step_avg:159.01ms
step:1258/1480 train_time:198454ms step_avg:159.02ms
step:1259/1480 train_time:198626ms step_avg:159.03ms
step:1260/1480 train_time:198794ms step_avg:159.04ms
step:1261/1480 train_time:198967ms step_avg:159.05ms
step:1262/1480 train_time:199144ms step_avg:159.06ms
step:1263/1480 train_time:199317ms step_avg:159.07ms
step:1264/1480 train_time:199483ms step_avg:159.08ms
step:1265/1480 train_time:199651ms step_avg:159.08ms
step:1266/1480 train_time:199823ms step_avg:159.09ms
step:1267/1480 train_time:199994ms step_avg:159.10ms
step:1268/1480 train_time:200166ms step_avg:159.11ms
step:1269/1480 train_time:200342ms step_avg:159.13ms
step:1270/1480 train_time:200511ms step_avg:159.14ms
step:1271/1480 train_time:200682ms step_avg:159.15ms
step:1272/1480 train_time:200848ms step_avg:159.15ms
step:1273/1480 train_time:201020ms step_avg:159.16ms
step:1274/1480 train_time:201192ms step_avg:159.17ms
step:1275/1480 train_time:201360ms step_avg:159.18ms
step:1276/1480 train_time:201527ms step_avg:159.18ms
step:1277/1480 train_time:201700ms step_avg:159.20ms
step:1278/1480 train_time:201868ms step_avg:159.20ms
step:1279/1480 train_time:202038ms step_avg:159.21ms
step:1280/1480 train_time:202217ms step_avg:159.23ms
step:1281/1480 train_time:202386ms step_avg:159.23ms
step:1282/1480 train_time:202553ms step_avg:159.24ms
step:1283/1480 train_time:202723ms step_avg:159.25ms
step:1284/1480 train_time:202892ms step_avg:159.26ms
step:1285/1480 train_time:203062ms step_avg:159.26ms
step:1286/1480 train_time:203232ms step_avg:159.27ms
step:1287/1480 train_time:203404ms step_avg:159.28ms
step:1288/1480 train_time:203575ms step_avg:159.29ms
step:1289/1480 train_time:203758ms step_avg:159.31ms
step:1290/1480 train_time:203937ms step_avg:159.33ms
step:1291/1480 train_time:204110ms step_avg:159.34ms
step:1292/1480 train_time:204285ms step_avg:159.35ms
step:1293/1480 train_time:204460ms step_avg:159.36ms
step:1294/1480 train_time:204631ms step_avg:159.37ms
step:1295/1480 train_time:204803ms step_avg:159.38ms
step:1296/1480 train_time:204976ms step_avg:159.39ms
step:1297/1480 train_time:205148ms step_avg:159.40ms
step:1298/1480 train_time:205318ms step_avg:159.41ms
step:1299/1480 train_time:205488ms step_avg:159.42ms
step:1300/1480 train_time:205655ms step_avg:159.42ms
step:1301/1480 train_time:205824ms step_avg:159.43ms
step:1302/1480 train_time:205998ms step_avg:159.44ms
step:1303/1480 train_time:206175ms step_avg:159.45ms
step:1304/1480 train_time:206348ms step_avg:159.47ms
step:1305/1480 train_time:206516ms step_avg:159.47ms
step:1306/1480 train_time:206692ms step_avg:159.48ms
step:1307/1480 train_time:206859ms step_avg:159.49ms
step:1308/1480 train_time:207030ms step_avg:159.50ms
step:1309/1480 train_time:207202ms step_avg:159.51ms
step:1310/1480 train_time:207370ms step_avg:159.52ms
step:1311/1480 train_time:207539ms step_avg:159.52ms
step:1312/1480 train_time:207714ms step_avg:159.53ms
step:1313/1480 train_time:207883ms step_avg:159.54ms
step:1314/1480 train_time:208056ms step_avg:159.55ms
step:1315/1480 train_time:208227ms step_avg:159.56ms
step:1316/1480 train_time:208394ms step_avg:159.57ms
step:1317/1480 train_time:208566ms step_avg:159.58ms
step:1318/1480 train_time:208748ms step_avg:159.59ms
step:1319/1480 train_time:208926ms step_avg:159.61ms
step:1320/1480 train_time:209103ms step_avg:159.62ms
step:1321/1480 train_time:209276ms step_avg:159.63ms
step:1322/1480 train_time:209458ms step_avg:159.65ms
step:1323/1480 train_time:209632ms step_avg:159.66ms
step:1324/1480 train_time:209807ms step_avg:159.67ms
step:1325/1480 train_time:209987ms step_avg:159.69ms
step:1326/1480 train_time:210162ms step_avg:159.70ms
step:1327/1480 train_time:210334ms step_avg:159.71ms
step:1328/1480 train_time:210504ms step_avg:159.71ms
step:1329/1480 train_time:210699ms step_avg:159.74ms
step:1330/1480 train_time:210877ms step_avg:159.75ms
step:1331/1480 train_time:211047ms step_avg:159.76ms
step:1332/1480 train_time:211221ms step_avg:159.77ms
step:1333/1480 train_time:211396ms step_avg:159.79ms
step:1334/1480 train_time:211568ms step_avg:159.79ms
step:1335/1480 train_time:211736ms step_avg:159.80ms
step:1336/1480 train_time:211919ms step_avg:159.82ms
step:1337/1480 train_time:212093ms step_avg:159.83ms
step:1338/1480 train_time:212264ms step_avg:159.84ms
step:1339/1480 train_time:212440ms step_avg:159.85ms
step:1340/1480 train_time:212611ms step_avg:159.86ms
step:1341/1480 train_time:212779ms step_avg:159.86ms
step:1342/1480 train_time:212953ms step_avg:159.87ms
step:1343/1480 train_time:213124ms step_avg:159.88ms
step:1344/1480 train_time:213295ms step_avg:159.89ms
step:1345/1480 train_time:213473ms step_avg:159.90ms
step:1346/1480 train_time:213642ms step_avg:159.91ms
step:1347/1480 train_time:213810ms step_avg:159.92ms
step:1348/1480 train_time:213979ms step_avg:159.92ms
step:1349/1480 train_time:214148ms step_avg:159.93ms
step:1350/1480 train_time:214324ms step_avg:159.94ms
step:1351/1480 train_time:214495ms step_avg:159.95ms
step:1352/1480 train_time:214667ms step_avg:159.96ms
step:1353/1480 train_time:214843ms step_avg:159.97ms
step:1354/1480 train_time:215013ms step_avg:159.98ms
step:1355/1480 train_time:215180ms step_avg:159.99ms
step:1356/1480 train_time:215353ms step_avg:159.99ms
step:1357/1480 train_time:215528ms step_avg:160.01ms
step:1358/1480 train_time:215700ms step_avg:160.01ms
step:1359/1480 train_time:215872ms step_avg:160.02ms
step:1360/1480 train_time:216047ms step_avg:160.03ms
step:1361/1480 train_time:216225ms step_avg:160.05ms
step:1362/1480 train_time:216399ms step_avg:160.06ms
step:1363/1480 train_time:216582ms step_avg:160.08ms
step:1364/1480 train_time:216751ms step_avg:160.08ms
step:1365/1480 train_time:216918ms step_avg:160.09ms
step:1366/1480 train_time:217090ms step_avg:160.10ms
step:1367/1480 train_time:217262ms step_avg:160.10ms
step:1368/1480 train_time:217434ms step_avg:160.11ms
step:1369/1480 train_time:217615ms step_avg:160.13ms
step:1370/1480 train_time:217793ms step_avg:160.14ms
step:1371/1480 train_time:217966ms step_avg:160.15ms
step:1372/1480 train_time:218145ms step_avg:160.16ms
step:1373/1480 train_time:218313ms step_avg:160.17ms
step:1374/1480 train_time:218490ms step_avg:160.18ms
step:1375/1480 train_time:218662ms step_avg:160.19ms
step:1375/1480 val_loss:3.2999 train_time:218730ms step_avg:160.24ms
step:1376/1480 train_time:218834ms step_avg:160.20ms
step:1377/1480 train_time:219008ms step_avg:160.21ms
step:1378/1480 train_time:219177ms step_avg:160.22ms
step:1379/1480 train_time:219352ms step_avg:160.23ms
step:1380/1480 train_time:219526ms step_avg:160.24ms
step:1381/1480 train_time:219707ms step_avg:160.25ms
step:1382/1480 train_time:219879ms step_avg:160.26ms
step:1383/1480 train_time:220050ms step_avg:160.27ms
step:1384/1480 train_time:220226ms step_avg:160.28ms
step:1385/1480 train_time:220390ms step_avg:160.28ms
step:1386/1480 train_time:220560ms step_avg:160.29ms
step:1387/1480 train_time:220732ms step_avg:160.30ms
step:1388/1480 train_time:220900ms step_avg:160.30ms
step:1389/1480 train_time:221073ms step_avg:160.31ms
step:1390/1480 train_time:221243ms step_avg:160.32ms
step:1391/1480 train_time:221412ms step_avg:160.33ms
step:1392/1480 train_time:221586ms step_avg:160.34ms
step:1393/1480 train_time:221756ms step_avg:160.34ms
step:1394/1480 train_time:221925ms step_avg:160.35ms
step:1395/1480 train_time:222093ms step_avg:160.36ms
step:1396/1480 train_time:222262ms step_avg:160.36ms
step:1397/1480 train_time:222429ms step_avg:160.37ms
step:1398/1480 train_time:222596ms step_avg:160.37ms
step:1399/1480 train_time:222766ms step_avg:160.38ms
step:1400/1480 train_time:222943ms step_avg:160.39ms
step:1401/1480 train_time:223110ms step_avg:160.40ms
step:1402/1480 train_time:223281ms step_avg:160.40ms
step:1403/1480 train_time:223461ms step_avg:160.42ms
step:1404/1480 train_time:223632ms step_avg:160.42ms
step:1405/1480 train_time:223807ms step_avg:160.43ms
step:1406/1480 train_time:223982ms step_avg:160.45ms
step:1407/1480 train_time:224151ms step_avg:160.45ms
step:1408/1480 train_time:224320ms step_avg:160.46ms
step:1409/1480 train_time:224503ms step_avg:160.47ms
step:1410/1480 train_time:224672ms step_avg:160.48ms
step:1411/1480 train_time:224842ms step_avg:160.49ms
step:1412/1480 train_time:225011ms step_avg:160.49ms
step:1413/1480 train_time:225182ms step_avg:160.50ms
step:1414/1480 train_time:225351ms step_avg:160.51ms
step:1415/1480 train_time:225527ms step_avg:160.52ms
step:1416/1480 train_time:225712ms step_avg:160.53ms
step:1417/1480 train_time:225888ms step_avg:160.55ms
step:1418/1480 train_time:226058ms step_avg:160.55ms
step:1419/1480 train_time:226232ms step_avg:160.56ms
step:1420/1480 train_time:226407ms step_avg:160.57ms
step:1421/1480 train_time:226582ms step_avg:160.58ms
step:1422/1480 train_time:226752ms step_avg:160.59ms
step:1423/1480 train_time:226922ms step_avg:160.60ms
step:1424/1480 train_time:227098ms step_avg:160.61ms
step:1425/1480 train_time:227280ms step_avg:160.62ms
step:1426/1480 train_time:227453ms step_avg:160.63ms
step:1427/1480 train_time:227629ms step_avg:160.64ms
step:1428/1480 train_time:227801ms step_avg:160.65ms
step:1429/1480 train_time:227968ms step_avg:160.65ms
step:1430/1480 train_time:228143ms step_avg:160.66ms
step:1431/1480 train_time:228320ms step_avg:160.68ms
step:1432/1480 train_time:228496ms step_avg:160.69ms
step:1433/1480 train_time:228675ms step_avg:160.70ms
step:1434/1480 train_time:228855ms step_avg:160.71ms
step:1435/1480 train_time:229030ms step_avg:160.72ms
step:1436/1480 train_time:229205ms step_avg:160.73ms
step:1437/1480 train_time:229376ms step_avg:160.74ms
step:1438/1480 train_time:229545ms step_avg:160.75ms
step:1439/1480 train_time:229720ms step_avg:160.76ms
step:1440/1480 train_time:229889ms step_avg:160.76ms
step:1441/1480 train_time:230061ms step_avg:160.77ms
step:1442/1480 train_time:230236ms step_avg:160.78ms
step:1443/1480 train_time:230428ms step_avg:160.80ms
step:1444/1480 train_time:230599ms step_avg:160.81ms
step:1445/1480 train_time:230770ms step_avg:160.82ms
step:1446/1480 train_time:230946ms step_avg:160.83ms
step:1447/1480 train_time:231123ms step_avg:160.84ms
step:1448/1480 train_time:231294ms step_avg:160.84ms
step:1449/1480 train_time:231467ms step_avg:160.85ms
step:1450/1480 train_time:231640ms step_avg:160.86ms
step:1451/1480 train_time:231810ms step_avg:160.87ms
step:1452/1480 train_time:231985ms step_avg:160.88ms
step:1453/1480 train_time:232154ms step_avg:160.88ms
step:1454/1480 train_time:232325ms step_avg:160.89ms
step:1455/1480 train_time:232505ms step_avg:160.90ms
step:1456/1480 train_time:232680ms step_avg:160.91ms
step:1457/1480 train_time:232850ms step_avg:160.92ms
step:1458/1480 train_time:233022ms step_avg:160.93ms
step:1459/1480 train_time:233200ms step_avg:160.94ms
step:1460/1480 train_time:233372ms step_avg:160.95ms
step:1461/1480 train_time:233547ms step_avg:160.96ms
step:1462/1480 train_time:233718ms step_avg:160.96ms
step:1463/1480 train_time:233895ms step_avg:160.97ms
step:1464/1480 train_time:234069ms step_avg:160.98ms
step:1465/1480 train_time:234243ms step_avg:160.99ms
step:1466/1480 train_time:234412ms step_avg:161.00ms
step:1467/1480 train_time:234587ms step_avg:161.01ms
step:1468/1480 train_time:234757ms step_avg:161.01ms
step:1469/1480 train_time:234930ms step_avg:161.02ms
step:1470/1480 train_time:235109ms step_avg:161.03ms
step:1471/1480 train_time:235295ms step_avg:161.05ms
step:1472/1480 train_time:235475ms step_avg:161.06ms
step:1473/1480 train_time:235646ms step_avg:161.07ms
step:1474/1480 train_time:235823ms step_avg:161.08ms
step:1475/1480 train_time:236003ms step_avg:161.09ms
step:1476/1480 train_time:236175ms step_avg:161.10ms
step:1477/1480 train_time:236360ms step_avg:161.12ms
step:1478/1480 train_time:236543ms step_avg:161.13ms
step:1479/1480 train_time:236717ms step_avg:161.14ms
step:1480/1480 train_time:236890ms step_avg:161.15ms
step:1480/1480 val_loss:3.2810 train_time:236961ms step_avg:161.20ms
