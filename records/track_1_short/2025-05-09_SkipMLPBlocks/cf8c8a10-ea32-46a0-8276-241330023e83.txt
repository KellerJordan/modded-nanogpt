import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
import uuid
import time
import copy
import glob
from dataclasses import dataclass
from functools import lru_cache
from pathlib import Path

os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "expandable_segments:True"
import torch
torch.empty(1, device="cuda", requires_grad=True).backward() # prevents a bug on some systems
from torch import Tensor, nn
import torch.nn.functional as F
import torch.distributed as dist
#torch._inductor.config.coordinate_descent_tuning = True # we have banned this flag for new records because it causes compilation to take 30min
import numpy as np
import triton
import triton.language as tl
from flash_attn_interface import flash_attn_varlen_func
import torch._dynamo as dynamo
dynamo.config.recompile_limit = 64

# -----------------------------------------------------------------------------
# Custom operators: FP8 matmul by @YouJiacheng

@torch.library.custom_op("nanogpt::mm", mutates_args=())
def mm_op(x: Tensor, w: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor, Tensor]:
    @torch.compile
    def impl(x: Tensor, w: Tensor):
        assert x.is_contiguous() and w.is_contiguous()
        x_f8 = x.div(x_s).to(torch.float8_e4m3fn)
        w_f8 = w.div(w_s).to(torch.float8_e4m3fn)
        out = torch._scaled_mm(
            x_f8,
            w_f8.T,
            out_dtype=torch.bfloat16,
            scale_a=x.new_tensor(x_s, dtype=torch.float32),
            scale_b=x.new_tensor(w_s, dtype=torch.float32),
            use_fast_accum=True,
        )
        return out, x_f8, w_f8

    return impl(x, w)

@mm_op.register_fake
def _(x: Tensor, w: Tensor, *_):
    assert x.ndim == w.ndim == 2
    assert x.shape[1] == w.shape[1]
    assert x.device == w.device
    assert x.is_contiguous() and w.is_contiguous()
    return x @ w.T, x.to(torch.float8_e4m3fn), w.to(torch.float8_e4m3fn)

@torch.library.custom_op("nanogpt::mm_backward", mutates_args=())
def mm_backward_op(g: Tensor, x_f8: Tensor, w_f8: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor]:
    @torch.compile
    def impl(grad: Tensor, x_f8: Tensor, w_f8: Tensor):
        assert grad.is_contiguous()
        x_inv_s = grad.new_tensor(x_s, dtype=torch.float32)
        w_inv_s = grad.new_tensor(w_s, dtype=torch.float32)
        grad_inv_s = grad.new_tensor(grad_s, dtype=torch.float32)
        grad_f8 = grad.div(grad_s).to(torch.float8_e5m2)
        grad_x = torch._scaled_mm(
            grad_f8,
            w_f8.T.contiguous().T,
            out_dtype=torch.bfloat16,
            scale_a=grad_inv_s,
            scale_b=w_inv_s,
            use_fast_accum=False,
        )
        # faster than grad_f8_t @ x_f8, for (d_out, d_in) == (50304, 768)
        grad_w = torch._scaled_mm(
            x_f8.T.contiguous(),
            grad_f8.T.contiguous().T,
            out_dtype=torch.float32,
            scale_a=x_inv_s,
            scale_b=grad_inv_s,
            use_fast_accum=False,
        ).T
        return grad_x, grad_w

    return impl(g, x_f8, w_f8)

@mm_backward_op.register_fake
def _(g: Tensor, x_f8: Tensor, w_f8: Tensor, *_):
    return x_f8.to(torch.bfloat16), w_f8.T.contiguous().T.to(torch.float32)

def backward(ctx, grad_out: Tensor, *_):
    x_f8, w_f8 = ctx.saved_tensors
    x_s, w_s, grad_s = ctx.scales
    grad_x, grad_w = torch.ops.nanogpt.mm_backward(
        grad_out, x_f8, w_f8, x_s, w_s, grad_s
    )
    return grad_x, grad_w, None, None, None

def setup_context(ctx: torch.autograd.function.FunctionCtx, inputs, output):
    *_, x_s, w_s, grad_s = inputs
    _, x_f8, w_f8 = output
    ctx.save_for_backward(x_f8, w_f8)
    ctx.scales = x_s, w_s, grad_s
    ctx.set_materialize_grads(False)

mm_op.register_autograd(backward, setup_context=setup_context)

# -----------------------------------------------------------------------------
# Triton kernel for symmetric matrix multiplication by @byronxu99

def _get_autotune_configs():
    return [
        triton.Config(
            {
                "BLOCK_SIZE_M": bm,
                "BLOCK_SIZE_N": bn,
                "BLOCK_SIZE_K": bk,
                "GROUP_SIZE_M": 8,
                "LOWER_UPPER": 1,
            },
            num_stages=stages,
            num_warps=warps,
        )
        for bm in [64, 128]
        for bn in [64, 128, 256]
        for bk in [64, 128]
        for stages, warps in [(3, 4), (3, 8), (4, 4)]
        if bm // bn <= 2 and bn // bm <= 2
    ]

@triton.jit
def _pid_to_block(
    pid,
    M,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
):
    # Split output matrix into blocks of size (BLOCK_SIZE_M, BLOCK_SIZE_N)
    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)
    num_pid_n = tl.cdiv(M, BLOCK_SIZE_N)

    # Map PID to a single matrix in batch
    batch_idx = pid // (num_pid_m * num_pid_n)
    pid = pid % (num_pid_m * num_pid_n)

    # Map PID to 2D grid of blocks
    pid_m = pid // num_pid_n
    pid_n = pid % num_pid_n
    pid_m, pid_n = tl.swizzle2d(pid_m, pid_n, num_pid_m, num_pid_n, GROUP_SIZE_M)

    m_idx = pid_m * BLOCK_SIZE_M
    n_idx = pid_n * BLOCK_SIZE_N
    return batch_idx, m_idx, n_idx

@triton.autotune(
    configs=_get_autotune_configs(),
    key=["M", "K", "a_stride_r", "a_stride_c", "c_stride_r", "c_stride_c"],
)
@triton.jit
def ns_line_1_kernel(
    A_ptr, C_ptr,
    M, K,
    a_stride_b, a_stride_r, a_stride_c,
    c_stride_b, c_stride_r, c_stride_c,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    BLOCK_SIZE_K: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
    LOWER_UPPER: tl.constexpr,
):
    pid = tl.program_id(axis=0)
    batch_idx, m_idx, n_idx = _pid_to_block(
        pid, M, BLOCK_SIZE_M, BLOCK_SIZE_N, GROUP_SIZE_M
    )

    # Skip blocks that don't need to be computed
    skip_block_below_diag = (LOWER_UPPER == 0) and (n_idx + BLOCK_SIZE_N <= m_idx)
    skip_block_above_diag = (LOWER_UPPER != 0) and (m_idx + BLOCK_SIZE_M <= n_idx)
    if skip_block_below_diag or skip_block_above_diag:
        return

    # Index into one matrix of batch
    A_ptr += batch_idx * a_stride_b
    C_ptr += batch_idx * c_stride_b

    # Create pointer arrays for A and A.T
    offs_m = (m_idx + tl.arange(0, BLOCK_SIZE_M)) % M
    offs_n = (n_idx + tl.arange(0, BLOCK_SIZE_N)) % M
    offs_k = tl.arange(0, BLOCK_SIZE_K)
    a_ptrs = A_ptr + (offs_m[:, None] * a_stride_r + offs_k[None, :] * a_stride_c)
    at_ptrs = A_ptr + (offs_k[:, None] * a_stride_c + offs_n[None, :] * a_stride_r)

    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)

    # Accumulate over blocks of K
    for k in tl.range(0, tl.cdiv(K, BLOCK_SIZE_K)):
        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k * BLOCK_SIZE_K, other=0.0)
        at = tl.load(at_ptrs, mask=offs_k[:, None] < K - k * BLOCK_SIZE_K, other=0.0)
        accumulator = tl.dot(a, at, accumulator)
        a_ptrs += BLOCK_SIZE_K * a_stride_c
        at_ptrs += BLOCK_SIZE_K * a_stride_c

    out_dtype = C_ptr.dtype.element_ty
    output = accumulator.to(out_dtype)

    # Store block of C
    offs_cm = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_cn = n_idx + tl.arange(0, BLOCK_SIZE_N)
    c_ptrs = C_ptr + (offs_cm[:, None] * c_stride_r + offs_cn[None, :] * c_stride_c)
    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < M)
    tl.store(c_ptrs, output, mask=c_mask)

    # Store block of C mirrored across the diagonal
    c_ptrs_t = C_ptr + (offs_cn[:, None] * c_stride_r + offs_cm[None, :] * c_stride_c)
    c_mask_t = (offs_cn[:, None] < M) & (offs_cm[None, :] < M)
    tl.store(c_ptrs_t, output.T, mask=c_mask_t)

def ns_line_1(A: torch.Tensor, out: torch.Tensor):
    """
    Launch Triton kernel to compute C = A @ A.T
    """
    assert A.ndim == 2 or A.ndim == 3
    M, K = A.shape[-2:]
    assert out.size(-2) == M, "Output matrix has incorrect shape"
    assert out.size(-1) == M, "Output matrix has incorrect shape"

    batch_size = A.size(0) if A.ndim == 3 else 1
    input_batch_stride = A.stride(0) if A.ndim == 3 else 0
    output_batch_stride = out.stride(0) if out.ndim == 3 else 0

    grid = lambda meta: (
        batch_size * triton.cdiv(M, meta["BLOCK_SIZE_M"]) * triton.cdiv(M, meta["BLOCK_SIZE_N"]),
    )
    ns_line_1_kernel[grid](
        A_ptr=A,
        C_ptr=out,
        M=M,
        K=K,
        a_stride_b=input_batch_stride,
        a_stride_r=A.stride(-2),
        a_stride_c=A.stride(-1),
        c_stride_b=output_batch_stride,
        c_stride_r=out.stride(-2),
        c_stride_c=out.stride(-1),
    )
    return out

@triton.autotune(
    configs=_get_autotune_configs(),
    key=["M", "a_stride_r", "a_stride_c", "c_stride_r", "c_stride_c"],
)
@triton.jit
def ns_line_2_kernel(
    A_ptr, C_ptr,
    M,
    a_stride_b, a_stride_r, a_stride_c,
    c_stride_b, c_stride_r, c_stride_c,
    alpha, beta,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    BLOCK_SIZE_K: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
    LOWER_UPPER: tl.constexpr,
):
    # This is mostly duplicated from ns_line_1_kernel, but also loads and adds a block of A
    # Performance is slightly slower than ns_line_1_kernel, so we use two separate kernels
    pid = tl.program_id(axis=0)
    batch_idx, m_idx, n_idx = _pid_to_block(
        pid, M, BLOCK_SIZE_M, BLOCK_SIZE_N, GROUP_SIZE_M
    )

    # Skip blocks that don't need to be computed
    skip_block_below_diag = (LOWER_UPPER == 0) and (n_idx + BLOCK_SIZE_N <= m_idx)
    skip_block_above_diag = (LOWER_UPPER != 0) and (m_idx + BLOCK_SIZE_M <= n_idx)
    if skip_block_below_diag or skip_block_above_diag:
        return

    # Index into one matrix of batch
    A_ptr += batch_idx * a_stride_b
    C_ptr += batch_idx * c_stride_b

    # Create pointer arrays for A and A.T
    offs_m = (m_idx + tl.arange(0, BLOCK_SIZE_M)) % M
    offs_n = (n_idx + tl.arange(0, BLOCK_SIZE_N)) % M
    offs_k = tl.arange(0, BLOCK_SIZE_K)
    a_ptrs = A_ptr + (offs_m[:, None] * a_stride_r + offs_k[None, :] * a_stride_c)
    at_ptrs = A_ptr + (offs_k[:, None] * a_stride_c + offs_n[None, :] * a_stride_r)

    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)

    # Accumulate over blocks of K
    for k in tl.range(0, tl.cdiv(M, BLOCK_SIZE_K)):
        a = tl.load(a_ptrs, mask=offs_k[None, :] < M - k * BLOCK_SIZE_K, other=0.0)
        at = tl.load(at_ptrs, mask=offs_k[:, None] < M - k * BLOCK_SIZE_K, other=0.0)
        accumulator = tl.dot(a, at, accumulator)
        a_ptrs += BLOCK_SIZE_K * a_stride_c
        at_ptrs += BLOCK_SIZE_K * a_stride_c

    # Load block of A to add (corresponds to the current block of C)
    offs_am = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_an = n_idx + tl.arange(0, BLOCK_SIZE_N)
    a_add_ptrs = A_ptr + (offs_am[:, None] * a_stride_r + offs_an[None, :] * a_stride_c)
    a_add_mask = (offs_am[:, None] < M) & (offs_an[None, :] < M)
    a_add = tl.load(a_add_ptrs, mask=a_add_mask, other=0.0).to(tl.float32)

    # Apply alpha and beta
    accumulator *= alpha
    accumulator += a_add * beta

    out_dtype = C_ptr.dtype.element_ty
    output = accumulator.to(out_dtype)

    # Store block of C
    offs_cm = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_cn = n_idx + tl.arange(0, BLOCK_SIZE_N)
    c_ptrs = C_ptr + (offs_cm[:, None] * c_stride_r + offs_cn[None, :] * c_stride_c)
    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < M)
    tl.store(c_ptrs, output, mask=c_mask)

    # Store block of C mirrored across the diagonal
    c_ptrs_t = C_ptr + (offs_cn[:, None] * c_stride_r + offs_cm[None, :] * c_stride_c)
    c_mask_t = (offs_cn[:, None] < M) & (offs_cm[None, :] < M)
    tl.store(c_ptrs_t, output.T, mask=c_mask_t)

def ns_line_2(A: torch.Tensor, alpha: float, beta: float, out: torch.Tensor):
    """
    Launch Triton kernel to compute C = alpha * A @ A.T + beta * A
    """
    assert A.ndim == 2 or A.ndim == 3
    M, K = A.shape[-2:]
    assert M == K, "Input matrix must be square"
    assert out.size(-2) == M
    assert out.size(-1) == M

    batch_size = A.size(0) if A.ndim == 3 else 1
    input_batch_stride = A.stride(0) if A.ndim == 3 else 0
    output_batch_stride = out.stride(0) if out.ndim == 3 else 0

    grid = lambda meta: (
        batch_size * triton.cdiv(M, meta["BLOCK_SIZE_M"]) * triton.cdiv(M, meta["BLOCK_SIZE_N"]),
    )
    ns_line_2_kernel[grid](
        A_ptr=A,
        C_ptr=out,
        M=M,
        a_stride_b=input_batch_stride,
        a_stride_r=A.stride(-2),
        a_stride_c=A.stride(-1),
        c_stride_b=output_batch_stride,
        c_stride_r=out.stride(-2),
        c_stride_c=out.stride(-1),
        alpha=alpha,
        beta=beta,
    )
    return out

@torch.compile(dynamic=False, fullgraph=True) # Must use dynamic=False or else it's much slower
def newton_schulz_triton(G: torch.Tensor):
    a, b, c = (3.4445, -4.7750, 2.0315)
    X = G.bfloat16()
    if G.size(-2) > G.size(-1):
        X = X.mT

    # Ensure spectral norm is at most 1
    X = X / (X.norm(dim=(-2, -1), keepdim=True) + 1e-7)

    # Allocate buffers
    X = X.contiguous()
    A = torch.empty((*X.shape[:-1], X.size(-2)), device=X.device, dtype=X.dtype)
    B = torch.empty_like(A)
    C = torch.empty_like(X)

    ns_line_3 = torch.baddbmm if X.ndim > 2 else torch.addmm

    # Perform the NS iterations
    for _ in range(5):
        ns_line_1(X, out=A)  # A = X @ X.mT
        ns_line_2(A, alpha=c, beta=b, out=B)  # B = b * A + c * A @ A
        ns_line_3(X, B, X, beta=a, out=C)  # C = a * X + B @ X
        X, C = C, X  # Swap references to avoid unnecessary copies

    if G.size(-2) > G.size(-1):
        X = X.mT
    return X

# -----------------------------------------------------------------------------
# Muon optimizer

class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    https://kellerjordan.github.io/posts/muon/

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Warning: This optimizer should not be used for the embedding layer, the final fully connected layer,
    or any {0,1}-D parameters; those should all be optimized by a standard method (e.g., AdamW).
    """
    def __init__(self, params, lr=0.02, weight_decay=0.01, momentum=0.95):
        defaults = dict(lr=lr, weight_decay=weight_decay, momentum=momentum)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)

    @torch.no_grad()
    def step(self):
        # Efficient systems-wise implementation of step developed by @YouJiacheng,
        # @KonstantinWilleke, @alexrgilbert, @adricarda, @tuttyfrutyee, @vdlad,
        # @ryanyang0, and @vagrawal.
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_gather_futures: list[torch.Future] = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            grad = torch.empty_like(params[-1])
            grad_pad = [param.grad for param in params] + [torch.zeros_like(params[-1])] * world_size
            for base_i in range(0, len(params), world_size):
                if base_i + rank < len(params):
                    grad = params[base_i + rank].grad
                # This gives strange dynamo warnings
                reduce_scatter_futures.append(dist.reduce_scatter(grad, grad_pad[base_i:base_i + world_size], op=dist.ReduceOp.AVG, async_op=True).get_future())

        idx = 0
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            params_pad = params + [torch.empty_like(params[-1])] * world_size
            momentum = group["momentum"]
            for base_i in range(0, len(params), world_size):
                reduce_scatter_futures[idx].wait()
                if base_i + rank < len(params):
                    p = params[base_i + rank]
                    grad = p.grad
                    eff_lr = group["lr"] * max(1, p.size(-2) / p.size(-1)) ** 0.5 * getattr(p, "lr_mul", 1.0)
                    eff_weight_decay = group["lr"] * group["weight_decay"] * getattr(p, "wd_mul", 1.0)
                    state = self.state[p]
                    if len(state) == 0:
                        state["momentum_buffer"] = torch.zeros_like(grad)
                    momentum_buffer = state["momentum_buffer"]
                    p.mul_(1 - eff_weight_decay)
                    momentum_buffer.lerp_(grad, 1 - momentum)
                    grad = grad.lerp_(momentum_buffer, momentum)
                    v = newton_schulz_triton(grad)
                    p.add_(other=v, alpha=-eff_lr)
                idx += 1
                all_gather_futures.append(dist.all_gather(params_pad[base_i:base_i + world_size], params_pad[base_i + rank], async_op=True).get_future())
        torch.futures.collect_all(all_gather_futures).wait()

class DistAdam(torch.optim.Optimizer):
    def __init__(self, params, lr: float = 1e-3, betas: tuple[float, float] = (0.9, 0.999), eps: float = 1e-8, weight_decay: float = 0.01):
        defaults = dict(lr=lr, betas=betas, eps=eps, weight_decay=weight_decay)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)
        # DistributedAdam implementation by @vagrawal

    @torch.compile
    @torch.no_grad()
    def step(self):
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_gather_futures: list[torch.Future] = []
        grad_slices = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            for base_i in range(len(params)):
                grad = params[base_i].grad
                rank_size = grad.shape[0] // world_size
                grad_slice = torch.empty_like(grad[:rank_size])
                reduce_scatter_futures.append(dist.reduce_scatter_tensor(grad_slice, grad, op=dist.ReduceOp.AVG, async_op=True).get_future())
                grad_slices.append(grad_slice)

        idx = 0
        for group in self.param_groups:
            beta1, beta2 = group['betas']
            eps = group['eps']
            wd = group['weight_decay']
            params = group['params']
            for base in range(len(params)):
                reduce_scatter_futures[idx].wait()
                p = params[base]
                rank_size = p.shape[0] // world_size
                p_slice = p[rank * rank_size:(rank + 1) * rank_size]
                lr = group['lr'] * getattr(p, "lr_mul", 1.0)
                state = self.state[p]
                g_slice = grad_slices[idx]
                # State init
                if not state:
                    state['step'] = torch.tensor(0, dtype=torch.int64, device=p.device)
                    state['exp_avg'] = torch.zeros_like(p_slice)
                    state['exp_avg_sq'] = torch.zeros_like(p_slice)
                exp_avg = state['exp_avg']
                exp_avg_sq = state['exp_avg_sq']
                state['step'] += 1
                t = state['step']
                # weight decay
                if wd != 0:
                    eff_weight_decay = lr * wd * getattr(p, "wd_mul", 1.0)
                    p_slice.mul_(1 - eff_weight_decay)
                # update running averages
                exp_avg.mul_(beta1).add_(g_slice, alpha=1 - beta1)
                exp_avg_sq.mul_(beta2).addcmul_(g_slice, g_slice, value=1 - beta2)
                # bias corrections
                bias1 = 1 - beta1 ** t
                bias2 = 1 - beta2 ** t
                # compute step
                denom = exp_avg_sq.sqrt().add_(eps)
                step_size = lr * (torch.sqrt(bias2) / bias1)
                update = exp_avg.div(denom).mul_(step_size)
                p_slice.add_(other=update, alpha=-1.0)
                idx += 1
                all_gather_futures.append(dist.all_gather_into_tensor(p, p_slice, async_op=True).get_future())
        torch.futures.collect_all(all_gather_futures).wait()

# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the model

def norm(x: Tensor):
    return F.rms_norm(x, (x.size(-1),))

class CastedLinear(nn.Linear):
    def __init__(self, in_features: int, out_features: int, use_fp8=False, x_s=1.0, w_s=1.0, grad_s=1.0):
        super().__init__(in_features, out_features, bias=False)
        self.use_fp8 = use_fp8
        self.x_s = x_s
        self.w_s = w_s
        self.grad_s = grad_s

    def reset_parameters(self) -> None:
        std = 0.5 * (self.in_features ** -0.5) # 0.5 is a bit better than the default 1/sqrt(3)
        bound = (3 ** 0.5) * std
        with torch.no_grad():
            self.weight.uniform_(-bound, bound)

    def forward(self, x: Tensor):
        if self.use_fp8 and self.training:
            _x = x.flatten(0, -2)
            out: Tensor = torch.ops.nanogpt.mm(_x, self.weight, x_s=self.x_s, w_s=self.w_s, grad_s=self.grad_s)[0]
            return out.reshape(*x.shape[:-1], -1)
        else:
            return F.linear(x, self.weight.type_as(x))

class Rotary(nn.Module):
    def __init__(self, dim: int, max_seq_len: int):
        super().__init__()
        # half-truncate RoPE by @YouJiacheng (w/ base freq tuning)
        angular_freq = (1 / 1024) ** torch.linspace(0, 1, steps=dim//4, dtype=torch.float32)
        angular_freq = torch.cat([angular_freq, angular_freq.new_zeros(dim//4)])
        t = torch.arange(max_seq_len, dtype=torch.float32)
        theta = torch.einsum("i,j -> ij", t, angular_freq)
        self.cos = nn.Buffer(theta.cos(), persistent=False)
        self.sin = nn.Buffer(theta.sin(), persistent=False)

    def forward(self, x_BTHD: Tensor):
        assert self.cos.size(0) >= x_BTHD.size(-3)
        cos, sin = self.cos[None, :x_BTHD.size(-3), None, :], self.sin[None, :x_BTHD.size(-3), None, :]
        x1, x2 = x_BTHD.to(dtype=torch.float32).chunk(2, dim=-1)
        y1 = x1 * cos + x2 * sin
        y2 = x1 * (-sin) + x2 * cos
        return torch.cat((y1, y2), 3).type_as(x_BTHD)

class CausalSelfAttention(nn.Module):
    def __init__(self, dim: int, num_heads: int, max_seq_len: int, head_dim=128):
        super().__init__()
        self.num_heads = num_heads
        self.head_dim = head_dim
        hdim = num_heads * head_dim
        assert hdim == dim, "num_heads * head_dim must equal model_dim"
        std = 0.5 * (dim ** -0.5)
        bound = (3 ** 0.5) * std # improved init scale by @YouJiacheng
        # merged QKV weights: suggested by many, implemented by @fernbear.bsky.social, and further improved by @YouJiacheng
        # https://x.com/hi_tysam/status/1879699187107033311
        self.qkvo_w = nn.Parameter(torch.empty(4, hdim, dim))
        with torch.no_grad():
            self.qkvo_w[:3].uniform_(-bound, bound) # init QKV weights
            self.qkvo_w[3].zero_() # init output weights to zero
        self.rotary = Rotary(head_dim, max_seq_len)
        # scale the attention logits by given constant, instead of the default head_dim**-0.5, by @leloykun
        # inspired by learnable scalars used by @brendanh0gan https://x.com/hi_tysam/status/1879693583898591283
        self.attn_scale = 0.12

        # sparse gated attention to enable context based no-op by @classiclarryd
        self.attn_gate_dim = 12
        self.attn_gate = CastedLinear(self.attn_gate_dim, num_heads)
        self.attn_gate.weight.detach().zero_()

    def forward(self, x: Tensor, ve: Tensor | None, lambdas: Tensor, seqlens: Tensor, bm_size: int):
        B, T = x.size(0), x.size(1) # batch size, sequence length
        assert B == 1, "varlen sequences requires B == 1"
        assert T % 16 == 0

        q, k, v = F.linear(x, self.qkvo_w[:3].flatten(end_dim=1).type_as(x)).view(B, T, 3 * self.num_heads, self.head_dim).chunk(3, dim=-2)
        q, k = norm(q), norm(k) # QK norm @Grad62304977
        q, k = self.rotary(q), self.rotary(k)
        if ve is not None:
            v = lambdas[0] * v + lambdas[1] * ve.view_as(v) # @KoszarskyB & @Grad62304977
        else: # skip mid-layers token value embeddings by @YouJiacheng
            v = lambdas[0] * v

        max_len = args.train_max_seq_len if self.training else (args.val_batch_size // (grad_accum_steps * world_size))

        # use flash_attn over flex_attn @varunneal. flash_attn_varlen suggested by @YouJiacheng
        y = flash_attn_varlen_func(q[0], k[0], v[0], cu_seqlens_q=seqlens, cu_seqlens_k=seqlens, max_seqlen_q=max_len, max_seqlen_k=max_len,
                                   causal=True, softmax_scale=self.attn_scale, window_size=(bm_size, 0))
        y = y.view(B, T, self.num_heads, self.head_dim)
        y = y * torch.sigmoid(self.attn_gate(x[..., :self.attn_gate_dim])).view(B, T, self.num_heads, 1)
        y = y.contiguous().view(B, T, self.num_heads * self.head_dim) # re-assemble all head outputs side by side
        y = F.linear(y, self.qkvo_w[3].type_as(y))
        return y

class MLP(nn.Module):
    def __init__(self, dim: int):
        super().__init__()
        hdim = 4 * dim
        # make both matrices have the same shape because optimizer sorts params by shape
        # 2 matrices x 12 layers = 24 total, which is divisible by 8 GPU world size
        self.c_fc = nn.Parameter(torch.empty(dim, hdim))
        self.c_proj = nn.Parameter(torch.empty(dim, hdim))
        std = 0.5 * (dim ** -0.5)
        bound = (3 ** 0.5) * std # improved init scale by @YouJiacheng
        with torch.no_grad():
            self.c_fc.uniform_(-bound, bound)
            self.c_proj.zero_() # zero init suggested by @Grad62304977

    def forward(self, x: Tensor):
        x = F.linear(x, self.c_fc.T.type_as(x))
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = F.linear(x, self.c_proj.type_as(x))
        return x


class Block(nn.Module):
    def __init__(self, dim: int, num_heads: int, max_seq_len: int, layer_idx: int):
        super().__init__()
        # skip attention of blocks.7 (the 8th layer) by @YouJiacheng
        self.attn = CausalSelfAttention(dim, num_heads, max_seq_len) if layer_idx != 7 else None
        SKIPPED_MLP_BLOCKS = [0, 12] # skip MLP blocks for first and last layers by @EmelyanenkoK
        self.mlp = None if layer_idx in SKIPPED_MLP_BLOCKS else MLP(dim)

    def forward(self, x: Tensor, ve: Tensor | None, x0: Tensor, lambdas: Tensor, sa_lambdas: Tensor,
                seqlens: Tensor, bm_size: int):
        x = lambdas[0] * x + lambdas[1] * x0
        if self.attn is not None:
            x = x + self.attn(norm(x), ve, sa_lambdas, seqlens, bm_size)
        if self.mlp is not None:
            x = x + self.mlp(norm(x))
        return x

# -----------------------------------------------------------------------------
# The main model

def next_multiple_of_n(v: float | int, *, n: int):
    return next(x for x in range(n, int(v) + 1 + n, n) if x >= v)

class GPT(nn.Module):
    def __init__(self, vocab_size: int, num_layers: int, num_heads: int, model_dim: int, max_seq_len: int):
        super().__init__()
        vocab_size = next_multiple_of_n(vocab_size, n=128)
        self.embed = nn.Embedding(vocab_size, model_dim)
        # token value embeddings by @KoszarskyB - inspired by @Grad62304977's value residual implementation following https://arxiv.org/abs/2410.17897
        # value embedding code simplification inspired by @ragulpr https://github.com/KellerJordan/modded-nanogpt/pull/78
        self.value_embeds = nn.ModuleList([nn.Embedding(vocab_size, model_dim) for _ in range(3)])
        self.blocks = nn.ModuleList([Block(model_dim, num_heads, max_seq_len, i) for i in range(num_layers)])
        # there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency.
        # suggested to me by @Grad62304977. this originates from Karpathy's experiments.
        use_fp8 = not os.environ.get("DISABLE_FP8", False)
        self.lm_head = CastedLinear(model_dim, vocab_size, use_fp8=use_fp8, x_s=(model_dim**0.5)/448, w_s=2**-9, grad_s=1/448)
        self.lm_head.weight.detach().zero_() # @Grad62304977
        # Add learnable skip connection weights for decoder layers
        assert num_layers % 2 == 0
        pad = (-num_layers * 5) % dist.get_world_size()
        self.scalars = nn.Parameter(torch.cat([
            torch.ones(num_layers), # skip_weights
            *[torch.tensor([1.0, 0.0]) for _ in range(num_layers)], # block lambdas
            *[torch.tensor([0.5, 0.5]) for _ in range(num_layers)], # SA lambdas
            torch.ones(pad),
        ]))
        # set learning rates
        for param in self.embed.parameters():
            param.lr_mul = 75.
        for param in self.value_embeds.parameters():
            param.lr_mul = 75.
        self.lm_head.weight.lr_mul = 1.0
        self.scalars.lr_mul = 5.0


    def forward(self, input_seq: Tensor, target_seq: Tensor, seqlens: Tensor, ws: int):
        assert input_seq.ndim == 1

        ve = [value_embed(input_seq) for value_embed in self.value_embeds]
        # 012 ... 012 structure on token value embeddings by @YouJiacheng, improved on @leloykun's U-net structure
        ve = [ve[0], ve[1], ve[2]] + [None] * (len(self.blocks) - 6) + [ve[0], ve[1], ve[2]]
        assert len(ve) == len(self.blocks)

        long_bm, short_bm = ws * args.block_size, (ws // 2) * args.block_size
        bm_sizes = [long_bm, short_bm, short_bm, short_bm, long_bm, short_bm, short_bm, long_bm, short_bm, short_bm, short_bm, long_bm]
        assert len(bm_sizes) == len(self.blocks)

        x = x0 = norm(self.embed(input_seq)[None]) # use of norm here by @Grad62304977

        # U-net design by @brendanh0gan
        skip_connections = []
        skip_weights = self.scalars[:(len(self.blocks) // 2)]
        lambdas = self.scalars[1 * len(self.blocks): 3 * len(self.blocks)].view(-1, 2)
        sa_lambdas = self.scalars[3 * len(self.blocks): 5 * len(self.blocks)].view(-1, 2)

        n = len(self.blocks) // 2

        for i in range(len(self.blocks)):
            if i >= n:
                x = x + skip_weights[i - n] * skip_connections.pop()
            x = self.blocks[i](x, ve[i], x0, lambdas[i], sa_lambdas[i], seqlens, bm_sizes[i])
            if i < n:
                skip_connections.append(x)

        x = norm(x)
        logits = self.lm_head(x).float()
        # @Grad62304977 added tanh softcapping following Gemma 2 paper, @KoszarskyB reduced it from 30 to 15, @YouJiacheng shifted it by +15 (2*sigmoid(2*x)=tanh(x)+1)
        logits = 30 * torch.sigmoid(logits / 7.5)
        loss = F.cross_entropy(logits.view(-1, logits.size(-1)), target_seq, reduction="sum" if self.training else "mean")
        return loss

# -----------------------------------------------------------------------------
# Distributed data loader

def _load_data_shard(file: Path):
    header = torch.from_file(str(file), False, 256, dtype=torch.int32) # header is 256 int32
    assert header[0] == 20240520, "magic number mismatch in the data .bin file"
    assert header[1] == 1, "unsupported version"
    num_tokens = int(header[2]) # number of tokens (claimed)
    with file.open("rb", buffering=0) as f:
        tokens = torch.empty(num_tokens, dtype=torch.uint16, pin_memory=True) # avoid pin_memory copy by @YouJiacheng
        f.seek(256 * 4)
        nbytes = f.readinto(tokens.numpy()) # avoid bytes->array copy by @YouJiacheng
        assert nbytes == 2 * num_tokens, "number of tokens read does not match header"
    return tokens

BOS_ID = 50256

class BOSFinder:
    # Helper for getting sequences that start at the beginning of documents by @varunneal based on work by @classiclarryd
    def __init__(self, tokens: Tensor, world_size: int = 1):
        # Precompute BOS positions once per shard
        self.size = tokens.numel()
        self.bos_idx = (tokens == BOS_ID).nonzero(as_tuple=True)[0].to(torch.int64).cpu().numpy()
        self.i = 0
        self.world_size = world_size

    def next_batch(self, num_tokens_local: int, max_seq_len: int):
        n = len(self.bos_idx)
        starts = [[] for _ in range(self.world_size)]
        ends = [[] for _ in range(self.world_size)]

        idx = self.i
        for r in range(self.world_size):
            cur_len = 0
            while cur_len <= num_tokens_local:
                if idx >= n:
                    raise StopIteration(f"Insufficient BOS ahead of position {cur}; hit tail of shard.")
                cur = self.bos_idx[idx]
                starts[r].append(cur)
                end = min(self.bos_idx[idx + 1] if idx + 1 < n else self.size,
                          cur + max_seq_len,
                          cur + num_tokens_local - cur_len + 1)
                ends[r].append(end)
                cur_len += end - cur
                idx += 1

            assert cur_len == num_tokens_local + 1
        self.i = idx

        return starts, ends

def distributed_data_generator(filename_pattern: str, num_tokens: int, max_seq_len: int, grad_accum_steps: int = 1, align_to_bos: bool = True):
    # align_to_bos: each sequence begins with Beginning of Sequence token, sequences truncated to max_seq_len
    rank = dist.get_rank() if dist.is_initialized() else 0
    world_size = dist.get_world_size() if dist.is_initialized() else 1
    assert num_tokens % (world_size * grad_accum_steps) == 0, "Batch size must be divisible by world size"
    num_tokens = num_tokens // grad_accum_steps

    files = [Path(file) for file in sorted(glob.glob(filename_pattern))]
    if not files:
        raise FileNotFoundError(f"No files found for pattern: {filename_pattern}")

    file_iter = iter(files)  # Use itertools.cycle(files) for multi-epoch training
    tokens = _load_data_shard(next(file_iter))
    finder = BOSFinder(tokens, world_size=world_size) if align_to_bos else None
    pos = 0  # for unaligned case

    while True:
        num_tokens_local = num_tokens // world_size
        max_num_docs = next_multiple_of_n(num_tokens_local // 300, n=128)  # median doc length is ~400

        if align_to_bos:
            try:
                seq_starts, seq_ends = finder.next_batch(num_tokens_local, max_seq_len)
                start_idxs, end_idxs = torch.tensor(seq_starts[rank]), torch.tensor(seq_ends[rank])
            except StopIteration:
                # This shard is exhausted, load the next one in the next loop iteration.
                tokens = _load_data_shard(next(file_iter))
                finder = BOSFinder(tokens, world_size=world_size)
                continue

            buf = torch.cat([tokens[i:j] for i, j in zip(start_idxs, end_idxs)])
            _inputs = buf[:-1]
            _targets = buf[1:]
            end_idxs[-1] -= 1  # last document was too long to account for _targets offset
            cum_lengths = (end_idxs - start_idxs).cumsum(0)

        else:
            if pos + num_tokens + 1 >= len(tokens):  # should not occur for val data
                tokens, pos = _load_data_shard(next(file_iter)), 0

            pos_local = pos + rank * num_tokens_local
            buf = tokens[pos_local: pos_local + num_tokens_local + 1]
            _inputs = buf[:-1].view(num_tokens_local, )
            _targets = buf[1:].view(num_tokens_local, )

            cum_lengths = torch.nonzero(_inputs == BOS_ID)[:, 0]
            pos += num_tokens


        _cum_lengths = torch.full((max_num_docs,), num_tokens_local)
        _cum_lengths[0] = 0
        _cum_lengths[1:len(cum_lengths) + 1] = cum_lengths

        new_params = yield (
            _inputs.to(device="cuda", dtype=torch.int32, non_blocking=True),
            _targets.to(device="cuda", dtype=torch.int64, non_blocking=True),
            _cum_lengths.to(device="cuda", dtype=torch.int32, non_blocking=True)
        )

        if new_params is not None:
            # makes it possible for generator to receive new (num_tokens, max_seq_len, grad_accum_steps) via .send()
            new_num_tokens, new_max_seq_len, new_grad_accum_steps = new_params
            assert new_num_tokens % (world_size * grad_accum_steps) == 0, "Num tokens must be divisible by world size"
            num_tokens = new_num_tokens
            max_seq_len = new_max_seq_len
            grad_accum_steps = new_grad_accum_steps 


# -----------------------------------------------------------------------------
# int main

@dataclass
class Hyperparameters:
    # data
    train_files: str = "data/fineweb10B/fineweb_train_*.bin" # input .bin to train on
    val_files: str = "data/fineweb10B/fineweb_val_*.bin" # input .bin to eval validation loss on
    val_tokens: int = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    train_batch_size: int = 2048 * 24 * 8
    train_max_seq_len: int = 128 * 16
    val_batch_size: int = 4 * 64 * 1024 * 8
    # optimization
    num_iterations: int = 1705 # number of iterations to run
    cooldown_frac: int = 0.45 # fraction of training spent cooling down the learning rate
    # evaluation and logging
    run_id: str = str(uuid.uuid4())
    val_loss_every: int = 125 # every how many steps to evaluate val loss? 0 for only at the end
    save_checkpoint: bool = False
    # attention masking
    block_size: int = 128
    ws_schedule: tuple = (3, 7, 11)

args = Hyperparameters()

data_path = os.environ.get("DATA_PATH", ".")
args.train_files = os.path.join(data_path, args.train_files)
args.val_files = os.path.join(data_path, args.val_files)

# torchrun sets these env variables
rank = int(os.environ["RANK"])
world_size = int(os.environ["WORLD_SIZE"])
assert 8 % world_size == 0, "world_size must be a divisor of 8"
grad_accum_steps = 8 // world_size
assert torch.cuda.is_available()
device = torch.device("cuda", int(os.environ["LOCAL_RANK"]))
torch.cuda.set_device(device)
dist.init_process_group(backend="nccl", device_id=device)
dist.barrier()
master_process = (rank == 0) # this process will do logging, checkpointing etc.

# begin logging
logfile = None
if master_process:
    run_id = args.run_id
    os.makedirs("logs", exist_ok=True)
    logfile = f"logs/{run_id}.txt"
    print(logfile)
def print0(s, console=False):
    if master_process:
        with open(logfile, "a") as f:
            if console:
                print(s)
            print(s, file=f)

# begin by printing this file (the Python code)
print0(code)
print0("="*100)
# log information about the hardware/software environment this is running on
print0(f"Running Python {sys.version}")
print0(f"Running PyTorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}")
print0(f"Running Triton version {triton.__version__}")

def nvidia_smi():
    import subprocess  # avoid top level import
    return subprocess.run(["nvidia-smi"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).stdout
print0(nvidia_smi())
print0("="*100)

model: nn.Module = GPT(
    vocab_size=50257,
    num_layers=12,
    num_heads=6,
    model_dim=768,
    max_seq_len=max(args.train_batch_size, args.val_batch_size) // (grad_accum_steps * world_size)
).cuda()
for m in model.modules():
    if isinstance(m, nn.Embedding):
        m.bfloat16()
for param in model.parameters():
    dist.broadcast(param.detach(), 0)

# collect the parameters to optimize
hidden_matrix_params = [p for n, p in model.blocks.named_parameters() if p.ndim >= 2 and "embed" not in n]
embed_params = [p for n, p in model.named_parameters() if "embed" in n]
scalar_params = [p for p in model.parameters() if p.ndim < 2]
head_params = [model.lm_head.weight]

# init the optimizer(s)
# small adam epsilon by @YouJiacheng. this is an alternate method of fixing the world_size dependence
# discovered by @fernbear.bsky.social https://x.com/hi_tysam/status/1879692937589875094
optimizer1 = DistAdam(scalar_params + head_params + embed_params, lr=0.008, betas=(0.8, 0.95), eps=1e-10, weight_decay=0.0)
optimizer2 = Muon(hidden_matrix_params, lr=0.05, momentum=0.95, weight_decay=0.0)
optimizers = [optimizer1, optimizer2]
for opt in optimizers:
    for group in opt.param_groups:
        group["initial_lr"] = group["lr"]

# learning rate schedule: stable then decay
def get_lr(step: int):
    x = step / args.num_iterations
    assert 0 <= x < 1
    lr = 1.0
    if x >= 1 - args.cooldown_frac:
        w = (1 - x) / args.cooldown_frac
        lr = w * 1.0 + (1 - w) * 0.1
    return lr

def get_ws(step: int):
    x = step / (1 + args.num_iterations)
    assert 0 <= x < 1
    ws_idx = int(len(args.ws_schedule) * x)
    return args.ws_schedule[ws_idx]

model: nn.Module = torch.compile(model, dynamic=False, fullgraph=True)

########################################
#            Warmup kernels            #
########################################

# Warmup the training kernels, then re-initialize the state so we aren't cheating
warmup_steps = 30
initial_state = dict(model=copy.deepcopy(model.state_dict()),
                     optimizers=[copy.deepcopy(opt.state_dict()) for opt in optimizers]) # save the initial state
train_loader = distributed_data_generator(args.train_files, args.train_batch_size, args.train_max_seq_len, grad_accum_steps=grad_accum_steps)
for step in range(warmup_steps):
    inputs, targets, cum_seqlens = next(train_loader)
    ws = args.ws_schedule[step % len(args.ws_schedule)]  # each window size is a new graph, need to warm up each
    model(inputs, targets, cum_seqlens, ws).backward()
    for opt in optimizers:
        opt.step()
    model.zero_grad(set_to_none=True)
model.load_state_dict(initial_state["model"])
for opt, opt_state in zip(optimizers, initial_state["optimizers"]):
    opt.load_state_dict(opt_state)
del train_loader, initial_state

########################################
#        Training and validation       #
########################################

train_loader = distributed_data_generator(args.train_files, args.train_batch_size, args.train_max_seq_len, grad_accum_steps=grad_accum_steps)
training_time_ms = 0
# start the clock
torch.cuda.synchronize()
t0 = time.perf_counter()
# begin training
train_steps = args.num_iterations
for step in range(train_steps + 1):
    last_step = (step == train_steps)
    ws = get_ws(step)

    # --------------- VALIDATION SECTION -----------------
    if last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0):
        # stop the clock
        torch.cuda.synchronize()
        training_time_ms += 1000 * (time.perf_counter() - t0)
        model.eval()
        assert args.val_tokens % args.val_batch_size == 0
        val_steps = grad_accum_steps * args.val_tokens // args.val_batch_size
        val_loader = distributed_data_generator(args.val_files, args.val_batch_size, -1, grad_accum_steps=grad_accum_steps, align_to_bos=False)
        val_loss = 0
        with torch.no_grad():
            for _ in range(val_steps):
                inputs, targets, cum_seqlens = next(val_loader)
                val_loss += model(inputs, targets, cum_seqlens, ws)
        val_loss /= val_steps
        del val_loader
        dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
        print0(f"step:{step}/{train_steps} val_loss:{val_loss:.4f} train_time:{training_time_ms:.0f}ms step_avg:{training_time_ms/max(step, 1):.2f}ms", console=True)
        model.train()
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.perf_counter()

    if last_step:
        if master_process and args.save_checkpoint:
            log = dict(step=step, code=code, model=model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
            os.makedirs(f"logs/{run_id}", exist_ok=True)
            torch.save(log, f"logs/{run_id}/state_step{step:06d}.pt")
        # the last step only has the validation loop, so break to avoid training
        break

    # --------------- TRAINING SECTION -----------------
    for _ in range(grad_accum_steps):
        inputs, targets, cum_seqlens = next(train_loader)
        model(inputs, targets, cum_seqlens, ws).backward()
    # set optimization hyperparameters
    for opt in optimizers:
        for group in opt.param_groups:
            group["lr"] = group["initial_lr"] * get_lr(step)
    for group in optimizer2.param_groups:
        frac = min(step / 300, 1) # momentum warmup for muon
        group["momentum"] = (1 - frac) * 0.85 + frac * 0.95
    # step the optimizers
    for opt in optimizers:
        opt.step()
    # null the gradients
    model.zero_grad(set_to_none=True)
    # logging
    approx_training_time_ms = training_time_ms + 1000 * (time.perf_counter() - t0)
    print0(f"step:{step+1}/{train_steps} train_time:{approx_training_time_ms:.0f}ms step_avg:{approx_training_time_ms/(step + 1):.2f}ms", console=True)

print0(f"peak memory allocated: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB "
       f"reserved: {torch.cuda.max_memory_reserved() // 1024 // 1024} MiB", console=True)
dist.destroy_process_group()

====================================================================================================
Running Python 3.10.12 (main, May 27 2025, 17:12:29) [GCC 11.4.0]
Running PyTorch 2.9.0.dev20250718+cu126 compiled for CUDA 12.6
Running Triton version 3.4.0
Fri Sep  5 15:28:29 2025       
+-----------------------------------------------------------------------------------------+
| NVIDIA-SMI 550.144.03             Driver Version: 550.144.03     CUDA Version: 12.4     |
|-----------------------------------------+------------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |
|                                         |                        |               MIG M. |
|=========================================+========================+======================|
|   0  NVIDIA H100 80GB HBM3          On  |   00000000:8D:00.0 Off |                    0 |
| N/A   44C    P0            127W /  700W |    5826MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  |   00000000:91:00.0 Off |                    0 |
| N/A   35C    P0            118W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  |   00000000:95:00.0 Off |                    0 |
| N/A   44C    P0            127W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  |   00000000:99:00.0 Off |                    0 |
| N/A   34C    P0            121W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  |   00000000:AB:00.0 Off |                    0 |
| N/A   42C    P0            124W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  |   00000000:AF:00.0 Off |                    0 |
| N/A   34C    P0            118W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  |   00000000:B3:00.0 Off |                    0 |
| N/A   43C    P0            131W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  |   00000000:B7:00.0 Off |                    0 |
| N/A   34C    P0            124W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
                                                                                         
+-----------------------------------------------------------------------------------------+
| Processes:                                                                              |
|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |
|        ID   ID                                                               Usage      |
|=========================================================================================|
|    0   N/A  N/A     66237      C   /usr/bin/python3                             1506MiB |
|    0   N/A  N/A     66238      C   /usr/bin/python3                              610MiB |
|    0   N/A  N/A     66239      C   /usr/bin/python3                              610MiB |
|    0   N/A  N/A     66240      C   /usr/bin/python3                              610MiB |
|    0   N/A  N/A     66241      C   /usr/bin/python3                              610MiB |
|    0   N/A  N/A     66242      C   /usr/bin/python3                              610MiB |
|    0   N/A  N/A     66243      C   /usr/bin/python3                              610MiB |
|    0   N/A  N/A     66244      C   /usr/bin/python3                              610MiB |
|    1   N/A  N/A     66238      C   /usr/bin/python3                             1506MiB |
|    2   N/A  N/A     66239      C   /usr/bin/python3                             1506MiB |
|    3   N/A  N/A     66240      C   /usr/bin/python3                             1506MiB |
|    4   N/A  N/A     66241      C   /usr/bin/python3                             1506MiB |
|    5   N/A  N/A     66242      C   /usr/bin/python3                             1506MiB |
|    6   N/A  N/A     66243      C   /usr/bin/python3                             1506MiB |
|    7   N/A  N/A     66244      C   /usr/bin/python3                             1506MiB |
+-----------------------------------------------------------------------------------------+

====================================================================================================
step:0/1705 val_loss:10.8258 train_time:0ms step_avg:0.02ms
step:1/1705 train_time:382ms step_avg:382.22ms
step:2/1705 train_time:404ms step_avg:201.94ms
step:3/1705 train_time:472ms step_avg:157.27ms
step:4/1705 train_time:563ms step_avg:140.71ms
step:5/1705 train_time:655ms step_avg:130.90ms
step:6/1705 train_time:747ms step_avg:124.47ms
step:7/1705 train_time:839ms step_avg:119.87ms
step:8/1705 train_time:931ms step_avg:116.36ms
step:9/1705 train_time:1023ms step_avg:113.66ms
step:10/1705 train_time:1115ms step_avg:111.53ms
step:11/1705 train_time:1208ms step_avg:109.78ms
step:12/1705 train_time:1303ms step_avg:108.57ms
step:13/1705 train_time:1401ms step_avg:107.80ms
step:14/1705 train_time:1496ms step_avg:106.84ms
step:15/1705 train_time:1588ms step_avg:105.87ms
step:16/1705 train_time:1680ms step_avg:105.03ms
step:17/1705 train_time:1772ms step_avg:104.26ms
step:18/1705 train_time:1865ms step_avg:103.60ms
step:19/1705 train_time:1957ms step_avg:103.00ms
step:20/1705 train_time:2049ms step_avg:102.47ms
step:21/1705 train_time:2142ms step_avg:102.00ms
step:22/1705 train_time:2235ms step_avg:101.57ms
step:23/1705 train_time:2329ms step_avg:101.28ms
step:24/1705 train_time:2426ms step_avg:101.10ms
step:25/1705 train_time:2521ms step_avg:100.84ms
step:26/1705 train_time:2614ms step_avg:100.55ms
step:27/1705 train_time:2707ms step_avg:100.27ms
step:28/1705 train_time:2801ms step_avg:100.03ms
step:29/1705 train_time:2894ms step_avg:99.78ms
step:30/1705 train_time:2986ms step_avg:99.55ms
step:31/1705 train_time:3079ms step_avg:99.32ms
step:32/1705 train_time:3171ms step_avg:99.10ms
step:33/1705 train_time:3266ms step_avg:98.96ms
step:34/1705 train_time:3360ms step_avg:98.82ms
step:35/1705 train_time:3453ms step_avg:98.67ms
step:36/1705 train_time:3548ms step_avg:98.56ms
step:37/1705 train_time:3642ms step_avg:98.42ms
step:38/1705 train_time:3735ms step_avg:98.28ms
step:39/1705 train_time:3827ms step_avg:98.13ms
step:40/1705 train_time:3920ms step_avg:98.00ms
step:41/1705 train_time:4013ms step_avg:97.88ms
step:42/1705 train_time:4106ms step_avg:97.75ms
step:43/1705 train_time:4198ms step_avg:97.63ms
step:44/1705 train_time:4291ms step_avg:97.53ms
step:45/1705 train_time:4385ms step_avg:97.45ms
step:46/1705 train_time:4479ms step_avg:97.38ms
step:47/1705 train_time:4572ms step_avg:97.29ms
step:48/1705 train_time:4666ms step_avg:97.21ms
step:49/1705 train_time:4759ms step_avg:97.13ms
step:50/1705 train_time:4852ms step_avg:97.04ms
step:51/1705 train_time:4945ms step_avg:96.97ms
step:52/1705 train_time:5039ms step_avg:96.90ms
step:53/1705 train_time:5131ms step_avg:96.82ms
step:54/1705 train_time:5225ms step_avg:96.75ms
step:55/1705 train_time:5318ms step_avg:96.69ms
step:56/1705 train_time:5412ms step_avg:96.64ms
step:57/1705 train_time:5505ms step_avg:96.59ms
step:58/1705 train_time:5599ms step_avg:96.53ms
step:59/1705 train_time:5692ms step_avg:96.47ms
step:60/1705 train_time:5785ms step_avg:96.42ms
step:61/1705 train_time:5878ms step_avg:96.37ms
step:62/1705 train_time:5971ms step_avg:96.30ms
step:63/1705 train_time:6063ms step_avg:96.24ms
step:64/1705 train_time:6156ms step_avg:96.19ms
step:65/1705 train_time:6249ms step_avg:96.14ms
step:66/1705 train_time:6343ms step_avg:96.10ms
step:67/1705 train_time:6436ms step_avg:96.06ms
step:68/1705 train_time:6529ms step_avg:96.02ms
step:69/1705 train_time:6623ms step_avg:95.98ms
step:70/1705 train_time:6717ms step_avg:95.96ms
step:71/1705 train_time:6810ms step_avg:95.92ms
step:72/1705 train_time:6904ms step_avg:95.89ms
step:73/1705 train_time:6996ms step_avg:95.84ms
step:74/1705 train_time:7089ms step_avg:95.80ms
step:75/1705 train_time:7183ms step_avg:95.77ms
step:76/1705 train_time:7275ms step_avg:95.73ms
step:77/1705 train_time:7368ms step_avg:95.69ms
step:78/1705 train_time:7462ms step_avg:95.67ms
step:79/1705 train_time:7555ms step_avg:95.63ms
step:80/1705 train_time:7649ms step_avg:95.61ms
step:81/1705 train_time:7743ms step_avg:95.59ms
step:82/1705 train_time:7836ms step_avg:95.56ms
step:83/1705 train_time:7928ms step_avg:95.52ms
step:84/1705 train_time:8021ms step_avg:95.49ms
step:85/1705 train_time:8114ms step_avg:95.46ms
step:86/1705 train_time:8207ms step_avg:95.43ms
step:87/1705 train_time:8300ms step_avg:95.40ms
step:88/1705 train_time:8392ms step_avg:95.37ms
step:89/1705 train_time:8485ms step_avg:95.34ms
step:90/1705 train_time:8579ms step_avg:95.32ms
step:91/1705 train_time:8672ms step_avg:95.29ms
step:92/1705 train_time:8765ms step_avg:95.28ms
step:93/1705 train_time:8859ms step_avg:95.25ms
step:94/1705 train_time:8951ms step_avg:95.22ms
step:95/1705 train_time:9044ms step_avg:95.20ms
step:96/1705 train_time:9136ms step_avg:95.17ms
step:97/1705 train_time:9229ms step_avg:95.14ms
step:98/1705 train_time:9322ms step_avg:95.13ms
step:99/1705 train_time:9416ms step_avg:95.11ms
step:100/1705 train_time:9509ms step_avg:95.09ms
step:101/1705 train_time:9602ms step_avg:95.07ms
step:102/1705 train_time:9695ms step_avg:95.05ms
step:103/1705 train_time:9788ms step_avg:95.03ms
step:104/1705 train_time:9883ms step_avg:95.03ms
step:105/1705 train_time:9977ms step_avg:95.02ms
step:106/1705 train_time:10070ms step_avg:95.00ms
step:107/1705 train_time:10162ms step_avg:94.98ms
step:108/1705 train_time:10255ms step_avg:94.95ms
step:109/1705 train_time:10348ms step_avg:94.94ms
step:110/1705 train_time:10441ms step_avg:94.92ms
step:111/1705 train_time:10534ms step_avg:94.90ms
step:112/1705 train_time:10627ms step_avg:94.88ms
step:113/1705 train_time:10721ms step_avg:94.88ms
step:114/1705 train_time:10814ms step_avg:94.86ms
step:115/1705 train_time:10908ms step_avg:94.85ms
step:116/1705 train_time:11002ms step_avg:94.84ms
step:117/1705 train_time:11094ms step_avg:94.82ms
step:118/1705 train_time:11188ms step_avg:94.81ms
step:119/1705 train_time:11281ms step_avg:94.80ms
step:120/1705 train_time:11374ms step_avg:94.78ms
step:121/1705 train_time:11467ms step_avg:94.77ms
step:122/1705 train_time:11560ms step_avg:94.75ms
step:123/1705 train_time:11652ms step_avg:94.73ms
step:124/1705 train_time:11746ms step_avg:94.73ms
step:125/1705 train_time:11839ms step_avg:94.71ms
step:125/1705 val_loss:4.3144 train_time:11932ms step_avg:95.45ms
step:126/1705 train_time:11955ms step_avg:94.88ms
step:127/1705 train_time:12029ms step_avg:94.72ms
step:128/1705 train_time:12131ms step_avg:94.77ms
step:129/1705 train_time:12226ms step_avg:94.78ms
step:130/1705 train_time:12320ms step_avg:94.77ms
step:131/1705 train_time:12412ms step_avg:94.75ms
step:132/1705 train_time:12504ms step_avg:94.72ms
step:133/1705 train_time:12596ms step_avg:94.71ms
step:134/1705 train_time:12687ms step_avg:94.68ms
step:135/1705 train_time:12779ms step_avg:94.66ms
step:136/1705 train_time:12872ms step_avg:94.64ms
step:137/1705 train_time:12963ms step_avg:94.62ms
step:138/1705 train_time:13058ms step_avg:94.62ms
step:139/1705 train_time:13153ms step_avg:94.62ms
step:140/1705 train_time:13247ms step_avg:94.62ms
step:141/1705 train_time:13340ms step_avg:94.61ms
step:142/1705 train_time:13433ms step_avg:94.60ms
step:143/1705 train_time:13526ms step_avg:94.59ms
step:144/1705 train_time:13619ms step_avg:94.57ms
step:145/1705 train_time:13711ms step_avg:94.56ms
step:146/1705 train_time:13803ms step_avg:94.54ms
step:147/1705 train_time:13895ms step_avg:94.53ms
step:148/1705 train_time:13987ms step_avg:94.51ms
step:149/1705 train_time:14080ms step_avg:94.50ms
step:150/1705 train_time:14174ms step_avg:94.49ms
step:151/1705 train_time:14268ms step_avg:94.49ms
step:152/1705 train_time:14361ms step_avg:94.48ms
step:153/1705 train_time:14455ms step_avg:94.47ms
step:154/1705 train_time:14547ms step_avg:94.46ms
step:155/1705 train_time:14640ms step_avg:94.45ms
step:156/1705 train_time:14732ms step_avg:94.44ms
step:157/1705 train_time:14824ms step_avg:94.42ms
step:158/1705 train_time:14916ms step_avg:94.41ms
step:159/1705 train_time:15009ms step_avg:94.40ms
step:160/1705 train_time:15102ms step_avg:94.39ms
step:161/1705 train_time:15196ms step_avg:94.38ms
step:162/1705 train_time:15289ms step_avg:94.38ms
step:163/1705 train_time:15382ms step_avg:94.37ms
step:164/1705 train_time:15476ms step_avg:94.36ms
step:165/1705 train_time:15569ms step_avg:94.35ms
step:166/1705 train_time:15661ms step_avg:94.34ms
step:167/1705 train_time:15754ms step_avg:94.33ms
step:168/1705 train_time:15846ms step_avg:94.32ms
step:169/1705 train_time:15939ms step_avg:94.31ms
step:170/1705 train_time:16032ms step_avg:94.31ms
step:171/1705 train_time:16125ms step_avg:94.30ms
step:172/1705 train_time:16217ms step_avg:94.29ms
step:173/1705 train_time:16311ms step_avg:94.28ms
step:174/1705 train_time:16404ms step_avg:94.27ms
step:175/1705 train_time:16497ms step_avg:94.27ms
step:176/1705 train_time:16589ms step_avg:94.26ms
step:177/1705 train_time:16682ms step_avg:94.25ms
step:178/1705 train_time:16776ms step_avg:94.24ms
step:179/1705 train_time:16868ms step_avg:94.23ms
step:180/1705 train_time:16961ms step_avg:94.23ms
step:181/1705 train_time:17053ms step_avg:94.22ms
step:182/1705 train_time:17146ms step_avg:94.21ms
step:183/1705 train_time:17239ms step_avg:94.20ms
step:184/1705 train_time:17332ms step_avg:94.20ms
step:185/1705 train_time:17425ms step_avg:94.19ms
step:186/1705 train_time:17518ms step_avg:94.18ms
step:187/1705 train_time:17611ms step_avg:94.18ms
step:188/1705 train_time:17705ms step_avg:94.17ms
step:189/1705 train_time:17797ms step_avg:94.16ms
step:190/1705 train_time:17890ms step_avg:94.16ms
step:191/1705 train_time:17983ms step_avg:94.15ms
step:192/1705 train_time:18076ms step_avg:94.14ms
step:193/1705 train_time:18168ms step_avg:94.14ms
step:194/1705 train_time:18262ms step_avg:94.13ms
step:195/1705 train_time:18355ms step_avg:94.13ms
step:196/1705 train_time:18448ms step_avg:94.12ms
step:197/1705 train_time:18541ms step_avg:94.12ms
step:198/1705 train_time:18634ms step_avg:94.11ms
step:199/1705 train_time:18727ms step_avg:94.11ms
step:200/1705 train_time:18820ms step_avg:94.10ms
step:201/1705 train_time:18913ms step_avg:94.09ms
step:202/1705 train_time:19006ms step_avg:94.09ms
step:203/1705 train_time:19099ms step_avg:94.08ms
step:204/1705 train_time:19192ms step_avg:94.08ms
step:205/1705 train_time:19284ms step_avg:94.07ms
step:206/1705 train_time:19378ms step_avg:94.07ms
step:207/1705 train_time:19471ms step_avg:94.06ms
step:208/1705 train_time:19564ms step_avg:94.06ms
step:209/1705 train_time:19657ms step_avg:94.05ms
step:210/1705 train_time:19750ms step_avg:94.05ms
step:211/1705 train_time:19842ms step_avg:94.04ms
step:212/1705 train_time:19935ms step_avg:94.03ms
step:213/1705 train_time:20186ms step_avg:94.77ms
step:214/1705 train_time:20354ms step_avg:95.11ms
step:215/1705 train_time:20445ms step_avg:95.09ms
step:216/1705 train_time:20538ms step_avg:95.08ms
step:217/1705 train_time:20630ms step_avg:95.07ms
step:218/1705 train_time:20722ms step_avg:95.06ms
step:219/1705 train_time:20814ms step_avg:95.04ms
step:220/1705 train_time:20906ms step_avg:95.03ms
step:221/1705 train_time:20998ms step_avg:95.01ms
step:222/1705 train_time:21090ms step_avg:95.00ms
step:223/1705 train_time:21182ms step_avg:94.99ms
step:224/1705 train_time:21279ms step_avg:95.00ms
step:225/1705 train_time:21375ms step_avg:95.00ms
step:226/1705 train_time:21468ms step_avg:94.99ms
step:227/1705 train_time:21562ms step_avg:94.99ms
step:228/1705 train_time:21654ms step_avg:94.98ms
step:229/1705 train_time:21747ms step_avg:94.96ms
step:230/1705 train_time:21839ms step_avg:94.95ms
step:231/1705 train_time:21932ms step_avg:94.94ms
step:232/1705 train_time:22023ms step_avg:94.93ms
step:233/1705 train_time:22116ms step_avg:94.92ms
step:234/1705 train_time:22208ms step_avg:94.91ms
step:235/1705 train_time:22304ms step_avg:94.91ms
step:236/1705 train_time:22398ms step_avg:94.91ms
step:237/1705 train_time:22491ms step_avg:94.90ms
step:238/1705 train_time:22583ms step_avg:94.89ms
step:239/1705 train_time:22676ms step_avg:94.88ms
step:240/1705 train_time:22769ms step_avg:94.87ms
step:241/1705 train_time:22862ms step_avg:94.86ms
step:242/1705 train_time:22954ms step_avg:94.85ms
step:243/1705 train_time:23047ms step_avg:94.84ms
step:244/1705 train_time:23139ms step_avg:94.83ms
step:245/1705 train_time:23233ms step_avg:94.83ms
step:246/1705 train_time:23326ms step_avg:94.82ms
step:247/1705 train_time:23420ms step_avg:94.82ms
step:248/1705 train_time:23513ms step_avg:94.81ms
step:249/1705 train_time:23606ms step_avg:94.80ms
step:250/1705 train_time:23699ms step_avg:94.80ms
step:250/1705 val_loss:3.9838 train_time:23793ms step_avg:95.17ms
step:251/1705 train_time:23815ms step_avg:94.88ms
step:252/1705 train_time:23889ms step_avg:94.80ms
step:253/1705 train_time:23990ms step_avg:94.82ms
step:254/1705 train_time:24084ms step_avg:94.82ms
step:255/1705 train_time:24175ms step_avg:94.81ms
step:256/1705 train_time:24267ms step_avg:94.79ms
step:257/1705 train_time:24359ms step_avg:94.78ms
step:258/1705 train_time:24451ms step_avg:94.77ms
step:259/1705 train_time:24542ms step_avg:94.76ms
step:260/1705 train_time:24634ms step_avg:94.75ms
step:261/1705 train_time:24727ms step_avg:94.74ms
step:262/1705 train_time:24820ms step_avg:94.73ms
step:263/1705 train_time:24916ms step_avg:94.74ms
step:264/1705 train_time:25010ms step_avg:94.74ms
step:265/1705 train_time:25104ms step_avg:94.73ms
step:266/1705 train_time:25197ms step_avg:94.73ms
step:267/1705 train_time:25290ms step_avg:94.72ms
step:268/1705 train_time:25382ms step_avg:94.71ms
step:269/1705 train_time:25474ms step_avg:94.70ms
step:270/1705 train_time:25566ms step_avg:94.69ms
step:271/1705 train_time:25658ms step_avg:94.68ms
step:272/1705 train_time:25751ms step_avg:94.67ms
step:273/1705 train_time:25844ms step_avg:94.67ms
step:274/1705 train_time:25937ms step_avg:94.66ms
step:275/1705 train_time:26032ms step_avg:94.66ms
step:276/1705 train_time:26126ms step_avg:94.66ms
step:277/1705 train_time:26218ms step_avg:94.65ms
step:278/1705 train_time:26311ms step_avg:94.64ms
step:279/1705 train_time:26404ms step_avg:94.64ms
step:280/1705 train_time:26497ms step_avg:94.63ms
step:281/1705 train_time:26590ms step_avg:94.62ms
step:282/1705 train_time:26681ms step_avg:94.62ms
step:283/1705 train_time:26775ms step_avg:94.61ms
step:284/1705 train_time:26868ms step_avg:94.61ms
step:285/1705 train_time:26961ms step_avg:94.60ms
step:286/1705 train_time:27055ms step_avg:94.60ms
step:287/1705 train_time:27148ms step_avg:94.59ms
step:288/1705 train_time:27240ms step_avg:94.58ms
step:289/1705 train_time:27334ms step_avg:94.58ms
step:290/1705 train_time:27427ms step_avg:94.57ms
step:291/1705 train_time:27518ms step_avg:94.56ms
step:292/1705 train_time:27611ms step_avg:94.56ms
step:293/1705 train_time:27703ms step_avg:94.55ms
step:294/1705 train_time:27797ms step_avg:94.55ms
step:295/1705 train_time:27890ms step_avg:94.54ms
step:296/1705 train_time:27984ms step_avg:94.54ms
step:297/1705 train_time:28076ms step_avg:94.53ms
step:298/1705 train_time:28170ms step_avg:94.53ms
step:299/1705 train_time:28263ms step_avg:94.52ms
step:300/1705 train_time:28356ms step_avg:94.52ms
step:301/1705 train_time:28449ms step_avg:94.51ms
step:302/1705 train_time:28542ms step_avg:94.51ms
step:303/1705 train_time:28635ms step_avg:94.50ms
step:304/1705 train_time:28728ms step_avg:94.50ms
step:305/1705 train_time:28820ms step_avg:94.49ms
step:306/1705 train_time:28913ms step_avg:94.49ms
step:307/1705 train_time:29006ms step_avg:94.48ms
step:308/1705 train_time:29099ms step_avg:94.48ms
step:309/1705 train_time:29192ms step_avg:94.47ms
step:310/1705 train_time:29286ms step_avg:94.47ms
step:311/1705 train_time:29378ms step_avg:94.46ms
step:312/1705 train_time:29471ms step_avg:94.46ms
step:313/1705 train_time:29565ms step_avg:94.46ms
step:314/1705 train_time:29658ms step_avg:94.45ms
step:315/1705 train_time:29750ms step_avg:94.45ms
step:316/1705 train_time:29843ms step_avg:94.44ms
step:317/1705 train_time:29936ms step_avg:94.44ms
step:318/1705 train_time:30030ms step_avg:94.44ms
step:319/1705 train_time:30122ms step_avg:94.43ms
step:320/1705 train_time:30217ms step_avg:94.43ms
step:321/1705 train_time:30309ms step_avg:94.42ms
step:322/1705 train_time:30402ms step_avg:94.41ms
step:323/1705 train_time:30495ms step_avg:94.41ms
step:324/1705 train_time:30588ms step_avg:94.41ms
step:325/1705 train_time:30680ms step_avg:94.40ms
step:326/1705 train_time:30773ms step_avg:94.40ms
step:327/1705 train_time:30867ms step_avg:94.39ms
step:328/1705 train_time:30960ms step_avg:94.39ms
step:329/1705 train_time:31053ms step_avg:94.39ms
step:330/1705 train_time:31145ms step_avg:94.38ms
step:331/1705 train_time:31238ms step_avg:94.37ms
step:332/1705 train_time:31331ms step_avg:94.37ms
step:333/1705 train_time:31424ms step_avg:94.37ms
step:334/1705 train_time:31517ms step_avg:94.36ms
step:335/1705 train_time:31610ms step_avg:94.36ms
step:336/1705 train_time:31702ms step_avg:94.35ms
step:337/1705 train_time:31795ms step_avg:94.35ms
step:338/1705 train_time:31888ms step_avg:94.34ms
step:339/1705 train_time:31981ms step_avg:94.34ms
step:340/1705 train_time:32074ms step_avg:94.34ms
step:341/1705 train_time:32168ms step_avg:94.33ms
step:342/1705 train_time:32260ms step_avg:94.33ms
step:343/1705 train_time:32353ms step_avg:94.32ms
step:344/1705 train_time:32446ms step_avg:94.32ms
step:345/1705 train_time:32538ms step_avg:94.31ms
step:346/1705 train_time:32632ms step_avg:94.31ms
step:347/1705 train_time:32725ms step_avg:94.31ms
step:348/1705 train_time:32818ms step_avg:94.30ms
step:349/1705 train_time:32911ms step_avg:94.30ms
step:350/1705 train_time:33004ms step_avg:94.30ms
step:351/1705 train_time:33097ms step_avg:94.29ms
step:352/1705 train_time:33189ms step_avg:94.29ms
step:353/1705 train_time:33282ms step_avg:94.28ms
step:354/1705 train_time:33376ms step_avg:94.28ms
step:355/1705 train_time:33469ms step_avg:94.28ms
step:356/1705 train_time:33561ms step_avg:94.27ms
step:357/1705 train_time:33655ms step_avg:94.27ms
step:358/1705 train_time:33748ms step_avg:94.27ms
step:359/1705 train_time:33841ms step_avg:94.26ms
step:360/1705 train_time:33935ms step_avg:94.26ms
step:361/1705 train_time:34028ms step_avg:94.26ms
step:362/1705 train_time:34120ms step_avg:94.26ms
step:363/1705 train_time:34213ms step_avg:94.25ms
step:364/1705 train_time:34306ms step_avg:94.25ms
step:365/1705 train_time:34400ms step_avg:94.25ms
step:366/1705 train_time:34493ms step_avg:94.24ms
step:367/1705 train_time:34586ms step_avg:94.24ms
step:368/1705 train_time:34678ms step_avg:94.23ms
step:369/1705 train_time:34771ms step_avg:94.23ms
step:370/1705 train_time:34864ms step_avg:94.23ms
step:371/1705 train_time:34957ms step_avg:94.22ms
step:372/1705 train_time:35050ms step_avg:94.22ms
step:373/1705 train_time:35143ms step_avg:94.22ms
step:374/1705 train_time:35236ms step_avg:94.21ms
step:375/1705 train_time:35330ms step_avg:94.21ms
step:375/1705 val_loss:3.8258 train_time:35423ms step_avg:94.46ms
step:376/1705 train_time:35445ms step_avg:94.27ms
step:377/1705 train_time:35520ms step_avg:94.22ms
step:378/1705 train_time:35617ms step_avg:94.23ms
step:379/1705 train_time:35712ms step_avg:94.23ms
step:380/1705 train_time:35804ms step_avg:94.22ms
step:381/1705 train_time:35896ms step_avg:94.22ms
step:382/1705 train_time:35989ms step_avg:94.21ms
step:383/1705 train_time:36080ms step_avg:94.20ms
step:384/1705 train_time:36173ms step_avg:94.20ms
step:385/1705 train_time:36264ms step_avg:94.19ms
step:386/1705 train_time:36356ms step_avg:94.19ms
step:387/1705 train_time:36451ms step_avg:94.19ms
step:388/1705 train_time:36547ms step_avg:94.19ms
step:389/1705 train_time:36642ms step_avg:94.19ms
step:390/1705 train_time:36736ms step_avg:94.19ms
step:391/1705 train_time:36828ms step_avg:94.19ms
step:392/1705 train_time:36921ms step_avg:94.19ms
step:393/1705 train_time:37013ms step_avg:94.18ms
step:394/1705 train_time:37106ms step_avg:94.18ms
step:395/1705 train_time:37198ms step_avg:94.17ms
step:396/1705 train_time:37291ms step_avg:94.17ms
step:397/1705 train_time:37384ms step_avg:94.17ms
step:398/1705 train_time:37478ms step_avg:94.16ms
step:399/1705 train_time:37572ms step_avg:94.17ms
step:400/1705 train_time:37667ms step_avg:94.17ms
step:401/1705 train_time:37760ms step_avg:94.16ms
step:402/1705 train_time:37853ms step_avg:94.16ms
step:403/1705 train_time:37945ms step_avg:94.16ms
step:404/1705 train_time:38037ms step_avg:94.15ms
step:405/1705 train_time:38130ms step_avg:94.15ms
step:406/1705 train_time:38222ms step_avg:94.14ms
step:407/1705 train_time:38315ms step_avg:94.14ms
step:408/1705 train_time:38408ms step_avg:94.14ms
step:409/1705 train_time:38501ms step_avg:94.14ms
step:410/1705 train_time:38596ms step_avg:94.14ms
step:411/1705 train_time:38690ms step_avg:94.14ms
step:412/1705 train_time:38785ms step_avg:94.14ms
step:413/1705 train_time:38877ms step_avg:94.13ms
step:414/1705 train_time:38971ms step_avg:94.13ms
step:415/1705 train_time:39063ms step_avg:94.13ms
step:416/1705 train_time:39155ms step_avg:94.12ms
step:417/1705 train_time:39248ms step_avg:94.12ms
step:418/1705 train_time:39340ms step_avg:94.12ms
step:419/1705 train_time:39433ms step_avg:94.11ms
step:420/1705 train_time:39526ms step_avg:94.11ms
step:421/1705 train_time:39620ms step_avg:94.11ms
step:422/1705 train_time:39714ms step_avg:94.11ms
step:423/1705 train_time:39808ms step_avg:94.11ms
step:424/1705 train_time:39901ms step_avg:94.11ms
step:425/1705 train_time:40149ms step_avg:94.47ms
step:426/1705 train_time:40259ms step_avg:94.50ms
step:427/1705 train_time:40350ms step_avg:94.50ms
step:428/1705 train_time:40442ms step_avg:94.49ms
step:429/1705 train_time:40534ms step_avg:94.49ms
step:430/1705 train_time:40626ms step_avg:94.48ms
step:431/1705 train_time:40717ms step_avg:94.47ms
step:432/1705 train_time:40809ms step_avg:94.47ms
step:433/1705 train_time:40902ms step_avg:94.46ms
step:434/1705 train_time:40993ms step_avg:94.45ms
step:435/1705 train_time:41090ms step_avg:94.46ms
step:436/1705 train_time:41186ms step_avg:94.46ms
step:437/1705 train_time:41281ms step_avg:94.46ms
step:438/1705 train_time:41374ms step_avg:94.46ms
step:439/1705 train_time:41467ms step_avg:94.46ms
step:440/1705 train_time:41559ms step_avg:94.45ms
step:441/1705 train_time:41651ms step_avg:94.45ms
step:442/1705 train_time:41743ms step_avg:94.44ms
step:443/1705 train_time:41835ms step_avg:94.44ms
step:444/1705 train_time:41927ms step_avg:94.43ms
step:445/1705 train_time:42020ms step_avg:94.43ms
step:446/1705 train_time:42115ms step_avg:94.43ms
step:447/1705 train_time:42210ms step_avg:94.43ms
step:448/1705 train_time:42305ms step_avg:94.43ms
step:449/1705 train_time:42397ms step_avg:94.43ms
step:450/1705 train_time:42490ms step_avg:94.42ms
step:451/1705 train_time:42583ms step_avg:94.42ms
step:452/1705 train_time:42676ms step_avg:94.42ms
step:453/1705 train_time:42767ms step_avg:94.41ms
step:454/1705 train_time:42860ms step_avg:94.41ms
step:455/1705 train_time:42952ms step_avg:94.40ms
step:456/1705 train_time:43046ms step_avg:94.40ms
step:457/1705 train_time:43139ms step_avg:94.40ms
step:458/1705 train_time:43233ms step_avg:94.40ms
step:459/1705 train_time:43327ms step_avg:94.39ms
step:460/1705 train_time:43420ms step_avg:94.39ms
step:461/1705 train_time:43513ms step_avg:94.39ms
step:462/1705 train_time:43606ms step_avg:94.39ms
step:463/1705 train_time:43699ms step_avg:94.38ms
step:464/1705 train_time:43791ms step_avg:94.38ms
step:465/1705 train_time:43884ms step_avg:94.37ms
step:466/1705 train_time:43976ms step_avg:94.37ms
step:467/1705 train_time:44070ms step_avg:94.37ms
step:468/1705 train_time:44163ms step_avg:94.37ms
step:469/1705 train_time:44256ms step_avg:94.36ms
step:470/1705 train_time:44350ms step_avg:94.36ms
step:471/1705 train_time:44443ms step_avg:94.36ms
step:472/1705 train_time:44535ms step_avg:94.35ms
step:473/1705 train_time:44629ms step_avg:94.35ms
step:474/1705 train_time:44721ms step_avg:94.35ms
step:475/1705 train_time:44815ms step_avg:94.35ms
step:476/1705 train_time:44908ms step_avg:94.34ms
step:477/1705 train_time:45001ms step_avg:94.34ms
step:478/1705 train_time:45095ms step_avg:94.34ms
step:479/1705 train_time:45189ms step_avg:94.34ms
step:480/1705 train_time:45282ms step_avg:94.34ms
step:481/1705 train_time:45375ms step_avg:94.33ms
step:482/1705 train_time:45469ms step_avg:94.33ms
step:483/1705 train_time:45562ms step_avg:94.33ms
step:484/1705 train_time:45655ms step_avg:94.33ms
step:485/1705 train_time:45747ms step_avg:94.32ms
step:486/1705 train_time:45840ms step_avg:94.32ms
step:487/1705 train_time:45933ms step_avg:94.32ms
step:488/1705 train_time:46026ms step_avg:94.31ms
step:489/1705 train_time:46118ms step_avg:94.31ms
step:490/1705 train_time:46212ms step_avg:94.31ms
step:491/1705 train_time:46305ms step_avg:94.31ms
step:492/1705 train_time:46397ms step_avg:94.30ms
step:493/1705 train_time:46491ms step_avg:94.30ms
step:494/1705 train_time:46585ms step_avg:94.30ms
step:495/1705 train_time:46677ms step_avg:94.30ms
step:496/1705 train_time:46770ms step_avg:94.29ms
step:497/1705 train_time:46862ms step_avg:94.29ms
step:498/1705 train_time:46955ms step_avg:94.29ms
step:499/1705 train_time:47048ms step_avg:94.28ms
step:500/1705 train_time:47141ms step_avg:94.28ms
step:500/1705 val_loss:3.7219 train_time:47234ms step_avg:94.47ms
step:501/1705 train_time:47256ms step_avg:94.32ms
step:502/1705 train_time:47332ms step_avg:94.29ms
step:503/1705 train_time:47430ms step_avg:94.30ms
step:504/1705 train_time:47525ms step_avg:94.30ms
step:505/1705 train_time:47617ms step_avg:94.29ms
step:506/1705 train_time:47709ms step_avg:94.29ms
step:507/1705 train_time:47802ms step_avg:94.28ms
step:508/1705 train_time:47894ms step_avg:94.28ms
step:509/1705 train_time:47986ms step_avg:94.27ms
step:510/1705 train_time:48078ms step_avg:94.27ms
step:511/1705 train_time:48170ms step_avg:94.27ms
step:512/1705 train_time:48265ms step_avg:94.27ms
step:513/1705 train_time:48360ms step_avg:94.27ms
step:514/1705 train_time:48454ms step_avg:94.27ms
step:515/1705 train_time:48548ms step_avg:94.27ms
step:516/1705 train_time:48641ms step_avg:94.27ms
step:517/1705 train_time:48734ms step_avg:94.26ms
step:518/1705 train_time:48827ms step_avg:94.26ms
step:519/1705 train_time:48920ms step_avg:94.26ms
step:520/1705 train_time:49012ms step_avg:94.25ms
step:521/1705 train_time:49105ms step_avg:94.25ms
step:522/1705 train_time:49197ms step_avg:94.25ms
step:523/1705 train_time:49290ms step_avg:94.24ms
step:524/1705 train_time:49384ms step_avg:94.24ms
step:525/1705 train_time:49479ms step_avg:94.25ms
step:526/1705 train_time:49571ms step_avg:94.24ms
step:527/1705 train_time:49664ms step_avg:94.24ms
step:528/1705 train_time:49757ms step_avg:94.24ms
step:529/1705 train_time:49850ms step_avg:94.23ms
step:530/1705 train_time:49943ms step_avg:94.23ms
step:531/1705 train_time:50036ms step_avg:94.23ms
step:532/1705 train_time:50128ms step_avg:94.23ms
step:533/1705 train_time:50221ms step_avg:94.22ms
step:534/1705 train_time:50314ms step_avg:94.22ms
step:535/1705 train_time:50408ms step_avg:94.22ms
step:536/1705 train_time:50501ms step_avg:94.22ms
step:537/1705 train_time:50594ms step_avg:94.22ms
step:538/1705 train_time:50687ms step_avg:94.21ms
step:539/1705 train_time:50781ms step_avg:94.21ms
step:540/1705 train_time:50874ms step_avg:94.21ms
step:541/1705 train_time:50966ms step_avg:94.21ms
step:542/1705 train_time:51059ms step_avg:94.20ms
step:543/1705 train_time:51152ms step_avg:94.20ms
step:544/1705 train_time:51245ms step_avg:94.20ms
step:545/1705 train_time:51338ms step_avg:94.20ms
step:546/1705 train_time:51432ms step_avg:94.20ms
step:547/1705 train_time:51526ms step_avg:94.20ms
step:548/1705 train_time:51619ms step_avg:94.19ms
step:549/1705 train_time:51711ms step_avg:94.19ms
step:550/1705 train_time:51805ms step_avg:94.19ms
step:551/1705 train_time:51898ms step_avg:94.19ms
step:552/1705 train_time:51990ms step_avg:94.18ms
step:553/1705 train_time:52083ms step_avg:94.18ms
step:554/1705 train_time:52175ms step_avg:94.18ms
step:555/1705 train_time:52267ms step_avg:94.18ms
step:556/1705 train_time:52361ms step_avg:94.17ms
step:557/1705 train_time:52454ms step_avg:94.17ms
step:558/1705 train_time:52547ms step_avg:94.17ms
step:559/1705 train_time:52640ms step_avg:94.17ms
step:560/1705 train_time:52733ms step_avg:94.17ms
step:561/1705 train_time:52827ms step_avg:94.17ms
step:562/1705 train_time:52920ms step_avg:94.16ms
step:563/1705 train_time:53013ms step_avg:94.16ms
step:564/1705 train_time:53105ms step_avg:94.16ms
step:565/1705 train_time:53198ms step_avg:94.16ms
step:566/1705 train_time:53291ms step_avg:94.15ms
step:567/1705 train_time:53384ms step_avg:94.15ms
step:568/1705 train_time:53477ms step_avg:94.15ms
step:569/1705 train_time:53570ms step_avg:94.15ms
step:570/1705 train_time:53663ms step_avg:94.15ms
step:571/1705 train_time:53758ms step_avg:94.15ms
step:572/1705 train_time:53852ms step_avg:94.15ms
step:573/1705 train_time:53946ms step_avg:94.15ms
step:574/1705 train_time:54040ms step_avg:94.15ms
step:575/1705 train_time:54135ms step_avg:94.15ms
step:576/1705 train_time:54229ms step_avg:94.15ms
step:577/1705 train_time:54323ms step_avg:94.15ms
step:578/1705 train_time:54418ms step_avg:94.15ms
step:579/1705 train_time:54512ms step_avg:94.15ms
step:580/1705 train_time:54606ms step_avg:94.15ms
step:581/1705 train_time:54701ms step_avg:94.15ms
step:582/1705 train_time:54796ms step_avg:94.15ms
step:583/1705 train_time:54889ms step_avg:94.15ms
step:584/1705 train_time:54984ms step_avg:94.15ms
step:585/1705 train_time:55078ms step_avg:94.15ms
step:586/1705 train_time:55171ms step_avg:94.15ms
step:587/1705 train_time:55266ms step_avg:94.15ms
step:588/1705 train_time:55361ms step_avg:94.15ms
step:589/1705 train_time:55456ms step_avg:94.15ms
step:590/1705 train_time:55550ms step_avg:94.15ms
step:591/1705 train_time:55645ms step_avg:94.15ms
step:592/1705 train_time:55740ms step_avg:94.16ms
step:593/1705 train_time:55834ms step_avg:94.15ms
step:594/1705 train_time:55928ms step_avg:94.15ms
step:595/1705 train_time:56023ms step_avg:94.16ms
step:596/1705 train_time:56117ms step_avg:94.16ms
step:597/1705 train_time:56211ms step_avg:94.16ms
step:598/1705 train_time:56305ms step_avg:94.16ms
step:599/1705 train_time:56400ms step_avg:94.16ms
step:600/1705 train_time:56495ms step_avg:94.16ms
step:601/1705 train_time:56589ms step_avg:94.16ms
step:602/1705 train_time:56683ms step_avg:94.16ms
step:603/1705 train_time:56777ms step_avg:94.16ms
step:604/1705 train_time:56871ms step_avg:94.16ms
step:605/1705 train_time:56966ms step_avg:94.16ms
step:606/1705 train_time:57060ms step_avg:94.16ms
step:607/1705 train_time:57153ms step_avg:94.16ms
step:608/1705 train_time:57247ms step_avg:94.16ms
step:609/1705 train_time:57342ms step_avg:94.16ms
step:610/1705 train_time:57436ms step_avg:94.16ms
step:611/1705 train_time:57530ms step_avg:94.16ms
step:612/1705 train_time:57625ms step_avg:94.16ms
step:613/1705 train_time:57719ms step_avg:94.16ms
step:614/1705 train_time:57814ms step_avg:94.16ms
step:615/1705 train_time:57908ms step_avg:94.16ms
step:616/1705 train_time:58003ms step_avg:94.16ms
step:617/1705 train_time:58097ms step_avg:94.16ms
step:618/1705 train_time:58191ms step_avg:94.16ms
step:619/1705 train_time:58285ms step_avg:94.16ms
step:620/1705 train_time:58380ms step_avg:94.16ms
step:621/1705 train_time:58475ms step_avg:94.16ms
step:622/1705 train_time:58569ms step_avg:94.16ms
step:623/1705 train_time:58664ms step_avg:94.16ms
step:624/1705 train_time:58759ms step_avg:94.17ms
step:625/1705 train_time:58854ms step_avg:94.17ms
step:625/1705 val_loss:3.6232 train_time:58948ms step_avg:94.32ms
step:626/1705 train_time:58970ms step_avg:94.20ms
step:627/1705 train_time:59057ms step_avg:94.19ms
step:628/1705 train_time:59153ms step_avg:94.19ms
step:629/1705 train_time:59248ms step_avg:94.19ms
step:630/1705 train_time:59342ms step_avg:94.19ms
step:631/1705 train_time:59434ms step_avg:94.19ms
step:632/1705 train_time:59528ms step_avg:94.19ms
step:633/1705 train_time:59621ms step_avg:94.19ms
step:634/1705 train_time:59713ms step_avg:94.18ms
step:635/1705 train_time:59807ms step_avg:94.18ms
step:636/1705 train_time:59901ms step_avg:94.18ms
step:637/1705 train_time:59998ms step_avg:94.19ms
step:638/1705 train_time:60095ms step_avg:94.19ms
step:639/1705 train_time:60456ms step_avg:94.61ms
step:640/1705 train_time:60543ms step_avg:94.60ms
step:641/1705 train_time:60635ms step_avg:94.59ms
step:642/1705 train_time:60728ms step_avg:94.59ms
step:643/1705 train_time:60822ms step_avg:94.59ms
step:644/1705 train_time:60915ms step_avg:94.59ms
step:645/1705 train_time:61008ms step_avg:94.59ms
step:646/1705 train_time:61102ms step_avg:94.58ms
step:647/1705 train_time:61194ms step_avg:94.58ms
step:648/1705 train_time:61288ms step_avg:94.58ms
step:649/1705 train_time:61386ms step_avg:94.59ms
step:650/1705 train_time:61484ms step_avg:94.59ms
step:651/1705 train_time:61578ms step_avg:94.59ms
step:652/1705 train_time:61671ms step_avg:94.59ms
step:653/1705 train_time:61766ms step_avg:94.59ms
step:654/1705 train_time:61860ms step_avg:94.59ms
step:655/1705 train_time:61953ms step_avg:94.58ms
step:656/1705 train_time:62047ms step_avg:94.58ms
step:657/1705 train_time:62142ms step_avg:94.58ms
step:658/1705 train_time:62235ms step_avg:94.58ms
step:659/1705 train_time:62330ms step_avg:94.58ms
step:660/1705 train_time:62427ms step_avg:94.59ms
step:661/1705 train_time:62522ms step_avg:94.59ms
step:662/1705 train_time:62616ms step_avg:94.59ms
step:663/1705 train_time:62711ms step_avg:94.59ms
step:664/1705 train_time:62805ms step_avg:94.59ms
step:665/1705 train_time:62899ms step_avg:94.58ms
step:666/1705 train_time:62992ms step_avg:94.58ms
step:667/1705 train_time:63086ms step_avg:94.58ms
step:668/1705 train_time:63180ms step_avg:94.58ms
step:669/1705 train_time:63274ms step_avg:94.58ms
step:670/1705 train_time:63369ms step_avg:94.58ms
step:671/1705 train_time:63465ms step_avg:94.58ms
step:672/1705 train_time:63560ms step_avg:94.58ms
step:673/1705 train_time:63655ms step_avg:94.58ms
step:674/1705 train_time:63749ms step_avg:94.58ms
step:675/1705 train_time:63843ms step_avg:94.58ms
step:676/1705 train_time:63937ms step_avg:94.58ms
step:677/1705 train_time:64030ms step_avg:94.58ms
step:678/1705 train_time:64124ms step_avg:94.58ms
step:679/1705 train_time:64218ms step_avg:94.58ms
step:680/1705 train_time:64312ms step_avg:94.58ms
step:681/1705 train_time:64407ms step_avg:94.58ms
step:682/1705 train_time:64503ms step_avg:94.58ms
step:683/1705 train_time:64597ms step_avg:94.58ms
step:684/1705 train_time:64691ms step_avg:94.58ms
step:685/1705 train_time:64787ms step_avg:94.58ms
step:686/1705 train_time:64881ms step_avg:94.58ms
step:687/1705 train_time:64974ms step_avg:94.58ms
step:688/1705 train_time:65068ms step_avg:94.58ms
step:689/1705 train_time:65162ms step_avg:94.57ms
step:690/1705 train_time:65256ms step_avg:94.57ms
step:691/1705 train_time:65350ms step_avg:94.57ms
step:692/1705 train_time:65445ms step_avg:94.57ms
step:693/1705 train_time:65540ms step_avg:94.57ms
step:694/1705 train_time:65634ms step_avg:94.57ms
step:695/1705 train_time:65728ms step_avg:94.57ms
step:696/1705 train_time:65823ms step_avg:94.57ms
step:697/1705 train_time:65916ms step_avg:94.57ms
step:698/1705 train_time:66010ms step_avg:94.57ms
step:699/1705 train_time:66105ms step_avg:94.57ms
step:700/1705 train_time:66199ms step_avg:94.57ms
step:701/1705 train_time:66294ms step_avg:94.57ms
step:702/1705 train_time:66388ms step_avg:94.57ms
step:703/1705 train_time:66483ms step_avg:94.57ms
step:704/1705 train_time:66577ms step_avg:94.57ms
step:705/1705 train_time:66672ms step_avg:94.57ms
step:706/1705 train_time:66767ms step_avg:94.57ms
step:707/1705 train_time:66861ms step_avg:94.57ms
step:708/1705 train_time:66955ms step_avg:94.57ms
step:709/1705 train_time:67049ms step_avg:94.57ms
step:710/1705 train_time:67143ms step_avg:94.57ms
step:711/1705 train_time:67237ms step_avg:94.57ms
step:712/1705 train_time:67331ms step_avg:94.57ms
step:713/1705 train_time:67425ms step_avg:94.57ms
step:714/1705 train_time:67520ms step_avg:94.57ms
step:715/1705 train_time:67615ms step_avg:94.57ms
step:716/1705 train_time:67710ms step_avg:94.57ms
step:717/1705 train_time:67805ms step_avg:94.57ms
step:718/1705 train_time:67899ms step_avg:94.57ms
step:719/1705 train_time:67993ms step_avg:94.57ms
step:720/1705 train_time:68087ms step_avg:94.57ms
step:721/1705 train_time:68181ms step_avg:94.56ms
step:722/1705 train_time:68275ms step_avg:94.56ms
step:723/1705 train_time:68369ms step_avg:94.56ms
step:724/1705 train_time:68464ms step_avg:94.56ms
step:725/1705 train_time:68558ms step_avg:94.56ms
step:726/1705 train_time:68652ms step_avg:94.56ms
step:727/1705 train_time:68748ms step_avg:94.56ms
step:728/1705 train_time:68843ms step_avg:94.56ms
step:729/1705 train_time:68936ms step_avg:94.56ms
step:730/1705 train_time:69030ms step_avg:94.56ms
step:731/1705 train_time:69125ms step_avg:94.56ms
step:732/1705 train_time:69219ms step_avg:94.56ms
step:733/1705 train_time:69313ms step_avg:94.56ms
step:734/1705 train_time:69409ms step_avg:94.56ms
step:735/1705 train_time:69504ms step_avg:94.56ms
step:736/1705 train_time:69598ms step_avg:94.56ms
step:737/1705 train_time:69692ms step_avg:94.56ms
step:738/1705 train_time:69788ms step_avg:94.56ms
step:739/1705 train_time:69882ms step_avg:94.56ms
step:740/1705 train_time:69976ms step_avg:94.56ms
step:741/1705 train_time:70069ms step_avg:94.56ms
step:742/1705 train_time:70164ms step_avg:94.56ms
step:743/1705 train_time:70258ms step_avg:94.56ms
step:744/1705 train_time:70352ms step_avg:94.56ms
step:745/1705 train_time:70448ms step_avg:94.56ms
step:746/1705 train_time:70542ms step_avg:94.56ms
step:747/1705 train_time:70636ms step_avg:94.56ms
step:748/1705 train_time:70730ms step_avg:94.56ms
step:749/1705 train_time:70825ms step_avg:94.56ms
step:750/1705 train_time:70919ms step_avg:94.56ms
step:750/1705 val_loss:3.5678 train_time:71013ms step_avg:94.68ms
step:751/1705 train_time:71037ms step_avg:94.59ms
step:752/1705 train_time:71115ms step_avg:94.57ms
step:753/1705 train_time:71215ms step_avg:94.57ms
step:754/1705 train_time:71310ms step_avg:94.58ms
step:755/1705 train_time:71404ms step_avg:94.58ms
step:756/1705 train_time:71497ms step_avg:94.57ms
step:757/1705 train_time:71591ms step_avg:94.57ms
step:758/1705 train_time:71684ms step_avg:94.57ms
step:759/1705 train_time:71778ms step_avg:94.57ms
step:760/1705 train_time:71871ms step_avg:94.57ms
step:761/1705 train_time:71967ms step_avg:94.57ms
step:762/1705 train_time:72063ms step_avg:94.57ms
step:763/1705 train_time:72158ms step_avg:94.57ms
step:764/1705 train_time:72254ms step_avg:94.57ms
step:765/1705 train_time:72351ms step_avg:94.58ms
step:766/1705 train_time:72444ms step_avg:94.57ms
step:767/1705 train_time:72537ms step_avg:94.57ms
step:768/1705 train_time:72631ms step_avg:94.57ms
step:769/1705 train_time:72724ms step_avg:94.57ms
step:770/1705 train_time:72818ms step_avg:94.57ms
step:771/1705 train_time:72911ms step_avg:94.57ms
step:772/1705 train_time:73006ms step_avg:94.57ms
step:773/1705 train_time:73101ms step_avg:94.57ms
step:774/1705 train_time:73196ms step_avg:94.57ms
step:775/1705 train_time:73291ms step_avg:94.57ms
step:776/1705 train_time:73386ms step_avg:94.57ms
step:777/1705 train_time:73480ms step_avg:94.57ms
step:778/1705 train_time:73574ms step_avg:94.57ms
step:779/1705 train_time:73668ms step_avg:94.57ms
step:780/1705 train_time:73761ms step_avg:94.57ms
step:781/1705 train_time:73856ms step_avg:94.57ms
step:782/1705 train_time:73950ms step_avg:94.56ms
step:783/1705 train_time:74045ms step_avg:94.57ms
step:784/1705 train_time:74140ms step_avg:94.57ms
step:785/1705 train_time:74234ms step_avg:94.57ms
step:786/1705 train_time:74330ms step_avg:94.57ms
step:787/1705 train_time:74425ms step_avg:94.57ms
step:788/1705 train_time:74520ms step_avg:94.57ms
step:789/1705 train_time:74614ms step_avg:94.57ms
step:790/1705 train_time:74709ms step_avg:94.57ms
step:791/1705 train_time:74803ms step_avg:94.57ms
step:792/1705 train_time:74896ms step_avg:94.57ms
step:793/1705 train_time:74991ms step_avg:94.57ms
step:794/1705 train_time:75085ms step_avg:94.57ms
step:795/1705 train_time:75180ms step_avg:94.57ms
step:796/1705 train_time:75275ms step_avg:94.57ms
step:797/1705 train_time:75370ms step_avg:94.57ms
step:798/1705 train_time:75465ms step_avg:94.57ms
step:799/1705 train_time:75559ms step_avg:94.57ms
step:800/1705 train_time:75653ms step_avg:94.57ms
step:801/1705 train_time:75748ms step_avg:94.57ms
step:802/1705 train_time:75842ms step_avg:94.57ms
step:803/1705 train_time:75935ms step_avg:94.56ms
step:804/1705 train_time:76030ms step_avg:94.56ms
step:805/1705 train_time:76125ms step_avg:94.57ms
step:806/1705 train_time:76219ms step_avg:94.56ms
step:807/1705 train_time:76313ms step_avg:94.56ms
step:808/1705 train_time:76408ms step_avg:94.56ms
step:809/1705 train_time:76503ms step_avg:94.57ms
step:810/1705 train_time:76597ms step_avg:94.56ms
step:811/1705 train_time:76691ms step_avg:94.56ms
step:812/1705 train_time:76786ms step_avg:94.56ms
step:813/1705 train_time:76879ms step_avg:94.56ms
step:814/1705 train_time:76973ms step_avg:94.56ms
step:815/1705 train_time:77068ms step_avg:94.56ms
step:816/1705 train_time:77163ms step_avg:94.56ms
step:817/1705 train_time:77257ms step_avg:94.56ms
step:818/1705 train_time:77352ms step_avg:94.56ms
step:819/1705 train_time:77447ms step_avg:94.56ms
step:820/1705 train_time:77541ms step_avg:94.56ms
step:821/1705 train_time:77635ms step_avg:94.56ms
step:822/1705 train_time:77729ms step_avg:94.56ms
step:823/1705 train_time:77824ms step_avg:94.56ms
step:824/1705 train_time:77918ms step_avg:94.56ms
step:825/1705 train_time:78012ms step_avg:94.56ms
step:826/1705 train_time:78107ms step_avg:94.56ms
step:827/1705 train_time:78201ms step_avg:94.56ms
step:828/1705 train_time:78295ms step_avg:94.56ms
step:829/1705 train_time:78389ms step_avg:94.56ms
step:830/1705 train_time:78484ms step_avg:94.56ms
step:831/1705 train_time:78577ms step_avg:94.56ms
step:832/1705 train_time:78672ms step_avg:94.56ms
step:833/1705 train_time:78768ms step_avg:94.56ms
step:834/1705 train_time:78861ms step_avg:94.56ms
step:835/1705 train_time:78955ms step_avg:94.56ms
step:836/1705 train_time:79050ms step_avg:94.56ms
step:837/1705 train_time:79145ms step_avg:94.56ms
step:838/1705 train_time:79239ms step_avg:94.56ms
step:839/1705 train_time:79333ms step_avg:94.56ms
step:840/1705 train_time:79429ms step_avg:94.56ms
step:841/1705 train_time:79525ms step_avg:94.56ms
step:842/1705 train_time:79619ms step_avg:94.56ms
step:843/1705 train_time:79713ms step_avg:94.56ms
step:844/1705 train_time:79808ms step_avg:94.56ms
step:845/1705 train_time:79902ms step_avg:94.56ms
step:846/1705 train_time:79997ms step_avg:94.56ms
step:847/1705 train_time:80092ms step_avg:94.56ms
step:848/1705 train_time:80187ms step_avg:94.56ms
step:849/1705 train_time:80281ms step_avg:94.56ms
step:850/1705 train_time:80375ms step_avg:94.56ms
step:851/1705 train_time:80637ms step_avg:94.76ms
step:852/1705 train_time:80715ms step_avg:94.74ms
step:853/1705 train_time:80808ms step_avg:94.73ms
step:854/1705 train_time:80901ms step_avg:94.73ms
step:855/1705 train_time:80994ms step_avg:94.73ms
step:856/1705 train_time:81088ms step_avg:94.73ms
step:857/1705 train_time:81181ms step_avg:94.73ms
step:858/1705 train_time:81275ms step_avg:94.73ms
step:859/1705 train_time:81368ms step_avg:94.72ms
step:860/1705 train_time:81461ms step_avg:94.72ms
step:861/1705 train_time:81561ms step_avg:94.73ms
step:862/1705 train_time:81658ms step_avg:94.73ms
step:863/1705 train_time:81755ms step_avg:94.73ms
step:864/1705 train_time:81850ms step_avg:94.73ms
step:865/1705 train_time:81944ms step_avg:94.73ms
step:866/1705 train_time:82038ms step_avg:94.73ms
step:867/1705 train_time:82131ms step_avg:94.73ms
step:868/1705 train_time:82225ms step_avg:94.73ms
step:869/1705 train_time:82318ms step_avg:94.73ms
step:870/1705 train_time:82412ms step_avg:94.73ms
step:871/1705 train_time:82508ms step_avg:94.73ms
step:872/1705 train_time:82604ms step_avg:94.73ms
step:873/1705 train_time:82699ms step_avg:94.73ms
step:874/1705 train_time:82794ms step_avg:94.73ms
step:875/1705 train_time:82889ms step_avg:94.73ms
step:875/1705 val_loss:3.5253 train_time:82984ms step_avg:94.84ms
step:876/1705 train_time:83006ms step_avg:94.76ms
step:877/1705 train_time:83083ms step_avg:94.74ms
step:878/1705 train_time:83183ms step_avg:94.74ms
step:879/1705 train_time:83277ms step_avg:94.74ms
step:880/1705 train_time:83371ms step_avg:94.74ms
step:881/1705 train_time:83465ms step_avg:94.74ms
step:882/1705 train_time:83558ms step_avg:94.74ms
step:883/1705 train_time:83652ms step_avg:94.74ms
step:884/1705 train_time:83746ms step_avg:94.74ms
step:885/1705 train_time:83841ms step_avg:94.74ms
step:886/1705 train_time:83937ms step_avg:94.74ms
step:887/1705 train_time:84032ms step_avg:94.74ms
step:888/1705 train_time:84129ms step_avg:94.74ms
step:889/1705 train_time:84224ms step_avg:94.74ms
step:890/1705 train_time:84319ms step_avg:94.74ms
step:891/1705 train_time:84412ms step_avg:94.74ms
step:892/1705 train_time:84507ms step_avg:94.74ms
step:893/1705 train_time:84601ms step_avg:94.74ms
step:894/1705 train_time:84695ms step_avg:94.74ms
step:895/1705 train_time:84789ms step_avg:94.74ms
step:896/1705 train_time:84884ms step_avg:94.74ms
step:897/1705 train_time:84979ms step_avg:94.74ms
step:898/1705 train_time:85074ms step_avg:94.74ms
step:899/1705 train_time:85170ms step_avg:94.74ms
step:900/1705 train_time:85265ms step_avg:94.74ms
step:901/1705 train_time:85361ms step_avg:94.74ms
step:902/1705 train_time:85454ms step_avg:94.74ms
step:903/1705 train_time:85548ms step_avg:94.74ms
step:904/1705 train_time:85642ms step_avg:94.74ms
step:905/1705 train_time:85736ms step_avg:94.74ms
step:906/1705 train_time:85829ms step_avg:94.73ms
step:907/1705 train_time:85924ms step_avg:94.73ms
step:908/1705 train_time:86019ms step_avg:94.73ms
step:909/1705 train_time:86114ms step_avg:94.73ms
step:910/1705 train_time:86209ms step_avg:94.73ms
step:911/1705 train_time:86304ms step_avg:94.74ms
step:912/1705 train_time:86399ms step_avg:94.74ms
step:913/1705 train_time:86493ms step_avg:94.74ms
step:914/1705 train_time:86588ms step_avg:94.73ms
step:915/1705 train_time:86682ms step_avg:94.73ms
step:916/1705 train_time:86776ms step_avg:94.73ms
step:917/1705 train_time:86870ms step_avg:94.73ms
step:918/1705 train_time:86965ms step_avg:94.73ms
step:919/1705 train_time:87060ms step_avg:94.73ms
step:920/1705 train_time:87155ms step_avg:94.73ms
step:921/1705 train_time:87250ms step_avg:94.73ms
step:922/1705 train_time:87345ms step_avg:94.73ms
step:923/1705 train_time:87439ms step_avg:94.73ms
step:924/1705 train_time:87532ms step_avg:94.73ms
step:925/1705 train_time:87627ms step_avg:94.73ms
step:926/1705 train_time:87721ms step_avg:94.73ms
step:927/1705 train_time:87815ms step_avg:94.73ms
step:928/1705 train_time:87910ms step_avg:94.73ms
step:929/1705 train_time:88005ms step_avg:94.73ms
step:930/1705 train_time:88099ms step_avg:94.73ms
step:931/1705 train_time:88193ms step_avg:94.73ms
step:932/1705 train_time:88288ms step_avg:94.73ms
step:933/1705 train_time:88382ms step_avg:94.73ms
step:934/1705 train_time:88476ms step_avg:94.73ms
step:935/1705 train_time:88570ms step_avg:94.73ms
step:936/1705 train_time:88665ms step_avg:94.73ms
step:937/1705 train_time:88759ms step_avg:94.73ms
step:938/1705 train_time:88853ms step_avg:94.73ms
step:939/1705 train_time:88948ms step_avg:94.73ms
step:940/1705 train_time:89044ms step_avg:94.73ms
step:941/1705 train_time:89139ms step_avg:94.73ms
step:942/1705 train_time:89233ms step_avg:94.73ms
step:943/1705 train_time:89328ms step_avg:94.73ms
step:944/1705 train_time:89423ms step_avg:94.73ms
step:945/1705 train_time:89516ms step_avg:94.73ms
step:946/1705 train_time:89611ms step_avg:94.73ms
step:947/1705 train_time:89706ms step_avg:94.73ms
step:948/1705 train_time:89800ms step_avg:94.73ms
step:949/1705 train_time:89894ms step_avg:94.73ms
step:950/1705 train_time:89989ms step_avg:94.72ms
step:951/1705 train_time:90083ms step_avg:94.72ms
step:952/1705 train_time:90178ms step_avg:94.72ms
step:953/1705 train_time:90272ms step_avg:94.72ms
step:954/1705 train_time:90367ms step_avg:94.72ms
step:955/1705 train_time:90462ms step_avg:94.72ms
step:956/1705 train_time:90556ms step_avg:94.72ms
step:957/1705 train_time:90650ms step_avg:94.72ms
step:958/1705 train_time:90745ms step_avg:94.72ms
step:959/1705 train_time:90839ms step_avg:94.72ms
step:960/1705 train_time:90933ms step_avg:94.72ms
step:961/1705 train_time:91027ms step_avg:94.72ms
step:962/1705 train_time:91122ms step_avg:94.72ms
step:963/1705 train_time:91217ms step_avg:94.72ms
step:964/1705 train_time:91311ms step_avg:94.72ms
step:965/1705 train_time:91407ms step_avg:94.72ms
step:966/1705 train_time:91501ms step_avg:94.72ms
step:967/1705 train_time:91595ms step_avg:94.72ms
step:968/1705 train_time:91689ms step_avg:94.72ms
step:969/1705 train_time:91783ms step_avg:94.72ms
step:970/1705 train_time:91878ms step_avg:94.72ms
step:971/1705 train_time:91971ms step_avg:94.72ms
step:972/1705 train_time:92067ms step_avg:94.72ms
step:973/1705 train_time:92162ms step_avg:94.72ms
step:974/1705 train_time:92257ms step_avg:94.72ms
step:975/1705 train_time:92351ms step_avg:94.72ms
step:976/1705 train_time:92446ms step_avg:94.72ms
step:977/1705 train_time:92540ms step_avg:94.72ms
step:978/1705 train_time:92634ms step_avg:94.72ms
step:979/1705 train_time:92729ms step_avg:94.72ms
step:980/1705 train_time:92824ms step_avg:94.72ms
step:981/1705 train_time:92918ms step_avg:94.72ms
step:982/1705 train_time:93012ms step_avg:94.72ms
step:983/1705 train_time:93109ms step_avg:94.72ms
step:984/1705 train_time:93204ms step_avg:94.72ms
step:985/1705 train_time:93298ms step_avg:94.72ms
step:986/1705 train_time:93392ms step_avg:94.72ms
step:987/1705 train_time:93487ms step_avg:94.72ms
step:988/1705 train_time:93582ms step_avg:94.72ms
step:989/1705 train_time:93676ms step_avg:94.72ms
step:990/1705 train_time:93771ms step_avg:94.72ms
step:991/1705 train_time:93866ms step_avg:94.72ms
step:992/1705 train_time:93960ms step_avg:94.72ms
step:993/1705 train_time:94054ms step_avg:94.72ms
step:994/1705 train_time:94148ms step_avg:94.72ms
step:995/1705 train_time:94244ms step_avg:94.72ms
step:996/1705 train_time:94338ms step_avg:94.72ms
step:997/1705 train_time:94432ms step_avg:94.72ms
step:998/1705 train_time:94526ms step_avg:94.72ms
step:999/1705 train_time:94621ms step_avg:94.72ms
step:1000/1705 train_time:94716ms step_avg:94.72ms
step:1000/1705 val_loss:3.4858 train_time:94810ms step_avg:94.81ms
step:1001/1705 train_time:94832ms step_avg:94.74ms
step:1002/1705 train_time:94912ms step_avg:94.72ms
step:1003/1705 train_time:95012ms step_avg:94.73ms
step:1004/1705 train_time:95108ms step_avg:94.73ms
step:1005/1705 train_time:95201ms step_avg:94.73ms
step:1006/1705 train_time:95295ms step_avg:94.73ms
step:1007/1705 train_time:95389ms step_avg:94.73ms
step:1008/1705 train_time:95481ms step_avg:94.72ms
step:1009/1705 train_time:95574ms step_avg:94.72ms
step:1010/1705 train_time:95667ms step_avg:94.72ms
step:1011/1705 train_time:95762ms step_avg:94.72ms
step:1012/1705 train_time:95858ms step_avg:94.72ms
step:1013/1705 train_time:95954ms step_avg:94.72ms
step:1014/1705 train_time:96051ms step_avg:94.72ms
step:1015/1705 train_time:96147ms step_avg:94.73ms
step:1016/1705 train_time:96241ms step_avg:94.73ms
step:1017/1705 train_time:96334ms step_avg:94.72ms
step:1018/1705 train_time:96428ms step_avg:94.72ms
step:1019/1705 train_time:96522ms step_avg:94.72ms
step:1020/1705 train_time:96615ms step_avg:94.72ms
step:1021/1705 train_time:96709ms step_avg:94.72ms
step:1022/1705 train_time:96803ms step_avg:94.72ms
step:1023/1705 train_time:96899ms step_avg:94.72ms
step:1024/1705 train_time:96995ms step_avg:94.72ms
step:1025/1705 train_time:97090ms step_avg:94.72ms
step:1026/1705 train_time:97186ms step_avg:94.72ms
step:1027/1705 train_time:97280ms step_avg:94.72ms
step:1028/1705 train_time:97374ms step_avg:94.72ms
step:1029/1705 train_time:97468ms step_avg:94.72ms
step:1030/1705 train_time:97561ms step_avg:94.72ms
step:1031/1705 train_time:97654ms step_avg:94.72ms
step:1032/1705 train_time:97749ms step_avg:94.72ms
step:1033/1705 train_time:97844ms step_avg:94.72ms
step:1034/1705 train_time:97939ms step_avg:94.72ms
step:1035/1705 train_time:98033ms step_avg:94.72ms
step:1036/1705 train_time:98130ms step_avg:94.72ms
step:1037/1705 train_time:98226ms step_avg:94.72ms
step:1038/1705 train_time:98321ms step_avg:94.72ms
step:1039/1705 train_time:98414ms step_avg:94.72ms
step:1040/1705 train_time:98509ms step_avg:94.72ms
step:1041/1705 train_time:98603ms step_avg:94.72ms
step:1042/1705 train_time:98698ms step_avg:94.72ms
step:1043/1705 train_time:98791ms step_avg:94.72ms
step:1044/1705 train_time:98888ms step_avg:94.72ms
step:1045/1705 train_time:98982ms step_avg:94.72ms
step:1046/1705 train_time:99076ms step_avg:94.72ms
step:1047/1705 train_time:99171ms step_avg:94.72ms
step:1048/1705 train_time:99266ms step_avg:94.72ms
step:1049/1705 train_time:99361ms step_avg:94.72ms
step:1050/1705 train_time:99455ms step_avg:94.72ms
step:1051/1705 train_time:99549ms step_avg:94.72ms
step:1052/1705 train_time:99644ms step_avg:94.72ms
step:1053/1705 train_time:99738ms step_avg:94.72ms
step:1054/1705 train_time:99832ms step_avg:94.72ms
step:1055/1705 train_time:99927ms step_avg:94.72ms
step:1056/1705 train_time:100022ms step_avg:94.72ms
step:1057/1705 train_time:100117ms step_avg:94.72ms
step:1058/1705 train_time:100211ms step_avg:94.72ms
step:1059/1705 train_time:100306ms step_avg:94.72ms
step:1060/1705 train_time:100401ms step_avg:94.72ms
step:1061/1705 train_time:100494ms step_avg:94.72ms
step:1062/1705 train_time:100743ms step_avg:94.86ms
step:1063/1705 train_time:100846ms step_avg:94.87ms
step:1064/1705 train_time:100938ms step_avg:94.87ms
step:1065/1705 train_time:101032ms step_avg:94.87ms
step:1066/1705 train_time:101126ms step_avg:94.87ms
step:1067/1705 train_time:101219ms step_avg:94.86ms
step:1068/1705 train_time:101313ms step_avg:94.86ms
step:1069/1705 train_time:101407ms step_avg:94.86ms
step:1070/1705 train_time:101500ms step_avg:94.86ms
step:1071/1705 train_time:101593ms step_avg:94.86ms
step:1072/1705 train_time:101693ms step_avg:94.86ms
step:1073/1705 train_time:101791ms step_avg:94.87ms
step:1074/1705 train_time:101888ms step_avg:94.87ms
step:1075/1705 train_time:101982ms step_avg:94.87ms
step:1076/1705 train_time:102076ms step_avg:94.87ms
step:1077/1705 train_time:102170ms step_avg:94.87ms
step:1078/1705 train_time:102264ms step_avg:94.86ms
step:1079/1705 train_time:102357ms step_avg:94.86ms
step:1080/1705 train_time:102451ms step_avg:94.86ms
step:1081/1705 train_time:102544ms step_avg:94.86ms
step:1082/1705 train_time:102639ms step_avg:94.86ms
step:1083/1705 train_time:102734ms step_avg:94.86ms
step:1084/1705 train_time:102831ms step_avg:94.86ms
step:1085/1705 train_time:102928ms step_avg:94.86ms
step:1086/1705 train_time:103023ms step_avg:94.86ms
step:1087/1705 train_time:103117ms step_avg:94.86ms
step:1088/1705 train_time:103211ms step_avg:94.86ms
step:1089/1705 train_time:103305ms step_avg:94.86ms
step:1090/1705 train_time:103399ms step_avg:94.86ms
step:1091/1705 train_time:103493ms step_avg:94.86ms
step:1092/1705 train_time:103587ms step_avg:94.86ms
step:1093/1705 train_time:103682ms step_avg:94.86ms
step:1094/1705 train_time:103778ms step_avg:94.86ms
step:1095/1705 train_time:103873ms step_avg:94.86ms
step:1096/1705 train_time:103967ms step_avg:94.86ms
step:1097/1705 train_time:104062ms step_avg:94.86ms
step:1098/1705 train_time:104156ms step_avg:94.86ms
step:1099/1705 train_time:104250ms step_avg:94.86ms
step:1100/1705 train_time:104345ms step_avg:94.86ms
step:1101/1705 train_time:104439ms step_avg:94.86ms
step:1102/1705 train_time:104533ms step_avg:94.86ms
step:1103/1705 train_time:104628ms step_avg:94.86ms
step:1104/1705 train_time:104723ms step_avg:94.86ms
step:1105/1705 train_time:104818ms step_avg:94.86ms
step:1106/1705 train_time:104912ms step_avg:94.86ms
step:1107/1705 train_time:105007ms step_avg:94.86ms
step:1108/1705 train_time:105102ms step_avg:94.86ms
step:1109/1705 train_time:105196ms step_avg:94.86ms
step:1110/1705 train_time:105290ms step_avg:94.86ms
step:1111/1705 train_time:105385ms step_avg:94.86ms
step:1112/1705 train_time:105480ms step_avg:94.86ms
step:1113/1705 train_time:105573ms step_avg:94.85ms
step:1114/1705 train_time:105668ms step_avg:94.85ms
step:1115/1705 train_time:105763ms step_avg:94.86ms
step:1116/1705 train_time:105858ms step_avg:94.85ms
step:1117/1705 train_time:105953ms step_avg:94.85ms
step:1118/1705 train_time:106047ms step_avg:94.85ms
step:1119/1705 train_time:106142ms step_avg:94.85ms
step:1120/1705 train_time:106237ms step_avg:94.85ms
step:1121/1705 train_time:106331ms step_avg:94.85ms
step:1122/1705 train_time:106427ms step_avg:94.85ms
step:1123/1705 train_time:106521ms step_avg:94.85ms
step:1124/1705 train_time:106615ms step_avg:94.85ms
step:1125/1705 train_time:106710ms step_avg:94.85ms
step:1125/1705 val_loss:3.4384 train_time:106806ms step_avg:94.94ms
step:1126/1705 train_time:106828ms step_avg:94.87ms
step:1127/1705 train_time:106907ms step_avg:94.86ms
step:1128/1705 train_time:107005ms step_avg:94.86ms
step:1129/1705 train_time:107099ms step_avg:94.86ms
step:1130/1705 train_time:107193ms step_avg:94.86ms
step:1131/1705 train_time:107287ms step_avg:94.86ms
step:1132/1705 train_time:107380ms step_avg:94.86ms
step:1133/1705 train_time:107474ms step_avg:94.86ms
step:1134/1705 train_time:107568ms step_avg:94.86ms
step:1135/1705 train_time:107662ms step_avg:94.86ms
step:1136/1705 train_time:107757ms step_avg:94.86ms
step:1137/1705 train_time:107854ms step_avg:94.86ms
step:1138/1705 train_time:107950ms step_avg:94.86ms
step:1139/1705 train_time:108047ms step_avg:94.86ms
step:1140/1705 train_time:108142ms step_avg:94.86ms
step:1141/1705 train_time:108236ms step_avg:94.86ms
step:1142/1705 train_time:108330ms step_avg:94.86ms
step:1143/1705 train_time:108425ms step_avg:94.86ms
step:1144/1705 train_time:108520ms step_avg:94.86ms
step:1145/1705 train_time:108614ms step_avg:94.86ms
step:1146/1705 train_time:108709ms step_avg:94.86ms
step:1147/1705 train_time:108805ms step_avg:94.86ms
step:1148/1705 train_time:108901ms step_avg:94.86ms
step:1149/1705 train_time:108997ms step_avg:94.86ms
step:1150/1705 train_time:109093ms step_avg:94.86ms
step:1151/1705 train_time:109188ms step_avg:94.86ms
step:1152/1705 train_time:109284ms step_avg:94.86ms
step:1153/1705 train_time:109378ms step_avg:94.86ms
step:1154/1705 train_time:109473ms step_avg:94.86ms
step:1155/1705 train_time:109569ms step_avg:94.87ms
step:1156/1705 train_time:109664ms step_avg:94.86ms
step:1157/1705 train_time:109759ms step_avg:94.86ms
step:1158/1705 train_time:109855ms step_avg:94.87ms
step:1159/1705 train_time:109951ms step_avg:94.87ms
step:1160/1705 train_time:110047ms step_avg:94.87ms
step:1161/1705 train_time:110142ms step_avg:94.87ms
step:1162/1705 train_time:110236ms step_avg:94.87ms
step:1163/1705 train_time:110331ms step_avg:94.87ms
step:1164/1705 train_time:110427ms step_avg:94.87ms
step:1165/1705 train_time:110522ms step_avg:94.87ms
step:1166/1705 train_time:110617ms step_avg:94.87ms
step:1167/1705 train_time:110713ms step_avg:94.87ms
step:1168/1705 train_time:110809ms step_avg:94.87ms
step:1169/1705 train_time:110905ms step_avg:94.87ms
step:1170/1705 train_time:111000ms step_avg:94.87ms
step:1171/1705 train_time:111097ms step_avg:94.87ms
step:1172/1705 train_time:111193ms step_avg:94.87ms
step:1173/1705 train_time:111289ms step_avg:94.88ms
step:1174/1705 train_time:111384ms step_avg:94.88ms
step:1175/1705 train_time:111479ms step_avg:94.88ms
step:1176/1705 train_time:111574ms step_avg:94.88ms
step:1177/1705 train_time:111669ms step_avg:94.88ms
step:1178/1705 train_time:111764ms step_avg:94.88ms
step:1179/1705 train_time:111861ms step_avg:94.88ms
step:1180/1705 train_time:111955ms step_avg:94.88ms
step:1181/1705 train_time:112050ms step_avg:94.88ms
step:1182/1705 train_time:112146ms step_avg:94.88ms
step:1183/1705 train_time:112241ms step_avg:94.88ms
step:1184/1705 train_time:112336ms step_avg:94.88ms
step:1185/1705 train_time:112432ms step_avg:94.88ms
step:1186/1705 train_time:112527ms step_avg:94.88ms
step:1187/1705 train_time:112622ms step_avg:94.88ms
step:1188/1705 train_time:112717ms step_avg:94.88ms
step:1189/1705 train_time:112813ms step_avg:94.88ms
step:1190/1705 train_time:112909ms step_avg:94.88ms
step:1191/1705 train_time:113005ms step_avg:94.88ms
step:1192/1705 train_time:113100ms step_avg:94.88ms
step:1193/1705 train_time:113196ms step_avg:94.88ms
step:1194/1705 train_time:113291ms step_avg:94.88ms
step:1195/1705 train_time:113386ms step_avg:94.88ms
step:1196/1705 train_time:113482ms step_avg:94.88ms
step:1197/1705 train_time:113576ms step_avg:94.88ms
step:1198/1705 train_time:113673ms step_avg:94.89ms
step:1199/1705 train_time:113769ms step_avg:94.89ms
step:1200/1705 train_time:113864ms step_avg:94.89ms
step:1201/1705 train_time:113959ms step_avg:94.89ms
step:1202/1705 train_time:114054ms step_avg:94.89ms
step:1203/1705 train_time:114150ms step_avg:94.89ms
step:1204/1705 train_time:114246ms step_avg:94.89ms
step:1205/1705 train_time:114341ms step_avg:94.89ms
step:1206/1705 train_time:114436ms step_avg:94.89ms
step:1207/1705 train_time:114532ms step_avg:94.89ms
step:1208/1705 train_time:114628ms step_avg:94.89ms
step:1209/1705 train_time:114723ms step_avg:94.89ms
step:1210/1705 train_time:114818ms step_avg:94.89ms
step:1211/1705 train_time:114914ms step_avg:94.89ms
step:1212/1705 train_time:115010ms step_avg:94.89ms
step:1213/1705 train_time:115105ms step_avg:94.89ms
step:1214/1705 train_time:115200ms step_avg:94.89ms
step:1215/1705 train_time:115295ms step_avg:94.89ms
step:1216/1705 train_time:115391ms step_avg:94.89ms
step:1217/1705 train_time:115486ms step_avg:94.89ms
step:1218/1705 train_time:115582ms step_avg:94.90ms
step:1219/1705 train_time:115677ms step_avg:94.89ms
step:1220/1705 train_time:115772ms step_avg:94.90ms
step:1221/1705 train_time:115868ms step_avg:94.90ms
step:1222/1705 train_time:115963ms step_avg:94.90ms
step:1223/1705 train_time:116058ms step_avg:94.90ms
step:1224/1705 train_time:116154ms step_avg:94.90ms
step:1225/1705 train_time:116250ms step_avg:94.90ms
step:1226/1705 train_time:116347ms step_avg:94.90ms
step:1227/1705 train_time:116442ms step_avg:94.90ms
step:1228/1705 train_time:116536ms step_avg:94.90ms
step:1229/1705 train_time:116631ms step_avg:94.90ms
step:1230/1705 train_time:116726ms step_avg:94.90ms
step:1231/1705 train_time:116822ms step_avg:94.90ms
step:1232/1705 train_time:116916ms step_avg:94.90ms
step:1233/1705 train_time:117011ms step_avg:94.90ms
step:1234/1705 train_time:117107ms step_avg:94.90ms
step:1235/1705 train_time:117202ms step_avg:94.90ms
step:1236/1705 train_time:117297ms step_avg:94.90ms
step:1237/1705 train_time:117393ms step_avg:94.90ms
step:1238/1705 train_time:117489ms step_avg:94.90ms
step:1239/1705 train_time:117585ms step_avg:94.90ms
step:1240/1705 train_time:117680ms step_avg:94.90ms
step:1241/1705 train_time:117775ms step_avg:94.90ms
step:1242/1705 train_time:117870ms step_avg:94.90ms
step:1243/1705 train_time:117966ms step_avg:94.90ms
step:1244/1705 train_time:118062ms step_avg:94.90ms
step:1245/1705 train_time:118156ms step_avg:94.90ms
step:1246/1705 train_time:118252ms step_avg:94.91ms
step:1247/1705 train_time:118347ms step_avg:94.91ms
step:1248/1705 train_time:118443ms step_avg:94.91ms
step:1249/1705 train_time:118537ms step_avg:94.91ms
step:1250/1705 train_time:118633ms step_avg:94.91ms
step:1250/1705 val_loss:3.3898 train_time:118729ms step_avg:94.98ms
step:1251/1705 train_time:118752ms step_avg:94.93ms
step:1252/1705 train_time:118837ms step_avg:94.92ms
step:1253/1705 train_time:118932ms step_avg:94.92ms
step:1254/1705 train_time:119026ms step_avg:94.92ms
step:1255/1705 train_time:119120ms step_avg:94.92ms
step:1256/1705 train_time:119214ms step_avg:94.92ms
step:1257/1705 train_time:119309ms step_avg:94.92ms
step:1258/1705 train_time:119402ms step_avg:94.91ms
step:1259/1705 train_time:119496ms step_avg:94.91ms
step:1260/1705 train_time:119590ms step_avg:94.91ms
step:1261/1705 train_time:119689ms step_avg:94.92ms
step:1262/1705 train_time:119788ms step_avg:94.92ms
step:1263/1705 train_time:119887ms step_avg:94.92ms
step:1264/1705 train_time:119983ms step_avg:94.92ms
step:1265/1705 train_time:120078ms step_avg:94.92ms
step:1266/1705 train_time:120172ms step_avg:94.92ms
step:1267/1705 train_time:120268ms step_avg:94.92ms
step:1268/1705 train_time:120362ms step_avg:94.92ms
step:1269/1705 train_time:120456ms step_avg:94.92ms
step:1270/1705 train_time:120551ms step_avg:94.92ms
step:1271/1705 train_time:120646ms step_avg:94.92ms
step:1272/1705 train_time:120743ms step_avg:94.92ms
step:1273/1705 train_time:120840ms step_avg:94.93ms
step:1274/1705 train_time:121238ms step_avg:95.16ms
step:1275/1705 train_time:121309ms step_avg:95.14ms
step:1276/1705 train_time:121402ms step_avg:95.14ms
step:1277/1705 train_time:121496ms step_avg:95.14ms
step:1278/1705 train_time:121589ms step_avg:95.14ms
step:1279/1705 train_time:121683ms step_avg:95.14ms
step:1280/1705 train_time:121777ms step_avg:95.14ms
step:1281/1705 train_time:121870ms step_avg:95.14ms
step:1282/1705 train_time:121964ms step_avg:95.14ms
step:1283/1705 train_time:122058ms step_avg:95.13ms
step:1284/1705 train_time:122159ms step_avg:95.14ms
step:1285/1705 train_time:122257ms step_avg:95.14ms
step:1286/1705 train_time:122353ms step_avg:95.14ms
step:1287/1705 train_time:122448ms step_avg:95.14ms
step:1288/1705 train_time:122545ms step_avg:95.14ms
step:1289/1705 train_time:122639ms step_avg:95.14ms
step:1290/1705 train_time:122733ms step_avg:95.14ms
step:1291/1705 train_time:122827ms step_avg:95.14ms
step:1292/1705 train_time:122922ms step_avg:95.14ms
step:1293/1705 train_time:123016ms step_avg:95.14ms
step:1294/1705 train_time:123112ms step_avg:95.14ms
step:1295/1705 train_time:123209ms step_avg:95.14ms
step:1296/1705 train_time:123307ms step_avg:95.14ms
step:1297/1705 train_time:123403ms step_avg:95.14ms
step:1298/1705 train_time:123497ms step_avg:95.14ms
step:1299/1705 train_time:123593ms step_avg:95.14ms
step:1300/1705 train_time:123687ms step_avg:95.14ms
step:1301/1705 train_time:123783ms step_avg:95.14ms
step:1302/1705 train_time:123876ms step_avg:95.14ms
step:1303/1705 train_time:123970ms step_avg:95.14ms
step:1304/1705 train_time:124065ms step_avg:95.14ms
step:1305/1705 train_time:124161ms step_avg:95.14ms
step:1306/1705 train_time:124258ms step_avg:95.14ms
step:1307/1705 train_time:124354ms step_avg:95.14ms
step:1308/1705 train_time:124451ms step_avg:95.15ms
step:1309/1705 train_time:124546ms step_avg:95.15ms
step:1310/1705 train_time:124643ms step_avg:95.15ms
step:1311/1705 train_time:124739ms step_avg:95.15ms
step:1312/1705 train_time:124832ms step_avg:95.15ms
step:1313/1705 train_time:124927ms step_avg:95.15ms
step:1314/1705 train_time:125022ms step_avg:95.15ms
step:1315/1705 train_time:125116ms step_avg:95.15ms
step:1316/1705 train_time:125212ms step_avg:95.15ms
step:1317/1705 train_time:125308ms step_avg:95.15ms
step:1318/1705 train_time:125404ms step_avg:95.15ms
step:1319/1705 train_time:125500ms step_avg:95.15ms
step:1320/1705 train_time:125596ms step_avg:95.15ms
step:1321/1705 train_time:125692ms step_avg:95.15ms
step:1322/1705 train_time:125788ms step_avg:95.15ms
step:1323/1705 train_time:125884ms step_avg:95.15ms
step:1324/1705 train_time:125977ms step_avg:95.15ms
step:1325/1705 train_time:126072ms step_avg:95.15ms
step:1326/1705 train_time:126167ms step_avg:95.15ms
step:1327/1705 train_time:126263ms step_avg:95.15ms
step:1328/1705 train_time:126358ms step_avg:95.15ms
step:1329/1705 train_time:126454ms step_avg:95.15ms
step:1330/1705 train_time:126550ms step_avg:95.15ms
step:1331/1705 train_time:126646ms step_avg:95.15ms
step:1332/1705 train_time:126741ms step_avg:95.15ms
step:1333/1705 train_time:126835ms step_avg:95.15ms
step:1334/1705 train_time:126930ms step_avg:95.15ms
step:1335/1705 train_time:127025ms step_avg:95.15ms
step:1336/1705 train_time:127120ms step_avg:95.15ms
step:1337/1705 train_time:127215ms step_avg:95.15ms
step:1338/1705 train_time:127310ms step_avg:95.15ms
step:1339/1705 train_time:127406ms step_avg:95.15ms
step:1340/1705 train_time:127502ms step_avg:95.15ms
step:1341/1705 train_time:127596ms step_avg:95.15ms
step:1342/1705 train_time:127691ms step_avg:95.15ms
step:1343/1705 train_time:127788ms step_avg:95.15ms
step:1344/1705 train_time:127882ms step_avg:95.15ms
step:1345/1705 train_time:127977ms step_avg:95.15ms
step:1346/1705 train_time:128072ms step_avg:95.15ms
step:1347/1705 train_time:128167ms step_avg:95.15ms
step:1348/1705 train_time:128263ms step_avg:95.15ms
step:1349/1705 train_time:128359ms step_avg:95.15ms
step:1350/1705 train_time:128454ms step_avg:95.15ms
step:1351/1705 train_time:128551ms step_avg:95.15ms
step:1352/1705 train_time:128647ms step_avg:95.15ms
step:1353/1705 train_time:128743ms step_avg:95.15ms
step:1354/1705 train_time:128838ms step_avg:95.15ms
step:1355/1705 train_time:128933ms step_avg:95.15ms
step:1356/1705 train_time:129028ms step_avg:95.15ms
step:1357/1705 train_time:129123ms step_avg:95.15ms
step:1358/1705 train_time:129218ms step_avg:95.15ms
step:1359/1705 train_time:129313ms step_avg:95.15ms
step:1360/1705 train_time:129408ms step_avg:95.15ms
step:1361/1705 train_time:129505ms step_avg:95.15ms
step:1362/1705 train_time:129601ms step_avg:95.16ms
step:1363/1705 train_time:129696ms step_avg:95.15ms
step:1364/1705 train_time:129791ms step_avg:95.15ms
step:1365/1705 train_time:129886ms step_avg:95.15ms
step:1366/1705 train_time:129980ms step_avg:95.15ms
step:1367/1705 train_time:130075ms step_avg:95.15ms
step:1368/1705 train_time:130171ms step_avg:95.15ms
step:1369/1705 train_time:130266ms step_avg:95.15ms
step:1370/1705 train_time:130362ms step_avg:95.15ms
step:1371/1705 train_time:130457ms step_avg:95.15ms
step:1372/1705 train_time:130553ms step_avg:95.15ms
step:1373/1705 train_time:130649ms step_avg:95.16ms
step:1374/1705 train_time:130745ms step_avg:95.16ms
step:1375/1705 train_time:130840ms step_avg:95.16ms
step:1375/1705 val_loss:3.3524 train_time:130935ms step_avg:95.23ms
step:1376/1705 train_time:130957ms step_avg:95.17ms
step:1377/1705 train_time:131036ms step_avg:95.16ms
step:1378/1705 train_time:131134ms step_avg:95.16ms
step:1379/1705 train_time:131229ms step_avg:95.16ms
step:1380/1705 train_time:131324ms step_avg:95.16ms
step:1381/1705 train_time:131419ms step_avg:95.16ms
step:1382/1705 train_time:131513ms step_avg:95.16ms
step:1383/1705 train_time:131607ms step_avg:95.16ms
step:1384/1705 train_time:131703ms step_avg:95.16ms
step:1385/1705 train_time:131797ms step_avg:95.16ms
step:1386/1705 train_time:131893ms step_avg:95.16ms
step:1387/1705 train_time:131991ms step_avg:95.16ms
step:1388/1705 train_time:132089ms step_avg:95.16ms
step:1389/1705 train_time:132184ms step_avg:95.16ms
step:1390/1705 train_time:132279ms step_avg:95.16ms
step:1391/1705 train_time:132374ms step_avg:95.16ms
step:1392/1705 train_time:132468ms step_avg:95.16ms
step:1393/1705 train_time:132562ms step_avg:95.16ms
step:1394/1705 train_time:132657ms step_avg:95.16ms
step:1395/1705 train_time:132752ms step_avg:95.16ms
step:1396/1705 train_time:132847ms step_avg:95.16ms
step:1397/1705 train_time:132942ms step_avg:95.16ms
step:1398/1705 train_time:133039ms step_avg:95.16ms
step:1399/1705 train_time:133134ms step_avg:95.16ms
step:1400/1705 train_time:133230ms step_avg:95.16ms
step:1401/1705 train_time:133325ms step_avg:95.16ms
step:1402/1705 train_time:133420ms step_avg:95.16ms
step:1403/1705 train_time:133515ms step_avg:95.16ms
step:1404/1705 train_time:133611ms step_avg:95.16ms
step:1405/1705 train_time:133705ms step_avg:95.16ms
step:1406/1705 train_time:133801ms step_avg:95.16ms
step:1407/1705 train_time:133897ms step_avg:95.16ms
step:1408/1705 train_time:133993ms step_avg:95.17ms
step:1409/1705 train_time:134089ms step_avg:95.17ms
step:1410/1705 train_time:134184ms step_avg:95.17ms
step:1411/1705 train_time:134280ms step_avg:95.17ms
step:1412/1705 train_time:134375ms step_avg:95.17ms
step:1413/1705 train_time:134470ms step_avg:95.17ms
step:1414/1705 train_time:134565ms step_avg:95.17ms
step:1415/1705 train_time:134660ms step_avg:95.17ms
step:1416/1705 train_time:134755ms step_avg:95.17ms
step:1417/1705 train_time:134850ms step_avg:95.17ms
step:1418/1705 train_time:134944ms step_avg:95.17ms
step:1419/1705 train_time:135040ms step_avg:95.17ms
step:1420/1705 train_time:135136ms step_avg:95.17ms
step:1421/1705 train_time:135231ms step_avg:95.17ms
step:1422/1705 train_time:135326ms step_avg:95.17ms
step:1423/1705 train_time:135422ms step_avg:95.17ms
step:1424/1705 train_time:135517ms step_avg:95.17ms
step:1425/1705 train_time:135613ms step_avg:95.17ms
step:1426/1705 train_time:135707ms step_avg:95.17ms
step:1427/1705 train_time:135802ms step_avg:95.17ms
step:1428/1705 train_time:135898ms step_avg:95.17ms
step:1429/1705 train_time:135993ms step_avg:95.17ms
step:1430/1705 train_time:136089ms step_avg:95.17ms
step:1431/1705 train_time:136183ms step_avg:95.17ms
step:1432/1705 train_time:136279ms step_avg:95.17ms
step:1433/1705 train_time:136375ms step_avg:95.17ms
step:1434/1705 train_time:136470ms step_avg:95.17ms
step:1435/1705 train_time:136565ms step_avg:95.17ms
step:1436/1705 train_time:136660ms step_avg:95.17ms
step:1437/1705 train_time:136756ms step_avg:95.17ms
step:1438/1705 train_time:136850ms step_avg:95.17ms
step:1439/1705 train_time:136945ms step_avg:95.17ms
step:1440/1705 train_time:137041ms step_avg:95.17ms
step:1441/1705 train_time:137137ms step_avg:95.17ms
step:1442/1705 train_time:137232ms step_avg:95.17ms
step:1443/1705 train_time:137328ms step_avg:95.17ms
step:1444/1705 train_time:137423ms step_avg:95.17ms
step:1445/1705 train_time:137519ms step_avg:95.17ms
step:1446/1705 train_time:137614ms step_avg:95.17ms
step:1447/1705 train_time:137709ms step_avg:95.17ms
step:1448/1705 train_time:137804ms step_avg:95.17ms
step:1449/1705 train_time:137901ms step_avg:95.17ms
step:1450/1705 train_time:137996ms step_avg:95.17ms
step:1451/1705 train_time:138091ms step_avg:95.17ms
step:1452/1705 train_time:138186ms step_avg:95.17ms
step:1453/1705 train_time:138280ms step_avg:95.17ms
step:1454/1705 train_time:138377ms step_avg:95.17ms
step:1455/1705 train_time:138474ms step_avg:95.17ms
step:1456/1705 train_time:138570ms step_avg:95.17ms
step:1457/1705 train_time:138664ms step_avg:95.17ms
step:1458/1705 train_time:138759ms step_avg:95.17ms
step:1459/1705 train_time:138855ms step_avg:95.17ms
step:1460/1705 train_time:138950ms step_avg:95.17ms
step:1461/1705 train_time:139045ms step_avg:95.17ms
step:1462/1705 train_time:139141ms step_avg:95.17ms
step:1463/1705 train_time:139237ms step_avg:95.17ms
step:1464/1705 train_time:139332ms step_avg:95.17ms
step:1465/1705 train_time:139426ms step_avg:95.17ms
step:1466/1705 train_time:139522ms step_avg:95.17ms
step:1467/1705 train_time:139618ms step_avg:95.17ms
step:1468/1705 train_time:139714ms step_avg:95.17ms
step:1469/1705 train_time:139808ms step_avg:95.17ms
step:1470/1705 train_time:139902ms step_avg:95.17ms
step:1471/1705 train_time:139998ms step_avg:95.17ms
step:1472/1705 train_time:140094ms step_avg:95.17ms
step:1473/1705 train_time:140189ms step_avg:95.17ms
step:1474/1705 train_time:140284ms step_avg:95.17ms
step:1475/1705 train_time:140381ms step_avg:95.17ms
step:1476/1705 train_time:140476ms step_avg:95.17ms
step:1477/1705 train_time:140571ms step_avg:95.17ms
step:1478/1705 train_time:140666ms step_avg:95.17ms
step:1479/1705 train_time:140761ms step_avg:95.17ms
step:1480/1705 train_time:140857ms step_avg:95.17ms
step:1481/1705 train_time:140953ms step_avg:95.17ms
step:1482/1705 train_time:141050ms step_avg:95.18ms
step:1483/1705 train_time:141145ms step_avg:95.18ms
step:1484/1705 train_time:141240ms step_avg:95.17ms
step:1485/1705 train_time:141597ms step_avg:95.35ms
step:1486/1705 train_time:141697ms step_avg:95.35ms
step:1487/1705 train_time:141790ms step_avg:95.35ms
step:1488/1705 train_time:141884ms step_avg:95.35ms
step:1489/1705 train_time:141978ms step_avg:95.35ms
step:1490/1705 train_time:142072ms step_avg:95.35ms
step:1491/1705 train_time:142166ms step_avg:95.35ms
step:1492/1705 train_time:142260ms step_avg:95.35ms
step:1493/1705 train_time:142354ms step_avg:95.35ms
step:1494/1705 train_time:142449ms step_avg:95.35ms
step:1495/1705 train_time:142546ms step_avg:95.35ms
step:1496/1705 train_time:142645ms step_avg:95.35ms
step:1497/1705 train_time:142741ms step_avg:95.35ms
step:1498/1705 train_time:142836ms step_avg:95.35ms
step:1499/1705 train_time:142931ms step_avg:95.35ms
step:1500/1705 train_time:143026ms step_avg:95.35ms
step:1500/1705 val_loss:3.3200 train_time:143120ms step_avg:95.41ms
step:1501/1705 train_time:143143ms step_avg:95.37ms
step:1502/1705 train_time:143221ms step_avg:95.35ms
step:1503/1705 train_time:143318ms step_avg:95.35ms
step:1504/1705 train_time:143414ms step_avg:95.35ms
step:1505/1705 train_time:143508ms step_avg:95.35ms
step:1506/1705 train_time:143602ms step_avg:95.35ms
step:1507/1705 train_time:143696ms step_avg:95.35ms
step:1508/1705 train_time:143791ms step_avg:95.35ms
step:1509/1705 train_time:143885ms step_avg:95.35ms
step:1510/1705 train_time:143979ms step_avg:95.35ms
step:1511/1705 train_time:144075ms step_avg:95.35ms
step:1512/1705 train_time:144176ms step_avg:95.35ms
step:1513/1705 train_time:144273ms step_avg:95.36ms
step:1514/1705 train_time:144370ms step_avg:95.36ms
step:1515/1705 train_time:144466ms step_avg:95.36ms
step:1516/1705 train_time:144560ms step_avg:95.36ms
step:1517/1705 train_time:144654ms step_avg:95.36ms
step:1518/1705 train_time:144748ms step_avg:95.35ms
step:1519/1705 train_time:144843ms step_avg:95.35ms
step:1520/1705 train_time:144937ms step_avg:95.35ms
step:1521/1705 train_time:145032ms step_avg:95.35ms
step:1522/1705 train_time:145129ms step_avg:95.35ms
step:1523/1705 train_time:145227ms step_avg:95.36ms
step:1524/1705 train_time:145323ms step_avg:95.36ms
step:1525/1705 train_time:145419ms step_avg:95.36ms
step:1526/1705 train_time:145514ms step_avg:95.36ms
step:1527/1705 train_time:145609ms step_avg:95.36ms
step:1528/1705 train_time:145704ms step_avg:95.36ms
step:1529/1705 train_time:145798ms step_avg:95.36ms
step:1530/1705 train_time:145892ms step_avg:95.35ms
step:1531/1705 train_time:145986ms step_avg:95.35ms
step:1532/1705 train_time:146081ms step_avg:95.35ms
step:1533/1705 train_time:146178ms step_avg:95.35ms
step:1534/1705 train_time:146275ms step_avg:95.35ms
step:1535/1705 train_time:146371ms step_avg:95.36ms
step:1536/1705 train_time:146467ms step_avg:95.36ms
step:1537/1705 train_time:146562ms step_avg:95.36ms
step:1538/1705 train_time:146657ms step_avg:95.36ms
step:1539/1705 train_time:146751ms step_avg:95.36ms
step:1540/1705 train_time:146847ms step_avg:95.36ms
step:1541/1705 train_time:146941ms step_avg:95.35ms
step:1542/1705 train_time:147036ms step_avg:95.35ms
step:1543/1705 train_time:147132ms step_avg:95.35ms
step:1544/1705 train_time:147228ms step_avg:95.36ms
step:1545/1705 train_time:147324ms step_avg:95.36ms
step:1546/1705 train_time:147419ms step_avg:95.36ms
step:1547/1705 train_time:147514ms step_avg:95.36ms
step:1548/1705 train_time:147610ms step_avg:95.36ms
step:1549/1705 train_time:147705ms step_avg:95.36ms
step:1550/1705 train_time:147800ms step_avg:95.36ms
step:1551/1705 train_time:147895ms step_avg:95.35ms
step:1552/1705 train_time:147990ms step_avg:95.35ms
step:1553/1705 train_time:148085ms step_avg:95.35ms
step:1554/1705 train_time:148181ms step_avg:95.35ms
step:1555/1705 train_time:148277ms step_avg:95.35ms
step:1556/1705 train_time:148372ms step_avg:95.36ms
step:1557/1705 train_time:148468ms step_avg:95.36ms
step:1558/1705 train_time:148563ms step_avg:95.36ms
step:1559/1705 train_time:148658ms step_avg:95.35ms
step:1560/1705 train_time:148754ms step_avg:95.35ms
step:1561/1705 train_time:148850ms step_avg:95.36ms
step:1562/1705 train_time:148944ms step_avg:95.35ms
step:1563/1705 train_time:149039ms step_avg:95.35ms
step:1564/1705 train_time:149135ms step_avg:95.35ms
step:1565/1705 train_time:149230ms step_avg:95.35ms
step:1566/1705 train_time:149327ms step_avg:95.36ms
step:1567/1705 train_time:149424ms step_avg:95.36ms
step:1568/1705 train_time:149518ms step_avg:95.36ms
step:1569/1705 train_time:149613ms step_avg:95.36ms
step:1570/1705 train_time:149709ms step_avg:95.36ms
step:1571/1705 train_time:149804ms step_avg:95.36ms
step:1572/1705 train_time:149899ms step_avg:95.36ms
step:1573/1705 train_time:149994ms step_avg:95.36ms
step:1574/1705 train_time:150089ms step_avg:95.36ms
step:1575/1705 train_time:150185ms step_avg:95.36ms
step:1576/1705 train_time:150280ms step_avg:95.36ms
step:1577/1705 train_time:150375ms step_avg:95.35ms
step:1578/1705 train_time:150471ms step_avg:95.36ms
step:1579/1705 train_time:150567ms step_avg:95.36ms
step:1580/1705 train_time:150662ms step_avg:95.36ms
step:1581/1705 train_time:150757ms step_avg:95.36ms
step:1582/1705 train_time:150852ms step_avg:95.36ms
step:1583/1705 train_time:150949ms step_avg:95.36ms
step:1584/1705 train_time:151045ms step_avg:95.36ms
step:1585/1705 train_time:151140ms step_avg:95.36ms
step:1586/1705 train_time:151234ms step_avg:95.36ms
step:1587/1705 train_time:151330ms step_avg:95.36ms
step:1588/1705 train_time:151426ms step_avg:95.36ms
step:1589/1705 train_time:151521ms step_avg:95.36ms
step:1590/1705 train_time:151616ms step_avg:95.36ms
step:1591/1705 train_time:151712ms step_avg:95.36ms
step:1592/1705 train_time:151809ms step_avg:95.36ms
step:1593/1705 train_time:151905ms step_avg:95.36ms
step:1594/1705 train_time:152001ms step_avg:95.36ms
step:1595/1705 train_time:152095ms step_avg:95.36ms
step:1596/1705 train_time:152190ms step_avg:95.36ms
step:1597/1705 train_time:152286ms step_avg:95.36ms
step:1598/1705 train_time:152381ms step_avg:95.36ms
step:1599/1705 train_time:152475ms step_avg:95.36ms
step:1600/1705 train_time:152571ms step_avg:95.36ms
step:1601/1705 train_time:152666ms step_avg:95.36ms
step:1602/1705 train_time:152762ms step_avg:95.36ms
step:1603/1705 train_time:152858ms step_avg:95.36ms
step:1604/1705 train_time:152954ms step_avg:95.36ms
step:1605/1705 train_time:153050ms step_avg:95.36ms
step:1606/1705 train_time:153146ms step_avg:95.36ms
step:1607/1705 train_time:153242ms step_avg:95.36ms
step:1608/1705 train_time:153337ms step_avg:95.36ms
step:1609/1705 train_time:153432ms step_avg:95.36ms
step:1610/1705 train_time:153527ms step_avg:95.36ms
step:1611/1705 train_time:153623ms step_avg:95.36ms
step:1612/1705 train_time:153717ms step_avg:95.36ms
step:1613/1705 train_time:153813ms step_avg:95.36ms
step:1614/1705 train_time:153909ms step_avg:95.36ms
step:1615/1705 train_time:154004ms step_avg:95.36ms
step:1616/1705 train_time:154099ms step_avg:95.36ms
step:1617/1705 train_time:154194ms step_avg:95.36ms
step:1618/1705 train_time:154289ms step_avg:95.36ms
step:1619/1705 train_time:154384ms step_avg:95.36ms
step:1620/1705 train_time:154479ms step_avg:95.36ms
step:1621/1705 train_time:154574ms step_avg:95.36ms
step:1622/1705 train_time:154670ms step_avg:95.36ms
step:1623/1705 train_time:154766ms step_avg:95.36ms
step:1624/1705 train_time:154863ms step_avg:95.36ms
step:1625/1705 train_time:154959ms step_avg:95.36ms
step:1625/1705 val_loss:3.2920 train_time:155055ms step_avg:95.42ms
step:1626/1705 train_time:155078ms step_avg:95.37ms
step:1627/1705 train_time:155158ms step_avg:95.36ms
step:1628/1705 train_time:155257ms step_avg:95.37ms
step:1629/1705 train_time:155351ms step_avg:95.37ms
step:1630/1705 train_time:155446ms step_avg:95.37ms
step:1631/1705 train_time:155540ms step_avg:95.36ms
step:1632/1705 train_time:155634ms step_avg:95.36ms
step:1633/1705 train_time:155728ms step_avg:95.36ms
step:1634/1705 train_time:155823ms step_avg:95.36ms
step:1635/1705 train_time:155917ms step_avg:95.36ms
step:1636/1705 train_time:156012ms step_avg:95.36ms
step:1637/1705 train_time:156111ms step_avg:95.36ms
step:1638/1705 train_time:156210ms step_avg:95.37ms
step:1639/1705 train_time:156307ms step_avg:95.37ms
step:1640/1705 train_time:156402ms step_avg:95.37ms
step:1641/1705 train_time:156497ms step_avg:95.37ms
step:1642/1705 train_time:156592ms step_avg:95.37ms
step:1643/1705 train_time:156686ms step_avg:95.37ms
step:1644/1705 train_time:156781ms step_avg:95.37ms
step:1645/1705 train_time:156875ms step_avg:95.36ms
step:1646/1705 train_time:156970ms step_avg:95.36ms
step:1647/1705 train_time:157067ms step_avg:95.37ms
step:1648/1705 train_time:157165ms step_avg:95.37ms
step:1649/1705 train_time:157262ms step_avg:95.37ms
step:1650/1705 train_time:157357ms step_avg:95.37ms
step:1651/1705 train_time:157452ms step_avg:95.37ms
step:1652/1705 train_time:157546ms step_avg:95.37ms
step:1653/1705 train_time:157640ms step_avg:95.37ms
step:1654/1705 train_time:157734ms step_avg:95.37ms
step:1655/1705 train_time:157829ms step_avg:95.37ms
step:1656/1705 train_time:157925ms step_avg:95.37ms
step:1657/1705 train_time:158021ms step_avg:95.37ms
step:1658/1705 train_time:158118ms step_avg:95.37ms
step:1659/1705 train_time:158213ms step_avg:95.37ms
step:1660/1705 train_time:158309ms step_avg:95.37ms
step:1661/1705 train_time:158406ms step_avg:95.37ms
step:1662/1705 train_time:158502ms step_avg:95.37ms
step:1663/1705 train_time:158598ms step_avg:95.37ms
step:1664/1705 train_time:158692ms step_avg:95.37ms
step:1665/1705 train_time:158786ms step_avg:95.37ms
step:1666/1705 train_time:158881ms step_avg:95.37ms
step:1667/1705 train_time:158976ms step_avg:95.37ms
step:1668/1705 train_time:159072ms step_avg:95.37ms
step:1669/1705 train_time:159168ms step_avg:95.37ms
step:1670/1705 train_time:159264ms step_avg:95.37ms
step:1671/1705 train_time:159360ms step_avg:95.37ms
step:1672/1705 train_time:159455ms step_avg:95.37ms
step:1673/1705 train_time:159551ms step_avg:95.37ms
step:1674/1705 train_time:159646ms step_avg:95.37ms
step:1675/1705 train_time:159741ms step_avg:95.37ms
step:1676/1705 train_time:159836ms step_avg:95.37ms
step:1677/1705 train_time:159930ms step_avg:95.37ms
step:1678/1705 train_time:160026ms step_avg:95.37ms
step:1679/1705 train_time:160122ms step_avg:95.37ms
step:1680/1705 train_time:160217ms step_avg:95.37ms
step:1681/1705 train_time:160312ms step_avg:95.37ms
step:1682/1705 train_time:160408ms step_avg:95.37ms
step:1683/1705 train_time:160504ms step_avg:95.37ms
step:1684/1705 train_time:160599ms step_avg:95.37ms
step:1685/1705 train_time:160693ms step_avg:95.37ms
step:1686/1705 train_time:160788ms step_avg:95.37ms
step:1687/1705 train_time:160883ms step_avg:95.37ms
step:1688/1705 train_time:160979ms step_avg:95.37ms
step:1689/1705 train_time:161074ms step_avg:95.37ms
step:1690/1705 train_time:161170ms step_avg:95.37ms
step:1691/1705 train_time:161266ms step_avg:95.37ms
step:1692/1705 train_time:161361ms step_avg:95.37ms
step:1693/1705 train_time:161457ms step_avg:95.37ms
step:1694/1705 train_time:161552ms step_avg:95.37ms
step:1695/1705 train_time:161648ms step_avg:95.37ms
step:1696/1705 train_time:161744ms step_avg:95.37ms
step:1697/1705 train_time:161839ms step_avg:95.37ms
step:1698/1705 train_time:162087ms step_avg:95.46ms
step:1699/1705 train_time:162268ms step_avg:95.51ms
step:1700/1705 train_time:162361ms step_avg:95.51ms
step:1701/1705 train_time:162455ms step_avg:95.51ms
step:1702/1705 train_time:162549ms step_avg:95.50ms
step:1703/1705 train_time:162643ms step_avg:95.50ms
step:1704/1705 train_time:162738ms step_avg:95.50ms
step:1705/1705 train_time:162832ms step_avg:95.50ms
step:1705/1705 val_loss:3.2782 train_time:162926ms step_avg:95.56ms
peak memory allocated: 33992 MiB reserved: 49496 MiB
