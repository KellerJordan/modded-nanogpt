import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
import uuid
import time
import copy
import glob
from dataclasses import dataclass
from functools import lru_cache
from pathlib import Path

os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "expandable_segments:True"
import torch
torch.empty(1, device="cuda", requires_grad=True).backward() # prevents a bug on some systems
from torch import Tensor, nn
import torch.nn.functional as F
import torch.distributed as dist
#torch._inductor.config.coordinate_descent_tuning = True # we have banned this flag for new records because it causes compilation to take 30min
import numpy as np
import triton
import triton.language as tl
from flash_attn_interface import flash_attn_varlen_func
import torch._dynamo as dynamo
dynamo.config.recompile_limit = 64

# -----------------------------------------------------------------------------
# Custom operators: FP8 matmul by @YouJiacheng

@torch.library.custom_op("nanogpt::mm", mutates_args=())
def mm_op(x: Tensor, w: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor, Tensor]:
    @torch.compile
    def impl(x: Tensor, w: Tensor):
        assert x.is_contiguous() and w.is_contiguous()
        x_f8 = x.div(x_s).to(torch.float8_e4m3fn)
        w_f8 = w.div(w_s).to(torch.float8_e4m3fn)
        out = torch._scaled_mm(
            x_f8,
            w_f8.T,
            out_dtype=torch.bfloat16,
            scale_a=x.new_tensor(x_s, dtype=torch.float32),
            scale_b=x.new_tensor(w_s, dtype=torch.float32),
            use_fast_accum=True,
        )
        return out, x_f8, w_f8

    return impl(x, w)

@mm_op.register_fake
def _(x: Tensor, w: Tensor, *_):
    assert x.ndim == w.ndim == 2
    assert x.shape[1] == w.shape[1]
    assert x.device == w.device
    assert x.is_contiguous() and w.is_contiguous()
    return x @ w.T, x.to(torch.float8_e4m3fn), w.to(torch.float8_e4m3fn)

@torch.library.custom_op("nanogpt::mm_backward", mutates_args=())
def mm_backward_op(g: Tensor, x_f8: Tensor, w_f8: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor]:
    @torch.compile
    def impl(grad: Tensor, x_f8: Tensor, w_f8: Tensor):
        assert grad.is_contiguous()
        x_inv_s = grad.new_tensor(x_s, dtype=torch.float32)
        w_inv_s = grad.new_tensor(w_s, dtype=torch.float32)
        grad_inv_s = grad.new_tensor(grad_s, dtype=torch.float32)
        grad_f8 = grad.div(grad_s).to(torch.float8_e5m2)
        grad_x = torch._scaled_mm(
            grad_f8,
            w_f8.T.contiguous().T,
            out_dtype=torch.bfloat16,
            scale_a=grad_inv_s,
            scale_b=w_inv_s,
            use_fast_accum=False,
        )
        # faster than grad_f8_t @ x_f8, for (d_out, d_in) == (50304, 768)
        grad_w = torch._scaled_mm(
            x_f8.T.contiguous(),
            grad_f8.T.contiguous().T,
            out_dtype=torch.float32,
            scale_a=x_inv_s,
            scale_b=grad_inv_s,
            use_fast_accum=False,
        ).T
        return grad_x, grad_w

    return impl(g, x_f8, w_f8)

@mm_backward_op.register_fake
def _(g: Tensor, x_f8: Tensor, w_f8: Tensor, *_):
    return x_f8.to(torch.bfloat16), w_f8.T.contiguous().T.to(torch.float32)

def backward(ctx, grad_out: Tensor, *_):
    x_f8, w_f8 = ctx.saved_tensors
    x_s, w_s, grad_s = ctx.scales
    grad_x, grad_w = torch.ops.nanogpt.mm_backward(
        grad_out, x_f8, w_f8, x_s, w_s, grad_s
    )
    return grad_x, grad_w, None, None, None

def setup_context(ctx: torch.autograd.function.FunctionCtx, inputs, output):
    *_, x_s, w_s, grad_s = inputs
    _, x_f8, w_f8 = output
    ctx.save_for_backward(x_f8, w_f8)
    ctx.scales = x_s, w_s, grad_s
    ctx.set_materialize_grads(False)

mm_op.register_autograd(backward, setup_context=setup_context)

# -----------------------------------------------------------------------------
# Triton kernel for symmetric matrix multiplication by @byronxu99

def _get_autotune_configs():
    return [
        triton.Config(
            {
                "BLOCK_SIZE_M": bm,
                "BLOCK_SIZE_N": bn,
                "BLOCK_SIZE_K": bk,
                "GROUP_SIZE_M": 8,
                "LOWER_UPPER": 1,
            },
            num_stages=stages,
            num_warps=warps,
        )
        for bm in [64, 128]
        for bn in [64, 128, 256]
        for bk in [64, 128]
        for stages, warps in [(3, 4), (3, 8), (4, 4)]
        if bm // bn <= 2 and bn // bm <= 2
    ]

@triton.jit
def _pid_to_block(
    pid,
    M,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
):
    # Split output matrix into blocks of size (BLOCK_SIZE_M, BLOCK_SIZE_N)
    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)
    num_pid_n = tl.cdiv(M, BLOCK_SIZE_N)

    # Map PID to a single matrix in batch
    batch_idx = pid // (num_pid_m * num_pid_n)
    pid = pid % (num_pid_m * num_pid_n)

    # Map PID to 2D grid of blocks
    pid_m = pid // num_pid_n
    pid_n = pid % num_pid_n
    pid_m, pid_n = tl.swizzle2d(pid_m, pid_n, num_pid_m, num_pid_n, GROUP_SIZE_M)

    m_idx = pid_m * BLOCK_SIZE_M
    n_idx = pid_n * BLOCK_SIZE_N
    return batch_idx, m_idx, n_idx

@triton.autotune(
    configs=_get_autotune_configs(),
    key=["M", "K", "a_stride_r", "a_stride_c", "c_stride_r", "c_stride_c"],
)
@triton.jit
def ns_line_1_kernel(
    A_ptr, C_ptr,
    M, K,
    a_stride_b, a_stride_r, a_stride_c,
    c_stride_b, c_stride_r, c_stride_c,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    BLOCK_SIZE_K: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
    LOWER_UPPER: tl.constexpr,
):
    pid = tl.program_id(axis=0)
    batch_idx, m_idx, n_idx = _pid_to_block(
        pid, M, BLOCK_SIZE_M, BLOCK_SIZE_N, GROUP_SIZE_M
    )

    # Skip blocks that don't need to be computed
    skip_block_below_diag = (LOWER_UPPER == 0) and (n_idx + BLOCK_SIZE_N <= m_idx)
    skip_block_above_diag = (LOWER_UPPER != 0) and (m_idx + BLOCK_SIZE_M <= n_idx)
    if skip_block_below_diag or skip_block_above_diag:
        return

    # Index into one matrix of batch
    A_ptr += batch_idx * a_stride_b
    C_ptr += batch_idx * c_stride_b

    # Create pointer arrays for A and A.T
    offs_m = (m_idx + tl.arange(0, BLOCK_SIZE_M)) % M
    offs_n = (n_idx + tl.arange(0, BLOCK_SIZE_N)) % M
    offs_k = tl.arange(0, BLOCK_SIZE_K)
    a_ptrs = A_ptr + (offs_m[:, None] * a_stride_r + offs_k[None, :] * a_stride_c)
    at_ptrs = A_ptr + (offs_k[:, None] * a_stride_c + offs_n[None, :] * a_stride_r)

    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)

    # Accumulate over blocks of K
    for k in tl.range(0, tl.cdiv(K, BLOCK_SIZE_K)):
        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k * BLOCK_SIZE_K, other=0.0)
        at = tl.load(at_ptrs, mask=offs_k[:, None] < K - k * BLOCK_SIZE_K, other=0.0)
        accumulator = tl.dot(a, at, accumulator)
        a_ptrs += BLOCK_SIZE_K * a_stride_c
        at_ptrs += BLOCK_SIZE_K * a_stride_c

    out_dtype = C_ptr.dtype.element_ty
    output = accumulator.to(out_dtype)

    # Store block of C
    offs_cm = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_cn = n_idx + tl.arange(0, BLOCK_SIZE_N)
    c_ptrs = C_ptr + (offs_cm[:, None] * c_stride_r + offs_cn[None, :] * c_stride_c)
    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < M)
    tl.store(c_ptrs, output, mask=c_mask)

    # Store block of C mirrored across the diagonal
    c_ptrs_t = C_ptr + (offs_cn[:, None] * c_stride_r + offs_cm[None, :] * c_stride_c)
    c_mask_t = (offs_cn[:, None] < M) & (offs_cm[None, :] < M)
    tl.store(c_ptrs_t, output.T, mask=c_mask_t)

def ns_line_1(A: torch.Tensor, out: torch.Tensor):
    """
    Launch Triton kernel to compute C = A @ A.T
    """
    assert A.ndim == 2 or A.ndim == 3
    M, K = A.shape[-2:]
    assert out.size(-2) == M, "Output matrix has incorrect shape"
    assert out.size(-1) == M, "Output matrix has incorrect shape"

    batch_size = A.size(0) if A.ndim == 3 else 1
    input_batch_stride = A.stride(0) if A.ndim == 3 else 0
    output_batch_stride = out.stride(0) if out.ndim == 3 else 0

    grid = lambda meta: (
        batch_size * triton.cdiv(M, meta["BLOCK_SIZE_M"]) * triton.cdiv(M, meta["BLOCK_SIZE_N"]),
    )
    ns_line_1_kernel[grid](
        A_ptr=A,
        C_ptr=out,
        M=M,
        K=K,
        a_stride_b=input_batch_stride,
        a_stride_r=A.stride(-2),
        a_stride_c=A.stride(-1),
        c_stride_b=output_batch_stride,
        c_stride_r=out.stride(-2),
        c_stride_c=out.stride(-1),
    )
    return out

@triton.autotune(
    configs=_get_autotune_configs(),
    key=["M", "a_stride_r", "a_stride_c", "c_stride_r", "c_stride_c"],
)
@triton.jit
def ns_line_2_kernel(
    A_ptr, C_ptr,
    M,
    a_stride_b, a_stride_r, a_stride_c,
    c_stride_b, c_stride_r, c_stride_c,
    alpha, beta,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    BLOCK_SIZE_K: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
    LOWER_UPPER: tl.constexpr,
):
    # This is mostly duplicated from ns_line_1_kernel, but also loads and adds a block of A
    # Performance is slightly slower than ns_line_1_kernel, so we use two separate kernels
    pid = tl.program_id(axis=0)
    batch_idx, m_idx, n_idx = _pid_to_block(
        pid, M, BLOCK_SIZE_M, BLOCK_SIZE_N, GROUP_SIZE_M
    )

    # Skip blocks that don't need to be computed
    skip_block_below_diag = (LOWER_UPPER == 0) and (n_idx + BLOCK_SIZE_N <= m_idx)
    skip_block_above_diag = (LOWER_UPPER != 0) and (m_idx + BLOCK_SIZE_M <= n_idx)
    if skip_block_below_diag or skip_block_above_diag:
        return

    # Index into one matrix of batch
    A_ptr += batch_idx * a_stride_b
    C_ptr += batch_idx * c_stride_b

    # Create pointer arrays for A and A.T
    offs_m = (m_idx + tl.arange(0, BLOCK_SIZE_M)) % M
    offs_n = (n_idx + tl.arange(0, BLOCK_SIZE_N)) % M
    offs_k = tl.arange(0, BLOCK_SIZE_K)
    a_ptrs = A_ptr + (offs_m[:, None] * a_stride_r + offs_k[None, :] * a_stride_c)
    at_ptrs = A_ptr + (offs_k[:, None] * a_stride_c + offs_n[None, :] * a_stride_r)

    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)

    # Accumulate over blocks of K
    for k in tl.range(0, tl.cdiv(M, BLOCK_SIZE_K)):
        a = tl.load(a_ptrs, mask=offs_k[None, :] < M - k * BLOCK_SIZE_K, other=0.0)
        at = tl.load(at_ptrs, mask=offs_k[:, None] < M - k * BLOCK_SIZE_K, other=0.0)
        accumulator = tl.dot(a, at, accumulator)
        a_ptrs += BLOCK_SIZE_K * a_stride_c
        at_ptrs += BLOCK_SIZE_K * a_stride_c

    # Load block of A to add (corresponds to the current block of C)
    offs_am = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_an = n_idx + tl.arange(0, BLOCK_SIZE_N)
    a_add_ptrs = A_ptr + (offs_am[:, None] * a_stride_r + offs_an[None, :] * a_stride_c)
    a_add_mask = (offs_am[:, None] < M) & (offs_an[None, :] < M)
    a_add = tl.load(a_add_ptrs, mask=a_add_mask, other=0.0).to(tl.float32)

    # Apply alpha and beta
    accumulator *= alpha
    accumulator += a_add * beta

    out_dtype = C_ptr.dtype.element_ty
    output = accumulator.to(out_dtype)

    # Store block of C
    offs_cm = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_cn = n_idx + tl.arange(0, BLOCK_SIZE_N)
    c_ptrs = C_ptr + (offs_cm[:, None] * c_stride_r + offs_cn[None, :] * c_stride_c)
    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < M)
    tl.store(c_ptrs, output, mask=c_mask)

    # Store block of C mirrored across the diagonal
    c_ptrs_t = C_ptr + (offs_cn[:, None] * c_stride_r + offs_cm[None, :] * c_stride_c)
    c_mask_t = (offs_cn[:, None] < M) & (offs_cm[None, :] < M)
    tl.store(c_ptrs_t, output.T, mask=c_mask_t)

def ns_line_2(A: torch.Tensor, alpha: float, beta: float, out: torch.Tensor):
    """
    Launch Triton kernel to compute C = alpha * A @ A.T + beta * A
    """
    assert A.ndim == 2 or A.ndim == 3
    M, K = A.shape[-2:]
    assert M == K, "Input matrix must be square"
    assert out.size(-2) == M
    assert out.size(-1) == M

    batch_size = A.size(0) if A.ndim == 3 else 1
    input_batch_stride = A.stride(0) if A.ndim == 3 else 0
    output_batch_stride = out.stride(0) if out.ndim == 3 else 0

    grid = lambda meta: (
        batch_size * triton.cdiv(M, meta["BLOCK_SIZE_M"]) * triton.cdiv(M, meta["BLOCK_SIZE_N"]),
    )
    ns_line_2_kernel[grid](
        A_ptr=A,
        C_ptr=out,
        M=M,
        a_stride_b=input_batch_stride,
        a_stride_r=A.stride(-2),
        a_stride_c=A.stride(-1),
        c_stride_b=output_batch_stride,
        c_stride_r=out.stride(-2),
        c_stride_c=out.stride(-1),
        alpha=alpha,
        beta=beta,
    )
    return out

@torch.compile(dynamic=False, fullgraph=True) # Must use dynamic=False or else it's much slower
def newton_schulz_triton(G: torch.Tensor):
    a, b, c = (3.4445, -4.7750, 2.0315)
    X = G.bfloat16()
    if G.size(-2) > G.size(-1):
        X = X.mT

    # Ensure spectral norm is at most 1
    X = X / (X.norm(dim=(-2, -1), keepdim=True) + 1e-7)

    # Allocate buffers
    X = X.contiguous()
    A = torch.empty((*X.shape[:-1], X.size(-2)), device=X.device, dtype=X.dtype)
    B = torch.empty_like(A)
    C = torch.empty_like(X)

    ns_line_3 = torch.baddbmm if X.ndim > 2 else torch.addmm

    # Perform the NS iterations
    for _ in range(5):
        ns_line_1(X, out=A)  # A = X @ X.mT
        ns_line_2(A, alpha=c, beta=b, out=B)  # B = b * A + c * A @ A
        ns_line_3(X, B, X, beta=a, out=C)  # C = a * X + B @ X
        X, C = C, X  # Swap references to avoid unnecessary copies

    if G.size(-2) > G.size(-1):
        X = X.mT
    return X

# -----------------------------------------------------------------------------
# Muon optimizer

class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    https://kellerjordan.github.io/posts/muon/

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Warning: This optimizer should not be used for the embedding layer, the final fully connected layer,
    or any {0,1}-D parameters; those should all be optimized by a standard method (e.g., AdamW).
    """
    def __init__(self, params, lr=0.02, weight_decay=0.01, momentum=0.95):
        defaults = dict(lr=lr, weight_decay=weight_decay, momentum=momentum)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)

    @torch.no_grad()
    def step(self):
        # Efficient systems-wise implementation of step developed by @YouJiacheng,
        # @KonstantinWilleke, @alexrgilbert, @adricarda, @tuttyfrutyee, @vdlad,
        # @ryanyang0, and @vagrawal.
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_gather_futures: list[torch.Future] = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            grad = torch.empty_like(params[-1])
            grad_pad = [param.grad for param in params] + [torch.zeros_like(params[-1])] * world_size
            for base_i in range(0, len(params), world_size):
                if base_i + rank < len(params):
                    grad = params[base_i + rank].grad
                # This gives strange dynamo warnings
                reduce_scatter_futures.append(dist.reduce_scatter(grad, grad_pad[base_i:base_i + world_size], op=dist.ReduceOp.AVG, async_op=True).get_future())

        idx = 0
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            params_pad = params + [torch.empty_like(params[-1])] * world_size
            momentum = group["momentum"]
            for base_i in range(0, len(params), world_size):
                reduce_scatter_futures[idx].wait()
                if base_i + rank < len(params):
                    p = params[base_i + rank]
                    grad = p.grad
                    eff_lr = group["lr"] * max(1, p.size(-2) / p.size(-1)) ** 0.5 * getattr(p, "lr_mul", 1.0)
                    eff_weight_decay = group["lr"] * group["weight_decay"] * getattr(p, "wd_mul", 1.0)
                    state = self.state[p]
                    if len(state) == 0:
                        state["momentum_buffer"] = torch.zeros_like(grad)
                    momentum_buffer = state["momentum_buffer"]
                    p.mul_(1 - eff_weight_decay)
                    momentum_buffer.lerp_(grad, 1 - momentum)
                    grad = grad.lerp_(momentum_buffer, momentum)
                    v = newton_schulz_triton(grad)
                    p.add_(other=v, alpha=-eff_lr)
                idx += 1
                all_gather_futures.append(dist.all_gather(params_pad[base_i:base_i + world_size], params_pad[base_i + rank], async_op=True).get_future())
        torch.futures.collect_all(all_gather_futures).wait()

class DistAdam(torch.optim.Optimizer):
    def __init__(self, params, lr: float = 1e-3, betas: tuple[float, float] = (0.9, 0.999), eps: float = 1e-8, weight_decay: float = 0.01):
        defaults = dict(lr=lr, betas=betas, eps=eps, weight_decay=weight_decay)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)
        # DistributedAdam implementation by @vagrawal

    @torch.compile
    @torch.no_grad()
    def step(self):
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_gather_futures: list[torch.Future] = []
        grad_slices = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            for base_i in range(len(params)):
                grad = params[base_i].grad
                rank_size = grad.shape[0] // world_size
                grad_slice = torch.empty_like(grad[:rank_size])
                reduce_scatter_futures.append(dist.reduce_scatter_tensor(grad_slice, grad, op=dist.ReduceOp.AVG, async_op=True).get_future())
                grad_slices.append(grad_slice)

        idx = 0
        for group in self.param_groups:
            beta1, beta2 = group['betas']
            eps = group['eps']
            wd = group['weight_decay']
            params = group['params']
            for base in range(len(params)):
                reduce_scatter_futures[idx].wait()
                p = params[base]
                rank_size = p.shape[0] // world_size
                p_slice = p[rank * rank_size:(rank + 1) * rank_size]
                lr = group['lr'] * getattr(p, "lr_mul", 1.0)
                state = self.state[p]
                g_slice = grad_slices[idx]
                # State init
                if not state:
                    state['step'] = torch.tensor(0, dtype=torch.int64, device=p.device)
                    state['exp_avg'] = torch.zeros_like(p_slice)
                    state['exp_avg_sq'] = torch.zeros_like(p_slice)
                exp_avg = state['exp_avg']
                exp_avg_sq = state['exp_avg_sq']
                state['step'] += 1
                t = state['step']
                # weight decay
                if wd != 0:
                    eff_weight_decay = lr * wd * getattr(p, "wd_mul", 1.0)
                    p_slice.mul_(1 - eff_weight_decay)
                # update running averages
                exp_avg.mul_(beta1).add_(g_slice, alpha=1 - beta1)
                exp_avg_sq.mul_(beta2).addcmul_(g_slice, g_slice, value=1 - beta2)
                # bias corrections
                bias1 = 1 - beta1 ** t
                bias2 = 1 - beta2 ** t
                # compute step
                denom = exp_avg_sq.sqrt().add_(eps)
                step_size = lr * (torch.sqrt(bias2) / bias1)
                update = exp_avg.div(denom).mul_(step_size)
                p_slice.add_(other=update, alpha=-1.0)
                idx += 1
                all_gather_futures.append(dist.all_gather_into_tensor(p, p_slice, async_op=True).get_future())
        torch.futures.collect_all(all_gather_futures).wait()

# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the model

def norm(x: Tensor):
    return F.rms_norm(x, (x.size(-1),))

class CastedLinear(nn.Linear):
    def __init__(self, in_features: int, out_features: int, use_fp8=False, x_s=1.0, w_s=1.0, grad_s=1.0):
        super().__init__(in_features, out_features, bias=False)
        self.use_fp8 = use_fp8
        self.x_s = x_s
        self.w_s = w_s
        self.grad_s = grad_s

    def reset_parameters(self) -> None:
        std = 0.5 * (self.in_features ** -0.5) # 0.5 is a bit better than the default 1/sqrt(3)
        bound = (3 ** 0.5) * std
        with torch.no_grad():
            self.weight.uniform_(-bound, bound)

    def forward(self, x: Tensor):
        if self.use_fp8 and self.training:
            _x = x.flatten(0, -2)
            out: Tensor = torch.ops.nanogpt.mm(_x, self.weight, x_s=self.x_s, w_s=self.w_s, grad_s=self.grad_s)[0]
            return out.reshape(*x.shape[:-1], -1)
        else:
            return F.linear(x, self.weight.type_as(x))

class Rotary(nn.Module):
    def __init__(self, dim: int, max_seq_len: int):
        super().__init__()
        # half-truncate RoPE by @YouJiacheng (w/ base freq tuning)
        angular_freq = (1 / 1024) ** torch.linspace(0, 1, steps=dim//4, dtype=torch.float32)
        angular_freq = torch.cat([angular_freq, angular_freq.new_zeros(dim//4)])
        t = torch.arange(max_seq_len, dtype=torch.float32)
        theta = torch.einsum("i,j -> ij", t, angular_freq)
        self.cos = nn.Buffer(theta.cos(), persistent=False)
        self.sin = nn.Buffer(theta.sin(), persistent=False)

    def forward(self, x_BTHD: Tensor):
        assert self.cos.size(0) >= x_BTHD.size(-3)
        cos, sin = self.cos[None, :x_BTHD.size(-3), None, :], self.sin[None, :x_BTHD.size(-3), None, :]
        x1, x2 = x_BTHD.to(dtype=torch.float32).chunk(2, dim=-1)
        y1 = x1 * cos + x2 * sin
        y2 = x1 * (-sin) + x2 * cos
        return torch.cat((y1, y2), 3).type_as(x_BTHD)

class CausalSelfAttention(nn.Module):
    def __init__(self, dim: int, num_heads: int, max_seq_len: int, head_dim=128):
        super().__init__()
        self.num_heads = num_heads
        self.head_dim = head_dim
        hdim = num_heads * head_dim
        assert hdim == dim, "num_heads * head_dim must equal model_dim"
        std = 0.5 * (dim ** -0.5)
        bound = (3 ** 0.5) * std # improved init scale by @YouJiacheng
        # merged QKV weights: suggested by many, implemented by @fernbear.bsky.social, and further improved by @YouJiacheng
        # https://x.com/hi_tysam/status/1879699187107033311
        self.qkvo_w = nn.Parameter(torch.empty(4, hdim, dim))
        with torch.no_grad():
            self.qkvo_w[:3].uniform_(-bound, bound) # init QKV weights
            self.qkvo_w[3].zero_() # init output weights to zero
        self.rotary = Rotary(head_dim, max_seq_len)
        # scale the attention logits by given constant, instead of the default head_dim**-0.5, by @leloykun
        # inspired by learnable scalars used by @brendanh0gan https://x.com/hi_tysam/status/1879693583898591283
        self.attn_scale = 0.12

        # sparse gated attention to enable context based no-op by @classiclarryd
        self.attn_gate_dim = 12
        self.attn_gate = CastedLinear(self.attn_gate_dim, num_heads)
        self.attn_gate.weight.detach().zero_()

    def forward(self, x: Tensor, ve: Tensor | None, lambdas: Tensor, seqlens: Tensor, bm_size: int):
        B, T = x.size(0), x.size(1) # batch size, sequence length
        assert B == 1, "varlen sequences requires B == 1"
        assert T % 16 == 0

        q, k, v = F.linear(x, self.qkvo_w[:3].flatten(end_dim=1).type_as(x)).view(B, T, 3 * self.num_heads, self.head_dim).chunk(3, dim=-2)
        q, k = norm(q), norm(k) # QK norm @Grad62304977
        q, k = self.rotary(q), self.rotary(k)
        if ve is not None:
            v = lambdas[0] * v + lambdas[1] * ve.view_as(v) # @KoszarskyB & @Grad62304977
        else: # skip mid-layers token value embeddings by @YouJiacheng
            v = lambdas[0] * v

        max_len = args.train_max_seq_len if self.training else (args.val_batch_size // (grad_accum_steps * world_size))

        # use flash_attn over flex_attn @varunneal. flash_attn_varlen suggested by @YouJiacheng
        y = flash_attn_varlen_func(q[0], k[0], v[0], cu_seqlens_q=seqlens, cu_seqlens_k=seqlens, max_seqlen_q=max_len, max_seqlen_k=max_len,
                                   causal=True, softmax_scale=self.attn_scale, window_size=(bm_size, 0))
        y = y.view(B, T, self.num_heads, self.head_dim)
        y = y * torch.sigmoid(self.attn_gate(x[..., :self.attn_gate_dim])).view(B, T, self.num_heads, 1)
        y = y.contiguous().view(B, T, self.num_heads * self.head_dim) # re-assemble all head outputs side by side
        y = F.linear(y, self.qkvo_w[3].type_as(y))
        return y

class MLP(nn.Module):
    def __init__(self, dim: int):
        super().__init__()
        hdim = 4 * dim
        # make both matrices have the same shape because optimizer sorts params by shape
        # 2 matrices x 12 layers = 24 total, which is divisible by 8 GPU world size
        self.c_fc = nn.Parameter(torch.empty(dim, hdim))
        self.c_proj = nn.Parameter(torch.empty(dim, hdim))
        std = 0.5 * (dim ** -0.5)
        bound = (3 ** 0.5) * std # improved init scale by @YouJiacheng
        with torch.no_grad():
            self.c_fc.uniform_(-bound, bound)
            self.c_proj.zero_() # zero init suggested by @Grad62304977

    def forward(self, x: Tensor):
        x = F.linear(x, self.c_fc.T.type_as(x))
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = F.linear(x, self.c_proj.type_as(x))
        return x

class Block(nn.Module):
    def __init__(self, dim: int, num_heads: int, max_seq_len: int, layer_idx: int):
        super().__init__()
        # skip attention of blocks.7 (the 8th layer) by @YouJiacheng
        self.attn = CausalSelfAttention(dim, num_heads, max_seq_len) if layer_idx != 7 else None
        self.mlp = MLP(dim)

    def forward(self, x: Tensor, ve: Tensor | None, x0: Tensor, lambdas: Tensor, sa_lambdas: Tensor,
                seqlens: Tensor, bm_size: int):
        x = lambdas[0] * x + lambdas[1] * x0
        if self.attn is not None:
            x = x + self.attn(norm(x), ve, sa_lambdas, seqlens, bm_size)
        x = x + self.mlp(norm(x))
        return x

# -----------------------------------------------------------------------------
# The main model

def next_multiple_of_n(v: float | int, *, n: int):
    return next(x for x in range(n, int(v) + 1 + n, n) if x >= v)

class GPT(nn.Module):
    def __init__(self, vocab_size: int, num_layers: int, num_heads: int, model_dim: int, max_seq_len: int):
        super().__init__()
        vocab_size = next_multiple_of_n(vocab_size, n=128)
        self.embed = nn.Embedding(vocab_size, model_dim)
        # token value embeddings by @KoszarskyB - inspired by @Grad62304977's value residual implementation following https://arxiv.org/abs/2410.17897
        # value embedding code simplification inspired by @ragulpr https://github.com/KellerJordan/modded-nanogpt/pull/78
        self.value_embeds = nn.ModuleList([nn.Embedding(vocab_size, model_dim) for _ in range(3)])
        self.blocks = nn.ModuleList([Block(model_dim, num_heads, max_seq_len, i) for i in range(num_layers)])
        # there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency.
        # suggested to me by @Grad62304977. this originates from Karpathy's experiments.
        use_fp8 = not os.environ.get("DISABLE_FP8", False)
        self.lm_head = CastedLinear(model_dim, vocab_size, use_fp8=use_fp8, x_s=(model_dim**0.5)/448, w_s=2**-9, grad_s=1/448)
        self.lm_head.weight.detach().zero_() # @Grad62304977
        # Add learnable skip connection weights for decoder layers
        assert num_layers % 2 == 0
        pad = (-num_layers * 5) % dist.get_world_size()
        self.scalars = nn.Parameter(torch.cat([
            torch.ones(num_layers), # skip_weights
            *[torch.tensor([1.0, 0.0]) for _ in range(num_layers)], # block lambdas
            *[torch.tensor([0.5, 0.5]) for _ in range(num_layers)], # SA lambdas
            torch.ones(pad),
        ]))
        # set learning rates
        for param in self.embed.parameters():
            param.lr_mul = 75.
        for param in self.value_embeds.parameters():
            param.lr_mul = 75.
        self.lm_head.weight.lr_mul = 1.0
        self.scalars.lr_mul = 5.0


    def forward(self, input_seq: Tensor, target_seq: Tensor, seqlens: Tensor, ws: int):
        assert input_seq.ndim == 1

        ve = [value_embed(input_seq) for value_embed in self.value_embeds]
        # 012 ... 012 structure on token value embeddings by @YouJiacheng, improved on @leloykun's U-net structure
        ve = [ve[0], ve[1], ve[2]] + [None] * (len(self.blocks) - 6) + [ve[0], ve[1], ve[2]]
        assert len(ve) == len(self.blocks)

        long_bm, short_bm = ws * args.block_size, (ws // 2) * args.block_size
        bm_sizes = [long_bm, short_bm, short_bm, short_bm, long_bm, short_bm, short_bm, long_bm, short_bm, short_bm, short_bm, long_bm]
        assert len(bm_sizes) == len(self.blocks)

        x = x0 = norm(self.embed(input_seq)[None]) # use of norm here by @Grad62304977

        # U-net design by @brendanh0gan
        skip_connections = []
        skip_weights = self.scalars[:(len(self.blocks) // 2)]
        lambdas = self.scalars[1 * len(self.blocks): 3 * len(self.blocks)].view(-1, 2)
        sa_lambdas = self.scalars[3 * len(self.blocks): 5 * len(self.blocks)].view(-1, 2)

        n = len(self.blocks) // 2

        for i in range(len(self.blocks)):
            if i >= n:
                x = x + skip_weights[i - n] * skip_connections.pop()
            x = self.blocks[i](x, ve[i], x0, lambdas[i], sa_lambdas[i], seqlens, bm_sizes[i])
            if i < n:
                skip_connections.append(x)

        x = norm(x)
        logits = self.lm_head(x).float()
        # @Grad62304977 added tanh softcapping following Gemma 2 paper, @KoszarskyB reduced it from 30 to 15, @YouJiacheng shifted it by +15 (2*sigmoid(2*x)=tanh(x)+1)
        logits = 30 * torch.sigmoid(logits / 7.5)
        loss = F.cross_entropy(logits.view(-1, logits.size(-1)), target_seq, reduction="sum" if self.training else "mean")
        return loss

# -----------------------------------------------------------------------------
# Distributed data loader

def _load_data_shard(file: Path):
    header = torch.from_file(str(file), False, 256, dtype=torch.int32) # header is 256 int32
    assert header[0] == 20240520, "magic number mismatch in the data .bin file"
    assert header[1] == 1, "unsupported version"
    num_tokens = int(header[2]) # number of tokens (claimed)
    with file.open("rb", buffering=0) as f:
        tokens = torch.empty(num_tokens, dtype=torch.uint16, pin_memory=True) # avoid pin_memory copy by @YouJiacheng
        f.seek(256 * 4)
        nbytes = f.readinto(tokens.numpy()) # avoid bytes->array copy by @YouJiacheng
        assert nbytes == 2 * num_tokens, "number of tokens read does not match header"
    return tokens

BOS_ID = 50256

class BOSFinder:
    # Helper for getting sequences that start at the beginning of documents by @varunneal based on work by @classiclarryd
    def __init__(self, tokens: Tensor, world_size: int = 1):
        # Precompute BOS positions once per shard
        self.size = tokens.numel()
        self.bos_idx = (tokens == BOS_ID).nonzero(as_tuple=True)[0].to(torch.int64).cpu().numpy()
        self.i = 0
        self.world_size = world_size

    def next_batch(self, num_tokens_local: int, max_seq_len: int):
        n = len(self.bos_idx)
        starts = [[] for _ in range(self.world_size)]
        ends = [[] for _ in range(self.world_size)]

        idx = self.i
        for r in range(self.world_size):
            cur_len = 0
            while cur_len <= num_tokens_local:
                if idx >= n:
                    raise StopIteration(f"Insufficient BOS ahead of position {cur}; hit tail of shard.")
                cur = self.bos_idx[idx]
                starts[r].append(cur)
                end = min(self.bos_idx[idx + 1] if idx + 1 < n else self.size,
                          cur + max_seq_len,
                          cur + num_tokens_local - cur_len + 1)
                ends[r].append(end)
                cur_len += end - cur
                idx += 1

            assert cur_len == num_tokens_local + 1
        self.i = idx

        return starts, ends

def distributed_data_generator(filename_pattern: str, num_tokens: int, max_seq_len: int, grad_accum_steps: int = 1, align_to_bos: bool = True):
    # align_to_bos: each sequence begins with Beginning of Sequence token, sequences truncated to max_seq_len
    rank = dist.get_rank() if dist.is_initialized() else 0
    world_size = dist.get_world_size() if dist.is_initialized() else 1
    assert num_tokens % (world_size * grad_accum_steps) == 0, "Batch size must be divisible by world size"
    num_tokens = num_tokens // grad_accum_steps

    files = [Path(file) for file in sorted(glob.glob(filename_pattern))]
    if not files:
        raise FileNotFoundError(f"No files found for pattern: {filename_pattern}")

    file_iter = iter(files)  # Use itertools.cycle(files) for multi-epoch training
    tokens = _load_data_shard(next(file_iter))
    finder = BOSFinder(tokens, world_size=world_size) if align_to_bos else None
    pos = 0  # for unaligned case

    while True:
        num_tokens_local = num_tokens // world_size
        max_num_docs = next_multiple_of_n(num_tokens_local // 300, n=128)  # median doc length is ~400

        if align_to_bos:
            try:
                seq_starts, seq_ends = finder.next_batch(num_tokens_local, max_seq_len)
                start_idxs, end_idxs = torch.tensor(seq_starts[rank]), torch.tensor(seq_ends[rank])
            except StopIteration:
                # This shard is exhausted, load the next one in the next loop iteration.
                tokens = _load_data_shard(next(file_iter))
                finder = BOSFinder(tokens, world_size=world_size)
                continue

            buf = torch.cat([tokens[i:j] for i, j in zip(start_idxs, end_idxs)])
            _inputs = buf[:-1]
            _targets = buf[1:]
            end_idxs[-1] -= 1  # last document was too long to account for _targets offset
            cum_lengths = (end_idxs - start_idxs).cumsum(0)

        else:
            if pos + num_tokens + 1 >= len(tokens):  # should not occur for val data
                tokens, pos = _load_data_shard(next(file_iter)), 0

            pos_local = pos + rank * num_tokens_local
            buf = tokens[pos_local: pos_local + num_tokens_local + 1]
            _inputs = buf[:-1].view(num_tokens_local, )
            _targets = buf[1:].view(num_tokens_local, )

            cum_lengths = torch.nonzero(_inputs == BOS_ID)[:, 0]
            pos += num_tokens


        _cum_lengths = torch.full((max_num_docs,), num_tokens_local)
        _cum_lengths[0] = 0
        _cum_lengths[1:len(cum_lengths) + 1] = cum_lengths

        new_params = yield (
            _inputs.to(device="cuda", dtype=torch.int32, non_blocking=True),
            _targets.to(device="cuda", dtype=torch.int64, non_blocking=True),
            _cum_lengths.to(device="cuda", dtype=torch.int32, non_blocking=True)
        )

        if new_params is not None:
            # makes it possible for generator to receive new (num_tokens, max_seq_len, grad_accum_steps) via .send()
            new_num_tokens, new_max_seq_len, new_grad_accum_steps = new_params
            assert new_num_tokens % (world_size * grad_accum_steps) == 0, "Num tokens must be divisible by world size"
            num_tokens = new_num_tokens
            max_seq_len = new_max_seq_len
            grad_accum_steps = new_grad_accum_steps 


# -----------------------------------------------------------------------------
# int main

@dataclass
class Hyperparameters:
    # data
    train_files: str = "data/fineweb10B/fineweb_train_*.bin" # input .bin to train on
    val_files: str = "data/fineweb10B/fineweb_val_*.bin" # input .bin to eval validation loss on
    val_tokens: int = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    train_batch_size: int = 2048 * 24 * 8
    train_max_seq_len: int = 128 * 16
    val_batch_size: int = 4 * 64 * 1024 * 8
    # optimization
    num_iterations: int = 1670 # number of iterations to run
    cooldown_frac: int = 0.45 # fraction of training spent cooling down the learning rate
    # evaluation and logging
    run_id: str = str(uuid.uuid4())
    val_loss_every: int = 125 # every how many steps to evaluate val loss? 0 for only at the end
    save_checkpoint: bool = False
    # attention masking
    block_size: int = 128
    ws_schedule: tuple = (3, 7, 11)

args = Hyperparameters()

data_path = os.environ.get("DATA_PATH", ".")
args.train_files = os.path.join(data_path, args.train_files)
args.val_files = os.path.join(data_path, args.val_files)

# torchrun sets these env variables
rank = int(os.environ["RANK"])
world_size = int(os.environ["WORLD_SIZE"])
assert 8 % world_size == 0, "world_size must be a divisor of 8"
grad_accum_steps = 8 // world_size
assert torch.cuda.is_available()
device = torch.device("cuda", int(os.environ["LOCAL_RANK"]))
torch.cuda.set_device(device)
dist.init_process_group(backend="nccl", device_id=device)
dist.barrier()
master_process = (rank == 0) # this process will do logging, checkpointing etc.

# begin logging
logfile = None
if master_process:
    run_id = args.run_id
    os.makedirs("logs", exist_ok=True)
    logfile = f"logs/{run_id}.txt"
    print(logfile)
def print0(s, console=False):
    if master_process:
        with open(logfile, "a") as f:
            if console:
                print(s)
            print(s, file=f)

# begin by printing this file (the Python code)
print0(code)
print0("="*100)
# log information about the hardware/software environment this is running on
print0(f"Running Python {sys.version}")
print0(f"Running PyTorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}")
print0(f"Running Triton version {triton.__version__}")

def nvidia_smi():
    import subprocess  # avoid top level import
    return subprocess.run(["nvidia-smi"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).stdout
print0(nvidia_smi())
print0("="*100)

model: nn.Module = GPT(
    vocab_size=50257,
    num_layers=12,
    num_heads=6,
    model_dim=768,
    max_seq_len=max(args.train_batch_size, args.val_batch_size) // (grad_accum_steps * world_size)
).cuda()
for m in model.modules():
    if isinstance(m, nn.Embedding):
        m.bfloat16()
for param in model.parameters():
    dist.broadcast(param.detach(), 0)

# collect the parameters to optimize
hidden_matrix_params = [p for n, p in model.blocks.named_parameters() if p.ndim >= 2 and "embed" not in n]
embed_params = [p for n, p in model.named_parameters() if "embed" in n]
scalar_params = [p for p in model.parameters() if p.ndim < 2]
head_params = [model.lm_head.weight]

# init the optimizer(s)
# small adam epsilon by @YouJiacheng. this is an alternate method of fixing the world_size dependence
# discovered by @fernbear.bsky.social https://x.com/hi_tysam/status/1879692937589875094
optimizer1 = DistAdam(scalar_params + head_params + embed_params, lr=0.008, betas=(0.8, 0.95), eps=1e-10, weight_decay=0.0)
optimizer2 = Muon(hidden_matrix_params, lr=0.05, momentum=0.95, weight_decay=0.0)
optimizers = [optimizer1, optimizer2]
for opt in optimizers:
    for group in opt.param_groups:
        group["initial_lr"] = group["lr"]

# learning rate schedule: stable then decay
def get_lr(step: int):
    x = step / args.num_iterations
    assert 0 <= x < 1
    lr = 1.0
    if x >= 1 - args.cooldown_frac:
        w = (1 - x) / args.cooldown_frac
        lr = w * 1.0 + (1 - w) * 0.1
    return lr

def get_ws(step: int):
    x = step / (1 + args.num_iterations)
    assert 0 <= x < 1
    ws_idx = int(len(args.ws_schedule) * x)
    return args.ws_schedule[ws_idx]

model: nn.Module = torch.compile(model, dynamic=False, fullgraph=True)

########################################
#            Warmup kernels            #
########################################

# Warmup the training kernels, then re-initialize the state so we aren't cheating
warmup_steps = 30
initial_state = dict(model=copy.deepcopy(model.state_dict()),
                     optimizers=[copy.deepcopy(opt.state_dict()) for opt in optimizers]) # save the initial state
train_loader = distributed_data_generator(args.train_files, args.train_batch_size, args.train_max_seq_len, grad_accum_steps=grad_accum_steps)
for step in range(warmup_steps):
    inputs, targets, cum_seqlens = next(train_loader)
    ws = args.ws_schedule[step % len(args.ws_schedule)]  # each window size is a new graph, need to warm up each
    model(inputs, targets, cum_seqlens, ws).backward()
    for opt in optimizers:
        opt.step()
    model.zero_grad(set_to_none=True)
model.load_state_dict(initial_state["model"])
for opt, opt_state in zip(optimizers, initial_state["optimizers"]):
    opt.load_state_dict(opt_state)
del train_loader, initial_state

########################################
#        Training and validation       #
########################################

train_loader = distributed_data_generator(args.train_files, args.train_batch_size, args.train_max_seq_len, grad_accum_steps=grad_accum_steps)
training_time_ms = 0
# start the clock
torch.cuda.synchronize()
t0 = time.perf_counter()
# begin training
train_steps = args.num_iterations
for step in range(train_steps + 1):
    last_step = (step == train_steps)
    ws = get_ws(step)

    # --------------- VALIDATION SECTION -----------------
    if last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0):
        # stop the clock
        torch.cuda.synchronize()
        training_time_ms += 1000 * (time.perf_counter() - t0)
        model.eval()
        assert args.val_tokens % args.val_batch_size == 0
        val_steps = grad_accum_steps * args.val_tokens // args.val_batch_size
        val_loader = distributed_data_generator(args.val_files, args.val_batch_size, -1, grad_accum_steps=grad_accum_steps, align_to_bos=False)
        val_loss = 0
        with torch.no_grad():
            for _ in range(val_steps):
                inputs, targets, cum_seqlens = next(val_loader)
                val_loss += model(inputs, targets, cum_seqlens, ws)
        val_loss /= val_steps
        del val_loader
        dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
        print0(f"step:{step}/{train_steps} val_loss:{val_loss:.4f} train_time:{training_time_ms:.0f}ms step_avg:{training_time_ms/max(step, 1):.2f}ms", console=True)
        model.train()
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.perf_counter()

    if last_step:
        if master_process and args.save_checkpoint:
            log = dict(step=step, code=code, model=model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
            os.makedirs(f"logs/{run_id}", exist_ok=True)
            torch.save(log, f"logs/{run_id}/state_step{step:06d}.pt")
        # the last step only has the validation loop, so break to avoid training
        break

    # --------------- TRAINING SECTION -----------------
    for _ in range(grad_accum_steps):
        inputs, targets, cum_seqlens = next(train_loader)
        model(inputs, targets, cum_seqlens, ws).backward()
    # set optimization hyperparameters
    for opt in optimizers:
        for group in opt.param_groups:
            group["lr"] = group["initial_lr"] * get_lr(step)
    for group in optimizer2.param_groups:
        frac = min(step / 300, 1) # momentum warmup for muon
        group["momentum"] = (1 - frac) * 0.85 + frac * 0.95
    # step the optimizers
    for opt in optimizers:
        opt.step()
    # null the gradients
    model.zero_grad(set_to_none=True)
    # logging
    approx_training_time_ms = training_time_ms + 1000 * (time.perf_counter() - t0)
    print0(f"step:{step+1}/{train_steps} train_time:{approx_training_time_ms:.0f}ms step_avg:{approx_training_time_ms/(step + 1):.2f}ms", console=True)

print0(f"peak memory allocated: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB "
       f"reserved: {torch.cuda.max_memory_reserved() // 1024 // 1024} MiB", console=True)
dist.destroy_process_group()

====================================================================================================
Running Python 3.10.12 (main, May 27 2025, 17:12:29) [GCC 11.4.0]
Running PyTorch 2.9.0.dev20250718+cu126 compiled for CUDA 12.6
Running Triton version 3.4.0
Fri Sep  5 16:22:32 2025       
+-----------------------------------------------------------------------------------------+
| NVIDIA-SMI 550.144.03             Driver Version: 550.144.03     CUDA Version: 12.4     |
|-----------------------------------------+------------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |
|                                         |                        |               MIG M. |
|=========================================+========================+======================|
|   0  NVIDIA H100 80GB HBM3          On  |   00000000:8D:00.0 Off |                    0 |
| N/A   44C    P0            129W /  700W |    5826MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  |   00000000:91:00.0 Off |                    0 |
| N/A   35C    P0            119W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  |   00000000:95:00.0 Off |                    0 |
| N/A   44C    P0            128W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  |   00000000:99:00.0 Off |                    0 |
| N/A   34C    P0            121W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  |   00000000:AB:00.0 Off |                    0 |
| N/A   43C    P0            125W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  |   00000000:AF:00.0 Off |                    0 |
| N/A   35C    P0            118W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  |   00000000:B3:00.0 Off |                    0 |
| N/A   43C    P0            130W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  |   00000000:B7:00.0 Off |                    0 |
| N/A   34C    P0            124W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
                                                                                         
+-----------------------------------------------------------------------------------------+
| Processes:                                                                              |
|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |
|        ID   ID                                                               Usage      |
|=========================================================================================|
|    0   N/A  N/A     87344      C   /usr/bin/python3                             1506MiB |
|    0   N/A  N/A     87345      C   /usr/bin/python3                              610MiB |
|    0   N/A  N/A     87346      C   /usr/bin/python3                              610MiB |
|    0   N/A  N/A     87347      C   /usr/bin/python3                              610MiB |
|    0   N/A  N/A     87348      C   /usr/bin/python3                              610MiB |
|    0   N/A  N/A     87349      C   /usr/bin/python3                              610MiB |
|    0   N/A  N/A     87350      C   /usr/bin/python3                              610MiB |
|    0   N/A  N/A     87351      C   /usr/bin/python3                              610MiB |
|    1   N/A  N/A     87345      C   /usr/bin/python3                             1506MiB |
|    2   N/A  N/A     87346      C   /usr/bin/python3                             1506MiB |
|    3   N/A  N/A     87347      C   /usr/bin/python3                             1506MiB |
|    4   N/A  N/A     87348      C   /usr/bin/python3                             1506MiB |
|    5   N/A  N/A     87349      C   /usr/bin/python3                             1506MiB |
|    6   N/A  N/A     87350      C   /usr/bin/python3                             1506MiB |
|    7   N/A  N/A     87351      C   /usr/bin/python3                             1506MiB |
+-----------------------------------------------------------------------------------------+

====================================================================================================
step:0/1670 val_loss:10.8258 train_time:0ms step_avg:0.03ms
step:1/1670 train_time:354ms step_avg:354.08ms
step:2/1670 train_time:375ms step_avg:187.34ms
step:3/1670 train_time:448ms step_avg:149.22ms
step:4/1670 train_time:541ms step_avg:135.35ms
step:5/1670 train_time:636ms step_avg:127.26ms
step:6/1670 train_time:731ms step_avg:121.81ms
step:7/1670 train_time:826ms step_avg:117.95ms
step:8/1670 train_time:921ms step_avg:115.12ms
step:9/1670 train_time:1016ms step_avg:112.91ms
step:10/1670 train_time:1112ms step_avg:111.19ms
step:11/1670 train_time:1207ms step_avg:109.77ms
step:12/1670 train_time:1305ms step_avg:108.78ms
step:13/1670 train_time:1404ms step_avg:107.98ms
step:14/1670 train_time:1499ms step_avg:107.10ms
step:15/1670 train_time:1595ms step_avg:106.36ms
step:16/1670 train_time:1691ms step_avg:105.69ms
step:17/1670 train_time:1787ms step_avg:105.14ms
step:18/1670 train_time:1883ms step_avg:104.61ms
step:19/1670 train_time:1979ms step_avg:104.15ms
step:20/1670 train_time:2074ms step_avg:103.69ms
step:21/1670 train_time:2169ms step_avg:103.30ms
step:22/1670 train_time:2266ms step_avg:102.99ms
step:23/1670 train_time:2363ms step_avg:102.74ms
step:24/1670 train_time:2459ms step_avg:102.44ms
step:25/1670 train_time:2555ms step_avg:102.19ms
step:26/1670 train_time:2651ms step_avg:101.96ms
step:27/1670 train_time:2747ms step_avg:101.74ms
step:28/1670 train_time:2843ms step_avg:101.55ms
step:29/1670 train_time:2939ms step_avg:101.33ms
step:30/1670 train_time:3034ms step_avg:101.12ms
step:31/1670 train_time:3130ms step_avg:100.97ms
step:32/1670 train_time:3226ms step_avg:100.81ms
step:33/1670 train_time:3322ms step_avg:100.67ms
step:34/1670 train_time:3418ms step_avg:100.54ms
step:35/1670 train_time:3514ms step_avg:100.41ms
step:36/1670 train_time:3611ms step_avg:100.30ms
step:37/1670 train_time:3707ms step_avg:100.20ms
step:38/1670 train_time:3803ms step_avg:100.09ms
step:39/1670 train_time:3899ms step_avg:99.98ms
step:40/1670 train_time:3995ms step_avg:99.86ms
step:41/1670 train_time:4090ms step_avg:99.75ms
step:42/1670 train_time:4185ms step_avg:99.65ms
step:43/1670 train_time:4282ms step_avg:99.58ms
step:44/1670 train_time:4378ms step_avg:99.50ms
step:45/1670 train_time:4474ms step_avg:99.42ms
step:46/1670 train_time:4572ms step_avg:99.39ms
step:47/1670 train_time:4668ms step_avg:99.32ms
step:48/1670 train_time:4765ms step_avg:99.28ms
step:49/1670 train_time:4861ms step_avg:99.21ms
step:50/1670 train_time:4957ms step_avg:99.14ms
step:51/1670 train_time:5053ms step_avg:99.08ms
step:52/1670 train_time:5149ms step_avg:99.02ms
step:53/1670 train_time:5245ms step_avg:98.97ms
step:54/1670 train_time:5341ms step_avg:98.91ms
step:55/1670 train_time:5437ms step_avg:98.86ms
step:56/1670 train_time:5534ms step_avg:98.82ms
step:57/1670 train_time:5630ms step_avg:98.77ms
step:58/1670 train_time:5726ms step_avg:98.73ms
step:59/1670 train_time:5823ms step_avg:98.69ms
step:60/1670 train_time:5918ms step_avg:98.64ms
step:61/1670 train_time:6014ms step_avg:98.60ms
step:62/1670 train_time:6110ms step_avg:98.55ms
step:63/1670 train_time:6207ms step_avg:98.52ms
step:64/1670 train_time:6304ms step_avg:98.50ms
step:65/1670 train_time:6399ms step_avg:98.45ms
step:66/1670 train_time:6495ms step_avg:98.41ms
step:67/1670 train_time:6592ms step_avg:98.38ms
step:68/1670 train_time:6687ms step_avg:98.34ms
step:69/1670 train_time:6784ms step_avg:98.32ms
step:70/1670 train_time:6880ms step_avg:98.29ms
step:71/1670 train_time:6976ms step_avg:98.25ms
step:72/1670 train_time:7072ms step_avg:98.22ms
step:73/1670 train_time:7167ms step_avg:98.18ms
step:74/1670 train_time:7264ms step_avg:98.16ms
step:75/1670 train_time:7360ms step_avg:98.14ms
step:76/1670 train_time:7456ms step_avg:98.11ms
step:77/1670 train_time:7552ms step_avg:98.08ms
step:78/1670 train_time:7648ms step_avg:98.05ms
step:79/1670 train_time:7745ms step_avg:98.03ms
step:80/1670 train_time:7840ms step_avg:98.00ms
step:81/1670 train_time:7935ms step_avg:97.97ms
step:82/1670 train_time:8032ms step_avg:97.95ms
step:83/1670 train_time:8128ms step_avg:97.93ms
step:84/1670 train_time:8224ms step_avg:97.91ms
step:85/1670 train_time:8321ms step_avg:97.90ms
step:86/1670 train_time:8416ms step_avg:97.87ms
step:87/1670 train_time:8513ms step_avg:97.85ms
step:88/1670 train_time:8610ms step_avg:97.84ms
step:89/1670 train_time:8705ms step_avg:97.81ms
step:90/1670 train_time:8801ms step_avg:97.79ms
step:91/1670 train_time:8897ms step_avg:97.77ms
step:92/1670 train_time:8993ms step_avg:97.75ms
step:93/1670 train_time:9088ms step_avg:97.73ms
step:94/1670 train_time:9184ms step_avg:97.71ms
step:95/1670 train_time:9280ms step_avg:97.69ms
step:96/1670 train_time:9376ms step_avg:97.66ms
step:97/1670 train_time:9472ms step_avg:97.65ms
step:98/1670 train_time:9568ms step_avg:97.63ms
step:99/1670 train_time:9664ms step_avg:97.62ms
step:100/1670 train_time:9760ms step_avg:97.60ms
step:101/1670 train_time:9857ms step_avg:97.59ms
step:102/1670 train_time:9952ms step_avg:97.57ms
step:103/1670 train_time:10048ms step_avg:97.55ms
step:104/1670 train_time:10143ms step_avg:97.53ms
step:105/1670 train_time:10238ms step_avg:97.51ms
step:106/1670 train_time:10334ms step_avg:97.49ms
step:107/1670 train_time:10431ms step_avg:97.49ms
step:108/1670 train_time:10527ms step_avg:97.47ms
step:109/1670 train_time:10624ms step_avg:97.47ms
step:110/1670 train_time:10719ms step_avg:97.45ms
step:111/1670 train_time:10815ms step_avg:97.43ms
step:112/1670 train_time:10912ms step_avg:97.42ms
step:113/1670 train_time:11008ms step_avg:97.41ms
step:114/1670 train_time:11105ms step_avg:97.41ms
step:115/1670 train_time:11201ms step_avg:97.40ms
step:116/1670 train_time:11296ms step_avg:97.38ms
step:117/1670 train_time:11393ms step_avg:97.37ms
step:118/1670 train_time:11489ms step_avg:97.37ms
step:119/1670 train_time:11585ms step_avg:97.35ms
step:120/1670 train_time:11681ms step_avg:97.34ms
step:121/1670 train_time:11776ms step_avg:97.32ms
step:122/1670 train_time:11872ms step_avg:97.31ms
step:123/1670 train_time:11968ms step_avg:97.30ms
step:124/1670 train_time:12064ms step_avg:97.29ms
step:125/1670 train_time:12160ms step_avg:97.28ms
step:125/1670 val_loss:4.3131 train_time:12254ms step_avg:98.03ms
step:126/1670 train_time:12277ms step_avg:97.44ms
step:127/1670 train_time:12363ms step_avg:97.34ms
step:128/1670 train_time:12465ms step_avg:97.38ms
step:129/1670 train_time:12561ms step_avg:97.37ms
step:130/1670 train_time:12656ms step_avg:97.36ms
step:131/1670 train_time:12751ms step_avg:97.33ms
step:132/1670 train_time:12845ms step_avg:97.31ms
step:133/1670 train_time:12940ms step_avg:97.29ms
step:134/1670 train_time:13035ms step_avg:97.28ms
step:135/1670 train_time:13130ms step_avg:97.26ms
step:136/1670 train_time:13225ms step_avg:97.24ms
step:137/1670 train_time:13321ms step_avg:97.24ms
step:138/1670 train_time:13419ms step_avg:97.24ms
step:139/1670 train_time:13516ms step_avg:97.24ms
step:140/1670 train_time:13614ms step_avg:97.24ms
step:141/1670 train_time:13710ms step_avg:97.23ms
step:142/1670 train_time:13804ms step_avg:97.21ms
step:143/1670 train_time:13899ms step_avg:97.20ms
step:144/1670 train_time:13994ms step_avg:97.18ms
step:145/1670 train_time:14088ms step_avg:97.16ms
step:146/1670 train_time:14183ms step_avg:97.15ms
step:147/1670 train_time:14280ms step_avg:97.14ms
step:148/1670 train_time:14375ms step_avg:97.13ms
step:149/1670 train_time:14472ms step_avg:97.13ms
step:150/1670 train_time:14569ms step_avg:97.13ms
step:151/1670 train_time:14666ms step_avg:97.12ms
step:152/1670 train_time:14761ms step_avg:97.11ms
step:153/1670 train_time:14856ms step_avg:97.10ms
step:154/1670 train_time:14952ms step_avg:97.09ms
step:155/1670 train_time:15047ms step_avg:97.08ms
step:156/1670 train_time:15142ms step_avg:97.07ms
step:157/1670 train_time:15237ms step_avg:97.05ms
step:158/1670 train_time:15333ms step_avg:97.05ms
step:159/1670 train_time:15429ms step_avg:97.04ms
step:160/1670 train_time:15525ms step_avg:97.03ms
step:161/1670 train_time:15621ms step_avg:97.02ms
step:162/1670 train_time:15716ms step_avg:97.01ms
step:163/1670 train_time:15811ms step_avg:97.00ms
step:164/1670 train_time:15907ms step_avg:96.99ms
step:165/1670 train_time:16002ms step_avg:96.98ms
step:166/1670 train_time:16097ms step_avg:96.97ms
step:167/1670 train_time:16193ms step_avg:96.96ms
step:168/1670 train_time:16288ms step_avg:96.95ms
step:169/1670 train_time:16384ms step_avg:96.95ms
step:170/1670 train_time:16480ms step_avg:96.94ms
step:171/1670 train_time:16576ms step_avg:96.93ms
step:172/1670 train_time:16672ms step_avg:96.93ms
step:173/1670 train_time:16768ms step_avg:96.93ms
step:174/1670 train_time:16864ms step_avg:96.92ms
step:175/1670 train_time:16959ms step_avg:96.91ms
step:176/1670 train_time:17054ms step_avg:96.90ms
step:177/1670 train_time:17149ms step_avg:96.89ms
step:178/1670 train_time:17244ms step_avg:96.88ms
step:179/1670 train_time:17340ms step_avg:96.87ms
step:180/1670 train_time:17435ms step_avg:96.86ms
step:181/1670 train_time:17531ms step_avg:96.86ms
step:182/1670 train_time:17628ms step_avg:96.86ms
step:183/1670 train_time:17724ms step_avg:96.85ms
step:184/1670 train_time:17819ms step_avg:96.84ms
step:185/1670 train_time:17914ms step_avg:96.83ms
step:186/1670 train_time:18010ms step_avg:96.83ms
step:187/1670 train_time:18106ms step_avg:96.82ms
step:188/1670 train_time:18201ms step_avg:96.82ms
step:189/1670 train_time:18298ms step_avg:96.81ms
step:190/1670 train_time:18393ms step_avg:96.81ms
step:191/1670 train_time:18488ms step_avg:96.80ms
step:192/1670 train_time:18584ms step_avg:96.79ms
step:193/1670 train_time:18679ms step_avg:96.78ms
step:194/1670 train_time:18776ms step_avg:96.78ms
step:195/1670 train_time:18872ms step_avg:96.78ms
step:196/1670 train_time:18968ms step_avg:96.78ms
step:197/1670 train_time:19063ms step_avg:96.76ms
step:198/1670 train_time:19158ms step_avg:96.76ms
step:199/1670 train_time:19253ms step_avg:96.75ms
step:200/1670 train_time:19348ms step_avg:96.74ms
step:201/1670 train_time:19444ms step_avg:96.73ms
step:202/1670 train_time:19539ms step_avg:96.73ms
step:203/1670 train_time:19635ms step_avg:96.72ms
step:204/1670 train_time:19731ms step_avg:96.72ms
step:205/1670 train_time:19827ms step_avg:96.72ms
step:206/1670 train_time:19922ms step_avg:96.71ms
step:207/1670 train_time:20018ms step_avg:96.71ms
step:208/1670 train_time:20114ms step_avg:96.70ms
step:209/1670 train_time:20209ms step_avg:96.70ms
step:210/1670 train_time:20305ms step_avg:96.69ms
step:211/1670 train_time:20401ms step_avg:96.69ms
step:212/1670 train_time:20496ms step_avg:96.68ms
step:213/1670 train_time:20771ms step_avg:97.51ms
step:214/1670 train_time:20917ms step_avg:97.74ms
step:215/1670 train_time:21011ms step_avg:97.73ms
step:216/1670 train_time:21106ms step_avg:97.71ms
step:217/1670 train_time:21201ms step_avg:97.70ms
step:218/1670 train_time:21296ms step_avg:97.69ms
step:219/1670 train_time:21390ms step_avg:97.67ms
step:220/1670 train_time:21485ms step_avg:97.66ms
step:221/1670 train_time:21580ms step_avg:97.65ms
step:222/1670 train_time:21675ms step_avg:97.63ms
step:223/1670 train_time:21776ms step_avg:97.65ms
step:224/1670 train_time:21875ms step_avg:97.66ms
step:225/1670 train_time:21972ms step_avg:97.65ms
step:226/1670 train_time:22068ms step_avg:97.65ms
step:227/1670 train_time:22163ms step_avg:97.64ms
step:228/1670 train_time:22259ms step_avg:97.63ms
step:229/1670 train_time:22354ms step_avg:97.61ms
step:230/1670 train_time:22448ms step_avg:97.60ms
step:231/1670 train_time:22544ms step_avg:97.59ms
step:232/1670 train_time:22638ms step_avg:97.58ms
step:233/1670 train_time:22734ms step_avg:97.57ms
step:234/1670 train_time:22831ms step_avg:97.57ms
step:235/1670 train_time:22927ms step_avg:97.56ms
step:236/1670 train_time:23023ms step_avg:97.56ms
step:237/1670 train_time:23119ms step_avg:97.55ms
step:238/1670 train_time:23214ms step_avg:97.54ms
step:239/1670 train_time:23309ms step_avg:97.53ms
step:240/1670 train_time:23405ms step_avg:97.52ms
step:241/1670 train_time:23500ms step_avg:97.51ms
step:242/1670 train_time:23595ms step_avg:97.50ms
step:243/1670 train_time:23690ms step_avg:97.49ms
step:244/1670 train_time:23786ms step_avg:97.48ms
step:245/1670 train_time:23882ms step_avg:97.48ms
step:246/1670 train_time:23978ms step_avg:97.47ms
step:247/1670 train_time:24075ms step_avg:97.47ms
step:248/1670 train_time:24171ms step_avg:97.46ms
step:249/1670 train_time:24266ms step_avg:97.46ms
step:250/1670 train_time:24361ms step_avg:97.44ms
step:250/1670 val_loss:3.9721 train_time:24455ms step_avg:97.82ms
step:251/1670 train_time:24478ms step_avg:97.52ms
step:252/1670 train_time:24558ms step_avg:97.45ms
step:253/1670 train_time:24657ms step_avg:97.46ms
step:254/1670 train_time:24753ms step_avg:97.45ms
step:255/1670 train_time:24849ms step_avg:97.45ms
step:256/1670 train_time:24943ms step_avg:97.43ms
step:257/1670 train_time:25037ms step_avg:97.42ms
step:258/1670 train_time:25132ms step_avg:97.41ms
step:259/1670 train_time:25226ms step_avg:97.40ms
step:260/1670 train_time:25322ms step_avg:97.39ms
step:261/1670 train_time:25417ms step_avg:97.38ms
step:262/1670 train_time:25513ms step_avg:97.38ms
step:263/1670 train_time:25614ms step_avg:97.39ms
step:264/1670 train_time:25711ms step_avg:97.39ms
step:265/1670 train_time:25808ms step_avg:97.39ms
step:266/1670 train_time:25903ms step_avg:97.38ms
step:267/1670 train_time:25998ms step_avg:97.37ms
step:268/1670 train_time:26093ms step_avg:97.36ms
step:269/1670 train_time:26188ms step_avg:97.35ms
step:270/1670 train_time:26283ms step_avg:97.34ms
step:271/1670 train_time:26378ms step_avg:97.34ms
step:272/1670 train_time:26474ms step_avg:97.33ms
step:273/1670 train_time:26570ms step_avg:97.33ms
step:274/1670 train_time:26667ms step_avg:97.32ms
step:275/1670 train_time:26763ms step_avg:97.32ms
step:276/1670 train_time:26859ms step_avg:97.31ms
step:277/1670 train_time:26954ms step_avg:97.31ms
step:278/1670 train_time:27050ms step_avg:97.30ms
step:279/1670 train_time:27146ms step_avg:97.30ms
step:280/1670 train_time:27241ms step_avg:97.29ms
step:281/1670 train_time:27336ms step_avg:97.28ms
step:282/1670 train_time:27431ms step_avg:97.27ms
step:283/1670 train_time:27528ms step_avg:97.27ms
step:284/1670 train_time:27623ms step_avg:97.26ms
step:285/1670 train_time:27719ms step_avg:97.26ms
step:286/1670 train_time:27816ms step_avg:97.26ms
step:287/1670 train_time:27912ms step_avg:97.25ms
step:288/1670 train_time:28007ms step_avg:97.25ms
step:289/1670 train_time:28103ms step_avg:97.24ms
step:290/1670 train_time:28198ms step_avg:97.23ms
step:291/1670 train_time:28293ms step_avg:97.23ms
step:292/1670 train_time:28389ms step_avg:97.22ms
step:293/1670 train_time:28485ms step_avg:97.22ms
step:294/1670 train_time:28581ms step_avg:97.22ms
step:295/1670 train_time:28677ms step_avg:97.21ms
step:296/1670 train_time:28773ms step_avg:97.21ms
step:297/1670 train_time:28870ms step_avg:97.20ms
step:298/1670 train_time:28966ms step_avg:97.20ms
step:299/1670 train_time:29061ms step_avg:97.20ms
step:300/1670 train_time:29157ms step_avg:97.19ms
step:301/1670 train_time:29252ms step_avg:97.18ms
step:302/1670 train_time:29347ms step_avg:97.18ms
step:303/1670 train_time:29443ms step_avg:97.17ms
step:304/1670 train_time:29539ms step_avg:97.17ms
step:305/1670 train_time:29636ms step_avg:97.17ms
step:306/1670 train_time:29731ms step_avg:97.16ms
step:307/1670 train_time:29827ms step_avg:97.16ms
step:308/1670 train_time:29922ms step_avg:97.15ms
step:309/1670 train_time:30017ms step_avg:97.14ms
step:310/1670 train_time:30113ms step_avg:97.14ms
step:311/1670 train_time:30209ms step_avg:97.14ms
step:312/1670 train_time:30304ms step_avg:97.13ms
step:313/1670 train_time:30400ms step_avg:97.12ms
step:314/1670 train_time:30495ms step_avg:97.12ms
step:315/1670 train_time:30592ms step_avg:97.12ms
step:316/1670 train_time:30688ms step_avg:97.11ms
step:317/1670 train_time:30784ms step_avg:97.11ms
step:318/1670 train_time:30880ms step_avg:97.11ms
step:319/1670 train_time:30976ms step_avg:97.10ms
step:320/1670 train_time:31071ms step_avg:97.10ms
step:321/1670 train_time:31167ms step_avg:97.09ms
step:322/1670 train_time:31263ms step_avg:97.09ms
step:323/1670 train_time:31359ms step_avg:97.09ms
step:324/1670 train_time:31454ms step_avg:97.08ms
step:325/1670 train_time:31550ms step_avg:97.08ms
step:326/1670 train_time:31646ms step_avg:97.07ms
step:327/1670 train_time:31742ms step_avg:97.07ms
step:328/1670 train_time:31837ms step_avg:97.07ms
step:329/1670 train_time:31933ms step_avg:97.06ms
step:330/1670 train_time:32028ms step_avg:97.06ms
step:331/1670 train_time:32124ms step_avg:97.05ms
step:332/1670 train_time:32219ms step_avg:97.05ms
step:333/1670 train_time:32316ms step_avg:97.04ms
step:334/1670 train_time:32412ms step_avg:97.04ms
step:335/1670 train_time:32509ms step_avg:97.04ms
step:336/1670 train_time:32604ms step_avg:97.04ms
step:337/1670 train_time:32700ms step_avg:97.03ms
step:338/1670 train_time:32795ms step_avg:97.03ms
step:339/1670 train_time:32892ms step_avg:97.03ms
step:340/1670 train_time:32988ms step_avg:97.02ms
step:341/1670 train_time:33083ms step_avg:97.02ms
step:342/1670 train_time:33178ms step_avg:97.01ms
step:343/1670 train_time:33274ms step_avg:97.01ms
step:344/1670 train_time:33369ms step_avg:97.00ms
step:345/1670 train_time:33465ms step_avg:97.00ms
step:346/1670 train_time:33561ms step_avg:97.00ms
step:347/1670 train_time:33656ms step_avg:96.99ms
step:348/1670 train_time:33752ms step_avg:96.99ms
step:349/1670 train_time:33849ms step_avg:96.99ms
step:350/1670 train_time:33946ms step_avg:96.99ms
step:351/1670 train_time:34041ms step_avg:96.98ms
step:352/1670 train_time:34136ms step_avg:96.98ms
step:353/1670 train_time:34232ms step_avg:96.97ms
step:354/1670 train_time:34327ms step_avg:96.97ms
step:355/1670 train_time:34423ms step_avg:96.96ms
step:356/1670 train_time:34518ms step_avg:96.96ms
step:357/1670 train_time:34614ms step_avg:96.96ms
step:358/1670 train_time:34710ms step_avg:96.95ms
step:359/1670 train_time:34806ms step_avg:96.95ms
step:360/1670 train_time:34902ms step_avg:96.95ms
step:361/1670 train_time:34997ms step_avg:96.95ms
step:362/1670 train_time:35093ms step_avg:96.94ms
step:363/1670 train_time:35189ms step_avg:96.94ms
step:364/1670 train_time:35285ms step_avg:96.94ms
step:365/1670 train_time:35380ms step_avg:96.93ms
step:366/1670 train_time:35475ms step_avg:96.93ms
step:367/1670 train_time:35572ms step_avg:96.93ms
step:368/1670 train_time:35667ms step_avg:96.92ms
step:369/1670 train_time:35763ms step_avg:96.92ms
step:370/1670 train_time:35859ms step_avg:96.92ms
step:371/1670 train_time:35955ms step_avg:96.91ms
step:372/1670 train_time:36051ms step_avg:96.91ms
step:373/1670 train_time:36146ms step_avg:96.91ms
step:374/1670 train_time:36242ms step_avg:96.90ms
step:375/1670 train_time:36338ms step_avg:96.90ms
step:375/1670 val_loss:3.8167 train_time:36432ms step_avg:97.15ms
step:376/1670 train_time:36455ms step_avg:96.95ms
step:377/1670 train_time:36534ms step_avg:96.91ms
step:378/1670 train_time:36633ms step_avg:96.91ms
step:379/1670 train_time:36729ms step_avg:96.91ms
step:380/1670 train_time:36824ms step_avg:96.91ms
step:381/1670 train_time:36919ms step_avg:96.90ms
step:382/1670 train_time:37014ms step_avg:96.90ms
step:383/1670 train_time:37109ms step_avg:96.89ms
step:384/1670 train_time:37204ms step_avg:96.89ms
step:385/1670 train_time:37299ms step_avg:96.88ms
step:386/1670 train_time:37394ms step_avg:96.88ms
step:387/1670 train_time:37491ms step_avg:96.88ms
step:388/1670 train_time:37588ms step_avg:96.88ms
step:389/1670 train_time:37685ms step_avg:96.88ms
step:390/1670 train_time:37781ms step_avg:96.88ms
step:391/1670 train_time:37876ms step_avg:96.87ms
step:392/1670 train_time:37972ms step_avg:96.87ms
step:393/1670 train_time:38067ms step_avg:96.86ms
step:394/1670 train_time:38162ms step_avg:96.86ms
step:395/1670 train_time:38257ms step_avg:96.85ms
step:396/1670 train_time:38352ms step_avg:96.85ms
step:397/1670 train_time:38448ms step_avg:96.85ms
step:398/1670 train_time:38545ms step_avg:96.85ms
step:399/1670 train_time:38642ms step_avg:96.85ms
step:400/1670 train_time:38739ms step_avg:96.85ms
step:401/1670 train_time:38835ms step_avg:96.84ms
step:402/1670 train_time:38930ms step_avg:96.84ms
step:403/1670 train_time:39025ms step_avg:96.84ms
step:404/1670 train_time:39121ms step_avg:96.83ms
step:405/1670 train_time:39216ms step_avg:96.83ms
step:406/1670 train_time:39311ms step_avg:96.83ms
step:407/1670 train_time:39407ms step_avg:96.82ms
step:408/1670 train_time:39503ms step_avg:96.82ms
step:409/1670 train_time:39599ms step_avg:96.82ms
step:410/1670 train_time:39696ms step_avg:96.82ms
step:411/1670 train_time:39790ms step_avg:96.81ms
step:412/1670 train_time:39886ms step_avg:96.81ms
step:413/1670 train_time:39982ms step_avg:96.81ms
step:414/1670 train_time:40079ms step_avg:96.81ms
step:415/1670 train_time:40175ms step_avg:96.81ms
step:416/1670 train_time:40270ms step_avg:96.80ms
step:417/1670 train_time:40365ms step_avg:96.80ms
step:418/1670 train_time:40461ms step_avg:96.80ms
step:419/1670 train_time:40558ms step_avg:96.80ms
step:420/1670 train_time:40654ms step_avg:96.80ms
step:421/1670 train_time:40749ms step_avg:96.79ms
step:422/1670 train_time:40846ms step_avg:96.79ms
step:423/1670 train_time:40941ms step_avg:96.79ms
step:424/1670 train_time:41037ms step_avg:96.78ms
step:425/1670 train_time:41303ms step_avg:97.18ms
step:426/1670 train_time:41427ms step_avg:97.25ms
step:427/1670 train_time:41521ms step_avg:97.24ms
step:428/1670 train_time:41615ms step_avg:97.23ms
step:429/1670 train_time:41709ms step_avg:97.22ms
step:430/1670 train_time:41804ms step_avg:97.22ms
step:431/1670 train_time:41900ms step_avg:97.21ms
step:432/1670 train_time:41994ms step_avg:97.21ms
step:433/1670 train_time:42089ms step_avg:97.20ms
step:434/1670 train_time:42184ms step_avg:97.20ms
step:435/1670 train_time:42279ms step_avg:97.19ms
step:436/1670 train_time:42378ms step_avg:97.20ms
step:437/1670 train_time:42476ms step_avg:97.20ms
step:438/1670 train_time:42573ms step_avg:97.20ms
step:439/1670 train_time:42668ms step_avg:97.19ms
step:440/1670 train_time:42763ms step_avg:97.19ms
step:441/1670 train_time:42859ms step_avg:97.19ms
step:442/1670 train_time:42954ms step_avg:97.18ms
step:443/1670 train_time:43049ms step_avg:97.18ms
step:444/1670 train_time:43144ms step_avg:97.17ms
step:445/1670 train_time:43240ms step_avg:97.17ms
step:446/1670 train_time:43336ms step_avg:97.17ms
step:447/1670 train_time:43433ms step_avg:97.16ms
step:448/1670 train_time:43529ms step_avg:97.16ms
step:449/1670 train_time:43625ms step_avg:97.16ms
step:450/1670 train_time:43721ms step_avg:97.16ms
step:451/1670 train_time:43817ms step_avg:97.16ms
step:452/1670 train_time:43913ms step_avg:97.15ms
step:453/1670 train_time:44008ms step_avg:97.15ms
step:454/1670 train_time:44103ms step_avg:97.14ms
step:455/1670 train_time:44199ms step_avg:97.14ms
step:456/1670 train_time:44295ms step_avg:97.14ms
step:457/1670 train_time:44390ms step_avg:97.13ms
step:458/1670 train_time:44486ms step_avg:97.13ms
step:459/1670 train_time:44583ms step_avg:97.13ms
step:460/1670 train_time:44679ms step_avg:97.13ms
step:461/1670 train_time:44775ms step_avg:97.13ms
step:462/1670 train_time:44871ms step_avg:97.12ms
step:463/1670 train_time:44966ms step_avg:97.12ms
step:464/1670 train_time:45061ms step_avg:97.11ms
step:465/1670 train_time:45156ms step_avg:97.11ms
step:466/1670 train_time:45252ms step_avg:97.11ms
step:467/1670 train_time:45348ms step_avg:97.10ms
step:468/1670 train_time:45444ms step_avg:97.10ms
step:469/1670 train_time:45540ms step_avg:97.10ms
step:470/1670 train_time:45635ms step_avg:97.10ms
step:471/1670 train_time:45730ms step_avg:97.09ms
step:472/1670 train_time:45826ms step_avg:97.09ms
step:473/1670 train_time:45922ms step_avg:97.09ms
step:474/1670 train_time:46018ms step_avg:97.08ms
step:475/1670 train_time:46114ms step_avg:97.08ms
step:476/1670 train_time:46210ms step_avg:97.08ms
step:477/1670 train_time:46305ms step_avg:97.08ms
step:478/1670 train_time:46401ms step_avg:97.07ms
step:479/1670 train_time:46497ms step_avg:97.07ms
step:480/1670 train_time:46592ms step_avg:97.07ms
step:481/1670 train_time:46688ms step_avg:97.06ms
step:482/1670 train_time:46784ms step_avg:97.06ms
step:483/1670 train_time:46881ms step_avg:97.06ms
step:484/1670 train_time:46976ms step_avg:97.06ms
step:485/1670 train_time:47072ms step_avg:97.05ms
step:486/1670 train_time:47167ms step_avg:97.05ms
step:487/1670 train_time:47263ms step_avg:97.05ms
step:488/1670 train_time:47359ms step_avg:97.05ms
step:489/1670 train_time:47455ms step_avg:97.05ms
step:490/1670 train_time:47550ms step_avg:97.04ms
step:491/1670 train_time:47646ms step_avg:97.04ms
step:492/1670 train_time:47743ms step_avg:97.04ms
step:493/1670 train_time:47839ms step_avg:97.04ms
step:494/1670 train_time:47935ms step_avg:97.03ms
step:495/1670 train_time:48030ms step_avg:97.03ms
step:496/1670 train_time:48126ms step_avg:97.03ms
step:497/1670 train_time:48222ms step_avg:97.03ms
step:498/1670 train_time:48318ms step_avg:97.02ms
step:499/1670 train_time:48414ms step_avg:97.02ms
step:500/1670 train_time:48510ms step_avg:97.02ms
step:500/1670 val_loss:3.7126 train_time:48604ms step_avg:97.21ms
step:501/1670 train_time:48627ms step_avg:97.06ms
step:502/1670 train_time:48708ms step_avg:97.03ms
step:503/1670 train_time:48807ms step_avg:97.03ms
step:504/1670 train_time:48903ms step_avg:97.03ms
step:505/1670 train_time:49000ms step_avg:97.03ms
step:506/1670 train_time:49096ms step_avg:97.03ms
step:507/1670 train_time:49191ms step_avg:97.02ms
step:508/1670 train_time:49285ms step_avg:97.02ms
step:509/1670 train_time:49381ms step_avg:97.02ms
step:510/1670 train_time:49476ms step_avg:97.01ms
step:511/1670 train_time:49572ms step_avg:97.01ms
step:512/1670 train_time:49669ms step_avg:97.01ms
step:513/1670 train_time:49766ms step_avg:97.01ms
step:514/1670 train_time:49862ms step_avg:97.01ms
step:515/1670 train_time:49960ms step_avg:97.01ms
step:516/1670 train_time:50056ms step_avg:97.01ms
step:517/1670 train_time:50151ms step_avg:97.00ms
step:518/1670 train_time:50246ms step_avg:97.00ms
step:519/1670 train_time:50341ms step_avg:97.00ms
step:520/1670 train_time:50436ms step_avg:96.99ms
step:521/1670 train_time:50531ms step_avg:96.99ms
step:522/1670 train_time:50627ms step_avg:96.99ms
step:523/1670 train_time:50723ms step_avg:96.99ms
step:524/1670 train_time:50820ms step_avg:96.99ms
step:525/1670 train_time:50917ms step_avg:96.99ms
step:526/1670 train_time:51014ms step_avg:96.98ms
step:527/1670 train_time:51109ms step_avg:96.98ms
step:528/1670 train_time:51205ms step_avg:96.98ms
step:529/1670 train_time:51300ms step_avg:96.98ms
step:530/1670 train_time:51395ms step_avg:96.97ms
step:531/1670 train_time:51490ms step_avg:96.97ms
step:532/1670 train_time:51586ms step_avg:96.97ms
step:533/1670 train_time:51682ms step_avg:96.96ms
step:534/1670 train_time:51778ms step_avg:96.96ms
step:535/1670 train_time:51876ms step_avg:96.96ms
step:536/1670 train_time:51972ms step_avg:96.96ms
step:537/1670 train_time:52068ms step_avg:96.96ms
step:538/1670 train_time:52164ms step_avg:96.96ms
step:539/1670 train_time:52260ms step_avg:96.96ms
step:540/1670 train_time:52356ms step_avg:96.96ms
step:541/1670 train_time:52452ms step_avg:96.95ms
step:542/1670 train_time:52547ms step_avg:96.95ms
step:543/1670 train_time:52642ms step_avg:96.95ms
step:544/1670 train_time:52738ms step_avg:96.94ms
step:545/1670 train_time:52834ms step_avg:96.94ms
step:546/1670 train_time:52930ms step_avg:96.94ms
step:547/1670 train_time:53025ms step_avg:96.94ms
step:548/1670 train_time:53121ms step_avg:96.94ms
step:549/1670 train_time:53217ms step_avg:96.94ms
step:550/1670 train_time:53313ms step_avg:96.93ms
step:551/1670 train_time:53409ms step_avg:96.93ms
step:552/1670 train_time:53505ms step_avg:96.93ms
step:553/1670 train_time:53600ms step_avg:96.93ms
step:554/1670 train_time:53697ms step_avg:96.93ms
step:555/1670 train_time:53793ms step_avg:96.92ms
step:556/1670 train_time:53889ms step_avg:96.92ms
step:557/1670 train_time:53985ms step_avg:96.92ms
step:558/1670 train_time:54081ms step_avg:96.92ms
step:559/1670 train_time:54178ms step_avg:96.92ms
step:560/1670 train_time:54276ms step_avg:96.92ms
step:561/1670 train_time:54373ms step_avg:96.92ms
step:562/1670 train_time:54470ms step_avg:96.92ms
step:563/1670 train_time:54566ms step_avg:96.92ms
step:564/1670 train_time:54663ms step_avg:96.92ms
step:565/1670 train_time:54761ms step_avg:96.92ms
step:566/1670 train_time:54859ms step_avg:96.92ms
step:567/1670 train_time:54958ms step_avg:96.93ms
step:568/1670 train_time:55056ms step_avg:96.93ms
step:569/1670 train_time:55154ms step_avg:96.93ms
step:570/1670 train_time:55251ms step_avg:96.93ms
step:571/1670 train_time:55348ms step_avg:96.93ms
step:572/1670 train_time:55445ms step_avg:96.93ms
step:573/1670 train_time:55542ms step_avg:96.93ms
step:574/1670 train_time:55640ms step_avg:96.93ms
step:575/1670 train_time:55737ms step_avg:96.93ms
step:576/1670 train_time:55836ms step_avg:96.94ms
step:577/1670 train_time:55933ms step_avg:96.94ms
step:578/1670 train_time:56030ms step_avg:96.94ms
step:579/1670 train_time:56127ms step_avg:96.94ms
step:580/1670 train_time:56224ms step_avg:96.94ms
step:581/1670 train_time:56321ms step_avg:96.94ms
step:582/1670 train_time:56419ms step_avg:96.94ms
step:583/1670 train_time:56516ms step_avg:96.94ms
step:584/1670 train_time:56613ms step_avg:96.94ms
step:585/1670 train_time:56710ms step_avg:96.94ms
step:586/1670 train_time:56807ms step_avg:96.94ms
step:587/1670 train_time:56903ms step_avg:96.94ms
step:588/1670 train_time:57002ms step_avg:96.94ms
step:589/1670 train_time:57099ms step_avg:96.94ms
step:590/1670 train_time:57197ms step_avg:96.94ms
step:591/1670 train_time:57294ms step_avg:96.94ms
step:592/1670 train_time:57392ms step_avg:96.95ms
step:593/1670 train_time:57489ms step_avg:96.95ms
step:594/1670 train_time:57585ms step_avg:96.94ms
step:595/1670 train_time:57682ms step_avg:96.94ms
step:596/1670 train_time:57780ms step_avg:96.95ms
step:597/1670 train_time:57879ms step_avg:96.95ms
step:598/1670 train_time:57977ms step_avg:96.95ms
step:599/1670 train_time:58074ms step_avg:96.95ms
step:600/1670 train_time:58171ms step_avg:96.95ms
step:601/1670 train_time:58268ms step_avg:96.95ms
step:602/1670 train_time:58365ms step_avg:96.95ms
step:603/1670 train_time:58463ms step_avg:96.95ms
step:604/1670 train_time:58561ms step_avg:96.96ms
step:605/1670 train_time:58658ms step_avg:96.96ms
step:606/1670 train_time:58755ms step_avg:96.96ms
step:607/1670 train_time:58853ms step_avg:96.96ms
step:608/1670 train_time:58949ms step_avg:96.96ms
step:609/1670 train_time:59046ms step_avg:96.96ms
step:610/1670 train_time:59143ms step_avg:96.96ms
step:611/1670 train_time:59240ms step_avg:96.96ms
step:612/1670 train_time:59338ms step_avg:96.96ms
step:613/1670 train_time:59436ms step_avg:96.96ms
step:614/1670 train_time:59533ms step_avg:96.96ms
step:615/1670 train_time:59630ms step_avg:96.96ms
step:616/1670 train_time:59726ms step_avg:96.96ms
step:617/1670 train_time:59823ms step_avg:96.96ms
step:618/1670 train_time:59921ms step_avg:96.96ms
step:619/1670 train_time:60020ms step_avg:96.96ms
step:620/1670 train_time:60117ms step_avg:96.96ms
step:621/1670 train_time:60215ms step_avg:96.96ms
step:622/1670 train_time:60312ms step_avg:96.97ms
step:623/1670 train_time:60409ms step_avg:96.96ms
step:624/1670 train_time:60506ms step_avg:96.96ms
step:625/1670 train_time:60604ms step_avg:96.97ms
step:625/1670 val_loss:3.6154 train_time:60700ms step_avg:97.12ms
step:626/1670 train_time:60724ms step_avg:97.00ms
step:627/1670 train_time:60813ms step_avg:96.99ms
step:628/1670 train_time:60912ms step_avg:96.99ms
step:629/1670 train_time:61008ms step_avg:96.99ms
step:630/1670 train_time:61104ms step_avg:96.99ms
step:631/1670 train_time:61200ms step_avg:96.99ms
step:632/1670 train_time:61296ms step_avg:96.99ms
step:633/1670 train_time:61391ms step_avg:96.98ms
step:634/1670 train_time:61487ms step_avg:96.98ms
step:635/1670 train_time:61583ms step_avg:96.98ms
step:636/1670 train_time:61683ms step_avg:96.99ms
step:637/1670 train_time:61785ms step_avg:96.99ms
step:638/1670 train_time:61885ms step_avg:97.00ms
step:639/1670 train_time:62253ms step_avg:97.42ms
step:640/1670 train_time:62343ms step_avg:97.41ms
step:641/1670 train_time:62440ms step_avg:97.41ms
step:642/1670 train_time:62536ms step_avg:97.41ms
step:643/1670 train_time:62632ms step_avg:97.41ms
step:644/1670 train_time:62728ms step_avg:97.40ms
step:645/1670 train_time:62824ms step_avg:97.40ms
step:646/1670 train_time:62920ms step_avg:97.40ms
step:647/1670 train_time:63017ms step_avg:97.40ms
step:648/1670 train_time:63114ms step_avg:97.40ms
step:649/1670 train_time:63218ms step_avg:97.41ms
step:650/1670 train_time:63317ms step_avg:97.41ms
step:651/1670 train_time:63416ms step_avg:97.41ms
step:652/1670 train_time:63512ms step_avg:97.41ms
step:653/1670 train_time:63609ms step_avg:97.41ms
step:654/1670 train_time:63706ms step_avg:97.41ms
step:655/1670 train_time:63802ms step_avg:97.41ms
step:656/1670 train_time:63898ms step_avg:97.41ms
step:657/1670 train_time:63994ms step_avg:97.40ms
step:658/1670 train_time:64091ms step_avg:97.40ms
step:659/1670 train_time:64188ms step_avg:97.40ms
step:660/1670 train_time:64288ms step_avg:97.41ms
step:661/1670 train_time:64387ms step_avg:97.41ms
step:662/1670 train_time:64485ms step_avg:97.41ms
step:663/1670 train_time:64583ms step_avg:97.41ms
step:664/1670 train_time:64680ms step_avg:97.41ms
step:665/1670 train_time:64778ms step_avg:97.41ms
step:666/1670 train_time:64874ms step_avg:97.41ms
step:667/1670 train_time:64970ms step_avg:97.41ms
step:668/1670 train_time:65067ms step_avg:97.41ms
step:669/1670 train_time:65164ms step_avg:97.41ms
step:670/1670 train_time:65263ms step_avg:97.41ms
step:671/1670 train_time:65363ms step_avg:97.41ms
step:672/1670 train_time:65461ms step_avg:97.41ms
step:673/1670 train_time:65559ms step_avg:97.41ms
step:674/1670 train_time:65656ms step_avg:97.41ms
step:675/1670 train_time:65753ms step_avg:97.41ms
step:676/1670 train_time:65849ms step_avg:97.41ms
step:677/1670 train_time:65946ms step_avg:97.41ms
step:678/1670 train_time:66044ms step_avg:97.41ms
step:679/1670 train_time:66141ms step_avg:97.41ms
step:680/1670 train_time:66238ms step_avg:97.41ms
step:681/1670 train_time:66336ms step_avg:97.41ms
step:682/1670 train_time:66434ms step_avg:97.41ms
step:683/1670 train_time:66531ms step_avg:97.41ms
step:684/1670 train_time:66628ms step_avg:97.41ms
step:685/1670 train_time:66726ms step_avg:97.41ms
step:686/1670 train_time:66822ms step_avg:97.41ms
step:687/1670 train_time:66919ms step_avg:97.41ms
step:688/1670 train_time:67017ms step_avg:97.41ms
step:689/1670 train_time:67114ms step_avg:97.41ms
step:690/1670 train_time:67211ms step_avg:97.41ms
step:691/1670 train_time:67308ms step_avg:97.41ms
step:692/1670 train_time:67407ms step_avg:97.41ms
step:693/1670 train_time:67505ms step_avg:97.41ms
step:694/1670 train_time:67603ms step_avg:97.41ms
step:695/1670 train_time:67702ms step_avg:97.41ms
step:696/1670 train_time:67799ms step_avg:97.41ms
step:697/1670 train_time:67896ms step_avg:97.41ms
step:698/1670 train_time:67992ms step_avg:97.41ms
step:699/1670 train_time:68088ms step_avg:97.41ms
step:700/1670 train_time:68186ms step_avg:97.41ms
step:701/1670 train_time:68283ms step_avg:97.41ms
step:702/1670 train_time:68382ms step_avg:97.41ms
step:703/1670 train_time:68480ms step_avg:97.41ms
step:704/1670 train_time:68578ms step_avg:97.41ms
step:705/1670 train_time:68676ms step_avg:97.41ms
step:706/1670 train_time:68773ms step_avg:97.41ms
step:707/1670 train_time:68870ms step_avg:97.41ms
step:708/1670 train_time:68967ms step_avg:97.41ms
step:709/1670 train_time:69064ms step_avg:97.41ms
step:710/1670 train_time:69161ms step_avg:97.41ms
step:711/1670 train_time:69259ms step_avg:97.41ms
step:712/1670 train_time:69356ms step_avg:97.41ms
step:713/1670 train_time:69453ms step_avg:97.41ms
step:714/1670 train_time:69550ms step_avg:97.41ms
step:715/1670 train_time:69648ms step_avg:97.41ms
step:716/1670 train_time:69746ms step_avg:97.41ms
step:717/1670 train_time:69844ms step_avg:97.41ms
step:718/1670 train_time:69941ms step_avg:97.41ms
step:719/1670 train_time:70039ms step_avg:97.41ms
step:720/1670 train_time:70136ms step_avg:97.41ms
step:721/1670 train_time:70233ms step_avg:97.41ms
step:722/1670 train_time:70330ms step_avg:97.41ms
step:723/1670 train_time:70428ms step_avg:97.41ms
step:724/1670 train_time:70525ms step_avg:97.41ms
step:725/1670 train_time:70624ms step_avg:97.41ms
step:726/1670 train_time:70721ms step_avg:97.41ms
step:727/1670 train_time:70818ms step_avg:97.41ms
step:728/1670 train_time:70916ms step_avg:97.41ms
step:729/1670 train_time:71013ms step_avg:97.41ms
step:730/1670 train_time:71110ms step_avg:97.41ms
step:731/1670 train_time:71208ms step_avg:97.41ms
step:732/1670 train_time:71306ms step_avg:97.41ms
step:733/1670 train_time:71403ms step_avg:97.41ms
step:734/1670 train_time:71500ms step_avg:97.41ms
step:735/1670 train_time:71599ms step_avg:97.41ms
step:736/1670 train_time:71696ms step_avg:97.41ms
step:737/1670 train_time:71794ms step_avg:97.41ms
step:738/1670 train_time:71890ms step_avg:97.41ms
step:739/1670 train_time:71987ms step_avg:97.41ms
step:740/1670 train_time:72085ms step_avg:97.41ms
step:741/1670 train_time:72183ms step_avg:97.41ms
step:742/1670 train_time:72281ms step_avg:97.41ms
step:743/1670 train_time:72379ms step_avg:97.41ms
step:744/1670 train_time:72476ms step_avg:97.41ms
step:745/1670 train_time:72573ms step_avg:97.41ms
step:746/1670 train_time:72670ms step_avg:97.41ms
step:747/1670 train_time:72768ms step_avg:97.41ms
step:748/1670 train_time:72864ms step_avg:97.41ms
step:749/1670 train_time:72963ms step_avg:97.41ms
step:750/1670 train_time:73061ms step_avg:97.41ms
step:750/1670 val_loss:3.5609 train_time:73158ms step_avg:97.54ms
step:751/1670 train_time:73181ms step_avg:97.44ms
step:752/1670 train_time:73262ms step_avg:97.42ms
step:753/1670 train_time:73361ms step_avg:97.43ms
step:754/1670 train_time:73460ms step_avg:97.43ms
step:755/1670 train_time:73557ms step_avg:97.43ms
step:756/1670 train_time:73653ms step_avg:97.42ms
step:757/1670 train_time:73749ms step_avg:97.42ms
step:758/1670 train_time:73846ms step_avg:97.42ms
step:759/1670 train_time:73942ms step_avg:97.42ms
step:760/1670 train_time:74038ms step_avg:97.42ms
step:761/1670 train_time:74137ms step_avg:97.42ms
step:762/1670 train_time:74237ms step_avg:97.42ms
step:763/1670 train_time:74337ms step_avg:97.43ms
step:764/1670 train_time:74435ms step_avg:97.43ms
step:765/1670 train_time:74533ms step_avg:97.43ms
step:766/1670 train_time:74631ms step_avg:97.43ms
step:767/1670 train_time:74728ms step_avg:97.43ms
step:768/1670 train_time:74825ms step_avg:97.43ms
step:769/1670 train_time:74922ms step_avg:97.43ms
step:770/1670 train_time:75018ms step_avg:97.43ms
step:771/1670 train_time:75116ms step_avg:97.43ms
step:772/1670 train_time:75214ms step_avg:97.43ms
step:773/1670 train_time:75313ms step_avg:97.43ms
step:774/1670 train_time:75412ms step_avg:97.43ms
step:775/1670 train_time:75510ms step_avg:97.43ms
step:776/1670 train_time:75607ms step_avg:97.43ms
step:777/1670 train_time:75704ms step_avg:97.43ms
step:778/1670 train_time:75801ms step_avg:97.43ms
step:779/1670 train_time:75897ms step_avg:97.43ms
step:780/1670 train_time:75995ms step_avg:97.43ms
step:781/1670 train_time:76091ms step_avg:97.43ms
step:782/1670 train_time:76189ms step_avg:97.43ms
step:783/1670 train_time:76288ms step_avg:97.43ms
step:784/1670 train_time:76386ms step_avg:97.43ms
step:785/1670 train_time:76483ms step_avg:97.43ms
step:786/1670 train_time:76581ms step_avg:97.43ms
step:787/1670 train_time:76679ms step_avg:97.43ms
step:788/1670 train_time:76776ms step_avg:97.43ms
step:789/1670 train_time:76874ms step_avg:97.43ms
step:790/1670 train_time:76972ms step_avg:97.43ms
step:791/1670 train_time:77069ms step_avg:97.43ms
step:792/1670 train_time:77167ms step_avg:97.43ms
step:793/1670 train_time:77267ms step_avg:97.44ms
step:794/1670 train_time:77364ms step_avg:97.44ms
step:795/1670 train_time:77462ms step_avg:97.44ms
step:796/1670 train_time:77558ms step_avg:97.44ms
step:797/1670 train_time:77656ms step_avg:97.43ms
step:798/1670 train_time:77752ms step_avg:97.43ms
step:799/1670 train_time:77849ms step_avg:97.43ms
step:800/1670 train_time:77946ms step_avg:97.43ms
step:801/1670 train_time:78043ms step_avg:97.43ms
step:802/1670 train_time:78140ms step_avg:97.43ms
step:803/1670 train_time:78238ms step_avg:97.43ms
step:804/1670 train_time:78336ms step_avg:97.43ms
step:805/1670 train_time:78436ms step_avg:97.44ms
step:806/1670 train_time:78535ms step_avg:97.44ms
step:807/1670 train_time:78633ms step_avg:97.44ms
step:808/1670 train_time:78730ms step_avg:97.44ms
step:809/1670 train_time:78827ms step_avg:97.44ms
step:810/1670 train_time:78923ms step_avg:97.44ms
step:811/1670 train_time:79020ms step_avg:97.44ms
step:812/1670 train_time:79118ms step_avg:97.44ms
step:813/1670 train_time:79216ms step_avg:97.44ms
step:814/1670 train_time:79314ms step_avg:97.44ms
step:815/1670 train_time:79412ms step_avg:97.44ms
step:816/1670 train_time:79510ms step_avg:97.44ms
step:817/1670 train_time:79608ms step_avg:97.44ms
step:818/1670 train_time:79705ms step_avg:97.44ms
step:819/1670 train_time:79802ms step_avg:97.44ms
step:820/1670 train_time:79899ms step_avg:97.44ms
step:821/1670 train_time:79996ms step_avg:97.44ms
step:822/1670 train_time:80093ms step_avg:97.44ms
step:823/1670 train_time:80192ms step_avg:97.44ms
step:824/1670 train_time:80291ms step_avg:97.44ms
step:825/1670 train_time:80388ms step_avg:97.44ms
step:826/1670 train_time:80486ms step_avg:97.44ms
step:827/1670 train_time:80583ms step_avg:97.44ms
step:828/1670 train_time:80680ms step_avg:97.44ms
step:829/1670 train_time:80777ms step_avg:97.44ms
step:830/1670 train_time:80875ms step_avg:97.44ms
step:831/1670 train_time:80973ms step_avg:97.44ms
step:832/1670 train_time:81071ms step_avg:97.44ms
step:833/1670 train_time:81168ms step_avg:97.44ms
step:834/1670 train_time:81265ms step_avg:97.44ms
step:835/1670 train_time:81363ms step_avg:97.44ms
step:836/1670 train_time:81460ms step_avg:97.44ms
step:837/1670 train_time:81558ms step_avg:97.44ms
step:838/1670 train_time:81655ms step_avg:97.44ms
step:839/1670 train_time:81753ms step_avg:97.44ms
step:840/1670 train_time:81851ms step_avg:97.44ms
step:841/1670 train_time:81949ms step_avg:97.44ms
step:842/1670 train_time:82045ms step_avg:97.44ms
step:843/1670 train_time:82142ms step_avg:97.44ms
step:844/1670 train_time:82239ms step_avg:97.44ms
step:845/1670 train_time:82335ms step_avg:97.44ms
step:846/1670 train_time:82434ms step_avg:97.44ms
step:847/1670 train_time:82534ms step_avg:97.44ms
step:848/1670 train_time:82631ms step_avg:97.44ms
step:849/1670 train_time:82729ms step_avg:97.44ms
step:850/1670 train_time:82826ms step_avg:97.44ms
step:851/1670 train_time:83088ms step_avg:97.64ms
step:852/1670 train_time:83261ms step_avg:97.72ms
step:853/1670 train_time:83356ms step_avg:97.72ms
step:854/1670 train_time:83453ms step_avg:97.72ms
step:855/1670 train_time:83550ms step_avg:97.72ms
step:856/1670 train_time:83646ms step_avg:97.72ms
step:857/1670 train_time:83742ms step_avg:97.71ms
step:858/1670 train_time:83838ms step_avg:97.71ms
step:859/1670 train_time:83935ms step_avg:97.71ms
step:860/1670 train_time:84031ms step_avg:97.71ms
step:861/1670 train_time:84135ms step_avg:97.72ms
step:862/1670 train_time:84238ms step_avg:97.72ms
step:863/1670 train_time:84337ms step_avg:97.73ms
step:864/1670 train_time:84435ms step_avg:97.73ms
step:865/1670 train_time:84532ms step_avg:97.73ms
step:866/1670 train_time:84630ms step_avg:97.73ms
step:867/1670 train_time:84727ms step_avg:97.72ms
step:868/1670 train_time:84823ms step_avg:97.72ms
step:869/1670 train_time:84920ms step_avg:97.72ms
step:870/1670 train_time:85016ms step_avg:97.72ms
step:871/1670 train_time:85114ms step_avg:97.72ms
step:872/1670 train_time:85215ms step_avg:97.72ms
step:873/1670 train_time:85314ms step_avg:97.73ms
step:874/1670 train_time:85413ms step_avg:97.73ms
step:875/1670 train_time:85511ms step_avg:97.73ms
step:875/1670 val_loss:3.5199 train_time:85608ms step_avg:97.84ms
step:876/1670 train_time:85630ms step_avg:97.75ms
step:877/1670 train_time:85714ms step_avg:97.74ms
step:878/1670 train_time:85817ms step_avg:97.74ms
step:879/1670 train_time:85915ms step_avg:97.74ms
step:880/1670 train_time:86012ms step_avg:97.74ms
step:881/1670 train_time:86108ms step_avg:97.74ms
step:882/1670 train_time:86205ms step_avg:97.74ms
step:883/1670 train_time:86301ms step_avg:97.74ms
step:884/1670 train_time:86398ms step_avg:97.73ms
step:885/1670 train_time:86495ms step_avg:97.73ms
step:886/1670 train_time:86594ms step_avg:97.74ms
step:887/1670 train_time:86695ms step_avg:97.74ms
step:888/1670 train_time:86796ms step_avg:97.74ms
step:889/1670 train_time:86894ms step_avg:97.74ms
step:890/1670 train_time:86992ms step_avg:97.74ms
step:891/1670 train_time:87088ms step_avg:97.74ms
step:892/1670 train_time:87184ms step_avg:97.74ms
step:893/1670 train_time:87281ms step_avg:97.74ms
step:894/1670 train_time:87377ms step_avg:97.74ms
step:895/1670 train_time:87474ms step_avg:97.74ms
step:896/1670 train_time:87572ms step_avg:97.74ms
step:897/1670 train_time:87671ms step_avg:97.74ms
step:898/1670 train_time:87769ms step_avg:97.74ms
step:899/1670 train_time:87867ms step_avg:97.74ms
step:900/1670 train_time:87964ms step_avg:97.74ms
step:901/1670 train_time:88061ms step_avg:97.74ms
step:902/1670 train_time:88158ms step_avg:97.74ms
step:903/1670 train_time:88255ms step_avg:97.74ms
step:904/1670 train_time:88352ms step_avg:97.73ms
step:905/1670 train_time:88449ms step_avg:97.73ms
step:906/1670 train_time:88546ms step_avg:97.73ms
step:907/1670 train_time:88644ms step_avg:97.73ms
step:908/1670 train_time:88742ms step_avg:97.73ms
step:909/1670 train_time:88841ms step_avg:97.73ms
step:910/1670 train_time:88940ms step_avg:97.74ms
step:911/1670 train_time:89038ms step_avg:97.74ms
step:912/1670 train_time:89136ms step_avg:97.74ms
step:913/1670 train_time:89234ms step_avg:97.74ms
step:914/1670 train_time:89330ms step_avg:97.74ms
step:915/1670 train_time:89427ms step_avg:97.73ms
step:916/1670 train_time:89524ms step_avg:97.73ms
step:917/1670 train_time:89621ms step_avg:97.73ms
step:918/1670 train_time:89719ms step_avg:97.73ms
step:919/1670 train_time:89817ms step_avg:97.73ms
step:920/1670 train_time:89915ms step_avg:97.73ms
step:921/1670 train_time:90014ms step_avg:97.74ms
step:922/1670 train_time:90112ms step_avg:97.73ms
step:923/1670 train_time:90209ms step_avg:97.73ms
step:924/1670 train_time:90306ms step_avg:97.73ms
step:925/1670 train_time:90403ms step_avg:97.73ms
step:926/1670 train_time:90500ms step_avg:97.73ms
step:927/1670 train_time:90597ms step_avg:97.73ms
step:928/1670 train_time:90694ms step_avg:97.73ms
step:929/1670 train_time:90793ms step_avg:97.73ms
step:930/1670 train_time:90892ms step_avg:97.73ms
step:931/1670 train_time:90989ms step_avg:97.73ms
step:932/1670 train_time:91087ms step_avg:97.73ms
step:933/1670 train_time:91185ms step_avg:97.73ms
step:934/1670 train_time:91282ms step_avg:97.73ms
step:935/1670 train_time:91380ms step_avg:97.73ms
step:936/1670 train_time:91476ms step_avg:97.73ms
step:937/1670 train_time:91574ms step_avg:97.73ms
step:938/1670 train_time:91671ms step_avg:97.73ms
step:939/1670 train_time:91770ms step_avg:97.73ms
step:940/1670 train_time:91868ms step_avg:97.73ms
step:941/1670 train_time:91965ms step_avg:97.73ms
step:942/1670 train_time:92062ms step_avg:97.73ms
step:943/1670 train_time:92159ms step_avg:97.73ms
step:944/1670 train_time:92257ms step_avg:97.73ms
step:945/1670 train_time:92355ms step_avg:97.73ms
step:946/1670 train_time:92452ms step_avg:97.73ms
step:947/1670 train_time:92549ms step_avg:97.73ms
step:948/1670 train_time:92646ms step_avg:97.73ms
step:949/1670 train_time:92743ms step_avg:97.73ms
step:950/1670 train_time:92841ms step_avg:97.73ms
step:951/1670 train_time:92939ms step_avg:97.73ms
step:952/1670 train_time:93037ms step_avg:97.73ms
step:953/1670 train_time:93136ms step_avg:97.73ms
step:954/1670 train_time:93233ms step_avg:97.73ms
step:955/1670 train_time:93331ms step_avg:97.73ms
step:956/1670 train_time:93428ms step_avg:97.73ms
step:957/1670 train_time:93524ms step_avg:97.73ms
step:958/1670 train_time:93621ms step_avg:97.73ms
step:959/1670 train_time:93718ms step_avg:97.72ms
step:960/1670 train_time:93816ms step_avg:97.72ms
step:961/1670 train_time:93914ms step_avg:97.73ms
step:962/1670 train_time:94013ms step_avg:97.73ms
step:963/1670 train_time:94112ms step_avg:97.73ms
step:964/1670 train_time:94210ms step_avg:97.73ms
step:965/1670 train_time:94308ms step_avg:97.73ms
step:966/1670 train_time:94406ms step_avg:97.73ms
step:967/1670 train_time:94502ms step_avg:97.73ms
step:968/1670 train_time:94598ms step_avg:97.73ms
step:969/1670 train_time:94696ms step_avg:97.73ms
step:970/1670 train_time:94794ms step_avg:97.73ms
step:971/1670 train_time:94892ms step_avg:97.73ms
step:972/1670 train_time:94989ms step_avg:97.73ms
step:973/1670 train_time:95087ms step_avg:97.73ms
step:974/1670 train_time:95184ms step_avg:97.73ms
step:975/1670 train_time:95282ms step_avg:97.72ms
step:976/1670 train_time:95378ms step_avg:97.72ms
step:977/1670 train_time:95476ms step_avg:97.72ms
step:978/1670 train_time:95574ms step_avg:97.72ms
step:979/1670 train_time:95672ms step_avg:97.72ms
step:980/1670 train_time:95769ms step_avg:97.72ms
step:981/1670 train_time:95867ms step_avg:97.72ms
step:982/1670 train_time:95965ms step_avg:97.72ms
step:983/1670 train_time:96063ms step_avg:97.72ms
step:984/1670 train_time:96160ms step_avg:97.72ms
step:985/1670 train_time:96258ms step_avg:97.72ms
step:986/1670 train_time:96355ms step_avg:97.72ms
step:987/1670 train_time:96452ms step_avg:97.72ms
step:988/1670 train_time:96550ms step_avg:97.72ms
step:989/1670 train_time:96647ms step_avg:97.72ms
step:990/1670 train_time:96744ms step_avg:97.72ms
step:991/1670 train_time:96842ms step_avg:97.72ms
step:992/1670 train_time:96939ms step_avg:97.72ms
step:993/1670 train_time:97036ms step_avg:97.72ms
step:994/1670 train_time:97135ms step_avg:97.72ms
step:995/1670 train_time:97233ms step_avg:97.72ms
step:996/1670 train_time:97331ms step_avg:97.72ms
step:997/1670 train_time:97428ms step_avg:97.72ms
step:998/1670 train_time:97524ms step_avg:97.72ms
step:999/1670 train_time:97622ms step_avg:97.72ms
step:1000/1670 train_time:97719ms step_avg:97.72ms
step:1000/1670 val_loss:3.4777 train_time:97816ms step_avg:97.82ms
step:1001/1670 train_time:97839ms step_avg:97.74ms
step:1002/1670 train_time:97921ms step_avg:97.73ms
step:1003/1670 train_time:98021ms step_avg:97.73ms
step:1004/1670 train_time:98120ms step_avg:97.73ms
step:1005/1670 train_time:98217ms step_avg:97.73ms
step:1006/1670 train_time:98313ms step_avg:97.73ms
step:1007/1670 train_time:98409ms step_avg:97.73ms
step:1008/1670 train_time:98506ms step_avg:97.72ms
step:1009/1670 train_time:98602ms step_avg:97.72ms
step:1010/1670 train_time:98699ms step_avg:97.72ms
step:1011/1670 train_time:98798ms step_avg:97.72ms
step:1012/1670 train_time:98898ms step_avg:97.72ms
step:1013/1670 train_time:98998ms step_avg:97.73ms
step:1014/1670 train_time:99097ms step_avg:97.73ms
step:1015/1670 train_time:99194ms step_avg:97.73ms
step:1016/1670 train_time:99292ms step_avg:97.73ms
step:1017/1670 train_time:99388ms step_avg:97.73ms
step:1018/1670 train_time:99485ms step_avg:97.73ms
step:1019/1670 train_time:99582ms step_avg:97.72ms
step:1020/1670 train_time:99678ms step_avg:97.72ms
step:1021/1670 train_time:99776ms step_avg:97.72ms
step:1022/1670 train_time:99873ms step_avg:97.72ms
step:1023/1670 train_time:99972ms step_avg:97.72ms
step:1024/1670 train_time:100070ms step_avg:97.72ms
step:1025/1670 train_time:100168ms step_avg:97.72ms
step:1026/1670 train_time:100266ms step_avg:97.73ms
step:1027/1670 train_time:100364ms step_avg:97.73ms
step:1028/1670 train_time:100461ms step_avg:97.72ms
step:1029/1670 train_time:100557ms step_avg:97.72ms
step:1030/1670 train_time:100654ms step_avg:97.72ms
step:1031/1670 train_time:100751ms step_avg:97.72ms
step:1032/1670 train_time:100850ms step_avg:97.72ms
step:1033/1670 train_time:100950ms step_avg:97.72ms
step:1034/1670 train_time:101049ms step_avg:97.73ms
step:1035/1670 train_time:101147ms step_avg:97.73ms
step:1036/1670 train_time:101245ms step_avg:97.73ms
step:1037/1670 train_time:101343ms step_avg:97.73ms
step:1038/1670 train_time:101439ms step_avg:97.73ms
step:1039/1670 train_time:101536ms step_avg:97.72ms
step:1040/1670 train_time:101632ms step_avg:97.72ms
step:1041/1670 train_time:101730ms step_avg:97.72ms
step:1042/1670 train_time:101828ms step_avg:97.72ms
step:1043/1670 train_time:101927ms step_avg:97.72ms
step:1044/1670 train_time:102026ms step_avg:97.73ms
step:1045/1670 train_time:102123ms step_avg:97.73ms
step:1046/1670 train_time:102222ms step_avg:97.73ms
step:1047/1670 train_time:102319ms step_avg:97.73ms
step:1048/1670 train_time:102417ms step_avg:97.73ms
step:1049/1670 train_time:102514ms step_avg:97.73ms
step:1050/1670 train_time:102611ms step_avg:97.72ms
step:1051/1670 train_time:102708ms step_avg:97.72ms
step:1052/1670 train_time:102806ms step_avg:97.72ms
step:1053/1670 train_time:103228ms step_avg:98.03ms
step:1054/1670 train_time:103323ms step_avg:98.03ms
step:1055/1670 train_time:103419ms step_avg:98.03ms
step:1056/1670 train_time:103515ms step_avg:98.03ms
step:1057/1670 train_time:103610ms step_avg:98.02ms
step:1058/1670 train_time:103707ms step_avg:98.02ms
step:1059/1670 train_time:103803ms step_avg:98.02ms
step:1060/1670 train_time:103900ms step_avg:98.02ms
step:1061/1670 train_time:103997ms step_avg:98.02ms
step:1062/1670 train_time:104337ms step_avg:98.25ms
step:1063/1670 train_time:104437ms step_avg:98.25ms
step:1064/1670 train_time:104532ms step_avg:98.24ms
step:1065/1670 train_time:104629ms step_avg:98.24ms
step:1066/1670 train_time:104725ms step_avg:98.24ms
step:1067/1670 train_time:104821ms step_avg:98.24ms
step:1068/1670 train_time:104917ms step_avg:98.24ms
step:1069/1670 train_time:105014ms step_avg:98.24ms
step:1070/1670 train_time:105110ms step_avg:98.23ms
step:1071/1670 train_time:105207ms step_avg:98.23ms
step:1072/1670 train_time:105308ms step_avg:98.23ms
step:1073/1670 train_time:105410ms step_avg:98.24ms
step:1074/1670 train_time:105510ms step_avg:98.24ms
step:1075/1670 train_time:105608ms step_avg:98.24ms
step:1076/1670 train_time:105705ms step_avg:98.24ms
step:1077/1670 train_time:105802ms step_avg:98.24ms
step:1078/1670 train_time:105899ms step_avg:98.24ms
step:1079/1670 train_time:105995ms step_avg:98.23ms
step:1080/1670 train_time:106092ms step_avg:98.23ms
step:1081/1670 train_time:106188ms step_avg:98.23ms
step:1082/1670 train_time:106286ms step_avg:98.23ms
step:1083/1670 train_time:106387ms step_avg:98.23ms
step:1084/1670 train_time:106486ms step_avg:98.23ms
step:1085/1670 train_time:106585ms step_avg:98.24ms
step:1086/1670 train_time:106682ms step_avg:98.23ms
step:1087/1670 train_time:106779ms step_avg:98.23ms
step:1088/1670 train_time:106876ms step_avg:98.23ms
step:1089/1670 train_time:106972ms step_avg:98.23ms
step:1090/1670 train_time:107069ms step_avg:98.23ms
step:1091/1670 train_time:107166ms step_avg:98.23ms
step:1092/1670 train_time:107263ms step_avg:98.23ms
step:1093/1670 train_time:107363ms step_avg:98.23ms
step:1094/1670 train_time:107461ms step_avg:98.23ms
step:1095/1670 train_time:107560ms step_avg:98.23ms
step:1096/1670 train_time:107658ms step_avg:98.23ms
step:1097/1670 train_time:107755ms step_avg:98.23ms
step:1098/1670 train_time:107851ms step_avg:98.23ms
step:1099/1670 train_time:107948ms step_avg:98.22ms
step:1100/1670 train_time:108045ms step_avg:98.22ms
step:1101/1670 train_time:108143ms step_avg:98.22ms
step:1102/1670 train_time:108240ms step_avg:98.22ms
step:1103/1670 train_time:108336ms step_avg:98.22ms
step:1104/1670 train_time:108434ms step_avg:98.22ms
step:1105/1670 train_time:108531ms step_avg:98.22ms
step:1106/1670 train_time:108629ms step_avg:98.22ms
step:1107/1670 train_time:108727ms step_avg:98.22ms
step:1108/1670 train_time:108825ms step_avg:98.22ms
step:1109/1670 train_time:108924ms step_avg:98.22ms
step:1110/1670 train_time:109021ms step_avg:98.22ms
step:1111/1670 train_time:109117ms step_avg:98.22ms
step:1112/1670 train_time:109215ms step_avg:98.21ms
step:1113/1670 train_time:109311ms step_avg:98.21ms
step:1114/1670 train_time:109409ms step_avg:98.21ms
step:1115/1670 train_time:109507ms step_avg:98.21ms
step:1116/1670 train_time:109607ms step_avg:98.21ms
step:1117/1670 train_time:109705ms step_avg:98.21ms
step:1118/1670 train_time:109804ms step_avg:98.21ms
step:1119/1670 train_time:109904ms step_avg:98.22ms
step:1120/1670 train_time:110002ms step_avg:98.22ms
step:1121/1670 train_time:110101ms step_avg:98.22ms
step:1122/1670 train_time:110200ms step_avg:98.22ms
step:1123/1670 train_time:110299ms step_avg:98.22ms
step:1124/1670 train_time:110398ms step_avg:98.22ms
step:1125/1670 train_time:110497ms step_avg:98.22ms
step:1125/1670 val_loss:3.4234 train_time:110594ms step_avg:98.31ms
step:1126/1670 train_time:110618ms step_avg:98.24ms
step:1127/1670 train_time:110705ms step_avg:98.23ms
step:1128/1670 train_time:110804ms step_avg:98.23ms
step:1129/1670 train_time:110901ms step_avg:98.23ms
step:1130/1670 train_time:110998ms step_avg:98.23ms
step:1131/1670 train_time:111095ms step_avg:98.23ms
step:1132/1670 train_time:111192ms step_avg:98.23ms
step:1133/1670 train_time:111289ms step_avg:98.22ms
step:1134/1670 train_time:111386ms step_avg:98.22ms
step:1135/1670 train_time:111485ms step_avg:98.22ms
step:1136/1670 train_time:111587ms step_avg:98.23ms
step:1137/1670 train_time:111689ms step_avg:98.23ms
step:1138/1670 train_time:111788ms step_avg:98.23ms
step:1139/1670 train_time:111887ms step_avg:98.23ms
step:1140/1670 train_time:111986ms step_avg:98.23ms
step:1141/1670 train_time:112084ms step_avg:98.23ms
step:1142/1670 train_time:112181ms step_avg:98.23ms
step:1143/1670 train_time:112279ms step_avg:98.23ms
step:1144/1670 train_time:112376ms step_avg:98.23ms
step:1145/1670 train_time:112476ms step_avg:98.23ms
step:1146/1670 train_time:112576ms step_avg:98.23ms
step:1147/1670 train_time:112676ms step_avg:98.24ms
step:1148/1670 train_time:112776ms step_avg:98.24ms
step:1149/1670 train_time:112874ms step_avg:98.24ms
step:1150/1670 train_time:112972ms step_avg:98.24ms
step:1151/1670 train_time:113069ms step_avg:98.24ms
step:1152/1670 train_time:113166ms step_avg:98.23ms
step:1153/1670 train_time:113264ms step_avg:98.23ms
step:1154/1670 train_time:113362ms step_avg:98.23ms
step:1155/1670 train_time:113460ms step_avg:98.23ms
step:1156/1670 train_time:113562ms step_avg:98.24ms
step:1157/1670 train_time:113662ms step_avg:98.24ms
step:1158/1670 train_time:113763ms step_avg:98.24ms
step:1159/1670 train_time:113863ms step_avg:98.24ms
step:1160/1670 train_time:113961ms step_avg:98.24ms
step:1161/1670 train_time:114060ms step_avg:98.24ms
step:1162/1670 train_time:114158ms step_avg:98.24ms
step:1163/1670 train_time:114256ms step_avg:98.24ms
step:1164/1670 train_time:114353ms step_avg:98.24ms
step:1165/1670 train_time:114449ms step_avg:98.24ms
step:1166/1670 train_time:114548ms step_avg:98.24ms
step:1167/1670 train_time:114646ms step_avg:98.24ms
step:1168/1670 train_time:114747ms step_avg:98.24ms
step:1169/1670 train_time:114846ms step_avg:98.24ms
step:1170/1670 train_time:114945ms step_avg:98.24ms
step:1171/1670 train_time:115044ms step_avg:98.24ms
step:1172/1670 train_time:115143ms step_avg:98.25ms
step:1173/1670 train_time:115242ms step_avg:98.25ms
step:1174/1670 train_time:115341ms step_avg:98.25ms
step:1175/1670 train_time:115441ms step_avg:98.25ms
step:1176/1670 train_time:115540ms step_avg:98.25ms
step:1177/1670 train_time:115638ms step_avg:98.25ms
step:1178/1670 train_time:115736ms step_avg:98.25ms
step:1179/1670 train_time:115834ms step_avg:98.25ms
step:1180/1670 train_time:115933ms step_avg:98.25ms
step:1181/1670 train_time:116031ms step_avg:98.25ms
step:1182/1670 train_time:116129ms step_avg:98.25ms
step:1183/1670 train_time:116227ms step_avg:98.25ms
step:1184/1670 train_time:116325ms step_avg:98.25ms
step:1185/1670 train_time:116423ms step_avg:98.25ms
step:1186/1670 train_time:116523ms step_avg:98.25ms
step:1187/1670 train_time:116621ms step_avg:98.25ms
step:1188/1670 train_time:116720ms step_avg:98.25ms
step:1189/1670 train_time:116819ms step_avg:98.25ms
step:1190/1670 train_time:116920ms step_avg:98.25ms
step:1191/1670 train_time:117021ms step_avg:98.25ms
step:1192/1670 train_time:117120ms step_avg:98.26ms
step:1193/1670 train_time:117219ms step_avg:98.26ms
step:1194/1670 train_time:117317ms step_avg:98.26ms
step:1195/1670 train_time:117416ms step_avg:98.26ms
step:1196/1670 train_time:117514ms step_avg:98.26ms
step:1197/1670 train_time:117611ms step_avg:98.25ms
step:1198/1670 train_time:117708ms step_avg:98.25ms
step:1199/1670 train_time:117807ms step_avg:98.25ms
step:1200/1670 train_time:117904ms step_avg:98.25ms
step:1201/1670 train_time:118004ms step_avg:98.25ms
step:1202/1670 train_time:118102ms step_avg:98.25ms
step:1203/1670 train_time:118201ms step_avg:98.26ms
step:1204/1670 train_time:118299ms step_avg:98.25ms
step:1205/1670 train_time:118397ms step_avg:98.25ms
step:1206/1670 train_time:118496ms step_avg:98.26ms
step:1207/1670 train_time:118594ms step_avg:98.26ms
step:1208/1670 train_time:118691ms step_avg:98.25ms
step:1209/1670 train_time:118789ms step_avg:98.25ms
step:1210/1670 train_time:118887ms step_avg:98.25ms
step:1211/1670 train_time:118984ms step_avg:98.25ms
step:1212/1670 train_time:119083ms step_avg:98.25ms
step:1213/1670 train_time:119182ms step_avg:98.25ms
step:1214/1670 train_time:119282ms step_avg:98.26ms
step:1215/1670 train_time:119381ms step_avg:98.26ms
step:1216/1670 train_time:119481ms step_avg:98.26ms
step:1217/1670 train_time:119580ms step_avg:98.26ms
step:1218/1670 train_time:119681ms step_avg:98.26ms
step:1219/1670 train_time:119779ms step_avg:98.26ms
step:1220/1670 train_time:119878ms step_avg:98.26ms
step:1221/1670 train_time:119975ms step_avg:98.26ms
step:1222/1670 train_time:120072ms step_avg:98.26ms
step:1223/1670 train_time:120170ms step_avg:98.26ms
step:1224/1670 train_time:120268ms step_avg:98.26ms
step:1225/1670 train_time:120366ms step_avg:98.26ms
step:1226/1670 train_time:120465ms step_avg:98.26ms
step:1227/1670 train_time:120563ms step_avg:98.26ms
step:1228/1670 train_time:120663ms step_avg:98.26ms
step:1229/1670 train_time:120763ms step_avg:98.26ms
step:1230/1670 train_time:120861ms step_avg:98.26ms
step:1231/1670 train_time:120960ms step_avg:98.26ms
step:1232/1670 train_time:121058ms step_avg:98.26ms
step:1233/1670 train_time:121156ms step_avg:98.26ms
step:1234/1670 train_time:121255ms step_avg:98.26ms
step:1235/1670 train_time:121353ms step_avg:98.26ms
step:1236/1670 train_time:121450ms step_avg:98.26ms
step:1237/1670 train_time:121548ms step_avg:98.26ms
step:1238/1670 train_time:121646ms step_avg:98.26ms
step:1239/1670 train_time:121745ms step_avg:98.26ms
step:1240/1670 train_time:121843ms step_avg:98.26ms
step:1241/1670 train_time:121941ms step_avg:98.26ms
step:1242/1670 train_time:122041ms step_avg:98.26ms
step:1243/1670 train_time:122140ms step_avg:98.26ms
step:1244/1670 train_time:122238ms step_avg:98.26ms
step:1245/1670 train_time:122336ms step_avg:98.26ms
step:1246/1670 train_time:122434ms step_avg:98.26ms
step:1247/1670 train_time:122532ms step_avg:98.26ms
step:1248/1670 train_time:122629ms step_avg:98.26ms
step:1249/1670 train_time:122727ms step_avg:98.26ms
step:1250/1670 train_time:122824ms step_avg:98.26ms
step:1250/1670 val_loss:3.3805 train_time:122921ms step_avg:98.34ms
step:1251/1670 train_time:122944ms step_avg:98.28ms
step:1252/1670 train_time:123027ms step_avg:98.26ms
step:1253/1670 train_time:123127ms step_avg:98.27ms
step:1254/1670 train_time:123226ms step_avg:98.27ms
step:1255/1670 train_time:123322ms step_avg:98.26ms
step:1256/1670 train_time:123419ms step_avg:98.26ms
step:1257/1670 train_time:123516ms step_avg:98.26ms
step:1258/1670 train_time:123613ms step_avg:98.26ms
step:1259/1670 train_time:123710ms step_avg:98.26ms
step:1260/1670 train_time:123807ms step_avg:98.26ms
step:1261/1670 train_time:123908ms step_avg:98.26ms
step:1262/1670 train_time:124010ms step_avg:98.26ms
step:1263/1670 train_time:124111ms step_avg:98.27ms
step:1264/1670 train_time:124209ms step_avg:98.27ms
step:1265/1670 train_time:124308ms step_avg:98.27ms
step:1266/1670 train_time:124407ms step_avg:98.27ms
step:1267/1670 train_time:124505ms step_avg:98.27ms
step:1268/1670 train_time:124602ms step_avg:98.27ms
step:1269/1670 train_time:124698ms step_avg:98.27ms
step:1270/1670 train_time:124796ms step_avg:98.26ms
step:1271/1670 train_time:124894ms step_avg:98.26ms
step:1272/1670 train_time:124994ms step_avg:98.27ms
step:1273/1670 train_time:125094ms step_avg:98.27ms
step:1274/1670 train_time:125352ms step_avg:98.39ms
step:1275/1670 train_time:125536ms step_avg:98.46ms
step:1276/1670 train_time:125634ms step_avg:98.46ms
step:1277/1670 train_time:125731ms step_avg:98.46ms
step:1278/1670 train_time:125828ms step_avg:98.46ms
step:1279/1670 train_time:125925ms step_avg:98.46ms
step:1280/1670 train_time:126022ms step_avg:98.45ms
step:1281/1670 train_time:126119ms step_avg:98.45ms
step:1282/1670 train_time:126216ms step_avg:98.45ms
step:1283/1670 train_time:126314ms step_avg:98.45ms
step:1284/1670 train_time:126419ms step_avg:98.46ms
step:1285/1670 train_time:126520ms step_avg:98.46ms
step:1286/1670 train_time:126620ms step_avg:98.46ms
step:1287/1670 train_time:126719ms step_avg:98.46ms
step:1288/1670 train_time:126817ms step_avg:98.46ms
step:1289/1670 train_time:126914ms step_avg:98.46ms
step:1290/1670 train_time:127011ms step_avg:98.46ms
step:1291/1670 train_time:127109ms step_avg:98.46ms
step:1292/1670 train_time:127206ms step_avg:98.46ms
step:1293/1670 train_time:127304ms step_avg:98.46ms
step:1294/1670 train_time:127404ms step_avg:98.46ms
step:1295/1670 train_time:127504ms step_avg:98.46ms
step:1296/1670 train_time:127604ms step_avg:98.46ms
step:1297/1670 train_time:127703ms step_avg:98.46ms
step:1298/1670 train_time:127801ms step_avg:98.46ms
step:1299/1670 train_time:127899ms step_avg:98.46ms
step:1300/1670 train_time:127996ms step_avg:98.46ms
step:1301/1670 train_time:128094ms step_avg:98.46ms
step:1302/1670 train_time:128191ms step_avg:98.46ms
step:1303/1670 train_time:128289ms step_avg:98.46ms
step:1304/1670 train_time:128388ms step_avg:98.46ms
step:1305/1670 train_time:128488ms step_avg:98.46ms
step:1306/1670 train_time:128589ms step_avg:98.46ms
step:1307/1670 train_time:128690ms step_avg:98.46ms
step:1308/1670 train_time:128787ms step_avg:98.46ms
step:1309/1670 train_time:128886ms step_avg:98.46ms
step:1310/1670 train_time:128986ms step_avg:98.46ms
step:1311/1670 train_time:129086ms step_avg:98.46ms
step:1312/1670 train_time:129183ms step_avg:98.46ms
step:1313/1670 train_time:129280ms step_avg:98.46ms
step:1314/1670 train_time:129378ms step_avg:98.46ms
step:1315/1670 train_time:129475ms step_avg:98.46ms
step:1316/1670 train_time:129575ms step_avg:98.46ms
step:1317/1670 train_time:129674ms step_avg:98.46ms
step:1318/1670 train_time:129774ms step_avg:98.46ms
step:1319/1670 train_time:129874ms step_avg:98.46ms
step:1320/1670 train_time:129973ms step_avg:98.46ms
step:1321/1670 train_time:130072ms step_avg:98.46ms
step:1322/1670 train_time:130170ms step_avg:98.46ms
step:1323/1670 train_time:130268ms step_avg:98.46ms
step:1324/1670 train_time:130366ms step_avg:98.46ms
step:1325/1670 train_time:130465ms step_avg:98.46ms
step:1326/1670 train_time:130563ms step_avg:98.46ms
step:1327/1670 train_time:130661ms step_avg:98.46ms
step:1328/1670 train_time:130759ms step_avg:98.46ms
step:1329/1670 train_time:130857ms step_avg:98.46ms
step:1330/1670 train_time:130957ms step_avg:98.46ms
step:1331/1670 train_time:131055ms step_avg:98.46ms
step:1332/1670 train_time:131154ms step_avg:98.46ms
step:1333/1670 train_time:131253ms step_avg:98.46ms
step:1334/1670 train_time:131351ms step_avg:98.46ms
step:1335/1670 train_time:131449ms step_avg:98.46ms
step:1336/1670 train_time:131547ms step_avg:98.46ms
step:1337/1670 train_time:131646ms step_avg:98.46ms
step:1338/1670 train_time:131746ms step_avg:98.46ms
step:1339/1670 train_time:131847ms step_avg:98.47ms
step:1340/1670 train_time:131947ms step_avg:98.47ms
step:1341/1670 train_time:132047ms step_avg:98.47ms
step:1342/1670 train_time:132145ms step_avg:98.47ms
step:1343/1670 train_time:132244ms step_avg:98.47ms
step:1344/1670 train_time:132341ms step_avg:98.47ms
step:1345/1670 train_time:132439ms step_avg:98.47ms
step:1346/1670 train_time:132536ms step_avg:98.47ms
step:1347/1670 train_time:132635ms step_avg:98.47ms
step:1348/1670 train_time:132733ms step_avg:98.47ms
step:1349/1670 train_time:132833ms step_avg:98.47ms
step:1350/1670 train_time:132932ms step_avg:98.47ms
step:1351/1670 train_time:133031ms step_avg:98.47ms
step:1352/1670 train_time:133129ms step_avg:98.47ms
step:1353/1670 train_time:133229ms step_avg:98.47ms
step:1354/1670 train_time:133327ms step_avg:98.47ms
step:1355/1670 train_time:133426ms step_avg:98.47ms
step:1356/1670 train_time:133524ms step_avg:98.47ms
step:1357/1670 train_time:133623ms step_avg:98.47ms
step:1358/1670 train_time:133721ms step_avg:98.47ms
step:1359/1670 train_time:133820ms step_avg:98.47ms
step:1360/1670 train_time:133918ms step_avg:98.47ms
step:1361/1670 train_time:134016ms step_avg:98.47ms
step:1362/1670 train_time:134115ms step_avg:98.47ms
step:1363/1670 train_time:134213ms step_avg:98.47ms
step:1364/1670 train_time:134311ms step_avg:98.47ms
step:1365/1670 train_time:134409ms step_avg:98.47ms
step:1366/1670 train_time:134508ms step_avg:98.47ms
step:1367/1670 train_time:134606ms step_avg:98.47ms
step:1368/1670 train_time:134705ms step_avg:98.47ms
step:1369/1670 train_time:134803ms step_avg:98.47ms
step:1370/1670 train_time:134903ms step_avg:98.47ms
step:1371/1670 train_time:135001ms step_avg:98.47ms
step:1372/1670 train_time:135100ms step_avg:98.47ms
step:1373/1670 train_time:135199ms step_avg:98.47ms
step:1374/1670 train_time:135297ms step_avg:98.47ms
step:1375/1670 train_time:135396ms step_avg:98.47ms
step:1375/1670 val_loss:3.3434 train_time:135493ms step_avg:98.54ms
step:1376/1670 train_time:135517ms step_avg:98.49ms
step:1377/1670 train_time:135602ms step_avg:98.48ms
step:1378/1670 train_time:135701ms step_avg:98.48ms
step:1379/1670 train_time:135799ms step_avg:98.48ms
step:1380/1670 train_time:135897ms step_avg:98.48ms
step:1381/1670 train_time:135993ms step_avg:98.47ms
step:1382/1670 train_time:136091ms step_avg:98.47ms
step:1383/1670 train_time:136189ms step_avg:98.47ms
step:1384/1670 train_time:136286ms step_avg:98.47ms
step:1385/1670 train_time:136383ms step_avg:98.47ms
step:1386/1670 train_time:136484ms step_avg:98.47ms
step:1387/1670 train_time:136584ms step_avg:98.47ms
step:1388/1670 train_time:136686ms step_avg:98.48ms
step:1389/1670 train_time:136784ms step_avg:98.48ms
step:1390/1670 train_time:136882ms step_avg:98.48ms
step:1391/1670 train_time:136981ms step_avg:98.48ms
step:1392/1670 train_time:137079ms step_avg:98.48ms
step:1393/1670 train_time:137176ms step_avg:98.48ms
step:1394/1670 train_time:137273ms step_avg:98.47ms
step:1395/1670 train_time:137372ms step_avg:98.47ms
step:1396/1670 train_time:137472ms step_avg:98.48ms
step:1397/1670 train_time:137571ms step_avg:98.48ms
step:1398/1670 train_time:137672ms step_avg:98.48ms
step:1399/1670 train_time:137771ms step_avg:98.48ms
step:1400/1670 train_time:137870ms step_avg:98.48ms
step:1401/1670 train_time:137968ms step_avg:98.48ms
step:1402/1670 train_time:138067ms step_avg:98.48ms
step:1403/1670 train_time:138166ms step_avg:98.48ms
step:1404/1670 train_time:138264ms step_avg:98.48ms
step:1405/1670 train_time:138362ms step_avg:98.48ms
step:1406/1670 train_time:138461ms step_avg:98.48ms
step:1407/1670 train_time:138561ms step_avg:98.48ms
step:1408/1670 train_time:138660ms step_avg:98.48ms
step:1409/1670 train_time:138760ms step_avg:98.48ms
step:1410/1670 train_time:138858ms step_avg:98.48ms
step:1411/1670 train_time:138957ms step_avg:98.48ms
step:1412/1670 train_time:139056ms step_avg:98.48ms
step:1413/1670 train_time:139155ms step_avg:98.48ms
step:1414/1670 train_time:139254ms step_avg:98.48ms
step:1415/1670 train_time:139353ms step_avg:98.48ms
step:1416/1670 train_time:139451ms step_avg:98.48ms
step:1417/1670 train_time:139550ms step_avg:98.48ms
step:1418/1670 train_time:139649ms step_avg:98.48ms
step:1419/1670 train_time:139747ms step_avg:98.48ms
step:1420/1670 train_time:139845ms step_avg:98.48ms
step:1421/1670 train_time:139943ms step_avg:98.48ms
step:1422/1670 train_time:140042ms step_avg:98.48ms
step:1423/1670 train_time:140141ms step_avg:98.48ms
step:1424/1670 train_time:140239ms step_avg:98.48ms
step:1425/1670 train_time:140337ms step_avg:98.48ms
step:1426/1670 train_time:140436ms step_avg:98.48ms
step:1427/1670 train_time:140536ms step_avg:98.48ms
step:1428/1670 train_time:140634ms step_avg:98.48ms
step:1429/1670 train_time:140734ms step_avg:98.48ms
step:1430/1670 train_time:140834ms step_avg:98.49ms
step:1431/1670 train_time:140934ms step_avg:98.49ms
step:1432/1670 train_time:141032ms step_avg:98.49ms
step:1433/1670 train_time:141131ms step_avg:98.49ms
step:1434/1670 train_time:141230ms step_avg:98.49ms
step:1435/1670 train_time:141327ms step_avg:98.49ms
step:1436/1670 train_time:141425ms step_avg:98.49ms
step:1437/1670 train_time:141522ms step_avg:98.48ms
step:1438/1670 train_time:141620ms step_avg:98.48ms
step:1439/1670 train_time:141718ms step_avg:98.48ms
step:1440/1670 train_time:141817ms step_avg:98.48ms
step:1441/1670 train_time:141917ms step_avg:98.49ms
step:1442/1670 train_time:142017ms step_avg:98.49ms
step:1443/1670 train_time:142115ms step_avg:98.49ms
step:1444/1670 train_time:142215ms step_avg:98.49ms
step:1445/1670 train_time:142316ms step_avg:98.49ms
step:1446/1670 train_time:142415ms step_avg:98.49ms
step:1447/1670 train_time:142514ms step_avg:98.49ms
step:1448/1670 train_time:142613ms step_avg:98.49ms
step:1449/1670 train_time:142712ms step_avg:98.49ms
step:1450/1670 train_time:142810ms step_avg:98.49ms
step:1451/1670 train_time:142907ms step_avg:98.49ms
step:1452/1670 train_time:143007ms step_avg:98.49ms
step:1453/1670 train_time:143106ms step_avg:98.49ms
step:1454/1670 train_time:143203ms step_avg:98.49ms
step:1455/1670 train_time:143302ms step_avg:98.49ms
step:1456/1670 train_time:143401ms step_avg:98.49ms
step:1457/1670 train_time:143500ms step_avg:98.49ms
step:1458/1670 train_time:143598ms step_avg:98.49ms
step:1459/1670 train_time:143698ms step_avg:98.49ms
step:1460/1670 train_time:143797ms step_avg:98.49ms
step:1461/1670 train_time:143895ms step_avg:98.49ms
step:1462/1670 train_time:143994ms step_avg:98.49ms
step:1463/1670 train_time:144094ms step_avg:98.49ms
step:1464/1670 train_time:144193ms step_avg:98.49ms
step:1465/1670 train_time:144293ms step_avg:98.49ms
step:1466/1670 train_time:144392ms step_avg:98.49ms
step:1467/1670 train_time:144490ms step_avg:98.49ms
step:1468/1670 train_time:144588ms step_avg:98.49ms
step:1469/1670 train_time:144686ms step_avg:98.49ms
step:1470/1670 train_time:144784ms step_avg:98.49ms
step:1471/1670 train_time:144882ms step_avg:98.49ms
step:1472/1670 train_time:144980ms step_avg:98.49ms
step:1473/1670 train_time:145079ms step_avg:98.49ms
step:1474/1670 train_time:145179ms step_avg:98.49ms
step:1475/1670 train_time:145278ms step_avg:98.49ms
step:1476/1670 train_time:145378ms step_avg:98.49ms
step:1477/1670 train_time:145477ms step_avg:98.49ms
step:1478/1670 train_time:145576ms step_avg:98.50ms
step:1479/1670 train_time:145675ms step_avg:98.50ms
step:1480/1670 train_time:145774ms step_avg:98.50ms
step:1481/1670 train_time:145876ms step_avg:98.50ms
step:1482/1670 train_time:145975ms step_avg:98.50ms
step:1483/1670 train_time:146074ms step_avg:98.50ms
step:1484/1670 train_time:146172ms step_avg:98.50ms
step:1485/1670 train_time:146500ms step_avg:98.65ms
step:1486/1670 train_time:146574ms step_avg:98.64ms
step:1487/1670 train_time:146670ms step_avg:98.63ms
step:1488/1670 train_time:146766ms step_avg:98.63ms
step:1489/1670 train_time:146863ms step_avg:98.63ms
step:1490/1670 train_time:146961ms step_avg:98.63ms
step:1491/1670 train_time:147058ms step_avg:98.63ms
step:1492/1670 train_time:147156ms step_avg:98.63ms
step:1493/1670 train_time:147253ms step_avg:98.63ms
step:1494/1670 train_time:147351ms step_avg:98.63ms
step:1495/1670 train_time:147451ms step_avg:98.63ms
step:1496/1670 train_time:147554ms step_avg:98.63ms
step:1497/1670 train_time:147655ms step_avg:98.63ms
step:1498/1670 train_time:147753ms step_avg:98.63ms
step:1499/1670 train_time:147852ms step_avg:98.63ms
step:1500/1670 train_time:147950ms step_avg:98.63ms
step:1500/1670 val_loss:3.3113 train_time:148046ms step_avg:98.70ms
step:1501/1670 train_time:148069ms step_avg:98.65ms
step:1502/1670 train_time:148151ms step_avg:98.64ms
step:1503/1670 train_time:148251ms step_avg:98.64ms
step:1504/1670 train_time:148348ms step_avg:98.64ms
step:1505/1670 train_time:148445ms step_avg:98.63ms
step:1506/1670 train_time:148541ms step_avg:98.63ms
step:1507/1670 train_time:148638ms step_avg:98.63ms
step:1508/1670 train_time:148736ms step_avg:98.63ms
step:1509/1670 train_time:148833ms step_avg:98.63ms
step:1510/1670 train_time:148931ms step_avg:98.63ms
step:1511/1670 train_time:149031ms step_avg:98.63ms
step:1512/1670 train_time:149132ms step_avg:98.63ms
step:1513/1670 train_time:149232ms step_avg:98.63ms
step:1514/1670 train_time:149331ms step_avg:98.63ms
step:1515/1670 train_time:149430ms step_avg:98.63ms
step:1516/1670 train_time:149528ms step_avg:98.63ms
step:1517/1670 train_time:149625ms step_avg:98.63ms
step:1518/1670 train_time:149722ms step_avg:98.63ms
step:1519/1670 train_time:149820ms step_avg:98.63ms
step:1520/1670 train_time:149918ms step_avg:98.63ms
step:1521/1670 train_time:150018ms step_avg:98.63ms
step:1522/1670 train_time:150118ms step_avg:98.63ms
step:1523/1670 train_time:150218ms step_avg:98.63ms
step:1524/1670 train_time:150318ms step_avg:98.63ms
step:1525/1670 train_time:150419ms step_avg:98.64ms
step:1526/1670 train_time:150518ms step_avg:98.64ms
step:1527/1670 train_time:150618ms step_avg:98.64ms
step:1528/1670 train_time:150716ms step_avg:98.64ms
step:1529/1670 train_time:150813ms step_avg:98.64ms
step:1530/1670 train_time:150910ms step_avg:98.63ms
step:1531/1670 train_time:151008ms step_avg:98.63ms
step:1532/1670 train_time:151105ms step_avg:98.63ms
step:1533/1670 train_time:151204ms step_avg:98.63ms
step:1534/1670 train_time:151303ms step_avg:98.63ms
step:1535/1670 train_time:151401ms step_avg:98.63ms
step:1536/1670 train_time:151500ms step_avg:98.63ms
step:1537/1670 train_time:151599ms step_avg:98.63ms
step:1538/1670 train_time:151697ms step_avg:98.63ms
step:1539/1670 train_time:151795ms step_avg:98.63ms
step:1540/1670 train_time:151894ms step_avg:98.63ms
step:1541/1670 train_time:151994ms step_avg:98.63ms
step:1542/1670 train_time:152094ms step_avg:98.63ms
step:1543/1670 train_time:152194ms step_avg:98.64ms
step:1544/1670 train_time:152294ms step_avg:98.64ms
step:1545/1670 train_time:152394ms step_avg:98.64ms
step:1546/1670 train_time:152491ms step_avg:98.64ms
step:1547/1670 train_time:152589ms step_avg:98.64ms
step:1548/1670 train_time:152687ms step_avg:98.64ms
step:1549/1670 train_time:152785ms step_avg:98.63ms
step:1550/1670 train_time:152882ms step_avg:98.63ms
step:1551/1670 train_time:152981ms step_avg:98.63ms
step:1552/1670 train_time:153080ms step_avg:98.63ms
step:1553/1670 train_time:153179ms step_avg:98.63ms
step:1554/1670 train_time:153278ms step_avg:98.63ms
step:1555/1670 train_time:153378ms step_avg:98.64ms
step:1556/1670 train_time:153477ms step_avg:98.64ms
step:1557/1670 train_time:153576ms step_avg:98.64ms
step:1558/1670 train_time:153674ms step_avg:98.64ms
step:1559/1670 train_time:153772ms step_avg:98.64ms
step:1560/1670 train_time:153871ms step_avg:98.64ms
step:1561/1670 train_time:153968ms step_avg:98.63ms
step:1562/1670 train_time:154066ms step_avg:98.63ms
step:1563/1670 train_time:154164ms step_avg:98.63ms
step:1564/1670 train_time:154262ms step_avg:98.63ms
step:1565/1670 train_time:154362ms step_avg:98.63ms
step:1566/1670 train_time:154461ms step_avg:98.63ms
step:1567/1670 train_time:154559ms step_avg:98.63ms
step:1568/1670 train_time:154658ms step_avg:98.63ms
step:1569/1670 train_time:154757ms step_avg:98.63ms
step:1570/1670 train_time:154855ms step_avg:98.63ms
step:1571/1670 train_time:154953ms step_avg:98.63ms
step:1572/1670 train_time:155053ms step_avg:98.63ms
step:1573/1670 train_time:155151ms step_avg:98.63ms
step:1574/1670 train_time:155250ms step_avg:98.63ms
step:1575/1670 train_time:155350ms step_avg:98.63ms
step:1576/1670 train_time:155447ms step_avg:98.63ms
step:1577/1670 train_time:155545ms step_avg:98.63ms
step:1578/1670 train_time:155643ms step_avg:98.63ms
step:1579/1670 train_time:155742ms step_avg:98.63ms
step:1580/1670 train_time:155841ms step_avg:98.63ms
step:1581/1670 train_time:155941ms step_avg:98.63ms
step:1582/1670 train_time:156039ms step_avg:98.63ms
step:1583/1670 train_time:156138ms step_avg:98.63ms
step:1584/1670 train_time:156236ms step_avg:98.63ms
step:1585/1670 train_time:156335ms step_avg:98.63ms
step:1586/1670 train_time:156436ms step_avg:98.64ms
step:1587/1670 train_time:156536ms step_avg:98.64ms
step:1588/1670 train_time:156635ms step_avg:98.64ms
step:1589/1670 train_time:156735ms step_avg:98.64ms
step:1590/1670 train_time:156833ms step_avg:98.64ms
step:1591/1670 train_time:156932ms step_avg:98.64ms
step:1592/1670 train_time:157030ms step_avg:98.64ms
step:1593/1670 train_time:157129ms step_avg:98.64ms
step:1594/1670 train_time:157226ms step_avg:98.64ms
step:1595/1670 train_time:157323ms step_avg:98.64ms
step:1596/1670 train_time:157421ms step_avg:98.63ms
step:1597/1670 train_time:157520ms step_avg:98.63ms
step:1598/1670 train_time:157619ms step_avg:98.64ms
step:1599/1670 train_time:157719ms step_avg:98.64ms
step:1600/1670 train_time:157816ms step_avg:98.64ms
step:1601/1670 train_time:157917ms step_avg:98.64ms
step:1602/1670 train_time:158016ms step_avg:98.64ms
step:1603/1670 train_time:158115ms step_avg:98.64ms
step:1604/1670 train_time:158214ms step_avg:98.64ms
step:1605/1670 train_time:158315ms step_avg:98.64ms
step:1606/1670 train_time:158415ms step_avg:98.64ms
step:1607/1670 train_time:158514ms step_avg:98.64ms
step:1608/1670 train_time:158614ms step_avg:98.64ms
step:1609/1670 train_time:158712ms step_avg:98.64ms
step:1610/1670 train_time:158810ms step_avg:98.64ms
step:1611/1670 train_time:158909ms step_avg:98.64ms
step:1612/1670 train_time:159006ms step_avg:98.64ms
step:1613/1670 train_time:159104ms step_avg:98.64ms
step:1614/1670 train_time:159202ms step_avg:98.64ms
step:1615/1670 train_time:159300ms step_avg:98.64ms
step:1616/1670 train_time:159399ms step_avg:98.64ms
step:1617/1670 train_time:159498ms step_avg:98.64ms
step:1618/1670 train_time:159598ms step_avg:98.64ms
step:1619/1670 train_time:159698ms step_avg:98.64ms
step:1620/1670 train_time:159798ms step_avg:98.64ms
step:1621/1670 train_time:159897ms step_avg:98.64ms
step:1622/1670 train_time:159996ms step_avg:98.64ms
step:1623/1670 train_time:160095ms step_avg:98.64ms
step:1624/1670 train_time:160196ms step_avg:98.64ms
step:1625/1670 train_time:160296ms step_avg:98.64ms
step:1625/1670 val_loss:3.2842 train_time:160393ms step_avg:98.70ms
step:1626/1670 train_time:160416ms step_avg:98.66ms
step:1627/1670 train_time:160497ms step_avg:98.65ms
step:1628/1670 train_time:160596ms step_avg:98.65ms
step:1629/1670 train_time:160694ms step_avg:98.65ms
step:1630/1670 train_time:160792ms step_avg:98.65ms
step:1631/1670 train_time:160890ms step_avg:98.64ms
step:1632/1670 train_time:160987ms step_avg:98.64ms
step:1633/1670 train_time:161084ms step_avg:98.64ms
step:1634/1670 train_time:161182ms step_avg:98.64ms
step:1635/1670 train_time:161279ms step_avg:98.64ms
step:1636/1670 train_time:161378ms step_avg:98.64ms
step:1637/1670 train_time:161478ms step_avg:98.64ms
step:1638/1670 train_time:161577ms step_avg:98.64ms
step:1639/1670 train_time:161676ms step_avg:98.64ms
step:1640/1670 train_time:161774ms step_avg:98.64ms
step:1641/1670 train_time:161872ms step_avg:98.64ms
step:1642/1670 train_time:161970ms step_avg:98.64ms
step:1643/1670 train_time:162068ms step_avg:98.64ms
step:1644/1670 train_time:162166ms step_avg:98.64ms
step:1645/1670 train_time:162265ms step_avg:98.64ms
step:1646/1670 train_time:162364ms step_avg:98.64ms
step:1647/1670 train_time:162464ms step_avg:98.64ms
step:1648/1670 train_time:162565ms step_avg:98.64ms
step:1649/1670 train_time:162666ms step_avg:98.65ms
step:1650/1670 train_time:162767ms step_avg:98.65ms
step:1651/1670 train_time:162865ms step_avg:98.65ms
step:1652/1670 train_time:162964ms step_avg:98.65ms
step:1653/1670 train_time:163063ms step_avg:98.65ms
step:1654/1670 train_time:163160ms step_avg:98.65ms
step:1655/1670 train_time:163257ms step_avg:98.64ms
step:1656/1670 train_time:163354ms step_avg:98.64ms
step:1657/1670 train_time:163453ms step_avg:98.64ms
step:1658/1670 train_time:163553ms step_avg:98.64ms
step:1659/1670 train_time:163653ms step_avg:98.65ms
step:1660/1670 train_time:163752ms step_avg:98.65ms
step:1661/1670 train_time:163850ms step_avg:98.65ms
step:1662/1670 train_time:163949ms step_avg:98.65ms
step:1663/1670 train_time:164047ms step_avg:98.65ms
step:1664/1670 train_time:164146ms step_avg:98.65ms
step:1665/1670 train_time:164244ms step_avg:98.64ms
step:1666/1670 train_time:164341ms step_avg:98.64ms
step:1667/1670 train_time:164440ms step_avg:98.64ms
step:1668/1670 train_time:164539ms step_avg:98.64ms
step:1669/1670 train_time:164639ms step_avg:98.65ms
step:1670/1670 train_time:164737ms step_avg:98.64ms
step:1670/1670 val_loss:3.2768 train_time:164833ms step_avg:98.70ms
peak memory allocated: 34073 MiB reserved: 49756 MiB
