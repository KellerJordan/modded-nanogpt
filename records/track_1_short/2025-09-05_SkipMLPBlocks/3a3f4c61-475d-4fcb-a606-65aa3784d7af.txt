import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
import uuid
import time
import copy
import glob
from dataclasses import dataclass
from functools import lru_cache
from pathlib import Path

os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "expandable_segments:True"
import torch
torch.empty(1, device="cuda", requires_grad=True).backward() # prevents a bug on some systems
from torch import Tensor, nn
import torch.nn.functional as F
import torch.distributed as dist
#torch._inductor.config.coordinate_descent_tuning = True # we have banned this flag for new records because it causes compilation to take 30min
import numpy as np
import triton
import triton.language as tl
from flash_attn_interface import flash_attn_varlen_func
import torch._dynamo as dynamo
dynamo.config.recompile_limit = 64

# -----------------------------------------------------------------------------
# Custom operators: FP8 matmul by @YouJiacheng

@torch.library.custom_op("nanogpt::mm", mutates_args=())
def mm_op(x: Tensor, w: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor, Tensor]:
    @torch.compile
    def impl(x: Tensor, w: Tensor):
        assert x.is_contiguous() and w.is_contiguous()
        x_f8 = x.div(x_s).to(torch.float8_e4m3fn)
        w_f8 = w.div(w_s).to(torch.float8_e4m3fn)
        out = torch._scaled_mm(
            x_f8,
            w_f8.T,
            out_dtype=torch.bfloat16,
            scale_a=x.new_tensor(x_s, dtype=torch.float32),
            scale_b=x.new_tensor(w_s, dtype=torch.float32),
            use_fast_accum=True,
        )
        return out, x_f8, w_f8

    return impl(x, w)

@mm_op.register_fake
def _(x: Tensor, w: Tensor, *_):
    assert x.ndim == w.ndim == 2
    assert x.shape[1] == w.shape[1]
    assert x.device == w.device
    assert x.is_contiguous() and w.is_contiguous()
    return x @ w.T, x.to(torch.float8_e4m3fn), w.to(torch.float8_e4m3fn)

@torch.library.custom_op("nanogpt::mm_backward", mutates_args=())
def mm_backward_op(g: Tensor, x_f8: Tensor, w_f8: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor]:
    @torch.compile
    def impl(grad: Tensor, x_f8: Tensor, w_f8: Tensor):
        assert grad.is_contiguous()
        x_inv_s = grad.new_tensor(x_s, dtype=torch.float32)
        w_inv_s = grad.new_tensor(w_s, dtype=torch.float32)
        grad_inv_s = grad.new_tensor(grad_s, dtype=torch.float32)
        grad_f8 = grad.div(grad_s).to(torch.float8_e5m2)
        grad_x = torch._scaled_mm(
            grad_f8,
            w_f8.T.contiguous().T,
            out_dtype=torch.bfloat16,
            scale_a=grad_inv_s,
            scale_b=w_inv_s,
            use_fast_accum=False,
        )
        # faster than grad_f8_t @ x_f8, for (d_out, d_in) == (50304, 768)
        grad_w = torch._scaled_mm(
            x_f8.T.contiguous(),
            grad_f8.T.contiguous().T,
            out_dtype=torch.float32,
            scale_a=x_inv_s,
            scale_b=grad_inv_s,
            use_fast_accum=False,
        ).T
        return grad_x, grad_w

    return impl(g, x_f8, w_f8)

@mm_backward_op.register_fake
def _(g: Tensor, x_f8: Tensor, w_f8: Tensor, *_):
    return x_f8.to(torch.bfloat16), w_f8.T.contiguous().T.to(torch.float32)

def backward(ctx, grad_out: Tensor, *_):
    x_f8, w_f8 = ctx.saved_tensors
    x_s, w_s, grad_s = ctx.scales
    grad_x, grad_w = torch.ops.nanogpt.mm_backward(
        grad_out, x_f8, w_f8, x_s, w_s, grad_s
    )
    return grad_x, grad_w, None, None, None

def setup_context(ctx: torch.autograd.function.FunctionCtx, inputs, output):
    *_, x_s, w_s, grad_s = inputs
    _, x_f8, w_f8 = output
    ctx.save_for_backward(x_f8, w_f8)
    ctx.scales = x_s, w_s, grad_s
    ctx.set_materialize_grads(False)

mm_op.register_autograd(backward, setup_context=setup_context)

# -----------------------------------------------------------------------------
# Triton kernel for symmetric matrix multiplication by @byronxu99

def _get_autotune_configs():
    return [
        triton.Config(
            {
                "BLOCK_SIZE_M": bm,
                "BLOCK_SIZE_N": bn,
                "BLOCK_SIZE_K": bk,
                "GROUP_SIZE_M": 8,
                "LOWER_UPPER": 1,
            },
            num_stages=stages,
            num_warps=warps,
        )
        for bm in [64, 128]
        for bn in [64, 128, 256]
        for bk in [64, 128]
        for stages, warps in [(3, 4), (3, 8), (4, 4)]
        if bm // bn <= 2 and bn // bm <= 2
    ]

@triton.jit
def _pid_to_block(
    pid,
    M,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
):
    # Split output matrix into blocks of size (BLOCK_SIZE_M, BLOCK_SIZE_N)
    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)
    num_pid_n = tl.cdiv(M, BLOCK_SIZE_N)

    # Map PID to a single matrix in batch
    batch_idx = pid // (num_pid_m * num_pid_n)
    pid = pid % (num_pid_m * num_pid_n)

    # Map PID to 2D grid of blocks
    pid_m = pid // num_pid_n
    pid_n = pid % num_pid_n
    pid_m, pid_n = tl.swizzle2d(pid_m, pid_n, num_pid_m, num_pid_n, GROUP_SIZE_M)

    m_idx = pid_m * BLOCK_SIZE_M
    n_idx = pid_n * BLOCK_SIZE_N
    return batch_idx, m_idx, n_idx

@triton.autotune(
    configs=_get_autotune_configs(),
    key=["M", "K", "a_stride_r", "a_stride_c", "c_stride_r", "c_stride_c"],
)
@triton.jit
def ns_line_1_kernel(
    A_ptr, C_ptr,
    M, K,
    a_stride_b, a_stride_r, a_stride_c,
    c_stride_b, c_stride_r, c_stride_c,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    BLOCK_SIZE_K: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
    LOWER_UPPER: tl.constexpr,
):
    pid = tl.program_id(axis=0)
    batch_idx, m_idx, n_idx = _pid_to_block(
        pid, M, BLOCK_SIZE_M, BLOCK_SIZE_N, GROUP_SIZE_M
    )

    # Skip blocks that don't need to be computed
    skip_block_below_diag = (LOWER_UPPER == 0) and (n_idx + BLOCK_SIZE_N <= m_idx)
    skip_block_above_diag = (LOWER_UPPER != 0) and (m_idx + BLOCK_SIZE_M <= n_idx)
    if skip_block_below_diag or skip_block_above_diag:
        return

    # Index into one matrix of batch
    A_ptr += batch_idx * a_stride_b
    C_ptr += batch_idx * c_stride_b

    # Create pointer arrays for A and A.T
    offs_m = (m_idx + tl.arange(0, BLOCK_SIZE_M)) % M
    offs_n = (n_idx + tl.arange(0, BLOCK_SIZE_N)) % M
    offs_k = tl.arange(0, BLOCK_SIZE_K)
    a_ptrs = A_ptr + (offs_m[:, None] * a_stride_r + offs_k[None, :] * a_stride_c)
    at_ptrs = A_ptr + (offs_k[:, None] * a_stride_c + offs_n[None, :] * a_stride_r)

    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)

    # Accumulate over blocks of K
    for k in tl.range(0, tl.cdiv(K, BLOCK_SIZE_K)):
        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k * BLOCK_SIZE_K, other=0.0)
        at = tl.load(at_ptrs, mask=offs_k[:, None] < K - k * BLOCK_SIZE_K, other=0.0)
        accumulator = tl.dot(a, at, accumulator)
        a_ptrs += BLOCK_SIZE_K * a_stride_c
        at_ptrs += BLOCK_SIZE_K * a_stride_c

    out_dtype = C_ptr.dtype.element_ty
    output = accumulator.to(out_dtype)

    # Store block of C
    offs_cm = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_cn = n_idx + tl.arange(0, BLOCK_SIZE_N)
    c_ptrs = C_ptr + (offs_cm[:, None] * c_stride_r + offs_cn[None, :] * c_stride_c)
    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < M)
    tl.store(c_ptrs, output, mask=c_mask)

    # Store block of C mirrored across the diagonal
    c_ptrs_t = C_ptr + (offs_cn[:, None] * c_stride_r + offs_cm[None, :] * c_stride_c)
    c_mask_t = (offs_cn[:, None] < M) & (offs_cm[None, :] < M)
    tl.store(c_ptrs_t, output.T, mask=c_mask_t)

def ns_line_1(A: torch.Tensor, out: torch.Tensor):
    """
    Launch Triton kernel to compute C = A @ A.T
    """
    assert A.ndim == 2 or A.ndim == 3
    M, K = A.shape[-2:]
    assert out.size(-2) == M, "Output matrix has incorrect shape"
    assert out.size(-1) == M, "Output matrix has incorrect shape"

    batch_size = A.size(0) if A.ndim == 3 else 1
    input_batch_stride = A.stride(0) if A.ndim == 3 else 0
    output_batch_stride = out.stride(0) if out.ndim == 3 else 0

    grid = lambda meta: (
        batch_size * triton.cdiv(M, meta["BLOCK_SIZE_M"]) * triton.cdiv(M, meta["BLOCK_SIZE_N"]),
    )
    ns_line_1_kernel[grid](
        A_ptr=A,
        C_ptr=out,
        M=M,
        K=K,
        a_stride_b=input_batch_stride,
        a_stride_r=A.stride(-2),
        a_stride_c=A.stride(-1),
        c_stride_b=output_batch_stride,
        c_stride_r=out.stride(-2),
        c_stride_c=out.stride(-1),
    )
    return out

@triton.autotune(
    configs=_get_autotune_configs(),
    key=["M", "a_stride_r", "a_stride_c", "c_stride_r", "c_stride_c"],
)
@triton.jit
def ns_line_2_kernel(
    A_ptr, C_ptr,
    M,
    a_stride_b, a_stride_r, a_stride_c,
    c_stride_b, c_stride_r, c_stride_c,
    alpha, beta,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    BLOCK_SIZE_K: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
    LOWER_UPPER: tl.constexpr,
):
    # This is mostly duplicated from ns_line_1_kernel, but also loads and adds a block of A
    # Performance is slightly slower than ns_line_1_kernel, so we use two separate kernels
    pid = tl.program_id(axis=0)
    batch_idx, m_idx, n_idx = _pid_to_block(
        pid, M, BLOCK_SIZE_M, BLOCK_SIZE_N, GROUP_SIZE_M
    )

    # Skip blocks that don't need to be computed
    skip_block_below_diag = (LOWER_UPPER == 0) and (n_idx + BLOCK_SIZE_N <= m_idx)
    skip_block_above_diag = (LOWER_UPPER != 0) and (m_idx + BLOCK_SIZE_M <= n_idx)
    if skip_block_below_diag or skip_block_above_diag:
        return

    # Index into one matrix of batch
    A_ptr += batch_idx * a_stride_b
    C_ptr += batch_idx * c_stride_b

    # Create pointer arrays for A and A.T
    offs_m = (m_idx + tl.arange(0, BLOCK_SIZE_M)) % M
    offs_n = (n_idx + tl.arange(0, BLOCK_SIZE_N)) % M
    offs_k = tl.arange(0, BLOCK_SIZE_K)
    a_ptrs = A_ptr + (offs_m[:, None] * a_stride_r + offs_k[None, :] * a_stride_c)
    at_ptrs = A_ptr + (offs_k[:, None] * a_stride_c + offs_n[None, :] * a_stride_r)

    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)

    # Accumulate over blocks of K
    for k in tl.range(0, tl.cdiv(M, BLOCK_SIZE_K)):
        a = tl.load(a_ptrs, mask=offs_k[None, :] < M - k * BLOCK_SIZE_K, other=0.0)
        at = tl.load(at_ptrs, mask=offs_k[:, None] < M - k * BLOCK_SIZE_K, other=0.0)
        accumulator = tl.dot(a, at, accumulator)
        a_ptrs += BLOCK_SIZE_K * a_stride_c
        at_ptrs += BLOCK_SIZE_K * a_stride_c

    # Load block of A to add (corresponds to the current block of C)
    offs_am = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_an = n_idx + tl.arange(0, BLOCK_SIZE_N)
    a_add_ptrs = A_ptr + (offs_am[:, None] * a_stride_r + offs_an[None, :] * a_stride_c)
    a_add_mask = (offs_am[:, None] < M) & (offs_an[None, :] < M)
    a_add = tl.load(a_add_ptrs, mask=a_add_mask, other=0.0).to(tl.float32)

    # Apply alpha and beta
    accumulator *= alpha
    accumulator += a_add * beta

    out_dtype = C_ptr.dtype.element_ty
    output = accumulator.to(out_dtype)

    # Store block of C
    offs_cm = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_cn = n_idx + tl.arange(0, BLOCK_SIZE_N)
    c_ptrs = C_ptr + (offs_cm[:, None] * c_stride_r + offs_cn[None, :] * c_stride_c)
    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < M)
    tl.store(c_ptrs, output, mask=c_mask)

    # Store block of C mirrored across the diagonal
    c_ptrs_t = C_ptr + (offs_cn[:, None] * c_stride_r + offs_cm[None, :] * c_stride_c)
    c_mask_t = (offs_cn[:, None] < M) & (offs_cm[None, :] < M)
    tl.store(c_ptrs_t, output.T, mask=c_mask_t)

def ns_line_2(A: torch.Tensor, alpha: float, beta: float, out: torch.Tensor):
    """
    Launch Triton kernel to compute C = alpha * A @ A.T + beta * A
    """
    assert A.ndim == 2 or A.ndim == 3
    M, K = A.shape[-2:]
    assert M == K, "Input matrix must be square"
    assert out.size(-2) == M
    assert out.size(-1) == M

    batch_size = A.size(0) if A.ndim == 3 else 1
    input_batch_stride = A.stride(0) if A.ndim == 3 else 0
    output_batch_stride = out.stride(0) if out.ndim == 3 else 0

    grid = lambda meta: (
        batch_size * triton.cdiv(M, meta["BLOCK_SIZE_M"]) * triton.cdiv(M, meta["BLOCK_SIZE_N"]),
    )
    ns_line_2_kernel[grid](
        A_ptr=A,
        C_ptr=out,
        M=M,
        a_stride_b=input_batch_stride,
        a_stride_r=A.stride(-2),
        a_stride_c=A.stride(-1),
        c_stride_b=output_batch_stride,
        c_stride_r=out.stride(-2),
        c_stride_c=out.stride(-1),
        alpha=alpha,
        beta=beta,
    )
    return out

@torch.compile(dynamic=False, fullgraph=True) # Must use dynamic=False or else it's much slower
def newton_schulz_triton(G: torch.Tensor):
    a, b, c = (3.4445, -4.7750, 2.0315)
    X = G.bfloat16()
    if G.size(-2) > G.size(-1):
        X = X.mT

    # Ensure spectral norm is at most 1
    X = X / (X.norm(dim=(-2, -1), keepdim=True) + 1e-7)

    # Allocate buffers
    X = X.contiguous()
    A = torch.empty((*X.shape[:-1], X.size(-2)), device=X.device, dtype=X.dtype)
    B = torch.empty_like(A)
    C = torch.empty_like(X)

    ns_line_3 = torch.baddbmm if X.ndim > 2 else torch.addmm

    # Perform the NS iterations
    for _ in range(5):
        ns_line_1(X, out=A)  # A = X @ X.mT
        ns_line_2(A, alpha=c, beta=b, out=B)  # B = b * A + c * A @ A
        ns_line_3(X, B, X, beta=a, out=C)  # C = a * X + B @ X
        X, C = C, X  # Swap references to avoid unnecessary copies

    if G.size(-2) > G.size(-1):
        X = X.mT
    return X

# -----------------------------------------------------------------------------
# Muon optimizer

class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    https://kellerjordan.github.io/posts/muon/

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Warning: This optimizer should not be used for the embedding layer, the final fully connected layer,
    or any {0,1}-D parameters; those should all be optimized by a standard method (e.g., AdamW).
    """
    def __init__(self, params, lr=0.02, weight_decay=0.01, momentum=0.95):
        defaults = dict(lr=lr, weight_decay=weight_decay, momentum=momentum)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)

    @torch.no_grad()
    def step(self):
        # Efficient systems-wise implementation of step developed by @YouJiacheng,
        # @KonstantinWilleke, @alexrgilbert, @adricarda, @tuttyfrutyee, @vdlad,
        # @ryanyang0, and @vagrawal.
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_gather_futures: list[torch.Future] = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            grad = torch.empty_like(params[-1])
            grad_pad = [param.grad for param in params] + [torch.zeros_like(params[-1])] * world_size
            for base_i in range(0, len(params), world_size):
                if base_i + rank < len(params):
                    grad = params[base_i + rank].grad
                # This gives strange dynamo warnings
                reduce_scatter_futures.append(dist.reduce_scatter(grad, grad_pad[base_i:base_i + world_size], op=dist.ReduceOp.AVG, async_op=True).get_future())

        idx = 0
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            params_pad = params + [torch.empty_like(params[-1])] * world_size
            momentum = group["momentum"]
            for base_i in range(0, len(params), world_size):
                reduce_scatter_futures[idx].wait()
                if base_i + rank < len(params):
                    p = params[base_i + rank]
                    grad = p.grad
                    eff_lr = group["lr"] * max(1, p.size(-2) / p.size(-1)) ** 0.5 * getattr(p, "lr_mul", 1.0)
                    eff_weight_decay = group["lr"] * group["weight_decay"] * getattr(p, "wd_mul", 1.0)
                    state = self.state[p]
                    if len(state) == 0:
                        state["momentum_buffer"] = torch.zeros_like(grad)
                    momentum_buffer = state["momentum_buffer"]
                    p.mul_(1 - eff_weight_decay)
                    momentum_buffer.lerp_(grad, 1 - momentum)
                    grad = grad.lerp_(momentum_buffer, momentum)
                    v = newton_schulz_triton(grad)
                    p.add_(other=v, alpha=-eff_lr)
                idx += 1
                all_gather_futures.append(dist.all_gather(params_pad[base_i:base_i + world_size], params_pad[base_i + rank], async_op=True).get_future())
        torch.futures.collect_all(all_gather_futures).wait()

class DistAdam(torch.optim.Optimizer):
    def __init__(self, params, lr: float = 1e-3, betas: tuple[float, float] = (0.9, 0.999), eps: float = 1e-8, weight_decay: float = 0.01):
        defaults = dict(lr=lr, betas=betas, eps=eps, weight_decay=weight_decay)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)
        # DistributedAdam implementation by @vagrawal

    @torch.compile
    @torch.no_grad()
    def step(self):
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_gather_futures: list[torch.Future] = []
        grad_slices = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            for base_i in range(len(params)):
                grad = params[base_i].grad
                rank_size = grad.shape[0] // world_size
                grad_slice = torch.empty_like(grad[:rank_size])
                reduce_scatter_futures.append(dist.reduce_scatter_tensor(grad_slice, grad, op=dist.ReduceOp.AVG, async_op=True).get_future())
                grad_slices.append(grad_slice)

        idx = 0
        for group in self.param_groups:
            beta1, beta2 = group['betas']
            eps = group['eps']
            wd = group['weight_decay']
            params = group['params']
            for base in range(len(params)):
                reduce_scatter_futures[idx].wait()
                p = params[base]
                rank_size = p.shape[0] // world_size
                p_slice = p[rank * rank_size:(rank + 1) * rank_size]
                lr = group['lr'] * getattr(p, "lr_mul", 1.0)
                state = self.state[p]
                g_slice = grad_slices[idx]
                # State init
                if not state:
                    state['step'] = torch.tensor(0, dtype=torch.int64, device=p.device)
                    state['exp_avg'] = torch.zeros_like(p_slice)
                    state['exp_avg_sq'] = torch.zeros_like(p_slice)
                exp_avg = state['exp_avg']
                exp_avg_sq = state['exp_avg_sq']
                state['step'] += 1
                t = state['step']
                # weight decay
                if wd != 0:
                    eff_weight_decay = lr * wd * getattr(p, "wd_mul", 1.0)
                    p_slice.mul_(1 - eff_weight_decay)
                # update running averages
                exp_avg.mul_(beta1).add_(g_slice, alpha=1 - beta1)
                exp_avg_sq.mul_(beta2).addcmul_(g_slice, g_slice, value=1 - beta2)
                # bias corrections
                bias1 = 1 - beta1 ** t
                bias2 = 1 - beta2 ** t
                # compute step
                denom = exp_avg_sq.sqrt().add_(eps)
                step_size = lr * (torch.sqrt(bias2) / bias1)
                update = exp_avg.div(denom).mul_(step_size)
                p_slice.add_(other=update, alpha=-1.0)
                idx += 1
                all_gather_futures.append(dist.all_gather_into_tensor(p, p_slice, async_op=True).get_future())
        torch.futures.collect_all(all_gather_futures).wait()

# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the model

def norm(x: Tensor):
    return F.rms_norm(x, (x.size(-1),))

class CastedLinear(nn.Linear):
    def __init__(self, in_features: int, out_features: int, use_fp8=False, x_s=1.0, w_s=1.0, grad_s=1.0):
        super().__init__(in_features, out_features, bias=False)
        self.use_fp8 = use_fp8
        self.x_s = x_s
        self.w_s = w_s
        self.grad_s = grad_s

    def reset_parameters(self) -> None:
        std = 0.5 * (self.in_features ** -0.5) # 0.5 is a bit better than the default 1/sqrt(3)
        bound = (3 ** 0.5) * std
        with torch.no_grad():
            self.weight.uniform_(-bound, bound)

    def forward(self, x: Tensor):
        if self.use_fp8 and self.training:
            _x = x.flatten(0, -2)
            out: Tensor = torch.ops.nanogpt.mm(_x, self.weight, x_s=self.x_s, w_s=self.w_s, grad_s=self.grad_s)[0]
            return out.reshape(*x.shape[:-1], -1)
        else:
            return F.linear(x, self.weight.type_as(x))

class Rotary(nn.Module):
    def __init__(self, dim: int, max_seq_len: int):
        super().__init__()
        # half-truncate RoPE by @YouJiacheng (w/ base freq tuning)
        angular_freq = (1 / 1024) ** torch.linspace(0, 1, steps=dim//4, dtype=torch.float32)
        angular_freq = torch.cat([angular_freq, angular_freq.new_zeros(dim//4)])
        t = torch.arange(max_seq_len, dtype=torch.float32)
        theta = torch.einsum("i,j -> ij", t, angular_freq)
        self.cos = nn.Buffer(theta.cos(), persistent=False)
        self.sin = nn.Buffer(theta.sin(), persistent=False)

    def forward(self, x_BTHD: Tensor):
        assert self.cos.size(0) >= x_BTHD.size(-3)
        cos, sin = self.cos[None, :x_BTHD.size(-3), None, :], self.sin[None, :x_BTHD.size(-3), None, :]
        x1, x2 = x_BTHD.to(dtype=torch.float32).chunk(2, dim=-1)
        y1 = x1 * cos + x2 * sin
        y2 = x1 * (-sin) + x2 * cos
        return torch.cat((y1, y2), 3).type_as(x_BTHD)

class CausalSelfAttention(nn.Module):
    def __init__(self, dim: int, num_heads: int, max_seq_len: int, head_dim=128):
        super().__init__()
        self.num_heads = num_heads
        self.head_dim = head_dim
        hdim = num_heads * head_dim
        assert hdim == dim, "num_heads * head_dim must equal model_dim"
        std = 0.5 * (dim ** -0.5)
        bound = (3 ** 0.5) * std # improved init scale by @YouJiacheng
        # merged QKV weights: suggested by many, implemented by @fernbear.bsky.social, and further improved by @YouJiacheng
        # https://x.com/hi_tysam/status/1879699187107033311
        self.qkvo_w = nn.Parameter(torch.empty(4, hdim, dim))
        with torch.no_grad():
            self.qkvo_w[:3].uniform_(-bound, bound) # init QKV weights
            self.qkvo_w[3].zero_() # init output weights to zero
        self.rotary = Rotary(head_dim, max_seq_len)
        # scale the attention logits by given constant, instead of the default head_dim**-0.5, by @leloykun
        # inspired by learnable scalars used by @brendanh0gan https://x.com/hi_tysam/status/1879693583898591283
        self.attn_scale = 0.12

        # sparse gated attention to enable context based no-op by @classiclarryd
        self.attn_gate_dim = 12
        self.attn_gate = CastedLinear(self.attn_gate_dim, num_heads)
        self.attn_gate.weight.detach().zero_()

    def forward(self, x: Tensor, ve: Tensor | None, lambdas: Tensor, seqlens: Tensor, bm_size: int):
        B, T = x.size(0), x.size(1) # batch size, sequence length
        assert B == 1, "varlen sequences requires B == 1"
        assert T % 16 == 0

        q, k, v = F.linear(x, self.qkvo_w[:3].flatten(end_dim=1).type_as(x)).view(B, T, 3 * self.num_heads, self.head_dim).chunk(3, dim=-2)
        q, k = norm(q), norm(k) # QK norm @Grad62304977
        q, k = self.rotary(q), self.rotary(k)
        if ve is not None:
            v = lambdas[0] * v + lambdas[1] * ve.view_as(v) # @KoszarskyB & @Grad62304977
        else: # skip mid-layers token value embeddings by @YouJiacheng
            v = lambdas[0] * v

        max_len = args.train_max_seq_len if self.training else (args.val_batch_size // (grad_accum_steps * world_size))

        # use flash_attn over flex_attn @varunneal. flash_attn_varlen suggested by @YouJiacheng
        y = flash_attn_varlen_func(q[0], k[0], v[0], cu_seqlens_q=seqlens, cu_seqlens_k=seqlens, max_seqlen_q=max_len, max_seqlen_k=max_len,
                                   causal=True, softmax_scale=self.attn_scale, window_size=(bm_size, 0))
        y = y.view(B, T, self.num_heads, self.head_dim)
        y = y * torch.sigmoid(self.attn_gate(x[..., :self.attn_gate_dim])).view(B, T, self.num_heads, 1)
        y = y.contiguous().view(B, T, self.num_heads * self.head_dim) # re-assemble all head outputs side by side
        y = F.linear(y, self.qkvo_w[3].type_as(y))
        return y

class MLP(nn.Module):
    def __init__(self, dim: int):
        super().__init__()
        hdim = 4 * dim
        # make both matrices have the same shape because optimizer sorts params by shape
        # 2 matrices x 12 layers = 24 total, which is divisible by 8 GPU world size
        self.c_fc = nn.Parameter(torch.empty(dim, hdim))
        self.c_proj = nn.Parameter(torch.empty(dim, hdim))
        std = 0.5 * (dim ** -0.5)
        bound = (3 ** 0.5) * std # improved init scale by @YouJiacheng
        with torch.no_grad():
            self.c_fc.uniform_(-bound, bound)
            self.c_proj.zero_() # zero init suggested by @Grad62304977

    def forward(self, x: Tensor):
        x = F.linear(x, self.c_fc.T.type_as(x))
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = F.linear(x, self.c_proj.type_as(x))
        return x


class Block(nn.Module):
    def __init__(self, dim: int, num_heads: int, max_seq_len: int, layer_idx: int):
        super().__init__()
        # skip attention of blocks.7 (the 8th layer) by @YouJiacheng
        self.attn = CausalSelfAttention(dim, num_heads, max_seq_len) if layer_idx != 7 else None
        SKIPPED_MLP_BLOCKS = [0, 12] # skip MLP blocks for first and last layers by @EmelyanenkoK
        self.mlp = None if layer_idx in SKIPPED_MLP_BLOCKS else MLP(dim)

    def forward(self, x: Tensor, ve: Tensor | None, x0: Tensor, lambdas: Tensor, sa_lambdas: Tensor,
                seqlens: Tensor, bm_size: int):
        x = lambdas[0] * x + lambdas[1] * x0
        if self.attn is not None:
            x = x + self.attn(norm(x), ve, sa_lambdas, seqlens, bm_size)
        if self.mlp is not None:
            x = x + self.mlp(norm(x))
        return x

# -----------------------------------------------------------------------------
# The main model

def next_multiple_of_n(v: float | int, *, n: int):
    return next(x for x in range(n, int(v) + 1 + n, n) if x >= v)

class GPT(nn.Module):
    def __init__(self, vocab_size: int, num_layers: int, num_heads: int, model_dim: int, max_seq_len: int):
        super().__init__()
        vocab_size = next_multiple_of_n(vocab_size, n=128)
        self.embed = nn.Embedding(vocab_size, model_dim)
        # token value embeddings by @KoszarskyB - inspired by @Grad62304977's value residual implementation following https://arxiv.org/abs/2410.17897
        # value embedding code simplification inspired by @ragulpr https://github.com/KellerJordan/modded-nanogpt/pull/78
        self.value_embeds = nn.ModuleList([nn.Embedding(vocab_size, model_dim) for _ in range(3)])
        self.blocks = nn.ModuleList([Block(model_dim, num_heads, max_seq_len, i) for i in range(num_layers)])
        # there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency.
        # suggested to me by @Grad62304977. this originates from Karpathy's experiments.
        use_fp8 = not os.environ.get("DISABLE_FP8", False)
        self.lm_head = CastedLinear(model_dim, vocab_size, use_fp8=use_fp8, x_s=(model_dim**0.5)/448, w_s=2**-9, grad_s=1/448)
        self.lm_head.weight.detach().zero_() # @Grad62304977
        # Add learnable skip connection weights for decoder layers
        assert num_layers % 2 == 0
        pad = (-num_layers * 5) % dist.get_world_size()
        self.scalars = nn.Parameter(torch.cat([
            torch.ones(num_layers), # skip_weights
            *[torch.tensor([1.0, 0.0]) for _ in range(num_layers)], # block lambdas
            *[torch.tensor([0.5, 0.5]) for _ in range(num_layers)], # SA lambdas
            torch.ones(pad),
        ]))
        # set learning rates
        for param in self.embed.parameters():
            param.lr_mul = 75.
        for param in self.value_embeds.parameters():
            param.lr_mul = 75.
        self.lm_head.weight.lr_mul = 1.0
        self.scalars.lr_mul = 5.0


    def forward(self, input_seq: Tensor, target_seq: Tensor, seqlens: Tensor, ws: int):
        assert input_seq.ndim == 1

        ve = [value_embed(input_seq) for value_embed in self.value_embeds]
        # 012 ... 012 structure on token value embeddings by @YouJiacheng, improved on @leloykun's U-net structure
        ve = [ve[0], ve[1], ve[2]] + [None] * (len(self.blocks) - 6) + [ve[0], ve[1], ve[2]]
        assert len(ve) == len(self.blocks)

        long_bm, short_bm = ws * args.block_size, (ws // 2) * args.block_size
        bm_sizes = [long_bm, short_bm, short_bm, short_bm, long_bm, short_bm, short_bm, long_bm, short_bm, short_bm, short_bm, long_bm]
        assert len(bm_sizes) == len(self.blocks)

        x = x0 = norm(self.embed(input_seq)[None]) # use of norm here by @Grad62304977

        # U-net design by @brendanh0gan
        skip_connections = []
        skip_weights = self.scalars[:(len(self.blocks) // 2)]
        lambdas = self.scalars[1 * len(self.blocks): 3 * len(self.blocks)].view(-1, 2)
        sa_lambdas = self.scalars[3 * len(self.blocks): 5 * len(self.blocks)].view(-1, 2)

        n = len(self.blocks) // 2

        for i in range(len(self.blocks)):
            if i >= n:
                x = x + skip_weights[i - n] * skip_connections.pop()
            x = self.blocks[i](x, ve[i], x0, lambdas[i], sa_lambdas[i], seqlens, bm_sizes[i])
            if i < n:
                skip_connections.append(x)

        x = norm(x)
        logits = self.lm_head(x).float()
        # @Grad62304977 added tanh softcapping following Gemma 2 paper, @KoszarskyB reduced it from 30 to 15, @YouJiacheng shifted it by +15 (2*sigmoid(2*x)=tanh(x)+1)
        logits = 30 * torch.sigmoid(logits / 7.5)
        loss = F.cross_entropy(logits.view(-1, logits.size(-1)), target_seq, reduction="sum" if self.training else "mean")
        return loss

# -----------------------------------------------------------------------------
# Distributed data loader

def _load_data_shard(file: Path):
    header = torch.from_file(str(file), False, 256, dtype=torch.int32) # header is 256 int32
    assert header[0] == 20240520, "magic number mismatch in the data .bin file"
    assert header[1] == 1, "unsupported version"
    num_tokens = int(header[2]) # number of tokens (claimed)
    with file.open("rb", buffering=0) as f:
        tokens = torch.empty(num_tokens, dtype=torch.uint16, pin_memory=True) # avoid pin_memory copy by @YouJiacheng
        f.seek(256 * 4)
        nbytes = f.readinto(tokens.numpy()) # avoid bytes->array copy by @YouJiacheng
        assert nbytes == 2 * num_tokens, "number of tokens read does not match header"
    return tokens

BOS_ID = 50256

class BOSFinder:
    # Helper for getting sequences that start at the beginning of documents by @varunneal based on work by @classiclarryd
    def __init__(self, tokens: Tensor, world_size: int = 1):
        # Precompute BOS positions once per shard
        self.size = tokens.numel()
        self.bos_idx = (tokens == BOS_ID).nonzero(as_tuple=True)[0].to(torch.int64).cpu().numpy()
        self.i = 0
        self.world_size = world_size

    def next_batch(self, num_tokens_local: int, max_seq_len: int):
        n = len(self.bos_idx)
        starts = [[] for _ in range(self.world_size)]
        ends = [[] for _ in range(self.world_size)]

        idx = self.i
        for r in range(self.world_size):
            cur_len = 0
            while cur_len <= num_tokens_local:
                if idx >= n:
                    raise StopIteration(f"Insufficient BOS ahead of position {cur}; hit tail of shard.")
                cur = self.bos_idx[idx]
                starts[r].append(cur)
                end = min(self.bos_idx[idx + 1] if idx + 1 < n else self.size,
                          cur + max_seq_len,
                          cur + num_tokens_local - cur_len + 1)
                ends[r].append(end)
                cur_len += end - cur
                idx += 1

            assert cur_len == num_tokens_local + 1
        self.i = idx

        return starts, ends

def distributed_data_generator(filename_pattern: str, num_tokens: int, max_seq_len: int, grad_accum_steps: int = 1, align_to_bos: bool = True):
    # align_to_bos: each sequence begins with Beginning of Sequence token, sequences truncated to max_seq_len
    rank = dist.get_rank() if dist.is_initialized() else 0
    world_size = dist.get_world_size() if dist.is_initialized() else 1
    assert num_tokens % (world_size * grad_accum_steps) == 0, "Batch size must be divisible by world size"
    num_tokens = num_tokens // grad_accum_steps

    files = [Path(file) for file in sorted(glob.glob(filename_pattern))]
    if not files:
        raise FileNotFoundError(f"No files found for pattern: {filename_pattern}")

    file_iter = iter(files)  # Use itertools.cycle(files) for multi-epoch training
    tokens = _load_data_shard(next(file_iter))
    finder = BOSFinder(tokens, world_size=world_size) if align_to_bos else None
    pos = 0  # for unaligned case

    while True:
        num_tokens_local = num_tokens // world_size
        max_num_docs = next_multiple_of_n(num_tokens_local // 300, n=128)  # median doc length is ~400

        if align_to_bos:
            try:
                seq_starts, seq_ends = finder.next_batch(num_tokens_local, max_seq_len)
                start_idxs, end_idxs = torch.tensor(seq_starts[rank]), torch.tensor(seq_ends[rank])
            except StopIteration:
                # This shard is exhausted, load the next one in the next loop iteration.
                tokens = _load_data_shard(next(file_iter))
                finder = BOSFinder(tokens, world_size=world_size)
                continue

            buf = torch.cat([tokens[i:j] for i, j in zip(start_idxs, end_idxs)])
            _inputs = buf[:-1]
            _targets = buf[1:]
            end_idxs[-1] -= 1  # last document was too long to account for _targets offset
            cum_lengths = (end_idxs - start_idxs).cumsum(0)

        else:
            if pos + num_tokens + 1 >= len(tokens):  # should not occur for val data
                tokens, pos = _load_data_shard(next(file_iter)), 0

            pos_local = pos + rank * num_tokens_local
            buf = tokens[pos_local: pos_local + num_tokens_local + 1]
            _inputs = buf[:-1].view(num_tokens_local, )
            _targets = buf[1:].view(num_tokens_local, )

            cum_lengths = torch.nonzero(_inputs == BOS_ID)[:, 0]
            pos += num_tokens


        _cum_lengths = torch.full((max_num_docs,), num_tokens_local)
        _cum_lengths[0] = 0
        _cum_lengths[1:len(cum_lengths) + 1] = cum_lengths

        new_params = yield (
            _inputs.to(device="cuda", dtype=torch.int32, non_blocking=True),
            _targets.to(device="cuda", dtype=torch.int64, non_blocking=True),
            _cum_lengths.to(device="cuda", dtype=torch.int32, non_blocking=True)
        )

        if new_params is not None:
            # makes it possible for generator to receive new (num_tokens, max_seq_len, grad_accum_steps) via .send()
            new_num_tokens, new_max_seq_len, new_grad_accum_steps = new_params
            assert new_num_tokens % (world_size * grad_accum_steps) == 0, "Num tokens must be divisible by world size"
            num_tokens = new_num_tokens
            max_seq_len = new_max_seq_len
            grad_accum_steps = new_grad_accum_steps 


# -----------------------------------------------------------------------------
# int main

@dataclass
class Hyperparameters:
    # data
    train_files: str = "data/fineweb10B/fineweb_train_*.bin" # input .bin to train on
    val_files: str = "data/fineweb10B/fineweb_val_*.bin" # input .bin to eval validation loss on
    val_tokens: int = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    train_batch_size: int = 2048 * 24 * 8
    train_max_seq_len: int = 128 * 16
    val_batch_size: int = 4 * 64 * 1024 * 8
    # optimization
    num_iterations: int = 1705 # number of iterations to run
    cooldown_frac: int = 0.45 # fraction of training spent cooling down the learning rate
    # evaluation and logging
    run_id: str = str(uuid.uuid4())
    val_loss_every: int = 125 # every how many steps to evaluate val loss? 0 for only at the end
    save_checkpoint: bool = False
    # attention masking
    block_size: int = 128
    ws_schedule: tuple = (3, 7, 11)

args = Hyperparameters()

data_path = os.environ.get("DATA_PATH", ".")
args.train_files = os.path.join(data_path, args.train_files)
args.val_files = os.path.join(data_path, args.val_files)

# torchrun sets these env variables
rank = int(os.environ["RANK"])
world_size = int(os.environ["WORLD_SIZE"])
assert 8 % world_size == 0, "world_size must be a divisor of 8"
grad_accum_steps = 8 // world_size
assert torch.cuda.is_available()
device = torch.device("cuda", int(os.environ["LOCAL_RANK"]))
torch.cuda.set_device(device)
dist.init_process_group(backend="nccl", device_id=device)
dist.barrier()
master_process = (rank == 0) # this process will do logging, checkpointing etc.

# begin logging
logfile = None
if master_process:
    run_id = args.run_id
    os.makedirs("logs", exist_ok=True)
    logfile = f"logs/{run_id}.txt"
    print(logfile)
def print0(s, console=False):
    if master_process:
        with open(logfile, "a") as f:
            if console:
                print(s)
            print(s, file=f)

# begin by printing this file (the Python code)
print0(code)
print0("="*100)
# log information about the hardware/software environment this is running on
print0(f"Running Python {sys.version}")
print0(f"Running PyTorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}")
print0(f"Running Triton version {triton.__version__}")

def nvidia_smi():
    import subprocess  # avoid top level import
    return subprocess.run(["nvidia-smi"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).stdout
print0(nvidia_smi())
print0("="*100)

model: nn.Module = GPT(
    vocab_size=50257,
    num_layers=12,
    num_heads=6,
    model_dim=768,
    max_seq_len=max(args.train_batch_size, args.val_batch_size) // (grad_accum_steps * world_size)
).cuda()
for m in model.modules():
    if isinstance(m, nn.Embedding):
        m.bfloat16()
for param in model.parameters():
    dist.broadcast(param.detach(), 0)

# collect the parameters to optimize
hidden_matrix_params = [p for n, p in model.blocks.named_parameters() if p.ndim >= 2 and "embed" not in n]
embed_params = [p for n, p in model.named_parameters() if "embed" in n]
scalar_params = [p for p in model.parameters() if p.ndim < 2]
head_params = [model.lm_head.weight]

# init the optimizer(s)
# small adam epsilon by @YouJiacheng. this is an alternate method of fixing the world_size dependence
# discovered by @fernbear.bsky.social https://x.com/hi_tysam/status/1879692937589875094
optimizer1 = DistAdam(scalar_params + head_params + embed_params, lr=0.008, betas=(0.8, 0.95), eps=1e-10, weight_decay=0.0)
optimizer2 = Muon(hidden_matrix_params, lr=0.05, momentum=0.95, weight_decay=0.0)
optimizers = [optimizer1, optimizer2]
for opt in optimizers:
    for group in opt.param_groups:
        group["initial_lr"] = group["lr"]

# learning rate schedule: stable then decay
def get_lr(step: int):
    x = step / args.num_iterations
    assert 0 <= x < 1
    lr = 1.0
    if x >= 1 - args.cooldown_frac:
        w = (1 - x) / args.cooldown_frac
        lr = w * 1.0 + (1 - w) * 0.1
    return lr

def get_ws(step: int):
    x = step / (1 + args.num_iterations)
    assert 0 <= x < 1
    ws_idx = int(len(args.ws_schedule) * x)
    return args.ws_schedule[ws_idx]

model: nn.Module = torch.compile(model, dynamic=False, fullgraph=True)

########################################
#            Warmup kernels            #
########################################

# Warmup the training kernels, then re-initialize the state so we aren't cheating
warmup_steps = 30
initial_state = dict(model=copy.deepcopy(model.state_dict()),
                     optimizers=[copy.deepcopy(opt.state_dict()) for opt in optimizers]) # save the initial state
train_loader = distributed_data_generator(args.train_files, args.train_batch_size, args.train_max_seq_len, grad_accum_steps=grad_accum_steps)
for step in range(warmup_steps):
    inputs, targets, cum_seqlens = next(train_loader)
    ws = args.ws_schedule[step % len(args.ws_schedule)]  # each window size is a new graph, need to warm up each
    model(inputs, targets, cum_seqlens, ws).backward()
    for opt in optimizers:
        opt.step()
    model.zero_grad(set_to_none=True)
model.load_state_dict(initial_state["model"])
for opt, opt_state in zip(optimizers, initial_state["optimizers"]):
    opt.load_state_dict(opt_state)
del train_loader, initial_state

########################################
#        Training and validation       #
########################################

train_loader = distributed_data_generator(args.train_files, args.train_batch_size, args.train_max_seq_len, grad_accum_steps=grad_accum_steps)
training_time_ms = 0
# start the clock
torch.cuda.synchronize()
t0 = time.perf_counter()
# begin training
train_steps = args.num_iterations
for step in range(train_steps + 1):
    last_step = (step == train_steps)
    ws = get_ws(step)

    # --------------- VALIDATION SECTION -----------------
    if last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0):
        # stop the clock
        torch.cuda.synchronize()
        training_time_ms += 1000 * (time.perf_counter() - t0)
        model.eval()
        assert args.val_tokens % args.val_batch_size == 0
        val_steps = grad_accum_steps * args.val_tokens // args.val_batch_size
        val_loader = distributed_data_generator(args.val_files, args.val_batch_size, -1, grad_accum_steps=grad_accum_steps, align_to_bos=False)
        val_loss = 0
        with torch.no_grad():
            for _ in range(val_steps):
                inputs, targets, cum_seqlens = next(val_loader)
                val_loss += model(inputs, targets, cum_seqlens, ws)
        val_loss /= val_steps
        del val_loader
        dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
        print0(f"step:{step}/{train_steps} val_loss:{val_loss:.4f} train_time:{training_time_ms:.0f}ms step_avg:{training_time_ms/max(step, 1):.2f}ms", console=True)
        model.train()
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.perf_counter()

    if last_step:
        if master_process and args.save_checkpoint:
            log = dict(step=step, code=code, model=model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
            os.makedirs(f"logs/{run_id}", exist_ok=True)
            torch.save(log, f"logs/{run_id}/state_step{step:06d}.pt")
        # the last step only has the validation loop, so break to avoid training
        break

    # --------------- TRAINING SECTION -----------------
    for _ in range(grad_accum_steps):
        inputs, targets, cum_seqlens = next(train_loader)
        model(inputs, targets, cum_seqlens, ws).backward()
    # set optimization hyperparameters
    for opt in optimizers:
        for group in opt.param_groups:
            group["lr"] = group["initial_lr"] * get_lr(step)
    for group in optimizer2.param_groups:
        frac = min(step / 300, 1) # momentum warmup for muon
        group["momentum"] = (1 - frac) * 0.85 + frac * 0.95
    # step the optimizers
    for opt in optimizers:
        opt.step()
    # null the gradients
    model.zero_grad(set_to_none=True)
    # logging
    approx_training_time_ms = training_time_ms + 1000 * (time.perf_counter() - t0)
    print0(f"step:{step+1}/{train_steps} train_time:{approx_training_time_ms:.0f}ms step_avg:{approx_training_time_ms/(step + 1):.2f}ms", console=True)

print0(f"peak memory allocated: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB "
       f"reserved: {torch.cuda.max_memory_reserved() // 1024 // 1024} MiB", console=True)
dist.destroy_process_group()

====================================================================================================
Running Python 3.10.12 (main, May 27 2025, 17:12:29) [GCC 11.4.0]
Running PyTorch 2.9.0.dev20250718+cu126 compiled for CUDA 12.6
Running Triton version 3.4.0
Fri Sep  5 16:10:06 2025       
+-----------------------------------------------------------------------------------------+
| NVIDIA-SMI 550.144.03             Driver Version: 550.144.03     CUDA Version: 12.4     |
|-----------------------------------------+------------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |
|                                         |                        |               MIG M. |
|=========================================+========================+======================|
|   0  NVIDIA H100 80GB HBM3          On  |   00000000:8D:00.0 Off |                    0 |
| N/A   44C    P0            130W /  700W |    5826MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  |   00000000:91:00.0 Off |                    0 |
| N/A   35C    P0            118W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  |   00000000:95:00.0 Off |                    0 |
| N/A   44C    P0            126W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  |   00000000:99:00.0 Off |                    0 |
| N/A   34C    P0            120W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  |   00000000:AB:00.0 Off |                    0 |
| N/A   42C    P0            125W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  |   00000000:AF:00.0 Off |                    0 |
| N/A   35C    P0            118W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  |   00000000:B3:00.0 Off |                    0 |
| N/A   43C    P0            130W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  |   00000000:B7:00.0 Off |                    0 |
| N/A   34C    P0            124W /  700W |    1516MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
                                                                                         
+-----------------------------------------------------------------------------------------+
| Processes:                                                                              |
|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |
|        ID   ID                                                               Usage      |
|=========================================================================================|
|    0   N/A  N/A     82357      C   /usr/bin/python3                             1506MiB |
|    0   N/A  N/A     82358      C   /usr/bin/python3                              610MiB |
|    0   N/A  N/A     82359      C   /usr/bin/python3                              610MiB |
|    0   N/A  N/A     82360      C   /usr/bin/python3                              610MiB |
|    0   N/A  N/A     82361      C   /usr/bin/python3                              610MiB |
|    0   N/A  N/A     82362      C   /usr/bin/python3                              610MiB |
|    0   N/A  N/A     82363      C   /usr/bin/python3                              610MiB |
|    0   N/A  N/A     82364      C   /usr/bin/python3                              610MiB |
|    1   N/A  N/A     82358      C   /usr/bin/python3                             1506MiB |
|    2   N/A  N/A     82359      C   /usr/bin/python3                             1506MiB |
|    3   N/A  N/A     82360      C   /usr/bin/python3                             1506MiB |
|    4   N/A  N/A     82361      C   /usr/bin/python3                             1506MiB |
|    5   N/A  N/A     82362      C   /usr/bin/python3                             1506MiB |
|    6   N/A  N/A     82363      C   /usr/bin/python3                             1506MiB |
|    7   N/A  N/A     82364      C   /usr/bin/python3                             1506MiB |
+-----------------------------------------------------------------------------------------+

====================================================================================================
step:0/1705 val_loss:10.8258 train_time:0ms step_avg:0.02ms
step:1/1705 train_time:399ms step_avg:399.21ms
step:2/1705 train_time:419ms step_avg:209.29ms
step:3/1705 train_time:488ms step_avg:162.77ms
step:4/1705 train_time:579ms step_avg:144.74ms
step:5/1705 train_time:671ms step_avg:134.13ms
step:6/1705 train_time:762ms step_avg:127.05ms
step:7/1705 train_time:854ms step_avg:122.05ms
step:8/1705 train_time:947ms step_avg:118.40ms
step:9/1705 train_time:1040ms step_avg:115.51ms
step:10/1705 train_time:1132ms step_avg:113.18ms
step:11/1705 train_time:1225ms step_avg:111.33ms
step:12/1705 train_time:1319ms step_avg:109.94ms
step:13/1705 train_time:1414ms step_avg:108.78ms
step:14/1705 train_time:1510ms step_avg:107.83ms
step:15/1705 train_time:1604ms step_avg:106.90ms
step:16/1705 train_time:1697ms step_avg:106.04ms
step:17/1705 train_time:1789ms step_avg:105.26ms
step:18/1705 train_time:1882ms step_avg:104.57ms
step:19/1705 train_time:1974ms step_avg:103.91ms
step:20/1705 train_time:2067ms step_avg:103.35ms
step:21/1705 train_time:2160ms step_avg:102.85ms
step:22/1705 train_time:2252ms step_avg:102.38ms
step:23/1705 train_time:2346ms step_avg:102.01ms
step:24/1705 train_time:2440ms step_avg:101.66ms
step:25/1705 train_time:2533ms step_avg:101.32ms
step:26/1705 train_time:2628ms step_avg:101.06ms
step:27/1705 train_time:2721ms step_avg:100.79ms
step:28/1705 train_time:2815ms step_avg:100.52ms
step:29/1705 train_time:2908ms step_avg:100.27ms
step:30/1705 train_time:3001ms step_avg:100.04ms
step:31/1705 train_time:3094ms step_avg:99.82ms
step:32/1705 train_time:3188ms step_avg:99.62ms
step:33/1705 train_time:3280ms step_avg:99.40ms
step:34/1705 train_time:3373ms step_avg:99.20ms
step:35/1705 train_time:3467ms step_avg:99.05ms
step:36/1705 train_time:3560ms step_avg:98.89ms
step:37/1705 train_time:3653ms step_avg:98.73ms
step:38/1705 train_time:3748ms step_avg:98.62ms
step:39/1705 train_time:3841ms step_avg:98.48ms
step:40/1705 train_time:3933ms step_avg:98.33ms
step:41/1705 train_time:4028ms step_avg:98.24ms
step:42/1705 train_time:4121ms step_avg:98.11ms
step:43/1705 train_time:4213ms step_avg:97.98ms
step:44/1705 train_time:4307ms step_avg:97.88ms
step:45/1705 train_time:4401ms step_avg:97.79ms
step:46/1705 train_time:4493ms step_avg:97.67ms
step:47/1705 train_time:4587ms step_avg:97.59ms
step:48/1705 train_time:4680ms step_avg:97.51ms
step:49/1705 train_time:4773ms step_avg:97.40ms
step:50/1705 train_time:4866ms step_avg:97.33ms
step:51/1705 train_time:4960ms step_avg:97.25ms
step:52/1705 train_time:5053ms step_avg:97.16ms
step:53/1705 train_time:5147ms step_avg:97.10ms
step:54/1705 train_time:5239ms step_avg:97.02ms
step:55/1705 train_time:5332ms step_avg:96.95ms
step:56/1705 train_time:5426ms step_avg:96.90ms
step:57/1705 train_time:5520ms step_avg:96.84ms
step:58/1705 train_time:5612ms step_avg:96.77ms
step:59/1705 train_time:5706ms step_avg:96.72ms
step:60/1705 train_time:5799ms step_avg:96.66ms
step:61/1705 train_time:5893ms step_avg:96.60ms
step:62/1705 train_time:5986ms step_avg:96.55ms
step:63/1705 train_time:6079ms step_avg:96.48ms
step:64/1705 train_time:6171ms step_avg:96.42ms
step:65/1705 train_time:6265ms step_avg:96.38ms
step:66/1705 train_time:6358ms step_avg:96.33ms
step:67/1705 train_time:6451ms step_avg:96.29ms
step:68/1705 train_time:6545ms step_avg:96.25ms
step:69/1705 train_time:6638ms step_avg:96.20ms
step:70/1705 train_time:6731ms step_avg:96.16ms
step:71/1705 train_time:6825ms step_avg:96.13ms
step:72/1705 train_time:6919ms step_avg:96.09ms
step:73/1705 train_time:7012ms step_avg:96.05ms
step:74/1705 train_time:7106ms step_avg:96.02ms
step:75/1705 train_time:7198ms step_avg:95.98ms
step:76/1705 train_time:7291ms step_avg:95.94ms
step:77/1705 train_time:7385ms step_avg:95.91ms
step:78/1705 train_time:7477ms step_avg:95.87ms
step:79/1705 train_time:7570ms step_avg:95.83ms
step:80/1705 train_time:7664ms step_avg:95.80ms
step:81/1705 train_time:7757ms step_avg:95.76ms
step:82/1705 train_time:7851ms step_avg:95.74ms
step:83/1705 train_time:7945ms step_avg:95.72ms
step:84/1705 train_time:8038ms step_avg:95.69ms
step:85/1705 train_time:8131ms step_avg:95.66ms
step:86/1705 train_time:8225ms step_avg:95.64ms
step:87/1705 train_time:8318ms step_avg:95.61ms
step:88/1705 train_time:8411ms step_avg:95.58ms
step:89/1705 train_time:8504ms step_avg:95.56ms
step:90/1705 train_time:8598ms step_avg:95.53ms
step:91/1705 train_time:8691ms step_avg:95.50ms
step:92/1705 train_time:8785ms step_avg:95.48ms
step:93/1705 train_time:8877ms step_avg:95.45ms
step:94/1705 train_time:8970ms step_avg:95.43ms
step:95/1705 train_time:9063ms step_avg:95.40ms
step:96/1705 train_time:9155ms step_avg:95.37ms
step:97/1705 train_time:9249ms step_avg:95.35ms
step:98/1705 train_time:9343ms step_avg:95.33ms
step:99/1705 train_time:9435ms step_avg:95.30ms
step:100/1705 train_time:9529ms step_avg:95.29ms
step:101/1705 train_time:9622ms step_avg:95.27ms
step:102/1705 train_time:9715ms step_avg:95.24ms
step:103/1705 train_time:9808ms step_avg:95.22ms
step:104/1705 train_time:9901ms step_avg:95.20ms
step:105/1705 train_time:9993ms step_avg:95.18ms
step:106/1705 train_time:10087ms step_avg:95.16ms
step:107/1705 train_time:10179ms step_avg:95.13ms
step:108/1705 train_time:10271ms step_avg:95.10ms
step:109/1705 train_time:10365ms step_avg:95.09ms
step:110/1705 train_time:10459ms step_avg:95.08ms
step:111/1705 train_time:10551ms step_avg:95.06ms
step:112/1705 train_time:10645ms step_avg:95.05ms
step:113/1705 train_time:10737ms step_avg:95.02ms
step:114/1705 train_time:10830ms step_avg:95.00ms
step:115/1705 train_time:10923ms step_avg:94.98ms
step:116/1705 train_time:11017ms step_avg:94.97ms
step:117/1705 train_time:11109ms step_avg:94.95ms
step:118/1705 train_time:11201ms step_avg:94.93ms
step:119/1705 train_time:11294ms step_avg:94.91ms
step:120/1705 train_time:11387ms step_avg:94.90ms
step:121/1705 train_time:11480ms step_avg:94.88ms
step:122/1705 train_time:11573ms step_avg:94.86ms
step:123/1705 train_time:11666ms step_avg:94.84ms
step:124/1705 train_time:11759ms step_avg:94.83ms
step:125/1705 train_time:11852ms step_avg:94.81ms
step:125/1705 val_loss:4.3053 train_time:11946ms step_avg:95.57ms
step:126/1705 train_time:11967ms step_avg:94.98ms
step:127/1705 train_time:12044ms step_avg:94.84ms
step:128/1705 train_time:12145ms step_avg:94.88ms
step:129/1705 train_time:12239ms step_avg:94.88ms
step:130/1705 train_time:12332ms step_avg:94.86ms
step:131/1705 train_time:12424ms step_avg:94.84ms
step:132/1705 train_time:12515ms step_avg:94.81ms
step:133/1705 train_time:12607ms step_avg:94.79ms
step:134/1705 train_time:12699ms step_avg:94.77ms
step:135/1705 train_time:12792ms step_avg:94.76ms
step:136/1705 train_time:12883ms step_avg:94.73ms
step:137/1705 train_time:12977ms step_avg:94.72ms
step:138/1705 train_time:13073ms step_avg:94.73ms
step:139/1705 train_time:13166ms step_avg:94.72ms
step:140/1705 train_time:13260ms step_avg:94.72ms
step:141/1705 train_time:13354ms step_avg:94.71ms
step:142/1705 train_time:13447ms step_avg:94.70ms
step:143/1705 train_time:13539ms step_avg:94.68ms
step:144/1705 train_time:13631ms step_avg:94.66ms
step:145/1705 train_time:13723ms step_avg:94.64ms
step:146/1705 train_time:13815ms step_avg:94.62ms
step:147/1705 train_time:13907ms step_avg:94.61ms
step:148/1705 train_time:14000ms step_avg:94.60ms
step:149/1705 train_time:14095ms step_avg:94.60ms
step:150/1705 train_time:14189ms step_avg:94.59ms
step:151/1705 train_time:14282ms step_avg:94.58ms
step:152/1705 train_time:14376ms step_avg:94.58ms
step:153/1705 train_time:14469ms step_avg:94.57ms
step:154/1705 train_time:14562ms step_avg:94.56ms
step:155/1705 train_time:14655ms step_avg:94.55ms
step:156/1705 train_time:14748ms step_avg:94.54ms
step:157/1705 train_time:14839ms step_avg:94.52ms
step:158/1705 train_time:14932ms step_avg:94.51ms
step:159/1705 train_time:15024ms step_avg:94.49ms
step:160/1705 train_time:15118ms step_avg:94.49ms
step:161/1705 train_time:15212ms step_avg:94.48ms
step:162/1705 train_time:15305ms step_avg:94.47ms
step:163/1705 train_time:15398ms step_avg:94.47ms
step:164/1705 train_time:15491ms step_avg:94.46ms
step:165/1705 train_time:15583ms step_avg:94.44ms
step:166/1705 train_time:15675ms step_avg:94.43ms
step:167/1705 train_time:15768ms step_avg:94.42ms
step:168/1705 train_time:15860ms step_avg:94.41ms
step:169/1705 train_time:15953ms step_avg:94.40ms
step:170/1705 train_time:16045ms step_avg:94.38ms
step:171/1705 train_time:16138ms step_avg:94.37ms
step:172/1705 train_time:16231ms step_avg:94.37ms
step:173/1705 train_time:16323ms step_avg:94.35ms
step:174/1705 train_time:16416ms step_avg:94.34ms
step:175/1705 train_time:16509ms step_avg:94.34ms
step:176/1705 train_time:16601ms step_avg:94.33ms
step:177/1705 train_time:16695ms step_avg:94.32ms
step:178/1705 train_time:16788ms step_avg:94.31ms
step:179/1705 train_time:16880ms step_avg:94.30ms
step:180/1705 train_time:16973ms step_avg:94.29ms
step:181/1705 train_time:17065ms step_avg:94.28ms
step:182/1705 train_time:17159ms step_avg:94.28ms
step:183/1705 train_time:17252ms step_avg:94.27ms
step:184/1705 train_time:17345ms step_avg:94.27ms
step:185/1705 train_time:17438ms step_avg:94.26ms
step:186/1705 train_time:17532ms step_avg:94.26ms
step:187/1705 train_time:17624ms step_avg:94.25ms
step:188/1705 train_time:17717ms step_avg:94.24ms
step:189/1705 train_time:17810ms step_avg:94.23ms
step:190/1705 train_time:17902ms step_avg:94.22ms
step:191/1705 train_time:17995ms step_avg:94.22ms
step:192/1705 train_time:18087ms step_avg:94.21ms
step:193/1705 train_time:18180ms step_avg:94.20ms
step:194/1705 train_time:18274ms step_avg:94.20ms
step:195/1705 train_time:18367ms step_avg:94.19ms
step:196/1705 train_time:18459ms step_avg:94.18ms
step:197/1705 train_time:18552ms step_avg:94.17ms
step:198/1705 train_time:18644ms step_avg:94.16ms
step:199/1705 train_time:18738ms step_avg:94.16ms
step:200/1705 train_time:18830ms step_avg:94.15ms
step:201/1705 train_time:18922ms step_avg:94.14ms
step:202/1705 train_time:19015ms step_avg:94.14ms
step:203/1705 train_time:19108ms step_avg:94.13ms
step:204/1705 train_time:19200ms step_avg:94.12ms
step:205/1705 train_time:19294ms step_avg:94.12ms
step:206/1705 train_time:19387ms step_avg:94.11ms
step:207/1705 train_time:19479ms step_avg:94.10ms
step:208/1705 train_time:19573ms step_avg:94.10ms
step:209/1705 train_time:19665ms step_avg:94.09ms
step:210/1705 train_time:19759ms step_avg:94.09ms
step:211/1705 train_time:19852ms step_avg:94.09ms
step:212/1705 train_time:19945ms step_avg:94.08ms
step:213/1705 train_time:20259ms step_avg:95.11ms
step:214/1705 train_time:20329ms step_avg:95.00ms
step:215/1705 train_time:20420ms step_avg:94.98ms
step:216/1705 train_time:20513ms step_avg:94.97ms
step:217/1705 train_time:20605ms step_avg:94.95ms
step:218/1705 train_time:20697ms step_avg:94.94ms
step:219/1705 train_time:20788ms step_avg:94.92ms
step:220/1705 train_time:20880ms step_avg:94.91ms
step:221/1705 train_time:20972ms step_avg:94.90ms
step:222/1705 train_time:21063ms step_avg:94.88ms
step:223/1705 train_time:21158ms step_avg:94.88ms
step:224/1705 train_time:21254ms step_avg:94.88ms
step:225/1705 train_time:21350ms step_avg:94.89ms
step:226/1705 train_time:21443ms step_avg:94.88ms
step:227/1705 train_time:21536ms step_avg:94.87ms
step:228/1705 train_time:21627ms step_avg:94.86ms
step:229/1705 train_time:21720ms step_avg:94.85ms
step:230/1705 train_time:21813ms step_avg:94.84ms
step:231/1705 train_time:21904ms step_avg:94.82ms
step:232/1705 train_time:21997ms step_avg:94.81ms
step:233/1705 train_time:22088ms step_avg:94.80ms
step:234/1705 train_time:22181ms step_avg:94.79ms
step:235/1705 train_time:22276ms step_avg:94.79ms
step:236/1705 train_time:22370ms step_avg:94.79ms
step:237/1705 train_time:22463ms step_avg:94.78ms
step:238/1705 train_time:22556ms step_avg:94.77ms
step:239/1705 train_time:22649ms step_avg:94.77ms
step:240/1705 train_time:22741ms step_avg:94.75ms
step:241/1705 train_time:22833ms step_avg:94.74ms
step:242/1705 train_time:22926ms step_avg:94.73ms
step:243/1705 train_time:23018ms step_avg:94.72ms
step:244/1705 train_time:23110ms step_avg:94.71ms
step:245/1705 train_time:23203ms step_avg:94.71ms
step:246/1705 train_time:23297ms step_avg:94.70ms
step:247/1705 train_time:23391ms step_avg:94.70ms
step:248/1705 train_time:23484ms step_avg:94.69ms
step:249/1705 train_time:23578ms step_avg:94.69ms
step:250/1705 train_time:23671ms step_avg:94.68ms
step:250/1705 val_loss:3.9711 train_time:23763ms step_avg:95.05ms
step:251/1705 train_time:23785ms step_avg:94.76ms
step:252/1705 train_time:23856ms step_avg:94.67ms
step:253/1705 train_time:23948ms step_avg:94.66ms
step:254/1705 train_time:24050ms step_avg:94.68ms
step:255/1705 train_time:24148ms step_avg:94.70ms
step:256/1705 train_time:24240ms step_avg:94.69ms
step:257/1705 train_time:24331ms step_avg:94.68ms
step:258/1705 train_time:24423ms step_avg:94.66ms
step:259/1705 train_time:24515ms step_avg:94.65ms
step:260/1705 train_time:24607ms step_avg:94.64ms
step:261/1705 train_time:24700ms step_avg:94.64ms
step:262/1705 train_time:24793ms step_avg:94.63ms
step:263/1705 train_time:24886ms step_avg:94.62ms
step:264/1705 train_time:24978ms step_avg:94.62ms
step:265/1705 train_time:25072ms step_avg:94.61ms
step:266/1705 train_time:25165ms step_avg:94.61ms
step:267/1705 train_time:25257ms step_avg:94.60ms
step:268/1705 train_time:25350ms step_avg:94.59ms
step:269/1705 train_time:25442ms step_avg:94.58ms
step:270/1705 train_time:25534ms step_avg:94.57ms
step:271/1705 train_time:25627ms step_avg:94.57ms
step:272/1705 train_time:25719ms step_avg:94.56ms
step:273/1705 train_time:25812ms step_avg:94.55ms
step:274/1705 train_time:25905ms step_avg:94.54ms
step:275/1705 train_time:25998ms step_avg:94.54ms
step:276/1705 train_time:26092ms step_avg:94.54ms
step:277/1705 train_time:26186ms step_avg:94.54ms
step:278/1705 train_time:26279ms step_avg:94.53ms
step:279/1705 train_time:26372ms step_avg:94.52ms
step:280/1705 train_time:26464ms step_avg:94.52ms
step:281/1705 train_time:26556ms step_avg:94.51ms
step:282/1705 train_time:26649ms step_avg:94.50ms
step:283/1705 train_time:26743ms step_avg:94.50ms
step:284/1705 train_time:26834ms step_avg:94.49ms
step:285/1705 train_time:26927ms step_avg:94.48ms
step:286/1705 train_time:27020ms step_avg:94.47ms
step:287/1705 train_time:27113ms step_avg:94.47ms
step:288/1705 train_time:27207ms step_avg:94.47ms
step:289/1705 train_time:27300ms step_avg:94.46ms
step:290/1705 train_time:27393ms step_avg:94.46ms
step:291/1705 train_time:27485ms step_avg:94.45ms
step:292/1705 train_time:27578ms step_avg:94.44ms
step:293/1705 train_time:27671ms step_avg:94.44ms
step:294/1705 train_time:27763ms step_avg:94.43ms
step:295/1705 train_time:27855ms step_avg:94.42ms
step:296/1705 train_time:27948ms step_avg:94.42ms
step:297/1705 train_time:28041ms step_avg:94.41ms
step:298/1705 train_time:28135ms step_avg:94.41ms
step:299/1705 train_time:28229ms step_avg:94.41ms
step:300/1705 train_time:28321ms step_avg:94.40ms
step:301/1705 train_time:28414ms step_avg:94.40ms
step:302/1705 train_time:28507ms step_avg:94.39ms
step:303/1705 train_time:28599ms step_avg:94.39ms
step:304/1705 train_time:28692ms step_avg:94.38ms
step:305/1705 train_time:28785ms step_avg:94.38ms
step:306/1705 train_time:28878ms step_avg:94.37ms
step:307/1705 train_time:28971ms step_avg:94.37ms
step:308/1705 train_time:29063ms step_avg:94.36ms
step:309/1705 train_time:29156ms step_avg:94.36ms
step:310/1705 train_time:29249ms step_avg:94.35ms
step:311/1705 train_time:29342ms step_avg:94.35ms
step:312/1705 train_time:29435ms step_avg:94.34ms
step:313/1705 train_time:29527ms step_avg:94.34ms
step:314/1705 train_time:29620ms step_avg:94.33ms
step:315/1705 train_time:29713ms step_avg:94.33ms
step:316/1705 train_time:29806ms step_avg:94.32ms
step:317/1705 train_time:29898ms step_avg:94.31ms
step:318/1705 train_time:29991ms step_avg:94.31ms
step:319/1705 train_time:30084ms step_avg:94.31ms
step:320/1705 train_time:30176ms step_avg:94.30ms
step:321/1705 train_time:30270ms step_avg:94.30ms
step:322/1705 train_time:30363ms step_avg:94.30ms
step:323/1705 train_time:30455ms step_avg:94.29ms
step:324/1705 train_time:30549ms step_avg:94.29ms
step:325/1705 train_time:30643ms step_avg:94.29ms
step:326/1705 train_time:30735ms step_avg:94.28ms
step:327/1705 train_time:30828ms step_avg:94.28ms
step:328/1705 train_time:30921ms step_avg:94.27ms
step:329/1705 train_time:31013ms step_avg:94.27ms
step:330/1705 train_time:31107ms step_avg:94.26ms
step:331/1705 train_time:31199ms step_avg:94.26ms
step:332/1705 train_time:31293ms step_avg:94.26ms
step:333/1705 train_time:31386ms step_avg:94.25ms
step:334/1705 train_time:31478ms step_avg:94.25ms
step:335/1705 train_time:31571ms step_avg:94.24ms
step:336/1705 train_time:31664ms step_avg:94.24ms
step:337/1705 train_time:31756ms step_avg:94.23ms
step:338/1705 train_time:31849ms step_avg:94.23ms
step:339/1705 train_time:31942ms step_avg:94.22ms
step:340/1705 train_time:32034ms step_avg:94.22ms
step:341/1705 train_time:32127ms step_avg:94.22ms
step:342/1705 train_time:32220ms step_avg:94.21ms
step:343/1705 train_time:32313ms step_avg:94.21ms
step:344/1705 train_time:32406ms step_avg:94.20ms
step:345/1705 train_time:32499ms step_avg:94.20ms
step:346/1705 train_time:32592ms step_avg:94.20ms
step:347/1705 train_time:32685ms step_avg:94.19ms
step:348/1705 train_time:32778ms step_avg:94.19ms
step:349/1705 train_time:32870ms step_avg:94.18ms
step:350/1705 train_time:32963ms step_avg:94.18ms
step:351/1705 train_time:33056ms step_avg:94.18ms
step:352/1705 train_time:33149ms step_avg:94.17ms
step:353/1705 train_time:33242ms step_avg:94.17ms
step:354/1705 train_time:33334ms step_avg:94.17ms
step:355/1705 train_time:33429ms step_avg:94.17ms
step:356/1705 train_time:33521ms step_avg:94.16ms
step:357/1705 train_time:33614ms step_avg:94.16ms
step:358/1705 train_time:33707ms step_avg:94.15ms
step:359/1705 train_time:33799ms step_avg:94.15ms
step:360/1705 train_time:33892ms step_avg:94.14ms
step:361/1705 train_time:33985ms step_avg:94.14ms
step:362/1705 train_time:34077ms step_avg:94.14ms
step:363/1705 train_time:34171ms step_avg:94.13ms
step:364/1705 train_time:34263ms step_avg:94.13ms
step:365/1705 train_time:34355ms step_avg:94.12ms
step:366/1705 train_time:34448ms step_avg:94.12ms
step:367/1705 train_time:34541ms step_avg:94.12ms
step:368/1705 train_time:34635ms step_avg:94.12ms
step:369/1705 train_time:34728ms step_avg:94.11ms
step:370/1705 train_time:34821ms step_avg:94.11ms
step:371/1705 train_time:34914ms step_avg:94.11ms
step:372/1705 train_time:35007ms step_avg:94.11ms
step:373/1705 train_time:35100ms step_avg:94.10ms
step:374/1705 train_time:35193ms step_avg:94.10ms
step:375/1705 train_time:35287ms step_avg:94.10ms
step:375/1705 val_loss:3.8190 train_time:35380ms step_avg:94.35ms
step:376/1705 train_time:35401ms step_avg:94.15ms
step:377/1705 train_time:35475ms step_avg:94.10ms
step:378/1705 train_time:35572ms step_avg:94.11ms
step:379/1705 train_time:35665ms step_avg:94.10ms
step:380/1705 train_time:35758ms step_avg:94.10ms
step:381/1705 train_time:35850ms step_avg:94.09ms
step:382/1705 train_time:35943ms step_avg:94.09ms
step:383/1705 train_time:36035ms step_avg:94.09ms
step:384/1705 train_time:36126ms step_avg:94.08ms
step:385/1705 train_time:36219ms step_avg:94.08ms
step:386/1705 train_time:36311ms step_avg:94.07ms
step:387/1705 train_time:36405ms step_avg:94.07ms
step:388/1705 train_time:36499ms step_avg:94.07ms
step:389/1705 train_time:36594ms step_avg:94.07ms
step:390/1705 train_time:36687ms step_avg:94.07ms
step:391/1705 train_time:36780ms step_avg:94.07ms
step:392/1705 train_time:36873ms step_avg:94.06ms
step:393/1705 train_time:36965ms step_avg:94.06ms
step:394/1705 train_time:37059ms step_avg:94.06ms
step:395/1705 train_time:37150ms step_avg:94.05ms
step:396/1705 train_time:37243ms step_avg:94.05ms
step:397/1705 train_time:37336ms step_avg:94.05ms
step:398/1705 train_time:37429ms step_avg:94.04ms
step:399/1705 train_time:37523ms step_avg:94.04ms
step:400/1705 train_time:37616ms step_avg:94.04ms
step:401/1705 train_time:37709ms step_avg:94.04ms
step:402/1705 train_time:37803ms step_avg:94.04ms
step:403/1705 train_time:37895ms step_avg:94.03ms
step:404/1705 train_time:37987ms step_avg:94.03ms
step:405/1705 train_time:38080ms step_avg:94.02ms
step:406/1705 train_time:38173ms step_avg:94.02ms
step:407/1705 train_time:38265ms step_avg:94.02ms
step:408/1705 train_time:38359ms step_avg:94.02ms
step:409/1705 train_time:38453ms step_avg:94.02ms
step:410/1705 train_time:38546ms step_avg:94.01ms
step:411/1705 train_time:38639ms step_avg:94.01ms
step:412/1705 train_time:38732ms step_avg:94.01ms
step:413/1705 train_time:38825ms step_avg:94.01ms
step:414/1705 train_time:38917ms step_avg:94.00ms
step:415/1705 train_time:39009ms step_avg:94.00ms
step:416/1705 train_time:39102ms step_avg:93.99ms
step:417/1705 train_time:39194ms step_avg:93.99ms
step:418/1705 train_time:39286ms step_avg:93.99ms
step:419/1705 train_time:39379ms step_avg:93.98ms
step:420/1705 train_time:39472ms step_avg:93.98ms
step:421/1705 train_time:39565ms step_avg:93.98ms
step:422/1705 train_time:39660ms step_avg:93.98ms
step:423/1705 train_time:39753ms step_avg:93.98ms
step:424/1705 train_time:39846ms step_avg:93.98ms
step:425/1705 train_time:40124ms step_avg:94.41ms
step:426/1705 train_time:40241ms step_avg:94.46ms
step:427/1705 train_time:40332ms step_avg:94.45ms
step:428/1705 train_time:40424ms step_avg:94.45ms
step:429/1705 train_time:40516ms step_avg:94.44ms
step:430/1705 train_time:40608ms step_avg:94.44ms
step:431/1705 train_time:40700ms step_avg:94.43ms
step:432/1705 train_time:40792ms step_avg:94.43ms
step:433/1705 train_time:40884ms step_avg:94.42ms
step:434/1705 train_time:40976ms step_avg:94.41ms
step:435/1705 train_time:41068ms step_avg:94.41ms
step:436/1705 train_time:41165ms step_avg:94.42ms
step:437/1705 train_time:41262ms step_avg:94.42ms
step:438/1705 train_time:41356ms step_avg:94.42ms
step:439/1705 train_time:41448ms step_avg:94.42ms
step:440/1705 train_time:41542ms step_avg:94.41ms
step:441/1705 train_time:41635ms step_avg:94.41ms
step:442/1705 train_time:41726ms step_avg:94.40ms
step:443/1705 train_time:41819ms step_avg:94.40ms
step:444/1705 train_time:41910ms step_avg:94.39ms
step:445/1705 train_time:42003ms step_avg:94.39ms
step:446/1705 train_time:42096ms step_avg:94.39ms
step:447/1705 train_time:42190ms step_avg:94.38ms
step:448/1705 train_time:42284ms step_avg:94.38ms
step:449/1705 train_time:42379ms step_avg:94.38ms
step:450/1705 train_time:42472ms step_avg:94.38ms
step:451/1705 train_time:42565ms step_avg:94.38ms
step:452/1705 train_time:42658ms step_avg:94.38ms
step:453/1705 train_time:42751ms step_avg:94.37ms
step:454/1705 train_time:42844ms step_avg:94.37ms
step:455/1705 train_time:42937ms step_avg:94.37ms
step:456/1705 train_time:43030ms step_avg:94.36ms
step:457/1705 train_time:43123ms step_avg:94.36ms
step:458/1705 train_time:43217ms step_avg:94.36ms
step:459/1705 train_time:43310ms step_avg:94.36ms
step:460/1705 train_time:43404ms step_avg:94.36ms
step:461/1705 train_time:43497ms step_avg:94.35ms
step:462/1705 train_time:43590ms step_avg:94.35ms
step:463/1705 train_time:43684ms step_avg:94.35ms
step:464/1705 train_time:43776ms step_avg:94.34ms
step:465/1705 train_time:43868ms step_avg:94.34ms
step:466/1705 train_time:43961ms step_avg:94.34ms
step:467/1705 train_time:44054ms step_avg:94.33ms
step:468/1705 train_time:44148ms step_avg:94.33ms
step:469/1705 train_time:44242ms step_avg:94.33ms
step:470/1705 train_time:44334ms step_avg:94.33ms
step:471/1705 train_time:44428ms step_avg:94.33ms
step:472/1705 train_time:44522ms step_avg:94.33ms
step:473/1705 train_time:44615ms step_avg:94.32ms
step:474/1705 train_time:44707ms step_avg:94.32ms
step:475/1705 train_time:44800ms step_avg:94.32ms
step:476/1705 train_time:44894ms step_avg:94.31ms
step:477/1705 train_time:44986ms step_avg:94.31ms
step:478/1705 train_time:45079ms step_avg:94.31ms
step:479/1705 train_time:45172ms step_avg:94.30ms
step:480/1705 train_time:45265ms step_avg:94.30ms
step:481/1705 train_time:45358ms step_avg:94.30ms
step:482/1705 train_time:45450ms step_avg:94.30ms
step:483/1705 train_time:45544ms step_avg:94.29ms
step:484/1705 train_time:45638ms step_avg:94.29ms
step:485/1705 train_time:45730ms step_avg:94.29ms
step:486/1705 train_time:45823ms step_avg:94.29ms
step:487/1705 train_time:45916ms step_avg:94.28ms
step:488/1705 train_time:46008ms step_avg:94.28ms
step:489/1705 train_time:46101ms step_avg:94.28ms
step:490/1705 train_time:46194ms step_avg:94.27ms
step:491/1705 train_time:46286ms step_avg:94.27ms
step:492/1705 train_time:46380ms step_avg:94.27ms
step:493/1705 train_time:46472ms step_avg:94.26ms
step:494/1705 train_time:46565ms step_avg:94.26ms
step:495/1705 train_time:46658ms step_avg:94.26ms
step:496/1705 train_time:46751ms step_avg:94.26ms
step:497/1705 train_time:46844ms step_avg:94.25ms
step:498/1705 train_time:46937ms step_avg:94.25ms
step:499/1705 train_time:47030ms step_avg:94.25ms
step:500/1705 train_time:47123ms step_avg:94.25ms
step:500/1705 val_loss:3.7215 train_time:47217ms step_avg:94.43ms
step:501/1705 train_time:47239ms step_avg:94.29ms
step:502/1705 train_time:47314ms step_avg:94.25ms
step:503/1705 train_time:47412ms step_avg:94.26ms
step:504/1705 train_time:47506ms step_avg:94.26ms
step:505/1705 train_time:47598ms step_avg:94.25ms
step:506/1705 train_time:47689ms step_avg:94.25ms
step:507/1705 train_time:47781ms step_avg:94.24ms
step:508/1705 train_time:47874ms step_avg:94.24ms
step:509/1705 train_time:47966ms step_avg:94.24ms
step:510/1705 train_time:48058ms step_avg:94.23ms
step:511/1705 train_time:48151ms step_avg:94.23ms
step:512/1705 train_time:48245ms step_avg:94.23ms
step:513/1705 train_time:48339ms step_avg:94.23ms
step:514/1705 train_time:48434ms step_avg:94.23ms
step:515/1705 train_time:48528ms step_avg:94.23ms
step:516/1705 train_time:48621ms step_avg:94.23ms
step:517/1705 train_time:48713ms step_avg:94.22ms
step:518/1705 train_time:48807ms step_avg:94.22ms
step:519/1705 train_time:48899ms step_avg:94.22ms
step:520/1705 train_time:48991ms step_avg:94.21ms
step:521/1705 train_time:49084ms step_avg:94.21ms
step:522/1705 train_time:49177ms step_avg:94.21ms
step:523/1705 train_time:49271ms step_avg:94.21ms
step:524/1705 train_time:49364ms step_avg:94.21ms
step:525/1705 train_time:49457ms step_avg:94.20ms
step:526/1705 train_time:49551ms step_avg:94.20ms
step:527/1705 train_time:49644ms step_avg:94.20ms
step:528/1705 train_time:49736ms step_avg:94.20ms
step:529/1705 train_time:49829ms step_avg:94.20ms
step:530/1705 train_time:49922ms step_avg:94.19ms
step:531/1705 train_time:50014ms step_avg:94.19ms
step:532/1705 train_time:50108ms step_avg:94.19ms
step:533/1705 train_time:50201ms step_avg:94.19ms
step:534/1705 train_time:50294ms step_avg:94.18ms
step:535/1705 train_time:50387ms step_avg:94.18ms
step:536/1705 train_time:50480ms step_avg:94.18ms
step:537/1705 train_time:50573ms step_avg:94.18ms
step:538/1705 train_time:50667ms step_avg:94.18ms
step:539/1705 train_time:50760ms step_avg:94.17ms
step:540/1705 train_time:50852ms step_avg:94.17ms
step:541/1705 train_time:50945ms step_avg:94.17ms
step:542/1705 train_time:51038ms step_avg:94.17ms
step:543/1705 train_time:51131ms step_avg:94.16ms
step:544/1705 train_time:51224ms step_avg:94.16ms
step:545/1705 train_time:51317ms step_avg:94.16ms
step:546/1705 train_time:51410ms step_avg:94.16ms
step:547/1705 train_time:51503ms step_avg:94.16ms
step:548/1705 train_time:51596ms step_avg:94.15ms
step:549/1705 train_time:51690ms step_avg:94.15ms
step:550/1705 train_time:51783ms step_avg:94.15ms
step:551/1705 train_time:51875ms step_avg:94.15ms
step:552/1705 train_time:51969ms step_avg:94.15ms
step:553/1705 train_time:52062ms step_avg:94.14ms
step:554/1705 train_time:52154ms step_avg:94.14ms
step:555/1705 train_time:52248ms step_avg:94.14ms
step:556/1705 train_time:52341ms step_avg:94.14ms
step:557/1705 train_time:52435ms step_avg:94.14ms
step:558/1705 train_time:52529ms step_avg:94.14ms
step:559/1705 train_time:52622ms step_avg:94.14ms
step:560/1705 train_time:52715ms step_avg:94.13ms
step:561/1705 train_time:52809ms step_avg:94.13ms
step:562/1705 train_time:52902ms step_avg:94.13ms
step:563/1705 train_time:52994ms step_avg:94.13ms
step:564/1705 train_time:53087ms step_avg:94.13ms
step:565/1705 train_time:53180ms step_avg:94.12ms
step:566/1705 train_time:53273ms step_avg:94.12ms
step:567/1705 train_time:53367ms step_avg:94.12ms
step:568/1705 train_time:53460ms step_avg:94.12ms
step:569/1705 train_time:53553ms step_avg:94.12ms
step:570/1705 train_time:53646ms step_avg:94.12ms
step:571/1705 train_time:53741ms step_avg:94.12ms
step:572/1705 train_time:53835ms step_avg:94.12ms
step:573/1705 train_time:53930ms step_avg:94.12ms
step:574/1705 train_time:54023ms step_avg:94.12ms
step:575/1705 train_time:54117ms step_avg:94.12ms
step:576/1705 train_time:54212ms step_avg:94.12ms
step:577/1705 train_time:54306ms step_avg:94.12ms
step:578/1705 train_time:54401ms step_avg:94.12ms
step:579/1705 train_time:54495ms step_avg:94.12ms
step:580/1705 train_time:54589ms step_avg:94.12ms
step:581/1705 train_time:54684ms step_avg:94.12ms
step:582/1705 train_time:54777ms step_avg:94.12ms
step:583/1705 train_time:54872ms step_avg:94.12ms
step:584/1705 train_time:54966ms step_avg:94.12ms
step:585/1705 train_time:55060ms step_avg:94.12ms
step:586/1705 train_time:55154ms step_avg:94.12ms
step:587/1705 train_time:55249ms step_avg:94.12ms
step:588/1705 train_time:55343ms step_avg:94.12ms
step:589/1705 train_time:55438ms step_avg:94.12ms
step:590/1705 train_time:55532ms step_avg:94.12ms
step:591/1705 train_time:55627ms step_avg:94.12ms
step:592/1705 train_time:55721ms step_avg:94.12ms
step:593/1705 train_time:55815ms step_avg:94.12ms
step:594/1705 train_time:55910ms step_avg:94.13ms
step:595/1705 train_time:56005ms step_avg:94.13ms
step:596/1705 train_time:56098ms step_avg:94.12ms
step:597/1705 train_time:56193ms step_avg:94.13ms
step:598/1705 train_time:56287ms step_avg:94.13ms
step:599/1705 train_time:56382ms step_avg:94.13ms
step:600/1705 train_time:56476ms step_avg:94.13ms
step:601/1705 train_time:56571ms step_avg:94.13ms
step:602/1705 train_time:56666ms step_avg:94.13ms
step:603/1705 train_time:56760ms step_avg:94.13ms
step:604/1705 train_time:56854ms step_avg:94.13ms
step:605/1705 train_time:56949ms step_avg:94.13ms
step:606/1705 train_time:57044ms step_avg:94.13ms
step:607/1705 train_time:57138ms step_avg:94.13ms
step:608/1705 train_time:57232ms step_avg:94.13ms
step:609/1705 train_time:57327ms step_avg:94.13ms
step:610/1705 train_time:57421ms step_avg:94.13ms
step:611/1705 train_time:57516ms step_avg:94.13ms
step:612/1705 train_time:57611ms step_avg:94.13ms
step:613/1705 train_time:57706ms step_avg:94.14ms
step:614/1705 train_time:57800ms step_avg:94.14ms
step:615/1705 train_time:57894ms step_avg:94.14ms
step:616/1705 train_time:57988ms step_avg:94.14ms
step:617/1705 train_time:58083ms step_avg:94.14ms
step:618/1705 train_time:58177ms step_avg:94.14ms
step:619/1705 train_time:58272ms step_avg:94.14ms
step:620/1705 train_time:58366ms step_avg:94.14ms
step:621/1705 train_time:58461ms step_avg:94.14ms
step:622/1705 train_time:58554ms step_avg:94.14ms
step:623/1705 train_time:58648ms step_avg:94.14ms
step:624/1705 train_time:58742ms step_avg:94.14ms
step:625/1705 train_time:58836ms step_avg:94.14ms
step:625/1705 val_loss:3.6203 train_time:58932ms step_avg:94.29ms
step:626/1705 train_time:58955ms step_avg:94.18ms
step:627/1705 train_time:59038ms step_avg:94.16ms
step:628/1705 train_time:59137ms step_avg:94.17ms
step:629/1705 train_time:59231ms step_avg:94.17ms
step:630/1705 train_time:59325ms step_avg:94.17ms
step:631/1705 train_time:59418ms step_avg:94.16ms
step:632/1705 train_time:59511ms step_avg:94.16ms
step:633/1705 train_time:59604ms step_avg:94.16ms
step:634/1705 train_time:59697ms step_avg:94.16ms
step:635/1705 train_time:59790ms step_avg:94.16ms
step:636/1705 train_time:59885ms step_avg:94.16ms
step:637/1705 train_time:59980ms step_avg:94.16ms
step:638/1705 train_time:60078ms step_avg:94.17ms
step:639/1705 train_time:60438ms step_avg:94.58ms
step:640/1705 train_time:60529ms step_avg:94.58ms
step:641/1705 train_time:60621ms step_avg:94.57ms
step:642/1705 train_time:60715ms step_avg:94.57ms
step:643/1705 train_time:60809ms step_avg:94.57ms
step:644/1705 train_time:60902ms step_avg:94.57ms
step:645/1705 train_time:60995ms step_avg:94.57ms
step:646/1705 train_time:61088ms step_avg:94.56ms
step:647/1705 train_time:61181ms step_avg:94.56ms
step:648/1705 train_time:61274ms step_avg:94.56ms
step:649/1705 train_time:61372ms step_avg:94.56ms
step:650/1705 train_time:61469ms step_avg:94.57ms
step:651/1705 train_time:61565ms step_avg:94.57ms
step:652/1705 train_time:61660ms step_avg:94.57ms
step:653/1705 train_time:61754ms step_avg:94.57ms
step:654/1705 train_time:61848ms step_avg:94.57ms
step:655/1705 train_time:61941ms step_avg:94.57ms
step:656/1705 train_time:62035ms step_avg:94.57ms
step:657/1705 train_time:62129ms step_avg:94.56ms
step:658/1705 train_time:62222ms step_avg:94.56ms
step:659/1705 train_time:62316ms step_avg:94.56ms
step:660/1705 train_time:62413ms step_avg:94.56ms
step:661/1705 train_time:62508ms step_avg:94.57ms
step:662/1705 train_time:62602ms step_avg:94.57ms
step:663/1705 train_time:62697ms step_avg:94.57ms
step:664/1705 train_time:62792ms step_avg:94.57ms
step:665/1705 train_time:62886ms step_avg:94.57ms
step:666/1705 train_time:62979ms step_avg:94.56ms
step:667/1705 train_time:63073ms step_avg:94.56ms
step:668/1705 train_time:63166ms step_avg:94.56ms
step:669/1705 train_time:63260ms step_avg:94.56ms
step:670/1705 train_time:63355ms step_avg:94.56ms
step:671/1705 train_time:63450ms step_avg:94.56ms
step:672/1705 train_time:63545ms step_avg:94.56ms
step:673/1705 train_time:63639ms step_avg:94.56ms
step:674/1705 train_time:63733ms step_avg:94.56ms
step:675/1705 train_time:63828ms step_avg:94.56ms
step:676/1705 train_time:63922ms step_avg:94.56ms
step:677/1705 train_time:64016ms step_avg:94.56ms
step:678/1705 train_time:64110ms step_avg:94.56ms
step:679/1705 train_time:64204ms step_avg:94.56ms
step:680/1705 train_time:64298ms step_avg:94.56ms
step:681/1705 train_time:64392ms step_avg:94.56ms
step:682/1705 train_time:64488ms step_avg:94.56ms
step:683/1705 train_time:64585ms step_avg:94.56ms
step:684/1705 train_time:64677ms step_avg:94.56ms
step:685/1705 train_time:64772ms step_avg:94.56ms
step:686/1705 train_time:64868ms step_avg:94.56ms
step:687/1705 train_time:64962ms step_avg:94.56ms
step:688/1705 train_time:65055ms step_avg:94.56ms
step:689/1705 train_time:65150ms step_avg:94.56ms
step:690/1705 train_time:65245ms step_avg:94.56ms
step:691/1705 train_time:65339ms step_avg:94.56ms
step:692/1705 train_time:65434ms step_avg:94.56ms
step:693/1705 train_time:65529ms step_avg:94.56ms
step:694/1705 train_time:65623ms step_avg:94.56ms
step:695/1705 train_time:65717ms step_avg:94.56ms
step:696/1705 train_time:65813ms step_avg:94.56ms
step:697/1705 train_time:65907ms step_avg:94.56ms
step:698/1705 train_time:66000ms step_avg:94.56ms
step:699/1705 train_time:66094ms step_avg:94.56ms
step:700/1705 train_time:66190ms step_avg:94.56ms
step:701/1705 train_time:66283ms step_avg:94.56ms
step:702/1705 train_time:66378ms step_avg:94.56ms
step:703/1705 train_time:66473ms step_avg:94.56ms
step:704/1705 train_time:66567ms step_avg:94.56ms
step:705/1705 train_time:66661ms step_avg:94.55ms
step:706/1705 train_time:66755ms step_avg:94.55ms
step:707/1705 train_time:66850ms step_avg:94.55ms
step:708/1705 train_time:66944ms step_avg:94.55ms
step:709/1705 train_time:67037ms step_avg:94.55ms
step:710/1705 train_time:67132ms step_avg:94.55ms
step:711/1705 train_time:67226ms step_avg:94.55ms
step:712/1705 train_time:67320ms step_avg:94.55ms
step:713/1705 train_time:67414ms step_avg:94.55ms
step:714/1705 train_time:67510ms step_avg:94.55ms
step:715/1705 train_time:67604ms step_avg:94.55ms
step:716/1705 train_time:67698ms step_avg:94.55ms
step:717/1705 train_time:67793ms step_avg:94.55ms
step:718/1705 train_time:67889ms step_avg:94.55ms
step:719/1705 train_time:67983ms step_avg:94.55ms
step:720/1705 train_time:68077ms step_avg:94.55ms
step:721/1705 train_time:68172ms step_avg:94.55ms
step:722/1705 train_time:68266ms step_avg:94.55ms
step:723/1705 train_time:68359ms step_avg:94.55ms
step:724/1705 train_time:68454ms step_avg:94.55ms
step:725/1705 train_time:68549ms step_avg:94.55ms
step:726/1705 train_time:68643ms step_avg:94.55ms
step:727/1705 train_time:68738ms step_avg:94.55ms
step:728/1705 train_time:68833ms step_avg:94.55ms
step:729/1705 train_time:68928ms step_avg:94.55ms
step:730/1705 train_time:69023ms step_avg:94.55ms
step:731/1705 train_time:69117ms step_avg:94.55ms
step:732/1705 train_time:69212ms step_avg:94.55ms
step:733/1705 train_time:69306ms step_avg:94.55ms
step:734/1705 train_time:69400ms step_avg:94.55ms
step:735/1705 train_time:69495ms step_avg:94.55ms
step:736/1705 train_time:69591ms step_avg:94.55ms
step:737/1705 train_time:69685ms step_avg:94.55ms
step:738/1705 train_time:69779ms step_avg:94.55ms
step:739/1705 train_time:69874ms step_avg:94.55ms
step:740/1705 train_time:69969ms step_avg:94.55ms
step:741/1705 train_time:70063ms step_avg:94.55ms
step:742/1705 train_time:70157ms step_avg:94.55ms
step:743/1705 train_time:70252ms step_avg:94.55ms
step:744/1705 train_time:70346ms step_avg:94.55ms
step:745/1705 train_time:70440ms step_avg:94.55ms
step:746/1705 train_time:70535ms step_avg:94.55ms
step:747/1705 train_time:70630ms step_avg:94.55ms
step:748/1705 train_time:70724ms step_avg:94.55ms
step:749/1705 train_time:70817ms step_avg:94.55ms
step:750/1705 train_time:70912ms step_avg:94.55ms
step:750/1705 val_loss:3.5658 train_time:71007ms step_avg:94.68ms
step:751/1705 train_time:71029ms step_avg:94.58ms
step:752/1705 train_time:71106ms step_avg:94.56ms
step:753/1705 train_time:71203ms step_avg:94.56ms
step:754/1705 train_time:71299ms step_avg:94.56ms
step:755/1705 train_time:71393ms step_avg:94.56ms
step:756/1705 train_time:71487ms step_avg:94.56ms
step:757/1705 train_time:71580ms step_avg:94.56ms
step:758/1705 train_time:71674ms step_avg:94.56ms
step:759/1705 train_time:71767ms step_avg:94.55ms
step:760/1705 train_time:71860ms step_avg:94.55ms
step:761/1705 train_time:71955ms step_avg:94.55ms
step:762/1705 train_time:72051ms step_avg:94.56ms
step:763/1705 train_time:72148ms step_avg:94.56ms
step:764/1705 train_time:72242ms step_avg:94.56ms
step:765/1705 train_time:72337ms step_avg:94.56ms
step:766/1705 train_time:72432ms step_avg:94.56ms
step:767/1705 train_time:72526ms step_avg:94.56ms
step:768/1705 train_time:72620ms step_avg:94.56ms
step:769/1705 train_time:72715ms step_avg:94.56ms
step:770/1705 train_time:72809ms step_avg:94.56ms
step:771/1705 train_time:72902ms step_avg:94.55ms
step:772/1705 train_time:72997ms step_avg:94.56ms
step:773/1705 train_time:73093ms step_avg:94.56ms
step:774/1705 train_time:73188ms step_avg:94.56ms
step:775/1705 train_time:73282ms step_avg:94.56ms
step:776/1705 train_time:73376ms step_avg:94.56ms
step:777/1705 train_time:73472ms step_avg:94.56ms
step:778/1705 train_time:73565ms step_avg:94.56ms
step:779/1705 train_time:73659ms step_avg:94.56ms
step:780/1705 train_time:73754ms step_avg:94.56ms
step:781/1705 train_time:73848ms step_avg:94.56ms
step:782/1705 train_time:73942ms step_avg:94.55ms
step:783/1705 train_time:74038ms step_avg:94.56ms
step:784/1705 train_time:74133ms step_avg:94.56ms
step:785/1705 train_time:74228ms step_avg:94.56ms
step:786/1705 train_time:74322ms step_avg:94.56ms
step:787/1705 train_time:74418ms step_avg:94.56ms
step:788/1705 train_time:74512ms step_avg:94.56ms
step:789/1705 train_time:74606ms step_avg:94.56ms
step:790/1705 train_time:74699ms step_avg:94.56ms
step:791/1705 train_time:74795ms step_avg:94.56ms
step:792/1705 train_time:74889ms step_avg:94.56ms
step:793/1705 train_time:74983ms step_avg:94.56ms
step:794/1705 train_time:75077ms step_avg:94.56ms
step:795/1705 train_time:75172ms step_avg:94.56ms
step:796/1705 train_time:75267ms step_avg:94.56ms
step:797/1705 train_time:75361ms step_avg:94.56ms
step:798/1705 train_time:75456ms step_avg:94.56ms
step:799/1705 train_time:75550ms step_avg:94.56ms
step:800/1705 train_time:75644ms step_avg:94.56ms
step:801/1705 train_time:75739ms step_avg:94.56ms
step:802/1705 train_time:75833ms step_avg:94.55ms
step:803/1705 train_time:75928ms step_avg:94.55ms
step:804/1705 train_time:76022ms step_avg:94.55ms
step:805/1705 train_time:76116ms step_avg:94.55ms
step:806/1705 train_time:76211ms step_avg:94.55ms
step:807/1705 train_time:76305ms step_avg:94.55ms
step:808/1705 train_time:76400ms step_avg:94.55ms
step:809/1705 train_time:76496ms step_avg:94.56ms
step:810/1705 train_time:76590ms step_avg:94.56ms
step:811/1705 train_time:76684ms step_avg:94.55ms
step:812/1705 train_time:76778ms step_avg:94.55ms
step:813/1705 train_time:76873ms step_avg:94.55ms
step:814/1705 train_time:76967ms step_avg:94.55ms
step:815/1705 train_time:77061ms step_avg:94.55ms
step:816/1705 train_time:77156ms step_avg:94.55ms
step:817/1705 train_time:77250ms step_avg:94.55ms
step:818/1705 train_time:77344ms step_avg:94.55ms
step:819/1705 train_time:77438ms step_avg:94.55ms
step:820/1705 train_time:77533ms step_avg:94.55ms
step:821/1705 train_time:77628ms step_avg:94.55ms
step:822/1705 train_time:77722ms step_avg:94.55ms
step:823/1705 train_time:77816ms step_avg:94.55ms
step:824/1705 train_time:77911ms step_avg:94.55ms
step:825/1705 train_time:78004ms step_avg:94.55ms
step:826/1705 train_time:78098ms step_avg:94.55ms
step:827/1705 train_time:78193ms step_avg:94.55ms
step:828/1705 train_time:78288ms step_avg:94.55ms
step:829/1705 train_time:78382ms step_avg:94.55ms
step:830/1705 train_time:78477ms step_avg:94.55ms
step:831/1705 train_time:78573ms step_avg:94.55ms
step:832/1705 train_time:78667ms step_avg:94.55ms
step:833/1705 train_time:78761ms step_avg:94.55ms
step:834/1705 train_time:78856ms step_avg:94.55ms
step:835/1705 train_time:78951ms step_avg:94.55ms
step:836/1705 train_time:79045ms step_avg:94.55ms
step:837/1705 train_time:79140ms step_avg:94.55ms
step:838/1705 train_time:79234ms step_avg:94.55ms
step:839/1705 train_time:79329ms step_avg:94.55ms
step:840/1705 train_time:79423ms step_avg:94.55ms
step:841/1705 train_time:79518ms step_avg:94.55ms
step:842/1705 train_time:79613ms step_avg:94.55ms
step:843/1705 train_time:79707ms step_avg:94.55ms
step:844/1705 train_time:79801ms step_avg:94.55ms
step:845/1705 train_time:79896ms step_avg:94.55ms
step:846/1705 train_time:79990ms step_avg:94.55ms
step:847/1705 train_time:80083ms step_avg:94.55ms
step:848/1705 train_time:80178ms step_avg:94.55ms
step:849/1705 train_time:80273ms step_avg:94.55ms
step:850/1705 train_time:80368ms step_avg:94.55ms
step:851/1705 train_time:80626ms step_avg:94.74ms
step:852/1705 train_time:80734ms step_avg:94.76ms
step:853/1705 train_time:80826ms step_avg:94.75ms
step:854/1705 train_time:80919ms step_avg:94.75ms
step:855/1705 train_time:81012ms step_avg:94.75ms
step:856/1705 train_time:81105ms step_avg:94.75ms
step:857/1705 train_time:81199ms step_avg:94.75ms
step:858/1705 train_time:81292ms step_avg:94.75ms
step:859/1705 train_time:81386ms step_avg:94.75ms
step:860/1705 train_time:81480ms step_avg:94.74ms
step:861/1705 train_time:81576ms step_avg:94.75ms
step:862/1705 train_time:81675ms step_avg:94.75ms
step:863/1705 train_time:81774ms step_avg:94.76ms
step:864/1705 train_time:81868ms step_avg:94.75ms
step:865/1705 train_time:81962ms step_avg:94.75ms
step:866/1705 train_time:82056ms step_avg:94.75ms
step:867/1705 train_time:82149ms step_avg:94.75ms
step:868/1705 train_time:82242ms step_avg:94.75ms
step:869/1705 train_time:82336ms step_avg:94.75ms
step:870/1705 train_time:82429ms step_avg:94.75ms
step:871/1705 train_time:82523ms step_avg:94.74ms
step:872/1705 train_time:82620ms step_avg:94.75ms
step:873/1705 train_time:82718ms step_avg:94.75ms
step:874/1705 train_time:82815ms step_avg:94.75ms
step:875/1705 train_time:82910ms step_avg:94.75ms
step:875/1705 val_loss:3.5261 train_time:83004ms step_avg:94.86ms
step:876/1705 train_time:83025ms step_avg:94.78ms
step:877/1705 train_time:83103ms step_avg:94.76ms
step:878/1705 train_time:83204ms step_avg:94.76ms
step:879/1705 train_time:83298ms step_avg:94.76ms
step:880/1705 train_time:83392ms step_avg:94.76ms
step:881/1705 train_time:83484ms step_avg:94.76ms
step:882/1705 train_time:83578ms step_avg:94.76ms
step:883/1705 train_time:83672ms step_avg:94.76ms
step:884/1705 train_time:83764ms step_avg:94.76ms
step:885/1705 train_time:83858ms step_avg:94.75ms
step:886/1705 train_time:83952ms step_avg:94.75ms
step:887/1705 train_time:84048ms step_avg:94.75ms
step:888/1705 train_time:84145ms step_avg:94.76ms
step:889/1705 train_time:84242ms step_avg:94.76ms
step:890/1705 train_time:84337ms step_avg:94.76ms
step:891/1705 train_time:84431ms step_avg:94.76ms
step:892/1705 train_time:84525ms step_avg:94.76ms
step:893/1705 train_time:84620ms step_avg:94.76ms
step:894/1705 train_time:84713ms step_avg:94.76ms
step:895/1705 train_time:84806ms step_avg:94.76ms
step:896/1705 train_time:84900ms step_avg:94.75ms
step:897/1705 train_time:84995ms step_avg:94.76ms
step:898/1705 train_time:85091ms step_avg:94.76ms
step:899/1705 train_time:85185ms step_avg:94.76ms
step:900/1705 train_time:85280ms step_avg:94.76ms
step:901/1705 train_time:85375ms step_avg:94.76ms
step:902/1705 train_time:85470ms step_avg:94.76ms
step:903/1705 train_time:85564ms step_avg:94.75ms
step:904/1705 train_time:85658ms step_avg:94.75ms
step:905/1705 train_time:85751ms step_avg:94.75ms
step:906/1705 train_time:85844ms step_avg:94.75ms
step:907/1705 train_time:85938ms step_avg:94.75ms
step:908/1705 train_time:86034ms step_avg:94.75ms
step:909/1705 train_time:86128ms step_avg:94.75ms
step:910/1705 train_time:86223ms step_avg:94.75ms
step:911/1705 train_time:86318ms step_avg:94.75ms
step:912/1705 train_time:86414ms step_avg:94.75ms
step:913/1705 train_time:86508ms step_avg:94.75ms
step:914/1705 train_time:86603ms step_avg:94.75ms
step:915/1705 train_time:86698ms step_avg:94.75ms
step:916/1705 train_time:86792ms step_avg:94.75ms
step:917/1705 train_time:86886ms step_avg:94.75ms
step:918/1705 train_time:86980ms step_avg:94.75ms
step:919/1705 train_time:87076ms step_avg:94.75ms
step:920/1705 train_time:87171ms step_avg:94.75ms
step:921/1705 train_time:87265ms step_avg:94.75ms
step:922/1705 train_time:87360ms step_avg:94.75ms
step:923/1705 train_time:87455ms step_avg:94.75ms
step:924/1705 train_time:87550ms step_avg:94.75ms
step:925/1705 train_time:87644ms step_avg:94.75ms
step:926/1705 train_time:87739ms step_avg:94.75ms
step:927/1705 train_time:87833ms step_avg:94.75ms
step:928/1705 train_time:87927ms step_avg:94.75ms
step:929/1705 train_time:88021ms step_avg:94.75ms
step:930/1705 train_time:88117ms step_avg:94.75ms
step:931/1705 train_time:88212ms step_avg:94.75ms
step:932/1705 train_time:88306ms step_avg:94.75ms
step:933/1705 train_time:88400ms step_avg:94.75ms
step:934/1705 train_time:88496ms step_avg:94.75ms
step:935/1705 train_time:88591ms step_avg:94.75ms
step:936/1705 train_time:88685ms step_avg:94.75ms
step:937/1705 train_time:88779ms step_avg:94.75ms
step:938/1705 train_time:88874ms step_avg:94.75ms
step:939/1705 train_time:88968ms step_avg:94.75ms
step:940/1705 train_time:89063ms step_avg:94.75ms
step:941/1705 train_time:89158ms step_avg:94.75ms
step:942/1705 train_time:89252ms step_avg:94.75ms
step:943/1705 train_time:89345ms step_avg:94.75ms
step:944/1705 train_time:89440ms step_avg:94.75ms
step:945/1705 train_time:89536ms step_avg:94.75ms
step:946/1705 train_time:89632ms step_avg:94.75ms
step:947/1705 train_time:89724ms step_avg:94.75ms
step:948/1705 train_time:89819ms step_avg:94.75ms
step:949/1705 train_time:89914ms step_avg:94.75ms
step:950/1705 train_time:90008ms step_avg:94.75ms
step:951/1705 train_time:90102ms step_avg:94.74ms
step:952/1705 train_time:90198ms step_avg:94.75ms
step:953/1705 train_time:90293ms step_avg:94.75ms
step:954/1705 train_time:90386ms step_avg:94.74ms
step:955/1705 train_time:90481ms step_avg:94.74ms
step:956/1705 train_time:90576ms step_avg:94.75ms
step:957/1705 train_time:90671ms step_avg:94.74ms
step:958/1705 train_time:90764ms step_avg:94.74ms
step:959/1705 train_time:90859ms step_avg:94.74ms
step:960/1705 train_time:90954ms step_avg:94.74ms
step:961/1705 train_time:91047ms step_avg:94.74ms
step:962/1705 train_time:91142ms step_avg:94.74ms
step:963/1705 train_time:91237ms step_avg:94.74ms
step:964/1705 train_time:91331ms step_avg:94.74ms
step:965/1705 train_time:91425ms step_avg:94.74ms
step:966/1705 train_time:91520ms step_avg:94.74ms
step:967/1705 train_time:91615ms step_avg:94.74ms
step:968/1705 train_time:91709ms step_avg:94.74ms
step:969/1705 train_time:91803ms step_avg:94.74ms
step:970/1705 train_time:91897ms step_avg:94.74ms
step:971/1705 train_time:91992ms step_avg:94.74ms
step:972/1705 train_time:92087ms step_avg:94.74ms
step:973/1705 train_time:92181ms step_avg:94.74ms
step:974/1705 train_time:92276ms step_avg:94.74ms
step:975/1705 train_time:92370ms step_avg:94.74ms
step:976/1705 train_time:92465ms step_avg:94.74ms
step:977/1705 train_time:92559ms step_avg:94.74ms
step:978/1705 train_time:92654ms step_avg:94.74ms
step:979/1705 train_time:92748ms step_avg:94.74ms
step:980/1705 train_time:92842ms step_avg:94.74ms
step:981/1705 train_time:92938ms step_avg:94.74ms
step:982/1705 train_time:93032ms step_avg:94.74ms
step:983/1705 train_time:93126ms step_avg:94.74ms
step:984/1705 train_time:93221ms step_avg:94.74ms
step:985/1705 train_time:93316ms step_avg:94.74ms
step:986/1705 train_time:93411ms step_avg:94.74ms
step:987/1705 train_time:93505ms step_avg:94.74ms
step:988/1705 train_time:93601ms step_avg:94.74ms
step:989/1705 train_time:93696ms step_avg:94.74ms
step:990/1705 train_time:93790ms step_avg:94.74ms
step:991/1705 train_time:93884ms step_avg:94.74ms
step:992/1705 train_time:93979ms step_avg:94.74ms
step:993/1705 train_time:94073ms step_avg:94.74ms
step:994/1705 train_time:94168ms step_avg:94.74ms
step:995/1705 train_time:94262ms step_avg:94.74ms
step:996/1705 train_time:94358ms step_avg:94.74ms
step:997/1705 train_time:94454ms step_avg:94.74ms
step:998/1705 train_time:94548ms step_avg:94.74ms
step:999/1705 train_time:94642ms step_avg:94.74ms
step:1000/1705 train_time:94737ms step_avg:94.74ms
step:1000/1705 val_loss:3.4867 train_time:94832ms step_avg:94.83ms
step:1001/1705 train_time:94853ms step_avg:94.76ms
step:1002/1705 train_time:94931ms step_avg:94.74ms
step:1003/1705 train_time:95027ms step_avg:94.74ms
step:1004/1705 train_time:95122ms step_avg:94.74ms
step:1005/1705 train_time:95216ms step_avg:94.74ms
step:1006/1705 train_time:95309ms step_avg:94.74ms
step:1007/1705 train_time:95403ms step_avg:94.74ms
step:1008/1705 train_time:95497ms step_avg:94.74ms
step:1009/1705 train_time:95590ms step_avg:94.74ms
step:1010/1705 train_time:95684ms step_avg:94.74ms
step:1011/1705 train_time:95779ms step_avg:94.74ms
step:1012/1705 train_time:95877ms step_avg:94.74ms
step:1013/1705 train_time:95975ms step_avg:94.74ms
step:1014/1705 train_time:96069ms step_avg:94.74ms
step:1015/1705 train_time:96163ms step_avg:94.74ms
step:1016/1705 train_time:96257ms step_avg:94.74ms
step:1017/1705 train_time:96351ms step_avg:94.74ms
step:1018/1705 train_time:96444ms step_avg:94.74ms
step:1019/1705 train_time:96538ms step_avg:94.74ms
step:1020/1705 train_time:96632ms step_avg:94.74ms
step:1021/1705 train_time:96725ms step_avg:94.74ms
step:1022/1705 train_time:96821ms step_avg:94.74ms
step:1023/1705 train_time:96917ms step_avg:94.74ms
step:1024/1705 train_time:97013ms step_avg:94.74ms
step:1025/1705 train_time:97107ms step_avg:94.74ms
step:1026/1705 train_time:97201ms step_avg:94.74ms
step:1027/1705 train_time:97297ms step_avg:94.74ms
step:1028/1705 train_time:97391ms step_avg:94.74ms
step:1029/1705 train_time:97485ms step_avg:94.74ms
step:1030/1705 train_time:97579ms step_avg:94.74ms
step:1031/1705 train_time:97673ms step_avg:94.74ms
step:1032/1705 train_time:97767ms step_avg:94.74ms
step:1033/1705 train_time:97863ms step_avg:94.74ms
step:1034/1705 train_time:97959ms step_avg:94.74ms
step:1035/1705 train_time:98055ms step_avg:94.74ms
step:1036/1705 train_time:98149ms step_avg:94.74ms
step:1037/1705 train_time:98243ms step_avg:94.74ms
step:1038/1705 train_time:98339ms step_avg:94.74ms
step:1039/1705 train_time:98432ms step_avg:94.74ms
step:1040/1705 train_time:98526ms step_avg:94.74ms
step:1041/1705 train_time:98620ms step_avg:94.74ms
step:1042/1705 train_time:98715ms step_avg:94.74ms
step:1043/1705 train_time:98809ms step_avg:94.74ms
step:1044/1705 train_time:98904ms step_avg:94.74ms
step:1045/1705 train_time:99000ms step_avg:94.74ms
step:1046/1705 train_time:99096ms step_avg:94.74ms
step:1047/1705 train_time:99190ms step_avg:94.74ms
step:1048/1705 train_time:99284ms step_avg:94.74ms
step:1049/1705 train_time:99379ms step_avg:94.74ms
step:1050/1705 train_time:99473ms step_avg:94.74ms
step:1051/1705 train_time:99566ms step_avg:94.73ms
step:1052/1705 train_time:99661ms step_avg:94.73ms
step:1053/1705 train_time:99755ms step_avg:94.73ms
step:1054/1705 train_time:99851ms step_avg:94.73ms
step:1055/1705 train_time:99945ms step_avg:94.73ms
step:1056/1705 train_time:100040ms step_avg:94.73ms
step:1057/1705 train_time:100136ms step_avg:94.74ms
step:1058/1705 train_time:100230ms step_avg:94.74ms
step:1059/1705 train_time:100324ms step_avg:94.73ms
step:1060/1705 train_time:100420ms step_avg:94.74ms
step:1061/1705 train_time:100515ms step_avg:94.74ms
step:1062/1705 train_time:100779ms step_avg:94.90ms
step:1063/1705 train_time:100964ms step_avg:94.98ms
step:1064/1705 train_time:101056ms step_avg:94.98ms
step:1065/1705 train_time:101150ms step_avg:94.98ms
step:1066/1705 train_time:101243ms step_avg:94.97ms
step:1067/1705 train_time:101337ms step_avg:94.97ms
step:1068/1705 train_time:101430ms step_avg:94.97ms
step:1069/1705 train_time:101524ms step_avg:94.97ms
step:1070/1705 train_time:101617ms step_avg:94.97ms
step:1071/1705 train_time:101711ms step_avg:94.97ms
step:1072/1705 train_time:101805ms step_avg:94.97ms
step:1073/1705 train_time:101905ms step_avg:94.97ms
step:1074/1705 train_time:102003ms step_avg:94.97ms
step:1075/1705 train_time:102099ms step_avg:94.98ms
step:1076/1705 train_time:102194ms step_avg:94.98ms
step:1077/1705 train_time:102288ms step_avg:94.98ms
step:1078/1705 train_time:102381ms step_avg:94.97ms
step:1079/1705 train_time:102477ms step_avg:94.97ms
step:1080/1705 train_time:102570ms step_avg:94.97ms
step:1081/1705 train_time:102663ms step_avg:94.97ms
step:1082/1705 train_time:102757ms step_avg:94.97ms
step:1083/1705 train_time:102853ms step_avg:94.97ms
step:1084/1705 train_time:102948ms step_avg:94.97ms
step:1085/1705 train_time:103043ms step_avg:94.97ms
step:1086/1705 train_time:103138ms step_avg:94.97ms
step:1087/1705 train_time:103233ms step_avg:94.97ms
step:1088/1705 train_time:103326ms step_avg:94.97ms
step:1089/1705 train_time:103420ms step_avg:94.97ms
step:1090/1705 train_time:103515ms step_avg:94.97ms
step:1091/1705 train_time:103609ms step_avg:94.97ms
step:1092/1705 train_time:103703ms step_avg:94.97ms
step:1093/1705 train_time:103798ms step_avg:94.97ms
step:1094/1705 train_time:103893ms step_avg:94.97ms
step:1095/1705 train_time:103988ms step_avg:94.97ms
step:1096/1705 train_time:104082ms step_avg:94.97ms
step:1097/1705 train_time:104177ms step_avg:94.97ms
step:1098/1705 train_time:104271ms step_avg:94.96ms
step:1099/1705 train_time:104365ms step_avg:94.96ms
step:1100/1705 train_time:104459ms step_avg:94.96ms
step:1101/1705 train_time:104554ms step_avg:94.96ms
step:1102/1705 train_time:104648ms step_avg:94.96ms
step:1103/1705 train_time:104741ms step_avg:94.96ms
step:1104/1705 train_time:104836ms step_avg:94.96ms
step:1105/1705 train_time:104931ms step_avg:94.96ms
step:1106/1705 train_time:105026ms step_avg:94.96ms
step:1107/1705 train_time:105121ms step_avg:94.96ms
step:1108/1705 train_time:105216ms step_avg:94.96ms
step:1109/1705 train_time:105310ms step_avg:94.96ms
step:1110/1705 train_time:105404ms step_avg:94.96ms
step:1111/1705 train_time:105499ms step_avg:94.96ms
step:1112/1705 train_time:105594ms step_avg:94.96ms
step:1113/1705 train_time:105687ms step_avg:94.96ms
step:1114/1705 train_time:105781ms step_avg:94.96ms
step:1115/1705 train_time:105877ms step_avg:94.96ms
step:1116/1705 train_time:105972ms step_avg:94.96ms
step:1117/1705 train_time:106066ms step_avg:94.96ms
step:1118/1705 train_time:106161ms step_avg:94.96ms
step:1119/1705 train_time:106256ms step_avg:94.96ms
step:1120/1705 train_time:106351ms step_avg:94.96ms
step:1121/1705 train_time:106444ms step_avg:94.95ms
step:1122/1705 train_time:106539ms step_avg:94.95ms
step:1123/1705 train_time:106633ms step_avg:94.95ms
step:1124/1705 train_time:106728ms step_avg:94.95ms
step:1125/1705 train_time:106822ms step_avg:94.95ms
step:1125/1705 val_loss:3.4396 train_time:106917ms step_avg:95.04ms
step:1126/1705 train_time:106938ms step_avg:94.97ms
step:1127/1705 train_time:107018ms step_avg:94.96ms
step:1128/1705 train_time:107116ms step_avg:94.96ms
step:1129/1705 train_time:107211ms step_avg:94.96ms
step:1130/1705 train_time:107304ms step_avg:94.96ms
step:1131/1705 train_time:107398ms step_avg:94.96ms
step:1132/1705 train_time:107492ms step_avg:94.96ms
step:1133/1705 train_time:107585ms step_avg:94.96ms
step:1134/1705 train_time:107679ms step_avg:94.95ms
step:1135/1705 train_time:107773ms step_avg:94.95ms
step:1136/1705 train_time:107867ms step_avg:94.95ms
step:1137/1705 train_time:107963ms step_avg:94.95ms
step:1138/1705 train_time:108060ms step_avg:94.96ms
step:1139/1705 train_time:108157ms step_avg:94.96ms
step:1140/1705 train_time:108252ms step_avg:94.96ms
step:1141/1705 train_time:108348ms step_avg:94.96ms
step:1142/1705 train_time:108441ms step_avg:94.96ms
step:1143/1705 train_time:108537ms step_avg:94.96ms
step:1144/1705 train_time:108631ms step_avg:94.96ms
step:1145/1705 train_time:108726ms step_avg:94.96ms
step:1146/1705 train_time:108821ms step_avg:94.96ms
step:1147/1705 train_time:108917ms step_avg:94.96ms
step:1148/1705 train_time:109014ms step_avg:94.96ms
step:1149/1705 train_time:109110ms step_avg:94.96ms
step:1150/1705 train_time:109205ms step_avg:94.96ms
step:1151/1705 train_time:109301ms step_avg:94.96ms
step:1152/1705 train_time:109396ms step_avg:94.96ms
step:1153/1705 train_time:109492ms step_avg:94.96ms
step:1154/1705 train_time:109585ms step_avg:94.96ms
step:1155/1705 train_time:109681ms step_avg:94.96ms
step:1156/1705 train_time:109776ms step_avg:94.96ms
step:1157/1705 train_time:109871ms step_avg:94.96ms
step:1158/1705 train_time:109966ms step_avg:94.96ms
step:1159/1705 train_time:110063ms step_avg:94.96ms
step:1160/1705 train_time:110159ms step_avg:94.96ms
step:1161/1705 train_time:110256ms step_avg:94.97ms
step:1162/1705 train_time:110351ms step_avg:94.97ms
step:1163/1705 train_time:110447ms step_avg:94.97ms
step:1164/1705 train_time:110541ms step_avg:94.97ms
step:1165/1705 train_time:110636ms step_avg:94.97ms
step:1166/1705 train_time:110732ms step_avg:94.97ms
step:1167/1705 train_time:110827ms step_avg:94.97ms
step:1168/1705 train_time:110922ms step_avg:94.97ms
step:1169/1705 train_time:111017ms step_avg:94.97ms
step:1170/1705 train_time:111112ms step_avg:94.97ms
step:1171/1705 train_time:111208ms step_avg:94.97ms
step:1172/1705 train_time:111303ms step_avg:94.97ms
step:1173/1705 train_time:111399ms step_avg:94.97ms
step:1174/1705 train_time:111496ms step_avg:94.97ms
step:1175/1705 train_time:111591ms step_avg:94.97ms
step:1176/1705 train_time:111686ms step_avg:94.97ms
step:1177/1705 train_time:111781ms step_avg:94.97ms
step:1178/1705 train_time:111876ms step_avg:94.97ms
step:1179/1705 train_time:111971ms step_avg:94.97ms
step:1180/1705 train_time:112066ms step_avg:94.97ms
step:1181/1705 train_time:112162ms step_avg:94.97ms
step:1182/1705 train_time:112258ms step_avg:94.97ms
step:1183/1705 train_time:112354ms step_avg:94.97ms
step:1184/1705 train_time:112449ms step_avg:94.97ms
step:1185/1705 train_time:112544ms step_avg:94.97ms
step:1186/1705 train_time:112639ms step_avg:94.97ms
step:1187/1705 train_time:112735ms step_avg:94.97ms
step:1188/1705 train_time:112831ms step_avg:94.98ms
step:1189/1705 train_time:112925ms step_avg:94.98ms
step:1190/1705 train_time:113021ms step_avg:94.98ms
step:1191/1705 train_time:113118ms step_avg:94.98ms
step:1192/1705 train_time:113214ms step_avg:94.98ms
step:1193/1705 train_time:113309ms step_avg:94.98ms
step:1194/1705 train_time:113404ms step_avg:94.98ms
step:1195/1705 train_time:113500ms step_avg:94.98ms
step:1196/1705 train_time:113595ms step_avg:94.98ms
step:1197/1705 train_time:113691ms step_avg:94.98ms
step:1198/1705 train_time:113785ms step_avg:94.98ms
step:1199/1705 train_time:113880ms step_avg:94.98ms
step:1200/1705 train_time:113976ms step_avg:94.98ms
step:1201/1705 train_time:114070ms step_avg:94.98ms
step:1202/1705 train_time:114165ms step_avg:94.98ms
step:1203/1705 train_time:114260ms step_avg:94.98ms
step:1204/1705 train_time:114356ms step_avg:94.98ms
step:1205/1705 train_time:114453ms step_avg:94.98ms
step:1206/1705 train_time:114548ms step_avg:94.98ms
step:1207/1705 train_time:114643ms step_avg:94.98ms
step:1208/1705 train_time:114738ms step_avg:94.98ms
step:1209/1705 train_time:114834ms step_avg:94.98ms
step:1210/1705 train_time:114929ms step_avg:94.98ms
step:1211/1705 train_time:115023ms step_avg:94.98ms
step:1212/1705 train_time:115119ms step_avg:94.98ms
step:1213/1705 train_time:115214ms step_avg:94.98ms
step:1214/1705 train_time:115310ms step_avg:94.98ms
step:1215/1705 train_time:115405ms step_avg:94.98ms
step:1216/1705 train_time:115500ms step_avg:94.98ms
step:1217/1705 train_time:115596ms step_avg:94.98ms
step:1218/1705 train_time:115692ms step_avg:94.99ms
step:1219/1705 train_time:115789ms step_avg:94.99ms
step:1220/1705 train_time:115883ms step_avg:94.99ms
step:1221/1705 train_time:115979ms step_avg:94.99ms
step:1222/1705 train_time:116074ms step_avg:94.99ms
step:1223/1705 train_time:116169ms step_avg:94.99ms
step:1224/1705 train_time:116265ms step_avg:94.99ms
step:1225/1705 train_time:116360ms step_avg:94.99ms
step:1226/1705 train_time:116456ms step_avg:94.99ms
step:1227/1705 train_time:116552ms step_avg:94.99ms
step:1228/1705 train_time:116647ms step_avg:94.99ms
step:1229/1705 train_time:116741ms step_avg:94.99ms
step:1230/1705 train_time:116837ms step_avg:94.99ms
step:1231/1705 train_time:116933ms step_avg:94.99ms
step:1232/1705 train_time:117028ms step_avg:94.99ms
step:1233/1705 train_time:117123ms step_avg:94.99ms
step:1234/1705 train_time:117219ms step_avg:94.99ms
step:1235/1705 train_time:117314ms step_avg:94.99ms
step:1236/1705 train_time:117409ms step_avg:94.99ms
step:1237/1705 train_time:117504ms step_avg:94.99ms
step:1238/1705 train_time:117600ms step_avg:94.99ms
step:1239/1705 train_time:117696ms step_avg:94.99ms
step:1240/1705 train_time:117792ms step_avg:94.99ms
step:1241/1705 train_time:117887ms step_avg:94.99ms
step:1242/1705 train_time:117982ms step_avg:94.99ms
step:1243/1705 train_time:118078ms step_avg:94.99ms
step:1244/1705 train_time:118174ms step_avg:94.99ms
step:1245/1705 train_time:118269ms step_avg:94.99ms
step:1246/1705 train_time:118363ms step_avg:94.99ms
step:1247/1705 train_time:118458ms step_avg:94.99ms
step:1248/1705 train_time:118554ms step_avg:95.00ms
step:1249/1705 train_time:118650ms step_avg:95.00ms
step:1250/1705 train_time:118745ms step_avg:95.00ms
step:1250/1705 val_loss:3.3903 train_time:118841ms step_avg:95.07ms
step:1251/1705 train_time:118864ms step_avg:95.02ms
step:1252/1705 train_time:118946ms step_avg:95.00ms
step:1253/1705 train_time:119041ms step_avg:95.00ms
step:1254/1705 train_time:119136ms step_avg:95.01ms
step:1255/1705 train_time:119231ms step_avg:95.00ms
step:1256/1705 train_time:119325ms step_avg:95.00ms
step:1257/1705 train_time:119419ms step_avg:95.00ms
step:1258/1705 train_time:119514ms step_avg:95.00ms
step:1259/1705 train_time:119607ms step_avg:95.00ms
step:1260/1705 train_time:119701ms step_avg:95.00ms
step:1261/1705 train_time:119797ms step_avg:95.00ms
step:1262/1705 train_time:119896ms step_avg:95.00ms
step:1263/1705 train_time:119995ms step_avg:95.01ms
step:1264/1705 train_time:120090ms step_avg:95.01ms
step:1265/1705 train_time:120185ms step_avg:95.01ms
step:1266/1705 train_time:120279ms step_avg:95.01ms
step:1267/1705 train_time:120373ms step_avg:95.01ms
step:1268/1705 train_time:120468ms step_avg:95.01ms
step:1269/1705 train_time:120562ms step_avg:95.01ms
step:1270/1705 train_time:120656ms step_avg:95.01ms
step:1271/1705 train_time:120751ms step_avg:95.00ms
step:1272/1705 train_time:120847ms step_avg:95.01ms
step:1273/1705 train_time:120943ms step_avg:95.01ms
step:1274/1705 train_time:121206ms step_avg:95.14ms
step:1275/1705 train_time:121398ms step_avg:95.21ms
step:1276/1705 train_time:121492ms step_avg:95.21ms
step:1277/1705 train_time:121586ms step_avg:95.21ms
step:1278/1705 train_time:121680ms step_avg:95.21ms
step:1279/1705 train_time:121775ms step_avg:95.21ms
step:1280/1705 train_time:121869ms step_avg:95.21ms
step:1281/1705 train_time:121962ms step_avg:95.21ms
step:1282/1705 train_time:122057ms step_avg:95.21ms
step:1283/1705 train_time:122151ms step_avg:95.21ms
step:1284/1705 train_time:122252ms step_avg:95.21ms
step:1285/1705 train_time:122352ms step_avg:95.22ms
step:1286/1705 train_time:122447ms step_avg:95.22ms
step:1287/1705 train_time:122542ms step_avg:95.21ms
step:1288/1705 train_time:122637ms step_avg:95.22ms
step:1289/1705 train_time:122731ms step_avg:95.21ms
step:1290/1705 train_time:122826ms step_avg:95.21ms
step:1291/1705 train_time:122921ms step_avg:95.21ms
step:1292/1705 train_time:123015ms step_avg:95.21ms
step:1293/1705 train_time:123110ms step_avg:95.21ms
step:1294/1705 train_time:123205ms step_avg:95.21ms
step:1295/1705 train_time:123302ms step_avg:95.21ms
step:1296/1705 train_time:123398ms step_avg:95.21ms
step:1297/1705 train_time:123495ms step_avg:95.22ms
step:1298/1705 train_time:123590ms step_avg:95.22ms
step:1299/1705 train_time:123684ms step_avg:95.22ms
step:1300/1705 train_time:123779ms step_avg:95.21ms
step:1301/1705 train_time:123875ms step_avg:95.22ms
step:1302/1705 train_time:123969ms step_avg:95.21ms
step:1303/1705 train_time:124064ms step_avg:95.21ms
step:1304/1705 train_time:124159ms step_avg:95.21ms
step:1305/1705 train_time:124256ms step_avg:95.22ms
step:1306/1705 train_time:124353ms step_avg:95.22ms
step:1307/1705 train_time:124450ms step_avg:95.22ms
step:1308/1705 train_time:124544ms step_avg:95.22ms
step:1309/1705 train_time:124639ms step_avg:95.22ms
step:1310/1705 train_time:124734ms step_avg:95.22ms
step:1311/1705 train_time:124829ms step_avg:95.22ms
step:1312/1705 train_time:124923ms step_avg:95.22ms
step:1313/1705 train_time:125019ms step_avg:95.22ms
step:1314/1705 train_time:125114ms step_avg:95.22ms
step:1315/1705 train_time:125209ms step_avg:95.22ms
step:1316/1705 train_time:125304ms step_avg:95.22ms
step:1317/1705 train_time:125400ms step_avg:95.22ms
step:1318/1705 train_time:125496ms step_avg:95.22ms
step:1319/1705 train_time:125593ms step_avg:95.22ms
step:1320/1705 train_time:125688ms step_avg:95.22ms
step:1321/1705 train_time:125782ms step_avg:95.22ms
step:1322/1705 train_time:125878ms step_avg:95.22ms
step:1323/1705 train_time:125973ms step_avg:95.22ms
step:1324/1705 train_time:126068ms step_avg:95.22ms
step:1325/1705 train_time:126162ms step_avg:95.22ms
step:1326/1705 train_time:126257ms step_avg:95.22ms
step:1327/1705 train_time:126352ms step_avg:95.22ms
step:1328/1705 train_time:126447ms step_avg:95.22ms
step:1329/1705 train_time:126542ms step_avg:95.22ms
step:1330/1705 train_time:126638ms step_avg:95.22ms
step:1331/1705 train_time:126734ms step_avg:95.22ms
step:1332/1705 train_time:126829ms step_avg:95.22ms
step:1333/1705 train_time:126923ms step_avg:95.22ms
step:1334/1705 train_time:127018ms step_avg:95.22ms
step:1335/1705 train_time:127114ms step_avg:95.22ms
step:1336/1705 train_time:127210ms step_avg:95.22ms
step:1337/1705 train_time:127306ms step_avg:95.22ms
step:1338/1705 train_time:127400ms step_avg:95.22ms
step:1339/1705 train_time:127496ms step_avg:95.22ms
step:1340/1705 train_time:127592ms step_avg:95.22ms
step:1341/1705 train_time:127687ms step_avg:95.22ms
step:1342/1705 train_time:127781ms step_avg:95.22ms
step:1343/1705 train_time:127877ms step_avg:95.22ms
step:1344/1705 train_time:127971ms step_avg:95.22ms
step:1345/1705 train_time:128065ms step_avg:95.22ms
step:1346/1705 train_time:128160ms step_avg:95.22ms
step:1347/1705 train_time:128256ms step_avg:95.22ms
step:1348/1705 train_time:128351ms step_avg:95.22ms
step:1349/1705 train_time:128446ms step_avg:95.22ms
step:1350/1705 train_time:128541ms step_avg:95.22ms
step:1351/1705 train_time:128637ms step_avg:95.22ms
step:1352/1705 train_time:128734ms step_avg:95.22ms
step:1353/1705 train_time:128829ms step_avg:95.22ms
step:1354/1705 train_time:128923ms step_avg:95.22ms
step:1355/1705 train_time:129018ms step_avg:95.22ms
step:1356/1705 train_time:129114ms step_avg:95.22ms
step:1357/1705 train_time:129209ms step_avg:95.22ms
step:1358/1705 train_time:129303ms step_avg:95.22ms
step:1359/1705 train_time:129399ms step_avg:95.22ms
step:1360/1705 train_time:129495ms step_avg:95.22ms
step:1361/1705 train_time:129590ms step_avg:95.22ms
step:1362/1705 train_time:129686ms step_avg:95.22ms
step:1363/1705 train_time:129781ms step_avg:95.22ms
step:1364/1705 train_time:129876ms step_avg:95.22ms
step:1365/1705 train_time:129971ms step_avg:95.22ms
step:1366/1705 train_time:130067ms step_avg:95.22ms
step:1367/1705 train_time:130161ms step_avg:95.22ms
step:1368/1705 train_time:130257ms step_avg:95.22ms
step:1369/1705 train_time:130352ms step_avg:95.22ms
step:1370/1705 train_time:130448ms step_avg:95.22ms
step:1371/1705 train_time:130543ms step_avg:95.22ms
step:1372/1705 train_time:130638ms step_avg:95.22ms
step:1373/1705 train_time:130734ms step_avg:95.22ms
step:1374/1705 train_time:130829ms step_avg:95.22ms
step:1375/1705 train_time:130923ms step_avg:95.22ms
step:1375/1705 val_loss:3.3528 train_time:131019ms step_avg:95.29ms
step:1376/1705 train_time:131040ms step_avg:95.23ms
step:1377/1705 train_time:131119ms step_avg:95.22ms
step:1378/1705 train_time:131219ms step_avg:95.22ms
step:1379/1705 train_time:131313ms step_avg:95.22ms
step:1380/1705 train_time:131407ms step_avg:95.22ms
step:1381/1705 train_time:131501ms step_avg:95.22ms
step:1382/1705 train_time:131595ms step_avg:95.22ms
step:1383/1705 train_time:131689ms step_avg:95.22ms
step:1384/1705 train_time:131784ms step_avg:95.22ms
step:1385/1705 train_time:131879ms step_avg:95.22ms
step:1386/1705 train_time:131974ms step_avg:95.22ms
step:1387/1705 train_time:132072ms step_avg:95.22ms
step:1388/1705 train_time:132170ms step_avg:95.22ms
step:1389/1705 train_time:132266ms step_avg:95.22ms
step:1390/1705 train_time:132363ms step_avg:95.23ms
step:1391/1705 train_time:132459ms step_avg:95.23ms
step:1392/1705 train_time:132553ms step_avg:95.22ms
step:1393/1705 train_time:132647ms step_avg:95.22ms
step:1394/1705 train_time:132742ms step_avg:95.22ms
step:1395/1705 train_time:132836ms step_avg:95.22ms
step:1396/1705 train_time:132931ms step_avg:95.22ms
step:1397/1705 train_time:133028ms step_avg:95.22ms
step:1398/1705 train_time:133125ms step_avg:95.23ms
step:1399/1705 train_time:133221ms step_avg:95.23ms
step:1400/1705 train_time:133318ms step_avg:95.23ms
step:1401/1705 train_time:133412ms step_avg:95.23ms
step:1402/1705 train_time:133507ms step_avg:95.23ms
step:1403/1705 train_time:133602ms step_avg:95.23ms
step:1404/1705 train_time:133696ms step_avg:95.22ms
step:1405/1705 train_time:133790ms step_avg:95.22ms
step:1406/1705 train_time:133886ms step_avg:95.22ms
step:1407/1705 train_time:133983ms step_avg:95.23ms
step:1408/1705 train_time:134079ms step_avg:95.23ms
step:1409/1705 train_time:134175ms step_avg:95.23ms
step:1410/1705 train_time:134270ms step_avg:95.23ms
step:1411/1705 train_time:134366ms step_avg:95.23ms
step:1412/1705 train_time:134462ms step_avg:95.23ms
step:1413/1705 train_time:134557ms step_avg:95.23ms
step:1414/1705 train_time:134651ms step_avg:95.23ms
step:1415/1705 train_time:134746ms step_avg:95.23ms
step:1416/1705 train_time:134842ms step_avg:95.23ms
step:1417/1705 train_time:134937ms step_avg:95.23ms
step:1418/1705 train_time:135031ms step_avg:95.23ms
step:1419/1705 train_time:135127ms step_avg:95.23ms
step:1420/1705 train_time:135224ms step_avg:95.23ms
step:1421/1705 train_time:135320ms step_avg:95.23ms
step:1422/1705 train_time:135415ms step_avg:95.23ms
step:1423/1705 train_time:135510ms step_avg:95.23ms
step:1424/1705 train_time:135605ms step_avg:95.23ms
step:1425/1705 train_time:135701ms step_avg:95.23ms
step:1426/1705 train_time:135796ms step_avg:95.23ms
step:1427/1705 train_time:135890ms step_avg:95.23ms
step:1428/1705 train_time:135985ms step_avg:95.23ms
step:1429/1705 train_time:136081ms step_avg:95.23ms
step:1430/1705 train_time:136177ms step_avg:95.23ms
step:1431/1705 train_time:136272ms step_avg:95.23ms
step:1432/1705 train_time:136369ms step_avg:95.23ms
step:1433/1705 train_time:136465ms step_avg:95.23ms
step:1434/1705 train_time:136561ms step_avg:95.23ms
step:1435/1705 train_time:136656ms step_avg:95.23ms
step:1436/1705 train_time:136751ms step_avg:95.23ms
step:1437/1705 train_time:136846ms step_avg:95.23ms
step:1438/1705 train_time:136941ms step_avg:95.23ms
step:1439/1705 train_time:137036ms step_avg:95.23ms
step:1440/1705 train_time:137131ms step_avg:95.23ms
step:1441/1705 train_time:137226ms step_avg:95.23ms
step:1442/1705 train_time:137324ms step_avg:95.23ms
step:1443/1705 train_time:137419ms step_avg:95.23ms
step:1444/1705 train_time:137514ms step_avg:95.23ms
step:1445/1705 train_time:137609ms step_avg:95.23ms
step:1446/1705 train_time:137704ms step_avg:95.23ms
step:1447/1705 train_time:137800ms step_avg:95.23ms
step:1448/1705 train_time:137896ms step_avg:95.23ms
step:1449/1705 train_time:137992ms step_avg:95.23ms
step:1450/1705 train_time:138088ms step_avg:95.23ms
step:1451/1705 train_time:138184ms step_avg:95.23ms
step:1452/1705 train_time:138278ms step_avg:95.23ms
step:1453/1705 train_time:138373ms step_avg:95.23ms
step:1454/1705 train_time:138469ms step_avg:95.23ms
step:1455/1705 train_time:138564ms step_avg:95.23ms
step:1456/1705 train_time:138659ms step_avg:95.23ms
step:1457/1705 train_time:138754ms step_avg:95.23ms
step:1458/1705 train_time:138849ms step_avg:95.23ms
step:1459/1705 train_time:138945ms step_avg:95.23ms
step:1460/1705 train_time:139041ms step_avg:95.23ms
step:1461/1705 train_time:139135ms step_avg:95.23ms
step:1462/1705 train_time:139230ms step_avg:95.23ms
step:1463/1705 train_time:139326ms step_avg:95.23ms
step:1464/1705 train_time:139423ms step_avg:95.23ms
step:1465/1705 train_time:139519ms step_avg:95.23ms
step:1466/1705 train_time:139615ms step_avg:95.24ms
step:1467/1705 train_time:139709ms step_avg:95.23ms
step:1468/1705 train_time:139804ms step_avg:95.23ms
step:1469/1705 train_time:139900ms step_avg:95.23ms
step:1470/1705 train_time:139996ms step_avg:95.24ms
step:1471/1705 train_time:140091ms step_avg:95.23ms
step:1472/1705 train_time:140186ms step_avg:95.23ms
step:1473/1705 train_time:140281ms step_avg:95.23ms
step:1474/1705 train_time:140375ms step_avg:95.23ms
step:1475/1705 train_time:140471ms step_avg:95.23ms
step:1476/1705 train_time:140566ms step_avg:95.23ms
step:1477/1705 train_time:140663ms step_avg:95.24ms
step:1478/1705 train_time:140757ms step_avg:95.23ms
step:1479/1705 train_time:140852ms step_avg:95.23ms
step:1480/1705 train_time:140949ms step_avg:95.24ms
step:1481/1705 train_time:141045ms step_avg:95.24ms
step:1482/1705 train_time:141141ms step_avg:95.24ms
step:1483/1705 train_time:141236ms step_avg:95.24ms
step:1484/1705 train_time:141330ms step_avg:95.24ms
step:1485/1705 train_time:141592ms step_avg:95.35ms
step:1486/1705 train_time:141783ms step_avg:95.41ms
step:1487/1705 train_time:141877ms step_avg:95.41ms
step:1488/1705 train_time:141971ms step_avg:95.41ms
step:1489/1705 train_time:142065ms step_avg:95.41ms
step:1490/1705 train_time:142160ms step_avg:95.41ms
step:1491/1705 train_time:142254ms step_avg:95.41ms
step:1492/1705 train_time:142348ms step_avg:95.41ms
step:1493/1705 train_time:142443ms step_avg:95.41ms
step:1494/1705 train_time:142537ms step_avg:95.41ms
step:1495/1705 train_time:142636ms step_avg:95.41ms
step:1496/1705 train_time:142735ms step_avg:95.41ms
step:1497/1705 train_time:142833ms step_avg:95.41ms
step:1498/1705 train_time:142929ms step_avg:95.41ms
step:1499/1705 train_time:143023ms step_avg:95.41ms
step:1500/1705 train_time:143118ms step_avg:95.41ms
step:1500/1705 val_loss:3.3205 train_time:143213ms step_avg:95.48ms
step:1501/1705 train_time:143234ms step_avg:95.43ms
step:1502/1705 train_time:143312ms step_avg:95.41ms
step:1503/1705 train_time:143410ms step_avg:95.42ms
step:1504/1705 train_time:143506ms step_avg:95.42ms
step:1505/1705 train_time:143600ms step_avg:95.42ms
step:1506/1705 train_time:143694ms step_avg:95.41ms
step:1507/1705 train_time:143789ms step_avg:95.41ms
step:1508/1705 train_time:143883ms step_avg:95.41ms
step:1509/1705 train_time:143978ms step_avg:95.41ms
step:1510/1705 train_time:144072ms step_avg:95.41ms
step:1511/1705 train_time:144168ms step_avg:95.41ms
step:1512/1705 train_time:144264ms step_avg:95.41ms
step:1513/1705 train_time:144360ms step_avg:95.41ms
step:1514/1705 train_time:144458ms step_avg:95.41ms
step:1515/1705 train_time:144554ms step_avg:95.42ms
step:1516/1705 train_time:144648ms step_avg:95.41ms
step:1517/1705 train_time:144743ms step_avg:95.41ms
step:1518/1705 train_time:144838ms step_avg:95.41ms
step:1519/1705 train_time:144933ms step_avg:95.41ms
step:1520/1705 train_time:145027ms step_avg:95.41ms
step:1521/1705 train_time:145123ms step_avg:95.41ms
step:1522/1705 train_time:145218ms step_avg:95.41ms
step:1523/1705 train_time:145315ms step_avg:95.41ms
step:1524/1705 train_time:145412ms step_avg:95.41ms
step:1525/1705 train_time:145506ms step_avg:95.41ms
step:1526/1705 train_time:145602ms step_avg:95.41ms
step:1527/1705 train_time:145697ms step_avg:95.41ms
step:1528/1705 train_time:145793ms step_avg:95.41ms
step:1529/1705 train_time:145887ms step_avg:95.41ms
step:1530/1705 train_time:145982ms step_avg:95.41ms
step:1531/1705 train_time:146076ms step_avg:95.41ms
step:1532/1705 train_time:146171ms step_avg:95.41ms
step:1533/1705 train_time:146267ms step_avg:95.41ms
step:1534/1705 train_time:146362ms step_avg:95.41ms
step:1535/1705 train_time:146458ms step_avg:95.41ms
step:1536/1705 train_time:146554ms step_avg:95.41ms
step:1537/1705 train_time:146649ms step_avg:95.41ms
step:1538/1705 train_time:146744ms step_avg:95.41ms
step:1539/1705 train_time:146840ms step_avg:95.41ms
step:1540/1705 train_time:146935ms step_avg:95.41ms
step:1541/1705 train_time:147030ms step_avg:95.41ms
step:1542/1705 train_time:147125ms step_avg:95.41ms
step:1543/1705 train_time:147220ms step_avg:95.41ms
step:1544/1705 train_time:147316ms step_avg:95.41ms
step:1545/1705 train_time:147412ms step_avg:95.41ms
step:1546/1705 train_time:147507ms step_avg:95.41ms
step:1547/1705 train_time:147601ms step_avg:95.41ms
step:1548/1705 train_time:147698ms step_avg:95.41ms
step:1549/1705 train_time:147793ms step_avg:95.41ms
step:1550/1705 train_time:147888ms step_avg:95.41ms
step:1551/1705 train_time:147982ms step_avg:95.41ms
step:1552/1705 train_time:148078ms step_avg:95.41ms
step:1553/1705 train_time:148173ms step_avg:95.41ms
step:1554/1705 train_time:148269ms step_avg:95.41ms
step:1555/1705 train_time:148364ms step_avg:95.41ms
step:1556/1705 train_time:148459ms step_avg:95.41ms
step:1557/1705 train_time:148555ms step_avg:95.41ms
step:1558/1705 train_time:148651ms step_avg:95.41ms
step:1559/1705 train_time:148746ms step_avg:95.41ms
step:1560/1705 train_time:148842ms step_avg:95.41ms
step:1561/1705 train_time:148937ms step_avg:95.41ms
step:1562/1705 train_time:149032ms step_avg:95.41ms
step:1563/1705 train_time:149127ms step_avg:95.41ms
step:1564/1705 train_time:149222ms step_avg:95.41ms
step:1565/1705 train_time:149318ms step_avg:95.41ms
step:1566/1705 train_time:149413ms step_avg:95.41ms
step:1567/1705 train_time:149508ms step_avg:95.41ms
step:1568/1705 train_time:149603ms step_avg:95.41ms
step:1569/1705 train_time:149698ms step_avg:95.41ms
step:1570/1705 train_time:149795ms step_avg:95.41ms
step:1571/1705 train_time:149890ms step_avg:95.41ms
step:1572/1705 train_time:149985ms step_avg:95.41ms
step:1573/1705 train_time:150080ms step_avg:95.41ms
step:1574/1705 train_time:150176ms step_avg:95.41ms
step:1575/1705 train_time:150272ms step_avg:95.41ms
step:1576/1705 train_time:150367ms step_avg:95.41ms
step:1577/1705 train_time:150462ms step_avg:95.41ms
step:1578/1705 train_time:150557ms step_avg:95.41ms
step:1579/1705 train_time:150653ms step_avg:95.41ms
step:1580/1705 train_time:150748ms step_avg:95.41ms
step:1581/1705 train_time:150843ms step_avg:95.41ms
step:1582/1705 train_time:150938ms step_avg:95.41ms
step:1583/1705 train_time:151034ms step_avg:95.41ms
step:1584/1705 train_time:151129ms step_avg:95.41ms
step:1585/1705 train_time:151224ms step_avg:95.41ms
step:1586/1705 train_time:151319ms step_avg:95.41ms
step:1587/1705 train_time:151416ms step_avg:95.41ms
step:1588/1705 train_time:151511ms step_avg:95.41ms
step:1589/1705 train_time:151606ms step_avg:95.41ms
step:1590/1705 train_time:151701ms step_avg:95.41ms
step:1591/1705 train_time:151797ms step_avg:95.41ms
step:1592/1705 train_time:151893ms step_avg:95.41ms
step:1593/1705 train_time:151989ms step_avg:95.41ms
step:1594/1705 train_time:152083ms step_avg:95.41ms
step:1595/1705 train_time:152179ms step_avg:95.41ms
step:1596/1705 train_time:152275ms step_avg:95.41ms
step:1597/1705 train_time:152371ms step_avg:95.41ms
step:1598/1705 train_time:152467ms step_avg:95.41ms
step:1599/1705 train_time:152562ms step_avg:95.41ms
step:1600/1705 train_time:152657ms step_avg:95.41ms
step:1601/1705 train_time:152752ms step_avg:95.41ms
step:1602/1705 train_time:152847ms step_avg:95.41ms
step:1603/1705 train_time:152943ms step_avg:95.41ms
step:1604/1705 train_time:153038ms step_avg:95.41ms
step:1605/1705 train_time:153134ms step_avg:95.41ms
step:1606/1705 train_time:153229ms step_avg:95.41ms
step:1607/1705 train_time:153323ms step_avg:95.41ms
step:1608/1705 train_time:153419ms step_avg:95.41ms
step:1609/1705 train_time:153515ms step_avg:95.41ms
step:1610/1705 train_time:153610ms step_avg:95.41ms
step:1611/1705 train_time:153705ms step_avg:95.41ms
step:1612/1705 train_time:153801ms step_avg:95.41ms
step:1613/1705 train_time:153897ms step_avg:95.41ms
step:1614/1705 train_time:153992ms step_avg:95.41ms
step:1615/1705 train_time:154087ms step_avg:95.41ms
step:1616/1705 train_time:154182ms step_avg:95.41ms
step:1617/1705 train_time:154278ms step_avg:95.41ms
step:1618/1705 train_time:154373ms step_avg:95.41ms
step:1619/1705 train_time:154469ms step_avg:95.41ms
step:1620/1705 train_time:154564ms step_avg:95.41ms
step:1621/1705 train_time:154660ms step_avg:95.41ms
step:1622/1705 train_time:154755ms step_avg:95.41ms
step:1623/1705 train_time:154850ms step_avg:95.41ms
step:1624/1705 train_time:154946ms step_avg:95.41ms
step:1625/1705 train_time:155042ms step_avg:95.41ms
step:1625/1705 val_loss:3.2927 train_time:155138ms step_avg:95.47ms
step:1626/1705 train_time:155159ms step_avg:95.42ms
step:1627/1705 train_time:155239ms step_avg:95.41ms
step:1628/1705 train_time:155336ms step_avg:95.42ms
step:1629/1705 train_time:155431ms step_avg:95.41ms
step:1630/1705 train_time:155525ms step_avg:95.41ms
step:1631/1705 train_time:155620ms step_avg:95.41ms
step:1632/1705 train_time:155714ms step_avg:95.41ms
step:1633/1705 train_time:155808ms step_avg:95.41ms
step:1634/1705 train_time:155903ms step_avg:95.41ms
step:1635/1705 train_time:155996ms step_avg:95.41ms
step:1636/1705 train_time:156093ms step_avg:95.41ms
step:1637/1705 train_time:156193ms step_avg:95.41ms
step:1638/1705 train_time:156291ms step_avg:95.42ms
step:1639/1705 train_time:156388ms step_avg:95.42ms
step:1640/1705 train_time:156483ms step_avg:95.42ms
step:1641/1705 train_time:156577ms step_avg:95.42ms
step:1642/1705 train_time:156673ms step_avg:95.42ms
step:1643/1705 train_time:156767ms step_avg:95.42ms
step:1644/1705 train_time:156862ms step_avg:95.41ms
step:1645/1705 train_time:156956ms step_avg:95.41ms
step:1646/1705 train_time:157052ms step_avg:95.41ms
step:1647/1705 train_time:157149ms step_avg:95.42ms
step:1648/1705 train_time:157247ms step_avg:95.42ms
step:1649/1705 train_time:157342ms step_avg:95.42ms
step:1650/1705 train_time:157437ms step_avg:95.42ms
step:1651/1705 train_time:157532ms step_avg:95.42ms
step:1652/1705 train_time:157627ms step_avg:95.42ms
step:1653/1705 train_time:157722ms step_avg:95.42ms
step:1654/1705 train_time:157816ms step_avg:95.41ms
step:1655/1705 train_time:157911ms step_avg:95.41ms
step:1656/1705 train_time:158007ms step_avg:95.41ms
step:1657/1705 train_time:158103ms step_avg:95.42ms
step:1658/1705 train_time:158198ms step_avg:95.42ms
step:1659/1705 train_time:158295ms step_avg:95.42ms
step:1660/1705 train_time:158391ms step_avg:95.42ms
step:1661/1705 train_time:158487ms step_avg:95.42ms
step:1662/1705 train_time:158582ms step_avg:95.42ms
step:1663/1705 train_time:158678ms step_avg:95.42ms
step:1664/1705 train_time:158772ms step_avg:95.42ms
step:1665/1705 train_time:158867ms step_avg:95.42ms
step:1666/1705 train_time:158963ms step_avg:95.42ms
step:1667/1705 train_time:159057ms step_avg:95.42ms
step:1668/1705 train_time:159152ms step_avg:95.42ms
step:1669/1705 train_time:159248ms step_avg:95.42ms
step:1670/1705 train_time:159344ms step_avg:95.42ms
step:1671/1705 train_time:159439ms step_avg:95.42ms
step:1672/1705 train_time:159534ms step_avg:95.42ms
step:1673/1705 train_time:159631ms step_avg:95.42ms
step:1674/1705 train_time:159727ms step_avg:95.42ms
step:1675/1705 train_time:159822ms step_avg:95.42ms
step:1676/1705 train_time:159916ms step_avg:95.42ms
step:1677/1705 train_time:160012ms step_avg:95.42ms
step:1678/1705 train_time:160108ms step_avg:95.42ms
step:1679/1705 train_time:160202ms step_avg:95.42ms
step:1680/1705 train_time:160297ms step_avg:95.41ms
step:1681/1705 train_time:160394ms step_avg:95.42ms
step:1682/1705 train_time:160491ms step_avg:95.42ms
step:1683/1705 train_time:160587ms step_avg:95.42ms
step:1684/1705 train_time:160683ms step_avg:95.42ms
step:1685/1705 train_time:160776ms step_avg:95.42ms
step:1686/1705 train_time:160872ms step_avg:95.42ms
step:1687/1705 train_time:160967ms step_avg:95.42ms
step:1688/1705 train_time:161062ms step_avg:95.42ms
step:1689/1705 train_time:161158ms step_avg:95.42ms
step:1690/1705 train_time:161252ms step_avg:95.42ms
step:1691/1705 train_time:161348ms step_avg:95.42ms
step:1692/1705 train_time:161444ms step_avg:95.42ms
step:1693/1705 train_time:161540ms step_avg:95.42ms
step:1694/1705 train_time:161635ms step_avg:95.42ms
step:1695/1705 train_time:161730ms step_avg:95.42ms
step:1696/1705 train_time:161826ms step_avg:95.42ms
step:1697/1705 train_time:161921ms step_avg:95.42ms
step:1698/1705 train_time:162181ms step_avg:95.51ms
step:1699/1705 train_time:162371ms step_avg:95.57ms
step:1700/1705 train_time:162464ms step_avg:95.57ms
step:1701/1705 train_time:162557ms step_avg:95.57ms
step:1702/1705 train_time:162652ms step_avg:95.56ms
step:1703/1705 train_time:162746ms step_avg:95.56ms
step:1704/1705 train_time:162840ms step_avg:95.56ms
step:1705/1705 train_time:162935ms step_avg:95.56ms
step:1705/1705 val_loss:3.2787 train_time:163029ms step_avg:95.62ms
peak memory allocated: 33992 MiB reserved: 48836 MiB
