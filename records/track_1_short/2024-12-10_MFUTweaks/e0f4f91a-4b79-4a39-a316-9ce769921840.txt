import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
import uuid
import time
import contextlib
from dataclasses import dataclass
from pathlib import Path

import torch
from torch import nn
import torch.nn.functional as F
import torch.distributed as dist
import torch._inductor.config as config
from torch.nn.parallel import DistributedDataParallel as DDP
from torch.nn.attention.flex_attention import BlockMask, flex_attention #KoszarskyB

# -----------------------------------------------------------------------------
# Muon optimizer

@torch.compile
def zeropower_via_newtonschulz5(G, steps=10, eps=1e-7):
    """
    Newton-Schulz iteration to compute the zeroth power / orthogonalization of G. We opt to use a
    quintic iteration whose coefficients are selected to maximize the slope at zero. For the purpose
    of minimizing steps, it turns out to be empirically effective to keep increasing the slope at
    zero even beyond the point where the iteration no longer converges all the way to one everywhere
    on the interval. This iteration therefore does not produce UV^T but rather something like US'V^T
    where S' is diagonal with S_{ii}' ~ Uniform(0.5, 1.5), which turns out not to hurt model
    performance at all relative to UV^T, where USV^T = G is the SVD.
    """
    assert len(G.shape) == 2
    a, b, c = (3.4445, -4.7750,  2.0315)
    X = G.bfloat16()
    X /= (X.norm() + eps) # ensure top singular value <= 1
    if G.size(0) > G.size(1):
        X = X.T
    for _ in range(steps):
        A = X @ X.T
        B = b * A + c * A @ A # adapted from suggestion by @jxbz, @leloykun, and @YouJiacheng
        X = a * X + B @ X
    if G.size(0) > G.size(1):
        X = X.T
    return X

class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Some warnings:
    - This optimizer assumes that all parameters passed in are 2D.
    - It should not be used for the embedding layer, the final fully connected layer, or any {0,1}-D
    parameters; those should all be optimized by a standard method (e.g., AdamW).
    - To use it with 4D convolutional filters, it works well to just flatten their last 3 dimensions.
    - We believe it is unlikely to work well for training with small batch size.
    - We believe it may not work well for finetuning pretrained models, but we haven't tested this.
    - We have not yet tried this optimizer for training scenarios larger than NanoGPT (124M).

    Arguments:
        lr: The learning rate used by the internal SGD.
        momentum: The momentum used by the internal SGD.
        nesterov: Whether to use Nesterov-style momentum in the internal SGD. (recommended)
        ns_steps: The number of Newton-Schulz iteration steps to use.
    """
    def __init__(self, params, lr=0.02, momentum=0.95, nesterov=True, ns_steps=5):
        self.world_size = int(os.environ['WORLD_SIZE'])
        self.rank = int(os.environ['RANK'])
        defaults = dict(lr=lr, momentum=momentum, nesterov=nesterov, ns_steps=ns_steps)
        params = list(params)
        assert all(isinstance(p, torch.Tensor) for p in params)
        sizes = {p.numel() for p in params}
        param_groups = [
            {
                'params': [p for p in params if p.numel() == size],
                'update_buffer': [
                    torch.empty(size, device='cuda', dtype=torch.bfloat16)
                    for _ in range(self.world_size)
                ],
            }
            for size in sizes
        ]
        super().__init__(param_groups, defaults)

    def step(self):

        for group in self.param_groups:

            lr = group['lr']
            momentum = group['momentum']
            nesterov = group['nesterov']
            ns_steps = group['ns_steps']
            update_buffers = group['update_buffer']
            # generate weight updates in distributed fashion
            params = group['params']
            assert len(params) % self.world_size == 0
            handle = None
            params_world = None
            def update_prev():
                if params_world is None:
                    return
                assert handle is not None
                handle.wait()
                for p_world, g_world in zip(params_world, update_buffers):
                    p_world.data.add_(
                        g_world.view_as(p_world),
                        alpha=-lr * max(1, p_world.size(0) / p_world.size(1)) ** 0.5,
                    )
            for base_i in range(len(params))[::self.world_size]:
                p = params[base_i + self.rank]
                g = p.grad
                assert g is not None
                state = self.state[p]
                if 'momentum_buffer' not in state:
                    state['momentum_buffer'] = torch.zeros_like(g)
                buf = state['momentum_buffer']
                buf.lerp_(g, 1 - momentum)
                g = g.lerp_(buf, momentum) if nesterov else buf
                g = zeropower_via_newtonschulz5(g, steps=ns_steps).flatten()
                update_prev()
                handle = dist.all_gather(update_buffers, g, async_op=True)
                params_world = params[base_i : base_i + self.world_size]
            update_prev()

# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the GPT-2 model

def norm(x):
    return F.rms_norm(x, (x.size(-1),))

class CastedLinear(nn.Linear):

    def __init__(self, in_features, out_features):
        super().__init__(in_features, out_features, bias=False)

    def forward(self, x):
        return F.linear(x, self.weight.to(x.dtype))

class Rotary(torch.nn.Module):

    def __init__(self, dim, base=10000):
        super().__init__()
        self.register_buffer('inv_freq', (1 / base) ** (torch.arange(0, dim, 2) / dim))
        self.seq_len_cached = None
        self.cos_cached = None
        self.sin_cached = None

    def forward(self, x):
        seq_len = x.shape[1]
        if seq_len != self.seq_len_cached:
            t = torch.arange(seq_len, device=x.device)
            freqs = torch.outer(t, self.inv_freq)
            self.seq_len_cached = seq_len
            self.cos_cached = freqs.cos()
            self.sin_cached = freqs.sin()
        cos, sin = self.cos_cached[None, :, None, :], self.sin_cached[None, :, None, :]
        # apply_rotary_emb(x, cos, sin)
        x1, x2 = x.chunk(2, dim=3)
        y1 = x1 * cos + x2 * sin
        y2 = x1 * (-sin) + x2 * cos
        return torch.cat((y1, y2), 3).type_as(x)

class CausalSelfAttention(nn.Module):

    def __init__(self, dim, num_heads):
        super().__init__()
        assert dim % num_heads == 0
        self.num_heads = num_heads
        self.c_q = CastedLinear(dim, dim)
        self.c_k = CastedLinear(dim, dim)
        self.c_v = CastedLinear(dim, dim)
        self.lambdas = nn.Parameter(torch.tensor([0.5, 0.5]))
        self.rotary = Rotary(dim // num_heads) # dim // num_heads = head_dim
        self.c_proj = CastedLinear(dim, dim)
        self.c_proj.weight.data.zero_() # zero init suggested by @Grad62304977

    def forward(self, x, vi, block_mask):
        B, T = x.size(0), x.size(1) # batch size, sequence length
        assert B == 1, "Must use batch size = 1 for FlexAttention"
        q = self.c_q(x).view(B, T, self.num_heads, -1)
        k = self.c_k(x).view(B, T, self.num_heads, -1)
        v = self.c_v(x).view(B, T, self.num_heads, -1)
        v = self.lambdas[0] * v + self.lambdas[1] * vi.view_as(v) # @KoszarskyB & @Grad62304977
        q, k = norm(q), norm(k) # QK norm @Grad62304977
        q, k = self.rotary(q), self.rotary(k)
        y = flex_attention(q.transpose(1, 2), k.transpose(1, 2), v.transpose(1, 2), block_mask=block_mask, enable_gqa=True)
        y = y.transpose(1, 2).contiguous().view_as(x) # re-assemble all head outputs side by side
        y = self.c_proj(y)
        return y

class MLP(nn.Module):

    def __init__(self, dim):
        super().__init__()
        self.c_fc   = CastedLinear(dim, 4 * dim)
        self.c_proj = CastedLinear(4 * dim, dim)
        self.c_proj.weight.data.zero_() # zero init suggested by @Grad62304977

    def forward(self, x):
        x = self.c_fc(x)
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = self.c_proj(x)
        return x

class Block(nn.Module):

    def __init__(self, config):
        super().__init__()
        self.attn = CausalSelfAttention(config.model_dim, config.num_heads)
        self.mlp = MLP(config.model_dim)
        self.lambdas = nn.Parameter(torch.tensor([1., 0.]))

    def forward(self, x, vi, x0, block_mask):
        x = self.lambdas[0] * x + self.lambdas[1] * x0
        x = x + self.attn(norm(x), vi, block_mask)
        x = x + self.mlp(norm(x))
        return x

class ValueEmbedding(nn.Module):
    def __init__(self, config: "GPTConfig"):
        super().__init__()
        self.__setattr__
        self.embed = nn.ModuleList([
            nn.Embedding(config.vocab_size, config.model_dim)
            for _ in range(6)
        ])

    def forward(self, inputs) -> "list[torch.Tensor]":
        ve = [emb(inputs) for emb in self.embed]
        ve += reversed(ve)
        return ve


# -----------------------------------------------------------------------------
# The main GPT-2 model

@dataclass
class GPTConfig:
    vocab_size : int = 50304
    num_layers : int = 12
    num_heads : int = 6 # head dim 128 suggested by @Grad62304977
    model_dim : int = 768

class GPT(nn.Module):

    def __init__(self, config: GPTConfig):
        super().__init__()
        self.num_layers = config.num_layers

        # U-net design by @brendanh0gan
        self.num_encoder_layers = config.num_layers // 2 # Half of the layers for encoder
        self.num_decoder_layers = config.num_layers - self.num_encoder_layers # Remaining for decoder
        # Add learnable skip connection weights for decoder layers
        self.skip_weights = nn.Parameter(torch.ones(self.num_decoder_layers))

        self.embed = nn.Embedding(config.vocab_size, config.model_dim)
        self.blocks = nn.ModuleList([Block(config) for _ in range(config.num_layers)])
        # token value embeddings by @KoszarskyB - inspired by @Grad62304977's value residual learning
        # U-net structure on token value embeddings by @leloykun
        self.value_embeds = ValueEmbedding(config)
        self.lm_head = CastedLinear(config.model_dim, config.vocab_size)
        self.lm_head.weight.data.zero_() # @Grad62304977

    def forward(
        self,
        inputs: torch.Tensor,
        targets: torch.Tensor,
        sliding_window_num_blocks: torch.Tensor,
    ):
        BLOCK_SIZE = 128
        assert inputs.ndim == 1
        docs = (inputs == 50256).cumsum(0)
        docs_low = docs.view(-1, BLOCK_SIZE)[:, 0].contiguous()
        docs_high = docs.view(-1, BLOCK_SIZE)[:, -1].contiguous()

        def document_causal(b, h, q_idx, kv_idx):
            causal_mask = q_idx >= kv_idx
            document_mask = docs[q_idx] == docs[kv_idx]
            return causal_mask & document_mask

        def dense_to_ordered(dense_mask: torch.Tensor):
            num_blocks = dense_mask.sum(dim=-1, dtype=torch.int32)
            indices = dense_mask.argsort(dim=-1, descending=True, stable=True).to(torch.int32)
            return num_blocks[None, None].contiguous(), indices[None, None].contiguous()

        def create_doc_swc_block_mask(sliding_window_num_blocks: torch.Tensor):
            kv_idx = block_idx = torch.arange(512, dtype=torch.int32, device="cuda")
            q_idx = block_idx[:, None]
            causal_bm = q_idx >= kv_idx
            causal_full_bm = q_idx > kv_idx
            window_bm = q_idx - kv_idx < sliding_window_num_blocks
            window_full_bm = window_bm
            # document_bm = (docs_low[q_idx] <= docs_high[kv_idx]) & (docs_low[kv_idx] <= docs_high[q_idx])
            document_bm = (docs_low[:, None] <= docs_high) & (docs_low <= docs_high[:, None])
            document_full_bm = (docs_low[:, None] == docs_high) & (docs_low == docs_high[:, None])
            nonzero_bm = causal_bm & window_bm & document_bm
            full_bm  = causal_full_bm & window_full_bm & document_full_bm
            kv_num_blocks, kv_indices = dense_to_ordered(nonzero_bm ^ full_bm)
            full_kv_num_blocks, full_kv_indices = dense_to_ordered(full_bm)
            return BlockMask.from_kv_blocks(
                kv_num_blocks,
                kv_indices,
                full_kv_num_blocks,
                full_kv_indices,
                BLOCK_SIZE=BLOCK_SIZE,
                mask_mod=document_causal,
            )

        block_mask = create_doc_swc_block_mask(sliding_window_num_blocks)

        # forward the GPT model itself
        x = self.embed(inputs[None]) # token embeddings of shape (b, t, model_dim)
        x = norm(x) # @Grad62304977
        x0 = x
        ve = self.value_embeds(inputs)
        ve_enc, ve_dec = ve[:self.num_encoder_layers], ve[self.num_encoder_layers:]

        # Store outputs for U-Net skip connections
        skip_connections = []
        # Encoder pass - process only the first half of the blocks
        for i in range(self.num_encoder_layers):
            x = self.blocks[i](x, ve_enc[i], x0, block_mask)
            skip_connections.append(x)
        # Decoder pass - process the remaining blocks with weighted skip connections
        for i in range(self.num_decoder_layers):
            x = x + self.skip_weights[i] * skip_connections.pop()
            # U-net structure on token value embeddings by @leloykun
            x = self.blocks[self.num_encoder_layers + i](x, ve_dec[i], x0, block_mask)

        x = norm(x)
        logits = self.lm_head(x)
        logits = 30 * torch.tanh(logits / 30) # @Grad62304977
        logits = logits.float()
        loss = F.cross_entropy(logits.view(-1, logits.size(-1)), targets.view(-1))
        return loss

# -----------------------------------------------------------------------------
# Our own simple Distributed Data Loader

def _peek_data_shard(file: Path):
    # only reads the header, returns header data
    # header is 256 int32
    header = torch.from_file(f"{file}", False, 256, dtype=torch.int32)
    assert header[0] == 20240520, "magic number mismatch in the data .bin file"
    assert header[1] == 1, "unsupported version"
    return int(header[2]) # number of tokens (claimed)

def _load_data_shard(path: Path, num_tokens):
    with path.open("rb", buffering=0) as f:
        tokens = torch.empty(num_tokens, dtype=torch.uint16, pin_memory=True)
        f.seek(256 * 4)
        nbytes = f.readinto(tokens.numpy())
        assert nbytes == 2 * num_tokens, "number of tokens read does not match header?"
    return tokens

class DistributedDataLoader:
    def __init__(self, filename_pattern, seq_len, process_rank, num_processes):
        self.process_rank = process_rank
        self.num_processes = num_processes
        self.seq_len = seq_len

        # glob files that match the pattern
        self.files = sorted(Path.cwd().glob(filename_pattern))
        assert len(self.files) > 0, f"did not find any files that match the pattern {filename_pattern}"

        # load and validate all data shards, count number of tokens in total
        self.files_num_tokens = [_peek_data_shard(file) for file in self.files]
        assert min(self.files_num_tokens) >= num_processes * seq_len + 1
        self.total_num_tokens = sum(self.files_num_tokens)

        self.reset()

    def reset(self):
        self.current_shard = -1
        self.advance()

    def advance(self): # advance to next data shard
        self.current_shard = (self.current_shard + 1) % len(self.files)
        self.current_position = self.process_rank * self.seq_len
        self.tokens = _load_data_shard(self.files[self.current_shard], self.files_num_tokens[self.current_shard])

    def next_batch(self):
        batch_size = self.seq_len * self.num_processes
        buf = self.tokens[self.current_position:self.current_position+self.seq_len+1]
        # host side async is sufficient;
        # no performance improvement was observed when introducing a separate stream.
        inputs = buf[:-1].to(device="cuda", dtype=torch.int32, non_blocking=True) # inputs
        targets = buf[1:].to(device="cuda", dtype=torch.int64, non_blocking=True) # targets
        # advance current position and load next shard if necessary
        self.current_position += batch_size
        if self.current_position + batch_size + 1 >= len(self.tokens):
            self.advance()
        return inputs, targets

# -----------------------------------------------------------------------------
# int main

@dataclass
class Hyperparameters:
    # data hyperparams
    input_bin : str = 'data/fineweb10B/fineweb_train_*.bin' # input .bin to train on
    input_val_bin : str = 'data/fineweb10B/fineweb_val_*.bin' # input .bin to eval validation loss on
    # optimization hyperparams
    batch_size : int = 8 # batch size, in sequences, across all devices
    sequence_length : int = 64*1024 # sequence length, in tokens
    num_iterations : int = 1480 # number of iterations to run
    warmup_iters : int = 0
    cooldown_iters : int = 600 # number of iterations of linear warmup/cooldown for triangular or trapezoidal schedule
    weight_decay : float = 0
    # evaluation and logging hyperparams
    val_loss_every : int = 125 # every how many steps to evaluate val loss? 0 for only at the end
    val_tokens : int = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    save_every : int = 0 # every how many steps to save the checkpoint? 0 for only at the end
args = Hyperparameters()

# set up DDP (distributed data parallel). torchrun sets this env variable
ddp_rank = int(os.environ['RANK'])
ddp_local_rank = int(os.environ['LOCAL_RANK'])
ddp_world_size = int(os.environ['WORLD_SIZE'])
assert torch.cuda.is_available()
device = torch.device(f"cuda:{ddp_local_rank}")
torch.cuda.set_device(device)
print(f"using device: {device}")
dist.init_process_group(backend='nccl', device_id=device)
dist.barrier()
master_process = (ddp_rank == 0) # this process will do logging, checkpointing etc.

# begin logging
logfile = None
if master_process:
    run_id = uuid.uuid4()
    logdir = Path("logs") / f"{run_id}"
    logdir.mkdir(exist_ok=True)
    logfile = Path("logs") / f"{run_id}.txt"
    print(logfile.stem)
    # create the log file
    with logfile.open("w") as f:
        # begin the log by printing this file (the Python code)
        print(code, file=f)
        print("=" * 100, file=f)
def print0(s, logonly=False):
    if master_process:
        with logfile.open("a") as f:
            if not logonly:
                print(s)
            print(s, file=f)
# log information about the hardware/software environment this is running on
# and print the full `nvidia-smi` to file
print0(f"Running python {sys.version}")
print0(f"Running pytorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}\nnvidia-smi:")
import subprocess
result = subprocess.run(['nvidia-smi'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
print0(f'{result.stdout}', logonly=True)
print0('='*100, logonly=True)

# calculate the number of steps to take in the val loop.
assert args.val_tokens % (args.sequence_length * ddp_world_size) == 0
val_steps = args.val_tokens // (args.sequence_length * ddp_world_size)
# calculate the steps of gradient accumulation required to attain the desired global batch size.
assert args.batch_size % (ddp_world_size) == 0
train_accumulation_steps = args.batch_size // ddp_world_size

# load tokens
train_loader = DistributedDataLoader(args.input_bin, args.sequence_length, ddp_rank, ddp_world_size)
val_loader = DistributedDataLoader(args.input_val_bin, args.sequence_length, ddp_rank, ddp_world_size)
print0(f"Training DataLoader: total number of tokens: {train_loader.total_num_tokens} across {len(train_loader.files)} files")
print0(f"Validation DataLoader: total number of tokens: {val_loader.total_num_tokens} across {len(val_loader.files)} files")
print0('='*100, logonly=True)
inputs_train, targets_train = train_loader.next_batch()

# there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency. suggested to me by @Grad62304977.
# this originates from Karpathy's experiments.
num_vocab = 50304
model = GPT(GPTConfig(vocab_size=num_vocab, num_layers=12, num_heads=6, model_dim=768))
model = model.cuda().bfloat16()
for m in model.modules():
    if isinstance(m, CastedLinear):
        m.float()
config.coordinate_descent_tuning = True # suggested by @Chillee
model = torch.compile(model)
# here we wrap model into DDP container
model = DDP(model, device_ids=[ddp_local_rank], broadcast_buffers=False, gradient_as_bucket_view=True)
raw_model = model.module # always contains the "raw" unwrapped model

# init the optimizer(s)
embed_params = [*raw_model.embed.parameters(), *raw_model.value_embeds.parameters()]
optimizer1 = torch.optim.Adam(embed_params, lr=0.6, betas=(0.8, 0.95), fused=True)
optimizer2 = torch.optim.Adam([raw_model.lm_head.weight], lr=0.008, betas=(0.8, 0.95), fused=True)
params = list(raw_model.blocks.parameters())
matrix_params = [p for p in params if p.ndim == 2]
scalar_params = [p for p in params if p.ndim < 2] + [raw_model.skip_weights]
optimizer3 = Muon(matrix_params, lr=0.05, momentum=0.95)
optimizer4 = torch.optim.Adam(scalar_params, lr=0.04, betas=(0.8, 0.95), fused=True)
optimizers = [optimizer1, optimizer2, optimizer3, optimizer4]
# learning rate decay scheduler (linear warmup and cooldown)
def get_lr(it):
    assert it <= args.num_iterations
    # 1) linear warmup for warmup_iters steps
    if it < args.warmup_iters:
        return (it+1) / args.warmup_iters
    # 2) constant lr for a while
    elif it < args.num_iterations - args.cooldown_iters:
        return 1.0
    # 3) linear cooldown
    else:
        decay_ratio = (args.num_iterations - it) / args.cooldown_iters
        return decay_ratio
schedulers = [torch.optim.lr_scheduler.LambdaLR(opt, get_lr) for opt in optimizers]

sliding_window_num_blocks = torch.tensor(1, dtype=torch.int32, device="cuda")
sw_num_blocks_prev = 1
# Start training loop
training_time_ms = 0
# start the clock
torch.cuda.synchronize()
t0 = time.perf_counter()
# begin training
for step in range(args.num_iterations + 1):
    last_step = (step == args.num_iterations)
    # This effectively ignores timing first 10 steps, which are slower for weird reasons.
    # Alternately, and slightly more correctly in terms of benchmarking, we could do 10
    # steps with dummy data first, and then re-initialize the model and reset the loader.
    if step == 10:
        training_time_ms = 0
        t0 = time.perf_counter()
    timed_steps = float('nan') if step <= 11 else (step - 10) + 1 # <= 11 to avoid bug in val

    # Linearly increase the sliding window size over training in chunks of 64 from 64 -> 1792. By @fernbear.bsky.social
    frac_done = step / args.num_iterations # training progress
    sw_num_blocks = int(((1 - frac_done) * 64 + frac_done * 1792 + 64) // 128)
    if sw_num_blocks != sw_num_blocks_prev:
        sliding_window_num_blocks.copy_(sw_num_blocks, non_blocking=True)
        sw_num_blocks_prev = sw_num_blocks

    # once in a while evaluate the validation dataset
    if (last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0)):
        # stop the clock
        torch.cuda.synchronize()
        training_time_ms += 1000 * (time.perf_counter() - t0)
        # run validation batches
        model.eval()
        val_loader.reset()
        val_loss = 0.0
        for _ in range(val_steps):
            with torch.no_grad():
                inputs_val, targets_val = val_loader.next_batch()
                val_loss += model(inputs_val, targets_val, sliding_window_num_blocks)
        dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
        val_loss /= val_steps
        # log val loss to console and to logfile
        print0(f'step:{step}/{args.num_iterations} val_loss:{val_loss:.4f} train_time:{training_time_ms:.0f}ms step_avg:{training_time_ms/(timed_steps-1):.2f}ms')
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.perf_counter()

    if master_process and (last_step or (args.save_every > 0 and step % args.save_every == 0)):
        # stop the clock
        torch.cuda.synchronize()
        training_time_ms += 1000 * (time.perf_counter() - t0)
        # save the state of the training process
        log = dict(step=step, code=code, model=raw_model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
        torch.save(log, 'logs/%s/state_step%06d.pt' % (run_id, step))
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.perf_counter()

    # bit confusing: we want to make sure to eval on 0th iteration
    # but also after the very last iteration. so we loop for step <= num_iterations
    # instead of just < num_iterations (one extra due to <=), only to do
    # the validation/sampling one last time, and then we break right here as we're done.
    if last_step:
        break

    # --------------- TRAINING SECTION BEGIN -----------------
    model.train()
    for i in range(1, train_accumulation_steps + 1):
        with contextlib.ExitStack() as stack:
            if i < train_accumulation_steps: # there's no need to sync gradients every accumulation step
                stack.enter_context(model.no_sync())
            if step >= 5:
                stack.enter_context(torch.compiler.set_stance(skip_guard_eval_unsafe=True))
            model(inputs_train, targets_train, sliding_window_num_blocks).backward()
            inputs_train, targets_train = train_loader.next_batch()
    if train_accumulation_steps != 1:
        for p in model.parameters():
            p.grad /= train_accumulation_steps
    # momentum warmup for Muon
    frac = min(step/300, 1)
    for group in optimizer3.param_groups:
        group['momentum'] = (1 - frac) * 0.85 + frac * 0.95
    # step the optimizers and schedulers
    for opt, sched in zip(optimizers, schedulers):
        opt.step()
        sched.step()
    # null the gradients
    model.zero_grad(set_to_none=True)
    # --------------- TRAINING SECTION END -------------------
    # everything that follows now is just diagnostics, prints, logging, etc.
    approx_time = training_time_ms + 1000 * (time.perf_counter() - t0)
    print0(f"step:{step+1}/{args.num_iterations} train_time:{approx_time:.0f}ms step_avg:{approx_time/timed_steps:.2f}ms")

print0(f"peak memory consumption: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB")

# -------------------------------------------------------------------------
# clean up nice
dist.destroy_process_group()

====================================================================================================
Running python 3.10.12 (main, Sep 11 2024, 15:47:36) [GCC 11.4.0]
Running pytorch 2.6.0.dev20241203+cu124 compiled for CUDA 12.4
nvidia-smi:
Wed Dec 11 07:26:16 2024       
+---------------------------------------------------------------------------------------+
| NVIDIA-SMI 535.183.06             Driver Version: 535.183.06   CUDA Version: 12.2     |
|-----------------------------------------+----------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |
|                                         |                      |               MIG M. |
|=========================================+======================+======================|
|   0  NVIDIA H100 80GB HBM3          On  | 00000000:19:00.0 Off |                    0 |
| N/A   38C    P0             126W / 700W |   7084MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  | 00000000:3B:00.0 Off |                    0 |
| N/A   30C    P0             116W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  | 00000000:4C:00.0 Off |                    0 |
| N/A   29C    P0             112W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  | 00000000:5D:00.0 Off |                    0 |
| N/A   37C    P0             114W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  | 00000000:9B:00.0 Off |                    0 |
| N/A   38C    P0             120W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  | 00000000:BB:00.0 Off |                    0 |
| N/A   30C    P0             118W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  | 00000000:CB:00.0 Off |                    0 |
| N/A   36C    P0             120W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  | 00000000:DB:00.0 Off |                    0 |
| N/A   30C    P0             118W / 700W |   3211MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
                                                                                         
+---------------------------------------------------------------------------------------+
| Processes:                                                                            |
|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |
|        ID   ID                                                             Usage      |
|=======================================================================================|
+---------------------------------------------------------------------------------------+

====================================================================================================
Training DataLoader: total number of tokens: 1000000000 across 10 files
Validation DataLoader: total number of tokens: 100000000 across 1 files
====================================================================================================
step:0/1480 val_loss:10.8258 train_time:0ms step_avg:nanms
step:1/1480 train_time:29281ms step_avg:nanms
step:2/1480 train_time:29393ms step_avg:nanms
step:3/1480 train_time:29516ms step_avg:nanms
step:4/1480 train_time:29656ms step_avg:nanms
step:5/1480 train_time:29797ms step_avg:nanms
step:6/1480 train_time:29938ms step_avg:nanms
step:7/1480 train_time:30080ms step_avg:nanms
step:8/1480 train_time:30221ms step_avg:nanms
step:9/1480 train_time:30367ms step_avg:nanms
step:10/1480 train_time:30510ms step_avg:nanms
step:11/1480 train_time:144ms step_avg:nanms
step:12/1480 train_time:283ms step_avg:nanms
step:13/1480 train_time:424ms step_avg:141.41ms
step:14/1480 train_time:567ms step_avg:141.83ms
step:15/1480 train_time:709ms step_avg:141.82ms
step:16/1480 train_time:855ms step_avg:142.49ms
step:17/1480 train_time:999ms step_avg:142.70ms
step:18/1480 train_time:1142ms step_avg:142.71ms
step:19/1480 train_time:1283ms step_avg:142.55ms
step:20/1480 train_time:1424ms step_avg:142.43ms
step:21/1480 train_time:1568ms step_avg:142.51ms
step:22/1480 train_time:1710ms step_avg:142.47ms
step:23/1480 train_time:1853ms step_avg:142.51ms
step:24/1480 train_time:1996ms step_avg:142.56ms
step:25/1480 train_time:2138ms step_avg:142.52ms
step:26/1480 train_time:2282ms step_avg:142.63ms
step:27/1480 train_time:2426ms step_avg:142.69ms
step:28/1480 train_time:2567ms step_avg:142.60ms
step:29/1480 train_time:2710ms step_avg:142.63ms
step:30/1480 train_time:3233ms step_avg:161.64ms
step:31/1480 train_time:3338ms step_avg:158.95ms
step:32/1480 train_time:3480ms step_avg:158.16ms
step:33/1480 train_time:3622ms step_avg:157.47ms
step:34/1480 train_time:3763ms step_avg:156.81ms
step:35/1480 train_time:3905ms step_avg:156.18ms
step:36/1480 train_time:4046ms step_avg:155.62ms
step:37/1480 train_time:4190ms step_avg:155.18ms
step:38/1480 train_time:4334ms step_avg:154.79ms
step:39/1480 train_time:4478ms step_avg:154.43ms
step:40/1480 train_time:4622ms step_avg:154.05ms
step:41/1480 train_time:4765ms step_avg:153.72ms
step:42/1480 train_time:4907ms step_avg:153.35ms
step:43/1480 train_time:5049ms step_avg:153.01ms
step:44/1480 train_time:5193ms step_avg:152.73ms
step:45/1480 train_time:5339ms step_avg:152.54ms
step:46/1480 train_time:5481ms step_avg:152.25ms
step:47/1480 train_time:5623ms step_avg:151.97ms
step:48/1480 train_time:5765ms step_avg:151.71ms
step:49/1480 train_time:5907ms step_avg:151.47ms
step:50/1480 train_time:6051ms step_avg:151.26ms
step:51/1480 train_time:6194ms step_avg:151.07ms
step:52/1480 train_time:6339ms step_avg:150.92ms
step:53/1480 train_time:6481ms step_avg:150.72ms
step:54/1480 train_time:6626ms step_avg:150.58ms
step:55/1480 train_time:6767ms step_avg:150.37ms
step:56/1480 train_time:6910ms step_avg:150.21ms
step:57/1480 train_time:7053ms step_avg:150.07ms
step:58/1480 train_time:7197ms step_avg:149.93ms
step:59/1480 train_time:7339ms step_avg:149.77ms
step:60/1480 train_time:7480ms step_avg:149.60ms
step:61/1480 train_time:7623ms step_avg:149.47ms
step:62/1480 train_time:7764ms step_avg:149.32ms
step:63/1480 train_time:7906ms step_avg:149.18ms
step:64/1480 train_time:8049ms step_avg:149.06ms
step:65/1480 train_time:8191ms step_avg:148.93ms
step:66/1480 train_time:8336ms step_avg:148.85ms
step:67/1480 train_time:8479ms step_avg:148.75ms
step:68/1480 train_time:8622ms step_avg:148.65ms
step:69/1480 train_time:8765ms step_avg:148.55ms
step:70/1480 train_time:8907ms step_avg:148.46ms
step:71/1480 train_time:9050ms step_avg:148.37ms
step:72/1480 train_time:9193ms step_avg:148.27ms
step:73/1480 train_time:9337ms step_avg:148.21ms
step:74/1480 train_time:9479ms step_avg:148.11ms
step:75/1480 train_time:9621ms step_avg:148.02ms
step:76/1480 train_time:9764ms step_avg:147.94ms
step:77/1480 train_time:9906ms step_avg:147.86ms
step:78/1480 train_time:10049ms step_avg:147.77ms
step:79/1480 train_time:10191ms step_avg:147.70ms
step:80/1480 train_time:10336ms step_avg:147.65ms
step:81/1480 train_time:10479ms step_avg:147.59ms
step:82/1480 train_time:10621ms step_avg:147.51ms
step:83/1480 train_time:10763ms step_avg:147.44ms
step:84/1480 train_time:10906ms step_avg:147.38ms
step:85/1480 train_time:11048ms step_avg:147.31ms
step:86/1480 train_time:11191ms step_avg:147.24ms
step:87/1480 train_time:11333ms step_avg:147.18ms
step:88/1480 train_time:11476ms step_avg:147.13ms
step:89/1480 train_time:11620ms step_avg:147.08ms
step:90/1480 train_time:11762ms step_avg:147.02ms
step:91/1480 train_time:11903ms step_avg:146.96ms
step:92/1480 train_time:12046ms step_avg:146.91ms
step:93/1480 train_time:12189ms step_avg:146.86ms
step:94/1480 train_time:12335ms step_avg:146.84ms
step:95/1480 train_time:12478ms step_avg:146.80ms
step:96/1480 train_time:12622ms step_avg:146.76ms
step:97/1480 train_time:12763ms step_avg:146.70ms
step:98/1480 train_time:12906ms step_avg:146.66ms
step:99/1480 train_time:13049ms step_avg:146.62ms
step:100/1480 train_time:13192ms step_avg:146.57ms
step:101/1480 train_time:13336ms step_avg:146.55ms
step:102/1480 train_time:13478ms step_avg:146.50ms
step:103/1480 train_time:13620ms step_avg:146.45ms
step:104/1480 train_time:13762ms step_avg:146.41ms
step:105/1480 train_time:13908ms step_avg:146.40ms
step:106/1480 train_time:14050ms step_avg:146.35ms
step:107/1480 train_time:14193ms step_avg:146.32ms
step:108/1480 train_time:14337ms step_avg:146.29ms
step:109/1480 train_time:14478ms step_avg:146.25ms
step:110/1480 train_time:14621ms step_avg:146.21ms
step:111/1480 train_time:14764ms step_avg:146.18ms
step:112/1480 train_time:14909ms step_avg:146.17ms
step:113/1480 train_time:15055ms step_avg:146.17ms
step:114/1480 train_time:15201ms step_avg:146.17ms
step:115/1480 train_time:15346ms step_avg:146.15ms
step:116/1480 train_time:15492ms step_avg:146.15ms
step:117/1480 train_time:15638ms step_avg:146.15ms
step:118/1480 train_time:15783ms step_avg:146.14ms
step:119/1480 train_time:15929ms step_avg:146.14ms
step:120/1480 train_time:16076ms step_avg:146.14ms
step:121/1480 train_time:16221ms step_avg:146.14ms
step:122/1480 train_time:16367ms step_avg:146.13ms
step:123/1480 train_time:16513ms step_avg:146.13ms
step:124/1480 train_time:16660ms step_avg:146.14ms
step:125/1480 train_time:16804ms step_avg:146.13ms
step:125/1480 val_loss:4.4184 train_time:16869ms step_avg:146.69ms
step:126/1480 train_time:16964ms step_avg:146.24ms
step:127/1480 train_time:17104ms step_avg:146.19ms
step:128/1480 train_time:17251ms step_avg:146.19ms
step:129/1480 train_time:17395ms step_avg:146.18ms
step:130/1480 train_time:17539ms step_avg:146.16ms
step:131/1480 train_time:17685ms step_avg:146.15ms
step:132/1480 train_time:17830ms step_avg:146.15ms
step:133/1480 train_time:17975ms step_avg:146.14ms
step:134/1480 train_time:18121ms step_avg:146.14ms
step:135/1480 train_time:18268ms step_avg:146.14ms
step:136/1480 train_time:18413ms step_avg:146.13ms
step:137/1480 train_time:18558ms step_avg:146.13ms
step:138/1480 train_time:18704ms step_avg:146.12ms
step:139/1480 train_time:18849ms step_avg:146.12ms
step:140/1480 train_time:18994ms step_avg:146.11ms
step:141/1480 train_time:19140ms step_avg:146.11ms
step:142/1480 train_time:19286ms step_avg:146.11ms
step:143/1480 train_time:19432ms step_avg:146.10ms
step:144/1480 train_time:19577ms step_avg:146.10ms
step:145/1480 train_time:19724ms step_avg:146.10ms
step:146/1480 train_time:19870ms step_avg:146.10ms
step:147/1480 train_time:20014ms step_avg:146.09ms
step:148/1480 train_time:20160ms step_avg:146.09ms
step:149/1480 train_time:20307ms step_avg:146.09ms
step:150/1480 train_time:20452ms step_avg:146.09ms
step:151/1480 train_time:20597ms step_avg:146.08ms
step:152/1480 train_time:20742ms step_avg:146.07ms
step:153/1480 train_time:20889ms step_avg:146.08ms
step:154/1480 train_time:21033ms step_avg:146.06ms
step:155/1480 train_time:21178ms step_avg:146.06ms
step:156/1480 train_time:21324ms step_avg:146.06ms
step:157/1480 train_time:21471ms step_avg:146.06ms
step:158/1480 train_time:21615ms step_avg:146.05ms
step:159/1480 train_time:21761ms step_avg:146.05ms
step:160/1480 train_time:21907ms step_avg:146.05ms
step:161/1480 train_time:22053ms step_avg:146.04ms
step:162/1480 train_time:22198ms step_avg:146.04ms
step:163/1480 train_time:22344ms step_avg:146.04ms
step:164/1480 train_time:22491ms step_avg:146.04ms
step:165/1480 train_time:22634ms step_avg:146.03ms
step:166/1480 train_time:22779ms step_avg:146.02ms
step:167/1480 train_time:22926ms step_avg:146.02ms
step:168/1480 train_time:23072ms step_avg:146.02ms
step:169/1480 train_time:23216ms step_avg:146.01ms
step:170/1480 train_time:23362ms step_avg:146.01ms
step:171/1480 train_time:23509ms step_avg:146.02ms
step:172/1480 train_time:23654ms step_avg:146.01ms
step:173/1480 train_time:23798ms step_avg:146.00ms
step:174/1480 train_time:23945ms step_avg:146.00ms
step:175/1480 train_time:24091ms step_avg:146.01ms
step:176/1480 train_time:24235ms step_avg:146.00ms
step:177/1480 train_time:24381ms step_avg:146.00ms
step:178/1480 train_time:24527ms step_avg:145.99ms
step:179/1480 train_time:24672ms step_avg:145.99ms
step:180/1480 train_time:24817ms step_avg:145.98ms
step:181/1480 train_time:24963ms step_avg:145.98ms
step:182/1480 train_time:25110ms step_avg:145.99ms
step:183/1480 train_time:25255ms step_avg:145.98ms
step:184/1480 train_time:25400ms step_avg:145.98ms
step:185/1480 train_time:25546ms step_avg:145.98ms
step:186/1480 train_time:25692ms step_avg:145.98ms
step:187/1480 train_time:25837ms step_avg:145.97ms
step:188/1480 train_time:25982ms step_avg:145.97ms
step:189/1480 train_time:26143ms step_avg:146.05ms
step:190/1480 train_time:26274ms step_avg:145.97ms
step:191/1480 train_time:26419ms step_avg:145.96ms
step:192/1480 train_time:26566ms step_avg:145.97ms
step:193/1480 train_time:26712ms step_avg:145.97ms
step:194/1480 train_time:26857ms step_avg:145.96ms
step:195/1480 train_time:27002ms step_avg:145.96ms
step:196/1480 train_time:27148ms step_avg:145.96ms
step:197/1480 train_time:27294ms step_avg:145.96ms
step:198/1480 train_time:27439ms step_avg:145.95ms
step:199/1480 train_time:27586ms step_avg:145.96ms
step:200/1480 train_time:27732ms step_avg:145.96ms
step:201/1480 train_time:27879ms step_avg:145.96ms
step:202/1480 train_time:28023ms step_avg:145.95ms
step:203/1480 train_time:28169ms step_avg:145.95ms
step:204/1480 train_time:28313ms step_avg:145.95ms
step:205/1480 train_time:28458ms step_avg:145.94ms
step:206/1480 train_time:28605ms step_avg:145.94ms
step:207/1480 train_time:28752ms step_avg:145.95ms
step:208/1480 train_time:28896ms step_avg:145.94ms
step:209/1480 train_time:29041ms step_avg:145.94ms
step:210/1480 train_time:29188ms step_avg:145.94ms
step:211/1480 train_time:29333ms step_avg:145.93ms
step:212/1480 train_time:29481ms step_avg:145.94ms
step:213/1480 train_time:29627ms step_avg:145.94ms
step:214/1480 train_time:29773ms step_avg:145.95ms
step:215/1480 train_time:29918ms step_avg:145.94ms
step:216/1480 train_time:30064ms step_avg:145.94ms
step:217/1480 train_time:30210ms step_avg:145.94ms
step:218/1480 train_time:30355ms step_avg:145.94ms
step:219/1480 train_time:30502ms step_avg:145.94ms
step:220/1480 train_time:30648ms step_avg:145.95ms
step:221/1480 train_time:31183ms step_avg:147.79ms
step:222/1480 train_time:31294ms step_avg:147.61ms
step:223/1480 train_time:31441ms step_avg:147.61ms
step:224/1480 train_time:31591ms step_avg:147.62ms
step:225/1480 train_time:31738ms step_avg:147.62ms
step:226/1480 train_time:31888ms step_avg:147.63ms
step:227/1480 train_time:32035ms step_avg:147.63ms
step:228/1480 train_time:32185ms step_avg:147.64ms
step:229/1480 train_time:32334ms step_avg:147.64ms
step:230/1480 train_time:32484ms step_avg:147.65ms
step:231/1480 train_time:32632ms step_avg:147.66ms
step:232/1480 train_time:32780ms step_avg:147.66ms
step:233/1480 train_time:32929ms step_avg:147.66ms
step:234/1480 train_time:33076ms step_avg:147.66ms
step:235/1480 train_time:33226ms step_avg:147.67ms
step:236/1480 train_time:33375ms step_avg:147.68ms
step:237/1480 train_time:33522ms step_avg:147.67ms
step:238/1480 train_time:33671ms step_avg:147.68ms
step:239/1480 train_time:33818ms step_avg:147.68ms
step:240/1480 train_time:33967ms step_avg:147.68ms
step:241/1480 train_time:34115ms step_avg:147.68ms
step:242/1480 train_time:34263ms step_avg:147.68ms
step:243/1480 train_time:34412ms step_avg:147.69ms
step:244/1480 train_time:34561ms step_avg:147.70ms
step:245/1480 train_time:34710ms step_avg:147.70ms
step:246/1480 train_time:34857ms step_avg:147.70ms
step:247/1480 train_time:35005ms step_avg:147.70ms
step:248/1480 train_time:35154ms step_avg:147.71ms
step:249/1480 train_time:35301ms step_avg:147.70ms
step:250/1480 train_time:35451ms step_avg:147.71ms
step:250/1480 val_loss:3.9936 train_time:35517ms step_avg:147.99ms
step:251/1480 train_time:35607ms step_avg:147.75ms
step:252/1480 train_time:35755ms step_avg:147.75ms
step:253/1480 train_time:35905ms step_avg:147.76ms
step:254/1480 train_time:36052ms step_avg:147.75ms
step:255/1480 train_time:36201ms step_avg:147.76ms
step:256/1480 train_time:36349ms step_avg:147.76ms
step:257/1480 train_time:36496ms step_avg:147.76ms
step:258/1480 train_time:36645ms step_avg:147.76ms
step:259/1480 train_time:36793ms step_avg:147.76ms
step:260/1480 train_time:36943ms step_avg:147.77ms
step:261/1480 train_time:37091ms step_avg:147.77ms
step:262/1480 train_time:37239ms step_avg:147.77ms
step:263/1480 train_time:37388ms step_avg:147.78ms
step:264/1480 train_time:37536ms step_avg:147.78ms
step:265/1480 train_time:37684ms step_avg:147.78ms
step:266/1480 train_time:37832ms step_avg:147.78ms
step:267/1480 train_time:37980ms step_avg:147.78ms
step:268/1480 train_time:38129ms step_avg:147.79ms
step:269/1480 train_time:38278ms step_avg:147.79ms
step:270/1480 train_time:38427ms step_avg:147.80ms
step:271/1480 train_time:38574ms step_avg:147.79ms
step:272/1480 train_time:38723ms step_avg:147.80ms
step:273/1480 train_time:38871ms step_avg:147.80ms
step:274/1480 train_time:39020ms step_avg:147.80ms
step:275/1480 train_time:39168ms step_avg:147.80ms
step:276/1480 train_time:39316ms step_avg:147.81ms
step:277/1480 train_time:39465ms step_avg:147.81ms
step:278/1480 train_time:39612ms step_avg:147.81ms
step:279/1480 train_time:39762ms step_avg:147.81ms
step:280/1480 train_time:39911ms step_avg:147.82ms
step:281/1480 train_time:40059ms step_avg:147.82ms
step:282/1480 train_time:40208ms step_avg:147.82ms
step:283/1480 train_time:40356ms step_avg:147.82ms
step:284/1480 train_time:40505ms step_avg:147.83ms
step:285/1480 train_time:40652ms step_avg:147.82ms
step:286/1480 train_time:40801ms step_avg:147.83ms
step:287/1480 train_time:40950ms step_avg:147.83ms
step:288/1480 train_time:41099ms step_avg:147.84ms
step:289/1480 train_time:41248ms step_avg:147.84ms
step:290/1480 train_time:41396ms step_avg:147.84ms
step:291/1480 train_time:41546ms step_avg:147.85ms
step:292/1480 train_time:41693ms step_avg:147.85ms
step:293/1480 train_time:41841ms step_avg:147.85ms
step:294/1480 train_time:41990ms step_avg:147.85ms
step:295/1480 train_time:42137ms step_avg:147.85ms
step:296/1480 train_time:42285ms step_avg:147.85ms
step:297/1480 train_time:42432ms step_avg:147.85ms
step:298/1480 train_time:42582ms step_avg:147.85ms
step:299/1480 train_time:42730ms step_avg:147.86ms
step:300/1480 train_time:42878ms step_avg:147.86ms
step:301/1480 train_time:43029ms step_avg:147.87ms
step:302/1480 train_time:43175ms step_avg:147.86ms
step:303/1480 train_time:43324ms step_avg:147.87ms
step:304/1480 train_time:43472ms step_avg:147.86ms
step:305/1480 train_time:43621ms step_avg:147.87ms
step:306/1480 train_time:43769ms step_avg:147.87ms
step:307/1480 train_time:43918ms step_avg:147.87ms
step:308/1480 train_time:44066ms step_avg:147.87ms
step:309/1480 train_time:44215ms step_avg:147.88ms
step:310/1480 train_time:44364ms step_avg:147.88ms
step:311/1480 train_time:44512ms step_avg:147.88ms
step:312/1480 train_time:44661ms step_avg:147.88ms
step:313/1480 train_time:44810ms step_avg:147.89ms
step:314/1480 train_time:44958ms step_avg:147.89ms
step:315/1480 train_time:45107ms step_avg:147.89ms
step:316/1480 train_time:45255ms step_avg:147.89ms
step:317/1480 train_time:45403ms step_avg:147.89ms
step:318/1480 train_time:45551ms step_avg:147.89ms
step:319/1480 train_time:45700ms step_avg:147.90ms
step:320/1480 train_time:45849ms step_avg:147.90ms
step:321/1480 train_time:45996ms step_avg:147.90ms
step:322/1480 train_time:46146ms step_avg:147.90ms
step:323/1480 train_time:46293ms step_avg:147.90ms
step:324/1480 train_time:46443ms step_avg:147.91ms
step:325/1480 train_time:46591ms step_avg:147.91ms
step:326/1480 train_time:46739ms step_avg:147.91ms
step:327/1480 train_time:46888ms step_avg:147.91ms
step:328/1480 train_time:47037ms step_avg:147.91ms
step:329/1480 train_time:47186ms step_avg:147.92ms
step:330/1480 train_time:47335ms step_avg:147.92ms
step:331/1480 train_time:47487ms step_avg:147.93ms
step:332/1480 train_time:47636ms step_avg:147.94ms
step:333/1480 train_time:47787ms step_avg:147.95ms
step:334/1480 train_time:47936ms step_avg:147.95ms
step:335/1480 train_time:48087ms step_avg:147.96ms
step:336/1480 train_time:48237ms step_avg:147.97ms
step:337/1480 train_time:48389ms step_avg:147.98ms
step:338/1480 train_time:48539ms step_avg:147.98ms
step:339/1480 train_time:48690ms step_avg:147.99ms
step:340/1480 train_time:48840ms step_avg:148.00ms
step:341/1480 train_time:48991ms step_avg:148.01ms
step:342/1480 train_time:49141ms step_avg:148.02ms
step:343/1480 train_time:49292ms step_avg:148.02ms
step:344/1480 train_time:49443ms step_avg:148.03ms
step:345/1480 train_time:49593ms step_avg:148.04ms
step:346/1480 train_time:49744ms step_avg:148.05ms
step:347/1480 train_time:49894ms step_avg:148.05ms
step:348/1480 train_time:50046ms step_avg:148.06ms
step:349/1480 train_time:50196ms step_avg:148.07ms
step:350/1480 train_time:50348ms step_avg:148.08ms
step:351/1480 train_time:50500ms step_avg:148.10ms
step:352/1480 train_time:50652ms step_avg:148.10ms
step:353/1480 train_time:50803ms step_avg:148.11ms
step:354/1480 train_time:50953ms step_avg:148.12ms
step:355/1480 train_time:51105ms step_avg:148.13ms
step:356/1480 train_time:51255ms step_avg:148.14ms
step:357/1480 train_time:51406ms step_avg:148.15ms
step:358/1480 train_time:51556ms step_avg:148.15ms
step:359/1480 train_time:51708ms step_avg:148.16ms
step:360/1480 train_time:51858ms step_avg:148.17ms
step:361/1480 train_time:52009ms step_avg:148.17ms
step:362/1480 train_time:52159ms step_avg:148.18ms
step:363/1480 train_time:52310ms step_avg:148.19ms
step:364/1480 train_time:52461ms step_avg:148.20ms
step:365/1480 train_time:52612ms step_avg:148.20ms
step:366/1480 train_time:52763ms step_avg:148.21ms
step:367/1480 train_time:52913ms step_avg:148.22ms
step:368/1480 train_time:53064ms step_avg:148.22ms
step:369/1480 train_time:53214ms step_avg:148.23ms
step:370/1480 train_time:53365ms step_avg:148.24ms
step:371/1480 train_time:53515ms step_avg:148.24ms
step:372/1480 train_time:53666ms step_avg:148.25ms
step:373/1480 train_time:53816ms step_avg:148.25ms
step:374/1480 train_time:53966ms step_avg:148.26ms
step:375/1480 train_time:54117ms step_avg:148.27ms
step:375/1480 val_loss:3.8123 train_time:54185ms step_avg:148.45ms
step:376/1480 train_time:54277ms step_avg:148.30ms
step:377/1480 train_time:54427ms step_avg:148.30ms
step:378/1480 train_time:54578ms step_avg:148.31ms
step:379/1480 train_time:54740ms step_avg:148.35ms
step:380/1480 train_time:54879ms step_avg:148.32ms
step:381/1480 train_time:55029ms step_avg:148.33ms
step:382/1480 train_time:55180ms step_avg:148.33ms
step:383/1480 train_time:55331ms step_avg:148.34ms
step:384/1480 train_time:55483ms step_avg:148.35ms
step:385/1480 train_time:55634ms step_avg:148.36ms
step:386/1480 train_time:55785ms step_avg:148.36ms
step:387/1480 train_time:55935ms step_avg:148.37ms
step:388/1480 train_time:56086ms step_avg:148.38ms
step:389/1480 train_time:56237ms step_avg:148.38ms
step:390/1480 train_time:56389ms step_avg:148.39ms
step:391/1480 train_time:56540ms step_avg:148.40ms
step:392/1480 train_time:56691ms step_avg:148.41ms
step:393/1480 train_time:56842ms step_avg:148.41ms
step:394/1480 train_time:56993ms step_avg:148.42ms
step:395/1480 train_time:57144ms step_avg:148.43ms
step:396/1480 train_time:57294ms step_avg:148.43ms
step:397/1480 train_time:57445ms step_avg:148.44ms
step:398/1480 train_time:57596ms step_avg:148.44ms
step:399/1480 train_time:57748ms step_avg:148.45ms
step:400/1480 train_time:57899ms step_avg:148.46ms
step:401/1480 train_time:58049ms step_avg:148.46ms
step:402/1480 train_time:58200ms step_avg:148.47ms
step:403/1480 train_time:58351ms step_avg:148.48ms
step:404/1480 train_time:58502ms step_avg:148.48ms
step:405/1480 train_time:58652ms step_avg:148.49ms
step:406/1480 train_time:58804ms step_avg:148.49ms
step:407/1480 train_time:58954ms step_avg:148.50ms
step:408/1480 train_time:59106ms step_avg:148.51ms
step:409/1480 train_time:59255ms step_avg:148.51ms
step:410/1480 train_time:59406ms step_avg:148.52ms
step:411/1480 train_time:59555ms step_avg:148.52ms
step:412/1480 train_time:59706ms step_avg:148.52ms
step:413/1480 train_time:59856ms step_avg:148.53ms
step:414/1480 train_time:60007ms step_avg:148.53ms
step:415/1480 train_time:60158ms step_avg:148.54ms
step:416/1480 train_time:60309ms step_avg:148.54ms
step:417/1480 train_time:60460ms step_avg:148.55ms
step:418/1480 train_time:60611ms step_avg:148.56ms
step:419/1480 train_time:60763ms step_avg:148.56ms
step:420/1480 train_time:60912ms step_avg:148.57ms
step:421/1480 train_time:61063ms step_avg:148.57ms
step:422/1480 train_time:61212ms step_avg:148.57ms
step:423/1480 train_time:61363ms step_avg:148.58ms
step:424/1480 train_time:61514ms step_avg:148.58ms
step:425/1480 train_time:61665ms step_avg:148.59ms
step:426/1480 train_time:61816ms step_avg:148.60ms
step:427/1480 train_time:61967ms step_avg:148.60ms
step:428/1480 train_time:62118ms step_avg:148.61ms
step:429/1480 train_time:62268ms step_avg:148.61ms
step:430/1480 train_time:62419ms step_avg:148.62ms
step:431/1480 train_time:62570ms step_avg:148.62ms
step:432/1480 train_time:62722ms step_avg:148.63ms
step:433/1480 train_time:62872ms step_avg:148.63ms
step:434/1480 train_time:63024ms step_avg:148.64ms
step:435/1480 train_time:63174ms step_avg:148.64ms
step:436/1480 train_time:63326ms step_avg:148.65ms
step:437/1480 train_time:63476ms step_avg:148.66ms
step:438/1480 train_time:63627ms step_avg:148.66ms
step:439/1480 train_time:63777ms step_avg:148.66ms
step:440/1480 train_time:63929ms step_avg:148.67ms
step:441/1480 train_time:64082ms step_avg:148.68ms
step:442/1480 train_time:64234ms step_avg:148.69ms
step:443/1480 train_time:64387ms step_avg:148.70ms
step:444/1480 train_time:64541ms step_avg:148.71ms
step:445/1480 train_time:64694ms step_avg:148.72ms
step:446/1480 train_time:64848ms step_avg:148.73ms
step:447/1480 train_time:65001ms step_avg:148.74ms
step:448/1480 train_time:65153ms step_avg:148.75ms
step:449/1480 train_time:65307ms step_avg:148.76ms
step:450/1480 train_time:65459ms step_avg:148.77ms
step:451/1480 train_time:65612ms step_avg:148.78ms
step:452/1480 train_time:65766ms step_avg:148.79ms
step:453/1480 train_time:65918ms step_avg:148.80ms
step:454/1480 train_time:66070ms step_avg:148.81ms
step:455/1480 train_time:66225ms step_avg:148.82ms
step:456/1480 train_time:66377ms step_avg:148.83ms
step:457/1480 train_time:66529ms step_avg:148.84ms
step:458/1480 train_time:66682ms step_avg:148.84ms
step:459/1480 train_time:66835ms step_avg:148.85ms
step:460/1480 train_time:66987ms step_avg:148.86ms
step:461/1480 train_time:67140ms step_avg:148.87ms
step:462/1480 train_time:67294ms step_avg:148.88ms
step:463/1480 train_time:67448ms step_avg:148.89ms
step:464/1480 train_time:67601ms step_avg:148.90ms
step:465/1480 train_time:67754ms step_avg:148.91ms
step:466/1480 train_time:67907ms step_avg:148.92ms
step:467/1480 train_time:68060ms step_avg:148.93ms
step:468/1480 train_time:68213ms step_avg:148.94ms
step:469/1480 train_time:68366ms step_avg:148.95ms
step:470/1480 train_time:68519ms step_avg:148.95ms
step:471/1480 train_time:68672ms step_avg:148.96ms
step:472/1480 train_time:68825ms step_avg:148.97ms
step:473/1480 train_time:68978ms step_avg:148.98ms
step:474/1480 train_time:69131ms step_avg:148.99ms
step:475/1480 train_time:69284ms step_avg:149.00ms
step:476/1480 train_time:69437ms step_avg:149.01ms
step:477/1480 train_time:69589ms step_avg:149.01ms
step:478/1480 train_time:69743ms step_avg:149.02ms
step:479/1480 train_time:69896ms step_avg:149.03ms
step:480/1480 train_time:70049ms step_avg:149.04ms
step:481/1480 train_time:70203ms step_avg:149.05ms
step:482/1480 train_time:70355ms step_avg:149.06ms
step:483/1480 train_time:70508ms step_avg:149.07ms
step:484/1480 train_time:70660ms step_avg:149.07ms
step:485/1480 train_time:70814ms step_avg:149.08ms
step:486/1480 train_time:70968ms step_avg:149.09ms
step:487/1480 train_time:71122ms step_avg:149.10ms
step:488/1480 train_time:71275ms step_avg:149.11ms
step:489/1480 train_time:71427ms step_avg:149.12ms
step:490/1480 train_time:71581ms step_avg:149.13ms
step:491/1480 train_time:71733ms step_avg:149.13ms
step:492/1480 train_time:71885ms step_avg:149.14ms
step:493/1480 train_time:72040ms step_avg:149.15ms
step:494/1480 train_time:72194ms step_avg:149.16ms
step:495/1480 train_time:72347ms step_avg:149.17ms
step:496/1480 train_time:72501ms step_avg:149.18ms
step:497/1480 train_time:72653ms step_avg:149.19ms
step:498/1480 train_time:72806ms step_avg:149.19ms
step:499/1480 train_time:72958ms step_avg:149.20ms
step:500/1480 train_time:73111ms step_avg:149.21ms
step:500/1480 val_loss:3.6891 train_time:73179ms step_avg:149.35ms
step:501/1480 train_time:73270ms step_avg:149.23ms
step:502/1480 train_time:73422ms step_avg:149.23ms
step:503/1480 train_time:73575ms step_avg:149.24ms
step:504/1480 train_time:73726ms step_avg:149.24ms
step:505/1480 train_time:73879ms step_avg:149.25ms
step:506/1480 train_time:74032ms step_avg:149.26ms
step:507/1480 train_time:74185ms step_avg:149.27ms
step:508/1480 train_time:74338ms step_avg:149.27ms
step:509/1480 train_time:74491ms step_avg:149.28ms
step:510/1480 train_time:74644ms step_avg:149.29ms
step:511/1480 train_time:74797ms step_avg:149.29ms
step:512/1480 train_time:74952ms step_avg:149.31ms
step:513/1480 train_time:75105ms step_avg:149.31ms
step:514/1480 train_time:75258ms step_avg:149.32ms
step:515/1480 train_time:75412ms step_avg:149.33ms
step:516/1480 train_time:75565ms step_avg:149.34ms
step:517/1480 train_time:75719ms step_avg:149.35ms
step:518/1480 train_time:75871ms step_avg:149.35ms
step:519/1480 train_time:76024ms step_avg:149.36ms
step:520/1480 train_time:76177ms step_avg:149.37ms
step:521/1480 train_time:76330ms step_avg:149.37ms
step:522/1480 train_time:76484ms step_avg:149.38ms
step:523/1480 train_time:76637ms step_avg:149.39ms
step:524/1480 train_time:76791ms step_avg:149.40ms
step:525/1480 train_time:76943ms step_avg:149.40ms
step:526/1480 train_time:77096ms step_avg:149.41ms
step:527/1480 train_time:77250ms step_avg:149.42ms
step:528/1480 train_time:77403ms step_avg:149.43ms
step:529/1480 train_time:77556ms step_avg:149.43ms
step:530/1480 train_time:77709ms step_avg:149.44ms
step:531/1480 train_time:77863ms step_avg:149.45ms
step:532/1480 train_time:78016ms step_avg:149.46ms
step:533/1480 train_time:78168ms step_avg:149.46ms
step:534/1480 train_time:78321ms step_avg:149.47ms
step:535/1480 train_time:78474ms step_avg:149.47ms
step:536/1480 train_time:78627ms step_avg:149.48ms
step:537/1480 train_time:78781ms step_avg:149.49ms
step:538/1480 train_time:78935ms step_avg:149.50ms
step:539/1480 train_time:79088ms step_avg:149.51ms
step:540/1480 train_time:79241ms step_avg:149.51ms
step:541/1480 train_time:79394ms step_avg:149.52ms
step:542/1480 train_time:79546ms step_avg:149.52ms
step:543/1480 train_time:79699ms step_avg:149.53ms
step:544/1480 train_time:79852ms step_avg:149.54ms
step:545/1480 train_time:80005ms step_avg:149.54ms
step:546/1480 train_time:80157ms step_avg:149.55ms
step:547/1480 train_time:80311ms step_avg:149.55ms
step:548/1480 train_time:80463ms step_avg:149.56ms
step:549/1480 train_time:80616ms step_avg:149.57ms
step:550/1480 train_time:80770ms step_avg:149.57ms
step:551/1480 train_time:80925ms step_avg:149.58ms
step:552/1480 train_time:81079ms step_avg:149.59ms
step:553/1480 train_time:81236ms step_avg:149.61ms
step:554/1480 train_time:81389ms step_avg:149.61ms
step:555/1480 train_time:81544ms step_avg:149.62ms
step:556/1480 train_time:81698ms step_avg:149.63ms
step:557/1480 train_time:81854ms step_avg:149.64ms
step:558/1480 train_time:82010ms step_avg:149.65ms
step:559/1480 train_time:82165ms step_avg:149.66ms
step:560/1480 train_time:82320ms step_avg:149.67ms
step:561/1480 train_time:82475ms step_avg:149.68ms
step:562/1480 train_time:82628ms step_avg:149.69ms
step:563/1480 train_time:82783ms step_avg:149.70ms
step:564/1480 train_time:82938ms step_avg:149.71ms
step:565/1480 train_time:83092ms step_avg:149.72ms
step:566/1480 train_time:83247ms step_avg:149.73ms
step:567/1480 train_time:83402ms step_avg:149.73ms
step:568/1480 train_time:83557ms step_avg:149.74ms
step:569/1480 train_time:83724ms step_avg:149.77ms
step:570/1480 train_time:83867ms step_avg:149.76ms
step:571/1480 train_time:84022ms step_avg:149.77ms
step:572/1480 train_time:84176ms step_avg:149.78ms
step:573/1480 train_time:84331ms step_avg:149.79ms
step:574/1480 train_time:84486ms step_avg:149.80ms
step:575/1480 train_time:84640ms step_avg:149.81ms
step:576/1480 train_time:84794ms step_avg:149.81ms
step:577/1480 train_time:84948ms step_avg:149.82ms
step:578/1480 train_time:85102ms step_avg:149.83ms
step:579/1480 train_time:85256ms step_avg:149.84ms
step:580/1480 train_time:85412ms step_avg:149.85ms
step:581/1480 train_time:85567ms step_avg:149.85ms
step:582/1480 train_time:85722ms step_avg:149.86ms
step:583/1480 train_time:85877ms step_avg:149.87ms
step:584/1480 train_time:86032ms step_avg:149.88ms
step:585/1480 train_time:86187ms step_avg:149.89ms
step:586/1480 train_time:86341ms step_avg:149.90ms
step:587/1480 train_time:86495ms step_avg:149.90ms
step:588/1480 train_time:86650ms step_avg:149.91ms
step:589/1480 train_time:86804ms step_avg:149.92ms
step:590/1480 train_time:86958ms step_avg:149.93ms
step:591/1480 train_time:87115ms step_avg:149.94ms
step:592/1480 train_time:87270ms step_avg:149.95ms
step:593/1480 train_time:87426ms step_avg:149.96ms
step:594/1480 train_time:87581ms step_avg:149.97ms
step:595/1480 train_time:87738ms step_avg:149.98ms
step:596/1480 train_time:87894ms step_avg:149.99ms
step:597/1480 train_time:88048ms step_avg:150.00ms
step:598/1480 train_time:88202ms step_avg:150.00ms
step:599/1480 train_time:88357ms step_avg:150.01ms
step:600/1480 train_time:88511ms step_avg:150.02ms
step:601/1480 train_time:88665ms step_avg:150.03ms
step:602/1480 train_time:88820ms step_avg:150.03ms
step:603/1480 train_time:88975ms step_avg:150.04ms
step:604/1480 train_time:89130ms step_avg:150.05ms
step:605/1480 train_time:89286ms step_avg:150.06ms
step:606/1480 train_time:89440ms step_avg:150.07ms
step:607/1480 train_time:89596ms step_avg:150.08ms
step:608/1480 train_time:89752ms step_avg:150.09ms
step:609/1480 train_time:89907ms step_avg:150.10ms
step:610/1480 train_time:90062ms step_avg:150.10ms
step:611/1480 train_time:90218ms step_avg:150.11ms
step:612/1480 train_time:90372ms step_avg:150.12ms
step:613/1480 train_time:90527ms step_avg:150.13ms
step:614/1480 train_time:90682ms step_avg:150.13ms
step:615/1480 train_time:90837ms step_avg:150.14ms
step:616/1480 train_time:90991ms step_avg:150.15ms
step:617/1480 train_time:91145ms step_avg:150.16ms
step:618/1480 train_time:91299ms step_avg:150.16ms
step:619/1480 train_time:91455ms step_avg:150.17ms
step:620/1480 train_time:91610ms step_avg:150.18ms
step:621/1480 train_time:91765ms step_avg:150.19ms
step:622/1480 train_time:91919ms step_avg:150.19ms
step:623/1480 train_time:92075ms step_avg:150.20ms
step:624/1480 train_time:92230ms step_avg:150.21ms
step:625/1480 train_time:92384ms step_avg:150.22ms
step:625/1480 val_loss:3.6102 train_time:92454ms step_avg:150.33ms
step:626/1480 train_time:92545ms step_avg:150.24ms
step:627/1480 train_time:92700ms step_avg:150.24ms
step:628/1480 train_time:92855ms step_avg:150.25ms
step:629/1480 train_time:93010ms step_avg:150.26ms
step:630/1480 train_time:93164ms step_avg:150.26ms
step:631/1480 train_time:93318ms step_avg:150.27ms
step:632/1480 train_time:93472ms step_avg:150.28ms
step:633/1480 train_time:93628ms step_avg:150.29ms
step:634/1480 train_time:93783ms step_avg:150.29ms
step:635/1480 train_time:93937ms step_avg:150.30ms
step:636/1480 train_time:94091ms step_avg:150.31ms
step:637/1480 train_time:94248ms step_avg:150.32ms
step:638/1480 train_time:94404ms step_avg:150.32ms
step:639/1480 train_time:94558ms step_avg:150.33ms
step:640/1480 train_time:94713ms step_avg:150.34ms
step:641/1480 train_time:94868ms step_avg:150.34ms
step:642/1480 train_time:95022ms step_avg:150.35ms
step:643/1480 train_time:95177ms step_avg:150.36ms
step:644/1480 train_time:95332ms step_avg:150.37ms
step:645/1480 train_time:95488ms step_avg:150.37ms
step:646/1480 train_time:95642ms step_avg:150.38ms
step:647/1480 train_time:95796ms step_avg:150.39ms
step:648/1480 train_time:95952ms step_avg:150.39ms
step:649/1480 train_time:96107ms step_avg:150.40ms
step:650/1480 train_time:96261ms step_avg:150.41ms
step:651/1480 train_time:96417ms step_avg:150.42ms
step:652/1480 train_time:96572ms step_avg:150.42ms
step:653/1480 train_time:96727ms step_avg:150.43ms
step:654/1480 train_time:96882ms step_avg:150.44ms
step:655/1480 train_time:97036ms step_avg:150.44ms
step:656/1480 train_time:97191ms step_avg:150.45ms
step:657/1480 train_time:97346ms step_avg:150.46ms
step:658/1480 train_time:97501ms step_avg:150.46ms
step:659/1480 train_time:97656ms step_avg:150.47ms
step:660/1480 train_time:97813ms step_avg:150.48ms
step:661/1480 train_time:97970ms step_avg:150.49ms
step:662/1480 train_time:98127ms step_avg:150.50ms
step:663/1480 train_time:98282ms step_avg:150.51ms
step:664/1480 train_time:98439ms step_avg:150.52ms
step:665/1480 train_time:98596ms step_avg:150.53ms
step:666/1480 train_time:98752ms step_avg:150.54ms
step:667/1480 train_time:98909ms step_avg:150.55ms
step:668/1480 train_time:99065ms step_avg:150.56ms
step:669/1480 train_time:99223ms step_avg:150.57ms
step:670/1480 train_time:99378ms step_avg:150.57ms
step:671/1480 train_time:99534ms step_avg:150.58ms
step:672/1480 train_time:99690ms step_avg:150.59ms
step:673/1480 train_time:99847ms step_avg:150.60ms
step:674/1480 train_time:100005ms step_avg:150.61ms
step:675/1480 train_time:100162ms step_avg:150.62ms
step:676/1480 train_time:100320ms step_avg:150.63ms
step:677/1480 train_time:100476ms step_avg:150.64ms
step:678/1480 train_time:100633ms step_avg:150.65ms
step:679/1480 train_time:100790ms step_avg:150.66ms
step:680/1480 train_time:100947ms step_avg:150.67ms
step:681/1480 train_time:101102ms step_avg:150.67ms
step:682/1480 train_time:101258ms step_avg:150.68ms
step:683/1480 train_time:101415ms step_avg:150.69ms
step:684/1480 train_time:101572ms step_avg:150.70ms
step:685/1480 train_time:101728ms step_avg:150.71ms
step:686/1480 train_time:101885ms step_avg:150.72ms
step:687/1480 train_time:102041ms step_avg:150.73ms
step:688/1480 train_time:102198ms step_avg:150.73ms
step:689/1480 train_time:102356ms step_avg:150.75ms
step:690/1480 train_time:102514ms step_avg:150.76ms
step:691/1480 train_time:102671ms step_avg:150.76ms
step:692/1480 train_time:102827ms step_avg:150.77ms
step:693/1480 train_time:102984ms step_avg:150.78ms
step:694/1480 train_time:103141ms step_avg:150.79ms
step:695/1480 train_time:103296ms step_avg:150.80ms
step:696/1480 train_time:103452ms step_avg:150.80ms
step:697/1480 train_time:103608ms step_avg:150.81ms
step:698/1480 train_time:103764ms step_avg:150.82ms
step:699/1480 train_time:103921ms step_avg:150.83ms
step:700/1480 train_time:104077ms step_avg:150.84ms
step:701/1480 train_time:104233ms step_avg:150.84ms
step:702/1480 train_time:104391ms step_avg:150.85ms
step:703/1480 train_time:104547ms step_avg:150.86ms
step:704/1480 train_time:104703ms step_avg:150.87ms
step:705/1480 train_time:104858ms step_avg:150.88ms
step:706/1480 train_time:105016ms step_avg:150.89ms
step:707/1480 train_time:105173ms step_avg:150.89ms
step:708/1480 train_time:105328ms step_avg:150.90ms
step:709/1480 train_time:105484ms step_avg:150.91ms
step:710/1480 train_time:105639ms step_avg:150.91ms
step:711/1480 train_time:105795ms step_avg:150.92ms
step:712/1480 train_time:105953ms step_avg:150.93ms
step:713/1480 train_time:106112ms step_avg:150.94ms
step:714/1480 train_time:106268ms step_avg:150.95ms
step:715/1480 train_time:106424ms step_avg:150.96ms
step:716/1480 train_time:106579ms step_avg:150.96ms
step:717/1480 train_time:106735ms step_avg:150.97ms
step:718/1480 train_time:106890ms step_avg:150.98ms
step:719/1480 train_time:107047ms step_avg:150.98ms
step:720/1480 train_time:107206ms step_avg:150.99ms
step:721/1480 train_time:107363ms step_avg:151.00ms
step:722/1480 train_time:107520ms step_avg:151.01ms
step:723/1480 train_time:107676ms step_avg:151.02ms
step:724/1480 train_time:107832ms step_avg:151.03ms
step:725/1480 train_time:107987ms step_avg:151.03ms
step:726/1480 train_time:108144ms step_avg:151.04ms
step:727/1480 train_time:108302ms step_avg:151.05ms
step:728/1480 train_time:108457ms step_avg:151.05ms
step:729/1480 train_time:108614ms step_avg:151.06ms
step:730/1480 train_time:108772ms step_avg:151.07ms
step:731/1480 train_time:108929ms step_avg:151.08ms
step:732/1480 train_time:109085ms step_avg:151.09ms
step:733/1480 train_time:109242ms step_avg:151.10ms
step:734/1480 train_time:109397ms step_avg:151.10ms
step:735/1480 train_time:109554ms step_avg:151.11ms
step:736/1480 train_time:109711ms step_avg:151.12ms
step:737/1480 train_time:109866ms step_avg:151.12ms
step:738/1480 train_time:110021ms step_avg:151.13ms
step:739/1480 train_time:110177ms step_avg:151.13ms
step:740/1480 train_time:110336ms step_avg:151.14ms
step:741/1480 train_time:110494ms step_avg:151.15ms
step:742/1480 train_time:110649ms step_avg:151.16ms
step:743/1480 train_time:110805ms step_avg:151.17ms
step:744/1480 train_time:110960ms step_avg:151.17ms
step:745/1480 train_time:111118ms step_avg:151.18ms
step:746/1480 train_time:111274ms step_avg:151.19ms
step:747/1480 train_time:111430ms step_avg:151.19ms
step:748/1480 train_time:111587ms step_avg:151.20ms
step:749/1480 train_time:111744ms step_avg:151.21ms
step:750/1480 train_time:111901ms step_avg:151.22ms
step:750/1480 val_loss:3.5524 train_time:111972ms step_avg:151.31ms
step:751/1480 train_time:112064ms step_avg:151.23ms
step:752/1480 train_time:112218ms step_avg:151.24ms
step:753/1480 train_time:112374ms step_avg:151.24ms
step:754/1480 train_time:112529ms step_avg:151.25ms
step:755/1480 train_time:112685ms step_avg:151.25ms
step:756/1480 train_time:112841ms step_avg:151.26ms
step:757/1480 train_time:112999ms step_avg:151.27ms
step:758/1480 train_time:113156ms step_avg:151.28ms
step:759/1480 train_time:113321ms step_avg:151.30ms
step:760/1480 train_time:113470ms step_avg:151.29ms
step:761/1480 train_time:113626ms step_avg:151.30ms
step:762/1480 train_time:113783ms step_avg:151.31ms
step:763/1480 train_time:113940ms step_avg:151.31ms
step:764/1480 train_time:114097ms step_avg:151.32ms
step:765/1480 train_time:114253ms step_avg:151.33ms
step:766/1480 train_time:114411ms step_avg:151.34ms
step:767/1480 train_time:114568ms step_avg:151.34ms
step:768/1480 train_time:114724ms step_avg:151.35ms
step:769/1480 train_time:114880ms step_avg:151.36ms
step:770/1480 train_time:115038ms step_avg:151.37ms
step:771/1480 train_time:115196ms step_avg:151.37ms
step:772/1480 train_time:115353ms step_avg:151.38ms
step:773/1480 train_time:115511ms step_avg:151.39ms
step:774/1480 train_time:115669ms step_avg:151.40ms
step:775/1480 train_time:115826ms step_avg:151.41ms
step:776/1480 train_time:115984ms step_avg:151.42ms
step:777/1480 train_time:116144ms step_avg:151.43ms
step:778/1480 train_time:116302ms step_avg:151.44ms
step:779/1480 train_time:116459ms step_avg:151.44ms
step:780/1480 train_time:116619ms step_avg:151.45ms
step:781/1480 train_time:116776ms step_avg:151.46ms
step:782/1480 train_time:116935ms step_avg:151.47ms
step:783/1480 train_time:117093ms step_avg:151.48ms
step:784/1480 train_time:117251ms step_avg:151.49ms
step:785/1480 train_time:117410ms step_avg:151.50ms
step:786/1480 train_time:117568ms step_avg:151.50ms
step:787/1480 train_time:117726ms step_avg:151.51ms
step:788/1480 train_time:117883ms step_avg:151.52ms
step:789/1480 train_time:118040ms step_avg:151.53ms
step:790/1480 train_time:118197ms step_avg:151.53ms
step:791/1480 train_time:118356ms step_avg:151.54ms
step:792/1480 train_time:118515ms step_avg:151.55ms
step:793/1480 train_time:118673ms step_avg:151.56ms
step:794/1480 train_time:118832ms step_avg:151.57ms
step:795/1480 train_time:118993ms step_avg:151.58ms
step:796/1480 train_time:119154ms step_avg:151.60ms
step:797/1480 train_time:119314ms step_avg:151.61ms
step:798/1480 train_time:119473ms step_avg:151.62ms
step:799/1480 train_time:119634ms step_avg:151.63ms
step:800/1480 train_time:119793ms step_avg:151.64ms
step:801/1480 train_time:119953ms step_avg:151.65ms
step:802/1480 train_time:120110ms step_avg:151.65ms
step:803/1480 train_time:120268ms step_avg:151.66ms
step:804/1480 train_time:120424ms step_avg:151.67ms
step:805/1480 train_time:120583ms step_avg:151.68ms
step:806/1480 train_time:120740ms step_avg:151.68ms
step:807/1480 train_time:120897ms step_avg:151.69ms
step:808/1480 train_time:121054ms step_avg:151.70ms
step:809/1480 train_time:121211ms step_avg:151.70ms
step:810/1480 train_time:121369ms step_avg:151.71ms
step:811/1480 train_time:121527ms step_avg:151.72ms
step:812/1480 train_time:121684ms step_avg:151.73ms
step:813/1480 train_time:121840ms step_avg:151.73ms
step:814/1480 train_time:121997ms step_avg:151.74ms
step:815/1480 train_time:122154ms step_avg:151.74ms
step:816/1480 train_time:122314ms step_avg:151.75ms
step:817/1480 train_time:122473ms step_avg:151.76ms
step:818/1480 train_time:122631ms step_avg:151.77ms
step:819/1480 train_time:122789ms step_avg:151.78ms
step:820/1480 train_time:122948ms step_avg:151.79ms
step:821/1480 train_time:123105ms step_avg:151.79ms
step:822/1480 train_time:123262ms step_avg:151.80ms
step:823/1480 train_time:123420ms step_avg:151.81ms
step:824/1480 train_time:123577ms step_avg:151.81ms
step:825/1480 train_time:123736ms step_avg:151.82ms
step:826/1480 train_time:123896ms step_avg:151.83ms
step:827/1480 train_time:124055ms step_avg:151.84ms
step:828/1480 train_time:124213ms step_avg:151.85ms
step:829/1480 train_time:124373ms step_avg:151.86ms
step:830/1480 train_time:124532ms step_avg:151.87ms
step:831/1480 train_time:124690ms step_avg:151.88ms
step:832/1480 train_time:124848ms step_avg:151.88ms
step:833/1480 train_time:125005ms step_avg:151.89ms
step:834/1480 train_time:125165ms step_avg:151.90ms
step:835/1480 train_time:125322ms step_avg:151.91ms
step:836/1480 train_time:125480ms step_avg:151.91ms
step:837/1480 train_time:125639ms step_avg:151.92ms
step:838/1480 train_time:125796ms step_avg:151.93ms
step:839/1480 train_time:125954ms step_avg:151.93ms
step:840/1480 train_time:126111ms step_avg:151.94ms
step:841/1480 train_time:126267ms step_avg:151.95ms
step:842/1480 train_time:126426ms step_avg:151.95ms
step:843/1480 train_time:126582ms step_avg:151.96ms
step:844/1480 train_time:126739ms step_avg:151.96ms
step:845/1480 train_time:126897ms step_avg:151.97ms
step:846/1480 train_time:127057ms step_avg:151.98ms
step:847/1480 train_time:127215ms step_avg:151.99ms
step:848/1480 train_time:127373ms step_avg:152.00ms
step:849/1480 train_time:127533ms step_avg:152.01ms
step:850/1480 train_time:127691ms step_avg:152.01ms
step:851/1480 train_time:127853ms step_avg:152.02ms
step:852/1480 train_time:128011ms step_avg:152.03ms
step:853/1480 train_time:128169ms step_avg:152.04ms
step:854/1480 train_time:128326ms step_avg:152.05ms
step:855/1480 train_time:128483ms step_avg:152.05ms
step:856/1480 train_time:128639ms step_avg:152.06ms
step:857/1480 train_time:128798ms step_avg:152.06ms
step:858/1480 train_time:128958ms step_avg:152.07ms
step:859/1480 train_time:129117ms step_avg:152.08ms
step:860/1480 train_time:129274ms step_avg:152.09ms
step:861/1480 train_time:129433ms step_avg:152.10ms
step:862/1480 train_time:129594ms step_avg:152.11ms
step:863/1480 train_time:129753ms step_avg:152.11ms
step:864/1480 train_time:129912ms step_avg:152.12ms
step:865/1480 train_time:130070ms step_avg:152.13ms
step:866/1480 train_time:130229ms step_avg:152.14ms
step:867/1480 train_time:130389ms step_avg:152.15ms
step:868/1480 train_time:130545ms step_avg:152.15ms
step:869/1480 train_time:130702ms step_avg:152.16ms
step:870/1480 train_time:130861ms step_avg:152.16ms
step:871/1480 train_time:131018ms step_avg:152.17ms
step:872/1480 train_time:131175ms step_avg:152.18ms
step:873/1480 train_time:131333ms step_avg:152.18ms
step:874/1480 train_time:131494ms step_avg:152.19ms
step:875/1480 train_time:131654ms step_avg:152.20ms
step:875/1480 val_loss:3.5081 train_time:131726ms step_avg:152.28ms
step:876/1480 train_time:131820ms step_avg:152.22ms
step:877/1480 train_time:131974ms step_avg:152.22ms
step:878/1480 train_time:132132ms step_avg:152.23ms
step:879/1480 train_time:132291ms step_avg:152.23ms
step:880/1480 train_time:132450ms step_avg:152.24ms
step:881/1480 train_time:132606ms step_avg:152.25ms
step:882/1480 train_time:132765ms step_avg:152.25ms
step:883/1480 train_time:132924ms step_avg:152.26ms
step:884/1480 train_time:133084ms step_avg:152.27ms
step:885/1480 train_time:133243ms step_avg:152.28ms
step:886/1480 train_time:133404ms step_avg:152.29ms
step:887/1480 train_time:133564ms step_avg:152.30ms
step:888/1480 train_time:133726ms step_avg:152.31ms
step:889/1480 train_time:133887ms step_avg:152.32ms
step:890/1480 train_time:134043ms step_avg:152.32ms
step:891/1480 train_time:134203ms step_avg:152.33ms
step:892/1480 train_time:134361ms step_avg:152.34ms
step:893/1480 train_time:134520ms step_avg:152.34ms
step:894/1480 train_time:134681ms step_avg:152.35ms
step:895/1480 train_time:134842ms step_avg:152.36ms
step:896/1480 train_time:135001ms step_avg:152.37ms
step:897/1480 train_time:135161ms step_avg:152.38ms
step:898/1480 train_time:135321ms step_avg:152.39ms
step:899/1480 train_time:135480ms step_avg:152.40ms
step:900/1480 train_time:135638ms step_avg:152.40ms
step:901/1480 train_time:135798ms step_avg:152.41ms
step:902/1480 train_time:135955ms step_avg:152.42ms
step:903/1480 train_time:136117ms step_avg:152.43ms
step:904/1480 train_time:136276ms step_avg:152.43ms
step:905/1480 train_time:136434ms step_avg:152.44ms
step:906/1480 train_time:136595ms step_avg:152.45ms
step:907/1480 train_time:136758ms step_avg:152.46ms
step:908/1480 train_time:136916ms step_avg:152.47ms
step:909/1480 train_time:137075ms step_avg:152.47ms
step:910/1480 train_time:137240ms step_avg:152.49ms
step:911/1480 train_time:137400ms step_avg:152.50ms
step:912/1480 train_time:137558ms step_avg:152.50ms
step:913/1480 train_time:137721ms step_avg:152.52ms
step:914/1480 train_time:137881ms step_avg:152.52ms
step:915/1480 train_time:138042ms step_avg:152.53ms
step:916/1480 train_time:138202ms step_avg:152.54ms
step:917/1480 train_time:138359ms step_avg:152.55ms
step:918/1480 train_time:138522ms step_avg:152.56ms
step:919/1480 train_time:138683ms step_avg:152.57ms
step:920/1480 train_time:138841ms step_avg:152.57ms
step:921/1480 train_time:139000ms step_avg:152.58ms
step:922/1480 train_time:139160ms step_avg:152.59ms
step:923/1480 train_time:139319ms step_avg:152.59ms
step:924/1480 train_time:139477ms step_avg:152.60ms
step:925/1480 train_time:139637ms step_avg:152.61ms
step:926/1480 train_time:139796ms step_avg:152.62ms
step:927/1480 train_time:139955ms step_avg:152.62ms
step:928/1480 train_time:140115ms step_avg:152.63ms
step:929/1480 train_time:140275ms step_avg:152.64ms
step:930/1480 train_time:140434ms step_avg:152.65ms
step:931/1480 train_time:140593ms step_avg:152.65ms
step:932/1480 train_time:140753ms step_avg:152.66ms
step:933/1480 train_time:140912ms step_avg:152.67ms
step:934/1480 train_time:141072ms step_avg:152.68ms
step:935/1480 train_time:141232ms step_avg:152.68ms
step:936/1480 train_time:141392ms step_avg:152.69ms
step:937/1480 train_time:141552ms step_avg:152.70ms
step:938/1480 train_time:141710ms step_avg:152.70ms
step:939/1480 train_time:141871ms step_avg:152.71ms
step:940/1480 train_time:142033ms step_avg:152.72ms
step:941/1480 train_time:142191ms step_avg:152.73ms
step:942/1480 train_time:142350ms step_avg:152.74ms
step:943/1480 train_time:142510ms step_avg:152.74ms
step:944/1480 train_time:142674ms step_avg:152.76ms
step:945/1480 train_time:142832ms step_avg:152.76ms
step:946/1480 train_time:142995ms step_avg:152.77ms
step:947/1480 train_time:143157ms step_avg:152.78ms
step:948/1480 train_time:143317ms step_avg:152.79ms
step:949/1480 train_time:143484ms step_avg:152.80ms
step:950/1480 train_time:143636ms step_avg:152.80ms
step:951/1480 train_time:143798ms step_avg:152.81ms
step:952/1480 train_time:143957ms step_avg:152.82ms
step:953/1480 train_time:144117ms step_avg:152.83ms
step:954/1480 train_time:144278ms step_avg:152.84ms
step:955/1480 train_time:144436ms step_avg:152.84ms
step:956/1480 train_time:144596ms step_avg:152.85ms
step:957/1480 train_time:144757ms step_avg:152.86ms
step:958/1480 train_time:144922ms step_avg:152.87ms
step:959/1480 train_time:145081ms step_avg:152.88ms
step:960/1480 train_time:145241ms step_avg:152.89ms
step:961/1480 train_time:145400ms step_avg:152.89ms
step:962/1480 train_time:145559ms step_avg:152.90ms
step:963/1480 train_time:145721ms step_avg:152.91ms
step:964/1480 train_time:145882ms step_avg:152.92ms
step:965/1480 train_time:146040ms step_avg:152.92ms
step:966/1480 train_time:146199ms step_avg:152.93ms
step:967/1480 train_time:146356ms step_avg:152.93ms
step:968/1480 train_time:146516ms step_avg:152.94ms
step:969/1480 train_time:146676ms step_avg:152.95ms
step:970/1480 train_time:146834ms step_avg:152.95ms
step:971/1480 train_time:146993ms step_avg:152.96ms
step:972/1480 train_time:147153ms step_avg:152.97ms
step:973/1480 train_time:147312ms step_avg:152.97ms
step:974/1480 train_time:147472ms step_avg:152.98ms
step:975/1480 train_time:147633ms step_avg:152.99ms
step:976/1480 train_time:147794ms step_avg:153.00ms
step:977/1480 train_time:147953ms step_avg:153.00ms
step:978/1480 train_time:148114ms step_avg:153.01ms
step:979/1480 train_time:148275ms step_avg:153.02ms
step:980/1480 train_time:148434ms step_avg:153.02ms
step:981/1480 train_time:148598ms step_avg:153.04ms
step:982/1480 train_time:148755ms step_avg:153.04ms
step:983/1480 train_time:148916ms step_avg:153.05ms
step:984/1480 train_time:149076ms step_avg:153.06ms
step:985/1480 train_time:149236ms step_avg:153.06ms
step:986/1480 train_time:149397ms step_avg:153.07ms
step:987/1480 train_time:149556ms step_avg:153.08ms
step:988/1480 train_time:149715ms step_avg:153.08ms
step:989/1480 train_time:149875ms step_avg:153.09ms
step:990/1480 train_time:150037ms step_avg:153.10ms
step:991/1480 train_time:150199ms step_avg:153.11ms
step:992/1480 train_time:150363ms step_avg:153.12ms
step:993/1480 train_time:150530ms step_avg:153.13ms
step:994/1480 train_time:150690ms step_avg:153.14ms
step:995/1480 train_time:150848ms step_avg:153.15ms
step:996/1480 train_time:151005ms step_avg:153.15ms
step:997/1480 train_time:151163ms step_avg:153.15ms
step:998/1480 train_time:151322ms step_avg:153.16ms
step:999/1480 train_time:151482ms step_avg:153.17ms
step:1000/1480 train_time:151641ms step_avg:153.17ms
step:1000/1480 val_loss:3.4451 train_time:151715ms step_avg:153.25ms
step:1001/1480 train_time:151805ms step_avg:153.18ms
step:1002/1480 train_time:151965ms step_avg:153.19ms
step:1003/1480 train_time:152127ms step_avg:153.20ms
step:1004/1480 train_time:152289ms step_avg:153.21ms
step:1005/1480 train_time:152450ms step_avg:153.22ms
step:1006/1480 train_time:152610ms step_avg:153.22ms
step:1007/1480 train_time:152769ms step_avg:153.23ms
step:1008/1480 train_time:152928ms step_avg:153.23ms
step:1009/1480 train_time:153095ms step_avg:153.25ms
step:1010/1480 train_time:153256ms step_avg:153.26ms
step:1011/1480 train_time:153416ms step_avg:153.26ms
step:1012/1480 train_time:153575ms step_avg:153.27ms
step:1013/1480 train_time:153737ms step_avg:153.28ms
step:1014/1480 train_time:153897ms step_avg:153.28ms
step:1015/1480 train_time:154061ms step_avg:153.29ms
step:1016/1480 train_time:154221ms step_avg:153.30ms
step:1017/1480 train_time:154382ms step_avg:153.31ms
step:1018/1480 train_time:154543ms step_avg:153.32ms
step:1019/1480 train_time:154704ms step_avg:153.32ms
step:1020/1480 train_time:154865ms step_avg:153.33ms
step:1021/1480 train_time:155024ms step_avg:153.34ms
step:1022/1480 train_time:155184ms step_avg:153.34ms
step:1023/1480 train_time:155345ms step_avg:153.35ms
step:1024/1480 train_time:155505ms step_avg:153.36ms
step:1025/1480 train_time:155667ms step_avg:153.37ms
step:1026/1480 train_time:155825ms step_avg:153.37ms
step:1027/1480 train_time:155984ms step_avg:153.38ms
step:1028/1480 train_time:156146ms step_avg:153.38ms
step:1029/1480 train_time:156308ms step_avg:153.39ms
step:1030/1480 train_time:156468ms step_avg:153.40ms
step:1031/1480 train_time:156626ms step_avg:153.40ms
step:1032/1480 train_time:156791ms step_avg:153.42ms
step:1033/1480 train_time:156950ms step_avg:153.42ms
step:1034/1480 train_time:157112ms step_avg:153.43ms
step:1035/1480 train_time:157271ms step_avg:153.44ms
step:1036/1480 train_time:157429ms step_avg:153.44ms
step:1037/1480 train_time:157589ms step_avg:153.45ms
step:1038/1480 train_time:157748ms step_avg:153.45ms
step:1039/1480 train_time:157908ms step_avg:153.46ms
step:1040/1480 train_time:158068ms step_avg:153.46ms
step:1041/1480 train_time:158229ms step_avg:153.47ms
step:1042/1480 train_time:158387ms step_avg:153.48ms
step:1043/1480 train_time:158545ms step_avg:153.48ms
step:1044/1480 train_time:158705ms step_avg:153.49ms
step:1045/1480 train_time:158866ms step_avg:153.49ms
step:1046/1480 train_time:159025ms step_avg:153.50ms
step:1047/1480 train_time:159186ms step_avg:153.51ms
step:1048/1480 train_time:159348ms step_avg:153.51ms
step:1049/1480 train_time:159508ms step_avg:153.52ms
step:1050/1480 train_time:159670ms step_avg:153.53ms
step:1051/1480 train_time:159834ms step_avg:153.54ms
step:1052/1480 train_time:159992ms step_avg:153.54ms
step:1053/1480 train_time:160153ms step_avg:153.55ms
step:1054/1480 train_time:160313ms step_avg:153.56ms
step:1055/1480 train_time:160473ms step_avg:153.56ms
step:1056/1480 train_time:160631ms step_avg:153.57ms
step:1057/1480 train_time:160790ms step_avg:153.57ms
step:1058/1480 train_time:160952ms step_avg:153.58ms
step:1059/1480 train_time:161115ms step_avg:153.59ms
step:1060/1480 train_time:161277ms step_avg:153.60ms
step:1061/1480 train_time:161435ms step_avg:153.60ms
step:1062/1480 train_time:161594ms step_avg:153.61ms
step:1063/1480 train_time:161754ms step_avg:153.61ms
step:1064/1480 train_time:161914ms step_avg:153.62ms
step:1065/1480 train_time:162075ms step_avg:153.63ms
step:1066/1480 train_time:162237ms step_avg:153.63ms
step:1067/1480 train_time:162401ms step_avg:153.64ms
step:1068/1480 train_time:162562ms step_avg:153.65ms
step:1069/1480 train_time:162725ms step_avg:153.66ms
step:1070/1480 train_time:162885ms step_avg:153.66ms
step:1071/1480 train_time:163047ms step_avg:153.67ms
step:1072/1480 train_time:163206ms step_avg:153.68ms
step:1073/1480 train_time:163366ms step_avg:153.68ms
step:1074/1480 train_time:163525ms step_avg:153.69ms
step:1075/1480 train_time:163687ms step_avg:153.70ms
step:1076/1480 train_time:163846ms step_avg:153.70ms
step:1077/1480 train_time:164005ms step_avg:153.71ms
step:1078/1480 train_time:164170ms step_avg:153.72ms
step:1079/1480 train_time:164333ms step_avg:153.73ms
step:1080/1480 train_time:164493ms step_avg:153.73ms
step:1081/1480 train_time:164653ms step_avg:153.74ms
step:1082/1480 train_time:164814ms step_avg:153.74ms
step:1083/1480 train_time:164974ms step_avg:153.75ms
step:1084/1480 train_time:165135ms step_avg:153.76ms
step:1085/1480 train_time:165295ms step_avg:153.76ms
step:1086/1480 train_time:165457ms step_avg:153.77ms
step:1087/1480 train_time:165617ms step_avg:153.78ms
step:1088/1480 train_time:165779ms step_avg:153.78ms
step:1089/1480 train_time:165943ms step_avg:153.79ms
step:1090/1480 train_time:166106ms step_avg:153.80ms
step:1091/1480 train_time:166267ms step_avg:153.81ms
step:1092/1480 train_time:166429ms step_avg:153.82ms
step:1093/1480 train_time:166589ms step_avg:153.82ms
step:1094/1480 train_time:166749ms step_avg:153.83ms
step:1095/1480 train_time:166908ms step_avg:153.83ms
step:1096/1480 train_time:167070ms step_avg:153.84ms
step:1097/1480 train_time:167231ms step_avg:153.85ms
step:1098/1480 train_time:167393ms step_avg:153.85ms
step:1099/1480 train_time:167556ms step_avg:153.86ms
step:1100/1480 train_time:167721ms step_avg:153.87ms
step:1101/1480 train_time:167885ms step_avg:153.88ms
step:1102/1480 train_time:168047ms step_avg:153.89ms
step:1103/1480 train_time:168212ms step_avg:153.90ms
step:1104/1480 train_time:168372ms step_avg:153.91ms
step:1105/1480 train_time:168534ms step_avg:153.91ms
step:1106/1480 train_time:168695ms step_avg:153.92ms
step:1107/1480 train_time:168857ms step_avg:153.93ms
step:1108/1480 train_time:169019ms step_avg:153.93ms
step:1109/1480 train_time:169180ms step_avg:153.94ms
step:1110/1480 train_time:169340ms step_avg:153.95ms
step:1111/1480 train_time:169501ms step_avg:153.95ms
step:1112/1480 train_time:169664ms step_avg:153.96ms
step:1113/1480 train_time:169833ms step_avg:153.97ms
step:1114/1480 train_time:169996ms step_avg:153.98ms
step:1115/1480 train_time:170160ms step_avg:153.99ms
step:1116/1480 train_time:170321ms step_avg:154.00ms
step:1117/1480 train_time:170484ms step_avg:154.01ms
step:1118/1480 train_time:170649ms step_avg:154.02ms
step:1119/1480 train_time:170809ms step_avg:154.02ms
step:1120/1480 train_time:170970ms step_avg:154.03ms
step:1121/1480 train_time:171131ms step_avg:154.03ms
step:1122/1480 train_time:171290ms step_avg:154.04ms
step:1123/1480 train_time:171449ms step_avg:154.04ms
step:1124/1480 train_time:171611ms step_avg:154.05ms
step:1125/1480 train_time:171772ms step_avg:154.06ms
step:1125/1480 val_loss:3.3894 train_time:171847ms step_avg:154.12ms
step:1126/1480 train_time:171938ms step_avg:154.07ms
step:1127/1480 train_time:172102ms step_avg:154.07ms
step:1128/1480 train_time:172262ms step_avg:154.08ms
step:1129/1480 train_time:172426ms step_avg:154.09ms
step:1130/1480 train_time:172586ms step_avg:154.09ms
step:1131/1480 train_time:172752ms step_avg:154.11ms
step:1132/1480 train_time:172911ms step_avg:154.11ms
step:1133/1480 train_time:173074ms step_avg:154.12ms
step:1134/1480 train_time:173237ms step_avg:154.13ms
step:1135/1480 train_time:173398ms step_avg:154.13ms
step:1136/1480 train_time:173562ms step_avg:154.14ms
step:1137/1480 train_time:173722ms step_avg:154.15ms
step:1138/1480 train_time:173887ms step_avg:154.15ms
step:1139/1480 train_time:174055ms step_avg:154.17ms
step:1140/1480 train_time:174209ms step_avg:154.17ms
step:1141/1480 train_time:174373ms step_avg:154.18ms
step:1142/1480 train_time:174533ms step_avg:154.18ms
step:1143/1480 train_time:174698ms step_avg:154.19ms
step:1144/1480 train_time:174860ms step_avg:154.20ms
step:1145/1480 train_time:175020ms step_avg:154.20ms
step:1146/1480 train_time:175183ms step_avg:154.21ms
step:1147/1480 train_time:175345ms step_avg:154.22ms
step:1148/1480 train_time:175505ms step_avg:154.22ms
step:1149/1480 train_time:175667ms step_avg:154.23ms
step:1150/1480 train_time:175827ms step_avg:154.23ms
step:1151/1480 train_time:175990ms step_avg:154.24ms
step:1152/1480 train_time:176153ms step_avg:154.25ms
step:1153/1480 train_time:176317ms step_avg:154.26ms
step:1154/1480 train_time:176479ms step_avg:154.26ms
step:1155/1480 train_time:176642ms step_avg:154.27ms
step:1156/1480 train_time:176808ms step_avg:154.28ms
step:1157/1480 train_time:176971ms step_avg:154.29ms
step:1158/1480 train_time:177130ms step_avg:154.29ms
step:1159/1480 train_time:177290ms step_avg:154.30ms
step:1160/1480 train_time:177449ms step_avg:154.30ms
step:1161/1480 train_time:177613ms step_avg:154.31ms
step:1162/1480 train_time:177776ms step_avg:154.32ms
step:1163/1480 train_time:177940ms step_avg:154.33ms
step:1164/1480 train_time:178104ms step_avg:154.34ms
step:1165/1480 train_time:178263ms step_avg:154.34ms
step:1166/1480 train_time:178426ms step_avg:154.35ms
step:1167/1480 train_time:178584ms step_avg:154.35ms
step:1168/1480 train_time:178747ms step_avg:154.36ms
step:1169/1480 train_time:178908ms step_avg:154.36ms
step:1170/1480 train_time:179068ms step_avg:154.37ms
step:1171/1480 train_time:179231ms step_avg:154.38ms
step:1172/1480 train_time:179390ms step_avg:154.38ms
step:1173/1480 train_time:179552ms step_avg:154.39ms
step:1174/1480 train_time:179723ms step_avg:154.40ms
step:1175/1480 train_time:179885ms step_avg:154.41ms
step:1176/1480 train_time:180049ms step_avg:154.42ms
step:1177/1480 train_time:180215ms step_avg:154.43ms
step:1178/1480 train_time:180375ms step_avg:154.43ms
step:1179/1480 train_time:180533ms step_avg:154.43ms
step:1180/1480 train_time:180703ms step_avg:154.45ms
step:1181/1480 train_time:180867ms step_avg:154.46ms
step:1182/1480 train_time:181028ms step_avg:154.46ms
step:1183/1480 train_time:181189ms step_avg:154.47ms
step:1184/1480 train_time:181350ms step_avg:154.47ms
step:1185/1480 train_time:181513ms step_avg:154.48ms
step:1186/1480 train_time:181675ms step_avg:154.49ms
step:1187/1480 train_time:181849ms step_avg:154.50ms
step:1188/1480 train_time:182008ms step_avg:154.51ms
step:1189/1480 train_time:182169ms step_avg:154.51ms
step:1190/1480 train_time:182331ms step_avg:154.52ms
step:1191/1480 train_time:182494ms step_avg:154.52ms
step:1192/1480 train_time:182654ms step_avg:154.53ms
step:1193/1480 train_time:182814ms step_avg:154.53ms
step:1194/1480 train_time:182977ms step_avg:154.54ms
step:1195/1480 train_time:183140ms step_avg:154.55ms
step:1196/1480 train_time:183309ms step_avg:154.56ms
step:1197/1480 train_time:183471ms step_avg:154.57ms
step:1198/1480 train_time:183642ms step_avg:154.58ms
step:1199/1480 train_time:183805ms step_avg:154.59ms
step:1200/1480 train_time:183966ms step_avg:154.59ms
step:1201/1480 train_time:184126ms step_avg:154.60ms
step:1202/1480 train_time:184296ms step_avg:154.61ms
step:1203/1480 train_time:184462ms step_avg:154.62ms
step:1204/1480 train_time:184626ms step_avg:154.63ms
step:1205/1480 train_time:184787ms step_avg:154.63ms
step:1206/1480 train_time:184948ms step_avg:154.64ms
step:1207/1480 train_time:185108ms step_avg:154.64ms
step:1208/1480 train_time:185269ms step_avg:154.65ms
step:1209/1480 train_time:185432ms step_avg:154.66ms
step:1210/1480 train_time:185598ms step_avg:154.67ms
step:1211/1480 train_time:185762ms step_avg:154.67ms
step:1212/1480 train_time:185924ms step_avg:154.68ms
step:1213/1480 train_time:186088ms step_avg:154.69ms
step:1214/1480 train_time:186252ms step_avg:154.69ms
step:1215/1480 train_time:186419ms step_avg:154.70ms
step:1216/1480 train_time:186580ms step_avg:154.71ms
step:1217/1480 train_time:186743ms step_avg:154.72ms
step:1218/1480 train_time:186905ms step_avg:154.72ms
step:1219/1480 train_time:187071ms step_avg:154.73ms
step:1220/1480 train_time:187233ms step_avg:154.74ms
step:1221/1480 train_time:187395ms step_avg:154.74ms
step:1222/1480 train_time:187555ms step_avg:154.75ms
step:1223/1480 train_time:187718ms step_avg:154.76ms
step:1224/1480 train_time:187884ms step_avg:154.76ms
step:1225/1480 train_time:188047ms step_avg:154.77ms
step:1226/1480 train_time:188213ms step_avg:154.78ms
step:1227/1480 train_time:188377ms step_avg:154.79ms
step:1228/1480 train_time:188540ms step_avg:154.79ms
step:1229/1480 train_time:188704ms step_avg:154.80ms
step:1230/1480 train_time:188872ms step_avg:154.81ms
step:1231/1480 train_time:189038ms step_avg:154.82ms
step:1232/1480 train_time:189204ms step_avg:154.83ms
step:1233/1480 train_time:189365ms step_avg:154.84ms
step:1234/1480 train_time:189526ms step_avg:154.84ms
step:1235/1480 train_time:189691ms step_avg:154.85ms
step:1236/1480 train_time:189851ms step_avg:154.85ms
step:1237/1480 train_time:190014ms step_avg:154.86ms
step:1238/1480 train_time:190189ms step_avg:154.88ms
step:1239/1480 train_time:190351ms step_avg:154.88ms
step:1240/1480 train_time:190513ms step_avg:154.89ms
step:1241/1480 train_time:190680ms step_avg:154.90ms
step:1242/1480 train_time:190842ms step_avg:154.90ms
step:1243/1480 train_time:191008ms step_avg:154.91ms
step:1244/1480 train_time:191168ms step_avg:154.92ms
step:1245/1480 train_time:191330ms step_avg:154.92ms
step:1246/1480 train_time:191491ms step_avg:154.93ms
step:1247/1480 train_time:191653ms step_avg:154.93ms
step:1248/1480 train_time:191815ms step_avg:154.94ms
step:1249/1480 train_time:191977ms step_avg:154.95ms
step:1250/1480 train_time:192139ms step_avg:154.95ms
step:1250/1480 val_loss:3.3397 train_time:192214ms step_avg:155.01ms
step:1251/1480 train_time:192308ms step_avg:154.96ms
step:1252/1480 train_time:192471ms step_avg:154.97ms
step:1253/1480 train_time:192631ms step_avg:154.97ms
step:1254/1480 train_time:192793ms step_avg:154.98ms
step:1255/1480 train_time:192964ms step_avg:154.99ms
step:1256/1480 train_time:193127ms step_avg:155.00ms
step:1257/1480 train_time:193290ms step_avg:155.00ms
step:1258/1480 train_time:193456ms step_avg:155.01ms
step:1259/1480 train_time:193619ms step_avg:155.02ms
step:1260/1480 train_time:193779ms step_avg:155.02ms
step:1261/1480 train_time:193941ms step_avg:155.03ms
step:1262/1480 train_time:194105ms step_avg:155.04ms
step:1263/1480 train_time:194272ms step_avg:155.05ms
step:1264/1480 train_time:194432ms step_avg:155.05ms
step:1265/1480 train_time:194593ms step_avg:155.05ms
step:1266/1480 train_time:194756ms step_avg:155.06ms
step:1267/1480 train_time:194917ms step_avg:155.07ms
step:1268/1480 train_time:195079ms step_avg:155.07ms
step:1269/1480 train_time:195244ms step_avg:155.08ms
step:1270/1480 train_time:195407ms step_avg:155.08ms
step:1271/1480 train_time:195571ms step_avg:155.09ms
step:1272/1480 train_time:195732ms step_avg:155.10ms
step:1273/1480 train_time:195896ms step_avg:155.10ms
step:1274/1480 train_time:196061ms step_avg:155.11ms
step:1275/1480 train_time:196221ms step_avg:155.12ms
step:1276/1480 train_time:196380ms step_avg:155.12ms
step:1277/1480 train_time:196542ms step_avg:155.12ms
step:1278/1480 train_time:196702ms step_avg:155.13ms
step:1279/1480 train_time:196867ms step_avg:155.14ms
step:1280/1480 train_time:197033ms step_avg:155.14ms
step:1281/1480 train_time:197197ms step_avg:155.15ms
step:1282/1480 train_time:197356ms step_avg:155.15ms
step:1283/1480 train_time:197519ms step_avg:155.16ms
step:1284/1480 train_time:197683ms step_avg:155.17ms
step:1285/1480 train_time:197844ms step_avg:155.17ms
step:1286/1480 train_time:198005ms step_avg:155.18ms
step:1287/1480 train_time:198169ms step_avg:155.18ms
step:1288/1480 train_time:198333ms step_avg:155.19ms
step:1289/1480 train_time:198501ms step_avg:155.20ms
step:1290/1480 train_time:198670ms step_avg:155.21ms
step:1291/1480 train_time:198835ms step_avg:155.22ms
step:1292/1480 train_time:198998ms step_avg:155.22ms
step:1293/1480 train_time:199163ms step_avg:155.23ms
step:1294/1480 train_time:199325ms step_avg:155.24ms
step:1295/1480 train_time:199489ms step_avg:155.24ms
step:1296/1480 train_time:199652ms step_avg:155.25ms
step:1297/1480 train_time:199815ms step_avg:155.26ms
step:1298/1480 train_time:199978ms step_avg:155.26ms
step:1299/1480 train_time:200140ms step_avg:155.27ms
step:1300/1480 train_time:200301ms step_avg:155.27ms
step:1301/1480 train_time:200462ms step_avg:155.28ms
step:1302/1480 train_time:200627ms step_avg:155.28ms
step:1303/1480 train_time:200796ms step_avg:155.29ms
step:1304/1480 train_time:200960ms step_avg:155.30ms
step:1305/1480 train_time:201121ms step_avg:155.31ms
step:1306/1480 train_time:201285ms step_avg:155.31ms
step:1307/1480 train_time:201448ms step_avg:155.32ms
step:1308/1480 train_time:201610ms step_avg:155.32ms
step:1309/1480 train_time:201776ms step_avg:155.33ms
step:1310/1480 train_time:201938ms step_avg:155.34ms
step:1311/1480 train_time:202099ms step_avg:155.34ms
step:1312/1480 train_time:202264ms step_avg:155.35ms
step:1313/1480 train_time:202427ms step_avg:155.35ms
step:1314/1480 train_time:202591ms step_avg:155.36ms
step:1315/1480 train_time:202756ms step_avg:155.37ms
step:1316/1480 train_time:202916ms step_avg:155.37ms
step:1317/1480 train_time:203077ms step_avg:155.38ms
step:1318/1480 train_time:203243ms step_avg:155.38ms
step:1319/1480 train_time:203409ms step_avg:155.39ms
step:1320/1480 train_time:203577ms step_avg:155.40ms
step:1321/1480 train_time:203740ms step_avg:155.41ms
step:1322/1480 train_time:203908ms step_avg:155.42ms
step:1323/1480 train_time:204073ms step_avg:155.43ms
step:1324/1480 train_time:204237ms step_avg:155.43ms
step:1325/1480 train_time:204406ms step_avg:155.44ms
step:1326/1480 train_time:204574ms step_avg:155.45ms
step:1327/1480 train_time:204737ms step_avg:155.46ms
step:1328/1480 train_time:204900ms step_avg:155.46ms
step:1329/1480 train_time:205082ms step_avg:155.48ms
step:1330/1480 train_time:205248ms step_avg:155.49ms
step:1331/1480 train_time:205412ms step_avg:155.50ms
step:1332/1480 train_time:205576ms step_avg:155.50ms
step:1333/1480 train_time:205740ms step_avg:155.51ms
step:1334/1480 train_time:205903ms step_avg:155.52ms
step:1335/1480 train_time:206063ms step_avg:155.52ms
step:1336/1480 train_time:206233ms step_avg:155.53ms
step:1337/1480 train_time:206399ms step_avg:155.54ms
step:1338/1480 train_time:206563ms step_avg:155.54ms
step:1339/1480 train_time:206727ms step_avg:155.55ms
step:1340/1480 train_time:206891ms step_avg:155.56ms
step:1341/1480 train_time:207053ms step_avg:155.56ms
step:1342/1480 train_time:207218ms step_avg:155.57ms
step:1343/1480 train_time:207379ms step_avg:155.57ms
step:1344/1480 train_time:207542ms step_avg:155.58ms
step:1345/1480 train_time:207711ms step_avg:155.59ms
step:1346/1480 train_time:207875ms step_avg:155.59ms
step:1347/1480 train_time:208037ms step_avg:155.60ms
step:1348/1480 train_time:208201ms step_avg:155.61ms
step:1349/1480 train_time:208364ms step_avg:155.61ms
step:1350/1480 train_time:208530ms step_avg:155.62ms
step:1351/1480 train_time:208694ms step_avg:155.63ms
step:1352/1480 train_time:208858ms step_avg:155.63ms
step:1353/1480 train_time:209023ms step_avg:155.64ms
step:1354/1480 train_time:209188ms step_avg:155.65ms
step:1355/1480 train_time:209350ms step_avg:155.65ms
step:1356/1480 train_time:209513ms step_avg:155.66ms
step:1357/1480 train_time:209679ms step_avg:155.66ms
step:1358/1480 train_time:209842ms step_avg:155.67ms
step:1359/1480 train_time:210007ms step_avg:155.68ms
step:1360/1480 train_time:210175ms step_avg:155.69ms
step:1361/1480 train_time:210341ms step_avg:155.69ms
step:1362/1480 train_time:210505ms step_avg:155.70ms
step:1363/1480 train_time:210675ms step_avg:155.71ms
step:1364/1480 train_time:210836ms step_avg:155.71ms
step:1365/1480 train_time:210998ms step_avg:155.72ms
step:1366/1480 train_time:211161ms step_avg:155.72ms
step:1367/1480 train_time:211324ms step_avg:155.73ms
step:1368/1480 train_time:211491ms step_avg:155.74ms
step:1369/1480 train_time:211660ms step_avg:155.75ms
step:1370/1480 train_time:211826ms step_avg:155.75ms
step:1371/1480 train_time:211988ms step_avg:155.76ms
step:1372/1480 train_time:212156ms step_avg:155.77ms
step:1373/1480 train_time:212316ms step_avg:155.77ms
step:1374/1480 train_time:212482ms step_avg:155.78ms
step:1375/1480 train_time:212644ms step_avg:155.78ms
step:1375/1480 val_loss:3.3006 train_time:212718ms step_avg:155.84ms
step:1376/1480 train_time:212810ms step_avg:155.79ms
step:1377/1480 train_time:212971ms step_avg:155.79ms
step:1378/1480 train_time:213132ms step_avg:155.80ms
step:1379/1480 train_time:213297ms step_avg:155.81ms
step:1380/1480 train_time:213463ms step_avg:155.81ms
step:1381/1480 train_time:213629ms step_avg:155.82ms
step:1382/1480 train_time:213793ms step_avg:155.83ms
step:1383/1480 train_time:213955ms step_avg:155.83ms
step:1384/1480 train_time:214123ms step_avg:155.84ms
step:1385/1480 train_time:214282ms step_avg:155.84ms
step:1386/1480 train_time:214447ms step_avg:155.85ms
step:1387/1480 train_time:214613ms step_avg:155.86ms
step:1388/1480 train_time:214773ms step_avg:155.86ms
step:1389/1480 train_time:214937ms step_avg:155.86ms
step:1390/1480 train_time:215100ms step_avg:155.87ms
step:1391/1480 train_time:215262ms step_avg:155.87ms
step:1392/1480 train_time:215426ms step_avg:155.88ms
step:1393/1480 train_time:215588ms step_avg:155.88ms
step:1394/1480 train_time:215750ms step_avg:155.89ms
step:1395/1480 train_time:215913ms step_avg:155.89ms
step:1396/1480 train_time:216076ms step_avg:155.90ms
step:1397/1480 train_time:216238ms step_avg:155.90ms
step:1398/1480 train_time:216401ms step_avg:155.91ms
step:1399/1480 train_time:216562ms step_avg:155.91ms
step:1400/1480 train_time:216729ms step_avg:155.92ms
step:1401/1480 train_time:216890ms step_avg:155.92ms
step:1402/1480 train_time:217052ms step_avg:155.93ms
step:1403/1480 train_time:217219ms step_avg:155.94ms
step:1404/1480 train_time:217383ms step_avg:155.94ms
step:1405/1480 train_time:217547ms step_avg:155.95ms
step:1406/1480 train_time:217712ms step_avg:155.95ms
step:1407/1480 train_time:217873ms step_avg:155.96ms
step:1408/1480 train_time:218035ms step_avg:155.96ms
step:1409/1480 train_time:218207ms step_avg:155.97ms
step:1410/1480 train_time:218370ms step_avg:155.98ms
step:1411/1480 train_time:218530ms step_avg:155.98ms
step:1412/1480 train_time:218692ms step_avg:155.99ms
step:1413/1480 train_time:218856ms step_avg:155.99ms
step:1414/1480 train_time:219020ms step_avg:156.00ms
step:1415/1480 train_time:219184ms step_avg:156.00ms
step:1416/1480 train_time:219359ms step_avg:156.02ms
step:1417/1480 train_time:219525ms step_avg:156.02ms
step:1418/1480 train_time:219688ms step_avg:156.03ms
step:1419/1480 train_time:219852ms step_avg:156.03ms
step:1420/1480 train_time:220017ms step_avg:156.04ms
step:1421/1480 train_time:220183ms step_avg:156.05ms
step:1422/1480 train_time:220347ms step_avg:156.05ms
step:1423/1480 train_time:220508ms step_avg:156.06ms
step:1424/1480 train_time:220674ms step_avg:156.06ms
step:1425/1480 train_time:220843ms step_avg:156.07ms
step:1426/1480 train_time:221006ms step_avg:156.08ms
step:1427/1480 train_time:221171ms step_avg:156.08ms
step:1428/1480 train_time:221333ms step_avg:156.09ms
step:1429/1480 train_time:221492ms step_avg:156.09ms
step:1430/1480 train_time:221657ms step_avg:156.10ms
step:1431/1480 train_time:221824ms step_avg:156.10ms
step:1432/1480 train_time:221990ms step_avg:156.11ms
step:1433/1480 train_time:222159ms step_avg:156.12ms
step:1434/1480 train_time:222328ms step_avg:156.13ms
step:1435/1480 train_time:222494ms step_avg:156.14ms
step:1436/1480 train_time:222659ms step_avg:156.14ms
step:1437/1480 train_time:222822ms step_avg:156.15ms
step:1438/1480 train_time:222982ms step_avg:156.15ms
step:1439/1480 train_time:223152ms step_avg:156.16ms
step:1440/1480 train_time:223315ms step_avg:156.16ms
step:1441/1480 train_time:223480ms step_avg:156.17ms
step:1442/1480 train_time:223646ms step_avg:156.18ms
step:1443/1480 train_time:223821ms step_avg:156.19ms
step:1444/1480 train_time:223985ms step_avg:156.20ms
step:1445/1480 train_time:224148ms step_avg:156.20ms
step:1446/1480 train_time:224315ms step_avg:156.21ms
step:1447/1480 train_time:224483ms step_avg:156.22ms
step:1448/1480 train_time:224647ms step_avg:156.22ms
step:1449/1480 train_time:224811ms step_avg:156.23ms
step:1450/1480 train_time:224975ms step_avg:156.23ms
step:1451/1480 train_time:225140ms step_avg:156.24ms
step:1452/1480 train_time:225305ms step_avg:156.24ms
step:1453/1480 train_time:225467ms step_avg:156.25ms
step:1454/1480 train_time:225630ms step_avg:156.25ms
step:1455/1480 train_time:225799ms step_avg:156.26ms
step:1456/1480 train_time:225962ms step_avg:156.27ms
step:1457/1480 train_time:226124ms step_avg:156.27ms
step:1458/1480 train_time:226287ms step_avg:156.28ms
step:1459/1480 train_time:226453ms step_avg:156.28ms
step:1460/1480 train_time:226617ms step_avg:156.29ms
step:1461/1480 train_time:226781ms step_avg:156.29ms
step:1462/1480 train_time:226945ms step_avg:156.30ms
step:1463/1480 train_time:227110ms step_avg:156.30ms
step:1464/1480 train_time:227276ms step_avg:156.31ms
step:1465/1480 train_time:227441ms step_avg:156.32ms
step:1466/1480 train_time:227604ms step_avg:156.32ms
step:1467/1480 train_time:227768ms step_avg:156.33ms
step:1468/1480 train_time:227930ms step_avg:156.33ms
step:1469/1480 train_time:228095ms step_avg:156.34ms
step:1470/1480 train_time:228263ms step_avg:156.34ms
step:1471/1480 train_time:228434ms step_avg:156.35ms
step:1472/1480 train_time:228605ms step_avg:156.36ms
step:1473/1480 train_time:228767ms step_avg:156.37ms
step:1474/1480 train_time:228933ms step_avg:156.37ms
step:1475/1480 train_time:229104ms step_avg:156.39ms
step:1476/1480 train_time:229266ms step_avg:156.39ms
step:1477/1480 train_time:229437ms step_avg:156.40ms
step:1478/1480 train_time:229607ms step_avg:156.41ms
step:1479/1480 train_time:229770ms step_avg:156.41ms
step:1480/1480 train_time:229934ms step_avg:156.42ms
step:1480/1480 val_loss:3.2813 train_time:230009ms step_avg:156.47ms
peak memory consumption: 34239 MiB
