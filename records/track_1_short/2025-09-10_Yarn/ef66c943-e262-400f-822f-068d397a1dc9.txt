import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
import uuid
import time
import copy
import glob
import math

from dataclasses import dataclass
from functools import lru_cache
from itertools import accumulate
from pathlib import Path

os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "expandable_segments:True"
import torch
torch.empty(1, device="cuda", requires_grad=True).backward() # prevents a bug on some systems
from torch import Tensor, nn
import torch.nn.functional as F
import torch.distributed as dist
#torch._inductor.config.coordinate_descent_tuning = True # we have banned this flag for new records because it causes compilation to take 30min
import numpy as np
import triton
import triton.language as tl
from flash_attn_interface import flash_attn_varlen_func
import torch._dynamo as dynamo
dynamo.config.recompile_limit = 64

# -----------------------------------------------------------------------------
# Custom operators: FP8 matmul by @YouJiacheng

@torch.library.custom_op("nanogpt::mm", mutates_args=())
def mm_op(x: Tensor, w: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor, Tensor]:
    @torch.compile
    def impl(x: Tensor, w: Tensor):
        assert x.is_contiguous() and w.is_contiguous()
        x_f8 = x.div(x_s).to(torch.float8_e4m3fn)
        w_f8 = w.div(w_s).to(torch.float8_e4m3fn)
        out = torch._scaled_mm(
            x_f8,
            w_f8.T,
            out_dtype=torch.bfloat16,
            scale_a=x.new_tensor(x_s, dtype=torch.float32),
            scale_b=x.new_tensor(w_s, dtype=torch.float32),
            use_fast_accum=True,
        )
        return out, x_f8, w_f8

    return impl(x, w)

@mm_op.register_fake
def _(x: Tensor, w: Tensor, *_):
    assert x.ndim == w.ndim == 2
    assert x.shape[1] == w.shape[1]
    assert x.device == w.device
    assert x.is_contiguous() and w.is_contiguous()
    return x @ w.T, x.to(torch.float8_e4m3fn), w.to(torch.float8_e4m3fn)

@torch.library.custom_op("nanogpt::mm_backward", mutates_args=())
def mm_backward_op(g: Tensor, x_f8: Tensor, w_f8: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor]:
    @torch.compile
    def impl(grad: Tensor, x_f8: Tensor, w_f8: Tensor):
        assert grad.is_contiguous()
        x_inv_s = grad.new_tensor(x_s, dtype=torch.float32)
        w_inv_s = grad.new_tensor(w_s, dtype=torch.float32)
        grad_inv_s = grad.new_tensor(grad_s, dtype=torch.float32)
        grad_f8 = grad.div(grad_s).to(torch.float8_e5m2)
        grad_x = torch._scaled_mm(
            grad_f8,
            w_f8.T.contiguous().T,
            out_dtype=torch.bfloat16,
            scale_a=grad_inv_s,
            scale_b=w_inv_s,
            use_fast_accum=False,
        )
        # faster than grad_f8_t @ x_f8, for (d_out, d_in) == (50304, 768)
        grad_w = torch._scaled_mm(
            x_f8.T.contiguous(),
            grad_f8.T.contiguous().T,
            out_dtype=torch.float32,
            scale_a=x_inv_s,
            scale_b=grad_inv_s,
            use_fast_accum=False,
        ).T
        return grad_x, grad_w

    return impl(g, x_f8, w_f8)

@mm_backward_op.register_fake
def _(g: Tensor, x_f8: Tensor, w_f8: Tensor, *_):
    return x_f8.to(torch.bfloat16), w_f8.T.contiguous().T.to(torch.float32)

def backward(ctx, grad_out: Tensor, *_):
    x_f8, w_f8 = ctx.saved_tensors
    x_s, w_s, grad_s = ctx.scales
    grad_x, grad_w = torch.ops.nanogpt.mm_backward(
        grad_out, x_f8, w_f8, x_s, w_s, grad_s
    )
    return grad_x, grad_w, None, None, None

def setup_context(ctx: torch.autograd.function.FunctionCtx, inputs, output):
    *_, x_s, w_s, grad_s = inputs
    _, x_f8, w_f8 = output
    ctx.save_for_backward(x_f8, w_f8)
    ctx.scales = x_s, w_s, grad_s
    ctx.set_materialize_grads(False)

mm_op.register_autograd(backward, setup_context=setup_context)

# -----------------------------------------------------------------------------
# Triton kernel for symmetric matrix multiplication by @byronxu99

def _get_autotune_configs():
    return [
        triton.Config(
            {
                "BLOCK_SIZE_M": bm,
                "BLOCK_SIZE_N": bn,
                "BLOCK_SIZE_K": bk,
                "GROUP_SIZE_M": 8,
                "LOWER_UPPER": 1,
            },
            num_stages=stages,
            num_warps=warps,
        )
        for bm in [64, 128]
        for bn in [64, 128, 256]
        for bk in [64, 128]
        for stages, warps in [(3, 4), (3, 8), (4, 4)]
        if bm // bn <= 2 and bn // bm <= 2
    ]

@triton.jit
def _pid_to_block(
    pid,
    M,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
):
    # Split output matrix into blocks of size (BLOCK_SIZE_M, BLOCK_SIZE_N)
    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)
    num_pid_n = tl.cdiv(M, BLOCK_SIZE_N)

    # Map PID to a single matrix in batch
    batch_idx = pid // (num_pid_m * num_pid_n)
    pid = pid % (num_pid_m * num_pid_n)

    # Map PID to 2D grid of blocks
    pid_m = pid // num_pid_n
    pid_n = pid % num_pid_n
    pid_m, pid_n = tl.swizzle2d(pid_m, pid_n, num_pid_m, num_pid_n, GROUP_SIZE_M)

    m_idx = pid_m * BLOCK_SIZE_M
    n_idx = pid_n * BLOCK_SIZE_N
    return batch_idx, m_idx, n_idx

@triton.autotune(
    configs=_get_autotune_configs(),
    key=["M", "K", "a_stride_r", "a_stride_c", "c_stride_r", "c_stride_c"],
)
@triton.jit
def ns_line_1_kernel(
    A_ptr, C_ptr,
    M, K,
    a_stride_b, a_stride_r, a_stride_c,
    c_stride_b, c_stride_r, c_stride_c,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    BLOCK_SIZE_K: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
    LOWER_UPPER: tl.constexpr,
):
    pid = tl.program_id(axis=0)
    batch_idx, m_idx, n_idx = _pid_to_block(
        pid, M, BLOCK_SIZE_M, BLOCK_SIZE_N, GROUP_SIZE_M
    )

    # Skip blocks that don't need to be computed
    skip_block_below_diag = (LOWER_UPPER == 0) and (n_idx + BLOCK_SIZE_N <= m_idx)
    skip_block_above_diag = (LOWER_UPPER != 0) and (m_idx + BLOCK_SIZE_M <= n_idx)
    if skip_block_below_diag or skip_block_above_diag:
        return

    # Index into one matrix of batch
    A_ptr += batch_idx * a_stride_b
    C_ptr += batch_idx * c_stride_b

    # Create pointer arrays for A and A.T
    offs_m = (m_idx + tl.arange(0, BLOCK_SIZE_M)) % M
    offs_n = (n_idx + tl.arange(0, BLOCK_SIZE_N)) % M
    offs_k = tl.arange(0, BLOCK_SIZE_K)
    a_ptrs = A_ptr + (offs_m[:, None] * a_stride_r + offs_k[None, :] * a_stride_c)
    at_ptrs = A_ptr + (offs_k[:, None] * a_stride_c + offs_n[None, :] * a_stride_r)

    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)

    # Accumulate over blocks of K
    for k in tl.range(0, tl.cdiv(K, BLOCK_SIZE_K)):
        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k * BLOCK_SIZE_K, other=0.0)
        at = tl.load(at_ptrs, mask=offs_k[:, None] < K - k * BLOCK_SIZE_K, other=0.0)
        accumulator = tl.dot(a, at, accumulator)
        a_ptrs += BLOCK_SIZE_K * a_stride_c
        at_ptrs += BLOCK_SIZE_K * a_stride_c

    out_dtype = C_ptr.dtype.element_ty
    output = accumulator.to(out_dtype)

    # Store block of C
    offs_cm = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_cn = n_idx + tl.arange(0, BLOCK_SIZE_N)
    c_ptrs = C_ptr + (offs_cm[:, None] * c_stride_r + offs_cn[None, :] * c_stride_c)
    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < M)
    tl.store(c_ptrs, output, mask=c_mask)

    # Store block of C mirrored across the diagonal
    c_ptrs_t = C_ptr + (offs_cn[:, None] * c_stride_r + offs_cm[None, :] * c_stride_c)
    c_mask_t = (offs_cn[:, None] < M) & (offs_cm[None, :] < M)
    tl.store(c_ptrs_t, output.T, mask=c_mask_t)

def ns_line_1(A: torch.Tensor, out: torch.Tensor):
    """
    Launch Triton kernel to compute C = A @ A.T
    """
    assert A.ndim == 2 or A.ndim == 3
    M, K = A.shape[-2:]
    assert out.size(-2) == M, "Output matrix has incorrect shape"
    assert out.size(-1) == M, "Output matrix has incorrect shape"

    batch_size = A.size(0) if A.ndim == 3 else 1
    input_batch_stride = A.stride(0) if A.ndim == 3 else 0
    output_batch_stride = out.stride(0) if out.ndim == 3 else 0

    grid = lambda meta: (
        batch_size * triton.cdiv(M, meta["BLOCK_SIZE_M"]) * triton.cdiv(M, meta["BLOCK_SIZE_N"]),
    )
    ns_line_1_kernel[grid](
        A_ptr=A,
        C_ptr=out,
        M=M,
        K=K,
        a_stride_b=input_batch_stride,
        a_stride_r=A.stride(-2),
        a_stride_c=A.stride(-1),
        c_stride_b=output_batch_stride,
        c_stride_r=out.stride(-2),
        c_stride_c=out.stride(-1),
    )
    return out

@triton.autotune(
    configs=_get_autotune_configs(),
    key=["M", "a_stride_r", "a_stride_c", "c_stride_r", "c_stride_c"],
)
@triton.jit
def ns_line_2_kernel(
    A_ptr, C_ptr,
    M,
    a_stride_b, a_stride_r, a_stride_c,
    c_stride_b, c_stride_r, c_stride_c,
    alpha, beta,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    BLOCK_SIZE_K: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
    LOWER_UPPER: tl.constexpr,
):
    # This is mostly duplicated from ns_line_1_kernel, but also loads and adds a block of A
    # Performance is slightly slower than ns_line_1_kernel, so we use two separate kernels
    pid = tl.program_id(axis=0)
    batch_idx, m_idx, n_idx = _pid_to_block(
        pid, M, BLOCK_SIZE_M, BLOCK_SIZE_N, GROUP_SIZE_M
    )

    # Skip blocks that don't need to be computed
    skip_block_below_diag = (LOWER_UPPER == 0) and (n_idx + BLOCK_SIZE_N <= m_idx)
    skip_block_above_diag = (LOWER_UPPER != 0) and (m_idx + BLOCK_SIZE_M <= n_idx)
    if skip_block_below_diag or skip_block_above_diag:
        return

    # Index into one matrix of batch
    A_ptr += batch_idx * a_stride_b
    C_ptr += batch_idx * c_stride_b

    # Create pointer arrays for A and A.T
    offs_m = (m_idx + tl.arange(0, BLOCK_SIZE_M)) % M
    offs_n = (n_idx + tl.arange(0, BLOCK_SIZE_N)) % M
    offs_k = tl.arange(0, BLOCK_SIZE_K)
    a_ptrs = A_ptr + (offs_m[:, None] * a_stride_r + offs_k[None, :] * a_stride_c)
    at_ptrs = A_ptr + (offs_k[:, None] * a_stride_c + offs_n[None, :] * a_stride_r)

    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)

    # Accumulate over blocks of K
    for k in tl.range(0, tl.cdiv(M, BLOCK_SIZE_K)):
        a = tl.load(a_ptrs, mask=offs_k[None, :] < M - k * BLOCK_SIZE_K, other=0.0)
        at = tl.load(at_ptrs, mask=offs_k[:, None] < M - k * BLOCK_SIZE_K, other=0.0)
        accumulator = tl.dot(a, at, accumulator)
        a_ptrs += BLOCK_SIZE_K * a_stride_c
        at_ptrs += BLOCK_SIZE_K * a_stride_c

    # Load block of A to add (corresponds to the current block of C)
    offs_am = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_an = n_idx + tl.arange(0, BLOCK_SIZE_N)
    a_add_ptrs = A_ptr + (offs_am[:, None] * a_stride_r + offs_an[None, :] * a_stride_c)
    a_add_mask = (offs_am[:, None] < M) & (offs_an[None, :] < M)
    a_add = tl.load(a_add_ptrs, mask=a_add_mask, other=0.0).to(tl.float32)

    # Apply alpha and beta
    accumulator *= alpha
    accumulator += a_add * beta

    out_dtype = C_ptr.dtype.element_ty
    output = accumulator.to(out_dtype)

    # Store block of C
    offs_cm = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_cn = n_idx + tl.arange(0, BLOCK_SIZE_N)
    c_ptrs = C_ptr + (offs_cm[:, None] * c_stride_r + offs_cn[None, :] * c_stride_c)
    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < M)
    tl.store(c_ptrs, output, mask=c_mask)

    # Store block of C mirrored across the diagonal
    c_ptrs_t = C_ptr + (offs_cn[:, None] * c_stride_r + offs_cm[None, :] * c_stride_c)
    c_mask_t = (offs_cn[:, None] < M) & (offs_cm[None, :] < M)
    tl.store(c_ptrs_t, output.T, mask=c_mask_t)

def ns_line_2(A: torch.Tensor, alpha: float, beta: float, out: torch.Tensor):
    """
    Launch Triton kernel to compute C = alpha * A @ A.T + beta * A
    """
    assert A.ndim == 2 or A.ndim == 3
    M, K = A.shape[-2:]
    assert M == K, "Input matrix must be square"
    assert out.size(-2) == M
    assert out.size(-1) == M

    batch_size = A.size(0) if A.ndim == 3 else 1
    input_batch_stride = A.stride(0) if A.ndim == 3 else 0
    output_batch_stride = out.stride(0) if out.ndim == 3 else 0

    grid = lambda meta: (
        batch_size * triton.cdiv(M, meta["BLOCK_SIZE_M"]) * triton.cdiv(M, meta["BLOCK_SIZE_N"]),
    )
    ns_line_2_kernel[grid](
        A_ptr=A,
        C_ptr=out,
        M=M,
        a_stride_b=input_batch_stride,
        a_stride_r=A.stride(-2),
        a_stride_c=A.stride(-1),
        c_stride_b=output_batch_stride,
        c_stride_r=out.stride(-2),
        c_stride_c=out.stride(-1),
        alpha=alpha,
        beta=beta,
    )
    return out

@torch.compile(dynamic=False, fullgraph=True) # Must use dynamic=False or else it's much slower
def newton_schulz_triton(G: torch.Tensor):
    a, b, c = (3.4445, -4.7750, 2.0315)
    X = G.bfloat16()
    if G.size(-2) > G.size(-1):
        X = X.mT

    # Ensure spectral norm is at most 1
    X = X / (X.norm(dim=(-2, -1), keepdim=True) + 1e-7)

    # Allocate buffers
    X = X.contiguous()
    A = torch.empty((*X.shape[:-1], X.size(-2)), device=X.device, dtype=X.dtype)
    B = torch.empty_like(A)
    C = torch.empty_like(X)

    ns_line_3 = torch.baddbmm if X.ndim > 2 else torch.addmm

    # Perform the NS iterations
    for _ in range(5):
        ns_line_1(X, out=A)  # A = X @ X.mT
        ns_line_2(A, alpha=c, beta=b, out=B)  # B = b * A + c * A @ A
        ns_line_3(X, B, X, beta=a, out=C)  # C = a * X + B @ X
        X, C = C, X  # Swap references to avoid unnecessary copies

    if G.size(-2) > G.size(-1):
        X = X.mT
    return X

# -----------------------------------------------------------------------------
# Muon optimizer

class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    https://kellerjordan.github.io/posts/muon/

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Warning: This optimizer should not be used for the embedding layer, the final fully connected layer,
    or any {0,1}-D parameters; those should all be optimized by a standard method (e.g., AdamW).
    """
    def __init__(self, params, lr=0.02, weight_decay=0.01, momentum=0.95):
        defaults = dict(lr=lr, weight_decay=weight_decay, momentum=momentum)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)

    @torch.no_grad()
    def step(self):
        # Efficient systems-wise implementation of step developed by @YouJiacheng,
        # @KonstantinWilleke, @alexrgilbert, @adricarda, @tuttyfrutyee, @vdlad,
        # @ryanyang0, and @vagrawal.
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_gather_futures: list[torch.Future] = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            grad = torch.empty_like(params[-1])
            grad_pad = [param.grad for param in params] + [torch.zeros_like(params[-1])] * world_size
            for base_i in range(0, len(params), world_size):
                if base_i + rank < len(params):
                    grad = params[base_i + rank].grad
                # This gives strange dynamo warnings
                reduce_scatter_futures.append(dist.reduce_scatter(grad, grad_pad[base_i:base_i + world_size], op=dist.ReduceOp.AVG, async_op=True).get_future())

        idx = 0
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            params_pad = params + [torch.empty_like(params[-1])] * world_size
            momentum = group["momentum"]
            for base_i in range(0, len(params), world_size):
                reduce_scatter_futures[idx].wait()
                if base_i + rank < len(params):
                    p = params[base_i + rank]
                    grad = p.grad
                    eff_lr = group["lr"] * max(1, p.size(-2) / p.size(-1)) ** 0.5 * getattr(p, "lr_mul", 1.0)
                    eff_weight_decay = group["lr"] * group["weight_decay"] * getattr(p, "wd_mul", 1.0)
                    state = self.state[p]
                    if len(state) == 0:
                        state["momentum_buffer"] = torch.zeros_like(grad)
                    momentum_buffer = state["momentum_buffer"]
                    p.mul_(1 - eff_weight_decay)
                    momentum_buffer.lerp_(grad, 1 - momentum)
                    grad = grad.lerp_(momentum_buffer, momentum)
                    v = newton_schulz_triton(grad)
                    p.add_(other=v, alpha=-eff_lr)
                idx += 1
                all_gather_futures.append(dist.all_gather(params_pad[base_i:base_i + world_size], params_pad[base_i + rank], async_op=True).get_future())
        torch.futures.collect_all(all_gather_futures).wait()

class DistAdam(torch.optim.Optimizer):
    def __init__(self, params, lr: float = 1e-3, betas: tuple[float, float] = (0.9, 0.999), eps: float = 1e-8, weight_decay: float = 0.01):
        defaults = dict(lr=lr, betas=betas, eps=eps, weight_decay=weight_decay)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)
        # DistributedAdam implementation by @vagrawal

    @torch.compile
    @torch.no_grad()
    def step(self):
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_gather_futures: list[torch.Future] = []
        grad_slices = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            for base_i in range(len(params)):
                grad = params[base_i].grad
                rank_size = grad.shape[0] // world_size
                grad_slice = torch.empty_like(grad[:rank_size])
                reduce_scatter_futures.append(dist.reduce_scatter_tensor(grad_slice, grad, op=dist.ReduceOp.AVG, async_op=True).get_future())
                grad_slices.append(grad_slice)

        idx = 0
        for group in self.param_groups:
            beta1, beta2 = group['betas']
            eps = group['eps']
            wd = group['weight_decay']
            params = group['params']
            for base in range(len(params)):
                reduce_scatter_futures[idx].wait()
                p = params[base]
                rank_size = p.shape[0] // world_size
                p_slice = p[rank * rank_size:(rank + 1) * rank_size]
                lr = group['lr'] * getattr(p, "lr_mul", 1.0)
                state = self.state[p]
                g_slice = grad_slices[idx]
                # State init
                if not state:
                    state['step'] = torch.tensor(0, dtype=torch.int64, device=p.device)
                    state['exp_avg'] = torch.zeros_like(p_slice)
                    state['exp_avg_sq'] = torch.zeros_like(p_slice)
                exp_avg = state['exp_avg']
                exp_avg_sq = state['exp_avg_sq']
                state['step'] += 1
                t = state['step']
                # weight decay
                if wd != 0:
                    eff_weight_decay = lr * wd * getattr(p, "wd_mul", 1.0)
                    p_slice.mul_(1 - eff_weight_decay)
                # update running averages
                exp_avg.mul_(beta1).add_(g_slice, alpha=1 - beta1)
                exp_avg_sq.mul_(beta2).addcmul_(g_slice, g_slice, value=1 - beta2)
                # bias corrections
                bias1 = 1 - beta1 ** t
                bias2 = 1 - beta2 ** t
                # compute step
                denom = exp_avg_sq.sqrt().add_(eps)
                step_size = lr * (torch.sqrt(bias2) / bias1)
                update = exp_avg.div(denom).mul_(step_size)
                p_slice.add_(other=update, alpha=-1.0)
                idx += 1
                all_gather_futures.append(dist.all_gather_into_tensor(p, p_slice, async_op=True).get_future())
        torch.futures.collect_all(all_gather_futures).wait()

# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the model

def norm(x: Tensor):
    return F.rms_norm(x, (x.size(-1),))

class CastedLinear(nn.Linear):
    def __init__(self, in_features: int, out_features: int, use_fp8=False, x_s=1.0, w_s=1.0, grad_s=1.0):
        super().__init__(in_features, out_features, bias=False)
        self.use_fp8 = use_fp8
        self.x_s = x_s
        self.w_s = w_s
        self.grad_s = grad_s

    def reset_parameters(self) -> None:
        std = 0.5 * (self.in_features ** -0.5) # 0.5 is a bit better than the default 1/sqrt(3)
        bound = (3 ** 0.5) * std
        with torch.no_grad():
            self.weight.uniform_(-bound, bound)

    def forward(self, x: Tensor):
        if self.use_fp8 and self.training:
            _x = x.flatten(0, -2)
            out: Tensor = torch.ops.nanogpt.mm(_x, self.weight, x_s=self.x_s, w_s=self.w_s, grad_s=self.grad_s)[0]
            return out.reshape(*x.shape[:-1], -1)
        else:
            return F.linear(x, self.weight.type_as(x))

def rotary(x_BTHD: Tensor, cos: Tensor, sin: Tensor):
    assert cos.size(0) >= x_BTHD.size(-3)
    cos, sin = cos[None, :x_BTHD.size(-3), None, :], sin[None, :x_BTHD.size(-3), None, :]
    x1, x2 = x_BTHD.to(dtype=torch.float32).chunk(2, dim=-1)
    y1 = x1 * cos + x2 * sin
    y2 = x1 * (-sin) + x2 * cos
    return torch.cat((y1, y2), 3).type_as(x_BTHD)

@dataclass
class AttnArgs:
    ve: torch.Tensor
    sa_lambdas: torch.Tensor
    seqlens: torch.Tensor
    bm_size: int
    rotary_cos: torch.Tensor
    rotary_sin: torch.Tensor
    attn_scale: float

class CausalSelfAttention(nn.Module):
    def __init__(self, dim: int, head_dim: int, num_heads: int):
        super().__init__()
        self.num_heads = num_heads
        self.head_dim = head_dim
        hdim = num_heads * head_dim
        assert hdim == dim, "num_heads * head_dim must equal model_dim"
        std = 0.5 * (dim ** -0.5)
        bound = (3 ** 0.5) * std # improved init scale by @YouJiacheng
        # merged QKV weights: suggested by many, implemented by @fernbear.bsky.social, and further improved by @YouJiacheng
        # https://x.com/hi_tysam/status/1879699187107033311
        self.qkvo_w = nn.Parameter(torch.empty(4, hdim, dim))
        with torch.no_grad():
            self.qkvo_w[:3].uniform_(-bound, bound) # init QKV weights
            self.qkvo_w[3].zero_() # init output weights to zero

        # sparse gated attention to enable context based no-op by @classiclarryd
        self.attn_gate = CastedLinear(12, num_heads)
        self.attn_gate.weight.detach().zero_()

    def forward(self, x: Tensor, attn_args):
        B, T = x.size(0), x.size(1) # batch size, sequence length
        assert B == 1, "varlen sequences requires B == 1"
        assert T % 16 == 0
        # unpack attention args
        rotary_cos, rotary_sin = attn_args.rotary_cos, attn_args.rotary_sin
        ve, sa_lambdas = attn_args.ve, attn_args.sa_lambdas
        seqlens, attn_scale, bm_size = attn_args.seqlens, attn_args.attn_scale, attn_args.bm_size

        q, k, v = F.linear(x, self.qkvo_w[:3].flatten(end_dim=1).type_as(x)).view(B, T, 3 * self.num_heads, self.head_dim).chunk(3, dim=-2)
        q, k = norm(q), norm(k) # QK norm @Grad62304977
        q, k = rotary(q, rotary_cos, rotary_sin), rotary(k, rotary_cos, rotary_sin)
        if ve is not None:
            v = sa_lambdas[0] * v + sa_lambdas[1] * ve.view_as(v) # @ KoszarskyB & @Grad62304977
        else: # skip mid-layers token value embeddings by @YouJiacheng
            v = sa_lambdas[0] * v

        max_len = args.train_max_seq_len if self.training else (args.val_batch_size // (grad_accum_steps * world_size))

        # use flash_attn over flex_attn @varunneal. flash_attn_varlen suggested by @YouJiacheng
        y = flash_attn_varlen_func(q[0], k[0], v[0], cu_seqlens_q=seqlens, cu_seqlens_k=seqlens, max_seqlen_q=max_len, max_seqlen_k=max_len,
                                   causal=True, softmax_scale=attn_scale, window_size=(bm_size, 0))
        y = y.view(B, T, self.num_heads, self.head_dim)
        y = y * torch.sigmoid(self.attn_gate(x[..., :self.attn_gate.weight.size(-1)])).view(B, T, self.num_heads, 1)
        y = y.contiguous().view(B, T, self.num_heads * self.head_dim) # re-assemble all head outputs side by side
        y = F.linear(y, self.qkvo_w[3].type_as(y))
        return y

class MLP(nn.Module):
    def __init__(self, dim: int):
        super().__init__()
        hdim = 4 * dim
        # make both matrices have the same shape because optimizer sorts params by shape
        # 2 matrices x 12 layers = 24 total, which is divisible by 8 GPU world size
        self.c_fc = nn.Parameter(torch.empty(dim, hdim))
        self.c_proj = nn.Parameter(torch.empty(dim, hdim))
        std = 0.5 * (dim ** -0.5)
        bound = (3 ** 0.5) * std # improved init scale by @YouJiacheng
        with torch.no_grad():
            self.c_fc.uniform_(-bound, bound)
            self.c_proj.zero_() # zero init suggested by @Grad62304977

    def forward(self, x: Tensor):
        x = F.linear(x, self.c_fc.T.type_as(x))
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = F.linear(x, self.c_proj.type_as(x))
        return x

class Block(nn.Module):
    def __init__(self, dim: int, head_dim: int, num_heads: int, layer_idx: int):
        super().__init__()
        # skip attention of blocks.7 (the 8th layer) by @YouJiacheng
        self.attn = CausalSelfAttention(dim, head_dim, num_heads) if layer_idx != 7 else None
        # skip MLP blocks for first MLP layer by @EmelyanenkoK
        self.mlp = MLP(dim) if layer_idx != 0 else None

    def forward(self, x: Tensor, x0: Tensor, lambdas: Tensor, attn_args):
        x = lambdas[0] * x + lambdas[1] * x0
        if self.attn is not None:
            x = x + self.attn(norm(x), attn_args)
        if self.mlp is not None:
            x = x + self.mlp(norm(x))
        return x

# -----------------------------------------------------------------------------
# The main model

def next_multiple_of_n(v: float | int, *, n: int):
    return next(x for x in range(n, int(v) + 1 + n, n) if x >= v)

class GPT(nn.Module):
    def __init__(self, vocab_size: int, num_layers: int, num_heads: int, head_dim: int, model_dim: int, max_seq_len: int):
        super().__init__()
        vocab_size = next_multiple_of_n(vocab_size, n=128)
        self.embed = nn.Embedding(vocab_size, model_dim)
        # token value embeddings by @KoszarskyB - inspired by @Grad62304977's value residual implementation following https://arxiv.org/abs/2410.17897
        # value embedding code simplification inspired by @ragulpr https://github.com/KellerJordan/modded-nanogpt/pull/78
        self.value_embeds = nn.ModuleList([nn.Embedding(vocab_size, model_dim) for _ in range(3)])
        self.blocks = nn.ModuleList([Block(model_dim, head_dim, num_heads, i) for i in range(num_layers)])
        # there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency.
        # suggested to me by @Grad62304977. this originates from Karpathy's experiments.
        use_fp8 = not os.environ.get("DISABLE_FP8", False)
        self.lm_head = CastedLinear(model_dim, vocab_size, use_fp8=use_fp8, x_s=(model_dim**0.5)/448, w_s=2**-9, grad_s=1/448)
        self.lm_head.weight.detach().zero_() # @Grad62304977
        # Add learnable skip connection weights for decoder layers
        assert num_layers % 2 == 0
        pad = (-num_layers * 5) % dist.get_world_size()
        self.scalars = nn.Parameter(torch.cat([
            torch.ones(num_layers), # skip_weights
            *[torch.tensor([1.0, 0.0]) for _ in range(num_layers)], # block lambdas
            *[torch.tensor([0.5, 0.5]) for _ in range(num_layers)], # SA lambdas
            torch.ones(pad),
        ]))
        self.max_seq_len = max_seq_len
        self.setup_yarn(head_dim)
        # set learning rates
        for param in self.embed.parameters():
            param.lr_mul = 75.
        for param in self.value_embeds.parameters():
            param.lr_mul = 75.
        self.lm_head.weight.lr_mul = 1.0
        self.scalars.lr_mul = 5.0

    def setup_yarn(self, head_dim: int):
        # store single copy of rotary tensors
        angular_freq = (1 / 1024) ** torch.linspace(0, 1, steps=head_dim//4, dtype=torch.float32)
        # half-truncate RoPE by @YouJiacheng (w/ base freq tuning)
        angular_freq = torch.cat([angular_freq, angular_freq.new_zeros(head_dim//4)])
        t = torch.arange(self.max_seq_len, dtype=torch.float32)
        theta = torch.outer(t, angular_freq)
        self.rotary_cos = nn.Buffer(theta.cos(), persistent=False)
        self.rotary_sin = nn.Buffer(theta.sin(), persistent=False)
        self.angular_freq = angular_freq

        # scale attention factor f in attn=softmax(f*qk) logarithmically with window size @classiclarryd
        windows = list(dict.fromkeys(list(args.ws_schedule) + [args.ws_validate]))
        scale_factors = [0.2 * math.log(curr / prev) + 1 for prev, curr in zip(windows[:-1], windows[1:])]
        # start with 0.1, inspired by 0.12 from @leloykun and learnable scalars used by @brendanh0gan https://x.com/hi_tysam/status/1879693583898591283
        attn_scales = list(accumulate([0.1] + scale_factors, lambda acc, factor: acc * factor))
        self.attn_scales = dict(zip(windows, attn_scales))

    def apply_yarn(self, old_window: int, new_window: int, alpha: int=1, beta: int=32):
        rotations = args.block_size * old_window * self.angular_freq / (2 * torch.pi)
        scaling_factor = old_window / new_window
        interpolation_weight = torch.clamp((rotations - alpha) / (beta - alpha), 0, 1)
        self.angular_freq *= scaling_factor + interpolation_weight * (1 - scaling_factor)
        t = torch.arange(self.max_seq_len, dtype=torch.float32, device=self.angular_freq.device)
        theta = torch.outer(t, self.angular_freq)
        self.rotary_cos.copy_(theta.cos())
        self.rotary_sin.copy_(theta.sin())

    def forward(self, input_seq: Tensor, target_seq: Tensor, seqlens: Tensor, ws: int):
        assert input_seq.ndim == 1

        ve = [value_embed(input_seq) for value_embed in self.value_embeds]
        # 012 ... 012 structure on token value embeddings by @YouJiacheng, improved on @leloykun's U-net structure
        ve = [ve[0], ve[1], ve[2]] + [None] * (len(self.blocks) - 6) + [ve[0], ve[1], ve[2]]
        assert len(ve) == len(self.blocks)

        long_bm, short_bm = ws * args.block_size, (ws // 2) * args.block_size
        bm_sizes = [long_bm, short_bm, short_bm, short_bm, long_bm, short_bm, short_bm, long_bm, short_bm, short_bm, short_bm, long_bm]
        assert len(bm_sizes) == len(self.blocks)

        x = x0 = norm(self.embed(input_seq)[None]) # use of norm here by @Grad62304977

        # U-net design by @brendanh0gan
        skip_connections = []
        skip_weights = self.scalars[:(len(self.blocks) // 2)]
        lambdas = self.scalars[1 * len(self.blocks): 3 * len(self.blocks)].view(-1, 2)
        sa_lambdas = self.scalars[3 * len(self.blocks): 5 * len(self.blocks)].view(-1, 2)

        n = len(self.blocks) // 2

        for i in range(len(self.blocks)):
            attn_args = AttnArgs(
                ve=ve[i],
                sa_lambdas=sa_lambdas[i],
                seqlens=seqlens,
                bm_size=bm_sizes[i],
                rotary_cos=self.rotary_cos,
                rotary_sin=self.rotary_sin,
                attn_scale=self.attn_scales[ws]
            )
            if i >= n:
                x = x + skip_weights[i - n] * skip_connections.pop()
            x = self.blocks[i](x, x0, lambdas[i], attn_args)
            if i < n:
                skip_connections.append(x)

        x = norm(x)
        logits = self.lm_head(x).float()
        # @Grad62304977 added tanh softcapping following Gemma 2 paper, @KoszarskyB reduced it from 30 to 15, @YouJiacheng shifted it by +15 (2*sigmoid(2*x)=tanh(x)+1)
        logits = 30 * torch.sigmoid(logits / 7.5)
        loss = F.cross_entropy(logits.view(-1, logits.size(-1)), target_seq, reduction="sum" if self.training else "mean")
        return loss

# -----------------------------------------------------------------------------
# Distributed data loader

def _load_data_shard(file: Path):
    header = torch.from_file(str(file), False, 256, dtype=torch.int32) # header is 256 int32
    assert header[0] == 20240520, "magic number mismatch in the data .bin file"
    assert header[1] == 1, "unsupported version"
    num_tokens = int(header[2]) # number of tokens (claimed)
    with file.open("rb", buffering=0) as f:
        tokens = torch.empty(num_tokens, dtype=torch.uint16, pin_memory=True) # avoid pin_memory copy by @YouJiacheng
        f.seek(256 * 4)
        nbytes = f.readinto(tokens.numpy()) # avoid bytes->array copy by @YouJiacheng
        assert nbytes == 2 * num_tokens, "number of tokens read does not match header"
    return tokens

BOS_ID = 50256

class BOSFinder:
    # Helper for getting sequences that start at the beginning of documents by @varunneal based on work by @classiclarryd
    def __init__(self, tokens: Tensor, world_size: int = 1):
        # Precompute BOS positions once per shard
        self.size = tokens.numel()
        self.bos_idx = (tokens == BOS_ID).nonzero(as_tuple=True)[0].to(torch.int64).cpu().numpy()
        self.i = 0
        self.world_size = world_size

    def next_batch(self, num_tokens_local: int, max_seq_len: int):
        n = len(self.bos_idx)
        starts = [[] for _ in range(self.world_size)]
        ends = [[] for _ in range(self.world_size)]

        idx = self.i
        for r in range(self.world_size):
            cur_len = 0
            while cur_len <= num_tokens_local:
                if idx >= n:
                    raise StopIteration(f"Insufficient BOS ahead of position {cur}; hit tail of shard.")
                cur = self.bos_idx[idx]
                starts[r].append(cur)
                end = min(self.bos_idx[idx + 1] if idx + 1 < n else self.size,
                          cur + max_seq_len,
                          cur + num_tokens_local - cur_len + 1)
                ends[r].append(end)
                cur_len += end - cur
                idx += 1

            assert cur_len == num_tokens_local + 1
        self.i = idx

        return starts, ends

def distributed_data_generator(filename_pattern: str, num_tokens: int, max_seq_len: int, grad_accum_steps: int = 1, align_to_bos: bool = True):
    # align_to_bos: each sequence begins with Beginning of Sequence token, sequences truncated to max_seq_len
    rank = dist.get_rank() if dist.is_initialized() else 0
    world_size = dist.get_world_size() if dist.is_initialized() else 1
    assert num_tokens % (world_size * grad_accum_steps) == 0, "Batch size must be divisible by world size"
    num_tokens = num_tokens // grad_accum_steps

    files = [Path(file) for file in sorted(glob.glob(filename_pattern))]
    if not files:
        raise FileNotFoundError(f"No files found for pattern: {filename_pattern}")

    file_iter = iter(files)  # Use itertools.cycle(files) for multi-epoch training
    tokens = _load_data_shard(next(file_iter))
    finder = BOSFinder(tokens, world_size=world_size) if align_to_bos else None
    pos = 0  # for unaligned case

    while True:
        num_tokens_local = num_tokens // world_size
        max_num_docs = next_multiple_of_n(num_tokens_local // 300, n=128)  # median doc length is ~400

        if align_to_bos:
            try:
                seq_starts, seq_ends = finder.next_batch(num_tokens_local, max_seq_len)
                start_idxs, end_idxs = torch.tensor(seq_starts[rank]), torch.tensor(seq_ends[rank])
            except StopIteration:
                # This shard is exhausted, load the next one in the next loop iteration.
                tokens = _load_data_shard(next(file_iter))
                finder = BOSFinder(tokens, world_size=world_size)
                continue

            buf = torch.cat([tokens[i:j] for i, j in zip(start_idxs, end_idxs)])
            _inputs = buf[:-1]
            _targets = buf[1:]
            end_idxs[-1] -= 1  # last document was too long to account for _targets offset
            cum_lengths = (end_idxs - start_idxs).cumsum(0)

        else:
            if pos + num_tokens + 1 >= len(tokens):  # should not occur for val data
                tokens, pos = _load_data_shard(next(file_iter)), 0

            pos_local = pos + rank * num_tokens_local
            buf = tokens[pos_local: pos_local + num_tokens_local + 1]
            _inputs = buf[:-1].view(num_tokens_local, )
            _targets = buf[1:].view(num_tokens_local, )

            cum_lengths = torch.nonzero(_inputs == BOS_ID)[:, 0]
            pos += num_tokens


        _cum_lengths = torch.full((max_num_docs,), num_tokens_local)
        _cum_lengths[0] = 0
        _cum_lengths[1:len(cum_lengths) + 1] = cum_lengths

        new_params = yield (
            _inputs.to(device="cuda", dtype=torch.int32, non_blocking=True),
            _targets.to(device="cuda", dtype=torch.int64, non_blocking=True),
            _cum_lengths.to(device="cuda", dtype=torch.int32, non_blocking=True)
        )

        if new_params is not None:
            # makes it possible for generator to receive new (num_tokens, max_seq_len, grad_accum_steps) via .send()
            new_num_tokens, new_max_seq_len, new_grad_accum_steps = new_params
            assert new_num_tokens % (world_size * grad_accum_steps) == 0, "Num tokens must be divisible by world size"
            num_tokens = new_num_tokens
            max_seq_len = new_max_seq_len
            grad_accum_steps = new_grad_accum_steps 


# -----------------------------------------------------------------------------
# int main

@dataclass
class Hyperparameters:
    # data
    train_files: str = "data/fineweb10B/fineweb_train_*.bin" # input .bin to train on
    val_files: str = "data/fineweb10B/fineweb_val_*.bin" # input .bin to eval validation loss on
    val_tokens: int = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    train_batch_size: int = 2048 * 24 * 8
    train_max_seq_len: int = 128 * 16
    val_batch_size: int = 4 * 64 * 1024 * 8
    # optimization
    num_iterations: int = 1670 # number of iterations to run
    cooldown_frac: int = 0.5 # fraction of training spent cooling down the learning rate
    # evaluation and logging
    run_id: str = f"yarn/{uuid.uuid4()}"
    val_loss_every: int = 125 # every how many steps to evaluate val loss? 0 for only at the end
    save_checkpoint: bool = False
    # attention masking
    block_size: int = 128
    ws_schedule: tuple = (3, 7, 11)
    ws_validate: int = 13 # increase final validation ws @classiclarryd

args = Hyperparameters()

data_path = os.environ.get("DATA_PATH", ".")
args.train_files = os.path.join(data_path, args.train_files)
args.val_files = os.path.join(data_path, args.val_files)

# torchrun sets these env variables
rank = int(os.environ["RANK"])
world_size = int(os.environ["WORLD_SIZE"])
assert 8 % world_size == 0, "world_size must be a divisor of 8"
grad_accum_steps = 8 // world_size
assert torch.cuda.is_available()
device = torch.device("cuda", int(os.environ["LOCAL_RANK"]))
torch.cuda.set_device(device)
dist.init_process_group(backend="nccl", device_id=device)
dist.barrier()
master_process = (rank == 0) # this process will do logging, checkpointing etc.

# begin logging
logfile = None
if master_process:
    run_id = args.run_id
    os.makedirs("logs", exist_ok=True)
    logfile = f"logs/{run_id}.txt"
    print(logfile)
def print0(s, console=False):
    if master_process:
        with open(logfile, "a") as f:
            if console:
                print(s)
            print(s, file=f)

# begin by printing this file (the Python code)
print0(code)
print0("="*100)
# log information about the hardware/software environment this is running on
print0(f"Running Python {sys.version}")
print0(f"Running PyTorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}")
print0(f"Running Triton version {triton.__version__}")

def nvidia_smi():
    import subprocess  # avoid top level import
    return subprocess.run(["nvidia-smi"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).stdout
print0(nvidia_smi())
print0("="*100)

model: nn.Module = GPT(
    vocab_size=50257,
    num_layers=12,
    num_heads=6,
    head_dim=128,
    model_dim=768,
    max_seq_len=max(args.train_batch_size, args.val_batch_size) // (grad_accum_steps * world_size)
).cuda()
for m in model.modules():
    if isinstance(m, nn.Embedding):
        m.bfloat16()
for param in model.parameters():
    dist.broadcast(param.detach(), 0)

# collect the parameters to optimize
hidden_matrix_params = [p for n, p in model.blocks.named_parameters() if p.ndim >= 2 and "embed" not in n]
embed_params = [p for n, p in model.named_parameters() if "embed" in n]
scalar_params = [p for p in model.parameters() if p.ndim < 2]
head_params = [model.lm_head.weight]

# init the optimizer(s)
# small adam epsilon by @YouJiacheng. this is an alternate method of fixing the world_size dependence
# discovered by @fernbear.bsky.social https://x.com/hi_tysam/status/1879692937589875094
optimizer1 = DistAdam(scalar_params + head_params + embed_params, lr=0.008, betas=(0.8, 0.95), eps=1e-10, weight_decay=0.0)
optimizer2 = Muon(hidden_matrix_params, lr=0.05, momentum=0.95, weight_decay=0.0)
optimizers = [optimizer1, optimizer2]
for opt in optimizers:
    for group in opt.param_groups:
        group["initial_lr"] = group["lr"]

# learning rate schedule: stable then decay
def get_lr(step: int):
    x = step / args.num_iterations
    assert 0 <= x < 1
    lr = 1.0
    if x >= 1 - args.cooldown_frac:
        w = (1 - x) / args.cooldown_frac
        lr = w * 1.0 + (1 - w) * 0.1
    return lr

def get_ws(step: int):
    if step == args.num_iterations:
        return args.ws_validate
    x = step / (1 + args.num_iterations)
    assert 0 <= x < 1
    ws_idx = int(len(args.ws_schedule) * x)
    return args.ws_schedule[ws_idx]

model: nn.Module = torch.compile(model, dynamic=False, fullgraph=True)

########################################
#            Warmup kernels            #
########################################

# Warmup the training kernels, then re-initialize the state so we aren't cheating
warmup_steps = 30
initial_state = dict(model=copy.deepcopy(model.state_dict()),
                     optimizers=[copy.deepcopy(opt.state_dict()) for opt in optimizers]) # save the initial state
train_loader = distributed_data_generator(args.train_files, args.train_batch_size, args.train_max_seq_len, grad_accum_steps=grad_accum_steps)
for step in range(warmup_steps):
    inputs, targets, cum_seqlens = next(train_loader)
    ws = args.ws_schedule[step % len(args.ws_schedule)]  # each window size is a new graph, need to warm up each
    model(inputs, targets, cum_seqlens, ws).backward()
    for opt in optimizers:
        opt.step()
    model.zero_grad(set_to_none=True)
model.load_state_dict(initial_state["model"])
for opt, opt_state in zip(optimizers, initial_state["optimizers"]):
    opt.load_state_dict(opt_state)
del train_loader, initial_state

########################################
#        Training and validation       #
########################################

train_loader = distributed_data_generator(args.train_files, args.train_batch_size, args.train_max_seq_len, grad_accum_steps=grad_accum_steps)
training_time_ms = 0
# start the clock
torch.cuda.synchronize()
t0 = time.perf_counter()
# begin training
train_steps = args.num_iterations
ws = get_ws(0)
for step in range(train_steps + 1):
    last_step = (step == train_steps)
    new_ws = get_ws(step)
    if new_ws != ws:
        model.apply_yarn(ws, new_ws)
        ws=new_ws

    # --------------- VALIDATION SECTION -----------------
    if last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0):
        # stop the clock
        torch.cuda.synchronize()
        training_time_ms += 1000 * (time.perf_counter() - t0)
        model.eval()
        assert args.val_tokens % args.val_batch_size == 0
        val_steps = grad_accum_steps * args.val_tokens // args.val_batch_size
        val_loader = distributed_data_generator(args.val_files, args.val_batch_size, -1, grad_accum_steps=grad_accum_steps, align_to_bos=False)
        val_loss = 0
        with torch.no_grad():
            for _ in range(val_steps):
                inputs, targets, cum_seqlens = next(val_loader)
                val_loss += model(inputs, targets, cum_seqlens, ws)
        val_loss /= val_steps
        del val_loader
        dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
        print0(f"step:{step}/{train_steps} val_loss:{val_loss:.4f} train_time:{training_time_ms:.0f}ms step_avg:{training_time_ms/max(step, 1):.2f}ms", console=True)
        model.train()
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.perf_counter()

    if last_step:
        if master_process and args.save_checkpoint:
            log = dict(step=step, code=code, model=model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
            os.makedirs(f"logs/{run_id}", exist_ok=True)
            torch.save(log, f"logs/{run_id}/state_step{step:06d}.pt")
        # the last step only has the validation loop, so break to avoid training
        break

    # --------------- TRAINING SECTION -----------------
    for _ in range(grad_accum_steps):
        inputs, targets, cum_seqlens = next(train_loader)
        model(inputs, targets, cum_seqlens, ws).backward()
    # set optimization hyperparameters
    for opt in optimizers:
        for group in opt.param_groups:
            group["lr"] = group["initial_lr"] * get_lr(step)
    for group in optimizer2.param_groups:
        frac = min(step / 300, 1) # momentum warmup for muon
        group["momentum"] = (1 - frac) * 0.85 + frac * 0.95
    # step the optimizers
    for opt in optimizers:
        opt.step()
    # null the gradients
    model.zero_grad(set_to_none=True)
    # logging
    approx_training_time_ms = training_time_ms + 1000 * (time.perf_counter() - t0)
    print0(f"step:{step+1}/{train_steps} train_time:{approx_training_time_ms:.0f}ms step_avg:{approx_training_time_ms/(step + 1):.2f}ms", console=True)

print0(f"peak memory allocated: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB "
       f"reserved: {torch.cuda.max_memory_reserved() // 1024 // 1024} MiB", console=True)
dist.destroy_process_group()

====================================================================================================
Running Python 3.10.12 (main, May 27 2025, 17:12:29) [GCC 11.4.0]
Running PyTorch 2.9.0.dev20250718+cu126 compiled for CUDA 12.6
Running Triton version 3.4.0
Thu Sep 11 04:05:30 2025       
+-----------------------------------------------------------------------------------------+
| NVIDIA-SMI 570.148.08             Driver Version: 570.148.08     CUDA Version: 12.8     |
|-----------------------------------------+------------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |
|                                         |                        |               MIG M. |
|=========================================+========================+======================|
|   0  NVIDIA H100 80GB HBM3          On  |   00000000:61:00.0 Off |                  Off |
| N/A   37C    P0            120W /  700W |    5858MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  |   00000000:62:00.0 Off |                  Off |
| N/A   41C    P0            125W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  |   00000000:63:00.0 Off |                  Off |
| N/A   43C    P0            123W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  |   00000000:64:00.0 Off |                  Off |
| N/A   36C    P0            121W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  |   00000000:6A:00.0 Off |                  Off |
| N/A   36C    P0            123W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  |   00000000:6B:00.0 Off |                  Off |
| N/A   43C    P0            128W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  |   00000000:6C:00.0 Off |                  Off |
| N/A   41C    P0            126W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  |   00000000:6D:00.0 Off |                  Off |
| N/A   37C    P0            119W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
                                                                                         
+-----------------------------------------------------------------------------------------+
| Processes:                                                                              |
|  GPU   GI   CI              PID   Type   Process name                        GPU Memory |
|        ID   ID                                                               Usage      |
|=========================================================================================|
|    0   N/A  N/A           64827      C   /usr/bin/python3                       1510MiB |
|    0   N/A  N/A           64828      C   /usr/bin/python3                        614MiB |
|    0   N/A  N/A           64829      C   /usr/bin/python3                        614MiB |
|    0   N/A  N/A           64830      C   /usr/bin/python3                        614MiB |
|    0   N/A  N/A           64831      C   /usr/bin/python3                        614MiB |
|    0   N/A  N/A           64832      C   /usr/bin/python3                        614MiB |
|    0   N/A  N/A           64833      C   /usr/bin/python3                        614MiB |
|    0   N/A  N/A           64834      C   /usr/bin/python3                        614MiB |
|    1   N/A  N/A           64828      C   /usr/bin/python3                       1510MiB |
|    2   N/A  N/A           64829      C   /usr/bin/python3                       1510MiB |
|    3   N/A  N/A           64830      C   /usr/bin/python3                       1510MiB |
|    4   N/A  N/A           64831      C   /usr/bin/python3                       1510MiB |
|    5   N/A  N/A           64832      C   /usr/bin/python3                       1510MiB |
|    6   N/A  N/A           64833      C   /usr/bin/python3                       1510MiB |
|    7   N/A  N/A           64834      C   /usr/bin/python3                       1510MiB |
+-----------------------------------------------------------------------------------------+

====================================================================================================
step:0/1670 val_loss:10.8258 train_time:0ms step_avg:0.02ms
step:1/1670 train_time:435ms step_avg:434.72ms
step:2/1670 train_time:459ms step_avg:229.31ms
step:3/1670 train_time:527ms step_avg:175.56ms
step:4/1670 train_time:617ms step_avg:154.28ms
step:5/1670 train_time:709ms step_avg:141.72ms
step:6/1670 train_time:800ms step_avg:133.38ms
step:7/1670 train_time:892ms step_avg:127.40ms
step:8/1670 train_time:984ms step_avg:123.03ms
step:9/1670 train_time:1076ms step_avg:119.60ms
step:10/1670 train_time:1168ms step_avg:116.80ms
step:11/1670 train_time:1260ms step_avg:114.50ms
step:12/1670 train_time:1353ms step_avg:112.79ms
step:13/1670 train_time:1451ms step_avg:111.61ms
step:14/1670 train_time:1544ms step_avg:110.28ms
step:15/1670 train_time:1637ms step_avg:109.10ms
step:16/1670 train_time:1729ms step_avg:108.08ms
step:17/1670 train_time:1821ms step_avg:107.13ms
step:18/1670 train_time:1914ms step_avg:106.31ms
step:19/1670 train_time:2006ms step_avg:105.58ms
step:20/1670 train_time:2098ms step_avg:104.89ms
step:21/1670 train_time:2190ms step_avg:104.28ms
step:22/1670 train_time:2282ms step_avg:103.74ms
step:23/1670 train_time:2376ms step_avg:103.31ms
step:24/1670 train_time:2471ms step_avg:102.95ms
step:25/1670 train_time:2564ms step_avg:102.57ms
step:26/1670 train_time:2657ms step_avg:102.21ms
step:27/1670 train_time:2750ms step_avg:101.86ms
step:28/1670 train_time:2843ms step_avg:101.54ms
step:29/1670 train_time:2937ms step_avg:101.27ms
step:30/1670 train_time:3029ms step_avg:100.97ms
step:31/1670 train_time:3121ms step_avg:100.69ms
step:32/1670 train_time:3213ms step_avg:100.42ms
step:33/1670 train_time:3306ms step_avg:100.18ms
step:34/1670 train_time:3400ms step_avg:100.01ms
step:35/1670 train_time:3494ms step_avg:99.82ms
step:36/1670 train_time:3586ms step_avg:99.62ms
step:37/1670 train_time:3681ms step_avg:99.48ms
step:38/1670 train_time:3773ms step_avg:99.30ms
step:39/1670 train_time:3865ms step_avg:99.11ms
step:40/1670 train_time:3959ms step_avg:98.97ms
step:41/1670 train_time:4051ms step_avg:98.81ms
step:42/1670 train_time:4144ms step_avg:98.67ms
step:43/1670 train_time:4237ms step_avg:98.53ms
step:44/1670 train_time:4329ms step_avg:98.39ms
step:45/1670 train_time:4422ms step_avg:98.26ms
step:46/1670 train_time:4515ms step_avg:98.15ms
step:47/1670 train_time:4608ms step_avg:98.05ms
step:48/1670 train_time:4702ms step_avg:97.95ms
step:49/1670 train_time:4794ms step_avg:97.84ms
step:50/1670 train_time:4887ms step_avg:97.73ms
step:51/1670 train_time:4980ms step_avg:97.65ms
step:52/1670 train_time:5073ms step_avg:97.56ms
step:53/1670 train_time:5165ms step_avg:97.46ms
step:54/1670 train_time:5258ms step_avg:97.38ms
step:55/1670 train_time:5350ms step_avg:97.27ms
step:56/1670 train_time:5443ms step_avg:97.19ms
step:57/1670 train_time:5535ms step_avg:97.10ms
step:58/1670 train_time:5628ms step_avg:97.03ms
step:59/1670 train_time:5721ms step_avg:96.96ms
step:60/1670 train_time:5814ms step_avg:96.89ms
step:61/1670 train_time:5907ms step_avg:96.84ms
step:62/1670 train_time:6001ms step_avg:96.79ms
step:63/1670 train_time:6094ms step_avg:96.73ms
step:64/1670 train_time:6186ms step_avg:96.65ms
step:65/1670 train_time:6278ms step_avg:96.58ms
step:66/1670 train_time:6371ms step_avg:96.53ms
step:67/1670 train_time:6463ms step_avg:96.47ms
step:68/1670 train_time:6556ms step_avg:96.41ms
step:69/1670 train_time:6649ms step_avg:96.36ms
step:70/1670 train_time:6741ms step_avg:96.30ms
step:71/1670 train_time:6834ms step_avg:96.25ms
step:72/1670 train_time:6928ms step_avg:96.22ms
step:73/1670 train_time:7021ms step_avg:96.18ms
step:74/1670 train_time:7114ms step_avg:96.13ms
step:75/1670 train_time:7207ms step_avg:96.09ms
step:76/1670 train_time:7300ms step_avg:96.05ms
step:77/1670 train_time:7392ms step_avg:96.00ms
step:78/1670 train_time:7485ms step_avg:95.97ms
step:79/1670 train_time:7578ms step_avg:95.93ms
step:80/1670 train_time:7671ms step_avg:95.89ms
step:81/1670 train_time:7763ms step_avg:95.84ms
step:82/1670 train_time:7856ms step_avg:95.80ms
step:83/1670 train_time:7948ms step_avg:95.76ms
step:84/1670 train_time:8041ms step_avg:95.72ms
step:85/1670 train_time:8134ms step_avg:95.70ms
step:86/1670 train_time:8226ms step_avg:95.65ms
step:87/1670 train_time:8319ms step_avg:95.62ms
step:88/1670 train_time:8411ms step_avg:95.59ms
step:89/1670 train_time:8503ms step_avg:95.54ms
step:90/1670 train_time:8596ms step_avg:95.51ms
step:91/1670 train_time:8688ms step_avg:95.47ms
step:92/1670 train_time:8781ms step_avg:95.45ms
step:93/1670 train_time:8874ms step_avg:95.42ms
step:94/1670 train_time:8967ms step_avg:95.39ms
step:95/1670 train_time:9059ms step_avg:95.36ms
step:96/1670 train_time:9151ms step_avg:95.33ms
step:97/1670 train_time:9244ms step_avg:95.30ms
step:98/1670 train_time:9336ms step_avg:95.27ms
step:99/1670 train_time:9429ms step_avg:95.24ms
step:100/1670 train_time:9521ms step_avg:95.21ms
step:101/1670 train_time:9613ms step_avg:95.18ms
step:102/1670 train_time:9706ms step_avg:95.15ms
step:103/1670 train_time:9798ms step_avg:95.13ms
step:104/1670 train_time:9891ms step_avg:95.11ms
step:105/1670 train_time:9983ms step_avg:95.07ms
step:106/1670 train_time:10076ms step_avg:95.05ms
step:107/1670 train_time:10169ms step_avg:95.03ms
step:108/1670 train_time:10260ms step_avg:95.00ms
step:109/1670 train_time:10353ms step_avg:94.98ms
step:110/1670 train_time:10446ms step_avg:94.96ms
step:111/1670 train_time:10538ms step_avg:94.93ms
step:112/1670 train_time:10630ms step_avg:94.91ms
step:113/1670 train_time:10722ms step_avg:94.89ms
step:114/1670 train_time:10815ms step_avg:94.86ms
step:115/1670 train_time:10908ms step_avg:94.85ms
step:116/1670 train_time:11000ms step_avg:94.83ms
step:117/1670 train_time:11092ms step_avg:94.80ms
step:118/1670 train_time:11185ms step_avg:94.79ms
step:119/1670 train_time:11277ms step_avg:94.76ms
step:120/1670 train_time:11370ms step_avg:94.75ms
step:121/1670 train_time:11462ms step_avg:94.72ms
step:122/1670 train_time:11554ms step_avg:94.71ms
step:123/1670 train_time:11647ms step_avg:94.69ms
step:124/1670 train_time:11740ms step_avg:94.68ms
step:125/1670 train_time:11833ms step_avg:94.66ms
step:125/1670 val_loss:4.3038 train_time:11924ms step_avg:95.39ms
step:126/1670 train_time:11949ms step_avg:94.83ms
step:127/1670 train_time:12021ms step_avg:94.66ms
step:128/1670 train_time:12124ms step_avg:94.72ms
step:129/1670 train_time:12222ms step_avg:94.74ms
step:130/1670 train_time:12314ms step_avg:94.73ms
step:131/1670 train_time:12407ms step_avg:94.71ms
step:132/1670 train_time:12499ms step_avg:94.69ms
step:133/1670 train_time:12590ms step_avg:94.67ms
step:134/1670 train_time:12682ms step_avg:94.64ms
step:135/1670 train_time:12773ms step_avg:94.62ms
step:136/1670 train_time:12865ms step_avg:94.59ms
step:137/1670 train_time:12957ms step_avg:94.58ms
step:138/1670 train_time:13050ms step_avg:94.57ms
step:139/1670 train_time:13144ms step_avg:94.56ms
step:140/1670 train_time:13237ms step_avg:94.55ms
step:141/1670 train_time:13330ms step_avg:94.54ms
step:142/1670 train_time:13423ms step_avg:94.53ms
step:143/1670 train_time:13515ms step_avg:94.51ms
step:144/1670 train_time:13606ms step_avg:94.49ms
step:145/1670 train_time:13698ms step_avg:94.47ms
step:146/1670 train_time:13790ms step_avg:94.45ms
step:147/1670 train_time:13882ms step_avg:94.43ms
step:148/1670 train_time:13974ms step_avg:94.42ms
step:149/1670 train_time:14066ms step_avg:94.40ms
step:150/1670 train_time:14160ms step_avg:94.40ms
step:151/1670 train_time:14254ms step_avg:94.39ms
step:152/1670 train_time:14346ms step_avg:94.38ms
step:153/1670 train_time:14438ms step_avg:94.37ms
step:154/1670 train_time:14530ms step_avg:94.35ms
step:155/1670 train_time:14623ms step_avg:94.34ms
step:156/1670 train_time:14715ms step_avg:94.33ms
step:157/1670 train_time:14807ms step_avg:94.31ms
step:158/1670 train_time:14899ms step_avg:94.30ms
step:159/1670 train_time:14991ms step_avg:94.29ms
step:160/1670 train_time:15084ms step_avg:94.28ms
step:161/1670 train_time:15177ms step_avg:94.27ms
step:162/1670 train_time:15270ms step_avg:94.26ms
step:163/1670 train_time:15363ms step_avg:94.25ms
step:164/1670 train_time:15457ms step_avg:94.25ms
step:165/1670 train_time:15549ms step_avg:94.23ms
step:166/1670 train_time:15641ms step_avg:94.22ms
step:167/1670 train_time:15734ms step_avg:94.21ms
step:168/1670 train_time:15826ms step_avg:94.21ms
step:169/1670 train_time:15918ms step_avg:94.19ms
step:170/1670 train_time:16010ms step_avg:94.18ms
step:171/1670 train_time:16103ms step_avg:94.17ms
step:172/1670 train_time:16195ms step_avg:94.16ms
step:173/1670 train_time:16288ms step_avg:94.15ms
step:174/1670 train_time:16381ms step_avg:94.15ms
step:175/1670 train_time:16474ms step_avg:94.14ms
step:176/1670 train_time:16566ms step_avg:94.13ms
step:177/1670 train_time:16659ms step_avg:94.12ms
step:178/1670 train_time:16750ms step_avg:94.10ms
step:179/1670 train_time:16844ms step_avg:94.10ms
step:180/1670 train_time:16936ms step_avg:94.09ms
step:181/1670 train_time:17029ms step_avg:94.08ms
step:182/1670 train_time:17121ms step_avg:94.07ms
step:183/1670 train_time:17214ms step_avg:94.07ms
step:184/1670 train_time:17306ms step_avg:94.06ms
step:185/1670 train_time:17399ms step_avg:94.05ms
step:186/1670 train_time:17492ms step_avg:94.04ms
step:187/1670 train_time:17585ms step_avg:94.04ms
step:188/1670 train_time:17677ms step_avg:94.03ms
step:189/1670 train_time:17769ms step_avg:94.02ms
step:190/1670 train_time:17861ms step_avg:94.01ms
step:191/1670 train_time:17954ms step_avg:94.00ms
step:192/1670 train_time:18046ms step_avg:93.99ms
step:193/1670 train_time:18138ms step_avg:93.98ms
step:194/1670 train_time:18230ms step_avg:93.97ms
step:195/1670 train_time:18323ms step_avg:93.97ms
step:196/1670 train_time:18416ms step_avg:93.96ms
step:197/1670 train_time:18509ms step_avg:93.95ms
step:198/1670 train_time:18602ms step_avg:93.95ms
step:199/1670 train_time:18694ms step_avg:93.94ms
step:200/1670 train_time:18786ms step_avg:93.93ms
step:201/1670 train_time:18878ms step_avg:93.92ms
step:202/1670 train_time:18971ms step_avg:93.92ms
step:203/1670 train_time:19065ms step_avg:93.91ms
step:204/1670 train_time:19157ms step_avg:93.91ms
step:205/1670 train_time:19249ms step_avg:93.90ms
step:206/1670 train_time:19343ms step_avg:93.90ms
step:207/1670 train_time:19436ms step_avg:93.89ms
step:208/1670 train_time:19528ms step_avg:93.88ms
step:209/1670 train_time:19622ms step_avg:93.88ms
step:210/1670 train_time:19714ms step_avg:93.88ms
step:211/1670 train_time:19806ms step_avg:93.87ms
step:212/1670 train_time:19899ms step_avg:93.86ms
step:213/1670 train_time:20255ms step_avg:95.10ms
step:214/1670 train_time:20379ms step_avg:95.23ms
step:215/1670 train_time:20471ms step_avg:95.22ms
step:216/1670 train_time:20563ms step_avg:95.20ms
step:217/1670 train_time:20654ms step_avg:95.18ms
step:218/1670 train_time:20746ms step_avg:95.16ms
step:219/1670 train_time:20837ms step_avg:95.15ms
step:220/1670 train_time:20928ms step_avg:95.13ms
step:221/1670 train_time:21019ms step_avg:95.11ms
step:222/1670 train_time:21111ms step_avg:95.09ms
step:223/1670 train_time:21203ms step_avg:95.08ms
step:224/1670 train_time:21298ms step_avg:95.08ms
step:225/1670 train_time:21394ms step_avg:95.09ms
step:226/1670 train_time:21488ms step_avg:95.08ms
step:227/1670 train_time:21580ms step_avg:95.07ms
step:228/1670 train_time:21672ms step_avg:95.05ms
step:229/1670 train_time:21764ms step_avg:95.04ms
step:230/1670 train_time:21856ms step_avg:95.03ms
step:231/1670 train_time:21948ms step_avg:95.01ms
step:232/1670 train_time:22040ms step_avg:95.00ms
step:233/1670 train_time:22131ms step_avg:94.98ms
step:234/1670 train_time:22225ms step_avg:94.98ms
step:235/1670 train_time:22318ms step_avg:94.97ms
step:236/1670 train_time:22411ms step_avg:94.96ms
step:237/1670 train_time:22504ms step_avg:94.95ms
step:238/1670 train_time:22596ms step_avg:94.94ms
step:239/1670 train_time:22688ms step_avg:94.93ms
step:240/1670 train_time:22781ms step_avg:94.92ms
step:241/1670 train_time:22873ms step_avg:94.91ms
step:242/1670 train_time:22965ms step_avg:94.90ms
step:243/1670 train_time:23057ms step_avg:94.88ms
step:244/1670 train_time:23149ms step_avg:94.87ms
step:245/1670 train_time:23243ms step_avg:94.87ms
step:246/1670 train_time:23337ms step_avg:94.86ms
step:247/1670 train_time:23429ms step_avg:94.86ms
step:248/1670 train_time:23523ms step_avg:94.85ms
step:249/1670 train_time:23616ms step_avg:94.84ms
step:250/1670 train_time:23708ms step_avg:94.83ms
step:250/1670 val_loss:3.9639 train_time:23799ms step_avg:95.20ms
step:251/1670 train_time:23825ms step_avg:94.92ms
step:252/1670 train_time:23901ms step_avg:94.84ms
step:253/1670 train_time:24001ms step_avg:94.86ms
step:254/1670 train_time:24096ms step_avg:94.87ms
step:255/1670 train_time:24187ms step_avg:94.85ms
step:256/1670 train_time:24279ms step_avg:94.84ms
step:257/1670 train_time:24370ms step_avg:94.83ms
step:258/1670 train_time:24462ms step_avg:94.81ms
step:259/1670 train_time:24553ms step_avg:94.80ms
step:260/1670 train_time:24645ms step_avg:94.79ms
step:261/1670 train_time:24737ms step_avg:94.78ms
step:262/1670 train_time:24829ms step_avg:94.77ms
step:263/1670 train_time:24924ms step_avg:94.77ms
step:264/1670 train_time:25018ms step_avg:94.77ms
step:265/1670 train_time:25112ms step_avg:94.76ms
step:266/1670 train_time:25205ms step_avg:94.75ms
step:267/1670 train_time:25297ms step_avg:94.75ms
step:268/1670 train_time:25388ms step_avg:94.73ms
step:269/1670 train_time:25480ms step_avg:94.72ms
step:270/1670 train_time:25572ms step_avg:94.71ms
step:271/1670 train_time:25663ms step_avg:94.70ms
step:272/1670 train_time:25756ms step_avg:94.69ms
step:273/1670 train_time:25849ms step_avg:94.68ms
step:274/1670 train_time:25942ms step_avg:94.68ms
step:275/1670 train_time:26035ms step_avg:94.67ms
step:276/1670 train_time:26129ms step_avg:94.67ms
step:277/1670 train_time:26222ms step_avg:94.66ms
step:278/1670 train_time:26314ms step_avg:94.66ms
step:279/1670 train_time:26406ms step_avg:94.65ms
step:280/1670 train_time:26498ms step_avg:94.64ms
step:281/1670 train_time:26589ms step_avg:94.62ms
step:282/1670 train_time:26681ms step_avg:94.61ms
step:283/1670 train_time:26773ms step_avg:94.61ms
step:284/1670 train_time:26867ms step_avg:94.60ms
step:285/1670 train_time:26960ms step_avg:94.60ms
step:286/1670 train_time:27053ms step_avg:94.59ms
step:287/1670 train_time:27147ms step_avg:94.59ms
step:288/1670 train_time:27239ms step_avg:94.58ms
step:289/1670 train_time:27332ms step_avg:94.57ms
step:290/1670 train_time:27424ms step_avg:94.57ms
step:291/1670 train_time:27516ms step_avg:94.56ms
step:292/1670 train_time:27608ms step_avg:94.55ms
step:293/1670 train_time:27701ms step_avg:94.54ms
step:294/1670 train_time:27793ms step_avg:94.53ms
step:295/1670 train_time:27885ms step_avg:94.53ms
step:296/1670 train_time:27978ms step_avg:94.52ms
step:297/1670 train_time:28071ms step_avg:94.51ms
step:298/1670 train_time:28163ms step_avg:94.51ms
step:299/1670 train_time:28255ms step_avg:94.50ms
step:300/1670 train_time:28348ms step_avg:94.49ms
step:301/1670 train_time:28440ms step_avg:94.48ms
step:302/1670 train_time:28532ms step_avg:94.48ms
step:303/1670 train_time:28625ms step_avg:94.47ms
step:304/1670 train_time:28717ms step_avg:94.46ms
step:305/1670 train_time:28809ms step_avg:94.46ms
step:306/1670 train_time:28903ms step_avg:94.45ms
step:307/1670 train_time:28995ms step_avg:94.45ms
step:308/1670 train_time:29088ms step_avg:94.44ms
step:309/1670 train_time:29181ms step_avg:94.44ms
step:310/1670 train_time:29275ms step_avg:94.44ms
step:311/1670 train_time:29367ms step_avg:94.43ms
step:312/1670 train_time:29460ms step_avg:94.42ms
step:313/1670 train_time:29553ms step_avg:94.42ms
step:314/1670 train_time:29645ms step_avg:94.41ms
step:315/1670 train_time:29737ms step_avg:94.40ms
step:316/1670 train_time:29830ms step_avg:94.40ms
step:317/1670 train_time:29922ms step_avg:94.39ms
step:318/1670 train_time:30015ms step_avg:94.39ms
step:319/1670 train_time:30108ms step_avg:94.38ms
step:320/1670 train_time:30201ms step_avg:94.38ms
step:321/1670 train_time:30294ms step_avg:94.37ms
step:322/1670 train_time:30386ms step_avg:94.37ms
step:323/1670 train_time:30479ms step_avg:94.36ms
step:324/1670 train_time:30571ms step_avg:94.35ms
step:325/1670 train_time:30663ms step_avg:94.35ms
step:326/1670 train_time:30755ms step_avg:94.34ms
step:327/1670 train_time:30848ms step_avg:94.34ms
step:328/1670 train_time:30940ms step_avg:94.33ms
step:329/1670 train_time:31033ms step_avg:94.32ms
step:330/1670 train_time:31125ms step_avg:94.32ms
step:331/1670 train_time:31218ms step_avg:94.31ms
step:332/1670 train_time:31311ms step_avg:94.31ms
step:333/1670 train_time:31403ms step_avg:94.30ms
step:334/1670 train_time:31495ms step_avg:94.30ms
step:335/1670 train_time:31587ms step_avg:94.29ms
step:336/1670 train_time:31679ms step_avg:94.28ms
step:337/1670 train_time:31772ms step_avg:94.28ms
step:338/1670 train_time:31864ms step_avg:94.27ms
step:339/1670 train_time:31957ms step_avg:94.27ms
step:340/1670 train_time:32050ms step_avg:94.26ms
step:341/1670 train_time:32142ms step_avg:94.26ms
step:342/1670 train_time:32234ms step_avg:94.25ms
step:343/1670 train_time:32327ms step_avg:94.25ms
step:344/1670 train_time:32419ms step_avg:94.24ms
step:345/1670 train_time:32512ms step_avg:94.24ms
step:346/1670 train_time:32604ms step_avg:94.23ms
step:347/1670 train_time:32696ms step_avg:94.23ms
step:348/1670 train_time:32789ms step_avg:94.22ms
step:349/1670 train_time:32881ms step_avg:94.22ms
step:350/1670 train_time:32974ms step_avg:94.21ms
step:351/1670 train_time:33067ms step_avg:94.21ms
step:352/1670 train_time:33160ms step_avg:94.20ms
step:353/1670 train_time:33253ms step_avg:94.20ms
step:354/1670 train_time:33345ms step_avg:94.20ms
step:355/1670 train_time:33437ms step_avg:94.19ms
step:356/1670 train_time:33530ms step_avg:94.19ms
step:357/1670 train_time:33622ms step_avg:94.18ms
step:358/1670 train_time:33715ms step_avg:94.18ms
step:359/1670 train_time:33807ms step_avg:94.17ms
step:360/1670 train_time:33899ms step_avg:94.16ms
step:361/1670 train_time:33992ms step_avg:94.16ms
step:362/1670 train_time:34085ms step_avg:94.16ms
step:363/1670 train_time:34178ms step_avg:94.15ms
step:364/1670 train_time:34271ms step_avg:94.15ms
step:365/1670 train_time:34362ms step_avg:94.14ms
step:366/1670 train_time:34455ms step_avg:94.14ms
step:367/1670 train_time:34548ms step_avg:94.14ms
step:368/1670 train_time:34640ms step_avg:94.13ms
step:369/1670 train_time:34733ms step_avg:94.13ms
step:370/1670 train_time:34825ms step_avg:94.12ms
step:371/1670 train_time:34918ms step_avg:94.12ms
step:372/1670 train_time:35010ms step_avg:94.11ms
step:373/1670 train_time:35104ms step_avg:94.11ms
step:374/1670 train_time:35195ms step_avg:94.11ms
step:375/1670 train_time:35288ms step_avg:94.10ms
step:375/1670 val_loss:3.8113 train_time:35378ms step_avg:94.34ms
step:376/1670 train_time:35403ms step_avg:94.16ms
step:377/1670 train_time:35478ms step_avg:94.11ms
step:378/1670 train_time:35577ms step_avg:94.12ms
step:379/1670 train_time:35673ms step_avg:94.12ms
step:380/1670 train_time:35765ms step_avg:94.12ms
step:381/1670 train_time:35857ms step_avg:94.11ms
step:382/1670 train_time:35949ms step_avg:94.11ms
step:383/1670 train_time:36040ms step_avg:94.10ms
step:384/1670 train_time:36132ms step_avg:94.09ms
step:385/1670 train_time:36224ms step_avg:94.09ms
step:386/1670 train_time:36315ms step_avg:94.08ms
step:387/1670 train_time:36407ms step_avg:94.08ms
step:388/1670 train_time:36502ms step_avg:94.08ms
step:389/1670 train_time:36597ms step_avg:94.08ms
step:390/1670 train_time:36690ms step_avg:94.08ms
step:391/1670 train_time:36782ms step_avg:94.07ms
step:392/1670 train_time:36874ms step_avg:94.07ms
step:393/1670 train_time:36967ms step_avg:94.06ms
step:394/1670 train_time:37059ms step_avg:94.06ms
step:395/1670 train_time:37151ms step_avg:94.05ms
step:396/1670 train_time:37242ms step_avg:94.05ms
step:397/1670 train_time:37333ms step_avg:94.04ms
step:398/1670 train_time:37426ms step_avg:94.03ms
step:399/1670 train_time:37521ms step_avg:94.04ms
step:400/1670 train_time:37615ms step_avg:94.04ms
step:401/1670 train_time:37708ms step_avg:94.03ms
step:402/1670 train_time:37802ms step_avg:94.03ms
step:403/1670 train_time:37894ms step_avg:94.03ms
step:404/1670 train_time:37986ms step_avg:94.02ms
step:405/1670 train_time:38078ms step_avg:94.02ms
step:406/1670 train_time:38170ms step_avg:94.01ms
step:407/1670 train_time:38261ms step_avg:94.01ms
step:408/1670 train_time:38353ms step_avg:94.00ms
step:409/1670 train_time:38446ms step_avg:94.00ms
step:410/1670 train_time:38539ms step_avg:94.00ms
step:411/1670 train_time:38632ms step_avg:94.00ms
step:412/1670 train_time:38725ms step_avg:93.99ms
step:413/1670 train_time:38819ms step_avg:93.99ms
step:414/1670 train_time:38912ms step_avg:93.99ms
step:415/1670 train_time:39004ms step_avg:93.99ms
step:416/1670 train_time:39095ms step_avg:93.98ms
step:417/1670 train_time:39187ms step_avg:93.97ms
step:418/1670 train_time:39280ms step_avg:93.97ms
step:419/1670 train_time:39373ms step_avg:93.97ms
step:420/1670 train_time:39464ms step_avg:93.96ms
step:421/1670 train_time:39557ms step_avg:93.96ms
step:422/1670 train_time:39650ms step_avg:93.96ms
step:423/1670 train_time:39743ms step_avg:93.95ms
step:424/1670 train_time:39835ms step_avg:93.95ms
step:425/1670 train_time:40165ms step_avg:94.51ms
step:426/1670 train_time:40358ms step_avg:94.74ms
step:427/1670 train_time:40448ms step_avg:94.73ms
step:428/1670 train_time:40539ms step_avg:94.72ms
step:429/1670 train_time:40630ms step_avg:94.71ms
step:430/1670 train_time:40722ms step_avg:94.70ms
step:431/1670 train_time:40814ms step_avg:94.70ms
step:432/1670 train_time:40905ms step_avg:94.69ms
step:433/1670 train_time:40997ms step_avg:94.68ms
step:434/1670 train_time:41088ms step_avg:94.67ms
step:435/1670 train_time:41182ms step_avg:94.67ms
step:436/1670 train_time:41276ms step_avg:94.67ms
step:437/1670 train_time:41374ms step_avg:94.68ms
step:438/1670 train_time:41467ms step_avg:94.67ms
step:439/1670 train_time:41560ms step_avg:94.67ms
step:440/1670 train_time:41652ms step_avg:94.66ms
step:441/1670 train_time:41744ms step_avg:94.66ms
step:442/1670 train_time:41835ms step_avg:94.65ms
step:443/1670 train_time:41931ms step_avg:94.65ms
step:444/1670 train_time:42024ms step_avg:94.65ms
step:445/1670 train_time:42116ms step_avg:94.64ms
step:446/1670 train_time:42208ms step_avg:94.64ms
step:447/1670 train_time:42297ms step_avg:94.63ms
step:448/1670 train_time:42391ms step_avg:94.62ms
step:449/1670 train_time:42484ms step_avg:94.62ms
step:450/1670 train_time:42577ms step_avg:94.62ms
step:451/1670 train_time:42670ms step_avg:94.61ms
step:452/1670 train_time:42762ms step_avg:94.61ms
step:453/1670 train_time:42854ms step_avg:94.60ms
step:454/1670 train_time:42945ms step_avg:94.59ms
step:455/1670 train_time:43037ms step_avg:94.59ms
step:456/1670 train_time:43129ms step_avg:94.58ms
step:457/1670 train_time:43223ms step_avg:94.58ms
step:458/1670 train_time:43316ms step_avg:94.58ms
step:459/1670 train_time:43408ms step_avg:94.57ms
step:460/1670 train_time:43501ms step_avg:94.57ms
step:461/1670 train_time:43594ms step_avg:94.56ms
step:462/1670 train_time:43686ms step_avg:94.56ms
step:463/1670 train_time:43779ms step_avg:94.56ms
step:464/1670 train_time:43872ms step_avg:94.55ms
step:465/1670 train_time:43964ms step_avg:94.55ms
step:466/1670 train_time:44055ms step_avg:94.54ms
step:467/1670 train_time:44148ms step_avg:94.54ms
step:468/1670 train_time:44241ms step_avg:94.53ms
step:469/1670 train_time:44334ms step_avg:94.53ms
step:470/1670 train_time:44427ms step_avg:94.52ms
step:471/1670 train_time:44520ms step_avg:94.52ms
step:472/1670 train_time:44613ms step_avg:94.52ms
step:473/1670 train_time:44705ms step_avg:94.51ms
step:474/1670 train_time:44798ms step_avg:94.51ms
step:475/1670 train_time:44891ms step_avg:94.51ms
step:476/1670 train_time:44983ms step_avg:94.50ms
step:477/1670 train_time:45075ms step_avg:94.50ms
step:478/1670 train_time:45168ms step_avg:94.49ms
step:479/1670 train_time:45259ms step_avg:94.49ms
step:480/1670 train_time:45352ms step_avg:94.48ms
step:481/1670 train_time:45444ms step_avg:94.48ms
step:482/1670 train_time:45537ms step_avg:94.47ms
step:483/1670 train_time:45629ms step_avg:94.47ms
step:484/1670 train_time:45723ms step_avg:94.47ms
step:485/1670 train_time:45816ms step_avg:94.47ms
step:486/1670 train_time:45908ms step_avg:94.46ms
step:487/1670 train_time:46000ms step_avg:94.46ms
step:488/1670 train_time:46092ms step_avg:94.45ms
step:489/1670 train_time:46185ms step_avg:94.45ms
step:490/1670 train_time:46277ms step_avg:94.44ms
step:491/1670 train_time:46369ms step_avg:94.44ms
step:492/1670 train_time:46462ms step_avg:94.44ms
step:493/1670 train_time:46554ms step_avg:94.43ms
step:494/1670 train_time:46647ms step_avg:94.43ms
step:495/1670 train_time:46740ms step_avg:94.43ms
step:496/1670 train_time:46834ms step_avg:94.42ms
step:497/1670 train_time:46926ms step_avg:94.42ms
step:498/1670 train_time:47019ms step_avg:94.42ms
step:499/1670 train_time:47113ms step_avg:94.41ms
step:500/1670 train_time:47204ms step_avg:94.41ms
step:500/1670 val_loss:3.7121 train_time:47295ms step_avg:94.59ms
step:501/1670 train_time:47320ms step_avg:94.45ms
step:502/1670 train_time:47397ms step_avg:94.42ms
step:503/1670 train_time:47494ms step_avg:94.42ms
step:504/1670 train_time:47588ms step_avg:94.42ms
step:505/1670 train_time:47680ms step_avg:94.42ms
step:506/1670 train_time:47772ms step_avg:94.41ms
step:507/1670 train_time:47863ms step_avg:94.40ms
step:508/1670 train_time:47954ms step_avg:94.40ms
step:509/1670 train_time:48045ms step_avg:94.39ms
step:510/1670 train_time:48137ms step_avg:94.39ms
step:511/1670 train_time:48229ms step_avg:94.38ms
step:512/1670 train_time:48321ms step_avg:94.38ms
step:513/1670 train_time:48415ms step_avg:94.38ms
step:514/1670 train_time:48508ms step_avg:94.37ms
step:515/1670 train_time:48602ms step_avg:94.37ms
step:516/1670 train_time:48694ms step_avg:94.37ms
step:517/1670 train_time:48786ms step_avg:94.36ms
step:518/1670 train_time:48879ms step_avg:94.36ms
step:519/1670 train_time:48971ms step_avg:94.36ms
step:520/1670 train_time:49062ms step_avg:94.35ms
step:521/1670 train_time:49154ms step_avg:94.34ms
step:522/1670 train_time:49245ms step_avg:94.34ms
step:523/1670 train_time:49339ms step_avg:94.34ms
step:524/1670 train_time:49432ms step_avg:94.34ms
step:525/1670 train_time:49526ms step_avg:94.34ms
step:526/1670 train_time:49619ms step_avg:94.33ms
step:527/1670 train_time:49711ms step_avg:94.33ms
step:528/1670 train_time:49804ms step_avg:94.33ms
step:529/1670 train_time:49896ms step_avg:94.32ms
step:530/1670 train_time:49989ms step_avg:94.32ms
step:531/1670 train_time:50081ms step_avg:94.31ms
step:532/1670 train_time:50173ms step_avg:94.31ms
step:533/1670 train_time:50265ms step_avg:94.31ms
step:534/1670 train_time:50357ms step_avg:94.30ms
step:535/1670 train_time:50451ms step_avg:94.30ms
step:536/1670 train_time:50544ms step_avg:94.30ms
step:537/1670 train_time:50636ms step_avg:94.29ms
step:538/1670 train_time:50729ms step_avg:94.29ms
step:539/1670 train_time:50822ms step_avg:94.29ms
step:540/1670 train_time:50914ms step_avg:94.29ms
step:541/1670 train_time:51006ms step_avg:94.28ms
step:542/1670 train_time:51098ms step_avg:94.28ms
step:543/1670 train_time:51191ms step_avg:94.27ms
step:544/1670 train_time:51283ms step_avg:94.27ms
step:545/1670 train_time:51375ms step_avg:94.27ms
step:546/1670 train_time:51469ms step_avg:94.27ms
step:547/1670 train_time:51562ms step_avg:94.26ms
step:548/1670 train_time:51655ms step_avg:94.26ms
step:549/1670 train_time:51748ms step_avg:94.26ms
step:550/1670 train_time:51841ms step_avg:94.26ms
step:551/1670 train_time:51934ms step_avg:94.25ms
step:552/1670 train_time:52026ms step_avg:94.25ms
step:553/1670 train_time:52118ms step_avg:94.25ms
step:554/1670 train_time:52210ms step_avg:94.24ms
step:555/1670 train_time:52304ms step_avg:94.24ms
step:556/1670 train_time:52396ms step_avg:94.24ms
step:557/1670 train_time:52488ms step_avg:94.23ms
step:558/1670 train_time:52690ms step_avg:94.43ms
step:559/1670 train_time:52758ms step_avg:94.38ms
step:560/1670 train_time:52851ms step_avg:94.38ms
step:561/1670 train_time:52943ms step_avg:94.37ms
step:562/1670 train_time:53036ms step_avg:94.37ms
step:563/1670 train_time:53129ms step_avg:94.37ms
step:564/1670 train_time:53221ms step_avg:94.36ms
step:565/1670 train_time:53314ms step_avg:94.36ms
step:566/1670 train_time:53407ms step_avg:94.36ms
step:567/1670 train_time:53500ms step_avg:94.36ms
step:568/1670 train_time:53598ms step_avg:94.36ms
step:569/1670 train_time:53695ms step_avg:94.37ms
step:570/1670 train_time:53789ms step_avg:94.37ms
step:571/1670 train_time:53883ms step_avg:94.37ms
step:572/1670 train_time:53975ms step_avg:94.36ms
step:573/1670 train_time:54068ms step_avg:94.36ms
step:574/1670 train_time:54161ms step_avg:94.36ms
step:575/1670 train_time:54254ms step_avg:94.36ms
step:576/1670 train_time:54347ms step_avg:94.35ms
step:577/1670 train_time:54440ms step_avg:94.35ms
step:578/1670 train_time:54535ms step_avg:94.35ms
step:579/1670 train_time:54631ms step_avg:94.35ms
step:580/1670 train_time:54726ms step_avg:94.36ms
step:581/1670 train_time:54821ms step_avg:94.36ms
step:582/1670 train_time:54914ms step_avg:94.35ms
step:583/1670 train_time:55008ms step_avg:94.35ms
step:584/1670 train_time:55101ms step_avg:94.35ms
step:585/1670 train_time:55195ms step_avg:94.35ms
step:586/1670 train_time:55287ms step_avg:94.35ms
step:587/1670 train_time:55380ms step_avg:94.34ms
step:588/1670 train_time:55474ms step_avg:94.34ms
step:589/1670 train_time:55568ms step_avg:94.34ms
step:590/1670 train_time:55663ms step_avg:94.34ms
step:591/1670 train_time:55757ms step_avg:94.34ms
step:592/1670 train_time:55851ms step_avg:94.34ms
step:593/1670 train_time:55944ms step_avg:94.34ms
step:594/1670 train_time:56038ms step_avg:94.34ms
step:595/1670 train_time:56132ms step_avg:94.34ms
step:596/1670 train_time:56224ms step_avg:94.34ms
step:597/1670 train_time:56318ms step_avg:94.33ms
step:598/1670 train_time:56411ms step_avg:94.33ms
step:599/1670 train_time:56505ms step_avg:94.33ms
step:600/1670 train_time:56599ms step_avg:94.33ms
step:601/1670 train_time:56692ms step_avg:94.33ms
step:602/1670 train_time:56786ms step_avg:94.33ms
step:603/1670 train_time:56880ms step_avg:94.33ms
step:604/1670 train_time:56974ms step_avg:94.33ms
step:605/1670 train_time:57067ms step_avg:94.33ms
step:606/1670 train_time:57161ms step_avg:94.33ms
step:607/1670 train_time:57255ms step_avg:94.32ms
step:608/1670 train_time:57348ms step_avg:94.32ms
step:609/1670 train_time:57442ms step_avg:94.32ms
step:610/1670 train_time:57535ms step_avg:94.32ms
step:611/1670 train_time:57629ms step_avg:94.32ms
step:612/1670 train_time:57723ms step_avg:94.32ms
step:613/1670 train_time:57816ms step_avg:94.32ms
step:614/1670 train_time:57910ms step_avg:94.32ms
step:615/1670 train_time:58004ms step_avg:94.32ms
step:616/1670 train_time:58098ms step_avg:94.31ms
step:617/1670 train_time:58191ms step_avg:94.31ms
step:618/1670 train_time:58284ms step_avg:94.31ms
step:619/1670 train_time:58378ms step_avg:94.31ms
step:620/1670 train_time:58472ms step_avg:94.31ms
step:621/1670 train_time:58566ms step_avg:94.31ms
step:622/1670 train_time:58661ms step_avg:94.31ms
step:623/1670 train_time:58754ms step_avg:94.31ms
step:624/1670 train_time:58847ms step_avg:94.31ms
step:625/1670 train_time:58941ms step_avg:94.31ms
step:625/1670 val_loss:3.6111 train_time:59034ms step_avg:94.45ms
step:626/1670 train_time:59059ms step_avg:94.34ms
step:627/1670 train_time:59141ms step_avg:94.32ms
step:628/1670 train_time:59238ms step_avg:94.33ms
step:629/1670 train_time:59333ms step_avg:94.33ms
step:630/1670 train_time:59426ms step_avg:94.33ms
step:631/1670 train_time:59519ms step_avg:94.32ms
step:632/1670 train_time:59612ms step_avg:94.32ms
step:633/1670 train_time:59704ms step_avg:94.32ms
step:634/1670 train_time:59797ms step_avg:94.32ms
step:635/1670 train_time:59889ms step_avg:94.31ms
step:636/1670 train_time:59982ms step_avg:94.31ms
step:637/1670 train_time:60078ms step_avg:94.31ms
step:638/1670 train_time:60175ms step_avg:94.32ms
step:639/1670 train_time:60618ms step_avg:94.86ms
step:640/1670 train_time:60698ms step_avg:94.84ms
step:641/1670 train_time:60790ms step_avg:94.84ms
step:642/1670 train_time:60883ms step_avg:94.83ms
step:643/1670 train_time:60976ms step_avg:94.83ms
step:644/1670 train_time:61069ms step_avg:94.83ms
step:645/1670 train_time:61161ms step_avg:94.82ms
step:646/1670 train_time:61253ms step_avg:94.82ms
step:647/1670 train_time:61346ms step_avg:94.82ms
step:648/1670 train_time:61439ms step_avg:94.81ms
step:649/1670 train_time:61536ms step_avg:94.82ms
step:650/1670 train_time:61635ms step_avg:94.82ms
step:651/1670 train_time:61730ms step_avg:94.82ms
step:652/1670 train_time:61823ms step_avg:94.82ms
step:653/1670 train_time:61916ms step_avg:94.82ms
step:654/1670 train_time:62009ms step_avg:94.81ms
step:655/1670 train_time:62101ms step_avg:94.81ms
step:656/1670 train_time:62194ms step_avg:94.81ms
step:657/1670 train_time:62286ms step_avg:94.80ms
step:658/1670 train_time:62379ms step_avg:94.80ms
step:659/1670 train_time:62474ms step_avg:94.80ms
step:660/1670 train_time:62569ms step_avg:94.80ms
step:661/1670 train_time:62665ms step_avg:94.80ms
step:662/1670 train_time:62758ms step_avg:94.80ms
step:663/1670 train_time:62852ms step_avg:94.80ms
step:664/1670 train_time:62946ms step_avg:94.80ms
step:665/1670 train_time:63039ms step_avg:94.80ms
step:666/1670 train_time:63132ms step_avg:94.79ms
step:667/1670 train_time:63225ms step_avg:94.79ms
step:668/1670 train_time:63318ms step_avg:94.79ms
step:669/1670 train_time:63412ms step_avg:94.79ms
step:670/1670 train_time:63506ms step_avg:94.79ms
step:671/1670 train_time:63601ms step_avg:94.79ms
step:672/1670 train_time:63694ms step_avg:94.78ms
step:673/1670 train_time:63789ms step_avg:94.78ms
step:674/1670 train_time:63882ms step_avg:94.78ms
step:675/1670 train_time:63976ms step_avg:94.78ms
step:676/1670 train_time:64069ms step_avg:94.78ms
step:677/1670 train_time:64163ms step_avg:94.78ms
step:678/1670 train_time:64256ms step_avg:94.77ms
step:679/1670 train_time:64350ms step_avg:94.77ms
step:680/1670 train_time:64443ms step_avg:94.77ms
step:681/1670 train_time:64537ms step_avg:94.77ms
step:682/1670 train_time:64631ms step_avg:94.77ms
step:683/1670 train_time:64725ms step_avg:94.77ms
step:684/1670 train_time:64819ms step_avg:94.76ms
step:685/1670 train_time:64912ms step_avg:94.76ms
step:686/1670 train_time:65006ms step_avg:94.76ms
step:687/1670 train_time:65099ms step_avg:94.76ms
step:688/1670 train_time:65193ms step_avg:94.76ms
step:689/1670 train_time:65285ms step_avg:94.75ms
step:690/1670 train_time:65379ms step_avg:94.75ms
step:691/1670 train_time:65474ms step_avg:94.75ms
step:692/1670 train_time:65567ms step_avg:94.75ms
step:693/1670 train_time:65661ms step_avg:94.75ms
step:694/1670 train_time:65755ms step_avg:94.75ms
step:695/1670 train_time:65849ms step_avg:94.75ms
step:696/1670 train_time:65943ms step_avg:94.75ms
step:697/1670 train_time:66036ms step_avg:94.74ms
step:698/1670 train_time:66130ms step_avg:94.74ms
step:699/1670 train_time:66223ms step_avg:94.74ms
step:700/1670 train_time:66316ms step_avg:94.74ms
step:701/1670 train_time:66410ms step_avg:94.74ms
step:702/1670 train_time:66504ms step_avg:94.73ms
step:703/1670 train_time:66598ms step_avg:94.73ms
step:704/1670 train_time:66692ms step_avg:94.73ms
step:705/1670 train_time:66785ms step_avg:94.73ms
step:706/1670 train_time:66879ms step_avg:94.73ms
step:707/1670 train_time:66973ms step_avg:94.73ms
step:708/1670 train_time:67067ms step_avg:94.73ms
step:709/1670 train_time:67161ms step_avg:94.73ms
step:710/1670 train_time:67254ms step_avg:94.72ms
step:711/1670 train_time:67348ms step_avg:94.72ms
step:712/1670 train_time:67442ms step_avg:94.72ms
step:713/1670 train_time:67535ms step_avg:94.72ms
step:714/1670 train_time:67629ms step_avg:94.72ms
step:715/1670 train_time:67723ms step_avg:94.72ms
step:716/1670 train_time:67816ms step_avg:94.72ms
step:717/1670 train_time:67910ms step_avg:94.71ms
step:718/1670 train_time:68004ms step_avg:94.71ms
step:719/1670 train_time:68098ms step_avg:94.71ms
step:720/1670 train_time:68192ms step_avg:94.71ms
step:721/1670 train_time:68286ms step_avg:94.71ms
step:722/1670 train_time:68381ms step_avg:94.71ms
step:723/1670 train_time:68474ms step_avg:94.71ms
step:724/1670 train_time:68568ms step_avg:94.71ms
step:725/1670 train_time:68661ms step_avg:94.70ms
step:726/1670 train_time:68754ms step_avg:94.70ms
step:727/1670 train_time:68848ms step_avg:94.70ms
step:728/1670 train_time:68943ms step_avg:94.70ms
step:729/1670 train_time:69038ms step_avg:94.70ms
step:730/1670 train_time:69132ms step_avg:94.70ms
step:731/1670 train_time:69226ms step_avg:94.70ms
step:732/1670 train_time:69320ms step_avg:94.70ms
step:733/1670 train_time:69414ms step_avg:94.70ms
step:734/1670 train_time:69507ms step_avg:94.70ms
step:735/1670 train_time:69602ms step_avg:94.70ms
step:736/1670 train_time:69695ms step_avg:94.69ms
step:737/1670 train_time:69789ms step_avg:94.69ms
step:738/1670 train_time:69884ms step_avg:94.69ms
step:739/1670 train_time:69977ms step_avg:94.69ms
step:740/1670 train_time:70071ms step_avg:94.69ms
step:741/1670 train_time:70166ms step_avg:94.69ms
step:742/1670 train_time:70259ms step_avg:94.69ms
step:743/1670 train_time:70353ms step_avg:94.69ms
step:744/1670 train_time:70446ms step_avg:94.69ms
step:745/1670 train_time:70539ms step_avg:94.68ms
step:746/1670 train_time:70633ms step_avg:94.68ms
step:747/1670 train_time:70726ms step_avg:94.68ms
step:748/1670 train_time:70819ms step_avg:94.68ms
step:749/1670 train_time:70912ms step_avg:94.68ms
step:750/1670 train_time:71007ms step_avg:94.68ms
step:750/1670 val_loss:3.5617 train_time:71099ms step_avg:94.80ms
step:751/1670 train_time:71124ms step_avg:94.71ms
step:752/1670 train_time:71201ms step_avg:94.68ms
step:753/1670 train_time:71302ms step_avg:94.69ms
step:754/1670 train_time:71397ms step_avg:94.69ms
step:755/1670 train_time:71490ms step_avg:94.69ms
step:756/1670 train_time:71583ms step_avg:94.69ms
step:757/1670 train_time:71675ms step_avg:94.68ms
step:758/1670 train_time:71768ms step_avg:94.68ms
step:759/1670 train_time:71861ms step_avg:94.68ms
step:760/1670 train_time:71953ms step_avg:94.68ms
step:761/1670 train_time:72047ms step_avg:94.67ms
step:762/1670 train_time:72142ms step_avg:94.67ms
step:763/1670 train_time:72239ms step_avg:94.68ms
step:764/1670 train_time:72336ms step_avg:94.68ms
step:765/1670 train_time:72429ms step_avg:94.68ms
step:766/1670 train_time:72522ms step_avg:94.68ms
step:767/1670 train_time:72616ms step_avg:94.68ms
step:768/1670 train_time:72709ms step_avg:94.67ms
step:769/1670 train_time:72802ms step_avg:94.67ms
step:770/1670 train_time:72894ms step_avg:94.67ms
step:771/1670 train_time:72987ms step_avg:94.67ms
step:772/1670 train_time:73081ms step_avg:94.66ms
step:773/1670 train_time:73176ms step_avg:94.66ms
step:774/1670 train_time:73271ms step_avg:94.67ms
step:775/1670 train_time:73366ms step_avg:94.67ms
step:776/1670 train_time:73461ms step_avg:94.67ms
step:777/1670 train_time:73554ms step_avg:94.66ms
step:778/1670 train_time:73647ms step_avg:94.66ms
step:779/1670 train_time:73742ms step_avg:94.66ms
step:780/1670 train_time:73835ms step_avg:94.66ms
step:781/1670 train_time:73929ms step_avg:94.66ms
step:782/1670 train_time:74021ms step_avg:94.66ms
step:783/1670 train_time:74115ms step_avg:94.65ms
step:784/1670 train_time:74209ms step_avg:94.65ms
step:785/1670 train_time:74302ms step_avg:94.65ms
step:786/1670 train_time:74397ms step_avg:94.65ms
step:787/1670 train_time:74491ms step_avg:94.65ms
step:788/1670 train_time:74584ms step_avg:94.65ms
step:789/1670 train_time:74678ms step_avg:94.65ms
step:790/1670 train_time:74771ms step_avg:94.65ms
step:791/1670 train_time:74865ms step_avg:94.65ms
step:792/1670 train_time:74959ms step_avg:94.64ms
step:793/1670 train_time:75053ms step_avg:94.64ms
step:794/1670 train_time:75146ms step_avg:94.64ms
step:795/1670 train_time:75240ms step_avg:94.64ms
step:796/1670 train_time:75334ms step_avg:94.64ms
step:797/1670 train_time:75428ms step_avg:94.64ms
step:798/1670 train_time:75522ms step_avg:94.64ms
step:799/1670 train_time:75615ms step_avg:94.64ms
step:800/1670 train_time:75709ms step_avg:94.64ms
step:801/1670 train_time:75803ms step_avg:94.64ms
step:802/1670 train_time:75896ms step_avg:94.63ms
step:803/1670 train_time:75990ms step_avg:94.63ms
step:804/1670 train_time:76083ms step_avg:94.63ms
step:805/1670 train_time:76178ms step_avg:94.63ms
step:806/1670 train_time:76271ms step_avg:94.63ms
step:807/1670 train_time:76364ms step_avg:94.63ms
step:808/1670 train_time:76458ms step_avg:94.63ms
step:809/1670 train_time:76551ms step_avg:94.62ms
step:810/1670 train_time:76646ms step_avg:94.62ms
step:811/1670 train_time:76739ms step_avg:94.62ms
step:812/1670 train_time:76832ms step_avg:94.62ms
step:813/1670 train_time:76925ms step_avg:94.62ms
step:814/1670 train_time:77019ms step_avg:94.62ms
step:815/1670 train_time:77112ms step_avg:94.62ms
step:816/1670 train_time:77207ms step_avg:94.62ms
step:817/1670 train_time:77301ms step_avg:94.62ms
step:818/1670 train_time:77394ms step_avg:94.61ms
step:819/1670 train_time:77488ms step_avg:94.61ms
step:820/1670 train_time:77582ms step_avg:94.61ms
step:821/1670 train_time:77676ms step_avg:94.61ms
step:822/1670 train_time:77770ms step_avg:94.61ms
step:823/1670 train_time:77864ms step_avg:94.61ms
step:824/1670 train_time:77958ms step_avg:94.61ms
step:825/1670 train_time:78051ms step_avg:94.61ms
step:826/1670 train_time:78145ms step_avg:94.61ms
step:827/1670 train_time:78240ms step_avg:94.61ms
step:828/1670 train_time:78334ms step_avg:94.61ms
step:829/1670 train_time:78427ms step_avg:94.60ms
step:830/1670 train_time:78521ms step_avg:94.60ms
step:831/1670 train_time:78614ms step_avg:94.60ms
step:832/1670 train_time:78709ms step_avg:94.60ms
step:833/1670 train_time:78802ms step_avg:94.60ms
step:834/1670 train_time:78896ms step_avg:94.60ms
step:835/1670 train_time:78989ms step_avg:94.60ms
step:836/1670 train_time:79083ms step_avg:94.60ms
step:837/1670 train_time:79178ms step_avg:94.60ms
step:838/1670 train_time:79271ms step_avg:94.60ms
step:839/1670 train_time:79365ms step_avg:94.59ms
step:840/1670 train_time:79459ms step_avg:94.59ms
step:841/1670 train_time:79553ms step_avg:94.59ms
step:842/1670 train_time:79646ms step_avg:94.59ms
step:843/1670 train_time:79740ms step_avg:94.59ms
step:844/1670 train_time:79833ms step_avg:94.59ms
step:845/1670 train_time:79927ms step_avg:94.59ms
step:846/1670 train_time:80021ms step_avg:94.59ms
step:847/1670 train_time:80115ms step_avg:94.59ms
step:848/1670 train_time:80209ms step_avg:94.59ms
step:849/1670 train_time:80303ms step_avg:94.59ms
step:850/1670 train_time:80397ms step_avg:94.58ms
step:851/1670 train_time:80815ms step_avg:94.97ms
step:852/1670 train_time:80917ms step_avg:94.97ms
step:853/1670 train_time:81009ms step_avg:94.97ms
step:854/1670 train_time:81102ms step_avg:94.97ms
step:855/1670 train_time:81195ms step_avg:94.96ms
step:856/1670 train_time:81287ms step_avg:94.96ms
step:857/1670 train_time:81381ms step_avg:94.96ms
step:858/1670 train_time:81473ms step_avg:94.96ms
step:859/1670 train_time:81566ms step_avg:94.95ms
step:860/1670 train_time:81659ms step_avg:94.95ms
step:861/1670 train_time:81755ms step_avg:94.95ms
step:862/1670 train_time:81853ms step_avg:94.96ms
step:863/1670 train_time:81950ms step_avg:94.96ms
step:864/1670 train_time:82046ms step_avg:94.96ms
step:865/1670 train_time:82138ms step_avg:94.96ms
step:866/1670 train_time:82232ms step_avg:94.96ms
step:867/1670 train_time:82325ms step_avg:94.95ms
step:868/1670 train_time:82418ms step_avg:94.95ms
step:869/1670 train_time:82511ms step_avg:94.95ms
step:870/1670 train_time:82604ms step_avg:94.95ms
step:871/1670 train_time:82698ms step_avg:94.95ms
step:872/1670 train_time:82794ms step_avg:94.95ms
step:873/1670 train_time:82888ms step_avg:94.95ms
step:874/1670 train_time:82983ms step_avg:94.95ms
step:875/1670 train_time:83077ms step_avg:94.94ms
step:875/1670 val_loss:3.5158 train_time:83168ms step_avg:95.05ms
step:876/1670 train_time:83193ms step_avg:94.97ms
step:877/1670 train_time:83269ms step_avg:94.95ms
step:878/1670 train_time:83371ms step_avg:94.96ms
step:879/1670 train_time:83468ms step_avg:94.96ms
step:880/1670 train_time:83561ms step_avg:94.96ms
step:881/1670 train_time:83654ms step_avg:94.95ms
step:882/1670 train_time:83746ms step_avg:94.95ms
step:883/1670 train_time:83839ms step_avg:94.95ms
step:884/1670 train_time:83932ms step_avg:94.95ms
step:885/1670 train_time:84024ms step_avg:94.94ms
step:886/1670 train_time:84117ms step_avg:94.94ms
step:887/1670 train_time:84211ms step_avg:94.94ms
step:888/1670 train_time:84308ms step_avg:94.94ms
step:889/1670 train_time:84405ms step_avg:94.94ms
step:890/1670 train_time:84500ms step_avg:94.94ms
step:891/1670 train_time:84593ms step_avg:94.94ms
step:892/1670 train_time:84686ms step_avg:94.94ms
step:893/1670 train_time:84778ms step_avg:94.94ms
step:894/1670 train_time:84872ms step_avg:94.94ms
step:895/1670 train_time:84965ms step_avg:94.93ms
step:896/1670 train_time:85058ms step_avg:94.93ms
step:897/1670 train_time:85152ms step_avg:94.93ms
step:898/1670 train_time:85247ms step_avg:94.93ms
step:899/1670 train_time:85342ms step_avg:94.93ms
step:900/1670 train_time:85437ms step_avg:94.93ms
step:901/1670 train_time:85530ms step_avg:94.93ms
step:902/1670 train_time:85623ms step_avg:94.93ms
step:903/1670 train_time:85717ms step_avg:94.93ms
step:904/1670 train_time:85811ms step_avg:94.92ms
step:905/1670 train_time:85904ms step_avg:94.92ms
step:906/1670 train_time:85998ms step_avg:94.92ms
step:907/1670 train_time:86092ms step_avg:94.92ms
step:908/1670 train_time:86184ms step_avg:94.92ms
step:909/1670 train_time:86278ms step_avg:94.92ms
step:910/1670 train_time:86373ms step_avg:94.92ms
step:911/1670 train_time:86467ms step_avg:94.91ms
step:912/1670 train_time:86562ms step_avg:94.91ms
step:913/1670 train_time:86655ms step_avg:94.91ms
step:914/1670 train_time:86748ms step_avg:94.91ms
step:915/1670 train_time:86842ms step_avg:94.91ms
step:916/1670 train_time:86936ms step_avg:94.91ms
step:917/1670 train_time:87029ms step_avg:94.91ms
step:918/1670 train_time:87122ms step_avg:94.90ms
step:919/1670 train_time:87216ms step_avg:94.90ms
step:920/1670 train_time:87311ms step_avg:94.90ms
step:921/1670 train_time:87405ms step_avg:94.90ms
step:922/1670 train_time:87498ms step_avg:94.90ms
step:923/1670 train_time:87593ms step_avg:94.90ms
step:924/1670 train_time:87686ms step_avg:94.90ms
step:925/1670 train_time:87780ms step_avg:94.90ms
step:926/1670 train_time:87873ms step_avg:94.90ms
step:927/1670 train_time:87966ms step_avg:94.89ms
step:928/1670 train_time:88060ms step_avg:94.89ms
step:929/1670 train_time:88153ms step_avg:94.89ms
step:930/1670 train_time:88246ms step_avg:94.89ms
step:931/1670 train_time:88340ms step_avg:94.89ms
step:932/1670 train_time:88435ms step_avg:94.89ms
step:933/1670 train_time:88528ms step_avg:94.89ms
step:934/1670 train_time:88622ms step_avg:94.88ms
step:935/1670 train_time:88716ms step_avg:94.88ms
step:936/1670 train_time:88810ms step_avg:94.88ms
step:937/1670 train_time:88903ms step_avg:94.88ms
step:938/1670 train_time:88998ms step_avg:94.88ms
step:939/1670 train_time:89091ms step_avg:94.88ms
step:940/1670 train_time:89184ms step_avg:94.88ms
step:941/1670 train_time:89278ms step_avg:94.88ms
step:942/1670 train_time:89372ms step_avg:94.87ms
step:943/1670 train_time:89465ms step_avg:94.87ms
step:944/1670 train_time:89560ms step_avg:94.87ms
step:945/1670 train_time:89653ms step_avg:94.87ms
step:946/1670 train_time:89747ms step_avg:94.87ms
step:947/1670 train_time:89842ms step_avg:94.87ms
step:948/1670 train_time:89936ms step_avg:94.87ms
step:949/1670 train_time:90030ms step_avg:94.87ms
step:950/1670 train_time:90123ms step_avg:94.87ms
step:951/1670 train_time:90217ms step_avg:94.87ms
step:952/1670 train_time:90310ms step_avg:94.86ms
step:953/1670 train_time:90405ms step_avg:94.86ms
step:954/1670 train_time:90499ms step_avg:94.86ms
step:955/1670 train_time:90592ms step_avg:94.86ms
step:956/1670 train_time:90685ms step_avg:94.86ms
step:957/1670 train_time:90779ms step_avg:94.86ms
step:958/1670 train_time:90873ms step_avg:94.86ms
step:959/1670 train_time:90966ms step_avg:94.86ms
step:960/1670 train_time:91059ms step_avg:94.85ms
step:961/1670 train_time:91153ms step_avg:94.85ms
step:962/1670 train_time:91247ms step_avg:94.85ms
step:963/1670 train_time:91341ms step_avg:94.85ms
step:964/1670 train_time:91435ms step_avg:94.85ms
step:965/1670 train_time:91529ms step_avg:94.85ms
step:966/1670 train_time:91623ms step_avg:94.85ms
step:967/1670 train_time:91717ms step_avg:94.85ms
step:968/1670 train_time:91811ms step_avg:94.85ms
step:969/1670 train_time:91905ms step_avg:94.84ms
step:970/1670 train_time:91999ms step_avg:94.84ms
step:971/1670 train_time:92091ms step_avg:94.84ms
step:972/1670 train_time:92185ms step_avg:94.84ms
step:973/1670 train_time:92279ms step_avg:94.84ms
step:974/1670 train_time:92373ms step_avg:94.84ms
step:975/1670 train_time:92466ms step_avg:94.84ms
step:976/1670 train_time:92559ms step_avg:94.84ms
step:977/1670 train_time:92652ms step_avg:94.83ms
step:978/1670 train_time:92747ms step_avg:94.83ms
step:979/1670 train_time:92842ms step_avg:94.83ms
step:980/1670 train_time:92936ms step_avg:94.83ms
step:981/1670 train_time:93029ms step_avg:94.83ms
step:982/1670 train_time:93123ms step_avg:94.83ms
step:983/1670 train_time:93217ms step_avg:94.83ms
step:984/1670 train_time:93310ms step_avg:94.83ms
step:985/1670 train_time:93405ms step_avg:94.83ms
step:986/1670 train_time:93497ms step_avg:94.82ms
step:987/1670 train_time:93591ms step_avg:94.82ms
step:988/1670 train_time:93685ms step_avg:94.82ms
step:989/1670 train_time:93779ms step_avg:94.82ms
step:990/1670 train_time:93873ms step_avg:94.82ms
step:991/1670 train_time:93966ms step_avg:94.82ms
step:992/1670 train_time:94060ms step_avg:94.82ms
step:993/1670 train_time:94154ms step_avg:94.82ms
step:994/1670 train_time:94247ms step_avg:94.82ms
step:995/1670 train_time:94341ms step_avg:94.81ms
step:996/1670 train_time:94435ms step_avg:94.81ms
step:997/1670 train_time:94528ms step_avg:94.81ms
step:998/1670 train_time:94622ms step_avg:94.81ms
step:999/1670 train_time:94716ms step_avg:94.81ms
step:1000/1670 train_time:94810ms step_avg:94.81ms
step:1000/1670 val_loss:3.4681 train_time:94902ms step_avg:94.90ms
step:1001/1670 train_time:94927ms step_avg:94.83ms
step:1002/1670 train_time:95005ms step_avg:94.81ms
step:1003/1670 train_time:95106ms step_avg:94.82ms
step:1004/1670 train_time:95201ms step_avg:94.82ms
step:1005/1670 train_time:95294ms step_avg:94.82ms
step:1006/1670 train_time:95387ms step_avg:94.82ms
step:1007/1670 train_time:95479ms step_avg:94.82ms
step:1008/1670 train_time:95572ms step_avg:94.81ms
step:1009/1670 train_time:95664ms step_avg:94.81ms
step:1010/1670 train_time:95757ms step_avg:94.81ms
step:1011/1670 train_time:95850ms step_avg:94.81ms
step:1012/1670 train_time:95944ms step_avg:94.81ms
step:1013/1670 train_time:96040ms step_avg:94.81ms
step:1014/1670 train_time:96137ms step_avg:94.81ms
step:1015/1670 train_time:96232ms step_avg:94.81ms
step:1016/1670 train_time:96326ms step_avg:94.81ms
step:1017/1670 train_time:96419ms step_avg:94.81ms
step:1018/1670 train_time:96513ms step_avg:94.81ms
step:1019/1670 train_time:96606ms step_avg:94.80ms
step:1020/1670 train_time:96698ms step_avg:94.80ms
step:1021/1670 train_time:96791ms step_avg:94.80ms
step:1022/1670 train_time:96884ms step_avg:94.80ms
step:1023/1670 train_time:96980ms step_avg:94.80ms
step:1024/1670 train_time:97075ms step_avg:94.80ms
step:1025/1670 train_time:97169ms step_avg:94.80ms
step:1026/1670 train_time:97264ms step_avg:94.80ms
step:1027/1670 train_time:97358ms step_avg:94.80ms
step:1028/1670 train_time:97452ms step_avg:94.80ms
step:1029/1670 train_time:97545ms step_avg:94.80ms
step:1030/1670 train_time:97637ms step_avg:94.79ms
step:1031/1670 train_time:97731ms step_avg:94.79ms
step:1032/1670 train_time:97823ms step_avg:94.79ms
step:1033/1670 train_time:97917ms step_avg:94.79ms
step:1034/1670 train_time:98012ms step_avg:94.79ms
step:1035/1670 train_time:98106ms step_avg:94.79ms
step:1036/1670 train_time:98200ms step_avg:94.79ms
step:1037/1670 train_time:98295ms step_avg:94.79ms
step:1038/1670 train_time:98389ms step_avg:94.79ms
step:1039/1670 train_time:98483ms step_avg:94.79ms
step:1040/1670 train_time:98577ms step_avg:94.79ms
step:1041/1670 train_time:98670ms step_avg:94.78ms
step:1042/1670 train_time:98763ms step_avg:94.78ms
step:1043/1670 train_time:98857ms step_avg:94.78ms
step:1044/1670 train_time:98951ms step_avg:94.78ms
step:1045/1670 train_time:99045ms step_avg:94.78ms
step:1046/1670 train_time:99139ms step_avg:94.78ms
step:1047/1670 train_time:99233ms step_avg:94.78ms
step:1048/1670 train_time:99327ms step_avg:94.78ms
step:1049/1670 train_time:99420ms step_avg:94.78ms
step:1050/1670 train_time:99515ms step_avg:94.78ms
step:1051/1670 train_time:99609ms step_avg:94.78ms
step:1052/1670 train_time:99702ms step_avg:94.77ms
step:1053/1670 train_time:99795ms step_avg:94.77ms
step:1054/1670 train_time:99889ms step_avg:94.77ms
step:1055/1670 train_time:99983ms step_avg:94.77ms
step:1056/1670 train_time:100077ms step_avg:94.77ms
step:1057/1670 train_time:100171ms step_avg:94.77ms
step:1058/1670 train_time:100265ms step_avg:94.77ms
step:1059/1670 train_time:100360ms step_avg:94.77ms
step:1060/1670 train_time:100453ms step_avg:94.77ms
step:1061/1670 train_time:100547ms step_avg:94.77ms
step:1062/1670 train_time:100874ms step_avg:94.99ms
step:1063/1670 train_time:101070ms step_avg:95.08ms
step:1064/1670 train_time:101162ms step_avg:95.08ms
step:1065/1670 train_time:101255ms step_avg:95.07ms
step:1066/1670 train_time:101347ms step_avg:95.07ms
step:1067/1670 train_time:101440ms step_avg:95.07ms
step:1068/1670 train_time:101532ms step_avg:95.07ms
step:1069/1670 train_time:101624ms step_avg:95.06ms
step:1070/1670 train_time:101717ms step_avg:95.06ms
step:1071/1670 train_time:101809ms step_avg:95.06ms
step:1072/1670 train_time:101905ms step_avg:95.06ms
step:1073/1670 train_time:102001ms step_avg:95.06ms
step:1074/1670 train_time:102097ms step_avg:95.06ms
step:1075/1670 train_time:102191ms step_avg:95.06ms
step:1076/1670 train_time:102285ms step_avg:95.06ms
step:1077/1670 train_time:102378ms step_avg:95.06ms
step:1078/1670 train_time:102471ms step_avg:95.06ms
step:1079/1670 train_time:102564ms step_avg:95.06ms
step:1080/1670 train_time:102657ms step_avg:95.05ms
step:1081/1670 train_time:102750ms step_avg:95.05ms
step:1082/1670 train_time:102843ms step_avg:95.05ms
step:1083/1670 train_time:102938ms step_avg:95.05ms
step:1084/1670 train_time:103033ms step_avg:95.05ms
step:1085/1670 train_time:103127ms step_avg:95.05ms
step:1086/1670 train_time:103221ms step_avg:95.05ms
step:1087/1670 train_time:103315ms step_avg:95.05ms
step:1088/1670 train_time:103409ms step_avg:95.04ms
step:1089/1670 train_time:103502ms step_avg:95.04ms
step:1090/1670 train_time:103595ms step_avg:95.04ms
step:1091/1670 train_time:103688ms step_avg:95.04ms
step:1092/1670 train_time:103783ms step_avg:95.04ms
step:1093/1670 train_time:103877ms step_avg:95.04ms
step:1094/1670 train_time:103971ms step_avg:95.04ms
step:1095/1670 train_time:104067ms step_avg:95.04ms
step:1096/1670 train_time:104160ms step_avg:95.04ms
step:1097/1670 train_time:104253ms step_avg:95.03ms
step:1098/1670 train_time:104347ms step_avg:95.03ms
step:1099/1670 train_time:104441ms step_avg:95.03ms
step:1100/1670 train_time:104534ms step_avg:95.03ms
step:1101/1670 train_time:104627ms step_avg:95.03ms
step:1102/1670 train_time:104721ms step_avg:95.03ms
step:1103/1670 train_time:104814ms step_avg:95.03ms
step:1104/1670 train_time:104908ms step_avg:95.03ms
step:1105/1670 train_time:105001ms step_avg:95.02ms
step:1106/1670 train_time:105095ms step_avg:95.02ms
step:1107/1670 train_time:105189ms step_avg:95.02ms
step:1108/1670 train_time:105284ms step_avg:95.02ms
step:1109/1670 train_time:105378ms step_avg:95.02ms
step:1110/1670 train_time:105472ms step_avg:95.02ms
step:1111/1670 train_time:105565ms step_avg:95.02ms
step:1112/1670 train_time:105658ms step_avg:95.02ms
step:1113/1670 train_time:105751ms step_avg:95.01ms
step:1114/1670 train_time:105845ms step_avg:95.01ms
step:1115/1670 train_time:106047ms step_avg:95.11ms
step:1116/1670 train_time:106116ms step_avg:95.09ms
step:1117/1670 train_time:106210ms step_avg:95.09ms
step:1118/1670 train_time:106303ms step_avg:95.08ms
step:1119/1670 train_time:106396ms step_avg:95.08ms
step:1120/1670 train_time:106490ms step_avg:95.08ms
step:1121/1670 train_time:106584ms step_avg:95.08ms
step:1122/1670 train_time:106677ms step_avg:95.08ms
step:1123/1670 train_time:106770ms step_avg:95.08ms
step:1124/1670 train_time:106863ms step_avg:95.07ms
step:1125/1670 train_time:106964ms step_avg:95.08ms
step:1125/1670 val_loss:3.4149 train_time:107061ms step_avg:95.17ms
step:1126/1670 train_time:107086ms step_avg:95.10ms
step:1127/1670 train_time:107167ms step_avg:95.09ms
step:1128/1670 train_time:107268ms step_avg:95.10ms
step:1129/1670 train_time:107363ms step_avg:95.10ms
step:1130/1670 train_time:107457ms step_avg:95.09ms
step:1131/1670 train_time:107551ms step_avg:95.09ms
step:1132/1670 train_time:107644ms step_avg:95.09ms
step:1133/1670 train_time:107737ms step_avg:95.09ms
step:1134/1670 train_time:107831ms step_avg:95.09ms
step:1135/1670 train_time:107924ms step_avg:95.09ms
step:1136/1670 train_time:108018ms step_avg:95.09ms
step:1137/1670 train_time:108116ms step_avg:95.09ms
step:1138/1670 train_time:108213ms step_avg:95.09ms
step:1139/1670 train_time:108309ms step_avg:95.09ms
step:1140/1670 train_time:108404ms step_avg:95.09ms
step:1141/1670 train_time:108498ms step_avg:95.09ms
step:1142/1670 train_time:108593ms step_avg:95.09ms
step:1143/1670 train_time:108686ms step_avg:95.09ms
step:1144/1670 train_time:108780ms step_avg:95.09ms
step:1145/1670 train_time:108875ms step_avg:95.09ms
step:1146/1670 train_time:108967ms step_avg:95.08ms
step:1147/1670 train_time:109062ms step_avg:95.08ms
step:1148/1670 train_time:109158ms step_avg:95.09ms
step:1149/1670 train_time:109255ms step_avg:95.09ms
step:1150/1670 train_time:109350ms step_avg:95.09ms
step:1151/1670 train_time:109445ms step_avg:95.09ms
step:1152/1670 train_time:109539ms step_avg:95.09ms
step:1153/1670 train_time:109633ms step_avg:95.08ms
step:1154/1670 train_time:109727ms step_avg:95.08ms
step:1155/1670 train_time:109821ms step_avg:95.08ms
step:1156/1670 train_time:109915ms step_avg:95.08ms
step:1157/1670 train_time:110009ms step_avg:95.08ms
step:1158/1670 train_time:110104ms step_avg:95.08ms
step:1159/1670 train_time:110200ms step_avg:95.08ms
step:1160/1670 train_time:110294ms step_avg:95.08ms
step:1161/1670 train_time:110389ms step_avg:95.08ms
step:1162/1670 train_time:110483ms step_avg:95.08ms
step:1163/1670 train_time:110579ms step_avg:95.08ms
step:1164/1670 train_time:110673ms step_avg:95.08ms
step:1165/1670 train_time:110766ms step_avg:95.08ms
step:1166/1670 train_time:110861ms step_avg:95.08ms
step:1167/1670 train_time:110955ms step_avg:95.08ms
step:1168/1670 train_time:111050ms step_avg:95.08ms
step:1169/1670 train_time:111145ms step_avg:95.08ms
step:1170/1670 train_time:111239ms step_avg:95.08ms
step:1171/1670 train_time:111334ms step_avg:95.08ms
step:1172/1670 train_time:111429ms step_avg:95.08ms
step:1173/1670 train_time:111523ms step_avg:95.08ms
step:1174/1670 train_time:111618ms step_avg:95.08ms
step:1175/1670 train_time:111712ms step_avg:95.07ms
step:1176/1670 train_time:111807ms step_avg:95.07ms
step:1177/1670 train_time:111902ms step_avg:95.07ms
step:1178/1670 train_time:111996ms step_avg:95.07ms
step:1179/1670 train_time:112092ms step_avg:95.07ms
step:1180/1670 train_time:112186ms step_avg:95.07ms
step:1181/1670 train_time:112281ms step_avg:95.07ms
step:1182/1670 train_time:112376ms step_avg:95.07ms
step:1183/1670 train_time:112471ms step_avg:95.07ms
step:1184/1670 train_time:112564ms step_avg:95.07ms
step:1185/1670 train_time:112659ms step_avg:95.07ms
step:1186/1670 train_time:112753ms step_avg:95.07ms
step:1187/1670 train_time:112848ms step_avg:95.07ms
step:1188/1670 train_time:112942ms step_avg:95.07ms
step:1189/1670 train_time:113036ms step_avg:95.07ms
step:1190/1670 train_time:113131ms step_avg:95.07ms
step:1191/1670 train_time:113226ms step_avg:95.07ms
step:1192/1670 train_time:113321ms step_avg:95.07ms
step:1193/1670 train_time:113416ms step_avg:95.07ms
step:1194/1670 train_time:113511ms step_avg:95.07ms
step:1195/1670 train_time:113605ms step_avg:95.07ms
step:1196/1670 train_time:113700ms step_avg:95.07ms
step:1197/1670 train_time:113794ms step_avg:95.07ms
step:1198/1670 train_time:113889ms step_avg:95.07ms
step:1199/1670 train_time:113985ms step_avg:95.07ms
step:1200/1670 train_time:114078ms step_avg:95.07ms
step:1201/1670 train_time:114172ms step_avg:95.06ms
step:1202/1670 train_time:114267ms step_avg:95.06ms
step:1203/1670 train_time:114363ms step_avg:95.06ms
step:1204/1670 train_time:114457ms step_avg:95.06ms
step:1205/1670 train_time:114551ms step_avg:95.06ms
step:1206/1670 train_time:114646ms step_avg:95.06ms
step:1207/1670 train_time:114740ms step_avg:95.06ms
step:1208/1670 train_time:114835ms step_avg:95.06ms
step:1209/1670 train_time:114929ms step_avg:95.06ms
step:1210/1670 train_time:115024ms step_avg:95.06ms
step:1211/1670 train_time:115119ms step_avg:95.06ms
step:1212/1670 train_time:115214ms step_avg:95.06ms
step:1213/1670 train_time:115309ms step_avg:95.06ms
step:1214/1670 train_time:115404ms step_avg:95.06ms
step:1215/1670 train_time:115499ms step_avg:95.06ms
step:1216/1670 train_time:115594ms step_avg:95.06ms
step:1217/1670 train_time:115689ms step_avg:95.06ms
step:1218/1670 train_time:115784ms step_avg:95.06ms
step:1219/1670 train_time:115878ms step_avg:95.06ms
step:1220/1670 train_time:115973ms step_avg:95.06ms
step:1221/1670 train_time:116067ms step_avg:95.06ms
step:1222/1670 train_time:116161ms step_avg:95.06ms
step:1223/1670 train_time:116256ms step_avg:95.06ms
step:1224/1670 train_time:116352ms step_avg:95.06ms
step:1225/1670 train_time:116447ms step_avg:95.06ms
step:1226/1670 train_time:116541ms step_avg:95.06ms
step:1227/1670 train_time:116635ms step_avg:95.06ms
step:1228/1670 train_time:116730ms step_avg:95.06ms
step:1229/1670 train_time:116824ms step_avg:95.06ms
step:1230/1670 train_time:116918ms step_avg:95.06ms
step:1231/1670 train_time:117012ms step_avg:95.05ms
step:1232/1670 train_time:117107ms step_avg:95.05ms
step:1233/1670 train_time:117202ms step_avg:95.05ms
step:1234/1670 train_time:117297ms step_avg:95.05ms
step:1235/1670 train_time:117392ms step_avg:95.05ms
step:1236/1670 train_time:117486ms step_avg:95.05ms
step:1237/1670 train_time:117581ms step_avg:95.05ms
step:1238/1670 train_time:117675ms step_avg:95.05ms
step:1239/1670 train_time:117770ms step_avg:95.05ms
step:1240/1670 train_time:117864ms step_avg:95.05ms
step:1241/1670 train_time:117959ms step_avg:95.05ms
step:1242/1670 train_time:118053ms step_avg:95.05ms
step:1243/1670 train_time:118152ms step_avg:95.05ms
step:1244/1670 train_time:118243ms step_avg:95.05ms
step:1245/1670 train_time:118336ms step_avg:95.05ms
step:1246/1670 train_time:118431ms step_avg:95.05ms
step:1247/1670 train_time:118525ms step_avg:95.05ms
step:1248/1670 train_time:118620ms step_avg:95.05ms
step:1249/1670 train_time:118714ms step_avg:95.05ms
step:1250/1670 train_time:118808ms step_avg:95.05ms
step:1250/1670 val_loss:3.3758 train_time:118903ms step_avg:95.12ms
step:1251/1670 train_time:118928ms step_avg:95.07ms
step:1252/1670 train_time:119009ms step_avg:95.06ms
step:1253/1670 train_time:119111ms step_avg:95.06ms
step:1254/1670 train_time:119205ms step_avg:95.06ms
step:1255/1670 train_time:119299ms step_avg:95.06ms
step:1256/1670 train_time:119392ms step_avg:95.06ms
step:1257/1670 train_time:119486ms step_avg:95.06ms
step:1258/1670 train_time:119579ms step_avg:95.05ms
step:1259/1670 train_time:119672ms step_avg:95.05ms
step:1260/1670 train_time:119766ms step_avg:95.05ms
step:1261/1670 train_time:119859ms step_avg:95.05ms
step:1262/1670 train_time:119956ms step_avg:95.05ms
step:1263/1670 train_time:120053ms step_avg:95.05ms
step:1264/1670 train_time:120149ms step_avg:95.05ms
step:1265/1670 train_time:120244ms step_avg:95.05ms
step:1266/1670 train_time:120338ms step_avg:95.05ms
step:1267/1670 train_time:120432ms step_avg:95.05ms
step:1268/1670 train_time:120525ms step_avg:95.05ms
step:1269/1670 train_time:120619ms step_avg:95.05ms
step:1270/1670 train_time:120713ms step_avg:95.05ms
step:1271/1670 train_time:120807ms step_avg:95.05ms
step:1272/1670 train_time:120902ms step_avg:95.05ms
step:1273/1670 train_time:120999ms step_avg:95.05ms
step:1274/1670 train_time:121447ms step_avg:95.33ms
step:1275/1670 train_time:121521ms step_avg:95.31ms
step:1276/1670 train_time:121614ms step_avg:95.31ms
step:1277/1670 train_time:121707ms step_avg:95.31ms
step:1278/1670 train_time:121800ms step_avg:95.31ms
step:1279/1670 train_time:121894ms step_avg:95.30ms
step:1280/1670 train_time:121987ms step_avg:95.30ms
step:1281/1670 train_time:122080ms step_avg:95.30ms
step:1282/1670 train_time:122174ms step_avg:95.30ms
step:1283/1670 train_time:122268ms step_avg:95.30ms
step:1284/1670 train_time:122366ms step_avg:95.30ms
step:1285/1670 train_time:122464ms step_avg:95.30ms
step:1286/1670 train_time:122559ms step_avg:95.30ms
step:1287/1670 train_time:122653ms step_avg:95.30ms
step:1288/1670 train_time:122747ms step_avg:95.30ms
step:1289/1670 train_time:122841ms step_avg:95.30ms
step:1290/1670 train_time:122935ms step_avg:95.30ms
step:1291/1670 train_time:123028ms step_avg:95.30ms
step:1292/1670 train_time:123122ms step_avg:95.30ms
step:1293/1670 train_time:123216ms step_avg:95.29ms
step:1294/1670 train_time:123311ms step_avg:95.29ms
step:1295/1670 train_time:123407ms step_avg:95.30ms
step:1296/1670 train_time:123503ms step_avg:95.30ms
step:1297/1670 train_time:123598ms step_avg:95.30ms
step:1298/1670 train_time:123693ms step_avg:95.29ms
step:1299/1670 train_time:123788ms step_avg:95.29ms
step:1300/1670 train_time:123882ms step_avg:95.29ms
step:1301/1670 train_time:123977ms step_avg:95.29ms
step:1302/1670 train_time:124071ms step_avg:95.29ms
step:1303/1670 train_time:124165ms step_avg:95.29ms
step:1304/1670 train_time:124259ms step_avg:95.29ms
step:1305/1670 train_time:124354ms step_avg:95.29ms
step:1306/1670 train_time:124449ms step_avg:95.29ms
step:1307/1670 train_time:124545ms step_avg:95.29ms
step:1308/1670 train_time:124640ms step_avg:95.29ms
step:1309/1670 train_time:124734ms step_avg:95.29ms
step:1310/1670 train_time:124829ms step_avg:95.29ms
step:1311/1670 train_time:124923ms step_avg:95.29ms
step:1312/1670 train_time:125017ms step_avg:95.29ms
step:1313/1670 train_time:125111ms step_avg:95.29ms
step:1314/1670 train_time:125206ms step_avg:95.29ms
step:1315/1670 train_time:125300ms step_avg:95.29ms
step:1316/1670 train_time:125395ms step_avg:95.28ms
step:1317/1670 train_time:125491ms step_avg:95.29ms
step:1318/1670 train_time:125586ms step_avg:95.29ms
step:1319/1670 train_time:125681ms step_avg:95.29ms
step:1320/1670 train_time:125775ms step_avg:95.28ms
step:1321/1670 train_time:125869ms step_avg:95.28ms
step:1322/1670 train_time:125963ms step_avg:95.28ms
step:1323/1670 train_time:126057ms step_avg:95.28ms
step:1324/1670 train_time:126151ms step_avg:95.28ms
step:1325/1670 train_time:126246ms step_avg:95.28ms
step:1326/1670 train_time:126341ms step_avg:95.28ms
step:1327/1670 train_time:126435ms step_avg:95.28ms
step:1328/1670 train_time:126531ms step_avg:95.28ms
step:1329/1670 train_time:126626ms step_avg:95.28ms
step:1330/1670 train_time:126721ms step_avg:95.28ms
step:1331/1670 train_time:126816ms step_avg:95.28ms
step:1332/1670 train_time:126910ms step_avg:95.28ms
step:1333/1670 train_time:127004ms step_avg:95.28ms
step:1334/1670 train_time:127098ms step_avg:95.28ms
step:1335/1670 train_time:127193ms step_avg:95.28ms
step:1336/1670 train_time:127287ms step_avg:95.28ms
step:1337/1670 train_time:127382ms step_avg:95.27ms
step:1338/1670 train_time:127477ms step_avg:95.27ms
step:1339/1670 train_time:127571ms step_avg:95.27ms
step:1340/1670 train_time:127666ms step_avg:95.27ms
step:1341/1670 train_time:127761ms step_avg:95.27ms
step:1342/1670 train_time:127856ms step_avg:95.27ms
step:1343/1670 train_time:127951ms step_avg:95.27ms
step:1344/1670 train_time:128046ms step_avg:95.27ms
step:1345/1670 train_time:128140ms step_avg:95.27ms
step:1346/1670 train_time:128235ms step_avg:95.27ms
step:1347/1670 train_time:128330ms step_avg:95.27ms
step:1348/1670 train_time:128423ms step_avg:95.27ms
step:1349/1670 train_time:128518ms step_avg:95.27ms
step:1350/1670 train_time:128613ms step_avg:95.27ms
step:1351/1670 train_time:128709ms step_avg:95.27ms
step:1352/1670 train_time:128803ms step_avg:95.27ms
step:1353/1670 train_time:128898ms step_avg:95.27ms
step:1354/1670 train_time:128993ms step_avg:95.27ms
step:1355/1670 train_time:129088ms step_avg:95.27ms
step:1356/1670 train_time:129183ms step_avg:95.27ms
step:1357/1670 train_time:129277ms step_avg:95.27ms
step:1358/1670 train_time:129371ms step_avg:95.27ms
step:1359/1670 train_time:129465ms step_avg:95.26ms
step:1360/1670 train_time:129559ms step_avg:95.26ms
step:1361/1670 train_time:129654ms step_avg:95.26ms
step:1362/1670 train_time:129749ms step_avg:95.26ms
step:1363/1670 train_time:129843ms step_avg:95.26ms
step:1364/1670 train_time:129937ms step_avg:95.26ms
step:1365/1670 train_time:130031ms step_avg:95.26ms
step:1366/1670 train_time:130126ms step_avg:95.26ms
step:1367/1670 train_time:130220ms step_avg:95.26ms
step:1368/1670 train_time:130315ms step_avg:95.26ms
step:1369/1670 train_time:130410ms step_avg:95.26ms
step:1370/1670 train_time:130504ms step_avg:95.26ms
step:1371/1670 train_time:130600ms step_avg:95.26ms
step:1372/1670 train_time:130695ms step_avg:95.26ms
step:1373/1670 train_time:130790ms step_avg:95.26ms
step:1374/1670 train_time:130885ms step_avg:95.26ms
step:1375/1670 train_time:130979ms step_avg:95.26ms
step:1375/1670 val_loss:3.3415 train_time:131073ms step_avg:95.33ms
step:1376/1670 train_time:131098ms step_avg:95.27ms
step:1377/1670 train_time:131176ms step_avg:95.26ms
step:1378/1670 train_time:131278ms step_avg:95.27ms
step:1379/1670 train_time:131373ms step_avg:95.27ms
step:1380/1670 train_time:131467ms step_avg:95.27ms
step:1381/1670 train_time:131560ms step_avg:95.26ms
step:1382/1670 train_time:131653ms step_avg:95.26ms
step:1383/1670 train_time:131747ms step_avg:95.26ms
step:1384/1670 train_time:131841ms step_avg:95.26ms
step:1385/1670 train_time:131935ms step_avg:95.26ms
step:1386/1670 train_time:132029ms step_avg:95.26ms
step:1387/1670 train_time:132125ms step_avg:95.26ms
step:1388/1670 train_time:132224ms step_avg:95.26ms
step:1389/1670 train_time:132322ms step_avg:95.26ms
step:1390/1670 train_time:132417ms step_avg:95.26ms
step:1391/1670 train_time:132511ms step_avg:95.26ms
step:1392/1670 train_time:132604ms step_avg:95.26ms
step:1393/1670 train_time:132698ms step_avg:95.26ms
step:1394/1670 train_time:132793ms step_avg:95.26ms
step:1395/1670 train_time:132886ms step_avg:95.26ms
step:1396/1670 train_time:132979ms step_avg:95.26ms
step:1397/1670 train_time:133076ms step_avg:95.26ms
step:1398/1670 train_time:133172ms step_avg:95.26ms
step:1399/1670 train_time:133268ms step_avg:95.26ms
step:1400/1670 train_time:133364ms step_avg:95.26ms
step:1401/1670 train_time:133458ms step_avg:95.26ms
step:1402/1670 train_time:133553ms step_avg:95.26ms
step:1403/1670 train_time:133647ms step_avg:95.26ms
step:1404/1670 train_time:133742ms step_avg:95.26ms
step:1405/1670 train_time:133837ms step_avg:95.26ms
step:1406/1670 train_time:133930ms step_avg:95.26ms
step:1407/1670 train_time:134023ms step_avg:95.25ms
step:1408/1670 train_time:134118ms step_avg:95.25ms
step:1409/1670 train_time:134214ms step_avg:95.26ms
step:1410/1670 train_time:134310ms step_avg:95.26ms
step:1411/1670 train_time:134405ms step_avg:95.25ms
step:1412/1670 train_time:134499ms step_avg:95.25ms
step:1413/1670 train_time:134594ms step_avg:95.25ms
step:1414/1670 train_time:134689ms step_avg:95.25ms
step:1415/1670 train_time:134783ms step_avg:95.25ms
step:1416/1670 train_time:134878ms step_avg:95.25ms
step:1417/1670 train_time:134972ms step_avg:95.25ms
step:1418/1670 train_time:135066ms step_avg:95.25ms
step:1419/1670 train_time:135161ms step_avg:95.25ms
step:1420/1670 train_time:135257ms step_avg:95.25ms
step:1421/1670 train_time:135353ms step_avg:95.25ms
step:1422/1670 train_time:135447ms step_avg:95.25ms
step:1423/1670 train_time:135542ms step_avg:95.25ms
step:1424/1670 train_time:135636ms step_avg:95.25ms
step:1425/1670 train_time:135730ms step_avg:95.25ms
step:1426/1670 train_time:135824ms step_avg:95.25ms
step:1427/1670 train_time:135918ms step_avg:95.25ms
step:1428/1670 train_time:136013ms step_avg:95.25ms
step:1429/1670 train_time:136107ms step_avg:95.25ms
step:1430/1670 train_time:136202ms step_avg:95.25ms
step:1431/1670 train_time:136297ms step_avg:95.25ms
step:1432/1670 train_time:136393ms step_avg:95.25ms
step:1433/1670 train_time:136486ms step_avg:95.25ms
step:1434/1670 train_time:136580ms step_avg:95.24ms
step:1435/1670 train_time:136676ms step_avg:95.24ms
step:1436/1670 train_time:136770ms step_avg:95.24ms
step:1437/1670 train_time:136865ms step_avg:95.24ms
step:1438/1670 train_time:136958ms step_avg:95.24ms
step:1439/1670 train_time:137053ms step_avg:95.24ms
step:1440/1670 train_time:137148ms step_avg:95.24ms
step:1441/1670 train_time:137243ms step_avg:95.24ms
step:1442/1670 train_time:137338ms step_avg:95.24ms
step:1443/1670 train_time:137432ms step_avg:95.24ms
step:1444/1670 train_time:137526ms step_avg:95.24ms
step:1445/1670 train_time:137622ms step_avg:95.24ms
step:1446/1670 train_time:137717ms step_avg:95.24ms
step:1447/1670 train_time:137811ms step_avg:95.24ms
step:1448/1670 train_time:137905ms step_avg:95.24ms
step:1449/1670 train_time:138000ms step_avg:95.24ms
step:1450/1670 train_time:138096ms step_avg:95.24ms
step:1451/1670 train_time:138189ms step_avg:95.24ms
step:1452/1670 train_time:138285ms step_avg:95.24ms
step:1453/1670 train_time:138380ms step_avg:95.24ms
step:1454/1670 train_time:138474ms step_avg:95.24ms
step:1455/1670 train_time:138569ms step_avg:95.24ms
step:1456/1670 train_time:138664ms step_avg:95.24ms
step:1457/1670 train_time:138758ms step_avg:95.24ms
step:1458/1670 train_time:138853ms step_avg:95.24ms
step:1459/1670 train_time:138947ms step_avg:95.23ms
step:1460/1670 train_time:139042ms step_avg:95.23ms
step:1461/1670 train_time:139137ms step_avg:95.23ms
step:1462/1670 train_time:139232ms step_avg:95.23ms
step:1463/1670 train_time:139327ms step_avg:95.23ms
step:1464/1670 train_time:139422ms step_avg:95.23ms
step:1465/1670 train_time:139517ms step_avg:95.23ms
step:1466/1670 train_time:139612ms step_avg:95.23ms
step:1467/1670 train_time:139706ms step_avg:95.23ms
step:1468/1670 train_time:139801ms step_avg:95.23ms
step:1469/1670 train_time:139896ms step_avg:95.23ms
step:1470/1670 train_time:139990ms step_avg:95.23ms
step:1471/1670 train_time:140084ms step_avg:95.23ms
step:1472/1670 train_time:140178ms step_avg:95.23ms
step:1473/1670 train_time:140274ms step_avg:95.23ms
step:1474/1670 train_time:140368ms step_avg:95.23ms
step:1475/1670 train_time:140464ms step_avg:95.23ms
step:1476/1670 train_time:140559ms step_avg:95.23ms
step:1477/1670 train_time:140653ms step_avg:95.23ms
step:1478/1670 train_time:140747ms step_avg:95.23ms
step:1479/1670 train_time:140842ms step_avg:95.23ms
step:1480/1670 train_time:140936ms step_avg:95.23ms
step:1481/1670 train_time:141031ms step_avg:95.23ms
step:1482/1670 train_time:141126ms step_avg:95.23ms
step:1483/1670 train_time:141221ms step_avg:95.23ms
step:1484/1670 train_time:141315ms step_avg:95.23ms
step:1485/1670 train_time:141758ms step_avg:95.46ms
step:1486/1670 train_time:141835ms step_avg:95.45ms
step:1487/1670 train_time:141927ms step_avg:95.45ms
step:1488/1670 train_time:142020ms step_avg:95.44ms
step:1489/1670 train_time:142113ms step_avg:95.44ms
step:1490/1670 train_time:142207ms step_avg:95.44ms
step:1491/1670 train_time:142300ms step_avg:95.44ms
step:1492/1670 train_time:142393ms step_avg:95.44ms
step:1493/1670 train_time:142487ms step_avg:95.44ms
step:1494/1670 train_time:142580ms step_avg:95.44ms
step:1495/1670 train_time:142677ms step_avg:95.44ms
step:1496/1670 train_time:142775ms step_avg:95.44ms
step:1497/1670 train_time:142873ms step_avg:95.44ms
step:1498/1670 train_time:142968ms step_avg:95.44ms
step:1499/1670 train_time:143062ms step_avg:95.44ms
step:1500/1670 train_time:143156ms step_avg:95.44ms
step:1500/1670 val_loss:3.3117 train_time:143248ms step_avg:95.50ms
step:1501/1670 train_time:143273ms step_avg:95.45ms
step:1502/1670 train_time:143353ms step_avg:95.44ms
step:1503/1670 train_time:143453ms step_avg:95.44ms
step:1504/1670 train_time:143549ms step_avg:95.44ms
step:1505/1670 train_time:143642ms step_avg:95.44ms
step:1506/1670 train_time:143736ms step_avg:95.44ms
step:1507/1670 train_time:143829ms step_avg:95.44ms
step:1508/1670 train_time:143922ms step_avg:95.44ms
step:1509/1670 train_time:144016ms step_avg:95.44ms
step:1510/1670 train_time:144109ms step_avg:95.44ms
step:1511/1670 train_time:144203ms step_avg:95.44ms
step:1512/1670 train_time:144302ms step_avg:95.44ms
step:1513/1670 train_time:144399ms step_avg:95.44ms
step:1514/1670 train_time:144494ms step_avg:95.44ms
step:1515/1670 train_time:144589ms step_avg:95.44ms
step:1516/1670 train_time:144682ms step_avg:95.44ms
step:1517/1670 train_time:144776ms step_avg:95.44ms
step:1518/1670 train_time:144869ms step_avg:95.43ms
step:1519/1670 train_time:144963ms step_avg:95.43ms
step:1520/1670 train_time:145056ms step_avg:95.43ms
step:1521/1670 train_time:145150ms step_avg:95.43ms
step:1522/1670 train_time:145245ms step_avg:95.43ms
step:1523/1670 train_time:145342ms step_avg:95.43ms
step:1524/1670 train_time:145437ms step_avg:95.43ms
step:1525/1670 train_time:145533ms step_avg:95.43ms
step:1526/1670 train_time:145628ms step_avg:95.43ms
step:1527/1670 train_time:145721ms step_avg:95.43ms
step:1528/1670 train_time:145815ms step_avg:95.43ms
step:1529/1670 train_time:145909ms step_avg:95.43ms
step:1530/1670 train_time:146003ms step_avg:95.43ms
step:1531/1670 train_time:146096ms step_avg:95.43ms
step:1532/1670 train_time:146191ms step_avg:95.42ms
step:1533/1670 train_time:146286ms step_avg:95.42ms
step:1534/1670 train_time:146382ms step_avg:95.42ms
step:1535/1670 train_time:146478ms step_avg:95.43ms
step:1536/1670 train_time:146573ms step_avg:95.42ms
step:1537/1670 train_time:146667ms step_avg:95.42ms
step:1538/1670 train_time:146762ms step_avg:95.42ms
step:1539/1670 train_time:146855ms step_avg:95.42ms
step:1540/1670 train_time:146950ms step_avg:95.42ms
step:1541/1670 train_time:147045ms step_avg:95.42ms
step:1542/1670 train_time:147139ms step_avg:95.42ms
step:1543/1670 train_time:147234ms step_avg:95.42ms
step:1544/1670 train_time:147329ms step_avg:95.42ms
step:1545/1670 train_time:147424ms step_avg:95.42ms
step:1546/1670 train_time:147519ms step_avg:95.42ms
step:1547/1670 train_time:147615ms step_avg:95.42ms
step:1548/1670 train_time:147709ms step_avg:95.42ms
step:1549/1670 train_time:147803ms step_avg:95.42ms
step:1550/1670 train_time:147899ms step_avg:95.42ms
step:1551/1670 train_time:147994ms step_avg:95.42ms
step:1552/1670 train_time:148088ms step_avg:95.42ms
step:1553/1670 train_time:148181ms step_avg:95.42ms
step:1554/1670 train_time:148276ms step_avg:95.42ms
step:1555/1670 train_time:148370ms step_avg:95.41ms
step:1556/1670 train_time:148465ms step_avg:95.41ms
step:1557/1670 train_time:148560ms step_avg:95.41ms
step:1558/1670 train_time:148655ms step_avg:95.41ms
step:1559/1670 train_time:148749ms step_avg:95.41ms
step:1560/1670 train_time:148845ms step_avg:95.41ms
step:1561/1670 train_time:148940ms step_avg:95.41ms
step:1562/1670 train_time:149034ms step_avg:95.41ms
step:1563/1670 train_time:149128ms step_avg:95.41ms
step:1564/1670 train_time:149222ms step_avg:95.41ms
step:1565/1670 train_time:149318ms step_avg:95.41ms
step:1566/1670 train_time:149413ms step_avg:95.41ms
step:1567/1670 train_time:149507ms step_avg:95.41ms
step:1568/1670 train_time:149601ms step_avg:95.41ms
step:1569/1670 train_time:149698ms step_avg:95.41ms
step:1570/1670 train_time:149793ms step_avg:95.41ms
step:1571/1670 train_time:149887ms step_avg:95.41ms
step:1572/1670 train_time:149982ms step_avg:95.41ms
step:1573/1670 train_time:150076ms step_avg:95.41ms
step:1574/1670 train_time:150170ms step_avg:95.41ms
step:1575/1670 train_time:150264ms step_avg:95.41ms
step:1576/1670 train_time:150359ms step_avg:95.41ms
step:1577/1670 train_time:150454ms step_avg:95.41ms
step:1578/1670 train_time:150549ms step_avg:95.40ms
step:1579/1670 train_time:150644ms step_avg:95.40ms
step:1580/1670 train_time:150738ms step_avg:95.40ms
step:1581/1670 train_time:150833ms step_avg:95.40ms
step:1582/1670 train_time:150928ms step_avg:95.40ms
step:1583/1670 train_time:151021ms step_avg:95.40ms
step:1584/1670 train_time:151116ms step_avg:95.40ms
step:1585/1670 train_time:151210ms step_avg:95.40ms
step:1586/1670 train_time:151304ms step_avg:95.40ms
step:1587/1670 train_time:151399ms step_avg:95.40ms
step:1588/1670 train_time:151494ms step_avg:95.40ms
step:1589/1670 train_time:151589ms step_avg:95.40ms
step:1590/1670 train_time:151684ms step_avg:95.40ms
step:1591/1670 train_time:151779ms step_avg:95.40ms
step:1592/1670 train_time:151873ms step_avg:95.40ms
step:1593/1670 train_time:151969ms step_avg:95.40ms
step:1594/1670 train_time:152063ms step_avg:95.40ms
step:1595/1670 train_time:152157ms step_avg:95.40ms
step:1596/1670 train_time:152251ms step_avg:95.40ms
step:1597/1670 train_time:152347ms step_avg:95.40ms
step:1598/1670 train_time:152478ms step_avg:95.42ms
step:1599/1670 train_time:152537ms step_avg:95.40ms
step:1600/1670 train_time:152631ms step_avg:95.39ms
step:1601/1670 train_time:152727ms step_avg:95.39ms
step:1602/1670 train_time:152821ms step_avg:95.39ms
step:1603/1670 train_time:152916ms step_avg:95.39ms
step:1604/1670 train_time:153011ms step_avg:95.39ms
step:1605/1670 train_time:153106ms step_avg:95.39ms
step:1606/1670 train_time:153200ms step_avg:95.39ms
step:1607/1670 train_time:153295ms step_avg:95.39ms
step:1608/1670 train_time:153390ms step_avg:95.39ms
step:1609/1670 train_time:153485ms step_avg:95.39ms
step:1610/1670 train_time:153580ms step_avg:95.39ms
step:1611/1670 train_time:153675ms step_avg:95.39ms
step:1612/1670 train_time:153769ms step_avg:95.39ms
step:1613/1670 train_time:153863ms step_avg:95.39ms
step:1614/1670 train_time:153959ms step_avg:95.39ms
step:1615/1670 train_time:154053ms step_avg:95.39ms
step:1616/1670 train_time:154148ms step_avg:95.39ms
step:1617/1670 train_time:154243ms step_avg:95.39ms
step:1618/1670 train_time:154338ms step_avg:95.39ms
step:1619/1670 train_time:154433ms step_avg:95.39ms
step:1620/1670 train_time:154528ms step_avg:95.39ms
step:1621/1670 train_time:154622ms step_avg:95.39ms
step:1622/1670 train_time:154717ms step_avg:95.39ms
step:1623/1670 train_time:154812ms step_avg:95.39ms
step:1624/1670 train_time:154907ms step_avg:95.39ms
step:1625/1670 train_time:155001ms step_avg:95.39ms
step:1625/1670 val_loss:3.2869 train_time:155094ms step_avg:95.44ms
step:1626/1670 train_time:155119ms step_avg:95.40ms
step:1627/1670 train_time:155195ms step_avg:95.39ms
step:1628/1670 train_time:155298ms step_avg:95.39ms
step:1629/1670 train_time:155393ms step_avg:95.39ms
step:1630/1670 train_time:155487ms step_avg:95.39ms
step:1631/1670 train_time:155581ms step_avg:95.39ms
step:1632/1670 train_time:155674ms step_avg:95.39ms
step:1633/1670 train_time:155767ms step_avg:95.39ms
step:1634/1670 train_time:155861ms step_avg:95.39ms
step:1635/1670 train_time:155955ms step_avg:95.39ms
step:1636/1670 train_time:156049ms step_avg:95.38ms
step:1637/1670 train_time:156144ms step_avg:95.38ms
step:1638/1670 train_time:156241ms step_avg:95.38ms
step:1639/1670 train_time:156337ms step_avg:95.39ms
step:1640/1670 train_time:156432ms step_avg:95.39ms
step:1641/1670 train_time:156527ms step_avg:95.39ms
step:1642/1670 train_time:156620ms step_avg:95.38ms
step:1643/1670 train_time:156714ms step_avg:95.38ms
step:1644/1670 train_time:156808ms step_avg:95.38ms
step:1645/1670 train_time:156901ms step_avg:95.38ms
step:1646/1670 train_time:156995ms step_avg:95.38ms
step:1647/1670 train_time:157090ms step_avg:95.38ms
step:1648/1670 train_time:157186ms step_avg:95.38ms
step:1649/1670 train_time:157282ms step_avg:95.38ms
step:1650/1670 train_time:157378ms step_avg:95.38ms
step:1651/1670 train_time:157473ms step_avg:95.38ms
step:1652/1670 train_time:157568ms step_avg:95.38ms
step:1653/1670 train_time:157661ms step_avg:95.38ms
step:1654/1670 train_time:157755ms step_avg:95.38ms
step:1655/1670 train_time:157850ms step_avg:95.38ms
step:1656/1670 train_time:157945ms step_avg:95.38ms
step:1657/1670 train_time:158039ms step_avg:95.38ms
step:1658/1670 train_time:158133ms step_avg:95.38ms
step:1659/1670 train_time:158229ms step_avg:95.38ms
step:1660/1670 train_time:158325ms step_avg:95.38ms
step:1661/1670 train_time:158421ms step_avg:95.38ms
step:1662/1670 train_time:158515ms step_avg:95.38ms
step:1663/1670 train_time:158610ms step_avg:95.38ms
step:1664/1670 train_time:158704ms step_avg:95.37ms
step:1665/1670 train_time:158798ms step_avg:95.37ms
step:1666/1670 train_time:158892ms step_avg:95.37ms
step:1667/1670 train_time:158987ms step_avg:95.37ms
step:1668/1670 train_time:159081ms step_avg:95.37ms
step:1669/1670 train_time:159175ms step_avg:95.37ms
step:1670/1670 train_time:159269ms step_avg:95.37ms
step:1670/1670 val_loss:3.2779 train_time:159447ms step_avg:95.48ms
peak memory allocated: 32712 MiB reserved: 48456 MiB
