import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
import uuid
import time
import glob
import subprocess
import contextlib
from dataclasses import dataclass

import torch
torch.empty(1, device='cuda', requires_grad=True).backward()
from torch import nn
import torch.nn.functional as F
import torch.distributed as dist
from torch.nn.parallel import DistributedDataParallel as DDP
# use of FlexAttention contributed by @KoszarskyB
from torch.nn.attention.flex_attention import BlockMask, flex_attention

# -----------------------------------------------------------------------------
# Muon optimizer

@torch.compile
def zeropower_via_newtonschulz5(G, steps):
    """
    Newton-Schulz iteration to compute the zeroth power / orthogonalization of G. We opt to use a
    quintic iteration whose coefficients are selected to maximize the slope at zero. For the purpose
    of minimizing steps, it turns out to be empirically effective to keep increasing the slope at
    zero even beyond the point where the iteration no longer converges all the way to one everywhere
    on the interval. This iteration therefore does not produce UV^T but rather something like US'V^T
    where S' is diagonal with S_{ii}' ~ Uniform(0.5, 1.5), which turns out not to hurt model
    performance at all relative to UV^T, where USV^T = G is the SVD.
    """
    assert len(G.shape) == 2
    a, b, c = (3.4445, -4.7750,  2.0315)
    X = G.bfloat16()
    if G.size(0) > G.size(1):
        X = X.T

    # Ensure spectral norm is at most 1
    X = X / (X.norm() + 1e-7)
    # Perform the NS iterations
    for _ in range(steps):
        A = X @ X.T
        B = b * A + c * A @ A # adapted from suggestion by @jxbz, @leloykun, and @YouJiacheng
        X = a * X + B @ X
    
    if G.size(0) > G.size(1):
        X = X.T
    return X

class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Some warnings:
    - This optimizer assumes that all parameters passed in are 2D.
    - It should not be used for the embedding layer, the final fully connected layer, or any {0,1}-D
    parameters; those should all be optimized by a standard method (e.g., AdamW).
    - To use it with 4D convolutional filters, it works well to just flatten their last 3 dimensions.
    - We believe it is unlikely to work well for training with small batch size.
    - We believe it may not work well for finetuning pretrained models, but we haven't tested this.
    - We have not yet tried this optimizer for training scenarios larger than NanoGPT (124M).

    Arguments:
        lr: The learning rate used by the internal SGD.
        momentum: The momentum used by the internal SGD.
        nesterov: Whether to use Nesterov-style momentum in the internal SGD. (recommended)
        ns_steps: The number of Newton-Schulz iteration steps to use.
    """
    def __init__(self, params, lr=0.02, momentum=0.95, nesterov=True, ns_steps=5):
        self.world_size = int(os.environ['WORLD_SIZE'])
        self.rank = int(os.environ['RANK'])
        defaults = dict(lr=lr, momentum=momentum, nesterov=nesterov, ns_steps=ns_steps)
        assert all(isinstance(p, torch.Tensor) for p in params)
        sizes = {p.numel() for p in params}
        param_groups = [dict(params=[p for p in params if p.numel() == size],
                             update_buffer=[torch.empty(size, device='cuda', dtype=torch.bfloat16) for _ in range(self.world_size)])
                        for size in sizes]
        super().__init__(param_groups, defaults)

    def step(self):

        for group in self.param_groups:

            lr = group['lr']
            momentum = group['momentum']
            nesterov = group['nesterov']
            ns_steps = group['ns_steps']
            update_buffers = group['update_buffer']
            # generate weight updates in distributed fashion
            params = group['params']
            handle = None
            params_world = None
            def update_prev():
                if params_world is None:
                    return
                assert handle is not None
                handle.wait()
                for p_world, g_world in zip(params_world, update_buffers):
                    p_world.data.add_(
                        g_world.view_as(p_world),
                        alpha=-lr * max(1, p_world.size(0) / p_world.size(1)) ** 0.5,
                    )
            for base_i in range(len(params))[::self.world_size]:
                if base_i + rank < len(params):
                    p = params[base_i + self.rank]
                    g = p.grad
                    assert g is not None
                    state = self.state[p]
                    if 'momentum_buffer' not in state:
                        state['momentum_buffer'] = torch.zeros_like(g)
                    buf = state['momentum_buffer']
                    buf.lerp_(g, 1 - momentum)
                    g = g.lerp_(buf, momentum) if nesterov else buf
                    g = zeropower_via_newtonschulz5(g, steps=ns_steps).flatten()
                else:
                    g = update_buffers[rank]
                update_prev() # async all_gather instead of sync all_reduce by @YouJiacheng
                handle = dist.all_gather(update_buffers, g, async_op=True)
                params_world = params[base_i : base_i + self.world_size]
            update_prev()

# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the GPT-2 model

def norm(x):
    return F.rms_norm(x, (x.size(-1),))

class CastedLinear(nn.Linear):

    def __init__(self, in_features, out_features):
        super().__init__(in_features, out_features, bias=False)

    def forward(self, x):
        return F.linear(x, self.weight.type_as(x))

class Rotary(nn.Module):

    def __init__(self, dim, max_seq_len=65536):
        super().__init__()
        # half-truncate RoPE by @YouJiacheng
        angular_freq = (1 / 1024) ** torch.linspace(0, 1, steps=dim//4, dtype=torch.float32)
        angular_freq = torch.cat([angular_freq, angular_freq.new_zeros(dim//4)])
        t = torch.arange(max_seq_len, dtype=torch.float32)
        theta = torch.einsum('i,j -> ij', t, angular_freq)
        self.cos = nn.Buffer(theta.cos(), persistent=False)
        self.sin = nn.Buffer(theta.sin(), persistent=False)

    def forward(self, x):
        cos, sin = self.cos[None, :x.size(-3), None, :], self.sin[None, :x.size(-3), None, :]
        x1, x2 = x.float().chunk(2, dim=-1)
        y1 = x1 * cos + x2 * sin
        y2 = x1 * (-sin) + x2 * cos
        return torch.cat((y1, y2), 3).type_as(x)

class CausalSelfAttention(nn.Module):

    def __init__(self, dim, num_heads, layer_id):
        super().__init__()
        assert dim % num_heads == 0
        self.num_heads = num_heads
        self.layer_id = layer_id
        self.c_q = CastedLinear(dim, dim)
        self.c_k = CastedLinear(dim, dim)
        self.c_v = CastedLinear(dim, dim)
        self.lambdas = nn.Parameter(torch.tensor([0.5, 0.5]))
        self.rotary = Rotary(dim // num_heads) # dim // num_heads = head_dim
        self.c_proj = CastedLinear(dim, dim)
        self.c_proj.weight.data.zero_() # zero init suggested by @Grad62304977
        # self.attn_scale = nn.Parameter(torch.tensor(1.0 / (dim // num_heads) ** 0.5))
        # self.attn_scale = nn.Parameter(torch.tensor(0.20))
        self.attn_scale = 0.13 + 0.01 * min(layer_id, 11 - layer_id)

    def forward(self, x, ve, block_mask):
        B, T = x.size(0), x.size(1) # batch size, sequence length
        assert B == 1, 'Must use batch size = 1 for FlexAttention'
        q = self.c_q(x).view(B, T, self.num_heads, -1)
        k = self.c_k(x).view(B, T, self.num_heads, -1)
        v = self.c_v(x).view(B, T, self.num_heads, -1)
        if ve is not None:
            v = self.lambdas[0] * v + self.lambdas[1] * ve.view_as(v) # @KoszarskyB & @Grad62304977
        else: # skip mid-layers token value embeddings by @YouJiacheng
            v = self.lambdas[0] * v
        q, k = norm(q), norm(k) # QK norm @Grad62304977
        q, k = self.rotary(q), self.rotary(k)
        # y = flex_attention(q.transpose(1, 2) * self.attn_scale, k.transpose(1, 2), v.transpose(1, 2), block_mask=block_mask, scale=1.)
        y = flex_attention(q.transpose(1, 2), k.transpose(1, 2), v.transpose(1, 2), block_mask=block_mask, scale=self.attn_scale)
        y = y.transpose(1, 2).contiguous().view_as(x) # re-assemble all head outputs side by side
        y = self.c_proj(y)
        return y

class MLP(nn.Module):

    def __init__(self, dim):
        super().__init__()
        self.c_fc = CastedLinear(dim, 4 * dim)
        self.c_proj = CastedLinear(4 * dim, dim)
        self.c_proj.weight.data.zero_() # zero init suggested by @Grad62304977

    def forward(self, x):
        x = self.c_fc(x)
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = self.c_proj(x)
        return x

class Block(nn.Module):

    def __init__(self, model_dim, num_heads, layer_id, use_attn=True):
        super().__init__()
        self.attn = CausalSelfAttention(model_dim, num_heads, layer_id) if use_attn else None
        self.mlp = MLP(model_dim)
        self.lambdas = nn.Parameter(torch.tensor([1., 0.]))

    def forward(self, x, ve, x0, block_mask):
        x = self.lambdas[0] * x + self.lambdas[1] * x0
        if self.attn is not None:
            x = x + self.attn(norm(x), ve, block_mask)
        x = x + self.mlp(norm(x))
        return x

class ValueEmbedding(nn.Module):
    def __init__(self, vocab_size, model_dim):
        super().__init__()
        self.embed = nn.ModuleList([nn.Embedding(vocab_size, model_dim) for _ in range(3)])

    def forward(self, inputs):
        ve = [emb(inputs).bfloat16() for emb in self.embed]
        # 012 ... 012 structure on token value embeddings by @YouJiacheng, improved on @leloykun's U-net structure
        ve = [ve[0], ve[1], ve[2], None, None, None, None, None, None, ve[0], ve[1], ve[2]]
        return ve

# -----------------------------------------------------------------------------
# The main GPT-2 model

class GPT(nn.Module):

    def __init__(self, vocab_size, num_layers, num_heads, model_dim):
        super().__init__()
        self.embed = nn.Embedding(vocab_size, model_dim)
        # skip attention of blocks.7 (the 8th layer) by @YouJiacheng
        self.blocks = nn.ModuleList([Block(model_dim, num_heads, layer_id=layer_id, use_attn=(layer_id != 7))
                                     for layer_id in range(num_layers)])
        # token value embeddings by @KoszarskyB - inspired by @Grad62304977's value residual learning
        # U-net structure on token value embeddings by @leloykun
        self.value_embeds = ValueEmbedding(vocab_size, model_dim)
        self.lm_head = CastedLinear(model_dim, vocab_size)
        self.lm_head.weight.data.zero_() # @Grad62304977
        # U-net design by @brendanh0gan
        self.num_encoder_layers = num_layers // 2 # Half of the layers for encoder
        self.num_decoder_layers = num_layers - self.num_encoder_layers # Remaining for decoder
        # Add learnable skip connection weights for decoder layers
        self.skip_weights = nn.Parameter(torch.ones(self.num_decoder_layers))

    def forward(self, inputs, targets, sliding_window_num_blocks):
        BLOCK_SIZE = 128
        seq_len = len(inputs)
        assert seq_len % BLOCK_SIZE == 0
        total_num_blocks = seq_len // BLOCK_SIZE
        assert inputs.ndim == 1
        docs = (inputs == 50256).cumsum(0)
        docs_low = docs.view(-1, BLOCK_SIZE)[:, 0].contiguous()
        docs_high = docs.view(-1, BLOCK_SIZE)[:, -1].contiguous()

        def document_causal(b, h, q_idx, kv_idx):
            causal_mask = q_idx >= kv_idx
            document_mask = docs[q_idx] == docs[kv_idx]
            return causal_mask & document_mask

        def dense_to_ordered(dense_mask):
            num_blocks = dense_mask.sum(dim=-1, dtype=torch.int32)
            indices = dense_mask.argsort(dim=-1, descending=True, stable=True).to(torch.int32)
            return num_blocks[None, None].contiguous(), indices[None, None].contiguous()

        def create_doc_swc_block_mask(sliding_window_num_blocks):
            kv_idx = block_idx = torch.arange(total_num_blocks, dtype=torch.int32, device='cuda')
            q_idx = block_idx[:, None]
            causal_bm = q_idx >= kv_idx
            causal_full_bm = q_idx > kv_idx
            window_bm = q_idx - kv_idx < sliding_window_num_blocks
            window_full_bm = window_bm # block-wise sliding window by @YouJiacheng
            # document_bm = (docs_low[q_idx] <= docs_high[kv_idx]) & (docs_low[kv_idx] <= docs_high[q_idx])
            document_bm = (docs_low[:, None] <= docs_high) & (docs_low <= docs_high[:, None])
            document_full_bm = (docs_low[:, None] == docs_high) & (docs_low == docs_high[:, None])
            nonzero_bm = causal_bm & window_bm & document_bm
            full_bm  = causal_full_bm & window_full_bm & document_full_bm
            kv_num_blocks, kv_indices = dense_to_ordered(nonzero_bm & ~full_bm)
            full_kv_num_blocks, full_kv_indices = dense_to_ordered(full_bm)
            return BlockMask.from_kv_blocks(
                kv_num_blocks,
                kv_indices,
                full_kv_num_blocks,
                full_kv_indices,
                BLOCK_SIZE=BLOCK_SIZE,
                mask_mod=document_causal,
            )

        block_mask = create_doc_swc_block_mask(sliding_window_num_blocks)

        x0 = norm(self.embed(inputs[None]).bfloat16()) # use of norm here by @Grad62304977
        x = x0
        ve = self.value_embeds(inputs)
        assert len(ve) == len(self.blocks)
        ve_enc, ve_dec = ve[:self.num_encoder_layers], ve[self.num_encoder_layers:]

        # Store outputs for U-Net skip connections
        skip_connections = []
        # Encoder pass - process only the first half of the blocks
        for i in range(self.num_encoder_layers):
            x = self.blocks[i](x, ve_enc[i], x0, block_mask)
            skip_connections.append(x)
        # Decoder pass - process the remaining blocks with weighted skip connections
        for i in range(self.num_decoder_layers):
            x = x + self.skip_weights[i] * skip_connections.pop()
            # U-net structure on token value embeddings by @leloykun
            x = self.blocks[self.num_encoder_layers + i](x, ve_dec[i], x0, block_mask)

        x = norm(x)
        logits = self.lm_head(x)
        logits = 15 * torch.tanh(logits / 15) # @Grad62304977 added tanh softcapping, @KoszarskyB reduced it from 30 to 15
        logits = logits.float()
        loss = F.cross_entropy(logits.view(-1, logits.size(-1)), targets)
        return loss

# -----------------------------------------------------------------------------
# Our own simple Distributed Data Loader

def _load_data_shard(path):
    # only reads the header, returns header data
    # header is 256 int32
    header = torch.from_file(path, False, 256, dtype=torch.int32)
    assert header[0] == 20240520, 'magic number mismatch in the data .bin file'
    assert header[1] == 1, 'unsupported version'
    num_tokens = int(header[2]) # number of tokens (claimed)
    with open(path, 'rb', buffering=0) as f:
        tokens = torch.empty(num_tokens, dtype=torch.uint16, pin_memory=True) # avoid pin_memory copy by @YouJiacheng
        f.seek(256 * 4)
        nbytes = f.readinto(tokens.numpy()) # avoid bytes->array copy by @YouJiacheng
        assert nbytes == 2 * num_tokens, 'number of tokens read does not match header'
    return tokens

class DistributedDataLoader:

    def __init__(self, filename_pattern):
        self.rank = int(os.environ['RANK'])
        self.world_size = int(os.environ['WORLD_SIZE'])
        self.files = sorted(glob.glob(filename_pattern))
        self.reset()

    def reset(self):
        self.current_shard = -1
        self.advance()

    def advance(self):
        self.current_shard = (self.current_shard + 1) % len(self.files)
        self.current_position = 0
        self.tokens = _load_data_shard(self.files[self.current_shard])

    def next_batch(self, batch_size):
        assert batch_size % self.world_size == 0
        device_batch_size = batch_size // self.world_size
        # load next shard if necessary
        if self.current_position + batch_size + 1 >= len(self.tokens):
            self.advance()
        pos = self.current_position + self.rank * device_batch_size
        device_batch_tokens = self.tokens[pos:pos+device_batch_size+1]
        # advance current position
        self.current_position += batch_size
        inputs = device_batch_tokens[:-1].to(device='cuda', dtype=torch.int32, non_blocking=True)
        targets = device_batch_tokens[1:].to(device='cuda', dtype=torch.int64, non_blocking=True)
        return inputs, targets

# -----------------------------------------------------------------------------
# int main

@dataclass
class Hyperparameters:
    # data
    train_files = 'data/fineweb10B/fineweb_train_*.bin' # input .bin to train on
    val_files = 'data/fineweb10B/fineweb_val_*.bin' # input .bin to eval validation loss on
    val_tokens = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    # optimization
    batch_size = 8*64*1024 # batch size in tokens
    num_iterations = 1375 # number of iterations to run
    cooldown_frac = 0.4 # fraction of training spent cooling down the learning rate
    bf16_embeds = True
    # evaluation and logging
    val_loss_every = 125 # every how many steps to evaluate val loss? 0 for only at the end
    # implementation
    max_device_batch_size = 64*1024 # batch size per device in tokens
    save_checkpoint = False
args = Hyperparameters()

micro_bs = args.max_device_batch_size

# set up DDP (distributed data parallel). torchrun sets this env variable
rank = int(os.environ['RANK'])
local_rank = int(os.environ['LOCAL_RANK'])
world_size = int(os.environ['WORLD_SIZE'])
assert torch.cuda.is_available()
torch.cuda.set_device(local_rank)
dist.init_process_group(backend='nccl', device_id=torch.device(local_rank))
dist.barrier()
master_process = (rank == 0) # this process will do logging, checkpointing etc.

# begin logging
logfile = None
if master_process:
    run_id = uuid.uuid4()
    os.makedirs('logs', exist_ok=True)
    logfile = f'logs/{run_id}.txt'
    print(logfile)

def print0(s, console=False):
    if master_process:
        with open(logfile, 'a') as f:
            if console:
                print(s)
            print(s, file=f)

# begin by printing this file (the Python code)
print0(code)
print0('='*100)
# log information about the hardware/software environment this is running on
print0(f'Running Python {sys.version}')
print0(f'Running PyTorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}')
print0(subprocess.run(['nvidia-smi'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).stdout)
print0('='*100)

# load data
train_loader = DistributedDataLoader(args.train_files)
val_loader = DistributedDataLoader(args.val_files)
print0(f'Training dataloader files: {train_loader.files}')
print0(f'Validation dataloader files: {val_loader.files}')
print0('='*100)

# there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency. suggested to me by @Grad62304977.
# this originates from Karpathy's experiments.
model = GPT(vocab_size=50304, num_layers=12, num_heads=6, model_dim=768)
model = model.cuda()
if args.bf16_embeds:
    for m in model.modules():
        if isinstance(m, nn.Embedding):
            m.bfloat16()
model: GPT = torch.compile(model)
ddp_model = DDP(model, device_ids=[local_rank], broadcast_buffers=False, gradient_as_bucket_view=True)

# collect the parameters to optimize
hidden_matrix_params = [p for p in model.blocks.parameters() if p.ndim == 2]
embed_params = [model.embed.weight, *model.value_embeds.parameters()]
scalar_params = [p for n, p in model.named_parameters() if p.ndim < 2 and "attn_scale" not in n]
attn_scale_params = [p for n, p in model.named_parameters() if p.ndim < 2 and "attn_scale" in n]
head_params = [model.lm_head.weight]

# init the optimizer(s)
optimizer1 = torch.optim.Adam([dict(params=embed_params, lr=0.6),
                               dict(params=head_params, lr=0.008),
                               dict(params=scalar_params, lr=0.04),
                               dict(params=attn_scale_params, lr=0.01)],
                              betas=(0.8, 0.95), fused=True)
optimizer2 = Muon(hidden_matrix_params, lr=0.05, momentum=0.95)
optimizers = [optimizer1, optimizer2]

# learning rate schedule: stable then decay
def get_lr(it):
    t = 1 - it / args.num_iterations # time remaining in training
    assert 1 >= t > 0
    # 1) constant lr for first part of training
    if t >= args.cooldown_frac:
        return 1.0
    # 2) then linear cooldown
    else:
        return t / args.cooldown_frac
schedulers = [torch.optim.lr_scheduler.LambdaLR(opt, get_lr) for opt in optimizers]

# sliding window size schedule: linear increase over training in chunks of 128 from 128 -> 1792. By @fernbear.bsky.social
def get_sliding_window_blocks(it):
    x = it / args.num_iterations # training progress
    assert 0 <= x <= 1
    return int(((1 - x) * 128 + x * 1856) // 128)
sliding_window_num_blocks = torch.tensor(1, dtype=torch.int32, device='cuda')

# Start training loop
training_time_ms = 0
# start the clock
torch.cuda.synchronize()
t0 = time.perf_counter()
# begin training
train_steps = args.num_iterations
for step in range(train_steps + 1):
    last_step = (step == train_steps)
    # This effectively ignores timing first 10 steps, which are slower for weird reasons.
    # Alternately, and slightly more correctly in terms of benchmarking, we could do 10
    # steps with dummy data first, and then re-initialize the model and reset the loader.
    if step == 10:
        training_time_ms = 0
        t0 = time.perf_counter()
    timed_steps = float('nan') if step <= 11 else (step - 10) + 1 # <= 11 to avoid bug in val

    sliding_window_num_blocks.copy_(get_sliding_window_blocks(step))

    # --------------- VALIDATION SECTION -----------------
    if last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0):
        # stop the clock
        torch.cuda.synchronize()
        training_time_ms += 1000 * (time.perf_counter() - t0)
        # run validation batches
        model.eval()
        val_loader.reset()
        val_loss = 0.0
        # calculate the number of steps to take in the val loop.
        val_batch_size = world_size * micro_bs
        assert args.val_tokens % val_batch_size == 0
        val_steps = args.val_tokens // val_batch_size
        for _ in range(val_steps):
            with torch.no_grad():
                inputs_val, targets_val = val_loader.next_batch(val_batch_size)
                val_loss += ddp_model(inputs_val, targets_val, sliding_window_num_blocks)
        # Print attention scales
        for n, p in model.named_parameters():
            if p.ndim < 2 and "attn_scale" in n:
                print0(f'{n}: {p.item()}', console=True)
        dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
        val_loss /= val_steps
        # logging
        print0(f'step:{step}/{train_steps} val_loss:{val_loss:.4f} train_time:{training_time_ms:.0f}ms step_avg:{training_time_ms/(timed_steps-1):.2f}ms', console=True)
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.perf_counter()

    if last_step:
        if master_process and args.save_checkpoint:
            log = dict(step=step, code=code, model=model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
            os.makedirs(f'logs/{run_id}', exist_ok=True)
            torch.save(log, f'logs/{run_id}/state_step{step:06d}.pt')
        # the last step only has the validation loop, so break to avoid training
        break

    # --------------- TRAINING SECTION -----------------
    model.train()
    batch_size = args.batch_size
    assert batch_size % world_size == 0
    inputs_train, targets_train = train_loader.next_batch(batch_size)
    assert len(inputs_train) <= micro_bs or len(inputs_train) % micro_bs == 0
    for micro_inputs_train, micro_targets_train in zip(inputs_train.split(micro_bs), targets_train.split(micro_bs)):
        ddp_model(micro_inputs_train, micro_targets_train, sliding_window_num_blocks).backward()
    # momentum warmup for Muon
    frac = min(step/300, 1)
    for group in optimizer2.param_groups:
        group['momentum'] = (1 - frac) * 0.85 + frac * 0.95
    # step the optimizers and schedulers
    for opt, sched in zip(optimizers, schedulers):
        opt.step()
        if step != train_steps-1:
            sched.step()
    # null the gradients
    model.zero_grad(set_to_none=True)
    # logging
    approx_time = training_time_ms + 1000 * (time.perf_counter() - t0)
    print0(f'step:{step+1}/{train_steps} train_time:{approx_time:.0f}ms step_avg:{approx_time/timed_steps:.2f}ms', console=True)

print0(f'peak memory consumption: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB')
dist.destroy_process_group()

====================================================================================================
Running Python 3.10.12 (main, Sep 11 2024, 15:47:36) [GCC 11.4.0]
Running PyTorch 2.6.0.dev20241231+cu126 compiled for CUDA 12.6
Tue Jan 14 15:29:48 2025       
+---------------------------------------------------------------------------------------+
| NVIDIA-SMI 535.183.06             Driver Version: 535.183.06   CUDA Version: 12.4     |
|-----------------------------------------+----------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |
|                                         |                      |               MIG M. |
|=========================================+======================+======================|
|   0  NVIDIA H100 80GB HBM3          On  | 00000000:19:00.0 Off |                    0 |
| N/A   38C    P0             126W / 700W |   7713MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  | 00000000:3B:00.0 Off |                    0 |
| N/A   32C    P0             114W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  | 00000000:4C:00.0 Off |                    0 |
| N/A   29C    P0             117W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  | 00000000:5D:00.0 Off |                    0 |
| N/A   37C    P0             129W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  | 00000000:9B:00.0 Off |                    0 |
| N/A   38C    P0             123W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  | 00000000:BB:00.0 Off |                    0 |
| N/A   30C    P0             115W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  | 00000000:CB:00.0 Off |                    0 |
| N/A   36C    P0             116W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  | 00000000:DB:00.0 Off |                    0 |
| N/A   29C    P0             117W / 700W |   3211MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
                                                                                         
+---------------------------------------------------------------------------------------+
| Processes:                                                                            |
|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |
|        ID   ID                                                             Usage      |
|=======================================================================================|
+---------------------------------------------------------------------------------------+

====================================================================================================
Training dataloader files: ['data/fineweb10B/fineweb_train_000001.bin', 'data/fineweb10B/fineweb_train_000002.bin', 'data/fineweb10B/fineweb_train_000003.bin', 'data/fineweb10B/fineweb_train_000004.bin', 'data/fineweb10B/fineweb_train_000005.bin', 'data/fineweb10B/fineweb_train_000006.bin', 'data/fineweb10B/fineweb_train_000007.bin', 'data/fineweb10B/fineweb_train_000008.bin', 'data/fineweb10B/fineweb_train_000009.bin']
Validation dataloader files: ['data/fineweb10B/fineweb_val_000000.bin']
====================================================================================================
step:0/1375 val_loss:10.8258 train_time:0ms step_avg:nanms
step:1/1375 train_time:27521ms step_avg:nanms
step:2/1375 train_time:27610ms step_avg:nanms
step:3/1375 train_time:27793ms step_avg:nanms
step:4/1375 train_time:27925ms step_avg:nanms
step:5/1375 train_time:28059ms step_avg:nanms
step:6/1375 train_time:28194ms step_avg:nanms
step:7/1375 train_time:28327ms step_avg:nanms
step:8/1375 train_time:28460ms step_avg:nanms
step:9/1375 train_time:28593ms step_avg:nanms
step:10/1375 train_time:28733ms step_avg:nanms
step:11/1375 train_time:139ms step_avg:nanms
step:12/1375 train_time:275ms step_avg:nanms
step:13/1375 train_time:411ms step_avg:137.08ms
step:14/1375 train_time:545ms step_avg:136.20ms
step:15/1375 train_time:679ms step_avg:135.86ms
step:16/1375 train_time:813ms step_avg:135.57ms
step:17/1375 train_time:950ms step_avg:135.68ms
step:18/1375 train_time:1087ms step_avg:135.92ms
step:19/1375 train_time:1223ms step_avg:135.92ms
step:20/1375 train_time:1359ms step_avg:135.90ms
step:21/1375 train_time:1494ms step_avg:135.86ms
step:22/1375 train_time:1629ms step_avg:135.77ms
step:23/1375 train_time:1766ms step_avg:135.81ms
step:24/1375 train_time:1901ms step_avg:135.79ms
step:25/1375 train_time:2037ms step_avg:135.78ms
step:26/1375 train_time:2173ms step_avg:135.81ms
step:27/1375 train_time:2310ms step_avg:135.85ms
step:28/1375 train_time:2444ms step_avg:135.76ms
step:29/1375 train_time:2580ms step_avg:135.81ms
step:30/1375 train_time:2716ms step_avg:135.79ms
step:31/1375 train_time:2850ms step_avg:135.73ms
step:32/1375 train_time:2986ms step_avg:135.72ms
step:33/1375 train_time:3121ms step_avg:135.68ms
step:34/1375 train_time:3256ms step_avg:135.67ms
step:35/1375 train_time:3392ms step_avg:135.67ms
step:36/1375 train_time:3528ms step_avg:135.68ms
step:37/1375 train_time:3664ms step_avg:135.70ms
step:38/1375 train_time:3799ms step_avg:135.69ms
step:39/1375 train_time:3935ms step_avg:135.69ms
step:40/1375 train_time:4070ms step_avg:135.68ms
step:41/1375 train_time:4204ms step_avg:135.62ms
step:42/1375 train_time:4340ms step_avg:135.62ms
step:43/1375 train_time:4475ms step_avg:135.60ms
step:44/1375 train_time:4611ms step_avg:135.61ms
step:45/1375 train_time:4746ms step_avg:135.60ms
step:46/1375 train_time:4881ms step_avg:135.58ms
step:47/1375 train_time:5016ms step_avg:135.56ms
step:48/1375 train_time:5152ms step_avg:135.57ms
step:49/1375 train_time:5290ms step_avg:135.63ms
step:50/1375 train_time:5423ms step_avg:135.58ms
step:51/1375 train_time:5558ms step_avg:135.57ms
step:52/1375 train_time:5694ms step_avg:135.57ms
step:53/1375 train_time:5829ms step_avg:135.56ms
step:54/1375 train_time:5966ms step_avg:135.59ms
step:55/1375 train_time:6101ms step_avg:135.57ms
step:56/1375 train_time:6237ms step_avg:135.59ms
step:57/1375 train_time:6374ms step_avg:135.61ms
step:58/1375 train_time:6509ms step_avg:135.60ms
step:59/1375 train_time:6643ms step_avg:135.57ms
step:60/1375 train_time:6778ms step_avg:135.56ms
step:61/1375 train_time:6913ms step_avg:135.56ms
step:62/1375 train_time:7049ms step_avg:135.57ms
step:63/1375 train_time:7184ms step_avg:135.55ms
step:64/1375 train_time:7320ms step_avg:135.56ms
step:65/1375 train_time:7456ms step_avg:135.56ms
step:66/1375 train_time:7591ms step_avg:135.56ms
step:67/1375 train_time:7727ms step_avg:135.56ms
step:68/1375 train_time:7862ms step_avg:135.55ms
step:69/1375 train_time:7997ms step_avg:135.54ms
step:70/1375 train_time:8132ms step_avg:135.54ms
step:71/1375 train_time:8269ms step_avg:135.56ms
step:72/1375 train_time:8404ms step_avg:135.54ms
step:73/1375 train_time:8539ms step_avg:135.53ms
step:74/1375 train_time:8674ms step_avg:135.53ms
step:75/1375 train_time:8809ms step_avg:135.53ms
step:76/1375 train_time:8946ms step_avg:135.55ms
step:77/1375 train_time:9081ms step_avg:135.54ms
step:78/1375 train_time:9216ms step_avg:135.53ms
step:79/1375 train_time:9352ms step_avg:135.54ms
step:80/1375 train_time:9488ms step_avg:135.55ms
step:81/1375 train_time:9622ms step_avg:135.53ms
step:82/1375 train_time:9757ms step_avg:135.52ms
step:83/1375 train_time:9892ms step_avg:135.51ms
step:84/1375 train_time:10029ms step_avg:135.52ms
step:85/1375 train_time:10164ms step_avg:135.52ms
step:86/1375 train_time:10298ms step_avg:135.51ms
step:87/1375 train_time:10436ms step_avg:135.53ms
step:88/1375 train_time:10573ms step_avg:135.55ms
step:89/1375 train_time:10708ms step_avg:135.55ms
step:90/1375 train_time:10844ms step_avg:135.54ms
step:91/1375 train_time:10979ms step_avg:135.55ms
step:92/1375 train_time:11113ms step_avg:135.53ms
step:93/1375 train_time:11250ms step_avg:135.54ms
step:94/1375 train_time:11385ms step_avg:135.54ms
step:95/1375 train_time:11521ms step_avg:135.55ms
step:96/1375 train_time:11657ms step_avg:135.55ms
step:97/1375 train_time:11794ms step_avg:135.56ms
step:98/1375 train_time:11931ms step_avg:135.58ms
step:99/1375 train_time:12066ms step_avg:135.57ms
step:100/1375 train_time:12201ms step_avg:135.57ms
step:101/1375 train_time:12336ms step_avg:135.56ms
step:102/1375 train_time:12473ms step_avg:135.58ms
step:103/1375 train_time:12610ms step_avg:135.59ms
step:104/1375 train_time:12749ms step_avg:135.63ms
step:105/1375 train_time:12887ms step_avg:135.65ms
step:106/1375 train_time:13026ms step_avg:135.68ms
step:107/1375 train_time:13165ms step_avg:135.72ms
step:108/1375 train_time:13304ms step_avg:135.75ms
step:109/1375 train_time:13442ms step_avg:135.78ms
step:110/1375 train_time:13581ms step_avg:135.81ms
step:111/1375 train_time:13718ms step_avg:135.83ms
step:112/1375 train_time:13858ms step_avg:135.87ms
step:113/1375 train_time:13996ms step_avg:135.89ms
step:114/1375 train_time:14137ms step_avg:135.94ms
step:115/1375 train_time:14276ms step_avg:135.96ms
step:116/1375 train_time:14415ms step_avg:135.99ms
step:117/1375 train_time:14553ms step_avg:136.01ms
step:118/1375 train_time:14691ms step_avg:136.03ms
step:119/1375 train_time:14830ms step_avg:136.05ms
step:120/1375 train_time:14968ms step_avg:136.08ms
step:121/1375 train_time:15108ms step_avg:136.11ms
step:122/1375 train_time:15247ms step_avg:136.13ms
step:123/1375 train_time:15386ms step_avg:136.16ms
step:124/1375 train_time:15524ms step_avg:136.18ms
step:125/1375 train_time:15664ms step_avg:136.21ms
step:125/1375 val_loss:4.3633 train_time:15733ms step_avg:136.81ms
step:126/1375 train_time:15806ms step_avg:136.26ms
step:127/1375 train_time:15951ms step_avg:136.33ms
step:128/1375 train_time:16090ms step_avg:136.36ms
step:129/1375 train_time:16228ms step_avg:136.37ms
step:130/1375 train_time:16367ms step_avg:136.39ms
step:131/1375 train_time:16505ms step_avg:136.41ms
step:132/1375 train_time:16643ms step_avg:136.42ms
step:133/1375 train_time:16785ms step_avg:136.46ms
step:134/1375 train_time:16925ms step_avg:136.49ms
step:135/1375 train_time:17065ms step_avg:136.52ms
step:136/1375 train_time:17203ms step_avg:136.53ms
step:137/1375 train_time:17342ms step_avg:136.55ms
step:138/1375 train_time:17481ms step_avg:136.57ms
step:139/1375 train_time:17618ms step_avg:136.58ms
step:140/1375 train_time:17756ms step_avg:136.59ms
step:141/1375 train_time:17896ms step_avg:136.61ms
step:142/1375 train_time:18035ms step_avg:136.63ms
step:143/1375 train_time:18177ms step_avg:136.67ms
step:144/1375 train_time:18318ms step_avg:136.70ms
step:145/1375 train_time:18456ms step_avg:136.71ms
step:146/1375 train_time:18595ms step_avg:136.73ms
step:147/1375 train_time:18733ms step_avg:136.74ms
step:148/1375 train_time:18874ms step_avg:136.77ms
step:149/1375 train_time:19013ms step_avg:136.78ms
step:150/1375 train_time:19153ms step_avg:136.81ms
step:151/1375 train_time:19292ms step_avg:136.83ms
step:152/1375 train_time:19433ms step_avg:136.85ms
step:153/1375 train_time:19572ms step_avg:136.87ms
step:154/1375 train_time:19712ms step_avg:136.89ms
step:155/1375 train_time:19852ms step_avg:136.91ms
step:156/1375 train_time:19991ms step_avg:136.93ms
step:157/1375 train_time:20130ms step_avg:136.94ms
step:158/1375 train_time:20271ms step_avg:136.97ms
step:159/1375 train_time:20411ms step_avg:136.99ms
step:160/1375 train_time:20550ms step_avg:137.00ms
step:161/1375 train_time:20690ms step_avg:137.02ms
step:162/1375 train_time:20830ms step_avg:137.04ms
step:163/1375 train_time:20971ms step_avg:137.06ms
step:164/1375 train_time:21112ms step_avg:137.09ms
step:165/1375 train_time:21251ms step_avg:137.10ms
step:166/1375 train_time:21391ms step_avg:137.12ms
step:167/1375 train_time:21530ms step_avg:137.13ms
step:168/1375 train_time:21670ms step_avg:137.15ms
step:169/1375 train_time:21810ms step_avg:137.17ms
step:170/1375 train_time:21951ms step_avg:137.19ms
step:171/1375 train_time:22091ms step_avg:137.21ms
step:172/1375 train_time:22231ms step_avg:137.23ms
step:173/1375 train_time:22371ms step_avg:137.25ms
step:174/1375 train_time:22511ms step_avg:137.26ms
step:175/1375 train_time:22651ms step_avg:137.28ms
step:176/1375 train_time:22792ms step_avg:137.30ms
step:177/1375 train_time:22931ms step_avg:137.31ms
step:178/1375 train_time:23071ms step_avg:137.33ms
step:179/1375 train_time:23211ms step_avg:137.35ms
step:180/1375 train_time:23351ms step_avg:137.36ms
step:181/1375 train_time:23490ms step_avg:137.37ms
step:182/1375 train_time:23628ms step_avg:137.37ms
step:183/1375 train_time:23769ms step_avg:137.39ms
step:184/1375 train_time:23909ms step_avg:137.41ms
step:185/1375 train_time:24049ms step_avg:137.42ms
step:186/1375 train_time:24191ms step_avg:137.45ms
step:187/1375 train_time:24329ms step_avg:137.45ms
step:188/1375 train_time:24468ms step_avg:137.46ms
step:189/1375 train_time:24608ms step_avg:137.48ms
step:190/1375 train_time:24749ms step_avg:137.49ms
step:191/1375 train_time:24924ms step_avg:137.70ms
step:192/1375 train_time:25062ms step_avg:137.70ms
step:193/1375 train_time:25199ms step_avg:137.70ms
step:194/1375 train_time:25337ms step_avg:137.70ms
step:195/1375 train_time:25475ms step_avg:137.70ms
step:196/1375 train_time:25613ms step_avg:137.70ms
step:197/1375 train_time:25754ms step_avg:137.72ms
step:198/1375 train_time:25896ms step_avg:137.75ms
step:199/1375 train_time:26036ms step_avg:137.75ms
step:200/1375 train_time:26174ms step_avg:137.76ms
step:201/1375 train_time:26312ms step_avg:137.76ms
step:202/1375 train_time:26452ms step_avg:137.77ms
step:203/1375 train_time:26589ms step_avg:137.77ms
step:204/1375 train_time:26728ms step_avg:137.77ms
step:205/1375 train_time:26870ms step_avg:137.79ms
step:206/1375 train_time:27014ms step_avg:137.83ms
step:207/1375 train_time:27155ms step_avg:137.84ms
step:208/1375 train_time:27296ms step_avg:137.86ms
step:209/1375 train_time:27438ms step_avg:137.88ms
step:210/1375 train_time:27578ms step_avg:137.89ms
step:211/1375 train_time:27721ms step_avg:137.91ms
step:212/1375 train_time:27862ms step_avg:137.93ms
step:213/1375 train_time:28005ms step_avg:137.95ms
step:214/1375 train_time:28146ms step_avg:137.97ms
step:215/1375 train_time:28288ms step_avg:137.99ms
step:216/1375 train_time:28430ms step_avg:138.01ms
step:217/1375 train_time:28572ms step_avg:138.03ms
step:218/1375 train_time:28713ms step_avg:138.04ms
step:219/1375 train_time:28855ms step_avg:138.06ms
step:220/1375 train_time:28997ms step_avg:138.08ms
step:221/1375 train_time:29139ms step_avg:138.10ms
step:222/1375 train_time:29280ms step_avg:138.11ms
step:223/1375 train_time:29423ms step_avg:138.14ms
step:224/1375 train_time:29563ms step_avg:138.15ms
step:225/1375 train_time:29705ms step_avg:138.16ms
step:226/1375 train_time:29847ms step_avg:138.18ms
step:227/1375 train_time:29990ms step_avg:138.20ms
step:228/1375 train_time:30132ms step_avg:138.22ms
step:229/1375 train_time:30274ms step_avg:138.24ms
step:230/1375 train_time:30417ms step_avg:138.26ms
step:231/1375 train_time:30558ms step_avg:138.27ms
step:232/1375 train_time:30700ms step_avg:138.29ms
step:233/1375 train_time:30841ms step_avg:138.30ms
step:234/1375 train_time:30984ms step_avg:138.32ms
step:235/1375 train_time:31127ms step_avg:138.34ms
step:236/1375 train_time:31267ms step_avg:138.35ms
step:237/1375 train_time:31410ms step_avg:138.37ms
step:238/1375 train_time:31552ms step_avg:138.39ms
step:239/1375 train_time:31694ms step_avg:138.40ms
step:240/1375 train_time:31835ms step_avg:138.41ms
step:241/1375 train_time:31977ms step_avg:138.43ms
step:242/1375 train_time:32119ms step_avg:138.44ms
step:243/1375 train_time:32261ms step_avg:138.46ms
step:244/1375 train_time:32402ms step_avg:138.47ms
step:245/1375 train_time:32545ms step_avg:138.49ms
step:246/1375 train_time:32687ms step_avg:138.50ms
step:247/1375 train_time:32829ms step_avg:138.52ms
step:248/1375 train_time:32970ms step_avg:138.53ms
step:249/1375 train_time:33113ms step_avg:138.55ms
step:250/1375 train_time:33254ms step_avg:138.56ms
step:250/1375 val_loss:3.9518 train_time:33322ms step_avg:138.84ms
step:251/1375 train_time:33396ms step_avg:138.57ms
step:252/1375 train_time:33541ms step_avg:138.60ms
step:253/1375 train_time:33682ms step_avg:138.61ms
step:254/1375 train_time:33823ms step_avg:138.62ms
step:255/1375 train_time:33963ms step_avg:138.63ms
step:256/1375 train_time:34103ms step_avg:138.63ms
step:257/1375 train_time:34244ms step_avg:138.64ms
step:258/1375 train_time:34389ms step_avg:138.67ms
step:259/1375 train_time:34532ms step_avg:138.68ms
step:260/1375 train_time:34673ms step_avg:138.69ms
step:261/1375 train_time:34814ms step_avg:138.70ms
step:262/1375 train_time:34955ms step_avg:138.71ms
step:263/1375 train_time:35096ms step_avg:138.72ms
step:264/1375 train_time:35238ms step_avg:138.73ms
step:265/1375 train_time:35380ms step_avg:138.74ms
step:266/1375 train_time:35522ms step_avg:138.76ms
step:267/1375 train_time:35664ms step_avg:138.77ms
step:268/1375 train_time:35805ms step_avg:138.78ms
step:269/1375 train_time:35945ms step_avg:138.78ms
step:270/1375 train_time:36087ms step_avg:138.80ms
step:271/1375 train_time:36229ms step_avg:138.81ms
step:272/1375 train_time:36370ms step_avg:138.82ms
step:273/1375 train_time:36511ms step_avg:138.82ms
step:274/1375 train_time:36652ms step_avg:138.83ms
step:275/1375 train_time:36794ms step_avg:138.84ms
step:276/1375 train_time:36935ms step_avg:138.85ms
step:277/1375 train_time:37077ms step_avg:138.86ms
step:278/1375 train_time:37218ms step_avg:138.87ms
step:279/1375 train_time:37360ms step_avg:138.88ms
step:280/1375 train_time:37500ms step_avg:138.89ms
step:281/1375 train_time:37641ms step_avg:138.90ms
step:282/1375 train_time:37783ms step_avg:138.91ms
step:283/1375 train_time:37926ms step_avg:138.92ms
step:284/1375 train_time:38068ms step_avg:138.93ms
step:285/1375 train_time:38210ms step_avg:138.94ms
step:286/1375 train_time:38352ms step_avg:138.96ms
step:287/1375 train_time:38495ms step_avg:138.97ms
step:288/1375 train_time:38636ms step_avg:138.98ms
step:289/1375 train_time:38776ms step_avg:138.98ms
step:290/1375 train_time:38918ms step_avg:138.99ms
step:291/1375 train_time:39061ms step_avg:139.01ms
step:292/1375 train_time:39204ms step_avg:139.02ms
step:293/1375 train_time:39346ms step_avg:139.03ms
step:294/1375 train_time:39489ms step_avg:139.05ms
step:295/1375 train_time:39630ms step_avg:139.05ms
step:296/1375 train_time:39771ms step_avg:139.06ms
step:297/1375 train_time:39912ms step_avg:139.07ms
step:298/1375 train_time:40055ms step_avg:139.08ms
step:299/1375 train_time:40197ms step_avg:139.09ms
step:300/1375 train_time:40340ms step_avg:139.10ms
step:301/1375 train_time:40482ms step_avg:139.11ms
step:302/1375 train_time:40625ms step_avg:139.13ms
step:303/1375 train_time:40768ms step_avg:139.14ms
step:304/1375 train_time:40910ms step_avg:139.15ms
step:305/1375 train_time:41051ms step_avg:139.16ms
step:306/1375 train_time:41194ms step_avg:139.17ms
step:307/1375 train_time:41338ms step_avg:139.18ms
step:308/1375 train_time:41481ms step_avg:139.20ms
step:309/1375 train_time:41625ms step_avg:139.22ms
step:310/1375 train_time:41770ms step_avg:139.23ms
step:311/1375 train_time:41912ms step_avg:139.24ms
step:312/1375 train_time:42055ms step_avg:139.26ms
step:313/1375 train_time:42199ms step_avg:139.27ms
step:314/1375 train_time:42345ms step_avg:139.29ms
step:315/1375 train_time:42489ms step_avg:139.31ms
step:316/1375 train_time:42636ms step_avg:139.33ms
step:317/1375 train_time:42779ms step_avg:139.34ms
step:318/1375 train_time:42923ms step_avg:139.36ms
step:319/1375 train_time:43067ms step_avg:139.38ms
step:320/1375 train_time:43210ms step_avg:139.39ms
step:321/1375 train_time:43353ms step_avg:139.40ms
step:322/1375 train_time:43499ms step_avg:139.42ms
step:323/1375 train_time:43644ms step_avg:139.44ms
step:324/1375 train_time:43788ms step_avg:139.45ms
step:325/1375 train_time:43931ms step_avg:139.46ms
step:326/1375 train_time:44074ms step_avg:139.48ms
step:327/1375 train_time:44217ms step_avg:139.49ms
step:328/1375 train_time:44362ms step_avg:139.50ms
step:329/1375 train_time:44508ms step_avg:139.52ms
step:330/1375 train_time:44651ms step_avg:139.54ms
step:331/1375 train_time:44797ms step_avg:139.55ms
step:332/1375 train_time:44940ms step_avg:139.57ms
step:333/1375 train_time:45085ms step_avg:139.58ms
step:334/1375 train_time:45229ms step_avg:139.60ms
step:335/1375 train_time:45371ms step_avg:139.60ms
step:336/1375 train_time:45515ms step_avg:139.62ms
step:337/1375 train_time:45659ms step_avg:139.63ms
step:338/1375 train_time:45803ms step_avg:139.64ms
step:339/1375 train_time:45947ms step_avg:139.66ms
step:340/1375 train_time:46090ms step_avg:139.67ms
step:341/1375 train_time:46233ms step_avg:139.68ms
step:342/1375 train_time:46377ms step_avg:139.69ms
step:343/1375 train_time:46522ms step_avg:139.70ms
step:344/1375 train_time:46666ms step_avg:139.72ms
step:345/1375 train_time:46810ms step_avg:139.73ms
step:346/1375 train_time:46954ms step_avg:139.74ms
step:347/1375 train_time:47098ms step_avg:139.76ms
step:348/1375 train_time:47241ms step_avg:139.77ms
step:349/1375 train_time:47385ms step_avg:139.78ms
step:350/1375 train_time:47530ms step_avg:139.79ms
step:351/1375 train_time:47674ms step_avg:139.81ms
step:352/1375 train_time:47817ms step_avg:139.82ms
step:353/1375 train_time:47964ms step_avg:139.84ms
step:354/1375 train_time:48107ms step_avg:139.85ms
step:355/1375 train_time:48251ms step_avg:139.86ms
step:356/1375 train_time:48394ms step_avg:139.87ms
step:357/1375 train_time:48537ms step_avg:139.88ms
step:358/1375 train_time:48681ms step_avg:139.89ms
step:359/1375 train_time:48826ms step_avg:139.90ms
step:360/1375 train_time:48972ms step_avg:139.92ms
step:361/1375 train_time:49114ms step_avg:139.93ms
step:362/1375 train_time:49258ms step_avg:139.94ms
step:363/1375 train_time:49401ms step_avg:139.94ms
step:364/1375 train_time:49544ms step_avg:139.95ms
step:365/1375 train_time:49688ms step_avg:139.97ms
step:366/1375 train_time:49831ms step_avg:139.98ms
step:367/1375 train_time:49975ms step_avg:139.99ms
step:368/1375 train_time:50119ms step_avg:140.00ms
step:369/1375 train_time:50265ms step_avg:140.01ms
step:370/1375 train_time:50409ms step_avg:140.03ms
step:371/1375 train_time:50552ms step_avg:140.03ms
step:372/1375 train_time:50695ms step_avg:140.04ms
step:373/1375 train_time:50838ms step_avg:140.05ms
step:374/1375 train_time:50981ms step_avg:140.06ms
step:375/1375 train_time:51124ms step_avg:140.07ms
step:375/1375 val_loss:3.7739 train_time:51196ms step_avg:140.26ms
step:376/1375 train_time:51271ms step_avg:140.09ms
step:377/1375 train_time:51417ms step_avg:140.10ms
step:378/1375 train_time:51563ms step_avg:140.12ms
step:379/1375 train_time:51706ms step_avg:140.12ms
step:380/1375 train_time:51849ms step_avg:140.13ms
step:381/1375 train_time:52036ms step_avg:140.26ms
step:382/1375 train_time:52178ms step_avg:140.26ms
step:383/1375 train_time:52320ms step_avg:140.27ms
step:384/1375 train_time:52464ms step_avg:140.28ms
step:385/1375 train_time:52608ms step_avg:140.29ms
step:386/1375 train_time:52751ms step_avg:140.29ms
step:387/1375 train_time:52895ms step_avg:140.30ms
step:388/1375 train_time:53045ms step_avg:140.33ms
step:389/1375 train_time:53188ms step_avg:140.34ms
step:390/1375 train_time:53332ms step_avg:140.35ms
step:391/1375 train_time:53474ms step_avg:140.35ms
step:392/1375 train_time:53618ms step_avg:140.36ms
step:393/1375 train_time:53764ms step_avg:140.38ms
step:394/1375 train_time:53910ms step_avg:140.39ms
step:395/1375 train_time:54054ms step_avg:140.40ms
step:396/1375 train_time:54198ms step_avg:140.41ms
step:397/1375 train_time:54341ms step_avg:140.42ms
step:398/1375 train_time:54486ms step_avg:140.43ms
step:399/1375 train_time:54630ms step_avg:140.44ms
step:400/1375 train_time:54774ms step_avg:140.45ms
step:401/1375 train_time:54917ms step_avg:140.45ms
step:402/1375 train_time:55064ms step_avg:140.47ms
step:403/1375 train_time:55209ms step_avg:140.48ms
step:404/1375 train_time:55353ms step_avg:140.49ms
step:405/1375 train_time:55497ms step_avg:140.50ms
step:406/1375 train_time:55641ms step_avg:140.51ms
step:407/1375 train_time:55786ms step_avg:140.52ms
step:408/1375 train_time:55929ms step_avg:140.53ms
step:409/1375 train_time:56076ms step_avg:140.54ms
step:410/1375 train_time:56221ms step_avg:140.55ms
step:411/1375 train_time:56367ms step_avg:140.57ms
step:412/1375 train_time:56513ms step_avg:140.58ms
step:413/1375 train_time:56658ms step_avg:140.59ms
step:414/1375 train_time:56802ms step_avg:140.60ms
step:415/1375 train_time:56947ms step_avg:140.61ms
step:416/1375 train_time:57092ms step_avg:140.62ms
step:417/1375 train_time:57239ms step_avg:140.64ms
step:418/1375 train_time:57386ms step_avg:140.65ms
step:419/1375 train_time:57532ms step_avg:140.67ms
step:420/1375 train_time:57678ms step_avg:140.68ms
step:421/1375 train_time:57824ms step_avg:140.69ms
step:422/1375 train_time:57971ms step_avg:140.71ms
step:423/1375 train_time:58116ms step_avg:140.72ms
step:424/1375 train_time:58261ms step_avg:140.73ms
step:425/1375 train_time:58408ms step_avg:140.74ms
step:426/1375 train_time:58554ms step_avg:140.75ms
step:427/1375 train_time:58698ms step_avg:140.76ms
step:428/1375 train_time:58845ms step_avg:140.78ms
step:429/1375 train_time:58990ms step_avg:140.79ms
step:430/1375 train_time:59135ms step_avg:140.80ms
step:431/1375 train_time:59282ms step_avg:140.81ms
step:432/1375 train_time:59429ms step_avg:140.83ms
step:433/1375 train_time:59575ms step_avg:140.84ms
step:434/1375 train_time:59720ms step_avg:140.85ms
step:435/1375 train_time:59866ms step_avg:140.86ms
step:436/1375 train_time:60013ms step_avg:140.87ms
step:437/1375 train_time:60157ms step_avg:140.88ms
step:438/1375 train_time:60305ms step_avg:140.90ms
step:439/1375 train_time:60451ms step_avg:140.91ms
step:440/1375 train_time:60597ms step_avg:140.92ms
step:441/1375 train_time:60742ms step_avg:140.93ms
step:442/1375 train_time:60888ms step_avg:140.94ms
step:443/1375 train_time:61033ms step_avg:140.95ms
step:444/1375 train_time:61179ms step_avg:140.97ms
step:445/1375 train_time:61325ms step_avg:140.98ms
step:446/1375 train_time:61472ms step_avg:140.99ms
step:447/1375 train_time:61617ms step_avg:141.00ms
step:448/1375 train_time:61762ms step_avg:141.01ms
step:449/1375 train_time:61908ms step_avg:141.02ms
step:450/1375 train_time:62052ms step_avg:141.03ms
step:451/1375 train_time:62199ms step_avg:141.04ms
step:452/1375 train_time:62345ms step_avg:141.05ms
step:453/1375 train_time:62490ms step_avg:141.06ms
step:454/1375 train_time:62636ms step_avg:141.07ms
step:455/1375 train_time:62784ms step_avg:141.09ms
step:456/1375 train_time:62930ms step_avg:141.10ms
step:457/1375 train_time:63076ms step_avg:141.11ms
step:458/1375 train_time:63221ms step_avg:141.12ms
step:459/1375 train_time:63369ms step_avg:141.13ms
step:460/1375 train_time:63513ms step_avg:141.14ms
step:461/1375 train_time:63658ms step_avg:141.15ms
step:462/1375 train_time:63806ms step_avg:141.16ms
step:463/1375 train_time:63951ms step_avg:141.17ms
step:464/1375 train_time:64097ms step_avg:141.18ms
step:465/1375 train_time:64244ms step_avg:141.19ms
step:466/1375 train_time:64391ms step_avg:141.21ms
step:467/1375 train_time:64537ms step_avg:141.22ms
step:468/1375 train_time:64683ms step_avg:141.23ms
step:469/1375 train_time:64829ms step_avg:141.24ms
step:470/1375 train_time:64975ms step_avg:141.25ms
step:471/1375 train_time:65120ms step_avg:141.26ms
step:472/1375 train_time:65269ms step_avg:141.28ms
step:473/1375 train_time:65414ms step_avg:141.28ms
step:474/1375 train_time:65561ms step_avg:141.29ms
step:475/1375 train_time:65705ms step_avg:141.30ms
step:476/1375 train_time:65850ms step_avg:141.31ms
step:477/1375 train_time:65995ms step_avg:141.32ms
step:478/1375 train_time:66140ms step_avg:141.32ms
step:479/1375 train_time:66290ms step_avg:141.34ms
step:480/1375 train_time:66435ms step_avg:141.35ms
step:481/1375 train_time:66582ms step_avg:141.36ms
step:482/1375 train_time:66728ms step_avg:141.37ms
step:483/1375 train_time:66873ms step_avg:141.38ms
step:484/1375 train_time:67017ms step_avg:141.39ms
step:485/1375 train_time:67162ms step_avg:141.39ms
step:486/1375 train_time:67309ms step_avg:141.41ms
step:487/1375 train_time:67454ms step_avg:141.41ms
step:488/1375 train_time:67600ms step_avg:141.42ms
step:489/1375 train_time:67747ms step_avg:141.43ms
step:490/1375 train_time:67893ms step_avg:141.44ms
step:491/1375 train_time:68038ms step_avg:141.45ms
step:492/1375 train_time:68184ms step_avg:141.46ms
step:493/1375 train_time:68329ms step_avg:141.47ms
step:494/1375 train_time:68476ms step_avg:141.48ms
step:495/1375 train_time:68621ms step_avg:141.49ms
step:496/1375 train_time:68768ms step_avg:141.50ms
step:497/1375 train_time:68912ms step_avg:141.50ms
step:498/1375 train_time:69057ms step_avg:141.51ms
step:499/1375 train_time:69204ms step_avg:141.52ms
step:500/1375 train_time:69349ms step_avg:141.53ms
step:500/1375 val_loss:3.6558 train_time:69421ms step_avg:141.68ms
step:501/1375 train_time:69497ms step_avg:141.54ms
step:502/1375 train_time:69645ms step_avg:141.55ms
step:503/1375 train_time:69789ms step_avg:141.56ms
step:504/1375 train_time:69935ms step_avg:141.57ms
step:505/1375 train_time:70078ms step_avg:141.57ms
step:506/1375 train_time:70222ms step_avg:141.58ms
step:507/1375 train_time:70367ms step_avg:141.58ms
step:508/1375 train_time:70515ms step_avg:141.60ms
step:509/1375 train_time:70664ms step_avg:141.61ms
step:510/1375 train_time:70809ms step_avg:141.62ms
step:511/1375 train_time:70955ms step_avg:141.63ms
step:512/1375 train_time:71103ms step_avg:141.64ms
step:513/1375 train_time:71250ms step_avg:141.65ms
step:514/1375 train_time:71399ms step_avg:141.66ms
step:515/1375 train_time:71545ms step_avg:141.67ms
step:516/1375 train_time:71693ms step_avg:141.68ms
step:517/1375 train_time:71840ms step_avg:141.70ms
step:518/1375 train_time:71988ms step_avg:141.71ms
step:519/1375 train_time:72134ms step_avg:141.72ms
step:520/1375 train_time:72281ms step_avg:141.73ms
step:521/1375 train_time:72428ms step_avg:141.74ms
step:522/1375 train_time:72577ms step_avg:141.75ms
step:523/1375 train_time:72725ms step_avg:141.76ms
step:524/1375 train_time:72872ms step_avg:141.78ms
step:525/1375 train_time:73020ms step_avg:141.79ms
step:526/1375 train_time:73168ms step_avg:141.80ms
step:527/1375 train_time:73315ms step_avg:141.81ms
step:528/1375 train_time:73462ms step_avg:141.82ms
step:529/1375 train_time:73608ms step_avg:141.83ms
step:530/1375 train_time:73756ms step_avg:141.84ms
step:531/1375 train_time:73903ms step_avg:141.85ms
step:532/1375 train_time:74051ms step_avg:141.86ms
step:533/1375 train_time:74199ms step_avg:141.87ms
step:534/1375 train_time:74346ms step_avg:141.88ms
step:535/1375 train_time:74492ms step_avg:141.89ms
step:536/1375 train_time:74640ms step_avg:141.90ms
step:537/1375 train_time:74786ms step_avg:141.91ms
step:538/1375 train_time:74933ms step_avg:141.92ms
step:539/1375 train_time:75081ms step_avg:141.93ms
step:540/1375 train_time:75228ms step_avg:141.94ms
step:541/1375 train_time:75375ms step_avg:141.95ms
step:542/1375 train_time:75524ms step_avg:141.96ms
step:543/1375 train_time:75671ms step_avg:141.97ms
step:544/1375 train_time:75819ms step_avg:141.98ms
step:545/1375 train_time:75966ms step_avg:141.99ms
step:546/1375 train_time:76112ms step_avg:142.00ms
step:547/1375 train_time:76261ms step_avg:142.01ms
step:548/1375 train_time:76408ms step_avg:142.02ms
step:549/1375 train_time:76556ms step_avg:142.03ms
step:550/1375 train_time:76704ms step_avg:142.04ms
step:551/1375 train_time:76849ms step_avg:142.05ms
step:552/1375 train_time:76997ms step_avg:142.06ms
step:553/1375 train_time:77143ms step_avg:142.07ms
step:554/1375 train_time:77290ms step_avg:142.08ms
step:555/1375 train_time:77438ms step_avg:142.09ms
step:556/1375 train_time:77585ms step_avg:142.10ms
step:557/1375 train_time:77732ms step_avg:142.11ms
step:558/1375 train_time:77880ms step_avg:142.12ms
step:559/1375 train_time:78025ms step_avg:142.12ms
step:560/1375 train_time:78172ms step_avg:142.13ms
step:561/1375 train_time:78318ms step_avg:142.14ms
step:562/1375 train_time:78465ms step_avg:142.15ms
step:563/1375 train_time:78611ms step_avg:142.15ms
step:564/1375 train_time:78758ms step_avg:142.16ms
step:565/1375 train_time:78904ms step_avg:142.17ms
step:566/1375 train_time:79051ms step_avg:142.18ms
step:567/1375 train_time:79199ms step_avg:142.19ms
step:568/1375 train_time:79345ms step_avg:142.20ms
step:569/1375 train_time:79493ms step_avg:142.21ms
step:570/1375 train_time:79641ms step_avg:142.22ms
step:571/1375 train_time:79823ms step_avg:142.29ms
step:572/1375 train_time:79968ms step_avg:142.29ms
step:573/1375 train_time:80114ms step_avg:142.30ms
step:574/1375 train_time:80263ms step_avg:142.31ms
step:575/1375 train_time:80408ms step_avg:142.32ms
step:576/1375 train_time:80555ms step_avg:142.32ms
step:577/1375 train_time:80703ms step_avg:142.33ms
step:578/1375 train_time:80853ms step_avg:142.35ms
step:579/1375 train_time:81000ms step_avg:142.36ms
step:580/1375 train_time:81146ms step_avg:142.36ms
step:581/1375 train_time:81293ms step_avg:142.37ms
step:582/1375 train_time:81440ms step_avg:142.38ms
step:583/1375 train_time:81586ms step_avg:142.38ms
step:584/1375 train_time:81734ms step_avg:142.39ms
step:585/1375 train_time:81880ms step_avg:142.40ms
step:586/1375 train_time:82029ms step_avg:142.41ms
step:587/1375 train_time:82177ms step_avg:142.42ms
step:588/1375 train_time:82325ms step_avg:142.43ms
step:589/1375 train_time:82470ms step_avg:142.44ms
step:590/1375 train_time:82617ms step_avg:142.44ms
step:591/1375 train_time:82766ms step_avg:142.45ms
step:592/1375 train_time:82913ms step_avg:142.46ms
step:593/1375 train_time:83062ms step_avg:142.47ms
step:594/1375 train_time:83209ms step_avg:142.48ms
step:595/1375 train_time:83355ms step_avg:142.49ms
step:596/1375 train_time:83503ms step_avg:142.50ms
step:597/1375 train_time:83649ms step_avg:142.50ms
step:598/1375 train_time:83797ms step_avg:142.51ms
step:599/1375 train_time:83943ms step_avg:142.52ms
step:600/1375 train_time:84090ms step_avg:142.52ms
step:601/1375 train_time:84238ms step_avg:142.53ms
step:602/1375 train_time:84384ms step_avg:142.54ms
step:603/1375 train_time:84532ms step_avg:142.55ms
step:604/1375 train_time:84679ms step_avg:142.56ms
step:605/1375 train_time:84825ms step_avg:142.56ms
step:606/1375 train_time:84972ms step_avg:142.57ms
step:607/1375 train_time:85120ms step_avg:142.58ms
step:608/1375 train_time:85266ms step_avg:142.59ms
step:609/1375 train_time:85413ms step_avg:142.59ms
step:610/1375 train_time:85560ms step_avg:142.60ms
step:611/1375 train_time:85706ms step_avg:142.61ms
step:612/1375 train_time:85853ms step_avg:142.61ms
step:613/1375 train_time:86000ms step_avg:142.62ms
step:614/1375 train_time:86148ms step_avg:142.63ms
step:615/1375 train_time:86297ms step_avg:142.64ms
step:616/1375 train_time:86446ms step_avg:142.65ms
step:617/1375 train_time:86593ms step_avg:142.66ms
step:618/1375 train_time:86742ms step_avg:142.67ms
step:619/1375 train_time:86891ms step_avg:142.68ms
step:620/1375 train_time:87039ms step_avg:142.69ms
step:621/1375 train_time:87186ms step_avg:142.69ms
step:622/1375 train_time:87338ms step_avg:142.71ms
step:623/1375 train_time:87486ms step_avg:142.72ms
step:624/1375 train_time:87636ms step_avg:142.73ms
step:625/1375 train_time:87784ms step_avg:142.74ms
step:625/1375 val_loss:3.5716 train_time:87858ms step_avg:142.86ms
step:626/1375 train_time:87934ms step_avg:142.75ms
step:627/1375 train_time:88086ms step_avg:142.77ms
step:628/1375 train_time:88235ms step_avg:142.77ms
step:629/1375 train_time:88382ms step_avg:142.78ms
step:630/1375 train_time:88529ms step_avg:142.79ms
step:631/1375 train_time:88676ms step_avg:142.80ms
step:632/1375 train_time:88824ms step_avg:142.80ms
step:633/1375 train_time:88975ms step_avg:142.82ms
step:634/1375 train_time:89123ms step_avg:142.82ms
step:635/1375 train_time:89270ms step_avg:142.83ms
step:636/1375 train_time:89420ms step_avg:142.84ms
step:637/1375 train_time:89567ms step_avg:142.85ms
step:638/1375 train_time:89715ms step_avg:142.86ms
step:639/1375 train_time:89863ms step_avg:142.87ms
step:640/1375 train_time:90013ms step_avg:142.88ms
step:641/1375 train_time:90163ms step_avg:142.89ms
step:642/1375 train_time:90313ms step_avg:142.90ms
step:643/1375 train_time:90461ms step_avg:142.91ms
step:644/1375 train_time:90609ms step_avg:142.92ms
step:645/1375 train_time:90758ms step_avg:142.93ms
step:646/1375 train_time:90906ms step_avg:142.93ms
step:647/1375 train_time:91056ms step_avg:142.94ms
step:648/1375 train_time:91209ms step_avg:142.96ms
step:649/1375 train_time:91358ms step_avg:142.97ms
step:650/1375 train_time:91509ms step_avg:142.98ms
step:651/1375 train_time:91657ms step_avg:142.99ms
step:652/1375 train_time:91804ms step_avg:143.00ms
step:653/1375 train_time:91954ms step_avg:143.01ms
step:654/1375 train_time:92103ms step_avg:143.02ms
step:655/1375 train_time:92250ms step_avg:143.02ms
step:656/1375 train_time:92400ms step_avg:143.03ms
step:657/1375 train_time:92548ms step_avg:143.04ms
step:658/1375 train_time:92697ms step_avg:143.05ms
step:659/1375 train_time:92846ms step_avg:143.06ms
step:660/1375 train_time:92994ms step_avg:143.07ms
step:661/1375 train_time:93143ms step_avg:143.08ms
step:662/1375 train_time:93290ms step_avg:143.08ms
step:663/1375 train_time:93438ms step_avg:143.09ms
step:664/1375 train_time:93590ms step_avg:143.10ms
step:665/1375 train_time:93742ms step_avg:143.12ms
step:666/1375 train_time:93889ms step_avg:143.12ms
step:667/1375 train_time:94038ms step_avg:143.13ms
step:668/1375 train_time:94187ms step_avg:143.14ms
step:669/1375 train_time:94338ms step_avg:143.15ms
step:670/1375 train_time:94486ms step_avg:143.16ms
step:671/1375 train_time:94637ms step_avg:143.17ms
step:672/1375 train_time:94784ms step_avg:143.18ms
step:673/1375 train_time:94932ms step_avg:143.19ms
step:674/1375 train_time:95080ms step_avg:143.19ms
step:675/1375 train_time:95229ms step_avg:143.20ms
step:676/1375 train_time:95379ms step_avg:143.21ms
step:677/1375 train_time:95528ms step_avg:143.22ms
step:678/1375 train_time:95676ms step_avg:143.23ms
step:679/1375 train_time:95826ms step_avg:143.24ms
step:680/1375 train_time:95975ms step_avg:143.25ms
step:681/1375 train_time:96123ms step_avg:143.25ms
step:682/1375 train_time:96273ms step_avg:143.26ms
step:683/1375 train_time:96421ms step_avg:143.27ms
step:684/1375 train_time:96569ms step_avg:143.28ms
step:685/1375 train_time:96719ms step_avg:143.29ms
step:686/1375 train_time:96866ms step_avg:143.29ms
step:687/1375 train_time:97014ms step_avg:143.30ms
step:688/1375 train_time:97163ms step_avg:143.31ms
step:689/1375 train_time:97313ms step_avg:143.32ms
step:690/1375 train_time:97462ms step_avg:143.33ms
step:691/1375 train_time:97611ms step_avg:143.34ms
step:692/1375 train_time:97760ms step_avg:143.34ms
step:693/1375 train_time:97909ms step_avg:143.35ms
step:694/1375 train_time:98056ms step_avg:143.36ms
step:695/1375 train_time:98203ms step_avg:143.36ms
step:696/1375 train_time:98352ms step_avg:143.37ms
step:697/1375 train_time:98500ms step_avg:143.38ms
step:698/1375 train_time:98648ms step_avg:143.38ms
step:699/1375 train_time:98796ms step_avg:143.39ms
step:700/1375 train_time:98944ms step_avg:143.40ms
step:701/1375 train_time:99092ms step_avg:143.40ms
step:702/1375 train_time:99243ms step_avg:143.42ms
step:703/1375 train_time:99391ms step_avg:143.42ms
step:704/1375 train_time:99541ms step_avg:143.43ms
step:705/1375 train_time:99689ms step_avg:143.44ms
step:706/1375 train_time:99842ms step_avg:143.45ms
step:707/1375 train_time:99989ms step_avg:143.46ms
step:708/1375 train_time:100137ms step_avg:143.46ms
step:709/1375 train_time:100286ms step_avg:143.47ms
step:710/1375 train_time:100435ms step_avg:143.48ms
step:711/1375 train_time:100584ms step_avg:143.49ms
step:712/1375 train_time:100734ms step_avg:143.50ms
step:713/1375 train_time:100883ms step_avg:143.50ms
step:714/1375 train_time:101032ms step_avg:143.51ms
step:715/1375 train_time:101182ms step_avg:143.52ms
step:716/1375 train_time:101332ms step_avg:143.53ms
step:717/1375 train_time:101482ms step_avg:143.54ms
step:718/1375 train_time:101632ms step_avg:143.55ms
step:719/1375 train_time:101782ms step_avg:143.56ms
step:720/1375 train_time:101932ms step_avg:143.57ms
step:721/1375 train_time:102082ms step_avg:143.58ms
step:722/1375 train_time:102233ms step_avg:143.59ms
step:723/1375 train_time:102382ms step_avg:143.59ms
step:724/1375 train_time:102531ms step_avg:143.60ms
step:725/1375 train_time:102680ms step_avg:143.61ms
step:726/1375 train_time:102831ms step_avg:143.62ms
step:727/1375 train_time:102982ms step_avg:143.63ms
step:728/1375 train_time:103132ms step_avg:143.64ms
step:729/1375 train_time:103281ms step_avg:143.65ms
step:730/1375 train_time:103434ms step_avg:143.66ms
step:731/1375 train_time:103584ms step_avg:143.67ms
step:732/1375 train_time:103733ms step_avg:143.67ms
step:733/1375 train_time:103883ms step_avg:143.68ms
step:734/1375 train_time:104033ms step_avg:143.69ms
step:735/1375 train_time:104184ms step_avg:143.70ms
step:736/1375 train_time:104334ms step_avg:143.71ms
step:737/1375 train_time:104483ms step_avg:143.72ms
step:738/1375 train_time:104635ms step_avg:143.73ms
step:739/1375 train_time:104784ms step_avg:143.74ms
step:740/1375 train_time:104935ms step_avg:143.75ms
step:741/1375 train_time:105086ms step_avg:143.76ms
step:742/1375 train_time:105236ms step_avg:143.77ms
step:743/1375 train_time:105385ms step_avg:143.77ms
step:744/1375 train_time:105535ms step_avg:143.78ms
step:745/1375 train_time:105687ms step_avg:143.79ms
step:746/1375 train_time:105836ms step_avg:143.80ms
step:747/1375 train_time:105986ms step_avg:143.81ms
step:748/1375 train_time:106136ms step_avg:143.82ms
step:749/1375 train_time:106285ms step_avg:143.82ms
step:750/1375 train_time:106437ms step_avg:143.83ms
step:750/1375 val_loss:3.5181 train_time:106512ms step_avg:143.93ms
step:751/1375 train_time:106587ms step_avg:143.84ms
step:752/1375 train_time:106739ms step_avg:143.85ms
step:753/1375 train_time:106888ms step_avg:143.86ms
step:754/1375 train_time:107037ms step_avg:143.87ms
step:755/1375 train_time:107185ms step_avg:143.87ms
step:756/1375 train_time:107336ms step_avg:143.88ms
step:757/1375 train_time:107486ms step_avg:143.89ms
step:758/1375 train_time:107638ms step_avg:143.90ms
step:759/1375 train_time:107788ms step_avg:143.91ms
step:760/1375 train_time:107940ms step_avg:143.92ms
step:761/1375 train_time:108125ms step_avg:143.97ms
step:762/1375 train_time:108273ms step_avg:143.98ms
step:763/1375 train_time:108422ms step_avg:143.99ms
step:764/1375 train_time:108571ms step_avg:143.99ms
step:765/1375 train_time:108720ms step_avg:144.00ms
step:766/1375 train_time:108872ms step_avg:144.01ms
step:767/1375 train_time:109024ms step_avg:144.02ms
step:768/1375 train_time:109176ms step_avg:144.03ms
step:769/1375 train_time:109327ms step_avg:144.04ms
step:770/1375 train_time:109477ms step_avg:144.05ms
step:771/1375 train_time:109626ms step_avg:144.06ms
step:772/1375 train_time:109775ms step_avg:144.06ms
step:773/1375 train_time:109925ms step_avg:144.07ms
step:774/1375 train_time:110077ms step_avg:144.08ms
step:775/1375 train_time:110226ms step_avg:144.09ms
step:776/1375 train_time:110379ms step_avg:144.10ms
step:777/1375 train_time:110530ms step_avg:144.11ms
step:778/1375 train_time:110678ms step_avg:144.11ms
step:779/1375 train_time:110826ms step_avg:144.12ms
step:780/1375 train_time:110978ms step_avg:144.13ms
step:781/1375 train_time:111129ms step_avg:144.14ms
step:782/1375 train_time:111280ms step_avg:144.15ms
step:783/1375 train_time:111430ms step_avg:144.15ms
step:784/1375 train_time:111581ms step_avg:144.16ms
step:785/1375 train_time:111730ms step_avg:144.17ms
step:786/1375 train_time:111880ms step_avg:144.18ms
step:787/1375 train_time:112028ms step_avg:144.18ms
step:788/1375 train_time:112179ms step_avg:144.19ms
step:789/1375 train_time:112329ms step_avg:144.20ms
step:790/1375 train_time:112479ms step_avg:144.20ms
step:791/1375 train_time:112628ms step_avg:144.21ms
step:792/1375 train_time:112779ms step_avg:144.22ms
step:793/1375 train_time:112927ms step_avg:144.22ms
step:794/1375 train_time:113079ms step_avg:144.23ms
step:795/1375 train_time:113229ms step_avg:144.24ms
step:796/1375 train_time:113380ms step_avg:144.25ms
step:797/1375 train_time:113529ms step_avg:144.26ms
step:798/1375 train_time:113681ms step_avg:144.27ms
step:799/1375 train_time:113836ms step_avg:144.28ms
step:800/1375 train_time:113987ms step_avg:144.29ms
step:801/1375 train_time:114136ms step_avg:144.29ms
step:802/1375 train_time:114286ms step_avg:144.30ms
step:803/1375 train_time:114435ms step_avg:144.31ms
step:804/1375 train_time:114584ms step_avg:144.31ms
step:805/1375 train_time:114737ms step_avg:144.32ms
step:806/1375 train_time:114888ms step_avg:144.33ms
step:807/1375 train_time:115038ms step_avg:144.34ms
step:808/1375 train_time:115187ms step_avg:144.34ms
step:809/1375 train_time:115336ms step_avg:144.35ms
step:810/1375 train_time:115485ms step_avg:144.36ms
step:811/1375 train_time:115636ms step_avg:144.37ms
step:812/1375 train_time:115785ms step_avg:144.37ms
step:813/1375 train_time:115934ms step_avg:144.38ms
step:814/1375 train_time:116084ms step_avg:144.38ms
step:815/1375 train_time:116234ms step_avg:144.39ms
step:816/1375 train_time:116386ms step_avg:144.40ms
step:817/1375 train_time:116537ms step_avg:144.41ms
step:818/1375 train_time:116687ms step_avg:144.42ms
step:819/1375 train_time:116841ms step_avg:144.43ms
step:820/1375 train_time:116995ms step_avg:144.44ms
step:821/1375 train_time:117145ms step_avg:144.44ms
step:822/1375 train_time:117295ms step_avg:144.45ms
step:823/1375 train_time:117446ms step_avg:144.46ms
step:824/1375 train_time:117598ms step_avg:144.47ms
step:825/1375 train_time:117750ms step_avg:144.48ms
step:826/1375 train_time:117905ms step_avg:144.49ms
step:827/1375 train_time:118054ms step_avg:144.50ms
step:828/1375 train_time:118206ms step_avg:144.51ms
step:829/1375 train_time:118356ms step_avg:144.51ms
step:830/1375 train_time:118507ms step_avg:144.52ms
step:831/1375 train_time:118658ms step_avg:144.53ms
step:832/1375 train_time:118811ms step_avg:144.54ms
step:833/1375 train_time:118962ms step_avg:144.55ms
step:834/1375 train_time:119113ms step_avg:144.55ms
step:835/1375 train_time:119265ms step_avg:144.56ms
step:836/1375 train_time:119423ms step_avg:144.58ms
step:837/1375 train_time:119574ms step_avg:144.59ms
step:838/1375 train_time:119725ms step_avg:144.60ms
step:839/1375 train_time:119875ms step_avg:144.60ms
step:840/1375 train_time:120026ms step_avg:144.61ms
step:841/1375 train_time:120177ms step_avg:144.62ms
step:842/1375 train_time:120329ms step_avg:144.63ms
step:843/1375 train_time:120479ms step_avg:144.63ms
step:844/1375 train_time:120629ms step_avg:144.64ms
step:845/1375 train_time:120780ms step_avg:144.65ms
step:846/1375 train_time:120932ms step_avg:144.65ms
step:847/1375 train_time:121085ms step_avg:144.67ms
step:848/1375 train_time:121235ms step_avg:144.67ms
step:849/1375 train_time:121387ms step_avg:144.68ms
step:850/1375 train_time:121540ms step_avg:144.69ms
step:851/1375 train_time:121695ms step_avg:144.70ms
step:852/1375 train_time:121846ms step_avg:144.71ms
step:853/1375 train_time:121997ms step_avg:144.72ms
step:854/1375 train_time:122146ms step_avg:144.72ms
step:855/1375 train_time:122297ms step_avg:144.73ms
step:856/1375 train_time:122446ms step_avg:144.73ms
step:857/1375 train_time:122598ms step_avg:144.74ms
step:858/1375 train_time:122753ms step_avg:144.76ms
step:859/1375 train_time:122904ms step_avg:144.76ms
step:860/1375 train_time:123056ms step_avg:144.77ms
step:861/1375 train_time:123206ms step_avg:144.78ms
step:862/1375 train_time:123357ms step_avg:144.79ms
step:863/1375 train_time:123508ms step_avg:144.79ms
step:864/1375 train_time:123660ms step_avg:144.80ms
step:865/1375 train_time:123809ms step_avg:144.81ms
step:866/1375 train_time:123966ms step_avg:144.82ms
step:867/1375 train_time:124116ms step_avg:144.83ms
step:868/1375 train_time:124267ms step_avg:144.83ms
step:869/1375 train_time:124417ms step_avg:144.84ms
step:870/1375 train_time:124570ms step_avg:144.85ms
step:871/1375 train_time:124722ms step_avg:144.86ms
step:872/1375 train_time:124874ms step_avg:144.87ms
step:873/1375 train_time:125026ms step_avg:144.87ms
step:874/1375 train_time:125177ms step_avg:144.88ms
step:875/1375 train_time:125328ms step_avg:144.89ms
step:875/1375 val_loss:3.4672 train_time:125406ms step_avg:144.98ms
step:876/1375 train_time:125481ms step_avg:144.90ms
step:877/1375 train_time:125635ms step_avg:144.91ms
step:878/1375 train_time:125787ms step_avg:144.92ms
step:879/1375 train_time:125938ms step_avg:144.92ms
step:880/1375 train_time:126089ms step_avg:144.93ms
step:881/1375 train_time:126238ms step_avg:144.93ms
step:882/1375 train_time:126393ms step_avg:144.95ms
step:883/1375 train_time:126546ms step_avg:144.96ms
step:884/1375 train_time:126698ms step_avg:144.96ms
step:885/1375 train_time:126849ms step_avg:144.97ms
step:886/1375 train_time:127001ms step_avg:144.98ms
step:887/1375 train_time:127151ms step_avg:144.98ms
step:888/1375 train_time:127303ms step_avg:144.99ms
step:889/1375 train_time:127457ms step_avg:145.00ms
step:890/1375 train_time:127608ms step_avg:145.01ms
step:891/1375 train_time:127760ms step_avg:145.02ms
step:892/1375 train_time:127910ms step_avg:145.02ms
step:893/1375 train_time:128060ms step_avg:145.03ms
step:894/1375 train_time:128211ms step_avg:145.03ms
step:895/1375 train_time:128365ms step_avg:145.05ms
step:896/1375 train_time:128517ms step_avg:145.05ms
step:897/1375 train_time:128668ms step_avg:145.06ms
step:898/1375 train_time:128821ms step_avg:145.07ms
step:899/1375 train_time:128971ms step_avg:145.07ms
step:900/1375 train_time:129120ms step_avg:145.08ms
step:901/1375 train_time:129274ms step_avg:145.09ms
step:902/1375 train_time:129422ms step_avg:145.09ms
step:903/1375 train_time:129574ms step_avg:145.10ms
step:904/1375 train_time:129723ms step_avg:145.10ms
step:905/1375 train_time:129875ms step_avg:145.11ms
step:906/1375 train_time:130027ms step_avg:145.12ms
step:907/1375 train_time:130180ms step_avg:145.13ms
step:908/1375 train_time:130331ms step_avg:145.13ms
step:909/1375 train_time:130483ms step_avg:145.14ms
step:910/1375 train_time:130640ms step_avg:145.16ms
step:911/1375 train_time:130791ms step_avg:145.16ms
step:912/1375 train_time:130942ms step_avg:145.17ms
step:913/1375 train_time:131095ms step_avg:145.18ms
step:914/1375 train_time:131246ms step_avg:145.18ms
step:915/1375 train_time:131398ms step_avg:145.19ms
step:916/1375 train_time:131549ms step_avg:145.20ms
step:917/1375 train_time:131700ms step_avg:145.20ms
step:918/1375 train_time:131853ms step_avg:145.21ms
step:919/1375 train_time:132008ms step_avg:145.22ms
step:920/1375 train_time:132159ms step_avg:145.23ms
step:921/1375 train_time:132311ms step_avg:145.24ms
step:922/1375 train_time:132466ms step_avg:145.25ms
step:923/1375 train_time:132619ms step_avg:145.26ms
step:924/1375 train_time:132771ms step_avg:145.26ms
step:925/1375 train_time:132923ms step_avg:145.27ms
step:926/1375 train_time:133077ms step_avg:145.28ms
step:927/1375 train_time:133228ms step_avg:145.29ms
step:928/1375 train_time:133381ms step_avg:145.29ms
step:929/1375 train_time:133535ms step_avg:145.31ms
step:930/1375 train_time:133689ms step_avg:145.31ms
step:931/1375 train_time:133841ms step_avg:145.32ms
step:932/1375 train_time:133992ms step_avg:145.33ms
step:933/1375 train_time:134144ms step_avg:145.33ms
step:934/1375 train_time:134298ms step_avg:145.34ms
step:935/1375 train_time:134452ms step_avg:145.35ms
step:936/1375 train_time:134605ms step_avg:145.36ms
step:937/1375 train_time:134762ms step_avg:145.37ms
step:938/1375 train_time:134914ms step_avg:145.38ms
step:939/1375 train_time:135067ms step_avg:145.39ms
step:940/1375 train_time:135222ms step_avg:145.40ms
step:941/1375 train_time:135375ms step_avg:145.41ms
step:942/1375 train_time:135525ms step_avg:145.41ms
step:943/1375 train_time:135681ms step_avg:145.42ms
step:944/1375 train_time:135840ms step_avg:145.44ms
step:945/1375 train_time:135992ms step_avg:145.45ms
step:946/1375 train_time:136146ms step_avg:145.46ms
step:947/1375 train_time:136301ms step_avg:145.47ms
step:948/1375 train_time:136453ms step_avg:145.47ms
step:949/1375 train_time:136608ms step_avg:145.48ms
step:950/1375 train_time:136760ms step_avg:145.49ms
step:951/1375 train_time:136953ms step_avg:145.54ms
step:952/1375 train_time:137103ms step_avg:145.54ms
step:953/1375 train_time:137257ms step_avg:145.55ms
step:954/1375 train_time:137408ms step_avg:145.56ms
step:955/1375 train_time:137560ms step_avg:145.57ms
step:956/1375 train_time:137716ms step_avg:145.58ms
step:957/1375 train_time:137867ms step_avg:145.58ms
step:958/1375 train_time:138024ms step_avg:145.59ms
step:959/1375 train_time:138178ms step_avg:145.60ms
step:960/1375 train_time:138333ms step_avg:145.61ms
step:961/1375 train_time:138484ms step_avg:145.62ms
step:962/1375 train_time:138635ms step_avg:145.63ms
step:963/1375 train_time:138792ms step_avg:145.64ms
step:964/1375 train_time:138946ms step_avg:145.65ms
step:965/1375 train_time:139099ms step_avg:145.65ms
step:966/1375 train_time:139252ms step_avg:145.66ms
step:967/1375 train_time:139403ms step_avg:145.67ms
step:968/1375 train_time:139555ms step_avg:145.67ms
step:969/1375 train_time:139707ms step_avg:145.68ms
step:970/1375 train_time:139860ms step_avg:145.69ms
step:971/1375 train_time:140016ms step_avg:145.70ms
step:972/1375 train_time:140167ms step_avg:145.70ms
step:973/1375 train_time:140318ms step_avg:145.71ms
step:974/1375 train_time:140472ms step_avg:145.72ms
step:975/1375 train_time:140624ms step_avg:145.72ms
step:976/1375 train_time:140775ms step_avg:145.73ms
step:977/1375 train_time:140927ms step_avg:145.74ms
step:978/1375 train_time:141080ms step_avg:145.74ms
step:979/1375 train_time:141231ms step_avg:145.75ms
step:980/1375 train_time:141383ms step_avg:145.76ms
step:981/1375 train_time:141533ms step_avg:145.76ms
step:982/1375 train_time:141684ms step_avg:145.77ms
step:983/1375 train_time:141835ms step_avg:145.77ms
step:984/1375 train_time:141985ms step_avg:145.78ms
step:985/1375 train_time:142138ms step_avg:145.78ms
step:986/1375 train_time:142294ms step_avg:145.79ms
step:987/1375 train_time:142444ms step_avg:145.80ms
step:988/1375 train_time:142596ms step_avg:145.80ms
step:989/1375 train_time:142748ms step_avg:145.81ms
step:990/1375 train_time:142901ms step_avg:145.82ms
step:991/1375 train_time:143054ms step_avg:145.82ms
step:992/1375 train_time:143208ms step_avg:145.83ms
step:993/1375 train_time:143369ms step_avg:145.85ms
step:994/1375 train_time:143520ms step_avg:145.85ms
step:995/1375 train_time:143672ms step_avg:145.86ms
step:996/1375 train_time:143822ms step_avg:145.86ms
step:997/1375 train_time:143973ms step_avg:145.87ms
step:998/1375 train_time:144125ms step_avg:145.88ms
step:999/1375 train_time:144279ms step_avg:145.88ms
step:1000/1375 train_time:144432ms step_avg:145.89ms
step:1000/1375 val_loss:3.4015 train_time:144509ms step_avg:145.97ms
step:1001/1375 train_time:144587ms step_avg:145.90ms
step:1002/1375 train_time:144743ms step_avg:145.91ms
step:1003/1375 train_time:144896ms step_avg:145.92ms
step:1004/1375 train_time:145050ms step_avg:145.93ms
step:1005/1375 train_time:145203ms step_avg:145.93ms
step:1006/1375 train_time:145352ms step_avg:145.94ms
step:1007/1375 train_time:145507ms step_avg:145.95ms
step:1008/1375 train_time:145660ms step_avg:145.95ms
step:1009/1375 train_time:145820ms step_avg:145.97ms
step:1010/1375 train_time:145971ms step_avg:145.97ms
step:1011/1375 train_time:146122ms step_avg:145.98ms
step:1012/1375 train_time:146273ms step_avg:145.98ms
step:1013/1375 train_time:146428ms step_avg:145.99ms
step:1014/1375 train_time:146577ms step_avg:145.99ms
step:1015/1375 train_time:146732ms step_avg:146.00ms
step:1016/1375 train_time:146886ms step_avg:146.01ms
step:1017/1375 train_time:147039ms step_avg:146.02ms
step:1018/1375 train_time:147190ms step_avg:146.02ms
step:1019/1375 train_time:147344ms step_avg:146.03ms
step:1020/1375 train_time:147498ms step_avg:146.04ms
step:1021/1375 train_time:147652ms step_avg:146.05ms
step:1022/1375 train_time:147805ms step_avg:146.05ms
step:1023/1375 train_time:147958ms step_avg:146.06ms
step:1024/1375 train_time:148111ms step_avg:146.07ms
step:1025/1375 train_time:148266ms step_avg:146.07ms
step:1026/1375 train_time:148418ms step_avg:146.08ms
step:1027/1375 train_time:148571ms step_avg:146.09ms
step:1028/1375 train_time:148725ms step_avg:146.10ms
step:1029/1375 train_time:148881ms step_avg:146.10ms
step:1030/1375 train_time:149035ms step_avg:146.11ms
step:1031/1375 train_time:149186ms step_avg:146.12ms
step:1032/1375 train_time:149340ms step_avg:146.13ms
step:1033/1375 train_time:149493ms step_avg:146.13ms
step:1034/1375 train_time:149647ms step_avg:146.14ms
step:1035/1375 train_time:149804ms step_avg:146.15ms
step:1036/1375 train_time:149957ms step_avg:146.16ms
step:1037/1375 train_time:150116ms step_avg:146.17ms
step:1038/1375 train_time:150272ms step_avg:146.18ms
step:1039/1375 train_time:150423ms step_avg:146.18ms
step:1040/1375 train_time:150573ms step_avg:146.19ms
step:1041/1375 train_time:150728ms step_avg:146.20ms
step:1042/1375 train_time:150877ms step_avg:146.20ms
step:1043/1375 train_time:151031ms step_avg:146.21ms
step:1044/1375 train_time:151186ms step_avg:146.21ms
step:1045/1375 train_time:151341ms step_avg:146.22ms
step:1046/1375 train_time:151493ms step_avg:146.23ms
step:1047/1375 train_time:151645ms step_avg:146.23ms
step:1048/1375 train_time:151800ms step_avg:146.24ms
step:1049/1375 train_time:151955ms step_avg:146.25ms
step:1050/1375 train_time:152112ms step_avg:146.26ms
step:1051/1375 train_time:152269ms step_avg:146.27ms
step:1052/1375 train_time:152423ms step_avg:146.28ms
step:1053/1375 train_time:152574ms step_avg:146.28ms
step:1054/1375 train_time:152729ms step_avg:146.29ms
step:1055/1375 train_time:152883ms step_avg:146.30ms
step:1056/1375 train_time:153037ms step_avg:146.31ms
step:1057/1375 train_time:153192ms step_avg:146.32ms
step:1058/1375 train_time:153349ms step_avg:146.33ms
step:1059/1375 train_time:153505ms step_avg:146.33ms
step:1060/1375 train_time:153659ms step_avg:146.34ms
step:1061/1375 train_time:153811ms step_avg:146.35ms
step:1062/1375 train_time:153965ms step_avg:146.35ms
step:1063/1375 train_time:154121ms step_avg:146.36ms
step:1064/1375 train_time:154272ms step_avg:146.37ms
step:1065/1375 train_time:154426ms step_avg:146.38ms
step:1066/1375 train_time:154584ms step_avg:146.39ms
step:1067/1375 train_time:154740ms step_avg:146.40ms
step:1068/1375 train_time:154892ms step_avg:146.40ms
step:1069/1375 train_time:155052ms step_avg:146.41ms
step:1070/1375 train_time:155204ms step_avg:146.42ms
step:1071/1375 train_time:155359ms step_avg:146.43ms
step:1072/1375 train_time:155512ms step_avg:146.43ms
step:1073/1375 train_time:155663ms step_avg:146.44ms
step:1074/1375 train_time:155816ms step_avg:146.44ms
step:1075/1375 train_time:155971ms step_avg:146.45ms
step:1076/1375 train_time:156123ms step_avg:146.46ms
step:1077/1375 train_time:156275ms step_avg:146.46ms
step:1078/1375 train_time:156433ms step_avg:146.47ms
step:1079/1375 train_time:156589ms step_avg:146.48ms
step:1080/1375 train_time:156745ms step_avg:146.49ms
step:1081/1375 train_time:156898ms step_avg:146.50ms
step:1082/1375 train_time:157050ms step_avg:146.50ms
step:1083/1375 train_time:157204ms step_avg:146.51ms
step:1084/1375 train_time:157360ms step_avg:146.52ms
step:1085/1375 train_time:157512ms step_avg:146.52ms
step:1086/1375 train_time:157664ms step_avg:146.53ms
step:1087/1375 train_time:157823ms step_avg:146.54ms
step:1088/1375 train_time:157976ms step_avg:146.55ms
step:1089/1375 train_time:158134ms step_avg:146.56ms
step:1090/1375 train_time:158291ms step_avg:146.57ms
step:1091/1375 train_time:158446ms step_avg:146.57ms
step:1092/1375 train_time:158596ms step_avg:146.58ms
step:1093/1375 train_time:158751ms step_avg:146.58ms
step:1094/1375 train_time:158906ms step_avg:146.59ms
step:1095/1375 train_time:159059ms step_avg:146.60ms
step:1096/1375 train_time:159215ms step_avg:146.61ms
step:1097/1375 train_time:159373ms step_avg:146.62ms
step:1098/1375 train_time:159526ms step_avg:146.62ms
step:1099/1375 train_time:159678ms step_avg:146.63ms
step:1100/1375 train_time:159830ms step_avg:146.63ms
step:1101/1375 train_time:159983ms step_avg:146.64ms
step:1102/1375 train_time:160138ms step_avg:146.65ms
step:1103/1375 train_time:160292ms step_avg:146.65ms
step:1104/1375 train_time:160445ms step_avg:146.66ms
step:1105/1375 train_time:160597ms step_avg:146.66ms
step:1106/1375 train_time:160753ms step_avg:146.67ms
step:1107/1375 train_time:160905ms step_avg:146.68ms
step:1108/1375 train_time:161059ms step_avg:146.68ms
step:1109/1375 train_time:161212ms step_avg:146.69ms
step:1110/1375 train_time:161363ms step_avg:146.69ms
step:1111/1375 train_time:161519ms step_avg:146.70ms
step:1112/1375 train_time:161673ms step_avg:146.71ms
step:1113/1375 train_time:161826ms step_avg:146.71ms
step:1114/1375 train_time:161981ms step_avg:146.72ms
step:1115/1375 train_time:162136ms step_avg:146.73ms
step:1116/1375 train_time:162286ms step_avg:146.73ms
step:1117/1375 train_time:162443ms step_avg:146.74ms
step:1118/1375 train_time:162602ms step_avg:146.75ms
step:1119/1375 train_time:162756ms step_avg:146.76ms
step:1120/1375 train_time:162911ms step_avg:146.77ms
step:1121/1375 train_time:163063ms step_avg:146.77ms
step:1122/1375 train_time:163217ms step_avg:146.78ms
step:1123/1375 train_time:163370ms step_avg:146.78ms
step:1124/1375 train_time:163529ms step_avg:146.79ms
step:1125/1375 train_time:163686ms step_avg:146.80ms
step:1125/1375 val_loss:3.3477 train_time:163762ms step_avg:146.87ms
step:1126/1375 train_time:163840ms step_avg:146.81ms
step:1127/1375 train_time:163995ms step_avg:146.82ms
step:1128/1375 train_time:164149ms step_avg:146.82ms
step:1129/1375 train_time:164308ms step_avg:146.83ms
step:1130/1375 train_time:164462ms step_avg:146.84ms
step:1131/1375 train_time:164619ms step_avg:146.85ms
step:1132/1375 train_time:164771ms step_avg:146.85ms
step:1133/1375 train_time:164926ms step_avg:146.86ms
step:1134/1375 train_time:165081ms step_avg:146.87ms
step:1135/1375 train_time:165233ms step_avg:146.87ms
step:1136/1375 train_time:165394ms step_avg:146.89ms
step:1137/1375 train_time:165546ms step_avg:146.89ms
step:1138/1375 train_time:165701ms step_avg:146.90ms
step:1139/1375 train_time:165856ms step_avg:146.91ms
step:1140/1375 train_time:166011ms step_avg:146.91ms
step:1141/1375 train_time:166204ms step_avg:146.95ms
step:1142/1375 train_time:166355ms step_avg:146.96ms
step:1143/1375 train_time:166513ms step_avg:146.97ms
step:1144/1375 train_time:166669ms step_avg:146.97ms
step:1145/1375 train_time:166820ms step_avg:146.98ms
step:1146/1375 train_time:166976ms step_avg:146.99ms
step:1147/1375 train_time:167132ms step_avg:146.99ms
step:1148/1375 train_time:167287ms step_avg:147.00ms
step:1149/1375 train_time:167443ms step_avg:147.01ms
step:1150/1375 train_time:167594ms step_avg:147.01ms
step:1151/1375 train_time:167750ms step_avg:147.02ms
step:1152/1375 train_time:167906ms step_avg:147.03ms
step:1153/1375 train_time:168062ms step_avg:147.04ms
step:1154/1375 train_time:168216ms step_avg:147.04ms
step:1155/1375 train_time:168370ms step_avg:147.05ms
step:1156/1375 train_time:168529ms step_avg:147.06ms
step:1157/1375 train_time:168688ms step_avg:147.07ms
step:1158/1375 train_time:168843ms step_avg:147.08ms
step:1159/1375 train_time:168997ms step_avg:147.08ms
step:1160/1375 train_time:169150ms step_avg:147.09ms
step:1161/1375 train_time:169305ms step_avg:147.09ms
step:1162/1375 train_time:169461ms step_avg:147.10ms
step:1163/1375 train_time:169616ms step_avg:147.11ms
step:1164/1375 train_time:169771ms step_avg:147.12ms
step:1165/1375 train_time:169925ms step_avg:147.12ms
step:1166/1375 train_time:170079ms step_avg:147.13ms
step:1167/1375 train_time:170232ms step_avg:147.13ms
step:1168/1375 train_time:170387ms step_avg:147.14ms
step:1169/1375 train_time:170544ms step_avg:147.15ms
step:1170/1375 train_time:170698ms step_avg:147.15ms
step:1171/1375 train_time:170853ms step_avg:147.16ms
step:1172/1375 train_time:171008ms step_avg:147.17ms
step:1173/1375 train_time:171163ms step_avg:147.17ms
step:1174/1375 train_time:171324ms step_avg:147.19ms
step:1175/1375 train_time:171481ms step_avg:147.19ms
step:1176/1375 train_time:171642ms step_avg:147.21ms
step:1177/1375 train_time:171804ms step_avg:147.22ms
step:1178/1375 train_time:171957ms step_avg:147.22ms
step:1179/1375 train_time:172110ms step_avg:147.23ms
step:1180/1375 train_time:172274ms step_avg:147.24ms
step:1181/1375 train_time:172430ms step_avg:147.25ms
step:1182/1375 train_time:172582ms step_avg:147.25ms
step:1183/1375 train_time:172734ms step_avg:147.26ms
step:1184/1375 train_time:172891ms step_avg:147.27ms
step:1185/1375 train_time:173048ms step_avg:147.28ms
step:1186/1375 train_time:173201ms step_avg:147.28ms
step:1187/1375 train_time:173366ms step_avg:147.29ms
step:1188/1375 train_time:173517ms step_avg:147.30ms
step:1189/1375 train_time:173673ms step_avg:147.30ms
step:1190/1375 train_time:173829ms step_avg:147.31ms
step:1191/1375 train_time:173986ms step_avg:147.32ms
step:1192/1375 train_time:174140ms step_avg:147.33ms
step:1193/1375 train_time:174294ms step_avg:147.33ms
step:1194/1375 train_time:174449ms step_avg:147.34ms
step:1195/1375 train_time:174603ms step_avg:147.34ms
step:1196/1375 train_time:174760ms step_avg:147.35ms
step:1197/1375 train_time:174916ms step_avg:147.36ms
step:1198/1375 train_time:175075ms step_avg:147.37ms
step:1199/1375 train_time:175229ms step_avg:147.38ms
step:1200/1375 train_time:175383ms step_avg:147.38ms
step:1201/1375 train_time:175537ms step_avg:147.39ms
step:1202/1375 train_time:175706ms step_avg:147.40ms
step:1203/1375 train_time:175863ms step_avg:147.41ms
step:1204/1375 train_time:176017ms step_avg:147.42ms
step:1205/1375 train_time:176172ms step_avg:147.42ms
step:1206/1375 train_time:176328ms step_avg:147.43ms
step:1207/1375 train_time:176483ms step_avg:147.44ms
step:1208/1375 train_time:176639ms step_avg:147.44ms
step:1209/1375 train_time:176792ms step_avg:147.45ms
step:1210/1375 train_time:176952ms step_avg:147.46ms
step:1211/1375 train_time:177107ms step_avg:147.47ms
step:1212/1375 train_time:177262ms step_avg:147.47ms
step:1213/1375 train_time:177416ms step_avg:147.48ms
step:1214/1375 train_time:177573ms step_avg:147.49ms
step:1215/1375 train_time:177731ms step_avg:147.49ms
step:1216/1375 train_time:177883ms step_avg:147.50ms
step:1217/1375 train_time:178037ms step_avg:147.50ms
step:1218/1375 train_time:178189ms step_avg:147.51ms
step:1219/1375 train_time:178342ms step_avg:147.51ms
step:1220/1375 train_time:178494ms step_avg:147.52ms
step:1221/1375 train_time:178648ms step_avg:147.52ms
step:1222/1375 train_time:178803ms step_avg:147.53ms
step:1223/1375 train_time:178960ms step_avg:147.54ms
step:1224/1375 train_time:179116ms step_avg:147.54ms
step:1225/1375 train_time:179273ms step_avg:147.55ms
step:1226/1375 train_time:179428ms step_avg:147.56ms
step:1227/1375 train_time:179587ms step_avg:147.56ms
step:1228/1375 train_time:179742ms step_avg:147.57ms
step:1229/1375 train_time:179894ms step_avg:147.58ms
step:1230/1375 train_time:180056ms step_avg:147.59ms
step:1231/1375 train_time:180213ms step_avg:147.59ms
step:1232/1375 train_time:180373ms step_avg:147.60ms
step:1233/1375 train_time:180528ms step_avg:147.61ms
step:1234/1375 train_time:180682ms step_avg:147.62ms
step:1235/1375 train_time:180836ms step_avg:147.62ms
step:1236/1375 train_time:180991ms step_avg:147.63ms
step:1237/1375 train_time:181147ms step_avg:147.63ms
step:1238/1375 train_time:181310ms step_avg:147.65ms
step:1239/1375 train_time:181467ms step_avg:147.65ms
step:1240/1375 train_time:181626ms step_avg:147.66ms
step:1241/1375 train_time:181786ms step_avg:147.67ms
step:1242/1375 train_time:181943ms step_avg:147.68ms
step:1243/1375 train_time:182102ms step_avg:147.69ms
step:1244/1375 train_time:182255ms step_avg:147.69ms
step:1245/1375 train_time:182410ms step_avg:147.70ms
step:1246/1375 train_time:182565ms step_avg:147.71ms
step:1247/1375 train_time:182723ms step_avg:147.71ms
step:1248/1375 train_time:182878ms step_avg:147.72ms
step:1249/1375 train_time:183032ms step_avg:147.73ms
step:1250/1375 train_time:183188ms step_avg:147.73ms
step:1250/1375 val_loss:3.3024 train_time:183269ms step_avg:147.80ms
step:1251/1375 train_time:183348ms step_avg:147.74ms
step:1252/1375 train_time:183503ms step_avg:147.75ms
step:1253/1375 train_time:183658ms step_avg:147.75ms
step:1254/1375 train_time:183809ms step_avg:147.76ms
step:1255/1375 train_time:183975ms step_avg:147.77ms
step:1256/1375 train_time:184128ms step_avg:147.78ms
step:1257/1375 train_time:184284ms step_avg:147.78ms
step:1258/1375 train_time:184442ms step_avg:147.79ms
step:1259/1375 train_time:184599ms step_avg:147.80ms
step:1260/1375 train_time:184753ms step_avg:147.80ms
step:1261/1375 train_time:184908ms step_avg:147.81ms
step:1262/1375 train_time:185068ms step_avg:147.82ms
step:1263/1375 train_time:185224ms step_avg:147.82ms
step:1264/1375 train_time:185379ms step_avg:147.83ms
step:1265/1375 train_time:185532ms step_avg:147.83ms
step:1266/1375 train_time:185689ms step_avg:147.84ms
step:1267/1375 train_time:185845ms step_avg:147.85ms
step:1268/1375 train_time:186001ms step_avg:147.85ms
step:1269/1375 train_time:186161ms step_avg:147.86ms
step:1270/1375 train_time:186315ms step_avg:147.87ms
step:1271/1375 train_time:186471ms step_avg:147.88ms
step:1272/1375 train_time:186627ms step_avg:147.88ms
step:1273/1375 train_time:186780ms step_avg:147.89ms
step:1274/1375 train_time:186935ms step_avg:147.89ms
step:1275/1375 train_time:187088ms step_avg:147.90ms
step:1276/1375 train_time:187243ms step_avg:147.90ms
step:1277/1375 train_time:187398ms step_avg:147.91ms
step:1278/1375 train_time:187552ms step_avg:147.91ms
step:1279/1375 train_time:187709ms step_avg:147.92ms
step:1280/1375 train_time:187869ms step_avg:147.93ms
step:1281/1375 train_time:188024ms step_avg:147.93ms
step:1282/1375 train_time:188176ms step_avg:147.94ms
step:1283/1375 train_time:188333ms step_avg:147.94ms
step:1284/1375 train_time:188492ms step_avg:147.95ms
step:1285/1375 train_time:188646ms step_avg:147.96ms
step:1286/1375 train_time:188803ms step_avg:147.97ms
step:1287/1375 train_time:188958ms step_avg:147.97ms
step:1288/1375 train_time:189111ms step_avg:147.97ms
step:1289/1375 train_time:189273ms step_avg:147.98ms
step:1290/1375 train_time:189431ms step_avg:147.99ms
step:1291/1375 train_time:189589ms step_avg:148.00ms
step:1292/1375 train_time:189746ms step_avg:148.01ms
step:1293/1375 train_time:189904ms step_avg:148.02ms
step:1294/1375 train_time:190059ms step_avg:148.02ms
step:1295/1375 train_time:190213ms step_avg:148.03ms
step:1296/1375 train_time:190369ms step_avg:148.03ms
step:1297/1375 train_time:190528ms step_avg:148.04ms
step:1298/1375 train_time:190684ms step_avg:148.05ms
step:1299/1375 train_time:190839ms step_avg:148.05ms
step:1300/1375 train_time:190993ms step_avg:148.06ms
step:1301/1375 train_time:191146ms step_avg:148.06ms
step:1302/1375 train_time:191304ms step_avg:148.07ms
step:1303/1375 train_time:191462ms step_avg:148.08ms
step:1304/1375 train_time:191623ms step_avg:148.09ms
step:1305/1375 train_time:191778ms step_avg:148.09ms
step:1306/1375 train_time:191934ms step_avg:148.10ms
step:1307/1375 train_time:192087ms step_avg:148.10ms
step:1308/1375 train_time:192243ms step_avg:148.11ms
step:1309/1375 train_time:192399ms step_avg:148.11ms
step:1310/1375 train_time:192554ms step_avg:148.12ms
step:1311/1375 train_time:192708ms step_avg:148.12ms
step:1312/1375 train_time:192862ms step_avg:148.13ms
step:1313/1375 train_time:193016ms step_avg:148.13ms
step:1314/1375 train_time:193170ms step_avg:148.14ms
step:1315/1375 train_time:193326ms step_avg:148.14ms
step:1316/1375 train_time:193480ms step_avg:148.15ms
step:1317/1375 train_time:193634ms step_avg:148.15ms
step:1318/1375 train_time:193797ms step_avg:148.16ms
step:1319/1375 train_time:193954ms step_avg:148.17ms
step:1320/1375 train_time:194108ms step_avg:148.17ms
step:1321/1375 train_time:194266ms step_avg:148.18ms
step:1322/1375 train_time:194426ms step_avg:148.19ms
step:1323/1375 train_time:194581ms step_avg:148.20ms
step:1324/1375 train_time:194735ms step_avg:148.20ms
step:1325/1375 train_time:194891ms step_avg:148.21ms
step:1326/1375 train_time:195052ms step_avg:148.22ms
step:1327/1375 train_time:195209ms step_avg:148.22ms
step:1328/1375 train_time:195362ms step_avg:148.23ms
step:1329/1375 train_time:195537ms step_avg:148.25ms
step:1330/1375 train_time:195697ms step_avg:148.25ms
step:1331/1375 train_time:195888ms step_avg:148.29ms
step:1332/1375 train_time:196053ms step_avg:148.30ms
step:1333/1375 train_time:196210ms step_avg:148.31ms
step:1334/1375 train_time:196366ms step_avg:148.31ms
step:1335/1375 train_time:196519ms step_avg:148.32ms
step:1336/1375 train_time:196683ms step_avg:148.33ms
step:1337/1375 train_time:196841ms step_avg:148.34ms
step:1338/1375 train_time:196998ms step_avg:148.34ms
step:1339/1375 train_time:197156ms step_avg:148.35ms
step:1340/1375 train_time:197312ms step_avg:148.35ms
step:1341/1375 train_time:197467ms step_avg:148.36ms
step:1342/1375 train_time:197625ms step_avg:148.37ms
step:1343/1375 train_time:197779ms step_avg:148.37ms
step:1344/1375 train_time:197935ms step_avg:148.38ms
step:1345/1375 train_time:198090ms step_avg:148.38ms
step:1346/1375 train_time:198247ms step_avg:148.39ms
step:1347/1375 train_time:198404ms step_avg:148.40ms
step:1348/1375 train_time:198559ms step_avg:148.40ms
step:1349/1375 train_time:198715ms step_avg:148.41ms
step:1350/1375 train_time:198869ms step_avg:148.41ms
step:1351/1375 train_time:199024ms step_avg:148.41ms
step:1352/1375 train_time:199184ms step_avg:148.42ms
step:1353/1375 train_time:199344ms step_avg:148.43ms
step:1354/1375 train_time:199503ms step_avg:148.44ms
step:1355/1375 train_time:199660ms step_avg:148.45ms
step:1356/1375 train_time:199818ms step_avg:148.45ms
step:1357/1375 train_time:199976ms step_avg:148.46ms
step:1358/1375 train_time:200135ms step_avg:148.47ms
step:1359/1375 train_time:200292ms step_avg:148.47ms
step:1360/1375 train_time:200452ms step_avg:148.48ms
step:1361/1375 train_time:200613ms step_avg:148.49ms
step:1362/1375 train_time:200771ms step_avg:148.50ms
step:1363/1375 train_time:200933ms step_avg:148.51ms
step:1364/1375 train_time:201089ms step_avg:148.51ms
step:1365/1375 train_time:201242ms step_avg:148.52ms
step:1366/1375 train_time:201398ms step_avg:148.52ms
step:1367/1375 train_time:201554ms step_avg:148.53ms
step:1368/1375 train_time:201713ms step_avg:148.54ms
step:1369/1375 train_time:201877ms step_avg:148.55ms
step:1370/1375 train_time:202036ms step_avg:148.56ms
step:1371/1375 train_time:202190ms step_avg:148.56ms
step:1372/1375 train_time:202354ms step_avg:148.57ms
step:1373/1375 train_time:202509ms step_avg:148.58ms
step:1374/1375 train_time:202667ms step_avg:148.58ms
step:1375/1375 train_time:202821ms step_avg:148.59ms
step:1375/1375 val_loss:3.2770 train_time:202899ms step_avg:148.64ms
peak memory consumption: 31563 MiB
