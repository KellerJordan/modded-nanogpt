import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
import uuid
import time
import glob
import subprocess
import contextlib
from dataclasses import dataclass

import torch
torch.empty(1, device='cuda', requires_grad=True).backward()
from torch import nn
import torch.nn.functional as F
import torch.distributed as dist
from torch.nn.parallel import DistributedDataParallel as DDP
# use of FlexAttention contributed by @KoszarskyB
from torch.nn.attention.flex_attention import BlockMask, flex_attention

# -----------------------------------------------------------------------------
# Muon optimizer

@torch.compile
def zeropower_via_newtonschulz5(G, steps):
    """
    Newton-Schulz iteration to compute the zeroth power / orthogonalization of G. We opt to use a
    quintic iteration whose coefficients are selected to maximize the slope at zero. For the purpose
    of minimizing steps, it turns out to be empirically effective to keep increasing the slope at
    zero even beyond the point where the iteration no longer converges all the way to one everywhere
    on the interval. This iteration therefore does not produce UV^T but rather something like US'V^T
    where S' is diagonal with S_{ii}' ~ Uniform(0.5, 1.5), which turns out not to hurt model
    performance at all relative to UV^T, where USV^T = G is the SVD.
    """
    assert len(G.shape) == 2
    a, b, c = (3.4445, -4.7750,  2.0315)
    X = G.bfloat16()
    if G.size(0) > G.size(1):
        X = X.T

    # Ensure spectral norm is at most 1
    X = X / (X.norm() + 1e-7)
    # Perform the NS iterations
    for _ in range(steps):
        A = X @ X.T
        B = b * A + c * A @ A # adapted from suggestion by @jxbz, @leloykun, and @YouJiacheng
        X = a * X + B @ X
    
    if G.size(0) > G.size(1):
        X = X.T
    return X

class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Some warnings:
    - This optimizer assumes that all parameters passed in are 2D.
    - It should not be used for the embedding layer, the final fully connected layer, or any {0,1}-D
    parameters; those should all be optimized by a standard method (e.g., AdamW).
    - To use it with 4D convolutional filters, it works well to just flatten their last 3 dimensions.
    - We believe it is unlikely to work well for training with small batch size.
    - We believe it may not work well for finetuning pretrained models, but we haven't tested this.
    - We have not yet tried this optimizer for training scenarios larger than NanoGPT (124M).

    Arguments:
        lr: The learning rate used by the internal SGD.
        momentum: The momentum used by the internal SGD.
        nesterov: Whether to use Nesterov-style momentum in the internal SGD. (recommended)
        ns_steps: The number of Newton-Schulz iteration steps to use.
    """
    def __init__(self, params, lr=0.02, momentum=0.95, nesterov=True, ns_steps=5):
        self.world_size = int(os.environ['WORLD_SIZE'])
        self.rank = int(os.environ['RANK'])
        defaults = dict(lr=lr, momentum=momentum, nesterov=nesterov, ns_steps=ns_steps)
        assert all(isinstance(p, torch.Tensor) for p in params)
        sizes = {p.numel() for p in params}
        param_groups = [dict(params=[p for p in params if p.numel() == size],
                             update_buffer=[torch.empty(size, device='cuda', dtype=torch.bfloat16) for _ in range(self.world_size)])
                        for size in sizes]
        super().__init__(param_groups, defaults)

    def step(self):

        for group in self.param_groups:

            lr = group['lr']
            momentum = group['momentum']
            nesterov = group['nesterov']
            ns_steps = group['ns_steps']
            update_buffers = group['update_buffer']
            # generate weight updates in distributed fashion
            params = group['params']
            handle = None
            params_world = None
            def update_prev():
                if params_world is None:
                    return
                assert handle is not None
                handle.wait()
                for p_world, g_world in zip(params_world, update_buffers):
                    p_world.data.add_(
                        g_world.view_as(p_world),
                        alpha=-lr * max(1, p_world.size(0) / p_world.size(1)) ** 0.5,
                    )
            for base_i in range(len(params))[::self.world_size]:
                if base_i + rank < len(params):
                    p = params[base_i + self.rank]
                    g = p.grad
                    assert g is not None
                    state = self.state[p]
                    if 'momentum_buffer' not in state:
                        state['momentum_buffer'] = torch.zeros_like(g)
                    buf = state['momentum_buffer']
                    buf.lerp_(g, 1 - momentum)
                    g = g.lerp_(buf, momentum) if nesterov else buf
                    g = zeropower_via_newtonschulz5(g, steps=ns_steps).flatten()
                else:
                    g = update_buffers[rank]
                update_prev() # async all_gather instead of sync all_reduce by @YouJiacheng
                handle = dist.all_gather(update_buffers, g, async_op=True)
                params_world = params[base_i : base_i + self.world_size]
            update_prev()

# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the GPT-2 model

def norm(x):
    return F.rms_norm(x, (x.size(-1),))

class CastedLinear(nn.Linear):

    def __init__(self, in_features, out_features):
        super().__init__(in_features, out_features, bias=False)

    def forward(self, x):
        return F.linear(x, self.weight.type_as(x))

class Rotary(nn.Module):

    def __init__(self, dim, max_seq_len=65536):
        super().__init__()
        # half-truncate RoPE by @YouJiacheng
        angular_freq = (1 / 1024) ** torch.linspace(0, 1, steps=dim//4, dtype=torch.float32)
        angular_freq = torch.cat([angular_freq, angular_freq.new_zeros(dim//4)])
        t = torch.arange(max_seq_len, dtype=torch.float32)
        theta = torch.einsum('i,j -> ij', t, angular_freq)
        self.cos = nn.Buffer(theta.cos(), persistent=False)
        self.sin = nn.Buffer(theta.sin(), persistent=False)

    def forward(self, x):
        cos, sin = self.cos[None, :x.size(-3), None, :], self.sin[None, :x.size(-3), None, :]
        x1, x2 = x.float().chunk(2, dim=-1)
        y1 = x1 * cos + x2 * sin
        y2 = x1 * (-sin) + x2 * cos
        return torch.cat((y1, y2), 3).type_as(x)

class CausalSelfAttention(nn.Module):

    def __init__(self, dim, num_heads, layer_id):
        super().__init__()
        assert dim % num_heads == 0
        self.num_heads = num_heads
        self.layer_id = layer_id
        self.c_q = CastedLinear(dim, dim)
        self.c_k = CastedLinear(dim, dim)
        self.c_v = CastedLinear(dim, dim)
        self.lambdas = nn.Parameter(torch.tensor([0.5, 0.5]))
        self.rotary = Rotary(dim // num_heads) # dim // num_heads = head_dim
        self.c_proj = CastedLinear(dim, dim)
        self.c_proj.weight.data.zero_() # zero init suggested by @Grad62304977
        # self.attn_scale = nn.Parameter(torch.tensor(1.0 / (dim // num_heads) ** 0.5))
        # self.attn_scale = nn.Parameter(torch.tensor(0.20))
        self.attn_scale = 0.13 + 0.01 * min(layer_id, 11 - layer_id)

    def forward(self, x, ve, block_mask):
        B, T = x.size(0), x.size(1) # batch size, sequence length
        assert B == 1, 'Must use batch size = 1 for FlexAttention'
        q = self.c_q(x).view(B, T, self.num_heads, -1)
        k = self.c_k(x).view(B, T, self.num_heads, -1)
        v = self.c_v(x).view(B, T, self.num_heads, -1)
        if ve is not None:
            v = self.lambdas[0] * v + self.lambdas[1] * ve.view_as(v) # @KoszarskyB & @Grad62304977
        else: # skip mid-layers token value embeddings by @YouJiacheng
            v = self.lambdas[0] * v
        q, k = norm(q), norm(k) # QK norm @Grad62304977
        q, k = self.rotary(q), self.rotary(k)
        # y = flex_attention(q.transpose(1, 2) * self.attn_scale, k.transpose(1, 2), v.transpose(1, 2), block_mask=block_mask, scale=1.)
        y = flex_attention(q.transpose(1, 2), k.transpose(1, 2), v.transpose(1, 2), block_mask=block_mask, scale=self.attn_scale)
        y = y.transpose(1, 2).contiguous().view_as(x) # re-assemble all head outputs side by side
        y = self.c_proj(y)
        return y

class MLP(nn.Module):

    def __init__(self, dim):
        super().__init__()
        self.c_fc = CastedLinear(dim, 4 * dim)
        self.c_proj = CastedLinear(4 * dim, dim)
        self.c_proj.weight.data.zero_() # zero init suggested by @Grad62304977

    def forward(self, x):
        x = self.c_fc(x)
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = self.c_proj(x)
        return x

class Block(nn.Module):

    def __init__(self, model_dim, num_heads, layer_id, use_attn=True):
        super().__init__()
        self.attn = CausalSelfAttention(model_dim, num_heads, layer_id) if use_attn else None
        self.mlp = MLP(model_dim)
        self.lambdas = nn.Parameter(torch.tensor([1., 0.]))

    def forward(self, x, ve, x0, block_mask):
        x = self.lambdas[0] * x + self.lambdas[1] * x0
        if self.attn is not None:
            x = x + self.attn(norm(x), ve, block_mask)
        x = x + self.mlp(norm(x))
        return x

class ValueEmbedding(nn.Module):
    def __init__(self, vocab_size, model_dim):
        super().__init__()
        self.embed = nn.ModuleList([nn.Embedding(vocab_size, model_dim) for _ in range(3)])

    def forward(self, inputs):
        ve = [emb(inputs).bfloat16() for emb in self.embed]
        # 012 ... 012 structure on token value embeddings by @YouJiacheng, improved on @leloykun's U-net structure
        ve = [ve[0], ve[1], ve[2], None, None, None, None, None, None, ve[0], ve[1], ve[2]]
        return ve

# -----------------------------------------------------------------------------
# The main GPT-2 model

class GPT(nn.Module):

    def __init__(self, vocab_size, num_layers, num_heads, model_dim):
        super().__init__()
        self.embed = nn.Embedding(vocab_size, model_dim)
        # skip attention of blocks.7 (the 8th layer) by @YouJiacheng
        self.blocks = nn.ModuleList([Block(model_dim, num_heads, layer_id=layer_id, use_attn=(layer_id != 7))
                                     for layer_id in range(num_layers)])
        # token value embeddings by @KoszarskyB - inspired by @Grad62304977's value residual learning
        # U-net structure on token value embeddings by @leloykun
        self.value_embeds = ValueEmbedding(vocab_size, model_dim)
        self.lm_head = CastedLinear(model_dim, vocab_size)
        self.lm_head.weight.data.zero_() # @Grad62304977
        # U-net design by @brendanh0gan
        self.num_encoder_layers = num_layers // 2 # Half of the layers for encoder
        self.num_decoder_layers = num_layers - self.num_encoder_layers # Remaining for decoder
        # Add learnable skip connection weights for decoder layers
        self.skip_weights = nn.Parameter(torch.ones(self.num_decoder_layers))

    def forward(self, inputs, targets, sliding_window_num_blocks):
        BLOCK_SIZE = 128
        seq_len = len(inputs)
        assert seq_len % BLOCK_SIZE == 0
        total_num_blocks = seq_len // BLOCK_SIZE
        assert inputs.ndim == 1
        docs = (inputs == 50256).cumsum(0)
        docs_low = docs.view(-1, BLOCK_SIZE)[:, 0].contiguous()
        docs_high = docs.view(-1, BLOCK_SIZE)[:, -1].contiguous()

        def document_causal(b, h, q_idx, kv_idx):
            causal_mask = q_idx >= kv_idx
            document_mask = docs[q_idx] == docs[kv_idx]
            return causal_mask & document_mask

        def dense_to_ordered(dense_mask):
            num_blocks = dense_mask.sum(dim=-1, dtype=torch.int32)
            indices = dense_mask.argsort(dim=-1, descending=True, stable=True).to(torch.int32)
            return num_blocks[None, None].contiguous(), indices[None, None].contiguous()

        def create_doc_swc_block_mask(sliding_window_num_blocks):
            kv_idx = block_idx = torch.arange(total_num_blocks, dtype=torch.int32, device='cuda')
            q_idx = block_idx[:, None]
            causal_bm = q_idx >= kv_idx
            causal_full_bm = q_idx > kv_idx
            window_bm = q_idx - kv_idx < sliding_window_num_blocks
            window_full_bm = window_bm # block-wise sliding window by @YouJiacheng
            # document_bm = (docs_low[q_idx] <= docs_high[kv_idx]) & (docs_low[kv_idx] <= docs_high[q_idx])
            document_bm = (docs_low[:, None] <= docs_high) & (docs_low <= docs_high[:, None])
            document_full_bm = (docs_low[:, None] == docs_high) & (docs_low == docs_high[:, None])
            nonzero_bm = causal_bm & window_bm & document_bm
            full_bm  = causal_full_bm & window_full_bm & document_full_bm
            kv_num_blocks, kv_indices = dense_to_ordered(nonzero_bm & ~full_bm)
            full_kv_num_blocks, full_kv_indices = dense_to_ordered(full_bm)
            return BlockMask.from_kv_blocks(
                kv_num_blocks,
                kv_indices,
                full_kv_num_blocks,
                full_kv_indices,
                BLOCK_SIZE=BLOCK_SIZE,
                mask_mod=document_causal,
            )

        block_mask = create_doc_swc_block_mask(sliding_window_num_blocks)

        x0 = norm(self.embed(inputs[None]).bfloat16()) # use of norm here by @Grad62304977
        x = x0
        ve = self.value_embeds(inputs)
        assert len(ve) == len(self.blocks)
        ve_enc, ve_dec = ve[:self.num_encoder_layers], ve[self.num_encoder_layers:]

        # Store outputs for U-Net skip connections
        skip_connections = []
        # Encoder pass - process only the first half of the blocks
        for i in range(self.num_encoder_layers):
            x = self.blocks[i](x, ve_enc[i], x0, block_mask)
            skip_connections.append(x)
        # Decoder pass - process the remaining blocks with weighted skip connections
        for i in range(self.num_decoder_layers):
            x = x + self.skip_weights[i] * skip_connections.pop()
            # U-net structure on token value embeddings by @leloykun
            x = self.blocks[self.num_encoder_layers + i](x, ve_dec[i], x0, block_mask)

        x = norm(x)
        logits = self.lm_head(x)
        logits = 15 * torch.tanh(logits / 15) # @Grad62304977 added tanh softcapping, @KoszarskyB reduced it from 30 to 15
        logits = logits.float()
        loss = F.cross_entropy(logits.view(-1, logits.size(-1)), targets)
        return loss

# -----------------------------------------------------------------------------
# Our own simple Distributed Data Loader

def _load_data_shard(path):
    # only reads the header, returns header data
    # header is 256 int32
    header = torch.from_file(path, False, 256, dtype=torch.int32)
    assert header[0] == 20240520, 'magic number mismatch in the data .bin file'
    assert header[1] == 1, 'unsupported version'
    num_tokens = int(header[2]) # number of tokens (claimed)
    with open(path, 'rb', buffering=0) as f:
        tokens = torch.empty(num_tokens, dtype=torch.uint16, pin_memory=True) # avoid pin_memory copy by @YouJiacheng
        f.seek(256 * 4)
        nbytes = f.readinto(tokens.numpy()) # avoid bytes->array copy by @YouJiacheng
        assert nbytes == 2 * num_tokens, 'number of tokens read does not match header'
    return tokens

class DistributedDataLoader:

    def __init__(self, filename_pattern):
        self.rank = int(os.environ['RANK'])
        self.world_size = int(os.environ['WORLD_SIZE'])
        self.files = sorted(glob.glob(filename_pattern))
        self.reset()

    def reset(self):
        self.current_shard = -1
        self.advance()

    def advance(self):
        self.current_shard = (self.current_shard + 1) % len(self.files)
        self.current_position = 0
        self.tokens = _load_data_shard(self.files[self.current_shard])

    def next_batch(self, batch_size):
        assert batch_size % self.world_size == 0
        device_batch_size = batch_size // self.world_size
        # load next shard if necessary
        if self.current_position + batch_size + 1 >= len(self.tokens):
            self.advance()
        pos = self.current_position + self.rank * device_batch_size
        device_batch_tokens = self.tokens[pos:pos+device_batch_size+1]
        # advance current position
        self.current_position += batch_size
        inputs = device_batch_tokens[:-1].to(device='cuda', dtype=torch.int32, non_blocking=True)
        targets = device_batch_tokens[1:].to(device='cuda', dtype=torch.int64, non_blocking=True)
        return inputs, targets

# -----------------------------------------------------------------------------
# int main

@dataclass
class Hyperparameters:
    # data
    train_files = 'data/fineweb10B/fineweb_train_*.bin' # input .bin to train on
    val_files = 'data/fineweb10B/fineweb_val_*.bin' # input .bin to eval validation loss on
    val_tokens = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    # optimization
    batch_size = 8*64*1024 # batch size in tokens
    num_iterations = 1375 # number of iterations to run
    cooldown_frac = 0.4 # fraction of training spent cooling down the learning rate
    bf16_embeds = True
    # evaluation and logging
    val_loss_every = 125 # every how many steps to evaluate val loss? 0 for only at the end
    # implementation
    max_device_batch_size = 64*1024 # batch size per device in tokens
    save_checkpoint = False
args = Hyperparameters()

micro_bs = args.max_device_batch_size

# set up DDP (distributed data parallel). torchrun sets this env variable
rank = int(os.environ['RANK'])
local_rank = int(os.environ['LOCAL_RANK'])
world_size = int(os.environ['WORLD_SIZE'])
assert torch.cuda.is_available()
torch.cuda.set_device(local_rank)
dist.init_process_group(backend='nccl', device_id=torch.device(local_rank))
dist.barrier()
master_process = (rank == 0) # this process will do logging, checkpointing etc.

# begin logging
logfile = None
if master_process:
    run_id = uuid.uuid4()
    os.makedirs('logs', exist_ok=True)
    logfile = f'logs/{run_id}.txt'
    print(logfile)

def print0(s, console=False):
    if master_process:
        with open(logfile, 'a') as f:
            if console:
                print(s)
            print(s, file=f)

# begin by printing this file (the Python code)
print0(code)
print0('='*100)
# log information about the hardware/software environment this is running on
print0(f'Running Python {sys.version}')
print0(f'Running PyTorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}')
print0(subprocess.run(['nvidia-smi'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).stdout)
print0('='*100)

# load data
train_loader = DistributedDataLoader(args.train_files)
val_loader = DistributedDataLoader(args.val_files)
print0(f'Training dataloader files: {train_loader.files}')
print0(f'Validation dataloader files: {val_loader.files}')
print0('='*100)

# there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency. suggested to me by @Grad62304977.
# this originates from Karpathy's experiments.
model = GPT(vocab_size=50304, num_layers=12, num_heads=6, model_dim=768)
model = model.cuda()
if args.bf16_embeds:
    for m in model.modules():
        if isinstance(m, nn.Embedding):
            m.bfloat16()
model: GPT = torch.compile(model)
ddp_model = DDP(model, device_ids=[local_rank], broadcast_buffers=False, gradient_as_bucket_view=True)

# collect the parameters to optimize
hidden_matrix_params = [p for p in model.blocks.parameters() if p.ndim == 2]
embed_params = [model.embed.weight, *model.value_embeds.parameters()]
scalar_params = [p for n, p in model.named_parameters() if p.ndim < 2 and "attn_scale" not in n]
attn_scale_params = [p for n, p in model.named_parameters() if p.ndim < 2 and "attn_scale" in n]
head_params = [model.lm_head.weight]

# init the optimizer(s)
optimizer1 = torch.optim.Adam([dict(params=embed_params, lr=0.6),
                               dict(params=head_params, lr=0.008),
                               dict(params=scalar_params, lr=0.04),
                               dict(params=attn_scale_params, lr=0.01)],
                              betas=(0.8, 0.95), fused=True)
optimizer2 = Muon(hidden_matrix_params, lr=0.05, momentum=0.95)
optimizers = [optimizer1, optimizer2]

# learning rate schedule: stable then decay
def get_lr(it):
    t = 1 - it / args.num_iterations # time remaining in training
    assert 1 >= t > 0
    # 1) constant lr for first part of training
    if t >= args.cooldown_frac:
        return 1.0
    # 2) then linear cooldown
    else:
        return t / args.cooldown_frac
schedulers = [torch.optim.lr_scheduler.LambdaLR(opt, get_lr) for opt in optimizers]

# sliding window size schedule: linear increase over training in chunks of 128 from 128 -> 1792. By @fernbear.bsky.social
def get_sliding_window_blocks(it):
    x = it / args.num_iterations # training progress
    assert 0 <= x <= 1
    return int(((1 - x) * 128 + x * 1856) // 128)
sliding_window_num_blocks = torch.tensor(1, dtype=torch.int32, device='cuda')

# Start training loop
training_time_ms = 0
# start the clock
torch.cuda.synchronize()
t0 = time.perf_counter()
# begin training
train_steps = args.num_iterations
for step in range(train_steps + 1):
    last_step = (step == train_steps)
    # This effectively ignores timing first 10 steps, which are slower for weird reasons.
    # Alternately, and slightly more correctly in terms of benchmarking, we could do 10
    # steps with dummy data first, and then re-initialize the model and reset the loader.
    if step == 10:
        training_time_ms = 0
        t0 = time.perf_counter()
    timed_steps = float('nan') if step <= 11 else (step - 10) + 1 # <= 11 to avoid bug in val

    sliding_window_num_blocks.copy_(get_sliding_window_blocks(step))

    # --------------- VALIDATION SECTION -----------------
    if last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0):
        # stop the clock
        torch.cuda.synchronize()
        training_time_ms += 1000 * (time.perf_counter() - t0)
        # run validation batches
        model.eval()
        val_loader.reset()
        val_loss = 0.0
        # calculate the number of steps to take in the val loop.
        val_batch_size = world_size * micro_bs
        assert args.val_tokens % val_batch_size == 0
        val_steps = args.val_tokens // val_batch_size
        for _ in range(val_steps):
            with torch.no_grad():
                inputs_val, targets_val = val_loader.next_batch(val_batch_size)
                val_loss += ddp_model(inputs_val, targets_val, sliding_window_num_blocks)
        # Print attention scales
        for n, p in model.named_parameters():
            if p.ndim < 2 and "attn_scale" in n:
                print0(f'{n}: {p.item()}', console=True)
        dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
        val_loss /= val_steps
        # logging
        print0(f'step:{step}/{train_steps} val_loss:{val_loss:.4f} train_time:{training_time_ms:.0f}ms step_avg:{training_time_ms/(timed_steps-1):.2f}ms', console=True)
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.perf_counter()

    if last_step:
        if master_process and args.save_checkpoint:
            log = dict(step=step, code=code, model=model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
            os.makedirs(f'logs/{run_id}', exist_ok=True)
            torch.save(log, f'logs/{run_id}/state_step{step:06d}.pt')
        # the last step only has the validation loop, so break to avoid training
        break

    # --------------- TRAINING SECTION -----------------
    model.train()
    batch_size = args.batch_size
    assert batch_size % world_size == 0
    inputs_train, targets_train = train_loader.next_batch(batch_size)
    assert len(inputs_train) <= micro_bs or len(inputs_train) % micro_bs == 0
    for micro_inputs_train, micro_targets_train in zip(inputs_train.split(micro_bs), targets_train.split(micro_bs)):
        ddp_model(micro_inputs_train, micro_targets_train, sliding_window_num_blocks).backward()
    # momentum warmup for Muon
    frac = min(step/300, 1)
    for group in optimizer2.param_groups:
        group['momentum'] = (1 - frac) * 0.85 + frac * 0.95
    # step the optimizers and schedulers
    for opt, sched in zip(optimizers, schedulers):
        opt.step()
        if step != train_steps-1:
            sched.step()
    # null the gradients
    model.zero_grad(set_to_none=True)
    # logging
    approx_time = training_time_ms + 1000 * (time.perf_counter() - t0)
    print0(f'step:{step+1}/{train_steps} train_time:{approx_time:.0f}ms step_avg:{approx_time/timed_steps:.2f}ms', console=True)

print0(f'peak memory consumption: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB')
dist.destroy_process_group()

====================================================================================================
Running Python 3.10.12 (main, Sep 11 2024, 15:47:36) [GCC 11.4.0]
Running PyTorch 2.6.0.dev20241231+cu126 compiled for CUDA 12.6
Tue Jan 14 15:15:13 2025       
+---------------------------------------------------------------------------------------+
| NVIDIA-SMI 535.183.06             Driver Version: 535.183.06   CUDA Version: 12.4     |
|-----------------------------------------+----------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |
|                                         |                      |               MIG M. |
|=========================================+======================+======================|
|   0  NVIDIA H100 80GB HBM3          On  | 00000000:19:00.0 Off |                    0 |
| N/A   39C    P0             127W / 700W |   7713MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  | 00000000:3B:00.0 Off |                    0 |
| N/A   32C    P0             114W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  | 00000000:4C:00.0 Off |                    0 |
| N/A   29C    P0             118W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  | 00000000:5D:00.0 Off |                    0 |
| N/A   38C    P0             130W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  | 00000000:9B:00.0 Off |                    0 |
| N/A   39C    P0             124W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  | 00000000:BB:00.0 Off |                    0 |
| N/A   30C    P0             115W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  | 00000000:CB:00.0 Off |                    0 |
| N/A   37C    P0             116W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  | 00000000:DB:00.0 Off |                    0 |
| N/A   30C    P0             117W / 700W |   3211MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
                                                                                         
+---------------------------------------------------------------------------------------+
| Processes:                                                                            |
|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |
|        ID   ID                                                             Usage      |
|=======================================================================================|
+---------------------------------------------------------------------------------------+

====================================================================================================
Training dataloader files: ['data/fineweb10B/fineweb_train_000001.bin', 'data/fineweb10B/fineweb_train_000002.bin', 'data/fineweb10B/fineweb_train_000003.bin', 'data/fineweb10B/fineweb_train_000004.bin', 'data/fineweb10B/fineweb_train_000005.bin', 'data/fineweb10B/fineweb_train_000006.bin', 'data/fineweb10B/fineweb_train_000007.bin', 'data/fineweb10B/fineweb_train_000008.bin', 'data/fineweb10B/fineweb_train_000009.bin']
Validation dataloader files: ['data/fineweb10B/fineweb_val_000000.bin']
====================================================================================================
step:0/1375 val_loss:10.8258 train_time:0ms step_avg:nanms
step:1/1375 train_time:27484ms step_avg:nanms
step:2/1375 train_time:27554ms step_avg:nanms
step:3/1375 train_time:27736ms step_avg:nanms
step:4/1375 train_time:27869ms step_avg:nanms
step:5/1375 train_time:28003ms step_avg:nanms
step:6/1375 train_time:28136ms step_avg:nanms
step:7/1375 train_time:28268ms step_avg:nanms
step:8/1375 train_time:28400ms step_avg:nanms
step:9/1375 train_time:28534ms step_avg:nanms
step:10/1375 train_time:28673ms step_avg:nanms
step:11/1375 train_time:139ms step_avg:nanms
step:12/1375 train_time:274ms step_avg:nanms
step:13/1375 train_time:408ms step_avg:135.84ms
step:14/1375 train_time:542ms step_avg:135.42ms
step:15/1375 train_time:675ms step_avg:135.05ms
step:16/1375 train_time:810ms step_avg:134.98ms
step:17/1375 train_time:945ms step_avg:135.04ms
step:18/1375 train_time:1084ms step_avg:135.47ms
step:19/1375 train_time:1221ms step_avg:135.61ms
step:20/1375 train_time:1355ms step_avg:135.51ms
step:21/1375 train_time:1489ms step_avg:135.36ms
step:22/1375 train_time:1623ms step_avg:135.26ms
step:23/1375 train_time:1759ms step_avg:135.34ms
step:24/1375 train_time:1892ms step_avg:135.13ms
step:25/1375 train_time:2026ms step_avg:135.09ms
step:26/1375 train_time:2163ms step_avg:135.18ms
step:27/1375 train_time:2299ms step_avg:135.23ms
step:28/1375 train_time:2435ms step_avg:135.27ms
step:29/1375 train_time:2570ms step_avg:135.27ms
step:30/1375 train_time:2704ms step_avg:135.22ms
step:31/1375 train_time:2840ms step_avg:135.21ms
step:32/1375 train_time:2973ms step_avg:135.15ms
step:33/1375 train_time:3108ms step_avg:135.14ms
step:34/1375 train_time:3244ms step_avg:135.17ms
step:35/1375 train_time:3381ms step_avg:135.22ms
step:36/1375 train_time:3516ms step_avg:135.23ms
step:37/1375 train_time:3651ms step_avg:135.21ms
step:38/1375 train_time:3786ms step_avg:135.20ms
step:39/1375 train_time:3922ms step_avg:135.24ms
step:40/1375 train_time:4057ms step_avg:135.23ms
step:41/1375 train_time:4192ms step_avg:135.22ms
step:42/1375 train_time:4325ms step_avg:135.17ms
step:43/1375 train_time:4461ms step_avg:135.19ms
step:44/1375 train_time:4597ms step_avg:135.21ms
step:45/1375 train_time:4731ms step_avg:135.18ms
step:46/1375 train_time:4867ms step_avg:135.18ms
step:47/1375 train_time:5002ms step_avg:135.20ms
step:48/1375 train_time:5138ms step_avg:135.21ms
step:49/1375 train_time:5272ms step_avg:135.18ms
step:50/1375 train_time:5407ms step_avg:135.18ms
step:51/1375 train_time:5543ms step_avg:135.19ms
step:52/1375 train_time:5678ms step_avg:135.18ms
step:53/1375 train_time:5815ms step_avg:135.23ms
step:54/1375 train_time:5948ms step_avg:135.19ms
step:55/1375 train_time:6084ms step_avg:135.21ms
step:56/1375 train_time:6221ms step_avg:135.24ms
step:57/1375 train_time:6356ms step_avg:135.24ms
step:58/1375 train_time:6491ms step_avg:135.22ms
step:59/1375 train_time:6628ms step_avg:135.26ms
step:60/1375 train_time:6765ms step_avg:135.29ms
step:61/1375 train_time:6899ms step_avg:135.27ms
step:62/1375 train_time:7036ms step_avg:135.31ms
step:63/1375 train_time:7171ms step_avg:135.30ms
step:64/1375 train_time:7307ms step_avg:135.31ms
step:65/1375 train_time:7441ms step_avg:135.29ms
step:66/1375 train_time:7578ms step_avg:135.31ms
step:67/1375 train_time:7713ms step_avg:135.32ms
step:68/1375 train_time:7847ms step_avg:135.30ms
step:69/1375 train_time:7983ms step_avg:135.30ms
step:70/1375 train_time:8119ms step_avg:135.32ms
step:71/1375 train_time:8254ms step_avg:135.31ms
step:72/1375 train_time:8388ms step_avg:135.29ms
step:73/1375 train_time:8523ms step_avg:135.29ms
step:74/1375 train_time:8659ms step_avg:135.30ms
step:75/1375 train_time:8794ms step_avg:135.29ms
step:76/1375 train_time:8929ms step_avg:135.28ms
step:77/1375 train_time:9065ms step_avg:135.31ms
step:78/1375 train_time:9201ms step_avg:135.31ms
step:79/1375 train_time:9338ms step_avg:135.34ms
step:80/1375 train_time:9473ms step_avg:135.33ms
step:81/1375 train_time:9608ms step_avg:135.32ms
step:82/1375 train_time:9743ms step_avg:135.32ms
step:83/1375 train_time:9878ms step_avg:135.32ms
step:84/1375 train_time:10014ms step_avg:135.32ms
step:85/1375 train_time:10149ms step_avg:135.32ms
step:86/1375 train_time:10284ms step_avg:135.31ms
step:87/1375 train_time:10420ms step_avg:135.32ms
step:88/1375 train_time:10555ms step_avg:135.32ms
step:89/1375 train_time:10691ms step_avg:135.32ms
step:90/1375 train_time:10826ms step_avg:135.32ms
step:91/1375 train_time:10962ms step_avg:135.34ms
step:92/1375 train_time:11099ms step_avg:135.35ms
step:93/1375 train_time:11234ms step_avg:135.34ms
step:94/1375 train_time:11369ms step_avg:135.34ms
step:95/1375 train_time:11504ms step_avg:135.34ms
step:96/1375 train_time:11640ms step_avg:135.35ms
step:97/1375 train_time:11775ms step_avg:135.35ms
step:98/1375 train_time:11911ms step_avg:135.36ms
step:99/1375 train_time:12046ms step_avg:135.35ms
step:100/1375 train_time:12182ms step_avg:135.36ms
step:101/1375 train_time:12318ms step_avg:135.36ms
step:102/1375 train_time:12453ms step_avg:135.36ms
step:103/1375 train_time:12589ms step_avg:135.37ms
step:104/1375 train_time:12727ms step_avg:135.40ms
step:105/1375 train_time:12868ms step_avg:135.45ms
step:106/1375 train_time:13007ms step_avg:135.49ms
step:107/1375 train_time:13147ms step_avg:135.54ms
step:108/1375 train_time:13286ms step_avg:135.57ms
step:109/1375 train_time:13426ms step_avg:135.62ms
step:110/1375 train_time:13563ms step_avg:135.63ms
step:111/1375 train_time:13701ms step_avg:135.66ms
step:112/1375 train_time:13840ms step_avg:135.69ms
step:113/1375 train_time:13978ms step_avg:135.71ms
step:114/1375 train_time:14117ms step_avg:135.74ms
step:115/1375 train_time:14257ms step_avg:135.78ms
step:116/1375 train_time:14395ms step_avg:135.80ms
step:117/1375 train_time:14533ms step_avg:135.82ms
step:118/1375 train_time:14671ms step_avg:135.84ms
step:119/1375 train_time:14811ms step_avg:135.88ms
step:120/1375 train_time:14948ms step_avg:135.89ms
step:121/1375 train_time:15087ms step_avg:135.92ms
step:122/1375 train_time:15226ms step_avg:135.95ms
step:123/1375 train_time:15365ms step_avg:135.98ms
step:124/1375 train_time:15503ms step_avg:135.99ms
step:125/1375 train_time:15642ms step_avg:136.02ms
step:125/1375 val_loss:4.3783 train_time:15710ms step_avg:136.61ms
step:126/1375 train_time:15783ms step_avg:136.06ms
step:127/1375 train_time:15927ms step_avg:136.13ms
step:128/1375 train_time:16068ms step_avg:136.17ms
step:129/1375 train_time:16206ms step_avg:136.18ms
step:130/1375 train_time:16344ms step_avg:136.20ms
step:131/1375 train_time:16482ms step_avg:136.22ms
step:132/1375 train_time:16620ms step_avg:136.23ms
step:133/1375 train_time:16760ms step_avg:136.26ms
step:134/1375 train_time:16901ms step_avg:136.29ms
step:135/1375 train_time:17040ms step_avg:136.32ms
step:136/1375 train_time:17179ms step_avg:136.34ms
step:137/1375 train_time:17317ms step_avg:136.35ms
step:138/1375 train_time:17456ms step_avg:136.37ms
step:139/1375 train_time:17593ms step_avg:136.38ms
step:140/1375 train_time:17731ms step_avg:136.39ms
step:141/1375 train_time:17871ms step_avg:136.42ms
step:142/1375 train_time:18010ms step_avg:136.44ms
step:143/1375 train_time:18149ms step_avg:136.46ms
step:144/1375 train_time:18288ms step_avg:136.48ms
step:145/1375 train_time:18427ms step_avg:136.50ms
step:146/1375 train_time:18566ms step_avg:136.52ms
step:147/1375 train_time:18706ms step_avg:136.54ms
step:148/1375 train_time:18844ms step_avg:136.55ms
step:149/1375 train_time:18985ms step_avg:136.58ms
step:150/1375 train_time:19125ms step_avg:136.61ms
step:151/1375 train_time:19265ms step_avg:136.63ms
step:152/1375 train_time:19405ms step_avg:136.66ms
step:153/1375 train_time:19544ms step_avg:136.67ms
step:154/1375 train_time:19684ms step_avg:136.69ms
step:155/1375 train_time:19822ms step_avg:136.70ms
step:156/1375 train_time:19963ms step_avg:136.73ms
step:157/1375 train_time:20102ms step_avg:136.75ms
step:158/1375 train_time:20241ms step_avg:136.76ms
step:159/1375 train_time:20380ms step_avg:136.78ms
step:160/1375 train_time:20518ms step_avg:136.79ms
step:161/1375 train_time:20658ms step_avg:136.81ms
step:162/1375 train_time:20797ms step_avg:136.82ms
step:163/1375 train_time:20935ms step_avg:136.83ms
step:164/1375 train_time:21076ms step_avg:136.85ms
step:165/1375 train_time:21214ms step_avg:136.87ms
step:166/1375 train_time:21353ms step_avg:136.88ms
step:167/1375 train_time:21492ms step_avg:136.89ms
step:168/1375 train_time:21633ms step_avg:136.91ms
step:169/1375 train_time:21772ms step_avg:136.93ms
step:170/1375 train_time:21911ms step_avg:136.95ms
step:171/1375 train_time:22051ms step_avg:136.96ms
step:172/1375 train_time:22189ms step_avg:136.97ms
step:173/1375 train_time:22328ms step_avg:136.98ms
step:174/1375 train_time:22467ms step_avg:136.99ms
step:175/1375 train_time:22606ms step_avg:137.01ms
step:176/1375 train_time:22745ms step_avg:137.02ms
step:177/1375 train_time:22886ms step_avg:137.04ms
step:178/1375 train_time:23024ms step_avg:137.05ms
step:179/1375 train_time:23165ms step_avg:137.07ms
step:180/1375 train_time:23304ms step_avg:137.08ms
step:181/1375 train_time:23444ms step_avg:137.10ms
step:182/1375 train_time:23582ms step_avg:137.10ms
step:183/1375 train_time:23722ms step_avg:137.12ms
step:184/1375 train_time:23861ms step_avg:137.13ms
step:185/1375 train_time:24000ms step_avg:137.14ms
step:186/1375 train_time:24139ms step_avg:137.15ms
step:187/1375 train_time:24278ms step_avg:137.17ms
step:188/1375 train_time:24416ms step_avg:137.17ms
step:189/1375 train_time:24557ms step_avg:137.19ms
step:190/1375 train_time:24695ms step_avg:137.19ms
step:191/1375 train_time:24874ms step_avg:137.43ms
step:192/1375 train_time:25011ms step_avg:137.42ms
step:193/1375 train_time:25148ms step_avg:137.42ms
step:194/1375 train_time:25286ms step_avg:137.42ms
step:195/1375 train_time:25425ms step_avg:137.43ms
step:196/1375 train_time:25563ms step_avg:137.44ms
step:197/1375 train_time:25703ms step_avg:137.45ms
step:198/1375 train_time:25847ms step_avg:137.48ms
step:199/1375 train_time:25987ms step_avg:137.50ms
step:200/1375 train_time:26126ms step_avg:137.51ms
step:201/1375 train_time:26264ms step_avg:137.51ms
step:202/1375 train_time:26403ms step_avg:137.51ms
step:203/1375 train_time:26542ms step_avg:137.52ms
step:204/1375 train_time:26680ms step_avg:137.53ms
step:205/1375 train_time:26820ms step_avg:137.54ms
step:206/1375 train_time:26963ms step_avg:137.56ms
step:207/1375 train_time:27105ms step_avg:137.59ms
step:208/1375 train_time:27245ms step_avg:137.60ms
step:209/1375 train_time:27389ms step_avg:137.63ms
step:210/1375 train_time:27530ms step_avg:137.65ms
step:211/1375 train_time:27671ms step_avg:137.67ms
step:212/1375 train_time:27812ms step_avg:137.68ms
step:213/1375 train_time:27957ms step_avg:137.72ms
step:214/1375 train_time:28101ms step_avg:137.75ms
step:215/1375 train_time:28241ms step_avg:137.76ms
step:216/1375 train_time:28381ms step_avg:137.77ms
step:217/1375 train_time:28522ms step_avg:137.79ms
step:218/1375 train_time:28664ms step_avg:137.81ms
step:219/1375 train_time:28808ms step_avg:137.84ms
step:220/1375 train_time:28950ms step_avg:137.86ms
step:221/1375 train_time:29092ms step_avg:137.88ms
step:222/1375 train_time:29234ms step_avg:137.90ms
step:223/1375 train_time:29376ms step_avg:137.92ms
step:224/1375 train_time:29516ms step_avg:137.93ms
step:225/1375 train_time:29658ms step_avg:137.95ms
step:226/1375 train_time:29800ms step_avg:137.96ms
step:227/1375 train_time:29941ms step_avg:137.98ms
step:228/1375 train_time:30083ms step_avg:138.00ms
step:229/1375 train_time:30228ms step_avg:138.03ms
step:230/1375 train_time:30369ms step_avg:138.04ms
step:231/1375 train_time:30511ms step_avg:138.06ms
step:232/1375 train_time:30654ms step_avg:138.08ms
step:233/1375 train_time:30794ms step_avg:138.09ms
step:234/1375 train_time:30937ms step_avg:138.11ms
step:235/1375 train_time:31079ms step_avg:138.13ms
step:236/1375 train_time:31220ms step_avg:138.14ms
step:237/1375 train_time:31363ms step_avg:138.16ms
step:238/1375 train_time:31504ms step_avg:138.17ms
step:239/1375 train_time:31645ms step_avg:138.19ms
step:240/1375 train_time:31787ms step_avg:138.20ms
step:241/1375 train_time:31928ms step_avg:138.22ms
step:242/1375 train_time:32069ms step_avg:138.23ms
step:243/1375 train_time:32212ms step_avg:138.25ms
step:244/1375 train_time:32355ms step_avg:138.27ms
step:245/1375 train_time:32499ms step_avg:138.29ms
step:246/1375 train_time:32639ms step_avg:138.30ms
step:247/1375 train_time:32780ms step_avg:138.31ms
step:248/1375 train_time:32922ms step_avg:138.33ms
step:249/1375 train_time:33064ms step_avg:138.35ms
step:250/1375 train_time:33206ms step_avg:138.36ms
step:250/1375 val_loss:3.9623 train_time:33275ms step_avg:138.65ms
step:251/1375 train_time:33351ms step_avg:138.38ms
step:252/1375 train_time:33494ms step_avg:138.40ms
step:253/1375 train_time:33638ms step_avg:138.43ms
step:254/1375 train_time:33779ms step_avg:138.44ms
step:255/1375 train_time:33919ms step_avg:138.45ms
step:256/1375 train_time:34060ms step_avg:138.45ms
step:257/1375 train_time:34203ms step_avg:138.47ms
step:258/1375 train_time:34345ms step_avg:138.49ms
step:259/1375 train_time:34489ms step_avg:138.51ms
step:260/1375 train_time:34632ms step_avg:138.53ms
step:261/1375 train_time:34773ms step_avg:138.54ms
step:262/1375 train_time:34914ms step_avg:138.55ms
step:263/1375 train_time:35055ms step_avg:138.56ms
step:264/1375 train_time:35196ms step_avg:138.57ms
step:265/1375 train_time:35339ms step_avg:138.59ms
step:266/1375 train_time:35483ms step_avg:138.61ms
step:267/1375 train_time:35626ms step_avg:138.62ms
step:268/1375 train_time:35767ms step_avg:138.63ms
step:269/1375 train_time:35910ms step_avg:138.65ms
step:270/1375 train_time:36051ms step_avg:138.66ms
step:271/1375 train_time:36192ms step_avg:138.67ms
step:272/1375 train_time:36335ms step_avg:138.68ms
step:273/1375 train_time:36478ms step_avg:138.70ms
step:274/1375 train_time:36622ms step_avg:138.72ms
step:275/1375 train_time:36764ms step_avg:138.73ms
step:276/1375 train_time:36905ms step_avg:138.74ms
step:277/1375 train_time:37047ms step_avg:138.75ms
step:278/1375 train_time:37188ms step_avg:138.76ms
step:279/1375 train_time:37331ms step_avg:138.78ms
step:280/1375 train_time:37473ms step_avg:138.79ms
step:281/1375 train_time:37615ms step_avg:138.80ms
step:282/1375 train_time:37757ms step_avg:138.81ms
step:283/1375 train_time:37899ms step_avg:138.82ms
step:284/1375 train_time:38041ms step_avg:138.84ms
step:285/1375 train_time:38183ms step_avg:138.85ms
step:286/1375 train_time:38323ms step_avg:138.85ms
step:287/1375 train_time:38466ms step_avg:138.87ms
step:288/1375 train_time:38608ms step_avg:138.88ms
step:289/1375 train_time:38750ms step_avg:138.89ms
step:290/1375 train_time:38892ms step_avg:138.90ms
step:291/1375 train_time:39034ms step_avg:138.91ms
step:292/1375 train_time:39178ms step_avg:138.93ms
step:293/1375 train_time:39319ms step_avg:138.94ms
step:294/1375 train_time:39462ms step_avg:138.95ms
step:295/1375 train_time:39602ms step_avg:138.96ms
step:296/1375 train_time:39743ms step_avg:138.96ms
step:297/1375 train_time:39887ms step_avg:138.98ms
step:298/1375 train_time:40029ms step_avg:138.99ms
step:299/1375 train_time:40170ms step_avg:139.00ms
step:300/1375 train_time:40311ms step_avg:139.00ms
step:301/1375 train_time:40454ms step_avg:139.02ms
step:302/1375 train_time:40596ms step_avg:139.03ms
step:303/1375 train_time:40738ms step_avg:139.04ms
step:304/1375 train_time:40881ms step_avg:139.05ms
step:305/1375 train_time:41023ms step_avg:139.06ms
step:306/1375 train_time:41164ms step_avg:139.07ms
step:307/1375 train_time:41306ms step_avg:139.08ms
step:308/1375 train_time:41449ms step_avg:139.09ms
step:309/1375 train_time:41593ms step_avg:139.11ms
step:310/1375 train_time:41736ms step_avg:139.12ms
step:311/1375 train_time:41882ms step_avg:139.14ms
step:312/1375 train_time:42025ms step_avg:139.16ms
step:313/1375 train_time:42170ms step_avg:139.17ms
step:314/1375 train_time:42314ms step_avg:139.19ms
step:315/1375 train_time:42459ms step_avg:139.21ms
step:316/1375 train_time:42602ms step_avg:139.22ms
step:317/1375 train_time:42746ms step_avg:139.24ms
step:318/1375 train_time:42890ms step_avg:139.25ms
step:319/1375 train_time:43034ms step_avg:139.27ms
step:320/1375 train_time:43179ms step_avg:139.29ms
step:321/1375 train_time:43323ms step_avg:139.30ms
step:322/1375 train_time:43466ms step_avg:139.31ms
step:323/1375 train_time:43610ms step_avg:139.33ms
step:324/1375 train_time:43756ms step_avg:139.35ms
step:325/1375 train_time:43900ms step_avg:139.37ms
step:326/1375 train_time:44044ms step_avg:139.38ms
step:327/1375 train_time:44188ms step_avg:139.40ms
step:328/1375 train_time:44333ms step_avg:139.41ms
step:329/1375 train_time:44478ms step_avg:139.43ms
step:330/1375 train_time:44620ms step_avg:139.44ms
step:331/1375 train_time:44764ms step_avg:139.45ms
step:332/1375 train_time:44908ms step_avg:139.46ms
step:333/1375 train_time:45052ms step_avg:139.48ms
step:334/1375 train_time:45196ms step_avg:139.49ms
step:335/1375 train_time:45339ms step_avg:139.50ms
step:336/1375 train_time:45483ms step_avg:139.52ms
step:337/1375 train_time:45625ms step_avg:139.53ms
step:338/1375 train_time:45769ms step_avg:139.54ms
step:339/1375 train_time:45915ms step_avg:139.56ms
step:340/1375 train_time:46059ms step_avg:139.57ms
step:341/1375 train_time:46202ms step_avg:139.58ms
step:342/1375 train_time:46345ms step_avg:139.59ms
step:343/1375 train_time:46488ms step_avg:139.60ms
step:344/1375 train_time:46632ms step_avg:139.62ms
step:345/1375 train_time:46777ms step_avg:139.63ms
step:346/1375 train_time:46921ms step_avg:139.65ms
step:347/1375 train_time:47065ms step_avg:139.66ms
step:348/1375 train_time:47208ms step_avg:139.67ms
step:349/1375 train_time:47354ms step_avg:139.69ms
step:350/1375 train_time:47497ms step_avg:139.70ms
step:351/1375 train_time:47640ms step_avg:139.71ms
step:352/1375 train_time:47784ms step_avg:139.72ms
step:353/1375 train_time:47927ms step_avg:139.73ms
step:354/1375 train_time:48072ms step_avg:139.74ms
step:355/1375 train_time:48216ms step_avg:139.76ms
step:356/1375 train_time:48360ms step_avg:139.77ms
step:357/1375 train_time:48504ms step_avg:139.78ms
step:358/1375 train_time:48646ms step_avg:139.79ms
step:359/1375 train_time:48790ms step_avg:139.80ms
step:360/1375 train_time:48936ms step_avg:139.82ms
step:361/1375 train_time:49080ms step_avg:139.83ms
step:362/1375 train_time:49224ms step_avg:139.84ms
step:363/1375 train_time:49366ms step_avg:139.85ms
step:364/1375 train_time:49510ms step_avg:139.86ms
step:365/1375 train_time:49656ms step_avg:139.88ms
step:366/1375 train_time:49799ms step_avg:139.88ms
step:367/1375 train_time:49942ms step_avg:139.89ms
step:368/1375 train_time:50086ms step_avg:139.90ms
step:369/1375 train_time:50230ms step_avg:139.92ms
step:370/1375 train_time:50375ms step_avg:139.93ms
step:371/1375 train_time:50519ms step_avg:139.94ms
step:372/1375 train_time:50664ms step_avg:139.96ms
step:373/1375 train_time:50807ms step_avg:139.96ms
step:374/1375 train_time:50952ms step_avg:139.98ms
step:375/1375 train_time:51095ms step_avg:139.99ms
step:375/1375 val_loss:3.7746 train_time:51165ms step_avg:140.18ms
step:376/1375 train_time:51239ms step_avg:140.00ms
step:377/1375 train_time:51386ms step_avg:140.02ms
step:378/1375 train_time:51531ms step_avg:140.03ms
step:379/1375 train_time:51673ms step_avg:140.03ms
step:380/1375 train_time:51815ms step_avg:140.04ms
step:381/1375 train_time:51998ms step_avg:140.16ms
step:382/1375 train_time:52145ms step_avg:140.18ms
step:383/1375 train_time:52288ms step_avg:140.18ms
step:384/1375 train_time:52430ms step_avg:140.19ms
step:385/1375 train_time:52573ms step_avg:140.19ms
step:386/1375 train_time:52716ms step_avg:140.20ms
step:387/1375 train_time:52861ms step_avg:140.21ms
step:388/1375 train_time:53010ms step_avg:140.24ms
step:389/1375 train_time:53154ms step_avg:140.25ms
step:390/1375 train_time:53296ms step_avg:140.25ms
step:391/1375 train_time:53440ms step_avg:140.26ms
step:392/1375 train_time:53584ms step_avg:140.27ms
step:393/1375 train_time:53727ms step_avg:140.28ms
step:394/1375 train_time:53871ms step_avg:140.29ms
step:395/1375 train_time:54017ms step_avg:140.30ms
step:396/1375 train_time:54162ms step_avg:140.32ms
step:397/1375 train_time:54306ms step_avg:140.32ms
step:398/1375 train_time:54448ms step_avg:140.33ms
step:399/1375 train_time:54592ms step_avg:140.34ms
step:400/1375 train_time:54737ms step_avg:140.35ms
step:401/1375 train_time:54880ms step_avg:140.36ms
step:402/1375 train_time:55026ms step_avg:140.37ms
step:403/1375 train_time:55170ms step_avg:140.38ms
step:404/1375 train_time:55314ms step_avg:140.39ms
step:405/1375 train_time:55457ms step_avg:140.40ms
step:406/1375 train_time:55601ms step_avg:140.41ms
step:407/1375 train_time:55744ms step_avg:140.41ms
step:408/1375 train_time:55889ms step_avg:140.42ms
step:409/1375 train_time:56033ms step_avg:140.43ms
step:410/1375 train_time:56179ms step_avg:140.45ms
step:411/1375 train_time:56327ms step_avg:140.47ms
step:412/1375 train_time:56472ms step_avg:140.48ms
step:413/1375 train_time:56617ms step_avg:140.49ms
step:414/1375 train_time:56764ms step_avg:140.50ms
step:415/1375 train_time:56908ms step_avg:140.51ms
step:416/1375 train_time:57053ms step_avg:140.52ms
step:417/1375 train_time:57200ms step_avg:140.54ms
step:418/1375 train_time:57347ms step_avg:140.56ms
step:419/1375 train_time:57493ms step_avg:140.57ms
step:420/1375 train_time:57638ms step_avg:140.58ms
step:421/1375 train_time:57784ms step_avg:140.59ms
step:422/1375 train_time:57930ms step_avg:140.61ms
step:423/1375 train_time:58073ms step_avg:140.61ms
step:424/1375 train_time:58219ms step_avg:140.62ms
step:425/1375 train_time:58367ms step_avg:140.64ms
step:426/1375 train_time:58514ms step_avg:140.66ms
step:427/1375 train_time:58660ms step_avg:140.67ms
step:428/1375 train_time:58806ms step_avg:140.68ms
step:429/1375 train_time:58951ms step_avg:140.70ms
step:430/1375 train_time:59098ms step_avg:140.71ms
step:431/1375 train_time:59244ms step_avg:140.72ms
step:432/1375 train_time:59390ms step_avg:140.74ms
step:433/1375 train_time:59535ms step_avg:140.75ms
step:434/1375 train_time:59680ms step_avg:140.76ms
step:435/1375 train_time:59827ms step_avg:140.77ms
step:436/1375 train_time:59972ms step_avg:140.78ms
step:437/1375 train_time:60116ms step_avg:140.79ms
step:438/1375 train_time:60263ms step_avg:140.80ms
step:439/1375 train_time:60409ms step_avg:140.81ms
step:440/1375 train_time:60552ms step_avg:140.82ms
step:441/1375 train_time:60699ms step_avg:140.83ms
step:442/1375 train_time:60846ms step_avg:140.85ms
step:443/1375 train_time:60992ms step_avg:140.86ms
step:444/1375 train_time:61136ms step_avg:140.87ms
step:445/1375 train_time:61283ms step_avg:140.88ms
step:446/1375 train_time:61429ms step_avg:140.89ms
step:447/1375 train_time:61574ms step_avg:140.90ms
step:448/1375 train_time:61720ms step_avg:140.91ms
step:449/1375 train_time:61866ms step_avg:140.92ms
step:450/1375 train_time:62011ms step_avg:140.94ms
step:451/1375 train_time:62159ms step_avg:140.95ms
step:452/1375 train_time:62305ms step_avg:140.96ms
step:453/1375 train_time:62450ms step_avg:140.97ms
step:454/1375 train_time:62595ms step_avg:140.98ms
step:455/1375 train_time:62742ms step_avg:140.99ms
step:456/1375 train_time:62888ms step_avg:141.01ms
step:457/1375 train_time:63034ms step_avg:141.02ms
step:458/1375 train_time:63180ms step_avg:141.03ms
step:459/1375 train_time:63328ms step_avg:141.04ms
step:460/1375 train_time:63474ms step_avg:141.05ms
step:461/1375 train_time:63619ms step_avg:141.06ms
step:462/1375 train_time:63766ms step_avg:141.08ms
step:463/1375 train_time:63911ms step_avg:141.08ms
step:464/1375 train_time:64055ms step_avg:141.09ms
step:465/1375 train_time:64201ms step_avg:141.10ms
step:466/1375 train_time:64347ms step_avg:141.11ms
step:467/1375 train_time:64494ms step_avg:141.12ms
step:468/1375 train_time:64638ms step_avg:141.13ms
step:469/1375 train_time:64784ms step_avg:141.14ms
step:470/1375 train_time:64930ms step_avg:141.15ms
step:471/1375 train_time:65075ms step_avg:141.16ms
step:472/1375 train_time:65221ms step_avg:141.17ms
step:473/1375 train_time:65368ms step_avg:141.18ms
step:474/1375 train_time:65513ms step_avg:141.19ms
step:475/1375 train_time:65657ms step_avg:141.20ms
step:476/1375 train_time:65804ms step_avg:141.21ms
step:477/1375 train_time:65949ms step_avg:141.22ms
step:478/1375 train_time:66094ms step_avg:141.23ms
step:479/1375 train_time:66241ms step_avg:141.24ms
step:480/1375 train_time:66387ms step_avg:141.25ms
step:481/1375 train_time:66533ms step_avg:141.26ms
step:482/1375 train_time:66678ms step_avg:141.27ms
step:483/1375 train_time:66825ms step_avg:141.28ms
step:484/1375 train_time:66972ms step_avg:141.29ms
step:485/1375 train_time:67116ms step_avg:141.30ms
step:486/1375 train_time:67264ms step_avg:141.31ms
step:487/1375 train_time:67409ms step_avg:141.32ms
step:488/1375 train_time:67553ms step_avg:141.32ms
step:489/1375 train_time:67697ms step_avg:141.33ms
step:490/1375 train_time:67845ms step_avg:141.34ms
step:491/1375 train_time:67990ms step_avg:141.35ms
step:492/1375 train_time:68134ms step_avg:141.36ms
step:493/1375 train_time:68282ms step_avg:141.37ms
step:494/1375 train_time:68429ms step_avg:141.38ms
step:495/1375 train_time:68574ms step_avg:141.39ms
step:496/1375 train_time:68720ms step_avg:141.40ms
step:497/1375 train_time:68867ms step_avg:141.41ms
step:498/1375 train_time:69012ms step_avg:141.42ms
step:499/1375 train_time:69157ms step_avg:141.43ms
step:500/1375 train_time:69304ms step_avg:141.44ms
step:500/1375 val_loss:3.6563 train_time:69375ms step_avg:141.58ms
step:501/1375 train_time:69451ms step_avg:141.45ms
step:502/1375 train_time:69598ms step_avg:141.46ms
step:503/1375 train_time:69744ms step_avg:141.47ms
step:504/1375 train_time:69890ms step_avg:141.48ms
step:505/1375 train_time:70034ms step_avg:141.48ms
step:506/1375 train_time:70179ms step_avg:141.49ms
step:507/1375 train_time:70327ms step_avg:141.50ms
step:508/1375 train_time:70473ms step_avg:141.51ms
step:509/1375 train_time:70619ms step_avg:141.52ms
step:510/1375 train_time:70766ms step_avg:141.53ms
step:511/1375 train_time:70912ms step_avg:141.54ms
step:512/1375 train_time:71061ms step_avg:141.56ms
step:513/1375 train_time:71208ms step_avg:141.57ms
step:514/1375 train_time:71354ms step_avg:141.58ms
step:515/1375 train_time:71504ms step_avg:141.59ms
step:516/1375 train_time:71650ms step_avg:141.60ms
step:517/1375 train_time:71796ms step_avg:141.61ms
step:518/1375 train_time:71945ms step_avg:141.62ms
step:519/1375 train_time:72092ms step_avg:141.63ms
step:520/1375 train_time:72239ms step_avg:141.64ms
step:521/1375 train_time:72386ms step_avg:141.66ms
step:522/1375 train_time:72534ms step_avg:141.67ms
step:523/1375 train_time:72681ms step_avg:141.68ms
step:524/1375 train_time:72828ms step_avg:141.69ms
step:525/1375 train_time:72975ms step_avg:141.70ms
step:526/1375 train_time:73124ms step_avg:141.71ms
step:527/1375 train_time:73272ms step_avg:141.73ms
step:528/1375 train_time:73421ms step_avg:141.74ms
step:529/1375 train_time:73568ms step_avg:141.75ms
step:530/1375 train_time:73714ms step_avg:141.76ms
step:531/1375 train_time:73862ms step_avg:141.77ms
step:532/1375 train_time:74010ms step_avg:141.78ms
step:533/1375 train_time:74157ms step_avg:141.79ms
step:534/1375 train_time:74305ms step_avg:141.80ms
step:535/1375 train_time:74452ms step_avg:141.81ms
step:536/1375 train_time:74601ms step_avg:141.83ms
step:537/1375 train_time:74748ms step_avg:141.84ms
step:538/1375 train_time:74895ms step_avg:141.85ms
step:539/1375 train_time:75045ms step_avg:141.86ms
step:540/1375 train_time:75191ms step_avg:141.87ms
step:541/1375 train_time:75338ms step_avg:141.88ms
step:542/1375 train_time:75485ms step_avg:141.89ms
step:543/1375 train_time:75631ms step_avg:141.90ms
step:544/1375 train_time:75779ms step_avg:141.91ms
step:545/1375 train_time:75927ms step_avg:141.92ms
step:546/1375 train_time:76075ms step_avg:141.93ms
step:547/1375 train_time:76223ms step_avg:141.94ms
step:548/1375 train_time:76371ms step_avg:141.95ms
step:549/1375 train_time:76518ms step_avg:141.96ms
step:550/1375 train_time:76667ms step_avg:141.98ms
step:551/1375 train_time:76813ms step_avg:141.98ms
step:552/1375 train_time:76963ms step_avg:142.00ms
step:553/1375 train_time:77110ms step_avg:142.01ms
step:554/1375 train_time:77258ms step_avg:142.02ms
step:555/1375 train_time:77406ms step_avg:142.03ms
step:556/1375 train_time:77553ms step_avg:142.04ms
step:557/1375 train_time:77701ms step_avg:142.05ms
step:558/1375 train_time:77847ms step_avg:142.06ms
step:559/1375 train_time:77994ms step_avg:142.06ms
step:560/1375 train_time:78143ms step_avg:142.08ms
step:561/1375 train_time:78290ms step_avg:142.09ms
step:562/1375 train_time:78436ms step_avg:142.10ms
step:563/1375 train_time:78585ms step_avg:142.11ms
step:564/1375 train_time:78730ms step_avg:142.11ms
step:565/1375 train_time:78876ms step_avg:142.12ms
step:566/1375 train_time:79024ms step_avg:142.13ms
step:567/1375 train_time:79171ms step_avg:142.14ms
step:568/1375 train_time:79317ms step_avg:142.15ms
step:569/1375 train_time:79467ms step_avg:142.16ms
step:570/1375 train_time:79613ms step_avg:142.17ms
step:571/1375 train_time:79803ms step_avg:142.25ms
step:572/1375 train_time:79948ms step_avg:142.26ms
step:573/1375 train_time:80095ms step_avg:142.26ms
step:574/1375 train_time:80245ms step_avg:142.28ms
step:575/1375 train_time:80392ms step_avg:142.29ms
step:576/1375 train_time:80537ms step_avg:142.29ms
step:577/1375 train_time:80686ms step_avg:142.30ms
step:578/1375 train_time:80834ms step_avg:142.31ms
step:579/1375 train_time:80983ms step_avg:142.33ms
step:580/1375 train_time:81131ms step_avg:142.33ms
step:581/1375 train_time:81277ms step_avg:142.34ms
step:582/1375 train_time:81426ms step_avg:142.35ms
step:583/1375 train_time:81571ms step_avg:142.36ms
step:584/1375 train_time:81720ms step_avg:142.37ms
step:585/1375 train_time:81868ms step_avg:142.38ms
step:586/1375 train_time:82016ms step_avg:142.39ms
step:587/1375 train_time:82165ms step_avg:142.40ms
step:588/1375 train_time:82311ms step_avg:142.41ms
step:589/1375 train_time:82459ms step_avg:142.42ms
step:590/1375 train_time:82607ms step_avg:142.43ms
step:591/1375 train_time:82752ms step_avg:142.43ms
step:592/1375 train_time:82901ms step_avg:142.44ms
step:593/1375 train_time:83048ms step_avg:142.45ms
step:594/1375 train_time:83195ms step_avg:142.46ms
step:595/1375 train_time:83343ms step_avg:142.47ms
step:596/1375 train_time:83490ms step_avg:142.47ms
step:597/1375 train_time:83637ms step_avg:142.48ms
step:598/1375 train_time:83785ms step_avg:142.49ms
step:599/1375 train_time:83932ms step_avg:142.50ms
step:600/1375 train_time:84079ms step_avg:142.51ms
step:601/1375 train_time:84228ms step_avg:142.52ms
step:602/1375 train_time:84375ms step_avg:142.53ms
step:603/1375 train_time:84525ms step_avg:142.54ms
step:604/1375 train_time:84671ms step_avg:142.54ms
step:605/1375 train_time:84820ms step_avg:142.55ms
step:606/1375 train_time:84968ms step_avg:142.56ms
step:607/1375 train_time:85114ms step_avg:142.57ms
step:608/1375 train_time:85262ms step_avg:142.58ms
step:609/1375 train_time:85409ms step_avg:142.59ms
step:610/1375 train_time:85557ms step_avg:142.59ms
step:611/1375 train_time:85704ms step_avg:142.60ms
step:612/1375 train_time:85850ms step_avg:142.61ms
step:613/1375 train_time:85998ms step_avg:142.62ms
step:614/1375 train_time:86146ms step_avg:142.63ms
step:615/1375 train_time:86294ms step_avg:142.64ms
step:616/1375 train_time:86444ms step_avg:142.65ms
step:617/1375 train_time:86592ms step_avg:142.66ms
step:618/1375 train_time:86741ms step_avg:142.67ms
step:619/1375 train_time:86891ms step_avg:142.68ms
step:620/1375 train_time:87040ms step_avg:142.69ms
step:621/1375 train_time:87189ms step_avg:142.70ms
step:622/1375 train_time:87339ms step_avg:142.71ms
step:623/1375 train_time:87488ms step_avg:142.72ms
step:624/1375 train_time:87637ms step_avg:142.73ms
step:625/1375 train_time:87786ms step_avg:142.74ms
step:625/1375 val_loss:3.5740 train_time:87861ms step_avg:142.86ms
step:626/1375 train_time:87937ms step_avg:142.76ms
step:627/1375 train_time:88085ms step_avg:142.76ms
step:628/1375 train_time:88233ms step_avg:142.77ms
step:629/1375 train_time:88382ms step_avg:142.78ms
step:630/1375 train_time:88528ms step_avg:142.79ms
step:631/1375 train_time:88676ms step_avg:142.80ms
step:632/1375 train_time:88824ms step_avg:142.80ms
step:633/1375 train_time:88976ms step_avg:142.82ms
step:634/1375 train_time:89124ms step_avg:142.83ms
step:635/1375 train_time:89271ms step_avg:142.83ms
step:636/1375 train_time:89420ms step_avg:142.84ms
step:637/1375 train_time:89568ms step_avg:142.85ms
step:638/1375 train_time:89718ms step_avg:142.86ms
step:639/1375 train_time:89865ms step_avg:142.87ms
step:640/1375 train_time:90017ms step_avg:142.88ms
step:641/1375 train_time:90165ms step_avg:142.89ms
step:642/1375 train_time:90315ms step_avg:142.90ms
step:643/1375 train_time:90464ms step_avg:142.91ms
step:644/1375 train_time:90612ms step_avg:142.92ms
step:645/1375 train_time:90762ms step_avg:142.93ms
step:646/1375 train_time:90910ms step_avg:142.94ms
step:647/1375 train_time:91061ms step_avg:142.95ms
step:648/1375 train_time:91210ms step_avg:142.96ms
step:649/1375 train_time:91361ms step_avg:142.98ms
step:650/1375 train_time:91510ms step_avg:142.98ms
step:651/1375 train_time:91660ms step_avg:142.99ms
step:652/1375 train_time:91807ms step_avg:143.00ms
step:653/1375 train_time:91957ms step_avg:143.01ms
step:654/1375 train_time:92107ms step_avg:143.02ms
step:655/1375 train_time:92258ms step_avg:143.04ms
step:656/1375 train_time:92405ms step_avg:143.04ms
step:657/1375 train_time:92556ms step_avg:143.05ms
step:658/1375 train_time:92705ms step_avg:143.06ms
step:659/1375 train_time:92852ms step_avg:143.07ms
step:660/1375 train_time:93002ms step_avg:143.08ms
step:661/1375 train_time:93150ms step_avg:143.09ms
step:662/1375 train_time:93302ms step_avg:143.10ms
step:663/1375 train_time:93449ms step_avg:143.11ms
step:664/1375 train_time:93600ms step_avg:143.12ms
step:665/1375 train_time:93748ms step_avg:143.13ms
step:666/1375 train_time:93897ms step_avg:143.14ms
step:667/1375 train_time:94045ms step_avg:143.14ms
step:668/1375 train_time:94197ms step_avg:143.16ms
step:669/1375 train_time:94346ms step_avg:143.17ms
step:670/1375 train_time:94497ms step_avg:143.18ms
step:671/1375 train_time:94646ms step_avg:143.19ms
step:672/1375 train_time:94795ms step_avg:143.20ms
step:673/1375 train_time:94944ms step_avg:143.20ms
step:674/1375 train_time:95092ms step_avg:143.21ms
step:675/1375 train_time:95242ms step_avg:143.22ms
step:676/1375 train_time:95393ms step_avg:143.23ms
step:677/1375 train_time:95543ms step_avg:143.24ms
step:678/1375 train_time:95691ms step_avg:143.25ms
step:679/1375 train_time:95843ms step_avg:143.26ms
step:680/1375 train_time:95991ms step_avg:143.27ms
step:681/1375 train_time:96141ms step_avg:143.28ms
step:682/1375 train_time:96289ms step_avg:143.29ms
step:683/1375 train_time:96440ms step_avg:143.30ms
step:684/1375 train_time:96587ms step_avg:143.30ms
step:685/1375 train_time:96738ms step_avg:143.32ms
step:686/1375 train_time:96885ms step_avg:143.32ms
step:687/1375 train_time:97033ms step_avg:143.33ms
step:688/1375 train_time:97184ms step_avg:143.34ms
step:689/1375 train_time:97333ms step_avg:143.35ms
step:690/1375 train_time:97483ms step_avg:143.36ms
step:691/1375 train_time:97632ms step_avg:143.37ms
step:692/1375 train_time:97784ms step_avg:143.38ms
step:693/1375 train_time:97932ms step_avg:143.39ms
step:694/1375 train_time:98082ms step_avg:143.39ms
step:695/1375 train_time:98230ms step_avg:143.40ms
step:696/1375 train_time:98381ms step_avg:143.41ms
step:697/1375 train_time:98528ms step_avg:143.42ms
step:698/1375 train_time:98677ms step_avg:143.43ms
step:699/1375 train_time:98825ms step_avg:143.43ms
step:700/1375 train_time:98975ms step_avg:143.44ms
step:701/1375 train_time:99123ms step_avg:143.45ms
step:702/1375 train_time:99273ms step_avg:143.46ms
step:703/1375 train_time:99422ms step_avg:143.47ms
step:704/1375 train_time:99570ms step_avg:143.47ms
step:705/1375 train_time:99722ms step_avg:143.48ms
step:706/1375 train_time:99872ms step_avg:143.49ms
step:707/1375 train_time:100021ms step_avg:143.50ms
step:708/1375 train_time:100169ms step_avg:143.51ms
step:709/1375 train_time:100320ms step_avg:143.52ms
step:710/1375 train_time:100469ms step_avg:143.53ms
step:711/1375 train_time:100622ms step_avg:143.54ms
step:712/1375 train_time:100772ms step_avg:143.55ms
step:713/1375 train_time:100922ms step_avg:143.56ms
step:714/1375 train_time:101071ms step_avg:143.57ms
step:715/1375 train_time:101222ms step_avg:143.58ms
step:716/1375 train_time:101373ms step_avg:143.59ms
step:717/1375 train_time:101523ms step_avg:143.60ms
step:718/1375 train_time:101671ms step_avg:143.60ms
step:719/1375 train_time:101821ms step_avg:143.61ms
step:720/1375 train_time:101971ms step_avg:143.62ms
step:721/1375 train_time:102122ms step_avg:143.63ms
step:722/1375 train_time:102272ms step_avg:143.64ms
step:723/1375 train_time:102422ms step_avg:143.65ms
step:724/1375 train_time:102574ms step_avg:143.66ms
step:725/1375 train_time:102723ms step_avg:143.67ms
step:726/1375 train_time:102874ms step_avg:143.68ms
step:727/1375 train_time:103026ms step_avg:143.69ms
step:728/1375 train_time:103177ms step_avg:143.70ms
step:729/1375 train_time:103324ms step_avg:143.71ms
step:730/1375 train_time:103478ms step_avg:143.72ms
step:731/1375 train_time:103627ms step_avg:143.73ms
step:732/1375 train_time:103777ms step_avg:143.74ms
step:733/1375 train_time:103926ms step_avg:143.74ms
step:734/1375 train_time:104079ms step_avg:143.76ms
step:735/1375 train_time:104229ms step_avg:143.76ms
step:736/1375 train_time:104382ms step_avg:143.78ms
step:737/1375 train_time:104531ms step_avg:143.78ms
step:738/1375 train_time:104682ms step_avg:143.79ms
step:739/1375 train_time:104833ms step_avg:143.80ms
step:740/1375 train_time:104985ms step_avg:143.81ms
step:741/1375 train_time:105135ms step_avg:143.82ms
step:742/1375 train_time:105285ms step_avg:143.83ms
step:743/1375 train_time:105436ms step_avg:143.84ms
step:744/1375 train_time:105585ms step_avg:143.85ms
step:745/1375 train_time:105740ms step_avg:143.86ms
step:746/1375 train_time:105888ms step_avg:143.87ms
step:747/1375 train_time:106040ms step_avg:143.88ms
step:748/1375 train_time:106189ms step_avg:143.89ms
step:749/1375 train_time:106343ms step_avg:143.90ms
step:750/1375 train_time:106495ms step_avg:143.91ms
step:750/1375 val_loss:3.5202 train_time:106571ms step_avg:144.01ms
step:751/1375 train_time:106647ms step_avg:143.92ms
step:752/1375 train_time:106799ms step_avg:143.93ms
step:753/1375 train_time:106947ms step_avg:143.94ms
step:754/1375 train_time:107094ms step_avg:143.94ms
step:755/1375 train_time:107245ms step_avg:143.95ms
step:756/1375 train_time:107394ms step_avg:143.96ms
step:757/1375 train_time:107549ms step_avg:143.97ms
step:758/1375 train_time:107700ms step_avg:143.98ms
step:759/1375 train_time:107851ms step_avg:143.99ms
step:760/1375 train_time:108000ms step_avg:144.00ms
step:761/1375 train_time:108192ms step_avg:144.06ms
step:762/1375 train_time:108343ms step_avg:144.07ms
step:763/1375 train_time:108492ms step_avg:144.08ms
step:764/1375 train_time:108643ms step_avg:144.09ms
step:765/1375 train_time:108791ms step_avg:144.09ms
step:766/1375 train_time:108944ms step_avg:144.11ms
step:767/1375 train_time:109095ms step_avg:144.11ms
step:768/1375 train_time:109249ms step_avg:144.13ms
step:769/1375 train_time:109401ms step_avg:144.14ms
step:770/1375 train_time:109550ms step_avg:144.14ms
step:771/1375 train_time:109699ms step_avg:144.15ms
step:772/1375 train_time:109848ms step_avg:144.16ms
step:773/1375 train_time:109998ms step_avg:144.16ms
step:774/1375 train_time:110149ms step_avg:144.17ms
step:775/1375 train_time:110300ms step_avg:144.18ms
step:776/1375 train_time:110451ms step_avg:144.19ms
step:777/1375 train_time:110601ms step_avg:144.20ms
step:778/1375 train_time:110751ms step_avg:144.21ms
step:779/1375 train_time:110902ms step_avg:144.22ms
step:780/1375 train_time:111052ms step_avg:144.22ms
step:781/1375 train_time:111205ms step_avg:144.23ms
step:782/1375 train_time:111352ms step_avg:144.24ms
step:783/1375 train_time:111504ms step_avg:144.25ms
step:784/1375 train_time:111654ms step_avg:144.26ms
step:785/1375 train_time:111805ms step_avg:144.26ms
step:786/1375 train_time:111953ms step_avg:144.27ms
step:787/1375 train_time:112105ms step_avg:144.28ms
step:788/1375 train_time:112254ms step_avg:144.29ms
step:789/1375 train_time:112407ms step_avg:144.30ms
step:790/1375 train_time:112554ms step_avg:144.30ms
step:791/1375 train_time:112706ms step_avg:144.31ms
step:792/1375 train_time:112855ms step_avg:144.32ms
step:793/1375 train_time:113007ms step_avg:144.33ms
step:794/1375 train_time:113156ms step_avg:144.33ms
step:795/1375 train_time:113310ms step_avg:144.34ms
step:796/1375 train_time:113460ms step_avg:144.35ms
step:797/1375 train_time:113611ms step_avg:144.36ms
step:798/1375 train_time:113763ms step_avg:144.37ms
step:799/1375 train_time:113918ms step_avg:144.38ms
step:800/1375 train_time:114069ms step_avg:144.39ms
step:801/1375 train_time:114216ms step_avg:144.40ms
step:802/1375 train_time:114368ms step_avg:144.40ms
step:803/1375 train_time:114520ms step_avg:144.41ms
step:804/1375 train_time:114669ms step_avg:144.42ms
step:805/1375 train_time:114824ms step_avg:144.43ms
step:806/1375 train_time:114974ms step_avg:144.44ms
step:807/1375 train_time:115123ms step_avg:144.45ms
step:808/1375 train_time:115273ms step_avg:144.45ms
step:809/1375 train_time:115425ms step_avg:144.46ms
step:810/1375 train_time:115573ms step_avg:144.47ms
step:811/1375 train_time:115726ms step_avg:144.48ms
step:812/1375 train_time:115875ms step_avg:144.48ms
step:813/1375 train_time:116025ms step_avg:144.49ms
step:814/1375 train_time:116175ms step_avg:144.50ms
step:815/1375 train_time:116325ms step_avg:144.50ms
step:816/1375 train_time:116479ms step_avg:144.51ms
step:817/1375 train_time:116629ms step_avg:144.52ms
step:818/1375 train_time:116780ms step_avg:144.53ms
step:819/1375 train_time:116934ms step_avg:144.54ms
step:820/1375 train_time:117087ms step_avg:144.55ms
step:821/1375 train_time:117236ms step_avg:144.56ms
step:822/1375 train_time:117388ms step_avg:144.57ms
step:823/1375 train_time:117539ms step_avg:144.57ms
step:824/1375 train_time:117691ms step_avg:144.58ms
step:825/1375 train_time:117844ms step_avg:144.59ms
step:826/1375 train_time:117996ms step_avg:144.60ms
step:827/1375 train_time:118147ms step_avg:144.61ms
step:828/1375 train_time:118299ms step_avg:144.62ms
step:829/1375 train_time:118449ms step_avg:144.63ms
step:830/1375 train_time:118600ms step_avg:144.63ms
step:831/1375 train_time:118750ms step_avg:144.64ms
step:832/1375 train_time:118904ms step_avg:144.65ms
step:833/1375 train_time:119054ms step_avg:144.66ms
step:834/1375 train_time:119206ms step_avg:144.67ms
step:835/1375 train_time:119358ms step_avg:144.68ms
step:836/1375 train_time:119512ms step_avg:144.69ms
step:837/1375 train_time:119664ms step_avg:144.70ms
step:838/1375 train_time:119814ms step_avg:144.70ms
step:839/1375 train_time:119968ms step_avg:144.71ms
step:840/1375 train_time:120116ms step_avg:144.72ms
step:841/1375 train_time:120269ms step_avg:144.73ms
step:842/1375 train_time:120421ms step_avg:144.74ms
step:843/1375 train_time:120570ms step_avg:144.74ms
step:844/1375 train_time:120723ms step_avg:144.75ms
step:845/1375 train_time:120873ms step_avg:144.76ms
step:846/1375 train_time:121027ms step_avg:144.77ms
step:847/1375 train_time:121179ms step_avg:144.78ms
step:848/1375 train_time:121329ms step_avg:144.78ms
step:849/1375 train_time:121481ms step_avg:144.79ms
step:850/1375 train_time:121635ms step_avg:144.80ms
step:851/1375 train_time:121788ms step_avg:144.81ms
step:852/1375 train_time:121941ms step_avg:144.82ms
step:853/1375 train_time:122090ms step_avg:144.83ms
step:854/1375 train_time:122244ms step_avg:144.84ms
step:855/1375 train_time:122395ms step_avg:144.85ms
step:856/1375 train_time:122547ms step_avg:144.85ms
step:857/1375 train_time:122700ms step_avg:144.86ms
step:858/1375 train_time:122854ms step_avg:144.87ms
step:859/1375 train_time:123005ms step_avg:144.88ms
step:860/1375 train_time:123155ms step_avg:144.89ms
step:861/1375 train_time:123308ms step_avg:144.90ms
step:862/1375 train_time:123460ms step_avg:144.91ms
step:863/1375 train_time:123610ms step_avg:144.91ms
step:864/1375 train_time:123763ms step_avg:144.92ms
step:865/1375 train_time:123912ms step_avg:144.93ms
step:866/1375 train_time:124070ms step_avg:144.94ms
step:867/1375 train_time:124220ms step_avg:144.95ms
step:868/1375 train_time:124371ms step_avg:144.95ms
step:869/1375 train_time:124522ms step_avg:144.96ms
step:870/1375 train_time:124675ms step_avg:144.97ms
step:871/1375 train_time:124828ms step_avg:144.98ms
step:872/1375 train_time:124979ms step_avg:144.99ms
step:873/1375 train_time:125130ms step_avg:144.99ms
step:874/1375 train_time:125282ms step_avg:145.00ms
step:875/1375 train_time:125433ms step_avg:145.01ms
step:875/1375 val_loss:3.4683 train_time:125510ms step_avg:145.10ms
step:876/1375 train_time:125586ms step_avg:145.02ms
step:877/1375 train_time:125739ms step_avg:145.03ms
step:878/1375 train_time:125890ms step_avg:145.03ms
step:879/1375 train_time:126042ms step_avg:145.04ms
step:880/1375 train_time:126192ms step_avg:145.05ms
step:881/1375 train_time:126342ms step_avg:145.05ms
step:882/1375 train_time:126497ms step_avg:145.06ms
step:883/1375 train_time:126649ms step_avg:145.07ms
step:884/1375 train_time:126804ms step_avg:145.08ms
step:885/1375 train_time:126953ms step_avg:145.09ms
step:886/1375 train_time:127107ms step_avg:145.10ms
step:887/1375 train_time:127259ms step_avg:145.11ms
step:888/1375 train_time:127411ms step_avg:145.12ms
step:889/1375 train_time:127565ms step_avg:145.13ms
step:890/1375 train_time:127715ms step_avg:145.13ms
step:891/1375 train_time:127866ms step_avg:145.14ms
step:892/1375 train_time:128018ms step_avg:145.14ms
step:893/1375 train_time:128167ms step_avg:145.15ms
step:894/1375 train_time:128320ms step_avg:145.16ms
step:895/1375 train_time:128475ms step_avg:145.17ms
step:896/1375 train_time:128626ms step_avg:145.18ms
step:897/1375 train_time:128777ms step_avg:145.18ms
step:898/1375 train_time:128929ms step_avg:145.19ms
step:899/1375 train_time:129082ms step_avg:145.20ms
step:900/1375 train_time:129231ms step_avg:145.20ms
step:901/1375 train_time:129385ms step_avg:145.21ms
step:902/1375 train_time:129534ms step_avg:145.22ms
step:903/1375 train_time:129686ms step_avg:145.22ms
step:904/1375 train_time:129837ms step_avg:145.23ms
step:905/1375 train_time:129990ms step_avg:145.24ms
step:906/1375 train_time:130144ms step_avg:145.25ms
step:907/1375 train_time:130299ms step_avg:145.26ms
step:908/1375 train_time:130450ms step_avg:145.27ms
step:909/1375 train_time:130604ms step_avg:145.28ms
step:910/1375 train_time:130760ms step_avg:145.29ms
step:911/1375 train_time:130911ms step_avg:145.30ms
step:912/1375 train_time:131064ms step_avg:145.30ms
step:913/1375 train_time:131218ms step_avg:145.31ms
step:914/1375 train_time:131367ms step_avg:145.32ms
step:915/1375 train_time:131521ms step_avg:145.33ms
step:916/1375 train_time:131670ms step_avg:145.33ms
step:917/1375 train_time:131824ms step_avg:145.34ms
step:918/1375 train_time:131977ms step_avg:145.35ms
step:919/1375 train_time:132132ms step_avg:145.36ms
step:920/1375 train_time:132284ms step_avg:145.37ms
step:921/1375 train_time:132435ms step_avg:145.37ms
step:922/1375 train_time:132591ms step_avg:145.38ms
step:923/1375 train_time:132745ms step_avg:145.39ms
step:924/1375 train_time:132899ms step_avg:145.40ms
step:925/1375 train_time:133053ms step_avg:145.41ms
step:926/1375 train_time:133207ms step_avg:145.42ms
step:927/1375 train_time:133358ms step_avg:145.43ms
step:928/1375 train_time:133509ms step_avg:145.43ms
step:929/1375 train_time:133666ms step_avg:145.45ms
step:930/1375 train_time:133823ms step_avg:145.46ms
step:931/1375 train_time:133973ms step_avg:145.46ms
step:932/1375 train_time:134125ms step_avg:145.47ms
step:933/1375 train_time:134278ms step_avg:145.48ms
step:934/1375 train_time:134429ms step_avg:145.49ms
step:935/1375 train_time:134584ms step_avg:145.50ms
step:936/1375 train_time:134737ms step_avg:145.50ms
step:937/1375 train_time:134894ms step_avg:145.52ms
step:938/1375 train_time:135048ms step_avg:145.53ms
step:939/1375 train_time:135203ms step_avg:145.54ms
step:940/1375 train_time:135356ms step_avg:145.54ms
step:941/1375 train_time:135507ms step_avg:145.55ms
step:942/1375 train_time:135659ms step_avg:145.56ms
step:943/1375 train_time:135815ms step_avg:145.57ms
step:944/1375 train_time:135975ms step_avg:145.58ms
step:945/1375 train_time:136129ms step_avg:145.59ms
step:946/1375 train_time:136286ms step_avg:145.60ms
step:947/1375 train_time:136438ms step_avg:145.61ms
step:948/1375 train_time:136590ms step_avg:145.62ms
step:949/1375 train_time:136745ms step_avg:145.63ms
step:950/1375 train_time:136896ms step_avg:145.63ms
step:951/1375 train_time:137086ms step_avg:145.68ms
step:952/1375 train_time:137238ms step_avg:145.69ms
step:953/1375 train_time:137391ms step_avg:145.70ms
step:954/1375 train_time:137545ms step_avg:145.70ms
step:955/1375 train_time:137696ms step_avg:145.71ms
step:956/1375 train_time:137848ms step_avg:145.72ms
step:957/1375 train_time:138003ms step_avg:145.73ms
step:958/1375 train_time:138159ms step_avg:145.74ms
step:959/1375 train_time:138314ms step_avg:145.75ms
step:960/1375 train_time:138468ms step_avg:145.76ms
step:961/1375 train_time:138620ms step_avg:145.76ms
step:962/1375 train_time:138770ms step_avg:145.77ms
step:963/1375 train_time:138928ms step_avg:145.78ms
step:964/1375 train_time:139081ms step_avg:145.79ms
step:965/1375 train_time:139232ms step_avg:145.79ms
step:966/1375 train_time:139385ms step_avg:145.80ms
step:967/1375 train_time:139538ms step_avg:145.81ms
step:968/1375 train_time:139689ms step_avg:145.81ms
step:969/1375 train_time:139843ms step_avg:145.82ms
step:970/1375 train_time:139993ms step_avg:145.83ms
step:971/1375 train_time:140146ms step_avg:145.83ms
step:972/1375 train_time:140299ms step_avg:145.84ms
step:973/1375 train_time:140450ms step_avg:145.85ms
step:974/1375 train_time:140605ms step_avg:145.86ms
step:975/1375 train_time:140758ms step_avg:145.86ms
step:976/1375 train_time:140908ms step_avg:145.87ms
step:977/1375 train_time:141062ms step_avg:145.88ms
step:978/1375 train_time:141213ms step_avg:145.88ms
step:979/1375 train_time:141366ms step_avg:145.89ms
step:980/1375 train_time:141518ms step_avg:145.90ms
step:981/1375 train_time:141670ms step_avg:145.90ms
step:982/1375 train_time:141824ms step_avg:145.91ms
step:983/1375 train_time:141975ms step_avg:145.91ms
step:984/1375 train_time:142126ms step_avg:145.92ms
step:985/1375 train_time:142279ms step_avg:145.93ms
step:986/1375 train_time:142434ms step_avg:145.94ms
step:987/1375 train_time:142585ms step_avg:145.94ms
step:988/1375 train_time:142738ms step_avg:145.95ms
step:989/1375 train_time:142889ms step_avg:145.95ms
step:990/1375 train_time:143045ms step_avg:145.96ms
step:991/1375 train_time:143196ms step_avg:145.97ms
step:992/1375 train_time:143353ms step_avg:145.98ms
step:993/1375 train_time:143515ms step_avg:146.00ms
step:994/1375 train_time:143669ms step_avg:146.00ms
step:995/1375 train_time:143823ms step_avg:146.01ms
step:996/1375 train_time:143972ms step_avg:146.02ms
step:997/1375 train_time:144124ms step_avg:146.02ms
step:998/1375 train_time:144277ms step_avg:146.03ms
step:999/1375 train_time:144428ms step_avg:146.03ms
step:1000/1375 train_time:144580ms step_avg:146.04ms
step:1000/1375 val_loss:3.4032 train_time:144658ms step_avg:146.12ms
step:1001/1375 train_time:144736ms step_avg:146.05ms
step:1002/1375 train_time:144890ms step_avg:146.06ms
step:1003/1375 train_time:145047ms step_avg:146.07ms
step:1004/1375 train_time:145200ms step_avg:146.08ms
step:1005/1375 train_time:145352ms step_avg:146.08ms
step:1006/1375 train_time:145502ms step_avg:146.09ms
step:1007/1375 train_time:145658ms step_avg:146.10ms
step:1008/1375 train_time:145814ms step_avg:146.11ms
step:1009/1375 train_time:145973ms step_avg:146.12ms
step:1010/1375 train_time:146123ms step_avg:146.12ms
step:1011/1375 train_time:146276ms step_avg:146.13ms
step:1012/1375 train_time:146426ms step_avg:146.13ms
step:1013/1375 train_time:146580ms step_avg:146.14ms
step:1014/1375 train_time:146732ms step_avg:146.15ms
step:1015/1375 train_time:146886ms step_avg:146.16ms
step:1016/1375 train_time:147039ms step_avg:146.16ms
step:1017/1375 train_time:147193ms step_avg:146.17ms
step:1018/1375 train_time:147343ms step_avg:146.17ms
step:1019/1375 train_time:147498ms step_avg:146.18ms
step:1020/1375 train_time:147654ms step_avg:146.19ms
step:1021/1375 train_time:147805ms step_avg:146.20ms
step:1022/1375 train_time:147959ms step_avg:146.20ms
step:1023/1375 train_time:148115ms step_avg:146.21ms
step:1024/1375 train_time:148268ms step_avg:146.22ms
step:1025/1375 train_time:148421ms step_avg:146.23ms
step:1026/1375 train_time:148575ms step_avg:146.24ms
step:1027/1375 train_time:148728ms step_avg:146.24ms
step:1028/1375 train_time:148883ms step_avg:146.25ms
step:1029/1375 train_time:149038ms step_avg:146.26ms
step:1030/1375 train_time:149193ms step_avg:146.27ms
step:1031/1375 train_time:149345ms step_avg:146.27ms
step:1032/1375 train_time:149498ms step_avg:146.28ms
step:1033/1375 train_time:149652ms step_avg:146.29ms
step:1034/1375 train_time:149805ms step_avg:146.29ms
step:1035/1375 train_time:149961ms step_avg:146.30ms
step:1036/1375 train_time:150118ms step_avg:146.31ms
step:1037/1375 train_time:150275ms step_avg:146.32ms
step:1038/1375 train_time:150429ms step_avg:146.33ms
step:1039/1375 train_time:150581ms step_avg:146.34ms
step:1040/1375 train_time:150736ms step_avg:146.35ms
step:1041/1375 train_time:150889ms step_avg:146.35ms
step:1042/1375 train_time:151041ms step_avg:146.36ms
step:1043/1375 train_time:151192ms step_avg:146.36ms
step:1044/1375 train_time:151351ms step_avg:146.37ms
step:1045/1375 train_time:151505ms step_avg:146.38ms
step:1046/1375 train_time:151658ms step_avg:146.39ms
step:1047/1375 train_time:151814ms step_avg:146.40ms
step:1048/1375 train_time:151967ms step_avg:146.40ms
step:1049/1375 train_time:152121ms step_avg:146.41ms
step:1050/1375 train_time:152278ms step_avg:146.42ms
step:1051/1375 train_time:152437ms step_avg:146.43ms
step:1052/1375 train_time:152591ms step_avg:146.44ms
step:1053/1375 train_time:152742ms step_avg:146.44ms
step:1054/1375 train_time:152898ms step_avg:146.45ms
step:1055/1375 train_time:153052ms step_avg:146.46ms
step:1056/1375 train_time:153204ms step_avg:146.47ms
step:1057/1375 train_time:153359ms step_avg:146.47ms
step:1058/1375 train_time:153518ms step_avg:146.49ms
step:1059/1375 train_time:153674ms step_avg:146.50ms
step:1060/1375 train_time:153827ms step_avg:146.50ms
step:1061/1375 train_time:153979ms step_avg:146.51ms
step:1062/1375 train_time:154134ms step_avg:146.52ms
step:1063/1375 train_time:154288ms step_avg:146.52ms
step:1064/1375 train_time:154442ms step_avg:146.53ms
step:1065/1375 train_time:154598ms step_avg:146.54ms
step:1066/1375 train_time:154756ms step_avg:146.55ms
step:1067/1375 train_time:154912ms step_avg:146.56ms
step:1068/1375 train_time:155063ms step_avg:146.56ms
step:1069/1375 train_time:155223ms step_avg:146.58ms
step:1070/1375 train_time:155376ms step_avg:146.58ms
step:1071/1375 train_time:155532ms step_avg:146.59ms
step:1072/1375 train_time:155683ms step_avg:146.59ms
step:1073/1375 train_time:155836ms step_avg:146.60ms
step:1074/1375 train_time:155989ms step_avg:146.61ms
step:1075/1375 train_time:156144ms step_avg:146.61ms
step:1076/1375 train_time:156297ms step_avg:146.62ms
step:1077/1375 train_time:156451ms step_avg:146.63ms
step:1078/1375 train_time:156608ms step_avg:146.64ms
step:1079/1375 train_time:156766ms step_avg:146.65ms
step:1080/1375 train_time:156921ms step_avg:146.66ms
step:1081/1375 train_time:157075ms step_avg:146.66ms
step:1082/1375 train_time:157229ms step_avg:146.67ms
step:1083/1375 train_time:157382ms step_avg:146.67ms
step:1084/1375 train_time:157540ms step_avg:146.69ms
step:1085/1375 train_time:157692ms step_avg:146.69ms
step:1086/1375 train_time:157847ms step_avg:146.70ms
step:1087/1375 train_time:158004ms step_avg:146.71ms
step:1088/1375 train_time:158158ms step_avg:146.71ms
step:1089/1375 train_time:158319ms step_avg:146.73ms
step:1090/1375 train_time:158480ms step_avg:146.74ms
step:1091/1375 train_time:158633ms step_avg:146.75ms
step:1092/1375 train_time:158786ms step_avg:146.75ms
step:1093/1375 train_time:158939ms step_avg:146.76ms
step:1094/1375 train_time:159093ms step_avg:146.76ms
step:1095/1375 train_time:159246ms step_avg:146.77ms
step:1096/1375 train_time:159406ms step_avg:146.78ms
step:1097/1375 train_time:159560ms step_avg:146.79ms
step:1098/1375 train_time:159715ms step_avg:146.80ms
step:1099/1375 train_time:159867ms step_avg:146.80ms
step:1100/1375 train_time:160019ms step_avg:146.81ms
step:1101/1375 train_time:160173ms step_avg:146.81ms
step:1102/1375 train_time:160327ms step_avg:146.82ms
step:1103/1375 train_time:160481ms step_avg:146.83ms
step:1104/1375 train_time:160635ms step_avg:146.83ms
step:1105/1375 train_time:160791ms step_avg:146.84ms
step:1106/1375 train_time:160944ms step_avg:146.85ms
step:1107/1375 train_time:161097ms step_avg:146.85ms
step:1108/1375 train_time:161255ms step_avg:146.86ms
step:1109/1375 train_time:161408ms step_avg:146.87ms
step:1110/1375 train_time:161561ms step_avg:146.87ms
step:1111/1375 train_time:161719ms step_avg:146.88ms
step:1112/1375 train_time:161874ms step_avg:146.89ms
step:1113/1375 train_time:162026ms step_avg:146.90ms
step:1114/1375 train_time:162182ms step_avg:146.90ms
step:1115/1375 train_time:162337ms step_avg:146.91ms
step:1116/1375 train_time:162488ms step_avg:146.92ms
step:1117/1375 train_time:162647ms step_avg:146.93ms
step:1118/1375 train_time:162804ms step_avg:146.94ms
step:1119/1375 train_time:162958ms step_avg:146.94ms
step:1120/1375 train_time:163113ms step_avg:146.95ms
step:1121/1375 train_time:163265ms step_avg:146.95ms
step:1122/1375 train_time:163420ms step_avg:146.96ms
step:1123/1375 train_time:163575ms step_avg:146.97ms
step:1124/1375 train_time:163734ms step_avg:146.98ms
step:1125/1375 train_time:163888ms step_avg:146.98ms
step:1125/1375 val_loss:3.3496 train_time:163966ms step_avg:147.05ms
step:1126/1375 train_time:164044ms step_avg:146.99ms
step:1127/1375 train_time:164200ms step_avg:147.00ms
step:1128/1375 train_time:164355ms step_avg:147.01ms
step:1129/1375 train_time:164515ms step_avg:147.02ms
step:1130/1375 train_time:164668ms step_avg:147.03ms
step:1131/1375 train_time:164826ms step_avg:147.03ms
step:1132/1375 train_time:164980ms step_avg:147.04ms
step:1133/1375 train_time:165135ms step_avg:147.05ms
step:1134/1375 train_time:165290ms step_avg:147.06ms
step:1135/1375 train_time:165444ms step_avg:147.06ms
step:1136/1375 train_time:165603ms step_avg:147.07ms
step:1137/1375 train_time:165757ms step_avg:147.08ms
step:1138/1375 train_time:165911ms step_avg:147.08ms
step:1139/1375 train_time:166067ms step_avg:147.09ms
step:1140/1375 train_time:166222ms step_avg:147.10ms
step:1141/1375 train_time:166419ms step_avg:147.14ms
step:1142/1375 train_time:166571ms step_avg:147.15ms
step:1143/1375 train_time:166729ms step_avg:147.16ms
step:1144/1375 train_time:166885ms step_avg:147.17ms
step:1145/1375 train_time:167037ms step_avg:147.17ms
step:1146/1375 train_time:167194ms step_avg:147.18ms
step:1147/1375 train_time:167351ms step_avg:147.19ms
step:1148/1375 train_time:167507ms step_avg:147.19ms
step:1149/1375 train_time:167663ms step_avg:147.20ms
step:1150/1375 train_time:167817ms step_avg:147.21ms
step:1151/1375 train_time:167971ms step_avg:147.21ms
step:1152/1375 train_time:168126ms step_avg:147.22ms
step:1153/1375 train_time:168282ms step_avg:147.23ms
step:1154/1375 train_time:168436ms step_avg:147.23ms
step:1155/1375 train_time:168592ms step_avg:147.24ms
step:1156/1375 train_time:168752ms step_avg:147.25ms
step:1157/1375 train_time:168910ms step_avg:147.26ms
step:1158/1375 train_time:169064ms step_avg:147.27ms
step:1159/1375 train_time:169221ms step_avg:147.28ms
step:1160/1375 train_time:169377ms step_avg:147.28ms
step:1161/1375 train_time:169532ms step_avg:147.29ms
step:1162/1375 train_time:169687ms step_avg:147.30ms
step:1163/1375 train_time:169841ms step_avg:147.30ms
step:1164/1375 train_time:169996ms step_avg:147.31ms
step:1165/1375 train_time:170148ms step_avg:147.31ms
step:1166/1375 train_time:170304ms step_avg:147.32ms
step:1167/1375 train_time:170458ms step_avg:147.33ms
step:1168/1375 train_time:170611ms step_avg:147.33ms
step:1169/1375 train_time:170767ms step_avg:147.34ms
step:1170/1375 train_time:170921ms step_avg:147.35ms
step:1171/1375 train_time:171078ms step_avg:147.35ms
step:1172/1375 train_time:171232ms step_avg:147.36ms
step:1173/1375 train_time:171387ms step_avg:147.37ms
step:1174/1375 train_time:171550ms step_avg:147.38ms
step:1175/1375 train_time:171707ms step_avg:147.39ms
step:1176/1375 train_time:171867ms step_avg:147.40ms
step:1177/1375 train_time:172029ms step_avg:147.41ms
step:1178/1375 train_time:172183ms step_avg:147.42ms
step:1179/1375 train_time:172338ms step_avg:147.42ms
step:1180/1375 train_time:172502ms step_avg:147.44ms
step:1181/1375 train_time:172657ms step_avg:147.44ms
step:1182/1375 train_time:172807ms step_avg:147.45ms
step:1183/1375 train_time:172966ms step_avg:147.46ms
step:1184/1375 train_time:173122ms step_avg:147.46ms
step:1185/1375 train_time:173281ms step_avg:147.47ms
step:1186/1375 train_time:173435ms step_avg:147.48ms
step:1187/1375 train_time:173600ms step_avg:147.49ms
step:1188/1375 train_time:173751ms step_avg:147.50ms
step:1189/1375 train_time:173910ms step_avg:147.51ms
step:1190/1375 train_time:174066ms step_avg:147.51ms
step:1191/1375 train_time:174224ms step_avg:147.52ms
step:1192/1375 train_time:174378ms step_avg:147.53ms
step:1193/1375 train_time:174533ms step_avg:147.53ms
step:1194/1375 train_time:174691ms step_avg:147.54ms
step:1195/1375 train_time:174845ms step_avg:147.55ms
step:1196/1375 train_time:175002ms step_avg:147.56ms
step:1197/1375 train_time:175159ms step_avg:147.56ms
step:1198/1375 train_time:175318ms step_avg:147.57ms
step:1199/1375 train_time:175472ms step_avg:147.58ms
step:1200/1375 train_time:175625ms step_avg:147.58ms
step:1201/1375 train_time:175781ms step_avg:147.59ms
step:1202/1375 train_time:175948ms step_avg:147.61ms
step:1203/1375 train_time:176107ms step_avg:147.62ms
step:1204/1375 train_time:176263ms step_avg:147.62ms
step:1205/1375 train_time:176417ms step_avg:147.63ms
step:1206/1375 train_time:176573ms step_avg:147.64ms
step:1207/1375 train_time:176728ms step_avg:147.64ms
step:1208/1375 train_time:176885ms step_avg:147.65ms
step:1209/1375 train_time:177039ms step_avg:147.66ms
step:1210/1375 train_time:177200ms step_avg:147.67ms
step:1211/1375 train_time:177354ms step_avg:147.67ms
step:1212/1375 train_time:177509ms step_avg:147.68ms
step:1213/1375 train_time:177664ms step_avg:147.68ms
step:1214/1375 train_time:177821ms step_avg:147.69ms
step:1215/1375 train_time:177976ms step_avg:147.70ms
step:1216/1375 train_time:178127ms step_avg:147.70ms
step:1217/1375 train_time:178283ms step_avg:147.71ms
step:1218/1375 train_time:178437ms step_avg:147.71ms
step:1219/1375 train_time:178592ms step_avg:147.72ms
step:1220/1375 train_time:178746ms step_avg:147.72ms
step:1221/1375 train_time:178901ms step_avg:147.73ms
step:1222/1375 train_time:179056ms step_avg:147.74ms
step:1223/1375 train_time:179211ms step_avg:147.74ms
step:1224/1375 train_time:179371ms step_avg:147.75ms
step:1225/1375 train_time:179527ms step_avg:147.76ms
step:1226/1375 train_time:179683ms step_avg:147.77ms
step:1227/1375 train_time:179839ms step_avg:147.77ms
step:1228/1375 train_time:179997ms step_avg:147.78ms
step:1229/1375 train_time:180150ms step_avg:147.79ms
step:1230/1375 train_time:180311ms step_avg:147.80ms
step:1231/1375 train_time:180470ms step_avg:147.81ms
step:1232/1375 train_time:180628ms step_avg:147.81ms
step:1233/1375 train_time:180783ms step_avg:147.82ms
step:1234/1375 train_time:180939ms step_avg:147.83ms
step:1235/1375 train_time:181096ms step_avg:147.83ms
step:1236/1375 train_time:181251ms step_avg:147.84ms
step:1237/1375 train_time:181405ms step_avg:147.84ms
step:1238/1375 train_time:181569ms step_avg:147.86ms
step:1239/1375 train_time:181725ms step_avg:147.86ms
step:1240/1375 train_time:181884ms step_avg:147.87ms
step:1241/1375 train_time:182048ms step_avg:147.89ms
step:1242/1375 train_time:182203ms step_avg:147.89ms
step:1243/1375 train_time:182362ms step_avg:147.90ms
step:1244/1375 train_time:182518ms step_avg:147.91ms
step:1245/1375 train_time:182672ms step_avg:147.91ms
step:1246/1375 train_time:182826ms step_avg:147.92ms
step:1247/1375 train_time:182985ms step_avg:147.93ms
step:1248/1375 train_time:183141ms step_avg:147.93ms
step:1249/1375 train_time:183295ms step_avg:147.94ms
step:1250/1375 train_time:183448ms step_avg:147.94ms
step:1250/1375 val_loss:3.3041 train_time:183529ms step_avg:148.01ms
step:1251/1375 train_time:183609ms step_avg:147.95ms
step:1252/1375 train_time:183764ms step_avg:147.96ms
step:1253/1375 train_time:183920ms step_avg:147.96ms
step:1254/1375 train_time:184072ms step_avg:147.97ms
step:1255/1375 train_time:184238ms step_avg:147.98ms
step:1256/1375 train_time:184394ms step_avg:147.99ms
step:1257/1375 train_time:184549ms step_avg:147.99ms
step:1258/1375 train_time:184708ms step_avg:148.00ms
step:1259/1375 train_time:184866ms step_avg:148.01ms
step:1260/1375 train_time:185019ms step_avg:148.02ms
step:1261/1375 train_time:185176ms step_avg:148.02ms
step:1262/1375 train_time:185335ms step_avg:148.03ms
step:1263/1375 train_time:185490ms step_avg:148.04ms
step:1264/1375 train_time:185644ms step_avg:148.04ms
step:1265/1375 train_time:185800ms step_avg:148.05ms
step:1266/1375 train_time:185958ms step_avg:148.06ms
step:1267/1375 train_time:186115ms step_avg:148.06ms
step:1268/1375 train_time:186272ms step_avg:148.07ms
step:1269/1375 train_time:186432ms step_avg:148.08ms
step:1270/1375 train_time:186587ms step_avg:148.08ms
step:1271/1375 train_time:186742ms step_avg:148.09ms
step:1272/1375 train_time:186899ms step_avg:148.10ms
step:1273/1375 train_time:187053ms step_avg:148.10ms
step:1274/1375 train_time:187207ms step_avg:148.11ms
step:1275/1375 train_time:187364ms step_avg:148.11ms
step:1276/1375 train_time:187517ms step_avg:148.12ms
step:1277/1375 train_time:187673ms step_avg:148.12ms
step:1278/1375 train_time:187827ms step_avg:148.13ms
step:1279/1375 train_time:187984ms step_avg:148.14ms
step:1280/1375 train_time:188147ms step_avg:148.15ms
step:1281/1375 train_time:188303ms step_avg:148.15ms
step:1282/1375 train_time:188457ms step_avg:148.16ms
step:1283/1375 train_time:188612ms step_avg:148.16ms
step:1284/1375 train_time:188770ms step_avg:148.17ms
step:1285/1375 train_time:188924ms step_avg:148.18ms
step:1286/1375 train_time:189082ms step_avg:148.18ms
step:1287/1375 train_time:189237ms step_avg:148.19ms
step:1288/1375 train_time:189392ms step_avg:148.19ms
step:1289/1375 train_time:189553ms step_avg:148.20ms
step:1290/1375 train_time:189713ms step_avg:148.21ms
step:1291/1375 train_time:189870ms step_avg:148.22ms
step:1292/1375 train_time:190026ms step_avg:148.23ms
step:1293/1375 train_time:190187ms step_avg:148.24ms
step:1294/1375 train_time:190343ms step_avg:148.24ms
step:1295/1375 train_time:190500ms step_avg:148.25ms
step:1296/1375 train_time:190659ms step_avg:148.26ms
step:1297/1375 train_time:190816ms step_avg:148.26ms
step:1298/1375 train_time:190970ms step_avg:148.27ms
step:1299/1375 train_time:191125ms step_avg:148.27ms
step:1300/1375 train_time:191281ms step_avg:148.28ms
step:1301/1375 train_time:191437ms step_avg:148.29ms
step:1302/1375 train_time:191597ms step_avg:148.29ms
step:1303/1375 train_time:191755ms step_avg:148.30ms
step:1304/1375 train_time:191912ms step_avg:148.31ms
step:1305/1375 train_time:192065ms step_avg:148.31ms
step:1306/1375 train_time:192223ms step_avg:148.32ms
step:1307/1375 train_time:192376ms step_avg:148.32ms
step:1308/1375 train_time:192534ms step_avg:148.33ms
step:1309/1375 train_time:192688ms step_avg:148.34ms
step:1310/1375 train_time:192843ms step_avg:148.34ms
step:1311/1375 train_time:192997ms step_avg:148.34ms
step:1312/1375 train_time:193149ms step_avg:148.35ms
step:1313/1375 train_time:193304ms step_avg:148.35ms
step:1314/1375 train_time:193460ms step_avg:148.36ms
step:1315/1375 train_time:193616ms step_avg:148.36ms
step:1316/1375 train_time:193770ms step_avg:148.37ms
step:1317/1375 train_time:193924ms step_avg:148.37ms
step:1318/1375 train_time:194085ms step_avg:148.38ms
step:1319/1375 train_time:194241ms step_avg:148.39ms
step:1320/1375 train_time:194398ms step_avg:148.40ms
step:1321/1375 train_time:194555ms step_avg:148.40ms
step:1322/1375 train_time:194714ms step_avg:148.41ms
step:1323/1375 train_time:194867ms step_avg:148.41ms
step:1324/1375 train_time:195022ms step_avg:148.42ms
step:1325/1375 train_time:195179ms step_avg:148.42ms
step:1326/1375 train_time:195339ms step_avg:148.43ms
step:1327/1375 train_time:195492ms step_avg:148.44ms
step:1328/1375 train_time:195648ms step_avg:148.44ms
step:1329/1375 train_time:195822ms step_avg:148.46ms
step:1330/1375 train_time:195981ms step_avg:148.47ms
step:1331/1375 train_time:196180ms step_avg:148.51ms
step:1332/1375 train_time:196345ms step_avg:148.52ms
step:1333/1375 train_time:196502ms step_avg:148.53ms
step:1334/1375 train_time:196659ms step_avg:148.53ms
step:1335/1375 train_time:196810ms step_avg:148.54ms
step:1336/1375 train_time:196974ms step_avg:148.55ms
step:1337/1375 train_time:197133ms step_avg:148.56ms
step:1338/1375 train_time:197291ms step_avg:148.56ms
step:1339/1375 train_time:197448ms step_avg:148.57ms
step:1340/1375 train_time:197609ms step_avg:148.58ms
step:1341/1375 train_time:197762ms step_avg:148.58ms
step:1342/1375 train_time:197921ms step_avg:148.59ms
step:1343/1375 train_time:198077ms step_avg:148.60ms
step:1344/1375 train_time:198233ms step_avg:148.60ms
step:1345/1375 train_time:198391ms step_avg:148.61ms
step:1346/1375 train_time:198545ms step_avg:148.61ms
step:1347/1375 train_time:198703ms step_avg:148.62ms
step:1348/1375 train_time:198859ms step_avg:148.62ms
step:1349/1375 train_time:199019ms step_avg:148.63ms
step:1350/1375 train_time:199174ms step_avg:148.64ms
step:1351/1375 train_time:199330ms step_avg:148.64ms
step:1352/1375 train_time:199491ms step_avg:148.65ms
step:1353/1375 train_time:199651ms step_avg:148.66ms
step:1354/1375 train_time:199809ms step_avg:148.67ms
step:1355/1375 train_time:199967ms step_avg:148.67ms
step:1356/1375 train_time:200123ms step_avg:148.68ms
step:1357/1375 train_time:200282ms step_avg:148.69ms
step:1358/1375 train_time:200441ms step_avg:148.70ms
step:1359/1375 train_time:200600ms step_avg:148.70ms
step:1360/1375 train_time:200761ms step_avg:148.71ms
step:1361/1375 train_time:200921ms step_avg:148.72ms
step:1362/1375 train_time:201078ms step_avg:148.73ms
step:1363/1375 train_time:201242ms step_avg:148.74ms
step:1364/1375 train_time:201397ms step_avg:148.74ms
step:1365/1375 train_time:201549ms step_avg:148.74ms
step:1366/1375 train_time:201707ms step_avg:148.75ms
step:1367/1375 train_time:201863ms step_avg:148.76ms
step:1368/1375 train_time:202023ms step_avg:148.76ms
step:1369/1375 train_time:202190ms step_avg:148.78ms
step:1370/1375 train_time:202348ms step_avg:148.79ms
step:1371/1375 train_time:202502ms step_avg:148.79ms
step:1372/1375 train_time:202665ms step_avg:148.80ms
step:1373/1375 train_time:202819ms step_avg:148.80ms
step:1374/1375 train_time:202978ms step_avg:148.81ms
step:1375/1375 train_time:203135ms step_avg:148.82ms
step:1375/1375 val_loss:3.2789 train_time:203210ms step_avg:148.87ms
peak memory consumption: 31561 MiB
